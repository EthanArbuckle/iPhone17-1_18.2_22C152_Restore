unint64_t LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(LayerCycleAndFootprintEstimator *this, int a2, unsigned int a3)
{
  L2CycleEstimator **v6;
  L2CycleEstimator **v7;
  unint64_t v8;
  L2CycleEstimator *v9;
  unint64_t MaxCycle;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;

  v6 = *(L2CycleEstimator ***)this;
  v7 = (L2CycleEstimator **)*((void *)this + 1);
  if (*(L2CycleEstimator ***)this == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      MaxCycle = L2CycleEstimator::GetMaxCycle(v9, a2);
      if (v8 <= MaxCycle) {
        v8 = MaxCycle;
      }
    }
    while (v6 != v7);
  }
  v11 = ComputeCycleEstimator::GetMaxCycle(*((ComputeCycleEstimator **)this + 3), a2 & a3);
  if (v8 <= v11) {
    v12 = v11;
  }
  else {
    v12 = v8;
  }
  result = L2CycleEstimator::GetMaxCycle(*((L2CycleEstimator **)this + 4), a3);
  if (v12 > result) {
    return v12;
  }
  return result;
}

unint64_t LayerCycleAndFootprintEstimator::GetMaxCycle(LayerCycleAndFootprintEstimator *this, int a2, unsigned int a3)
{
  char v3 = a2;
  unint64_t MaxCycleWithoutStall = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(this, a2, a3);
  if ((v3 & 1) == 0) {
    MaxCycleWithoutStall += LayerCycleAndFootprintEstimator::GetOverheadCycles((uint64_t **)this);
  }
  return MaxCycleWithoutStall;
}

uint64_t LayerCycleAndFootprintEstimator::GetOverheadCycles(uint64_t **this)
{
  LayerCycleAndFootprintEstimator::GetReadBehaviors(this, &v6);
  if (v6 == v7)
  {
    uint64_t v2 = 0;
    if (!v6) {
      return this[4][16] + v2;
    }
    goto LABEL_5;
  }
  uint64_t v2 = 0;
  char v3 = v6;
  do
  {
    uint64_t v4 = *(void *)v3;
    v3 += 8;
    v2 += *(void *)(v4 + 120) + 1;
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    v7 = v6;
    operator delete(v6);
  }
  return this[4][16] + v2;
}

void LayerCycleAndFootprintEstimator::GetReadBehaviors(uint64_t **this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *this;
  char v3 = this[1];
  if (*this != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      uint64_t v7 = *v2;
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v8 = (v5 - *a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v6 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)v6, v11);
        }
        else {
          v12 = 0;
        }
        v13 = &v12[8 * v8];
        *(void *)v13 = v7;
        v5 = v13 + 8;
        v15 = *a2;
        v14 = a2[1];
        if (v14 != *a2)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *a2;
        }
        *a2 = v13;
        a2[1] = v5;
        a2[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)v5 = v7;
        v5 += 8;
      }
      a2[1] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_23CB1FD14(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264E82AD8, MEMORY[0x263F8C060]);
}

void sub_23CB1FD94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, _OWORD *a4)
{
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)a3);
  uint64_t v81 = v8;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v9 = *(void *)(a3 + 144);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 20);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*(char *)(a3 + 159) >= 0) {
      unint64_t v11 = (const void *)(a3 + 136);
    }
    else {
      unint64_t v11 = *(const void **)(a3 + 136);
    }
    memmove(p_p, v11, v9);
  }
  strcpy((char *)p_p + v9, "_resident_time_const");
  *(void *)a1 = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 8) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 16));
  uint64_t v81 = v13;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v14 = *(void *)(a3 + 144);
  }
  v15 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if (*(char *)(a3 + 159) >= 0) {
      uint64_t v16 = (const void *)(a3 + 136);
    }
    else {
      uint64_t v16 = *(const void **)(a3 + 136);
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_nonresident_time_const");
  *(void *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 24) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 32));
  uint64_t v81 = v18;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v19 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v19 = *(void *)(a3 + 144);
  }
  v20 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v19 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v21 = (const void *)(a3 + 136);
    }
    else {
      v21 = *(const void **)(a3 + 136);
    }
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, "_nonresident_time_if_chain_producer_const");
  *(void *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 40) = v22;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 48));
  uint64_t v81 = v23;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v24 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v24 = *(void *)(a3 + 144);
  }
  v25 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v26 = (const void *)(a3 + 136);
    }
    else {
      v26 = *(const void **)(a3 + 136);
    }
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "_nonresident_time_if_chain_consumer_const");
  *(void *)(a1 + 48) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 56) = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 64));
  uint64_t v81 = v28;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v29 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v29 = *(void *)(a3 + 144);
  }
  v30 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v29)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v31 = (const void *)(a3 + 136);
    }
    else {
      v31 = *(const void **)(a3 + 136);
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "_nonresident_time_if_l2_dep_producer_const");
  *(void *)(a1 + 64) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 72) = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 80));
  uint64_t v81 = v33;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v34 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v34 = *(void *)(a3 + 144);
  }
  v35 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v36 = (const void *)(a3 + 136);
    }
    else {
      v36 = *(const void **)(a3 + 136);
    }
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, "_nonresident_time_if_l2_dep_consumer_const");
  *(void *)(a1 + 80) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 88) = v37;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 96));
  uint64_t v81 = v38;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v39 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v39 = *(void *)(a3 + 144);
  }
  v40 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v39)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v41 = (const void *)(a3 + 136);
    }
    else {
      v41 = *(const void **)(a3 + 136);
    }
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, "_chain_time_const");
  *(void *)(a1 + 96) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 104) = v42;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 8));
  uint64_t v81 = v43;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v44 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v44 = *(void *)(a3 + 144);
  }
  v45 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 20);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v44)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v46 = (const void *)(a3 + 136);
    }
    else {
      v46 = *(const void **)(a3 + 136);
    }
    memmove(v45, v46, v44);
  }
  strcpy((char *)v45 + v44, "_resident_cost_const");
  *(void *)(a1 + 112) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 120) = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 24));
  uint64_t v81 = v48;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v49 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v49 = *(void *)(a3 + 144);
  }
  v50 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v51 = (const void *)(a3 + 136);
    }
    else {
      v51 = *(const void **)(a3 + 136);
    }
    memmove(v50, v51, v49);
  }
  strcpy((char *)v50 + v49, "_nonresident_cost_const");
  *(void *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 136) = v52;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 40));
  uint64_t v81 = v53;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v54 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v54 = *(void *)(a3 + 144);
  }
  v55 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v54 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v54)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v56 = (const void *)(a3 + 136);
    }
    else {
      v56 = *(const void **)(a3 + 136);
    }
    memmove(v55, v56, v54);
  }
  strcpy((char *)v55 + v54, "_nonresident_cost_if_chain_producer_const");
  *(void *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 152) = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 56));
  uint64_t v81 = v58;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v59 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v59 = *(void *)(a3 + 144);
  }
  v60 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v59 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v59)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v61 = (const void *)(a3 + 136);
    }
    else {
      v61 = *(const void **)(a3 + 136);
    }
    memmove(v60, v61, v59);
  }
  strcpy((char *)v60 + v59, "_nonresident_cost_if_chain_consumer_const");
  *(void *)(a1 + 160) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 168) = v62;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 72));
  uint64_t v81 = v63;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v64 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v64 = *(void *)(a3 + 144);
  }
  v65 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v64 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v64)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v66 = (const void *)(a3 + 136);
    }
    else {
      v66 = *(const void **)(a3 + 136);
    }
    memmove(v65, v66, v64);
  }
  strcpy((char *)v65 + v64, "_nonresident_cost_if_l2_dep_producer_const");
  *(void *)(a1 + 176) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 184) = v67;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 88));
  uint64_t v81 = v68;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v69 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v69 = *(void *)(a3 + 144);
  }
  v70 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v69 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v69)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v71 = (const void *)(a3 + 136);
    }
    else {
      v71 = *(const void **)(a3 + 136);
    }
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, "_nonresident_cost_if_l2_dep_consumer_const");
  *(void *)(a1 + 192) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 200) = v72;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 104));
  uint64_t v81 = v73;
  if (*(char *)(a3 + 159) >= 0) {
    size_t v74 = *(unsigned __int8 *)(a3 + 159);
  }
  else {
    size_t v74 = *(void *)(a3 + 144);
  }
  v75 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v74 + 17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v74)
  {
    if (*(char *)(a3 + 159) >= 0) {
      v76 = (const void *)(a3 + 136);
    }
    else {
      v76 = *(const void **)(a3 + 136);
    }
    memmove(v75, v76, v74);
  }
  strcpy((char *)v75 + v74, "_chain_cost_const");
  *(void *)(a1 + 208) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(void *)(a1 + 216) = v77;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 224) = *a4;
  *(_OWORD *)(a1 + 240) = a4[1];
  *(_OWORD *)(a1 + 256) = a4[2];
  return a1;
}

void sub_23CB207E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void ORToolsL2DepScheduleVariable::ORToolsL2DepScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, uint64_t **a4, int a5, int a6, int a7, uint64_t a8, uint64_t **a9, uint64_t a10, uint64_t a11, char a12, operations_research::Domain *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  size_t v64 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  uint64_t v65 = v21;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v22 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v22 = *(void *)(a3 + 256);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v24 = (const void *)(a3 + 248);
    }
    else {
      size_t v24 = *(const void **)(a3 + 248);
    }
    memmove(p_p, v24, v22);
  }
  strcpy((char *)p_p + v22, ":l2_dep_begin");
  *(void *)a1 = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 8) = v25;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v26;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v27 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v27 = *(void *)(a3 + 256);
  }
  uint64_t v28 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v27 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v29 = (const void *)(a3 + 248);
    }
    else {
      size_t v29 = *(const void **)(a3 + 248);
    }
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, ":l2_dep_time");
  *(void *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 24) = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v31;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v32 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v32 = *(void *)(a3 + 256);
  }
  uint64_t v33 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v34 = (const void *)(a3 + 248);
    }
    else {
      size_t v34 = *(const void **)(a3 + 248);
    }
    memmove(v33, v34, v32);
  }
  strcpy((char *)v33 + v32, ":l2_dep_end");
  *(void *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 40) = v35;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 271) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(a3 + 248), *(void *)(a3 + 256));
  }
  else {
    std::string v62 = *(std::string *)(a3 + 248);
  }
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a4, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateReadEndVariables(a2, (const void **)&v62.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, a13, (uint64_t **)(a1 + 48));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v36;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v37 = *(void *)(a3 + 256);
  }
  uint64_t v38 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v37)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v39 = (const void *)(a3 + 248);
    }
    else {
      size_t v39 = *(const void **)(a3 + 248);
    }
    memmove(v38, v39, v37);
  }
  strcpy((char *)v38 + v37, ":producer_compute_end");
  *(void *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 80) = v40;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v41;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v42 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v42 = *(void *)(a3 + 256);
  }
  uint64_t v43 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v42 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v42)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v44 = (const void *)(a3 + 248);
    }
    else {
      size_t v44 = *(const void **)(a3 + 248);
    }
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, ":prodcuer_write_end");
  *(void *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 96) = v45;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a8 + 271) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a8 + 248), *(void *)(a8 + 256));
  }
  else {
    std::string v61 = *(std::string *)(a8 + 248);
  }
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a9, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateReadEndVariables(a2, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, a13, (uint64_t **)(a1 + 104));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v46;
  if (*(char *)(a8 + 271) >= 0) {
    size_t v47 = *(unsigned __int8 *)(a8 + 271);
  }
  else {
    size_t v47 = *(void *)(a8 + 256);
  }
  uint64_t v48 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v47 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v47)
  {
    if (*(char *)(a8 + 271) >= 0) {
      size_t v49 = (const void *)(a8 + 248);
    }
    else {
      size_t v49 = *(const void **)(a8 + 248);
    }
    memmove(v48, v49, v47);
  }
  strcpy((char *)v48 + v47, ":consumer_compute_end");
  *(void *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 136) = v50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v51;
  if (*(char *)(a8 + 271) >= 0) {
    size_t v52 = *(unsigned __int8 *)(a8 + 271);
  }
  else {
    size_t v52 = *(void *)(a8 + 256);
  }
  uint64_t v53 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v52 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v52)
  {
    if (*(char *)(a8 + 271) >= 0) {
      size_t v54 = (const void *)(a8 + 248);
    }
    else {
      size_t v54 = *(const void **)(a8 + 248);
    }
    memmove(v53, v54, v52);
  }
  strcpy((char *)v53 + v52, ":consumer_write_end");
  *(void *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 152) = v55;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 160);
  size_t v64 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  uint64_t v65 = v56;
  if (*(char *)(a3 + 271) >= 0) {
    size_t v57 = *(unsigned __int8 *)(a3 + 271);
  }
  else {
    size_t v57 = *(void *)(a3 + 256);
  }
  uint64_t v58 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v57)
  {
    if (*(char *)(a3 + 271) >= 0) {
      size_t v59 = (const void *)(a3 + 248);
    }
    else {
      size_t v59 = *(const void **)(a3 + 248);
    }
    memmove(v58, v59, v57);
  }
  strcpy((char *)v58 + v57, "pipeline_stall_overhead_time");
  *(void *)(a1 + 176) = operations_research::sat::BoolVar::WithName((int *)&v64, &__p);
  *(void *)(a1 + 184) = v60;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a4, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateInputL2AccessVariables(&__p, (void *)(a1 + 192));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

{
  ORToolsL2DepScheduleVariable::ORToolsL2DepScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_23CB211D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 + 311) < 0) {
    operator delete(*v31);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v30 + 264), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v30 + 256), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v30 + 224), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v30 + 216), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v33 = *a9;
  if (*a9)
  {
    *(void *)(v30 + 112) = v33;
    operator delete(v33);
  }
  size_t v34 = *a10;
  if (*a10)
  {
    *(void *)(v30 + 56) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void sub_23CB21408(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24 < 0) {
    JUMPOUT(0x23CB213FCLL);
  }
  JUMPOUT(0x23CB21400);
}

void sub_23CB21434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    JUMPOUT(0x23CB213FCLL);
  }
  JUMPOUT(0x23CB21400);
}

void ORToolsL2DepScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  uint64_t v56 = v10;
  if (*((char *)a2 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *a2;
    }
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  uint64_t v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  unint64_t v18 = (unint64_t)a5[2];
  size_t v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = ((char *)v19 - (char *)*a5) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v18 - (void)*a5;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (uint64_t *)&v25[16 * v21];
    size_t v27 = &v25[16 * v24];
    uint64_t *v26 = v16;
    v26[1] = v17;
    v20 = v26 + 2;
    size_t v29 = *a5;
    uint64_t v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        uint64_t v30 = *(v28 - 2);
        v28 -= 2;
        int v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      uint64_t v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *size_t v19 = v14;
    v19[1] = v15;
    v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3 == 2)
  {
    uint64_t v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    uint64_t v56 = v32;
    if (*((char *)a2 + 23) >= 0) {
      size_t v33 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v33 = (size_t)a2[1];
    }
    size_t v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v35 = a2;
      }
      else {
        uint64_t v35 = *a2;
      }
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    uint64_t v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    uint64_t v41 = a5[1];
    unint64_t v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      uint64_t v43 = ((char *)v41 - (char *)*a5) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v40 - (void)*a5;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        size_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      }
      else {
        size_t v47 = 0;
      }
      uint64_t v48 = (uint64_t *)&v47[16 * v43];
      size_t v49 = &v47[16 * v46];
      *uint64_t v48 = v38;
      v48[1] = v39;
      size_t v42 = v48 + 2;
      uint64_t v51 = *a5;
      uint64_t v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          uint64_t v52 = *(v50 - 2);
          v50 -= 2;
          int v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        uint64_t v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      uint64_t *v41 = v36;
      v41[1] = v37;
      size_t v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB21798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsL2DepScheduleVariable::CreateInputL2AccessVariables(void *a1@<X2>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1] != *a1) {
    operator new();
  }
}

void sub_23CB219A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsL2DepScheduleVariable::~ORToolsL2DepScheduleVariable(ORToolsL2DepScheduleVariable *this)
{
  uint64_t v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 45);
  if (v3)
  {
    *((void *)this + 46) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 33, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 32, 0);
  v6 = (void **)((char *)this + 232);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 28, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 27, 0);
  v6 = (void **)((char *)this + 192);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
}

void ORToolsL2DepScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, uint64_t **a4, const operations_research::Domain *a5)
{
  *(void *)v338 = a3;
  v343 = a2;
  uint64_t v361 = *MEMORY[0x263EF8340];
  uint64_t v341 = *(void *)(a1 + 168);
  uint64_t v342 = *(void *)(a1 + 160);
  operations_research::sat::BoolVar::BoolVar((uint64_t)&v351, ~v341, v342);
  long long v6 = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 16), *(void *)(a1 + 24));
  __str.__r_.__value_.__r.__words[0] = *(void *)(a1 + 32);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __str.__r_.__value_.__r.__words[2] = *(void *)a1;
  int v357 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v355.__r_.__value_.__l.__data_ = xmmword_23CE7E330;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__str, 2, (uint64_t *)&v355, 2, (uint64_t)&v358);
  v354.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a1 + 311);
  }
  else {
    size_t v7 = *(void *)(a1 + 296);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a1 + 311) >= 0) {
      size_t v9 = (const void *)(a1 + 288);
    }
    else {
      size_t v9 = *(const void **)(a1 + 288);
    }
    memmove(p_p, v9, v7);
  }
  v340 = (const void *)(a1 + 288);
  strcpy((char *)p_p + v7, ":l2_dep_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v354, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = operations_research::sat::CpModelBuilder::NewConstant(v343, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, v10, v11, (uint64_t)v12, v13, *(void *)(a1 + 32), *(void *)(a1 + 40), v14, v6, SDWORD2(v6));
  uint64_t v16 = *(void *)(a1 + 192);
  if (*(void *)(a1 + 200) != v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v21 = *(void *)(v16 + 8 * v18);
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      unint64_t v24 = (uint64_t *)(*(void *)(a1 + 48) + v17);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      v354.__r_.__value_.__r.__words[0] = *(void *)(v21 + 224);
      LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v21 + 232);
      size_t v27 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 4);
      *(_OWORD *)size_t v27 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      uint64_t v28 = v343;
      v27[2] = v342;
      *((_DWORD *)v27 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v28, v19, v20, v22, v23, v25, v26, v31, (uint64_t)BooleanAnd, v30);
      v355.__r_.__value_.__l.__size_ = v32;
      if (*(char *)(a1 + 311) >= 0) {
        size_t v33 = *(unsigned __int8 *)(a1 + 311);
      }
      else {
        size_t v33 = *(void *)(a1 + 296);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v33 + 44);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v33)
      {
        if (*(char *)(a1 + 311) >= 0) {
          uint64_t v35 = v340;
        }
        else {
          uint64_t v35 = *(const void **)(a1 + 288);
        }
        memmove(p_str, v35, v33);
      }
      strcpy((char *)p_str + v33, ":l2_dep_producer_resident_read_time_interval");
      std::to_string(&__p, v18);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &__p;
      }
      else {
        uint64_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v38 = std::string::append(&__str, (const std::string::value_type *)v36, size);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v358.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
      if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      uint64_t v40 = *(void *)a1;
      uint64_t v41 = *(void *)(a1 + 8);
      uint64_t v42 = *(void *)(*(void *)(a1 + 192) + 8 * v18);
      uint64_t v43 = *(void *)(v42 + 64);
      uint64_t v44 = *(void *)(v42 + 72);
      uint64_t v45 = (uint64_t *)(*(void *)(a1 + 48) + v17);
      uint64_t v47 = *v45;
      uint64_t v46 = v45[1];
      v354.__r_.__value_.__r.__words[0] = *(void *)(v42 + 240);
      LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v42 + 248);
      uint64_t v48 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v48 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v48 + 4);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      size_t v49 = v343;
      v48[2] = v342;
      *((_DWORD *)v48 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      uint64_t v50 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v49, v40, v41, v43, v44, v47, v46, v52, (uint64_t)v50, v51);
      v355.__r_.__value_.__l.__size_ = v53;
      if (*(char *)(a1 + 311) >= 0) {
        size_t v54 = *(unsigned __int8 *)(a1 + 311);
      }
      else {
        size_t v54 = *(void *)(a1 + 296);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v54 + 47);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v55 = &__str;
      }
      else {
        uint64_t v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v54)
      {
        if (*(char *)(a1 + 311) >= 0) {
          uint64_t v56 = v340;
        }
        else {
          uint64_t v56 = *(const void **)(a1 + 288);
        }
        memmove(v55, v56, v54);
      }
      strcpy((char *)v55 + v54, ":l2_dep_producer_nonresident_read_time_interval");
      std::to_string(&__p, v18);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v57 = &__p;
      }
      else {
        size_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
      }
      size_t v59 = std::string::append(&__str, (const std::string::value_type *)v57, v58);
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v358.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
      if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v18;
      uint64_t v16 = *(void *)(a1 + 192);
      v17 += 16;
    }
    while (v18 < (*(void *)(a1 + 200) - v16) >> 3);
  }
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(void *)a1, *(void *)(a1 + 8), **(void **)(a1 + 216), *(void *)(*(void *)(a1 + 216) + 8), *(void *)(a1 + 72), *(void *)(a1 + 80), v15, v342, v341);
  v358.__r_.__value_.__l.__size_ = v61;
  if (*(char *)(a1 + 311) >= 0) {
    size_t v62 = *(unsigned __int8 *)(a1 + 311);
  }
  else {
    size_t v62 = *(void *)(a1 + 296);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v62 + 38);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v63 = &v351;
  }
  else {
    uint64_t v63 = (std::string *)v351.__r_.__value_.__r.__words[0];
  }
  if (v62)
  {
    if (*(char *)(a1 + 311) >= 0) {
      size_t v64 = v340;
    }
    else {
      size_t v64 = *(const void **)(a1 + 288);
    }
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, ":l2_dep_producer_compute_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(void *)a1, *(void *)(a1 + 8), **(void **)(a1 + 224), *(void *)(*(void *)(a1 + 224) + 8), *(void *)(a1 + 88), *(void *)(a1 + 96), v65, v342, v341);
  v358.__r_.__value_.__l.__size_ = v66;
  if (*(char *)(a1 + 311) >= 0) {
    size_t v67 = *(unsigned __int8 *)(a1 + 311);
  }
  else {
    size_t v67 = *(void *)(a1 + 296);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v67 + 36);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v68 = &v351;
  }
  else {
    uint64_t v68 = (std::string *)v351.__r_.__value_.__r.__words[0];
  }
  if (v67)
  {
    if (*(char *)(a1 + 311) >= 0) {
      size_t v69 = v340;
    }
    else {
      size_t v69 = *(const void **)(a1 + 288);
    }
    memmove(v68, v69, v67);
  }
  strcpy((char *)v68 + v67, ":l2_dep_producer_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v71 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) != v71)
  {
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    do
    {
      if (v73 == *(void *)(a1 + 352))
      {
        __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(void *)a1, *(void *)(a1 + 8), **(void **)(v71 + 8 * v73), *(void *)(*(void *)(v71 + 8 * v73) + 8), *(void *)(*(void *)(a1 + 104) + v72), *(void *)(*(void *)(a1 + 104) + v72 + 8), v70, v342, v341);
        __p.__r_.__value_.__l.__size_ = v74;
        if (*(char *)(a1 + 335) >= 0) {
          size_t v75 = *(unsigned __int8 *)(a1 + 335);
        }
        else {
          size_t v75 = *(void *)(a1 + 320);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v358, v75 + 40);
        if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v76 = &v358;
        }
        else {
          v76 = (std::string *)v358.__r_.__value_.__r.__words[0];
        }
        if (v75)
        {
          if (*(char *)(a1 + 335) >= 0) {
            uint64_t v77 = (const void *)(a1 + 312);
          }
          else {
            uint64_t v77 = *(const void **)(a1 + 312);
          }
          memmove(v76, v77, v75);
        }
        strcpy((char *)v76 + v75, ":l2_dep_consumer_resident_read_interval_");
        std::to_string(&__str, v73);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v78 = &__str;
        }
        else {
          v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v79 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v79 = __str.__r_.__value_.__l.__size_;
        }
        v80 = std::string::append(&v358, (const std::string::value_type *)v78, v79);
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v351.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&__p, &v351);
        if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v358.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_177;
        }
        v82 = (void *)v358.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v83 = *(void *)a1;
        uint64_t v84 = *(void *)(a1 + 8);
        uint64_t v85 = *(void *)(v71 + 8 * v73);
        uint64_t v86 = *(void *)v85;
        uint64_t v87 = *(void *)(v85 + 8);
        v88 = (uint64_t *)(*(void *)(a1 + 104) + v72);
        uint64_t v89 = *v88;
        uint64_t v90 = v88[1];
        v354.__r_.__value_.__r.__words[0] = *(void *)(v85 + 224);
        LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v85 + 232);
        v91 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v91 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v91 + 4);
        *(_OWORD *)v91 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
        v92 = v343;
        v91[2] = v342;
        *((_DWORD *)v91 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        v93 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v92, v83, v84, v86, v87, v89, v90, v95, (uint64_t)v93, v94);
        v355.__r_.__value_.__l.__size_ = v96;
        if (*(char *)(a1 + 335) >= 0) {
          size_t v97 = *(unsigned __int8 *)(a1 + 335);
        }
        else {
          size_t v97 = *(void *)(a1 + 320);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v97 + 43);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v98 = &__str;
        }
        else {
          v98 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v97)
        {
          if (*(char *)(a1 + 335) >= 0) {
            v99 = (const void *)(a1 + 312);
          }
          else {
            v99 = *(const void **)(a1 + 312);
          }
          memmove(v98, v99, v97);
        }
        long long v339 = *(_OWORD *)":l2_dep_consumer_nonresident_read_interval_";
        strcpy((char *)v98 + v97, ":l2_dep_consumer_nonresident_read_interval_");
        qmemcpy(v337, "t_read_interval__nonresident_rea", sizeof(v337));
        std::to_string(&__p, v73);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v100 = &__p;
        }
        else {
          v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v101 = __p.__r_.__value_.__l.__size_;
        }
        v102 = std::string::append(&__str, (const std::string::value_type *)v100, v101);
        long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v358.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v358.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        uint64_t v104 = *(void *)a1;
        uint64_t v105 = *(void *)(a1 + 8);
        uint64_t v106 = *(void *)(*(void *)(a1 + 232) + 8 * v73);
        uint64_t v107 = *(void *)(v106 + 80);
        uint64_t v108 = *(void *)(v106 + 88);
        v109 = (uint64_t *)(*(void *)(a1 + 104) + v72);
        uint64_t v110 = *v109;
        uint64_t v111 = v109[1];
        v354.__r_.__value_.__r.__words[0] = *(void *)(v106 + 240);
        LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v106 + 248);
        v112 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v112 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v112 + 4);
        *(_OWORD *)v112 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
        v113 = v343;
        v112[2] = v342;
        *((_DWORD *)v112 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
        v114 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v113, v104, v105, v107, v108, v110, v111, v116, (uint64_t)v114, v115);
        v355.__r_.__value_.__l.__size_ = v117;
        if (*(char *)(a1 + 335) >= 0) {
          size_t v118 = *(unsigned __int8 *)(a1 + 335);
        }
        else {
          size_t v118 = *(void *)(a1 + 320);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v118 + 43);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v119 = &__str;
        }
        else {
          v119 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v118)
        {
          if (*(char *)(a1 + 335) >= 0) {
            v120 = (const void *)(a1 + 312);
          }
          else {
            v120 = *(const void **)(a1 + 312);
          }
          memmove(v119, v120, v118);
        }
        v121 = (char *)v119 + v118;
        *(_OWORD *)v121 = v339;
        *((_OWORD *)v121 + 1) = v337[1];
        *(_OWORD *)(v121 + 27) = v337[0];
        v121[43] = 0;
        std::to_string(&__p, v73);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v122 = &__p;
        }
        else {
          v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v123 = __p.__r_.__value_.__l.__size_;
        }
        v124 = std::string::append(&__str, (const std::string::value_type *)v122, v123);
        long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v358.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v358.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        v82 = (void *)v351.__r_.__value_.__r.__words[0];
        if (!v351.__r_.__value_.__r.__words[0]) {
          goto LABEL_177;
        }
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
      }
      operator delete(v82);
LABEL_177:
      ++v73;
      uint64_t v71 = *(void *)(a1 + 232);
      v72 += 16;
    }
    while (v73 < (*(void *)(a1 + 240) - v71) >> 3);
  }
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(void *)a1, *(void *)(a1 + 8), **(void **)(a1 + 256), *(void *)(*(void *)(a1 + 256) + 8), *(void *)(a1 + 128), *(void *)(a1 + 136), v70, v342, v341);
  v358.__r_.__value_.__l.__size_ = v126;
  if (*(char *)(a1 + 335) >= 0) {
    size_t v127 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v127 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v127 + 42);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v128 = &v351;
  }
  else {
    v128 = (std::string *)v351.__r_.__value_.__r.__words[0];
  }
  if (v127)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v129 = (const void *)(a1 + 312);
    }
    else {
      v129 = *(const void **)(a1 + 312);
    }
    memmove(v128, v129, v127);
  }
  *(void *)&v337[1] = a1 + 312;
  strcpy((char *)v128 + v127, ":l2_dep_consumer_compute_resident_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v130 = *(void *)a1;
  uint64_t v131 = *(void *)(a1 + 8);
  uint64_t v132 = *(void *)(a1 + 264);
  uint64_t v133 = *(void *)v132;
  uint64_t v134 = *(void *)(v132 + 8);
  uint64_t v135 = *(void *)(a1 + 144);
  uint64_t v136 = *(void *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(void *)(v132 + 224);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v132 + 232);
  v137 = operator new(0x20uLL);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v137 + 4);
  *(_OWORD *)v137 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v138 = v343;
  v137[2] = v342;
  *((_DWORD *)v137 + 6) = v341;
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v137 + 4);
  v139 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v138, v130, v131, v133, v134, v135, v136, v141, (uint64_t)v139, v140);
  __str.__r_.__value_.__l.__size_ = v142;
  if (*(char *)(a1 + 335) >= 0) {
    size_t v143 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v143 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v358, v143 + 45);
  if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v144 = &v358;
  }
  else {
    v144 = (std::string *)v358.__r_.__value_.__r.__words[0];
  }
  if (v143)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v145 = *(const void **)&v337[1];
    }
    else {
      v145 = *(const void **)(a1 + 312);
    }
    memmove(v144, v145, v143);
  }
  strcpy((char *)v144 + v143, ":l2_dep_consumer_resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v358);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v146 = *(void *)a1;
  uint64_t v147 = *(void *)(a1 + 8);
  uint64_t v148 = *(void *)(a1 + 264);
  uint64_t v149 = *(void *)(v148 + 80);
  uint64_t v150 = *(void *)(v148 + 88);
  uint64_t v151 = *(void *)(a1 + 144);
  uint64_t v152 = *(void *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(void *)(v148 + 240);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v148 + 248);
  v153 = operator new(0x20uLL);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v153 + 4);
  *(_OWORD *)v153 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v154 = v343;
  v153[2] = v342;
  *((_DWORD *)v153 + 6) = v341;
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v153 + 4);
  v155 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v154, v146, v147, v149, v150, v151, v152, v157, (uint64_t)v155, v156);
  __str.__r_.__value_.__l.__size_ = v158;
  if (*(char *)(a1 + 335) >= 0) {
    size_t v159 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v159 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v358, v159 + 48);
  if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v160 = &v358;
  }
  else {
    v160 = (std::string *)v358.__r_.__value_.__r.__words[0];
  }
  if (v159)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v161 = *(const void **)&v337[1];
    }
    else {
      v161 = *(const void **)(a1 + 312);
    }
    memmove(v160, v161, v159);
  }
  strcpy((char *)v160 + v159, ":l2_dep_consumer_nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v358);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v339 = operations_research::sat::CpModelBuilder::NewIntVar(v343, a5);
  uint64_t v163 = v162;
  uint64_t v164 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v164)
  {
    uint64_t v165 = 0;
    unint64_t v166 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(v164 + v165), *(void *)(v164 + v165 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
      v349 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
      if (*(char *)(a1 + 311) >= 0) {
        size_t v167 = *(unsigned __int8 *)(a1 + 311);
      }
      else {
        size_t v167 = *(void *)(a1 + 296);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v355, v167 + 22);
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v168 = &v355;
      }
      else {
        v168 = (std::string *)v355.__r_.__value_.__r.__words[0];
      }
      if (v167)
      {
        if (*(char *)(a1 + 311) >= 0) {
          v169 = v340;
        }
        else {
          v169 = *(const void **)(a1 + 288);
        }
        memmove(v168, v169, v167);
      }
      strcpy((char *)v168 + v167, ":l2_dep_producer_read_");
      std::to_string(&v354, v166);
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v170 = &v354;
      }
      else {
        v170 = (std::string *)v354.__r_.__value_.__r.__words[0];
      }
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v171 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v171 = v354.__r_.__value_.__l.__size_;
      }
      v172 = std::string::append(&v355, (const std::string::value_type *)v170, v171);
      long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v173;
      v172->__r_.__value_.__l.__size_ = 0;
      v172->__r_.__value_.__r.__words[2] = 0;
      v172->__r_.__value_.__r.__words[0] = 0;
      v174 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v175;
      v174->__r_.__value_.__l.__size_ = 0;
      v174->__r_.__value_.__r.__words[2] = 0;
      v174->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v349, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v354.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v355.__r_.__value_.__l.__data_);
      }
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v358.__r_.__value_.__r.__words[0])
      {
        v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (v352)
      {
        v353 = v352;
        operator delete(v352);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v166;
      uint64_t v164 = *(void *)(a1 + 48);
      v165 += 16;
    }
    while (v166 < (*(void *)(a1 + 56) - v164) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 72), *(void *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0) {
    size_t v176 = *(unsigned __int8 *)(a1 + 311);
  }
  else {
    size_t v176 = *(void *)(a1 + 296);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v176 + 39);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v177 = &__str;
  }
  else {
    v177 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v176)
  {
    if (*(char *)(a1 + 311) >= 0) {
      v178 = v340;
    }
    else {
      v178 = *(const void **)(a1 + 288);
    }
    memmove(v177, v178, v176);
  }
  strcpy((char *)v177 + v176, ":l2_dep_producer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 88), *(void *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0) {
    size_t v179 = *(unsigned __int8 *)(a1 + 311);
  }
  else {
    size_t v179 = *(void *)(a1 + 296);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v179 + 37);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v180 = &__str;
  }
  else {
    v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v179)
  {
    if (*(char *)(a1 + 311) >= 0) {
      v181 = v340;
    }
    else {
      v181 = *(const void **)(a1 + 288);
    }
    memmove(v180, v181, v179);
  }
  strcpy((char *)v180 + v179, ":l2_dep_producer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  uint64_t v182 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v182)
  {
    uint64_t v183 = 0;
    unint64_t v184 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(v182 + v183), *(void *)(v182 + v183 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
      v349 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
      if (*(char *)(a1 + 335) >= 0) {
        size_t v185 = *(unsigned __int8 *)(a1 + 335);
      }
      else {
        size_t v185 = *(void *)(a1 + 320);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v355, v185 + 22);
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v186 = &v355;
      }
      else {
        v186 = (std::string *)v355.__r_.__value_.__r.__words[0];
      }
      if (v185)
      {
        if (*(char *)(a1 + 335) >= 0) {
          v187 = *(const void **)&v337[1];
        }
        else {
          v187 = *(const void **)(a1 + 312);
        }
        memmove(v186, v187, v185);
      }
      strcpy((char *)v186 + v185, ":l2_dep_consumer_read_");
      std::to_string(&v354, v184);
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v188 = &v354;
      }
      else {
        v188 = (std::string *)v354.__r_.__value_.__r.__words[0];
      }
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v189 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v189 = v354.__r_.__value_.__l.__size_;
      }
      v190 = std::string::append(&v355, (const std::string::value_type *)v188, v189);
      long long v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v191;
      v190->__r_.__value_.__l.__size_ = 0;
      v190->__r_.__value_.__r.__words[2] = 0;
      v190->__r_.__value_.__r.__words[0] = 0;
      v192 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      long long v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v193;
      v192->__r_.__value_.__l.__size_ = 0;
      v192->__r_.__value_.__r.__words[2] = 0;
      v192->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v349, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v354.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v355.__r_.__value_.__l.__data_);
      }
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v358.__r_.__value_.__r.__words[0])
      {
        v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (v352)
      {
        v353 = v352;
        operator delete(v352);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v184;
      uint64_t v182 = *(void *)(a1 + 104);
      v183 += 16;
    }
    while (v184 < (*(void *)(a1 + 112) - v182) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 128), *(void *)(a1 + 136));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 335) >= 0) {
    size_t v194 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v194 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v194 + 39);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v195 = &__str;
  }
  else {
    v195 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v194)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v196 = *(const void **)&v337[1];
    }
    else {
      v196 = *(const void **)(a1 + 312);
    }
    memmove(v195, v196, v194);
  }
  strcpy((char *)v195 + v194, ":l2_dep_consumer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 144), *(void *)(a1 + 152));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 335) >= 0) {
    size_t v197 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v197 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v197 + 37);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v198 = &__str;
  }
  else {
    v198 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v197)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v199 = *(const void **)&v337[1];
    }
    else {
      v199 = *(const void **)(a1 + 312);
    }
    memmove(v198, v199, v197);
  }
  strcpy((char *)v198 + v197, ":l2_dep_consumer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a4, &__str.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  memset(&v355, 0, sizeof(v355));
  v200 = *(void **)(a1 + 192);
  if (*(void **)(a1 + 200) != v200)
  {
    unint64_t v201 = 0;
    *(void *)&v337[0] = (char *)&v355.__r_.__value_.__l + 16;
    do
    {
      uint64_t v202 = v200[v201];
      *(std::string::size_type *)((char *)v358.__r_.__value_.__r.__words + 4) = *(void *)(v202 + 240);
      HIDWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v202 + 248);
      v203 = (char *)operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v203 + 32);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v203 + 32);
      *(void *)v203 = v342;
      *((_DWORD *)v203 + 2) = v341;
      *(_OWORD *)(v203 + 12) = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
      v204 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v206 = v204;
      v207 = v205;
      std::string::size_type v208 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        uint64_t v210 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v211 = v210 + 1;
        if ((unint64_t)(v210 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v212 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v211) {
          unint64_t v211 = v212 >> 3;
        }
        if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v213 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v213 = v211;
        }
        if (v213) {
          v214 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v213);
        }
        else {
          v214 = 0;
        }
        v215 = (operations_research::sat::CpModelBuilder **)&v214[16 * v210];
        *v215 = v206;
        v215[1] = v207;
        v216 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v217 = __p.__r_.__value_.__r.__words[0];
        std::string::size_type v218 = (std::string::size_type)v215;
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v219 = *((void *)v216 - 2);
            v216 -= 4;
            int v220 = v216[2];
            *(void *)(v218 - 16) = v219;
            v218 -= 16;
            *(_DWORD *)(v218 + 8) = v220;
          }
          while (v216 != (_DWORD *)v217);
          v216 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v209 = (std::string::size_type)(v215 + 2);
        __p.__r_.__value_.__r.__words[0] = v218;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v215 + 2);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v214[16 * v213];
        if (v216) {
          operator delete(v216);
        }
      }
      else
      {
        *(void *)__p.__r_.__value_.__l.__size_ = v204;
        *(void *)(v208 + 8) = v205;
        std::string::size_type v209 = v208 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v209;
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      uint64_t v221 = *(void *)(*(void *)(__str.__r_.__value_.__r.__words[0] + 8 * v201) + 120);
      std::string::size_type v222 = v355.__r_.__value_.__l.__size_;
      if (v355.__r_.__value_.__l.__size_ >= v355.__r_.__value_.__r.__words[2])
      {
        v224 = (void *)v355.__r_.__value_.__r.__words[0];
        uint64_t v225 = (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v226 = v225 + 1;
        if ((unint64_t)(v225 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v227 = v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0]) >> 2 > v226) {
          unint64_t v226 = v227 >> 2;
        }
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v226;
        }
        if (v228)
        {
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(*(uint64_t *)&v337[0], v228);
          std::string::size_type v222 = v355.__r_.__value_.__l.__size_;
          v224 = (void *)v355.__r_.__value_.__r.__words[0];
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[8 * v225];
        *(void *)v230 = v221;
        std::string::size_type v223 = (std::string::size_type)(v230 + 8);
        while ((void *)v222 != v224)
        {
          uint64_t v231 = *(void *)(v222 - 8);
          v222 -= 8;
          *((void *)v230 - 1) = v231;
          v230 -= 8;
        }
        v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
        v355.__r_.__value_.__l.__size_ = v223;
        v355.__r_.__value_.__r.__words[2] = (std::string::size_type)&v229[8 * v228];
        if (v224) {
          operator delete(v224);
        }
      }
      else
      {
        *(void *)v355.__r_.__value_.__l.__size_ = v221;
        std::string::size_type v223 = v222 + 8;
      }
      v355.__r_.__value_.__l.__size_ = v223;
      ++v201;
      v200 = *(void **)(a1 + 192);
      uint64_t v232 = *(void *)(a1 + 200) - (void)v200;
    }
    while (v201 < v232 >> 3);
    if ((unint64_t)v232 > 8)
    {
      uint64_t v233 = *v200;
      *(std::string::size_type *)((char *)v358.__r_.__value_.__r.__words + 4) = *(void *)(*v200 + 240);
      HIDWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v233 + 248);
      uint64_t v234 = v200[1];
      *(std::string::size_type *)((char *)v354.__r_.__value_.__r.__words + 4) = *(void *)(v234 + 240);
      HIDWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v234 + 248);
      v235 = (char *)operator new(0x30uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v235 + 48);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v235 + 48);
      *(void *)v235 = v342;
      *((_DWORD *)v235 + 2) = v341;
      *(_OWORD *)(v235 + 12) = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      *(_OWORD *)(v235 + 28) = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
      v236 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v238 = v236;
      v239 = v237;
      std::string::size_type v240 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        uint64_t v242 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v243 = v242 + 1;
        if ((unint64_t)(v242 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v244 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v243) {
          unint64_t v243 = v244 >> 3;
        }
        if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v245 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v245 = v243;
        }
        if (v245) {
          v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v245);
        }
        else {
          v246 = 0;
        }
        v247 = (operations_research::sat::CpModelBuilder **)&v246[16 * v242];
        std::string::size_type v248 = (std::string::size_type)&v246[16 * v245];
        *v247 = v238;
        v247[1] = v239;
        std::string::size_type v241 = (std::string::size_type)(v247 + 2);
        v249 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v250 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v251 = (operations_research::sat::CpModelBuilder *)*((void *)v249 - 2);
            v249 -= 4;
            int v252 = v249[2];
            *(v247 - 2) = v251;
            v247 -= 2;
            *((_DWORD *)v247 + 2) = v252;
          }
          while (v249 != (_DWORD *)v250);
          v249 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
        __p.__r_.__value_.__l.__size_ = v241;
        __p.__r_.__value_.__r.__words[2] = v248;
        if (v249) {
          operator delete(v249);
        }
      }
      else
      {
        *(void *)__p.__r_.__value_.__l.__size_ = v236;
        *(void *)(v240 + 8) = v237;
        std::string::size_type v241 = v240 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v241;
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      std::string::size_type v253 = v355.__r_.__value_.__l.__size_;
      if (v355.__r_.__value_.__l.__size_ >= v355.__r_.__value_.__r.__words[2])
      {
        v255 = (void *)v355.__r_.__value_.__r.__words[0];
        uint64_t v256 = (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v257 = v256 + 1;
        if ((unint64_t)(v256 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v258 = v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0]) >> 2 > v257) {
          unint64_t v257 = v258 >> 2;
        }
        if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v259 = v257;
        }
        if (v259)
        {
          v260 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(*(uint64_t *)&v337[0], v259);
          std::string::size_type v253 = v355.__r_.__value_.__l.__size_;
          v255 = (void *)v355.__r_.__value_.__r.__words[0];
        }
        else
        {
          v260 = 0;
        }
        v261 = &v260[8 * v256];
        std::string::size_type v262 = (std::string::size_type)&v260[8 * v259];
        *(void *)v261 = 1;
        std::string::size_type v254 = (std::string::size_type)(v261 + 8);
        while ((void *)v253 != v255)
        {
          uint64_t v263 = *(void *)(v253 - 8);
          v253 -= 8;
          *((void *)v261 - 1) = v263;
          v261 -= 8;
        }
        v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
        v355.__r_.__value_.__l.__size_ = v254;
        v355.__r_.__value_.__r.__words[2] = v262;
        if (v255) {
          operator delete(v255);
        }
      }
      else
      {
        *(void *)v355.__r_.__value_.__l.__size_ = 1;
        std::string::size_type v254 = v253 + 8;
      }
      v355.__r_.__value_.__l.__size_ = v254;
    }
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(void *)(a1 + 176), *(void *)(a1 + 184));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)v355.__r_.__value_.__l.__data_, (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)&v358);
  operations_research::sat::CpModelBuilder::AddEquality(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(v343, v339, v163, *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v264 = *(void *)(a1 + 192);
  if (*(void *)(a1 + 200) != v264)
  {
    unint64_t v265 = 0;
    do
    {
      uint64_t v266 = *(void *)(a1 + 336);
      uint64_t v267 = *(void *)(a1 + 344);
      uint64_t v268 = *(void *)(v264 + 8 * v265);
      v358.__r_.__value_.__r.__words[0] = *(void *)(v268 + 240);
      LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v268 + 248);
      v269 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v269 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v269 + 4);
      *(_OWORD *)v269 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      v269[2] = v342;
      *((_DWORD *)v269 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
      v270 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      int v272 = v271;
      if (*(char *)(a1 + 311) >= 0) {
        size_t v273 = *(unsigned __int8 *)(a1 + 311);
      }
      else {
        size_t v273 = *(void *)(a1 + 296);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v348, v273 + 51);
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v274 = &v348;
      }
      else {
        v274 = (std::string *)v348.__r_.__value_.__r.__words[0];
      }
      if (v273)
      {
        if (*(char *)(a1 + 311) >= 0) {
          v275 = v340;
        }
        else {
          v275 = *(const void **)(a1 + 288);
        }
        memmove(v274, v275, v273);
      }
      strcpy((char *)v274 + v273, ":l2_dep_producer_nonresident_read_pressure_interval");
      int v276 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v266, v267, (uint64_t)v270, v272, &v348);
      int v278 = v277;
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v348.__r_.__value_.__l.__data_);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      uint64_t v279 = *(void *)(*(void *)(a1 + 192) + 8 * v265);
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v276, v278, *(void *)(v279 + 176), *(void *)(v279 + 184));
      if (*(unsigned char *)(a1 + 408))
      {
        uint64_t v280 = *(void *)(a1 + 344);
        uint64_t v281 = *(void *)(*(void *)(a1 + 192) + 8 * v265);
        v358.__r_.__value_.__r.__words[0] = *(void *)(v281 + 224);
        LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v281 + 232);
        v282 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v282 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v282 + 4);
        *(_OWORD *)v282 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
        v282[2] = v342;
        *((_DWORD *)v282 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v282;
        v283 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        int v285 = v284;
        if (*(char *)(a1 + 311) >= 0) {
          size_t v286 = *(unsigned __int8 *)(a1 + 311);
        }
        else {
          size_t v286 = *(void *)(a1 + 296);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v347, v286 + 48);
        if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v287 = &v347;
        }
        else {
          v287 = (std::string *)v347.__r_.__value_.__r.__words[0];
        }
        if (v286)
        {
          if (*(char *)(a1 + 311) >= 0) {
            v288 = v340;
          }
          else {
            v288 = *(const void **)(a1 + 288);
          }
          memmove(v287, v288, v286);
        }
        strcpy((char *)v287 + v286, ":l2_dep_producer_resident_read_pressure_interval");
        int v289 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v280, v280, (uint64_t)v283, v285, &v347);
        int v291 = v290;
        if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v347.__r_.__value_.__l.__data_);
        }
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        uint64_t v292 = *(void *)(*(void *)(a1 + 192) + 8 * v265);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v289, v291, *(void *)(v292 + 112), *(void *)(v292 + 120));
      }
      ++v265;
      uint64_t v264 = *(void *)(a1 + 192);
    }
    while (v265 < (*(void *)(a1 + 200) - v264) >> 3);
  }
  uint64_t v293 = *(void *)(a1 + 232);
  uint64_t v294 = *(void *)(a1 + 240);
  if (v294 != v293)
  {
    unint64_t v295 = 0;
    do
    {
      if (v295 != *(void *)(a1 + 352))
      {
        uint64_t v296 = *(void *)(a1 + 336);
        uint64_t v297 = *(void *)(a1 + 344);
        uint64_t v298 = *(void *)(v293 + 8 * v295);
        v358.__r_.__value_.__r.__words[0] = *(void *)(v298 + 240);
        LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v298 + 248);
        v299 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v299 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v299 + 4);
        *(_OWORD *)v299 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
        v299[2] = v342;
        *((_DWORD *)v299 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
        v300 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        int v302 = v301;
        if (*(char *)(a1 + 335) >= 0) {
          size_t v303 = *(unsigned __int8 *)(a1 + 335);
        }
        else {
          size_t v303 = *(void *)(a1 + 320);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v346, v303 + 51);
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v304 = &v346;
        }
        else {
          v304 = (std::string *)v346.__r_.__value_.__r.__words[0];
        }
        if (v303)
        {
          if (*(char *)(a1 + 335) >= 0) {
            v305 = *(const void **)&v337[1];
          }
          else {
            v305 = *(const void **)(a1 + 312);
          }
          memmove(v304, v305, v303);
        }
        strcpy((char *)v304 + v303, ":l2_dep_consumer_nonresident_read_pressure_interval");
        int v306 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v296, v297, (uint64_t)v300, v302, &v346);
        int v308 = v307;
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v346.__r_.__value_.__l.__data_);
        }
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        uint64_t v309 = *(void *)(*(void *)(a1 + 232) + 8 * v295);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v306, v308, *(void *)(v309 + 192), *(void *)(v309 + 200));
        uint64_t v293 = *(void *)(a1 + 232);
        uint64_t v294 = *(void *)(a1 + 240);
      }
      ++v295;
    }
    while (v295 < (v294 - v293) >> 3);
  }
  uint64_t v310 = *(void *)(a1 + 336);
  uint64_t v311 = *(void *)(a1 + 344);
  uint64_t v312 = *(void *)(a1 + 264);
  v358.__r_.__value_.__r.__words[0] = *(void *)(v312 + 240);
  LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v312 + 248);
  v313 = operator new(0x20uLL);
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v313 + 4);
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v313 + 4);
  *(_OWORD *)v313 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
  v313[2] = v342;
  *((_DWORD *)v313 + 6) = v341;
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v313;
  v314 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  int v316 = v315;
  if (*(char *)(a1 + 335) >= 0) {
    size_t v317 = *(unsigned __int8 *)(a1 + 335);
  }
  else {
    size_t v317 = *(void *)(a1 + 320);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v345, v317 + 52);
  if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v318 = &v345;
  }
  else {
    v318 = (std::string *)v345.__r_.__value_.__r.__words[0];
  }
  if (v317)
  {
    if (*(char *)(a1 + 335) >= 0) {
      v319 = *(const void **)&v337[1];
    }
    else {
      v319 = *(const void **)(a1 + 312);
    }
    memmove(v318, v319, v317);
  }
  strcpy((char *)v318 + v317, ":l2_dep_consumer_nonresident_write_pressure_interval");
  int v320 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v310, v311, (uint64_t)v314, v316, &v345);
  int v322 = v321;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v320, v322, *(void *)(*(void *)(a1 + 264) + 192), *(void *)(*(void *)(a1 + 264) + 200));
  if (*(unsigned char *)(a1 + 409))
  {
    uint64_t v323 = *(void *)(a1 + 336);
    uint64_t v324 = *(void *)(a1 + 264);
    v358.__r_.__value_.__r.__words[0] = *(void *)(v324 + 224);
    LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v324 + 232);
    v325 = operator new(0x20uLL);
    v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v325 + 4);
    v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v325 + 4);
    *(_OWORD *)v325 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
    v325[2] = v342;
    *((_DWORD *)v325 + 6) = v341;
    v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
    v326 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
    int v328 = v327;
    if (*(char *)(a1 + 335) >= 0) {
      size_t v329 = *(unsigned __int8 *)(a1 + 335);
    }
    else {
      size_t v329 = *(void *)(a1 + 320);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v344, v329 + 49);
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v330 = &v344;
    }
    else {
      v330 = (std::string *)v344.__r_.__value_.__r.__words[0];
    }
    if (v329)
    {
      if (*(char *)(a1 + 335) >= 0) {
        v331 = *(const void **)&v337[1];
      }
      else {
        v331 = *(const void **)(a1 + 312);
      }
      memmove(v330, v331, v329);
    }
    strcpy((char *)v330 + v329, ":l2_dep_consumer_resident_write_pressure_interval");
    int v332 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v323, v323, (uint64_t)v326, v328, &v344);
    int v334 = v333;
    if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v344.__r_.__value_.__l.__data_);
    }
    if (v351.__r_.__value_.__r.__words[0])
    {
      v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
      operator delete(v351.__r_.__value_.__l.__data_);
    }
    operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v332, v334, *(void *)(*(void *)(a1 + 264) + 112), *(void *)(*(void *)(a1 + 264) + 120));
  }
  if (v355.__r_.__value_.__r.__words[0])
  {
    v355.__r_.__value_.__l.__size_ = v355.__r_.__value_.__r.__words[0];
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23CB23D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  uint64_t v45 = *(void **)(v43 - 224);
  if (v45)
  {
    *(void *)(v43 - 216) = v45;
    operator delete(v45);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v46 = *(void **)(v43 - 192);
  if (v46)
  {
    *(void *)(v43 - 184) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::~LinearExpr(operations_research::sat::LinearExpr *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  char v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void *std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    result = std::vector<operations_research::sat::BoolVar>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23CB241E8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::BoolVar>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (ORToolsCpL2AccessVariable **)**a1;
  if (v2)
  {
    uint64_t v4 = (ORToolsCpL2AccessVariable **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<ORToolsCpL2AccessVariable>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

ORToolsCpL2AccessVariable *std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100](ORToolsCpL2AccessVariable **a1, ORToolsCpL2AccessVariable *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

ORToolsCpComputeConstant *std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100](ORToolsCpComputeConstant **a1, ORToolsCpComputeConstant *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpComputeConstant::~ORToolsCpComputeConstant(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void ORToolsCpTransposer::ORToolsCpTransposer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  operator new();
}

void sub_23CB247C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::ofstream::~ofstream(v27);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)(v26 + 200), 0);
  size_t v29 = *(operations_research::sat::CpModelProto **)(v26 + 192);
  *(void *)(v26 + 192) = 0;
  if (v29) {
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](v26 + 192, v29);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a10);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a11, *a12);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v25, *a13);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v24, *a14);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table(a15);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a16, *a17);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x23ECF2880](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](a1 + 52);
  return a1;
}

void ORToolsCpTransposer::~ORToolsCpTransposer(ORToolsCpTransposer *this)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *((void *)this + 26) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)this + *(void *)(v3 - 24) + 208) = *(void *)(v2 + 24);
  MEMORY[0x23ECF2880]((char *)this + 216);
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10]((char *)this + 624);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)this + 25, 0);
  uint64_t v4 = (operations_research::sat::CpModelProto *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v4) {
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100]((uint64_t)this + 192, v4);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 152);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table((uint64_t)this + 40);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

void ORToolsCpTransposer::CreateTensorDecisionVariable(ORToolsCpTransposer *this, unint64_t a2)
{
  unint64_t v23 = a2;
  uint64_t v5 = (uint64_t **)((char *)this + 136);
  uint64_t v4 = (void *)*((void *)this + 17);
  if (!v4) {
    goto LABEL_12;
  }
  std::string::size_type v6 = (uint64_t **)((char *)this + 136);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      size_t v9 = v4;
    }
    else {
      size_t v9 = v4 + 1;
    }
    if (v8) {
      std::string::size_type v6 = (uint64_t **)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v5 || (unint64_t)v6[4] > a2)
  {
LABEL_12:
    int v10 = *(unsigned __int8 *)CpTransposeGraph::GetRootTensorConstraint(**(CpTransposeGraph ***)this, a2);
    CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, a2, (uint64_t)&v22);
    if (v22.__r_.__value_.__l.__size_ == 1
      && (CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, a2, (uint64_t)&__p), v21 == 1)
      && !v10)
    {
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)this + 152, &v23, &v23);
      uint64_t v17 = (uint64_t **)*((void *)this + 1);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
      *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v17, &v23, (uint64_t)&std::piecewise_construct, &v22)+ 10) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "");
      CpGraph::GetTensorName(**(void **)this, a2, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 22);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = &v22;
        }
        else {
          uint64_t v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        memmove(p_p, v13, size);
      }
      strcpy((char *)p_p + size, ":cw_transpose_decision");
      v18[0] = operations_research::sat::CpModelBuilder::NewBoolVar(*((operations_research::sat::CpModelBuilder **)this
                                                                    + 24));
      v18[1] = v14;
      uint64_t v15 = operations_research::sat::BoolVar::WithName((int *)v18, &__p);
      v19[0] = a2;
      v19[1] = v15;
      v19[2] = v16;
      std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,operations_research::sat::BoolVar>>(v5 - 1, v19, (uint64_t)v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_23CB24CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpTransposer::CreateTensorConstraint(CpTransposeGraph ***this, unint64_t a2)
{
  unint64_t v15 = a2;
  RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(**this, a2);
  int v4 = *(unsigned __int8 *)RootTensorConstraint;
  if (*((char *)RootTensorConstraint + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)RootTensorConstraint[1], RootTensorConstraint[2]);
    if (!v4) {
      goto LABEL_13;
    }
  }
  else
  {
    std::string __str = *(std::string *)(RootTensorConstraint + 1);
    if (!v4) {
      goto LABEL_13;
    }
  }
  uint64_t v5 = (operations_research::sat::CpModelBuilder *)this[24];
  v7[0] = &v15;
  std::string::size_type v6 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 16), &v15, (uint64_t)&std::piecewise_construct, (void **)v7);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v10, v6[5], v6[6]);
  operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)v7, 0);
  uint64_t v13 = operations_research::sat::CpModelBuilder::AddEquality(v5, (const operations_research::sat::LinearExpr *)v10, (const operations_research::sat::LinearExpr *)v7);
  operations_research::sat::Constraint::WithName((uint64_t *)&v13, &__str);
  if (__p)
  {
    size_t v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23CB24E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  if (*(char *)(v9 - 41) < 0) {
    operator delete(*(void **)(v9 - 64));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpTransposer::CreateLayerConstraints(ORToolsCpTransposer *this, unint64_t a2)
{
  v108[0] = a2;
  LayerTruthTable = CpTransposeGraph::GetLayerTruthTable(**(CpTransposeGraph ***)this, a2);
  uint64_t v3 = (uint64_t **)LayerTruthTable;
  if (*((char *)LayerTruthTable + 47) < 0) {
    std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)LayerTruthTable[3], LayerTruthTable[4]);
  }
  else {
    std::string v107 = *(std::string *)((unsigned char *)LayerTruthTable + 1);
  }
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  int v103 = 1065353216;
  memset(v99, 0, sizeof(v99));
  int v100 = 1065353216;
  uint64_t v5 = *v3;
  int v4 = v3[1];
  if (*v3 != v4)
  {
    v82 = v3;
    unint64_t __val = 0;
    unint64_t v6 = 0;
    uint64_t v84 = v3[1];
    while (1)
    {
      BOOL v7 = (*((unsigned __int8 *)v5 + 24) | *((unsigned __int8 *)v5 + 25)) != 0;
      if (*((char *)v5 + 71) < 0) {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v5[6], v5[7]);
      }
      else {
        std::string __str = *(std::string *)((unsigned char *)v5 + 2);
      }
      if (!v7) {
        goto LABEL_75;
      }
      std::string __p = 0;
      uint64_t v90 = 0;
      v91 = 0;
      uint64_t v8 = *v5;
      uint64_t v9 = v5[1];
      if (*v5 == v9)
      {
        v88.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_73;
      }
      char v10 = 0;
      do
      {
        unint64_t v11 = *(void *)v8;
        v98.__r_.__value_.__r.__words[0] = *(void *)v8;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v98))
        {
          goto LABEL_46;
        }
        v88.__r_.__value_.__r.__words[0] = v11;
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        uint64_t v12 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)&v88, (uint64_t)&std::piecewise_construct, &v98);
        uint64_t v13 = v12;
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(**(CpTransposeGraph ***)this, v11);
          unint64_t v15 = v13 + 5;
          v10 |= *(unsigned char *)RootTensorConstraint != 0;
          unint64_t v16 = v90;
          if (v90 >= v91)
          {
            uint64_t v19 = (v90 - (unsigned char *)__p) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = v91 - (unsigned char *)__p;
            if ((v91 - (unsigned char *)__p) >> 3 > v20) {
              unint64_t v20 = v21 >> 3;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22) {
              unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v91, v22);
            }
            else {
              unint64_t v23 = 0;
            }
            size_t v27 = &v23[16 * v19];
            *(_OWORD *)size_t v27 = *v15;
            size_t v29 = __p;
            uint64_t v28 = v90;
            int v30 = v27;
            if (v90 != __p)
            {
              do
              {
                uint64_t v31 = *((void *)v28 - 2);
                v28 -= 4;
                int v32 = v28[2];
                *((void *)v30 - 2) = v31;
                v30 -= 16;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v28 != v29);
              goto LABEL_42;
            }
            goto LABEL_43;
          }
          *(_OWORD *)uint64_t v90 = *v15;
        }
        else
        {
          operations_research::sat::BoolVar::BoolVar((uint64_t)&v98, ~*((_DWORD *)v12 + 12), v12[5]);
          long long v17 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
          unint64_t v16 = v90;
          if (v90 >= v91)
          {
            uint64_t v24 = (v90 - (unsigned char *)__p) >> 4;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 60) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v91 - (unsigned char *)__p;
            if ((v91 - (unsigned char *)__p) >> 3 > v25) {
              unint64_t v25 = v26 >> 3;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v25;
            }
            if (v22) {
              unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v91, v22);
            }
            else {
              unint64_t v23 = 0;
            }
            size_t v27 = &v23[16 * v24];
            *(_OWORD *)size_t v27 = v17;
            size_t v33 = __p;
            uint64_t v28 = v90;
            int v30 = v27;
            if (v90 != __p)
            {
              do
              {
                uint64_t v34 = *((void *)v28 - 2);
                v28 -= 4;
                int v35 = v28[2];
                *((void *)v30 - 2) = v34;
                v30 -= 16;
                *((_DWORD *)v30 + 2) = v35;
              }
              while (v28 != v33);
LABEL_42:
              uint64_t v28 = __p;
            }
LABEL_43:
            unint64_t v18 = v27 + 16;
            std::string __p = v30;
            uint64_t v90 = v27 + 16;
            v91 = &v23[16 * v22];
            if (v28) {
              operator delete(v28);
            }
            goto LABEL_45;
          }
          *(void *)uint64_t v90 = v98.__r_.__value_.__r.__words[0];
          *((void *)v16 + 1) = *((void *)&v17 + 1);
        }
        unint64_t v18 = v16 + 16;
LABEL_45:
        uint64_t v90 = v18;
LABEL_46:
        v8 += 16;
      }
      while (v8 != v9);
      uint64_t v36 = (char *)__p;
      if (__p == v90)
      {
        int v4 = v84;
      }
      else
      {
        unint64_t v37 = (v90 - (unsigned char *)__p) >> 4;
        int v4 = v84;
        do
        {
          v37 ^= (v37 >> 2) + (v37 << 6) + (*((_DWORD *)v36 + 2) - 1640531527);
          v36 += 16;
        }
        while (v36 != v90);
        v88.__r_.__value_.__r.__words[0] = v37;
        if ((v10 & 1) == 0
          && !std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v99, (unint64_t *)&v88))
        {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v99, (unint64_t *)&v88, &v88);
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::NewBoolVar(*((operations_research::sat::CpModelBuilder **)this + 24));
          v98.__r_.__value_.__l.__size_ = v38;
          uint64_t v39 = operations_research::sat::BoolVar::WithName((int *)&v98, &__str);
          uint64_t v41 = v40;
          v98.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::AddBoolAnd(*((void *)this + 24), (uint64_t)__p, (v90 - (unsigned char *)__p) >> 4);
          operations_research::sat::Constraint::OnlyEnforceIf((uint64_t *)&v98, v39, v41);
          LODWORD(v87.__r_.__value_.__l.__data_) = v41;
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
          std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v101, (int *)&v87, (uint64_t)&std::piecewise_construct, &v98)[3] = v6;
          uint64_t v42 = v105;
          if (v105 >= v106)
          {
            uint64_t v44 = ((char *)v105 - (char *)v104) >> 4;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 60) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = (char *)v106 - (char *)v104;
            if (v106 - v104 > v45) {
              unint64_t v45 = v46 >> 3;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47) {
              uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v106, v47);
            }
            else {
              uint64_t v48 = 0;
            }
            size_t v49 = (uint64_t *)&v48[16 * v44];
            *size_t v49 = v39;
            v49[1] = v41;
            int v51 = v104;
            uint64_t v50 = v105;
            uint64_t v52 = v49;
            if (v105 == v104)
            {
              int v4 = v84;
            }
            else
            {
              int v4 = v84;
              do
              {
                uint64_t v53 = *(v50 - 2);
                v50 -= 2;
                int v54 = *((_DWORD *)v50 + 2);
                *(v52 - 2) = v53;
                v52 -= 2;
                *((_DWORD *)v52 + 2) = v54;
              }
              while (v50 != v51);
              uint64_t v50 = v104;
            }
            uint64_t v43 = v49 + 2;
            uint64_t v104 = v52;
            uint64_t v105 = v49 + 2;
            uint64_t v106 = (uint64_t *)&v48[16 * v47];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *uint64_t v105 = v39;
            v42[1] = v41;
            uint64_t v43 = v42 + 2;
            int v4 = v84;
          }
          uint64_t v105 = v43;
          unint64_t __val = v6;
        }
      }
LABEL_73:
      if (__p)
      {
        uint64_t v90 = (char *)__p;
        operator delete(__p);
      }
LABEL_75:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v6;
      v5 += 9;
      if (v5 == v4)
      {
        uint64_t v55 = (uint64_t)v104;
        uint64_t v56 = v105;
        uint64_t v3 = v82;
        goto LABEL_80;
      }
    }
  }
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t __val = 0;
LABEL_80:
  uint64_t v57 = ((uint64_t)v56 - v55) >> 4;
  std::string::size_type v58 = (CpTransposeGraph ***)this;
  if (v57)
  {
    if (v57 == 1)
    {
      uint64_t v59 = (uint64_t)&(*v3)[9 * __val];
      long long v60 = (const std::string::value_type **)(v59 + 48);
      if (*(char *)(v59 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, *v60, *(void *)(v59 + 56));
      }
      else
      {
        long long v61 = *(_OWORD *)v60;
        v98.__r_.__value_.__r.__words[2] = *(void *)(v59 + 64);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v61;
      }
      uint64_t v69 = *(void *)v59;
      for (uint64_t i = *(void *)(v59 + 8); v69 != i; v69 += 16)
      {
        uint64_t v71 = *(void **)v69;
        __str.__r_.__value_.__r.__words[0] = *(void *)v69;
        if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&__str)&& !*(unsigned char *)CpTransposeGraph::GetRootTensorConstraint(**v58, (unint64_t)v71))
        {
          std::string __p = v71;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          uint64_t v72 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, &__str);
          int v73 = *(_DWORD *)(v69 + 8);
          std::string::size_type v74 = (operations_research::sat::CpModelBuilder *)*((void *)this + 24);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__str, v72[5], v72[6]);
          operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&__p, v73 == 1);
          size_t v97 = operations_research::sat::CpModelBuilder::AddEquality(v74, (const operations_research::sat::LinearExpr *)&__str, (const operations_research::sat::LinearExpr *)&__p);
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v107.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v107.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v87, size + 18);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v76 = &v87;
          }
          else {
            v76 = (std::string *)v87.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v77 = &v107;
            }
            else {
              uint64_t v77 = (std::string *)v107.__r_.__value_.__r.__words[0];
            }
            memmove(v76, v77, size);
          }
          strcpy((char *)v76 + size, ":presolved_to_row_");
          std::to_string(&v86, __val);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v78 = &v86;
          }
          else {
            v78 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v79 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v79 = v86.__r_.__value_.__l.__size_;
          }
          v80 = std::string::append(&v87, (const std::string::value_type *)v78, v79);
          std::string::size_type v58 = (CpTransposeGraph ***)this;
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v97, &v88);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
          if (v92)
          {
            v93 = v92;
            operator delete(v92);
          }
          if (__p)
          {
            uint64_t v90 = (char *)__p;
            operator delete(__p);
          }
          if (v95)
          {
            std::string::size_type v96 = v95;
            operator delete(v95);
          }
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      size_t v62 = (operations_research::sat::CpModelBuilder *)*((void *)this + 24);
      operations_research::sat::LinearExpr::BooleanSum(v55, v57, (uint64_t)&__str);
      uint64_t v63 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 24), 1);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, (uint64_t)v63, v64);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v62, (const operations_research::sat::LinearExpr *)&__str, (const operations_research::sat::LinearExpr *)&__p);
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v65 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v65 = v107.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v98, v65 + 6);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = &v98;
      }
      else {
        std::string::size_type v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      if (v65)
      {
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v67 = &v107;
        }
        else {
          size_t v67 = (std::string *)v107.__r_.__value_.__r.__words[0];
        }
        memmove(v66, v67, v65);
      }
      strcpy((char *)v66 + v65, ":mutex");
      operations_research::sat::Constraint::WithName((uint64_t *)&v88, &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      if (__p)
      {
        uint64_t v90 = (char *)__p;
        operator delete(__p);
      }
      if (v95)
      {
        std::string::size_type v96 = v95;
        operator delete(v95);
      }
      if (__str.__r_.__value_.__r.__words[0])
      {
        __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
      uint64_t v68 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 40, v108, (uint64_t)&std::piecewise_construct, &__str);
      if (v68 + 3 != (void *)&v101)
      {
        *((_DWORD *)v68 + 14) = v103;
        std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,unsigned long>,void *> *>>(v68 + 3, (uint64_t *)v102, 0);
      }
    }
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v99);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v101);
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
}

void sub_23CB257C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v56 - 240);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v56 - 192);
  std::string::size_type v58 = *(void **)(v56 - 152);
  if (v58)
  {
    *(void *)(v56 - 144) = v58;
    operator delete(v58);
  }
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpTransposer::SetObjectiveFunction(ORToolsCpTransposer *this)
{
  uint64_t v48 = *((void *)this + 18);
  long long v61 = 0;
  size_t v62 = 0;
  uint64_t v63 = 0;
  std::string::size_type v58 = 0;
  uint64_t v59 = 0;
  long long v60 = 0;
  uint64_t v2 = (char *)*((void *)this + 10);
  uint64_t v3 = (char *)this + 88;
  if (v2 != (char *)this + 88)
  {
    do
    {
      int v4 = (unint64_t *)(v2 + 32);
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)v2 + 4))
      {
        CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, *v4, (uint64_t)&__p);
        uint64_t v5 = v54;
        CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, *v4, (uint64_t)v50);
        if ((uint64_t)v5 >= (uint64_t)v50[1])
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v2 + 32);
          uint64_t v9 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)v2 + 4, (uint64_t)&std::piecewise_construct, &__p)+ 5;
          char v10 = v59;
          if (v59 >= v60)
          {
            uint64_t v17 = (v59 - v58) >> 4;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 60) {
LABEL_79:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v19 = v60 - v58;
            if ((v60 - v58) >> 3 > v18) {
              unint64_t v18 = v19 >> 3;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20) {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v60, v20);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v28 = &v21[16 * v17];
            *(_OWORD *)uint64_t v28 = *(_OWORD *)v9;
            int v30 = v58;
            size_t v29 = v59;
            uint64_t v31 = v28;
            if (v59 != v58)
            {
              do
              {
                uint64_t v32 = *((void *)v29 - 2);
                v29 -= 16;
                int v33 = *((_DWORD *)v29 + 2);
                *((void *)v31 - 2) = v32;
                v31 -= 16;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v29 != v30);
              size_t v29 = v58;
            }
            unint64_t v11 = v28 + 16;
            std::string::size_type v58 = v31;
            uint64_t v59 = v28 + 16;
            long long v60 = &v21[16 * v20];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v59 = *(_OWORD *)v9;
            unint64_t v11 = v10 + 16;
          }
          uint64_t v59 = v11;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v2 + 32);
          unint64_t v6 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)v2 + 4, (uint64_t)&std::piecewise_construct, &__p)+ 5;
          BOOL v7 = v62;
          if (v62 >= v63)
          {
            uint64_t v12 = (v62 - v61) >> 4;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60) {
              goto LABEL_79;
            }
            uint64_t v14 = v63 - v61;
            if ((v63 - v61) >> 3 > v13) {
              unint64_t v13 = v14 >> 3;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15) {
              unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v63, v15);
            }
            else {
              unint64_t v16 = 0;
            }
            unint64_t v22 = &v16[16 * v12];
            *(_OWORD *)unint64_t v22 = *(_OWORD *)v6;
            uint64_t v24 = v61;
            unint64_t v23 = v62;
            unint64_t v25 = v22;
            if (v62 != v61)
            {
              do
              {
                uint64_t v26 = *((void *)v23 - 2);
                v23 -= 16;
                int v27 = *((_DWORD *)v23 + 2);
                *((void *)v25 - 2) = v26;
                v25 -= 16;
                *((_DWORD *)v25 + 2) = v27;
              }
              while (v23 != v24);
              unint64_t v23 = v61;
            }
            uint64_t v8 = v22 + 16;
            long long v61 = v25;
            size_t v62 = v22 + 16;
            uint64_t v63 = &v16[16 * v15];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_OWORD *)size_t v62 = *(_OWORD *)v6;
            uint64_t v8 = v7 + 16;
          }
          size_t v62 = v8;
        }
      }
      uint64_t v34 = (char *)*((void *)v2 + 1);
      if (v34)
      {
        do
        {
          int v35 = v34;
          uint64_t v34 = *(char **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          int v35 = (char *)*((void *)v2 + 2);
          BOOL v36 = *(void *)v35 == (void)v2;
          uint64_t v2 = v35;
        }
        while (!v36);
      }
      uint64_t v2 = v35;
    }
    while (v35 != v3);
  }
  operations_research::Domain::Domain(v57, 0, v48);
  v50[0] = operations_research::sat::CpModelBuilder::NewIntVar(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::Domain *)v57);
  v50[1] = v37;
  std::string::basic_string[abi:ne180100]<0>(&__p, "valid_transpose_count");
  uint64_t v38 = operations_research::sat::BoolVar::WithName((int *)v50, &__p);
  uint64_t v40 = v39;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = (operations_research::sat::CpModelBuilder *)*((void *)this + 24);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, v38, v40);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v61, (v62 - v61) >> 4, (uint64_t)v50);
  uint64_t v56 = operations_research::sat::CpModelBuilder::AddEquality(v41, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)v50);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_function_valid");
  operations_research::sat::Constraint::WithName((uint64_t *)&v56, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v50[0] = operations_research::sat::CpModelBuilder::NewIntVar(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::Domain *)v57);
  v50[1] = v42;
  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_transpose_count");
  uint64_t v43 = operations_research::sat::BoolVar::WithName((int *)v50, &__p);
  uint64_t v45 = v44;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v46 = (operations_research::sat::CpModelBuilder *)*((void *)this + 24);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, v43, v45);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v58, (v59 - v58) >> 4, (uint64_t)v50);
  uint64_t v56 = operations_research::sat::CpModelBuilder::AddEquality(v46, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)v50);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_function_invalid");
  operations_research::sat::Constraint::WithName((uint64_t *)&v56, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v47 = operator new(0x20uLL);
  *(void *)unint64_t v47 = v38;
  v47[2] = v40;
  *((void *)v47 + 2) = v43;
  v47[6] = v45;
  *(_OWORD *)uint64_t v50 = xmmword_23CE7E330;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)v47, 2, (uint64_t *)v50, 2, (uint64_t)&__p);
  operations_research::sat::CpModelBuilder::Maximize(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::sat::LinearExpr *)&__p);
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator delete(v47);
  if (v57[0]) {
    operator delete((void *)v57[1]);
  }
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    size_t v62 = v61;
    operator delete(v61);
  }
}

void sub_23CB25E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a26);
  operator delete(v31);
  if (*(unsigned char *)(v32 - 160)) {
    operator delete(*(void **)(v32 - 152));
  }
  uint64_t v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(void *)(v32 - 128) = v34;
    operator delete(v34);
  }
  int v35 = *(void **)(v32 - 112);
  if (v35)
  {
    *(void *)(v32 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23CB26238(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECF2B10](a1 + 128);
  return a1;
}

void operations_research::sat::Model::~Model(operations_research::sat::Model *this)
{
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void ORToolsCpTransposer::PrintConstraintProblem(ORToolsCpTransposer *this)
{
  if (*((void *)this + 42))
  {
    uint64_t v2 = (void *)((char *)this + 208);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 26, (uint64_t)"[Variables]", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
    uint64_t v4 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale((std::locale *)&v28);
    std::ostream::put();
    std::ostream::flush();
    if (*(_DWORD *)(*((void *)this + 24) + 24))
    {
      uint64_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vars: ", 6);
      std::to_string(&v28, 0);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v28;
      }
      else {
        uint64_t v7 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v10 = std::locale::use_facet(&v29, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v29);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      google::protobuf::Message::DebugString(&v28);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n\n[Constraints]", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&v28);
    std::ostream::put();
    std::ostream::flush();
    if (*(_DWORD *)(*((void *)this + 24) + 48))
    {
      unint64_t v13 = (std::locale::id *)MEMORY[0x263F8C108];
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"constraint id: ", 15);
      std::to_string(&v28, 0);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = &v28;
      }
      else {
        unint64_t v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v28.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      unint64_t v18 = std::locale::use_facet(&v29, v13);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v29);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      google::protobuf::Message::DebugString(&v28);
    }
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n\n[Stats]", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    unint64_t v20 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale((std::locale *)&v28);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"NodeCount=", 10);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
    unint64_t v22 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale((std::locale *)&v28);
    std::ostream::put();
    std::ostream::flush();
    operations_research::sat::CpModelStats(*((operations_research::sat **)this + 24), &v28, v23);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v28;
    }
    else {
      uint64_t v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v24, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    int v27 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB26ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL ORToolsCpTransposer::TranslateToDecisionMap(ORToolsCpTransposer *this, const operations_research::sat::CpSolverResponse *a2)
{
  int v4 = *((_DWORD *)a2 + 38);
  uint64_t v56 = (void *)((char *)this + 208);
  if (*((void *)this + 42))
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n\n[Solver Status]", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    uint64_t v6 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"User Time = ", 12);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Wall Time = ", 12);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Deterministic Time = ", 21);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Status = ", 9);
    uint64_t v13 = *((int *)a2 + 38);
    if (v13 >= 4)
    {
      if (v13 == 4) {
        uint64_t v14 = "OPTIMAL";
      }
      else {
        uint64_t v14 = "ERROR";
      }
    }
    else
    {
      uint64_t v14 = off_264E82BA8[v13];
    }
    size_t v15 = strlen(v14);
    std::string::size_type v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
  }
  int v55 = v4;
  BOOL v18 = v4 == 4 || v4 == 2;
  if (v18)
  {
    if (*((void *)this + 42))
    {
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n\n[Solver Result]", 17);
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      unint64_t v20 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale((std::locale *)&v57);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Objective = ", 12);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      unint64_t v22 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale((std::locale *)&v57);
      std::ostream::put();
      std::ostream::flush();
      __n128 v23 = (ORToolsCpTransposer *)*((void *)this + 16);
      if (v23 != (ORToolsCpTransposer *)((char *)this + 136))
      {
        uint64_t v24 = (std::locale::id *)MEMORY[0x263F8C108];
        do
        {
          uint64_t v25 = *((void *)v23 + 5);
          uint64_t v26 = *((void *)v23 + 6);
          uint64_t v27 = *(void *)(*(void *)(*(void *)(v25 + 32) + 8 * (int)v26 + 8) + 40);
          int v28 = *(char *)(v27 + 23);
          if (v28 >= 0) {
            uint64_t v29 = *(void *)(*(void *)(*(void *)(v25 + 32) + 8 * (int)v26 + 8) + 40);
          }
          else {
            uint64_t v29 = *(void *)v27;
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v27 + 23);
          }
          else {
            uint64_t v30 = *(void *)(v27 + 8);
          }
          uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v29, v30);
          uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" = ", 3);
          BOOL v33 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v25, v26);
          std::to_string(&v57, v33);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v34 = &v57;
          }
          else {
            uint64_t v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v57.__r_.__value_.__l.__size_;
          }
          BOOL v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, size);
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
          unint64_t v37 = std::locale::use_facet(&v58, v24);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale(&v58);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          uint64_t v38 = (ORToolsCpTransposer *)*((void *)v23 + 1);
          if (v38)
          {
            do
            {
              uint64_t v39 = v38;
              uint64_t v38 = *(ORToolsCpTransposer **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              uint64_t v39 = (ORToolsCpTransposer *)*((void *)v23 + 2);
              BOOL v18 = *(void *)v39 == (void)v23;
              __n128 v23 = v39;
            }
            while (!v18);
          }
          __n128 v23 = v39;
        }
        while (v39 != (ORToolsCpTransposer *)((char *)this + 136));
      }
    }
    uint64_t v40 = (ORToolsCpTransposer *)*((void *)this + 16);
    if (v40 != (ORToolsCpTransposer *)((char *)this + 136))
    {
      do
      {
        uint64_t v41 = *((void *)v40 + 5);
        v58.__locale_ = (std::locale::__imp *)*((void *)v40 + 4);
        BOOL v42 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v41, *((void *)v40 + 6));
        uint64_t v43 = (uint64_t **)*((void *)this + 1);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
        *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v43, (unint64_t *)&v58, (uint64_t)&std::piecewise_construct, &v57)+ 10) = v42;
        uint64_t v44 = (ORToolsCpTransposer *)*((void *)v40 + 1);
        if (v44)
        {
          do
          {
            uint64_t v45 = v44;
            uint64_t v44 = *(ORToolsCpTransposer **)v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            uint64_t v45 = (ORToolsCpTransposer *)*((void *)v40 + 2);
            BOOL v18 = *(void *)v45 == (void)v40;
            uint64_t v40 = v45;
          }
          while (!v18);
        }
        uint64_t v40 = v45;
      }
      while (v45 != (ORToolsCpTransposer *)((char *)this + 136));
    }
    uint64_t v46 = (ORToolsCpTransposer *)*((void *)this + 13);
    if (v46 != (ORToolsCpTransposer *)((char *)this + 112))
    {
      do
      {
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
        for (uint64_t i = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 40, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, &v57)[5]; i; uint64_t i = (uint64_t **)*i)
        {
          if (*(void *)(*((void *)a2 + 3) + 8 * *((int *)i + 4)))
          {
            uint64_t v48 = (uint64_t)i[3];
            size_t v49 = (uint64_t **)(*((void *)this + 1) + 48);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
            std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v49, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v57)[5] = v48;
            LODWORD(v48) = *(unsigned __int8 *)(*CpTransposeGraph::GetLayerTruthTable(**(CpTransposeGraph ***)this, *((void *)v46 + 4))+ 72 * (void)i[3]+ 25);
            uint64_t v50 = (uint64_t **)(*((void *)this + 1) + 24);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
            *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v50, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, &v57)+ 10) = v48;
          }
        }
        int v51 = (ORToolsCpTransposer *)*((void *)v46 + 1);
        if (v51)
        {
          do
          {
            uint64_t v52 = v51;
            int v51 = *(ORToolsCpTransposer **)v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            uint64_t v52 = (ORToolsCpTransposer *)*((void *)v46 + 2);
            BOOL v18 = *(void *)v52 == (void)v46;
            uint64_t v46 = v52;
          }
          while (!v18);
        }
        uint64_t v46 = v52;
      }
      while (v52 != (ORToolsCpTransposer *)((char *)this + 112));
    }
  }
  return v55 == 2 || v55 == 4;
}

void sub_23CB2731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::locale a19)
{
}

BOOL ORToolsCpTransposer::Execute(ORToolsCpTransposer *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  uint64_t v3 = (char *)this + 88;
  if (v2 != (char *)this + 88)
  {
    do
    {
      ORToolsCpTransposer::CreateTensorDecisionVariable(this, *((void *)v2 + 4));
      int v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          int v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
    uint64_t v2 = (char *)*((void *)this + 10);
  }
  if (v2 != v3)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)v2 + 4))ORToolsCpTransposer::CreateTensorConstraint((CpTransposeGraph ***)this, *((void *)v2 + 4)); {
      uint64_t v7 = (char *)*((void *)v2 + 1);
      }
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v6);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  uint64_t v9 = (ORToolsCpTransposer *)*((void *)this + 13);
  if (v9 != (ORToolsCpTransposer *)((char *)this + 112))
  {
    do
    {
      ORToolsCpTransposer::CreateLayerConstraints(this, *((void *)v9 + 4));
      uint64_t v10 = (ORToolsCpTransposer *)*((void *)v9 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(ORToolsCpTransposer **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (ORToolsCpTransposer *)*((void *)v9 + 2);
          BOOL v6 = *(void *)v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v6);
      }
      uint64_t v9 = v11;
    }
    while (v11 != (ORToolsCpTransposer *)((char *)this + 112));
  }
  ORToolsCpTransposer::SetObjectiveFunction(this);
  uint64_t v12 = (operations_research::sat *)*((void *)this + 24);
  ORToolsCpTransposer::PrintConstraintProblem(this);
  uint64_t v13 = *((void *)this + 25);
  *(_DWORD *)(v13 + 20) |= 0x20000000u;
  *(void *)(v13 + 280) = 0x403E000000000000;
  operations_research::sat::SolveWithParameters(v12, (const operations_research::sat::CpModelProto *)v13, (operations_research::sat::CpSolverResponse *)v16);
  BOOL v14 = ORToolsCpTransposer::TranslateToDecisionMap(this, (const operations_research::sat::CpSolverResponse *)v16);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v16);
  return v14;
}

void sub_23CB2750C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

void ORToolsCpBasedTransposerUtil_CallCpTransposer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[97] = *MEMORY[0x263EF8340];
  ORToolsCpTransposer::ORToolsCpTransposer((uint64_t)v4, a1, a2, a3, a4);
}

void sub_23CB275A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  BOOL v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  int8x8_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    size_t v4 = (void *)*--v3;
    result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23ECF28B0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x23ECF28C0](v13);
  return a1;
}

void sub_23CB27988(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x23ECF28C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23CB27968);
}

void sub_23CB279DC(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_23CB27B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle((absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *)(a1 + 32));
  return a1;
}

void absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *this)
{
  uint64_t v1 = *(void **)this;
  if (v1) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v1);
  }
}

{
  void *v1;

  uint64_t v1 = *(void **)this;
  if (v1) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v1);
  }
}

void std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](uint64_t a1, operations_research::sat::CpModelProto *a2)
{
  if (a2)
  {
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set((uint64_t)a2 + 192);
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set((uint64_t)a2 + 144);
    operations_research::sat::CpModelProto::~CpModelProto(a2);
    JUMPOUT(0x23ECF2BC0);
  }
}

operations_research::sat::SatParameters *std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100](operations_research::sat::SatParameters **a1, operations_research::sat::SatParameters *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    operations_research::sat::SatParameters::~SatParameters(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  size_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        size_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      size_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<unsigned long long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  size_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int8x8_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            int8x8_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *int8x8_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int8x8_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *int8x8_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB282DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,operations_research::sat::BoolVar>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = operator new(0x38uLL);
    v10[2] = *(_OWORD *)a3;
    *((void *)v10 + 6) = *(void *)(a3 + 16);
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<unsigned long long>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[4] = **a2;
  uint64_t result = operations_research::sat::BoolVar::BoolVar((uint64_t)(v6 + 5));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23CB287E0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23CB28A08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_23CB28C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,unsigned long>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      v8[3] = a2[3];
      unint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (void *)std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_multi<std::pair<int const,unsigned long> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_23CB28DC4(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_23CB28DE4(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            void *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

int *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_multi<std::pair<int const,unsigned long> const&>(void *a1, _OWORD *a2)
{
  int8x8_t v4 = (int *)operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[4];
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = v5;
  inserted = (void *)std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_23CB29304(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint8x8_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        size_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      size_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    size_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

BOOL CpGraph::GetTensorName(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v7 = a2;
  unint64_t v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(a1 + 192), &v7);
  unint64_t v5 = v4;
  if (v4) {
    std::string::operator=(a3, v4 + 1);
  }
  return v5 != 0;
}

BOOL CpGraph::GetLayerName(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v7 = a2;
  unint64_t v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(a1 + 152), &v7);
  unint64_t v5 = v4;
  if (v4) {
    std::string::operator=(a3, v4 + 1);
  }
  return v5 != 0;
}

void CpGraph::GetTensors(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int8x8_t v2 = this + 1;
  unint64_t v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    unint64_t v5 = this + 24;
    uint64_t v6 = (uint64_t)(a2 + 2);
    do
    {
      unint64_t v7 = *((void *)v3 + 4);
      unint64_t v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, &v22))
      {
        uint8x8_t v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          size_t v11 = *a2;
          uint64_t v12 = v9 - *a2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(v6, v15);
            size_t v11 = *a2;
            uint8x8_t v9 = a2[1];
          }
          else
          {
            uint64_t v16 = 0;
          }
          int v17 = (unint64_t *)&v16[8 * v12];
          *int v17 = v7;
          unint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            unint64_t v18 = *--v9;
            *--int v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *uint8x8_t v9 = v7;
          unint64_t v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      unint64_t v19 = (CpGraph *)*((void *)v3 + 1);
      if (v19)
      {
        do
        {
          unint64_t v20 = (CpGraph **)v19;
          unint64_t v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (CpGraph **)*((void *)v3 + 2);
          BOOL v21 = *v20 == v3;
          unint64_t v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      unint64_t v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_23CB2975C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *CpGraph::GetOutputTensor(CpGraph *this, unint64_t *a2)
{
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v7);
  if (result)
  {
    unint64_t v7 = (unint64_t *)&v6;
    unint64_t v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 3, &v7);
    unint64_t v5 = (char *)this + 104;
    if (v4) {
      unint64_t v5 = (char *)(v4 + 3);
    }
    return ***(void ****)v5;
  }
  return result;
}

char *CpGraph::GetInputTensors@<X0>(CpGraph *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v11 = a2;
  uint64_t v12 = a2;
  uint64_t result = (char *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v12);
  if (result)
  {
    uint64_t v12 = (unint64_t *)&v11;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 8, &v12);
    unint64_t v7 = (char *)this + 104;
    if (v6) {
      unint64_t v7 = (char *)(v6 + 3);
    }
    unint64_t v8 = *(void ***)v7;
    uint8x8_t v9 = (void **)*((void *)v7 + 1);
    unint64_t v10 = ((uint64_t)v9 - *(void *)v7) >> 3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>((char *)a3, v8, v9, v10);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>(char *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unint64_t v8 = *a2++;
      *v7++ = *v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_23CB298D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(void *a1, unint64_t **a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = **a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = **a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v3 == v8)
    {
      if (*result[2] == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ORToolsCpComputeConstant::ORToolsCpComputeConstant(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3)
{
  __n128 v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)a3);
  uint64_t v24 = v6;
  if (*(char *)(a3 + 71) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a3 + 71);
  }
  else {
    size_t v7 = *(void *)(a3 + 56);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a3 + 71) >= 0) {
      uint8x8_t v9 = (const void *)(a3 + 48);
    }
    else {
      uint8x8_t v9 = *(const void **)(a3 + 48);
    }
    memmove(p_p, v9, v7);
  }
  strcpy((char *)p_p + v7, "_compute_time_resident_const");
  *(void *)a1 = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(void *)(a1 + 8) = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __n128 v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 8));
  uint64_t v24 = v11;
  if (*(char *)(a3 + 71) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a3 + 71);
  }
  else {
    size_t v12 = *(void *)(a3 + 56);
  }
  unint64_t v13 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if (*(char *)(a3 + 71) >= 0) {
      uint64_t v14 = (const void *)(a3 + 48);
    }
    else {
      uint64_t v14 = *(const void **)(a3 + 48);
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "_compute_time_nonresident_const");
  *(void *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(void *)(a1 + 24) = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ORToolsCpComputeConstant::CreateCompileTimeWithChainVariables(a2, a3, (uint64_t **)(a1 + 32));
  __n128 v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(void *)(a3 + 40));
  uint64_t v24 = v16;
  if (*(char *)(a3 + 71) >= 0) {
    size_t v17 = *(unsigned __int8 *)(a3 + 71);
  }
  else {
    size_t v17 = *(void *)(a3 + 56);
  }
  unint64_t v18 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 34);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if (*(char *)(a3 + 71) >= 0) {
      unint64_t v19 = (const void *)(a3 + 48);
    }
    else {
      unint64_t v19 = *(const void **)(a3 + 48);
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "_compute_time_with_out_chain_const");
  *(void *)(a1 + 56) = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(void *)(a1 + 64) = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_23CB29C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  size_t v17 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpComputeConstant::CreateCompileTimeWithChainVariables(operations_research::sat::CpModelBuilder *a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = *(uint64_t **)(a2 + 16);
  uint8x8_t v4 = *(uint64_t **)(a2 + 24);
  if (v3 != v4)
  {
    unint64_t v8 = (const void *)(a2 + 48);
    uint64_t v31 = (uint64_t)(a3 + 2);
    do
    {
      v33[0] = operations_research::sat::CpModelBuilder::NewConstant(a1, *v3);
      v33[1] = v9;
      if (*(char *)(a2 + 71) >= 0) {
        size_t v10 = *(unsigned __int8 *)(a2 + 71);
      }
      else {
        size_t v10 = *(void *)(a2 + 56);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 33);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v10)
      {
        if (*(char *)(a2 + 71) >= 0) {
          size_t v12 = v8;
        }
        else {
          size_t v12 = *(const void **)(a2 + 48);
        }
        memmove(p_p, v12, v10);
      }
      strcpy((char *)p_p + v10, "_compute_time_with_in_chain_const");
      uint64_t v13 = operations_research::sat::BoolVar::WithName((int *)v33, &__p);
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      unint64_t v18 = a3[1];
      unint64_t v17 = (unint64_t)a3[2];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = ((char *)v18 - (char *)*a3) >> 4;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v17 - (void)*a3;
        if (v22 >> 3 > v21) {
          unint64_t v21 = v22 >> 3;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(v31, v23);
        }
        else {
          uint64_t v24 = 0;
        }
        char v25 = (uint64_t *)&v24[16 * v20];
        uint64_t *v25 = v15;
        v25[1] = v16;
        uint64_t v27 = *a3;
        uint64_t v26 = a3[1];
        int v28 = v25;
        if (v26 != *a3)
        {
          do
          {
            uint64_t v29 = *(v26 - 2);
            v26 -= 2;
            int v30 = *((_DWORD *)v26 + 2);
            *(v28 - 2) = v29;
            v28 -= 2;
            *((_DWORD *)v28 + 2) = v30;
          }
          while (v26 != v27);
          uint64_t v26 = *a3;
        }
        unint64_t v19 = v25 + 2;
        *a3 = v28;
        a3[1] = v25 + 2;
        a3[2] = (uint64_t *)&v24[16 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *unint64_t v18 = v13;
        v18[1] = v14;
        unint64_t v19 = v18 + 2;
      }
      a3[1] = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_23CB29E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpComputeConstant::~ORToolsCpComputeConstant(ORToolsCpComputeConstant *this)
{
  int8x8_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

uint64_t ComputeCycleEstimator::GetMaxCycle(ComputeCycleEstimator *this, int a2)
{
  uint64_t v4 = *(void *)this;
  unint64_t v5 = (char *)operator new(8uLL);
  *(void *)unint64_t v5 = v4;
  uint64_t v6 = v5 + 8;
  unint64_t v37 = v5 + 8;
  std::string __p = v5;
  BOOL v36 = v5 + 8;
  if (a2)
  {
    size_t v7 = (void *)((char *)this + 40);
    unint64_t v8 = v5 + 8;
  }
  else
  {
    size_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v37, 2uLL);
    uint64_t v11 = (char *)__p;
    size_t v12 = v36;
    v10[1] = *((void *)this + 1);
    uint64_t v13 = (char *)(v10 + 1);
    unint64_t v8 = (char *)&v10[v9];
    uint64_t v6 = (char *)(v10 + 2);
    while (v12 != v11)
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *((void *)v13 - 1) = v14;
      v13 -= 8;
    }
    std::string __p = v13;
    BOOL v36 = (char *)(v10 + 2);
    unint64_t v37 = (char *)&v10[v9];
    if (v11)
    {
      operator delete(v11);
      unint64_t v8 = v37;
    }
    BOOL v36 = (char *)(v10 + 2);
    size_t v7 = (void *)((char *)this + 40);
    if (v6 < v8)
    {
      v10[2] = *v7;
      uint64_t v15 = (uint64_t)(v10 + 3);
      goto LABEL_24;
    }
  }
  uint64_t v16 = (char *)__p;
  uint64_t v17 = (v6 - (unsigned char *)__p) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = v8 - (unsigned char *)__p;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v37, v20);
    uint64_t v16 = (char *)__p;
    uint64_t v6 = v36;
  }
  else
  {
    unint64_t v21 = 0;
  }
  uint64_t v22 = &v21[8 * v17];
  unint64_t v23 = &v21[8 * v20];
  *(void *)uint64_t v22 = *v7;
  uint64_t v15 = (uint64_t)(v22 + 8);
  while (v6 != v16)
  {
    uint64_t v24 = *((void *)v6 - 1);
    v6 -= 8;
    *((void *)v22 - 1) = v24;
    v22 -= 8;
  }
  std::string __p = v22;
  BOOL v36 = (char *)v15;
  unint64_t v37 = v23;
  if (v16) {
    operator delete(v16);
  }
LABEL_24:
  BOOL v36 = (char *)v15;
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&__p, v15, *((char **)this + 2), *((char **)this + 3), (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
  char v25 = (char *)__p + 8;
  BOOL v26 = __p == v36 || v25 == v36;
  uint64_t v27 = (uint64_t *)__p;
  if (!v26)
  {
    unint64_t v28 = *(void *)__p;
    uint64_t v27 = (uint64_t *)__p;
    uint64_t v29 = (char *)__p + 8;
    do
    {
      unint64_t v31 = *(void *)v29;
      v29 += 8;
      unint64_t v30 = v31;
      BOOL v32 = v28 >= v31;
      if (v28 <= v31) {
        unint64_t v28 = v30;
      }
      if (!v32) {
        uint64_t v27 = (uint64_t *)v25;
      }
      char v25 = v29;
    }
    while (v29 != v36);
  }
  uint64_t v33 = *v27;
  if (__p)
  {
    BOOL v36 = (char *)__p;
    operator delete(__p);
  }
  return v33;
}

void sub_23CB2A0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  size_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    BOOL v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)unint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    int v35 = v30;
    unint64_t v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    char v25 = &v23[-8 * a5];
    BOOL v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      BOOL v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)BOOL v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_23CB2A2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  size_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    size_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    size_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

__n128 CpTransposeGraph::GetTensorDimensions@<Q0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 32, &v7);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __n128 result = *(__n128 *)(v4 + 3);
  long long v6 = *(_OWORD *)(v4 + 5);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v4[7];
  return result;
}

void *CpTransposeGraph::GetRootTensorConstraint(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v4 = a2;
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 42, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

void *CpTransposeGraph::GetLayerTruthTable(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v4 = a2;
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 37, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264E82AE0, MEMORY[0x263F8C068]);
}

void sub_23CB2A4F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

operations_research::sat::CpModelBuilder *ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(operations_research::sat::CpModelBuilder *a1, uint64_t *a2)
{
  unint64_t v4 = operations_research::sat::CpModelBuilder::NewBoolVar(a1);
  unsigned int v24 = v5;
  uint64_t v34 = 0;
  int v35 = 0;
  BOOL v36 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      operations_research::sat::BoolVar::BoolVar((uint64_t)&v29, ~*(_DWORD *)(v6 + 8), *(void *)v6);
      uint64_t v9 = v29;
      unint64_t v8 = v30;
      uint64_t v10 = v35;
      if (v35 >= v36)
      {
        uint64_t v12 = (v35 - v34) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v36 - v34;
        if ((v36 - v34) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v36, v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[16 * v12];
        *(void *)unint64_t v17 = v9;
        *((void *)v17 + 1) = v8;
        uint64_t v19 = v34;
        unint64_t v18 = v35;
        uint64_t v20 = v17;
        if (v35 != v34)
        {
          do
          {
            uint64_t v21 = *((void *)v18 - 2);
            v18 -= 16;
            int v22 = *((_DWORD *)v18 + 2);
            *((void *)v20 - 2) = v21;
            v20 -= 16;
            *((_DWORD *)v20 + 2) = v22;
          }
          while (v18 != v19);
          unint64_t v18 = v34;
        }
        uint64_t v11 = v17 + 16;
        uint64_t v34 = v20;
        int v35 = v17 + 16;
        BOOL v36 = &v16[16 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)int v35 = v29;
        *((void *)v10 + 1) = v8;
        uint64_t v11 = v10 + 16;
      }
      int v35 = v11;
      v6 += 16;
    }
    while (v6 != v7);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v29, (uint64_t)v4, v24);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v34, (v35 - v34) >> 4, (uint64_t)v26);
  uint64_t v33 = operations_research::sat::CpModelBuilder::AddNotEqual(a1, (const operations_research::sat::LinearExpr *)&v29, (const operations_research::sat::LinearExpr *)v26);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BOOLean_AND");
  operations_research::sat::Constraint::WithName((uint64_t *)&v33, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v31)
  {
    BOOL v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    unint64_t v30 = v29;
    operator delete(v29);
  }
  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }
  return v4;
}

void sub_23CB2A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a24);
  BOOL v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

operations_research::sat::CpModelBuilder *ORToolsCpBasedAllocatorUtil::CreateBooleanOr(operations_research::sat::CpModelBuilder *a1, uint64_t *a2)
{
  unint64_t v4 = operations_research::sat::CpModelBuilder::NewBoolVar(a1);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v11, (uint64_t)v4, v5);
  operations_research::sat::LinearExpr::BooleanSum(*a2, (a2[1] - *a2) >> 4, (uint64_t)v8);
  uint64_t v14 = operations_research::sat::CpModelBuilder::AddEquality(a1, (const operations_research::sat::LinearExpr *)v11, (const operations_research::sat::LinearExpr *)v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BOOLean_OR");
  operations_research::sat::Constraint::WithName((uint64_t *)&v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v4;
}

void sub_23CB2A8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(operations_research::sat::CpModelBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, std::string *a6)
{
  uint64_t v10 = a3 + 1;
  uint64_t v11 = a3 + 1 - a2;
  uint64_t v12 = operations_research::sat::CpModelBuilder::NewConstant(a1, a2);
  uint64_t v14 = v13;
  unint64_t v15 = operations_research::sat::CpModelBuilder::NewConstant(a1, v11);
  uint64_t v17 = v16;
  unint64_t v18 = operations_research::sat::CpModelBuilder::NewConstant(a1, v10);
  v23[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a1, (uint64_t)v12, v14, (uint64_t)v15, v17, (uint64_t)v18, v19, v20, a4, a5);
  v23[1] = v21;
  return operations_research::sat::IntervalVar::WithName((int *)v23, a6);
}

void *ORToolsCpBasedAllocatorUtil::GetResponseString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((int *)this + 38);
  if (v5 > 4) {
    uint64_t v6 = "";
  }
  else {
    uint64_t v6 = off_264E82BC8[v5];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v6);
}

void ORToolsCpBasedAllocatorUtil::PrintConstraintProblem(void *a1, uint64_t a2, operations_research::sat *a3, CpAllocGraph *a4)
{
  if (a1[16])
  {
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[Variables] \n", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v7 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale((std::locale *)v39);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v8 = *(void *)(a2 + 32);
    if (v8) {
      uint64_t v9 = (const operations_research::sat::IntegerVariableProto **)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(_DWORD *)(a2 + 24))
    {
      uint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
      operations_research::sat::IntegerVariableProto::IntegerVariableProto((operations_research::sat::IntegerVariableProto *)v39, *v9);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\nvars: ", 7);
      std::to_string(&v40, 0);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v40;
      }
      else {
        uint64_t v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      unint64_t v15 = std::locale::use_facet(&v41, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v41);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      google::protobuf::Message::DebugString(&v40);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n\n[Constraints] \n", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)v39);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v18 = *(void *)(a2 + 56);
    if (v18) {
      uint64_t v19 = (const operations_research::sat::ConstraintProto **)(v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    if (*(_DWORD *)(a2 + 48))
    {
      uint64_t v20 = (std::locale::id *)MEMORY[0x263F8C108];
      operations_research::sat::ConstraintProto::ConstraintProto((operations_research::sat::ConstraintProto *)v39, *v19);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\nconstraint id: ", 16);
      std::to_string(&v40, 0);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v22 = &v40;
      }
      else {
        int v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v40.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
      char v25 = std::locale::use_facet(&v41, v20);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(&v41);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      google::protobuf::Message::DebugString(&v40);
    }
    BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n[Stats]", 8);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    uint64_t v27 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale((std::locale *)v39);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NodeCount=", 10);
    CpAllocGraph::GetLayers(a4, 1, (uint64_t *)v39);
    unint64_t v28 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    uint64_t v29 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)&v40);
    std::ostream::put();
    std::ostream::flush();
    if (v39[0].__r_.__value_.__r.__words[0])
    {
      v39[0].__r_.__value_.__l.__size_ = v39[0].__r_.__value_.__r.__words[0];
      operator delete(v39[0].__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"ChainableTensorCount=", 21);
    std::set<unsigned long long>::set[abi:ne180100]((uint64_t *)v39, (uint64_t)a4 + 296);
    unint64_t v30 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
    uint64_t v31 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale((std::locale *)&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v39, (void *)v39[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"RegionMaxCycle=", 15);
    BOOL v32 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    uint64_t v33 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale((std::locale *)v39);
    std::ostream::put();
    std::ostream::flush();
    operations_research::sat::CpModelStats(a3, v39, v34);
    if ((v39[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v35 = v39;
    }
    else {
      int v35 = (std::string *)v39[0].__r_.__value_.__r.__words[0];
    }
    if ((v39[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v39[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v39[0].__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v35, v36);
    if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39[0].__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB2B0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpBasedAllocatorUtil::PrintRegion(void *a1, uint64_t a2, void *a3)
{
  if (a1[16])
  {
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[Region", 7);
    if (*(char *)(a2 + 255) < 0) {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a2 + 232), *(void *)(a2 + 240));
    }
    else {
      std::string v35 = *(std::string *)(a2 + 232);
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v35;
    }
    else {
      uint64_t v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v11 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)&v33);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    CpAllocGraph::GetLayers((CpAllocGraph *)a2, 1, (uint64_t *)&v35);
    std::string::size_type v13 = v35.__r_.__value_.__l.__size_;
    uint64_t v12 = (unint64_t **)v35.__r_.__value_.__r.__words[0];
    if (v35.__r_.__value_.__r.__words[0] != v35.__r_.__value_.__l.__size_)
    {
      uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        unint64_t v15 = *v12;
        uint64_t __val = 0;
        CpAllocGraph::GetLayerSchedule((CpAllocGraph *)a2, (unint64_t)v15, &__val);
        memset(&v33, 0, sizeof(v33));
        CpGraph::GetLayerName(a2, (unint64_t)v15, &v33);
        OutputTensor = 0;
        OutputTensor = CpGraph::GetOutputTensor((CpGraph *)a2, v15);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sched=", 6);
        std::to_string(&__p, __val);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        for (uint64_t i = *(void **)(a2 + 304); i; uint64_t i = (void *)*i)
        {
          unint64_t v20 = i[4];
          if (v20 <= (unint64_t)OutputTensor)
          {
            if (v20 >= (unint64_t)OutputTensor)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" / ChainableProducer ", 21);
              break;
            }
            ++i;
          }
        }
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n\tname=", 7);
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v22 = &v33;
        }
        else {
          int v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v23 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v23 = v33.__r_.__value_.__l.__size_;
        }
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        char v25 = std::locale::use_facet((const std::locale *)&__p, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        BOOL v26 = (int *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a3, (unint64_t *)&OutputTensor);
        if (v26)
        {
          uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\t\tearly_decision = ", 19);
          ORToolsCpBasedAllocatorUtil::GetDecisionString(v26 + 6, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v28 = &__p;
          }
          else {
            unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
          }
          unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\t\tearly_decision = unset\n", 25);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        ++v12;
      }
      while (v12 != (unint64_t **)v13);
      uint64_t v12 = (unint64_t **)v35.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      operator delete(v12);
    }
  }
}

void sub_23CB2B5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *ORToolsCpBasedAllocatorUtil::GetDecisionString@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 5) {
    uint64_t v5 = "";
  }
  else {
    uint64_t v5 = off_264E82BF0[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void *ORToolsCpBasedAllocatorUtil::PrintSolverResult(void *result, CpAllocGraph *a2, void *a3, void *a4, void *a5, void *a6, ORToolsCpBasedAllocatorUtil *a7)
{
  if (!result[16]) {
    return result;
  }
  std::string::size_type v13 = result;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)"\n\n<Schedule results>\n", 21);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RESULT=", 7);
  ORToolsCpBasedAllocatorUtil::GetResponseString(a7, __p);
  if ((SBYTE7(v46) & 0x80u) == 0) {
    unint64_t v15 = __p;
  }
  else {
    unint64_t v15 = (void **)__p[0];
  }
  if ((SBYTE7(v46) & 0x80u) == 0) {
    uint64_t v16 = BYTE7(v46);
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  std::string::size_type v18 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v43);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v46) < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SolveTime=", 10);
  uint64_t v19 = (void *)std::ostream::operator<<();
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" secs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  uint64_t v21 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"e2e network latency=", 20);
  int v22 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  std::string::size_type v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  __n128 result = (void *)std::ostream::flush();
  int v24 = *((_DWORD *)a7 + 38);
  if (v24 != 2 && v24 != 4) {
    return result;
  }
  uint64_t v37 = a6;
  uint64_t v48 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v46 = 0u;
  int v47 = 1065353216;
  CpAllocGraph::GetLayers(a2, 1, (uint64_t *)&v43);
  locale = (unint64_t *)v43.__locale_;
  BOOL v26 = (unint64_t *)v44;
  if (v43.__locale_ == v44) {
    goto LABEL_46;
  }
  do
  {
    unint64_t v42 = *locale;
    uint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a4, &v42);
    if (v27)
    {
      uint64_t v41 = 0;
      CpAllocGraph::GetLayerSchedule(a2, v42, &v41);
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(__p, (unint64_t *)&v41))
      {
        if (ORToolsCpBasedAllocatorUtil::HasOutputChain((uint64_t)a7, a3, a2, (unint64_t *)v42))
        {
          unint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a5, &v42);
          ORToolsCpBasedAllocatorUtil::GetChainPairResultString(a7, (const operations_research::sat::CpSolverResponse *)v28[3], (const ORToolsChainScheduleVariable *)&v48, &v38);
          if ((v40 & 0x80u) == 0) {
            std::string::size_type v29 = &v38;
          }
          else {
            std::string::size_type v29 = v38;
          }
          if ((v40 & 0x80u) == 0) {
            uint64_t v30 = v40;
          }
          else {
            uint64_t v30 = v39;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v29, v30);
          if ((char)v40 < 0) {
            operator delete(v38);
          }
LABEL_24:
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v41, &v41);
          uint64_t v38 = (void *)(v41 + 1);
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v38, &v38);
          goto LABEL_44;
        }
        if (operations_research::sat::SolutionBooleanValue((uint64_t)a7, *(void *)(v27[3] + 160), *(void *)(v27[3] + 168)))
        {
          uint64_t v31 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v37, &v42);
          ORToolsCpBasedAllocatorUtil::GetL2DepPairResultString(a7, (const operations_research::sat::CpSolverResponse *)v31[3], (const ORToolsL2DepScheduleVariable *)&v48, &v38);
          if ((v40 & 0x80u) == 0) {
            BOOL v32 = &v38;
          }
          else {
            BOOL v32 = v38;
          }
          if ((v40 & 0x80u) == 0) {
            uint64_t v33 = v40;
          }
          else {
            uint64_t v33 = v39;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v32, v33);
          if ((char)v40 < 0) {
            operator delete(v38);
          }
          goto LABEL_24;
        }
        __n128 v34 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a4, &v42);
        ORToolsCpBasedAllocatorUtil::GetEngineLayerResultString(a7, (const operations_research::sat::CpSolverResponse *)v34[3], (const ORToolsLayerScheduleVariable *)&v48, &v38);
        if ((v40 & 0x80u) == 0) {
          std::string v35 = &v38;
        }
        else {
          std::string v35 = v38;
        }
        if ((v40 & 0x80u) == 0) {
          uint64_t v36 = v40;
        }
        else {
          uint64_t v36 = v39;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v35, v36);
        if ((char)v40 < 0) {
          operator delete(v38);
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v41, &v41);
      }
    }
LABEL_44:
    ++locale;
  }
  while (locale != v26);
  locale = (unint64_t *)v43.__locale_;
LABEL_46:
  if (locale)
  {
    uint64_t v44 = (std::locale::__imp *)locale;
    operator delete(locale);
  }
  return (void *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)__p);
}

void sub_23CB2BB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

BOOL ORToolsCpBasedAllocatorUtil::HasOutputChain(uint64_t a1, void *a2, CpGraph *this, unint64_t *a4)
{
  OutputTensor = CpGraph::GetOutputTensor(this, a4);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a2, (unint64_t *)&OutputTensor);
  return operations_research::sat::SolutionBooleanValue(a1, *(void *)(v6[3] + 32), *(void *)(v6[3] + 40));
}

uint64_t ORToolsCpBasedAllocatorUtil::GetChainPairResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsChainScheduleVariable *a3@<X2>, void *a4@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v145);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  int v7 = *((char *)a2 + 343);
  if (v7 >= 0) {
    uint64_t v8 = (char *)a2 + 320;
  }
  else {
    uint64_t v8 = (char *)*((void *)a2 + 40);
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a2 + 343);
  }
  else {
    uint64_t v9 = *((void *)a2 + 41);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n\tChain producer\n", 17);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 32, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  std::string::size_type v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(void *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &__p;
  }
  else {
    unint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  std::string::size_type v18 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  uint64_t v19 = (void *)std::ostream::operator<<();
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((void **)a2 + 6), *(void *)(*((void *)a2 + 6) + 8));
  uint64_t v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v21);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v144;
  }
  else {
    int v22 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v144.__r_.__value_.__l.__size_;
  }
  int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  char v25 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 23) - *((void *)a2 + 22) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    BOOL v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*((void *)a2 + 6) + 16), *(void *)(*((void *)a2 + 6) + 24));
    uint64_t v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v28);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = &v144;
    }
    else {
      std::string::size_type v29 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v144.__r_.__value_.__l.__size_;
    }
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    BOOL v32 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (v142)
    {
      size_t v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  uint64_t v33 = (void *)std::ostream::operator<<();
  __n128 v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 9), *((void *)a2 + 10));
  uint64_t v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v35);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v144;
  }
  else {
    uint64_t v36 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
  uint64_t v39 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  unsigned __int8 v40 = (void *)std::ostream::operator<<();
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 11), *((void *)a2 + 12));
  uint64_t v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v42);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::locale v43 = &v144;
  }
  else {
    std::locale v43 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  long long v46 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  int v47 = (void *)std::ostream::operator<<();
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  unint64_t v49 = *(void *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  uint64_t v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v50 + v49);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v51 = &v144;
  }
  else {
    int v51 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
  int v54 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 23) != *((void *)a2 + 22))
  {
    unint64_t v55 = 0;
    uint64_t v56 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::string v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::locale v58 = &__p;
      }
      else {
        std::locale v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = __p.__r_.__value_.__l.__size_;
      }
      long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((void *)a2 + 22) + 8 * v55), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v62 = &v144;
      }
      else {
        size_t v62 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = v144.__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
      std::string::size_type v65 = std::locale::use_facet(&v150, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v55;
    }
    while (v55 < (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
  }
  std::string::size_type v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 26), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v67 = &__p;
  }
  else {
    size_t v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  int v72 = *((char *)a2 + 367);
  if (v72 >= 0) {
    int v73 = (char *)a2 + 344;
  }
  else {
    int v73 = (char *)*((void *)a2 + 43);
  }
  if (v72 >= 0) {
    uint64_t v74 = *((unsigned __int8 *)a2 + 367);
  }
  else {
    uint64_t v74 = *((void *)a2 + 44);
  }
  size_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 35, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v76 = &__p;
  }
  else {
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v78 = (void *)std::ostream::operator<<();
  std::string::size_type v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)")=", 2);
  std::to_string(&__p, *(void *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v80 = &__p;
  }
  else {
    v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = __p.__r_.__value_.__l.__size_;
  }
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
  uint64_t v83 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  uint64_t v84 = (void *)std::ostream::operator<<();
  uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((void **)a2 + 13), *(void *)(*((void *)a2 + 13) + 8));
  uint64_t v86 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v86);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v87 = &v144;
  }
  else {
    std::string v87 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v88 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v88 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v87, v88);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
  uint64_t v90 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 28) - *((void *)a2 + 27) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v91 = (void *)std::ostream::operator<<();
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*((void *)a2 + 13) + 16), *(void *)(*((void *)a2 + 13) + 24));
    uint64_t v93 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v93);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v94 = &v144;
    }
    else {
      int v94 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v95 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v95 = v144.__r_.__value_.__l.__size_;
    }
    std::string::size_type v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
    size_t v97 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (v142)
    {
      size_t v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  std::string v98 = (void *)std::ostream::operator<<();
  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 16), *((void *)a2 + 17));
  uint64_t v100 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v100);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v101 = &v144;
  }
  else {
    long long v101 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v102 = v144.__r_.__value_.__l.__size_;
  }
  int v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
  uint64_t v104 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  uint64_t v105 = (void *)std::ostream::operator<<();
  uint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 18), *((void *)a2 + 19));
  uint64_t v107 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v107);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v108 = &v144;
  }
  else {
    uint64_t v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v109 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v109 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v108, v109);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(void *)(*v110 - 24)));
  uint64_t v111 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v112 = (void *)std::ostream::operator<<();
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)")=", 2);
  unint64_t v114 = *(void *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  uint64_t v115 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v115 + v114);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v116 = &v144;
  }
  else {
    uint64_t v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v117 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v117 = v144.__r_.__value_.__l.__size_;
  }
  size_t v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v116, v117);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 28) != *((void *)a2 + 27))
  {
    unint64_t v120 = 0;
    v121 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v120);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v123 = &__p;
      }
      else {
        std::string::size_type v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v124 = __p.__r_.__value_.__l.__size_;
      }
      long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
      std::string::size_type v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((void *)a2 + 27) + 8 * v120), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v127 = &v144;
      }
      else {
        size_t v127 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v128 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v128 = v144.__r_.__value_.__l.__size_;
      }
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
      std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(void *)(*v129 - 24)));
      uint64_t v130 = std::locale::use_facet(&v150, v121);
      ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v120;
    }
    while (v120 < (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 3);
  }
  uint64_t v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 31), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v132 = &__p;
  }
  else {
    uint64_t v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v133 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(void *)(*v134 - 24)));
  uint64_t v135 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  *(void *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v147, a4);
  v145[0] = *MEMORY[0x263F8C2B8];
  uint64_t v136 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v145 + *(void *)(v145[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v146 = v136;
  v147[0] = MEMORY[0x263F8C318] + 16;
  if (v148 < 0) {
    operator delete((void *)v147[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECF2B10](&v149);
}

void sub_23CB2D13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

uint64_t ORToolsCpBasedAllocatorUtil::GetL2DepPairResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsL2DepScheduleVariable *a3@<X2>, void *a4@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v145);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  int v7 = *((char *)a2 + 311);
  if (v7 >= 0) {
    uint64_t v8 = (char *)a2 + 288;
  }
  else {
    uint64_t v8 = (char *)*((void *)a2 + 36);
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a2 + 311);
  }
  else {
    uint64_t v9 = *((void *)a2 + 37);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n\tL2-Dep producer\n", 18);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 45, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  std::string::size_type v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(void *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &__p;
  }
  else {
    unint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  std::string::size_type v18 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  uint64_t v19 = (void *)std::ostream::operator<<();
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((void **)a2 + 6), *(void *)(*((void *)a2 + 6) + 8));
  uint64_t v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v21);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v144;
  }
  else {
    int v22 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v144.__r_.__value_.__l.__size_;
  }
  int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  char v25 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 25) - *((void *)a2 + 24) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    BOOL v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*((void *)a2 + 6) + 16), *(void *)(*((void *)a2 + 6) + 24));
    uint64_t v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v28);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = &v144;
    }
    else {
      std::string::size_type v29 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v144.__r_.__value_.__l.__size_;
    }
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    BOOL v32 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (v142)
    {
      size_t v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  uint64_t v33 = (void *)std::ostream::operator<<();
  __n128 v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 9), *((void *)a2 + 10));
  uint64_t v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v35);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v144;
  }
  else {
    uint64_t v36 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
  uint64_t v39 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  unsigned __int8 v40 = (void *)std::ostream::operator<<();
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 11), *((void *)a2 + 12));
  uint64_t v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v42);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::locale v43 = &v144;
  }
  else {
    std::locale v43 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  long long v46 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  int v47 = (void *)std::ostream::operator<<();
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  unint64_t v49 = *(void *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  uint64_t v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v50 + v49);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v51 = &v144;
  }
  else {
    int v51 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
  int v54 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 25) != *((void *)a2 + 24))
  {
    unint64_t v55 = 0;
    uint64_t v56 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::string v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::locale v58 = &__p;
      }
      else {
        std::locale v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = __p.__r_.__value_.__l.__size_;
      }
      long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((void *)a2 + 24) + 8 * v55), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v62 = &v144;
      }
      else {
        size_t v62 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = v144.__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
      std::string::size_type v65 = std::locale::use_facet(&v150, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v55;
    }
    while (v55 < (uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 3);
  }
  std::string::size_type v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 28), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v67 = &__p;
  }
  else {
    size_t v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  int v72 = *((char *)a2 + 335);
  if (v72 >= 0) {
    int v73 = (char *)a2 + 312;
  }
  else {
    int v73 = (char *)*((void *)a2 + 39);
  }
  if (v72 >= 0) {
    uint64_t v74 = *((unsigned __int8 *)a2 + 335);
  }
  else {
    uint64_t v74 = *((void *)a2 + 40);
  }
  size_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 48, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v76 = &__p;
  }
  else {
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v78 = (void *)std::ostream::operator<<();
  std::string::size_type v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)")=", 2);
  std::to_string(&__p, *(void *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v80 = &__p;
  }
  else {
    v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = __p.__r_.__value_.__l.__size_;
  }
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
  uint64_t v83 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  uint64_t v84 = (void *)std::ostream::operator<<();
  uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((void **)a2 + 13), *(void *)(*((void *)a2 + 13) + 8));
  uint64_t v86 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v86);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v87 = &v144;
  }
  else {
    std::string v87 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v88 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v88 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v87, v88);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
  uint64_t v90 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 30) - *((void *)a2 + 29) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v91 = (void *)std::ostream::operator<<();
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*((void *)a2 + 13) + 16), *(void *)(*((void *)a2 + 13) + 24));
    uint64_t v93 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v93);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v94 = &v144;
    }
    else {
      int v94 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v95 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v95 = v144.__r_.__value_.__l.__size_;
    }
    std::string::size_type v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
    size_t v97 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (v142)
    {
      size_t v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  std::string v98 = (void *)std::ostream::operator<<();
  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 16), *((void *)a2 + 17));
  uint64_t v100 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v100);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v101 = &v144;
  }
  else {
    long long v101 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v102 = v144.__r_.__value_.__l.__size_;
  }
  int v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
  uint64_t v104 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  uint64_t v105 = (void *)std::ostream::operator<<();
  uint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 18), *((void *)a2 + 19));
  uint64_t v107 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v107);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v108 = &v144;
  }
  else {
    uint64_t v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v109 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v109 = v144.__r_.__value_.__l.__size_;
  }
  uint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v108, v109);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(void *)(*v110 - 24)));
  uint64_t v111 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v112 = (void *)std::ostream::operator<<();
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)")=", 2);
  unint64_t v114 = *(void *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  uint64_t v115 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v115 + v114);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v116 = &v144;
  }
  else {
    uint64_t v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v117 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v117 = v144.__r_.__value_.__l.__size_;
  }
  size_t v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v116, v117);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v150, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 30) != *((void *)a2 + 29))
  {
    unint64_t v120 = 0;
    v121 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v120);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v123 = &__p;
      }
      else {
        std::string::size_type v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v124 = __p.__r_.__value_.__l.__size_;
      }
      long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
      std::string::size_type v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((void *)a2 + 29) + 8 * v120), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v127 = &v144;
      }
      else {
        size_t v127 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v128 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v128 = v144.__r_.__value_.__l.__size_;
      }
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
      std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(void *)(*v129 - 24)));
      uint64_t v130 = std::locale::use_facet(&v150, v121);
      ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v120;
    }
    while (v120 < (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3);
  }
  uint64_t v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 33), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v132 = &__p;
  }
  else {
    uint64_t v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v133 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(void *)(*v134 - 24)));
  uint64_t v135 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  *(void *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v142)
  {
    size_t v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v147, a4);
  v145[0] = *MEMORY[0x263F8C2B8];
  uint64_t v136 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v145 + *(void *)(v145[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v146 = v136;
  v147[0] = MEMORY[0x263F8C318] + 16;
  if (v148 < 0) {
    operator delete((void *)v147[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECF2B10](&v149);
}

void sub_23CB2E7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

uint64_t ORToolsCpBasedAllocatorUtil::GetEngineLayerResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsLayerScheduleVariable *a3@<X2>, void *a4@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v80);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)", ", 2);
  int v7 = *((char *)a2 + 271);
  if (v7 >= 0) {
    uint64_t v8 = (char *)a2 + 248;
  }
  else {
    uint64_t v8 = (char *)*((void *)a2 + 31);
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a2 + 271);
  }
  else {
    uint64_t v9 = *((void *)a2 + 32);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 24, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tlayer_begin(vars: ", 19);
  std::string::size_type v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(void *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &__p;
  }
  else {
    unint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  std::string::size_type v18 = std::locale::use_facet((const std::locale *)&v79, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v79);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tread_end_0(vars: ", 19);
  uint64_t v19 = (void *)std::ostream::operator<<();
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((void **)a2 + 6), *(void *)(*((void *)a2 + 6) + 8));
  uint64_t v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v21);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v79;
  }
  else {
    int v22 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v79.__r_.__value_.__l.__size_;
  }
  int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  char v25 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 14) - *((void *)a2 + 13) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tread_end_1(vars: ", 19);
    BOOL v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*((void *)a2 + 6) + 16), *(void *)(*((void *)a2 + 6) + 24));
    uint64_t v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v79, v28);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = &v79;
    }
    else {
      std::string::size_type v29 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v79.__r_.__value_.__l.__size_;
    }
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    BOOL v32 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v85);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tcomp_end(vars: ", 17);
  uint64_t v33 = (void *)std::ostream::operator<<();
  __n128 v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 9), *((void *)a2 + 10));
  uint64_t v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v35);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v79;
  }
  else {
    uint64_t v36 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v79.__r_.__value_.__l.__size_;
  }
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
  uint64_t v39 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\twrite_end(vars: ", 18);
  unsigned __int8 v40 = (void *)std::ostream::operator<<();
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 11), *((void *)a2 + 12));
  uint64_t v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v42);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::locale v43 = &v79;
  }
  else {
    std::locale v43 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v79.__r_.__value_.__l.__size_;
  }
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  long long v46 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tlayer_end(vars: ", 17);
  int v47 = (void *)std::ostream::operator<<();
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  unint64_t v49 = *(void *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  uint64_t v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v50 + v49);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v51 = &v79;
  }
  else {
    int v51 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v79.__r_.__value_.__l.__size_;
  }
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
  int v54 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)a2 + 14) != *((void *)a2 + 13))
  {
    unint64_t v55 = 0;
    uint64_t v56 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::string v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::locale v58 = &__p;
      }
      else {
        std::locale v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = __p.__r_.__value_.__l.__size_;
      }
      long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((void *)a2 + 13) + 8 * v55), &v79);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v62 = &v79;
      }
      else {
        size_t v62 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v63 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = v79.__r_.__value_.__l.__size_;
      }
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
      std::string::size_type v65 = std::locale::use_facet(&v85, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v55;
    }
    while (v55 < (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  }
  std::string::size_type v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 17), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v67 = &__p;
  }
  else {
    size_t v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet((const std::locale *)&v79, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v79);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 4), *((void *)a2 + 5));
  *(void *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v82, a4);
  v80[0] = *MEMORY[0x263F8C2B8];
  uint64_t v71 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v80 + *(void *)(v80[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v81 = v71;
  v82[0] = MEMORY[0x263F8C318] + 16;
  if (v83 < 0) {
    operator delete((void *)v82[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECF2B10](&v84);
}

void sub_23CB2F4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

uint64_t ORToolsCpBasedAllocatorUtil::GetAllocationCostString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, void *a3@<X8>)
{
  BOOL v7 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((void *)a2 + 28), *((void *)a2 + 29));
  BOOL v8 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((void *)a2 + 30), *((void *)a2 + 31));
  BOOL v9 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((void *)a2 + 32), *((void *)a2 + 33));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"(", 1);
  std::to_string(&__p, v7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  std::to_string(&v34, v8);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v34;
  }
  else {
    uint64_t v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v34.__r_.__value_.__l.__size_;
  }
  std::string::size_type v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  std::to_string(&v33, v9);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v33;
  }
  else {
    uint64_t v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7) {
      goto LABEL_25;
    }
  }
  else if (v7)
  {
LABEL_25:
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"L2", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 14), *((void *)a2 + 15));
    uint64_t v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v21);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v34;
    }
    else {
      int v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v34.__r_.__value_.__l.__size_;
    }
    goto LABEL_46;
  }
  if (v8)
  {
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"DRAM", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 16), *((void *)a2 + 17));
    uint64_t v25 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v25);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v34;
    }
    else {
      int v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v34.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (!v9) {
      goto LABEL_52;
    }
    BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Chain", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((void *)a2 + 26), *((void *)a2 + 27));
    uint64_t v27 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v27);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v34;
    }
    else {
      int v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v34.__r_.__value_.__l.__size_;
    }
  }
LABEL_46:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)v22, v23);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v31)
  {
    BOOL v32 = v31;
    operator delete(v31);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_52:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v37, a3);
  v35[0] = *MEMORY[0x263F8C2B8];
  uint64_t v28 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v36 = v28;
  v37[0] = MEMORY[0x263F8C318] + 16;
  if (v38 < 0) {
    operator delete((void *)v37[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECF2B10](&v39);
}

void sub_23CB2FA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::GetInPlaceString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v16, *(void *)(v6 + v7), *(void *)(v6 + v7 + 8));
      uint64_t v9 = operations_research::sat::SolutionIntegerValue(a2, (uint64_t *)&v16);
      if (__p)
      {
        std::string::size_type v18 = __p;
        operator delete(__p);
      }
      if (v16.__r_.__value_.__r.__words[0])
      {
        v16.__r_.__value_.__l.__size_ = v16.__r_.__value_.__r.__words[0];
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v9 > 0) {
        break;
      }
      ++v8;
      uint64_t v6 = *a1;
      v7 += 16;
      if (v8 >= (a1[1] - *a1) >> 4) {
        goto LABEL_19;
      }
    }
    if ((v8 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"\tInplace is enabled at idx ", 27);
      std::to_string(&v16, v8);
      uint64_t v11 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v16
          : (std::string *)v16.__r_.__value_.__r.__words[0];
      uint64_t v12 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v16.__r_.__value_.__r.__words[2])
          : v16.__r_.__value_.__l.__size_;
      std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_19:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21, a3);
  v19[0] = *MEMORY[0x263F8C2B8];
  uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v20 = v14;
  v21[0] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECF2B10](&v23);
}

void sub_23CB2FD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL ORToolsCpBasedAllocatorUtil_CallCpAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  ORToolsCpAllocator::ORToolsCpAllocator(&v10, a1, a2, a3, a4);
  BOOL v6 = ORToolsCpAllocator::Execute((ORToolsCpAllocator *)&v10);
  BOOL v7 = v6;
  if (v11 != (uint64_t **)a5 && v6)
  {
    *(_DWORD *)(a5 + 32) = v12;
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,void *> *>>((void *)a5, v11[2], 0);
  }
  ORToolsCpAllocator::~ORToolsCpAllocator((ORToolsCpAllocator *)&v10);
  return v7;
}

void sub_23CB2FE14(_Unwind_Exception *exception_object)
{
}

uint64_t *std::set<unsigned long long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23CB2FE70(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      __n128 result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v5, v6, v4 + 4, v4 + 4);
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t **)std::__tree<unsigned long long>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  BOOL v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    BOOL v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<unsigned long long>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long long>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    std::string v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          std::string v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        std::string v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      uint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      int v12 = (uint64_t *)*v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_multi<std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_23CB30224(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_23CB30244(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  std::string v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    __n128 result = v16;
    std::string v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_multi<std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(void *a1, _OWORD *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  *int8x8_t v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_23CB3067C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *ORToolsTensorAllocationVariable::ORToolsTensorAllocationVariable(uint64_t *a1, operations_research::sat::CpModelBuilder *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  std::string::size_type v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  uint64_t v31 = v4;
  std::operator+<char>();
  unint64_t v5 = std::string::append(&v23, ":resident_decision", 0x12uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  *a1 = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[1] = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::size_type v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  uint64_t v31 = v8;
  std::operator+<char>();
  uint8x8_t v9 = std::string::append(&v23, ":nonresident_decision", 0x15uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  a1[2] = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[3] = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::size_type v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  uint64_t v31 = v12;
  std::operator+<char>();
  size_t v13 = std::string::append(&v23, ":chain_decision", 0xFuLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  a1[4] = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[5] = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::size_type v30 = (operations_research::sat::CpModelBuilder *)*a1;
  LODWORD(v31) = *((_DWORD *)a1 + 2);
  uint64_t v32 = a1[2];
  int v33 = *((_DWORD *)a1 + 6);
  uint64_t v34 = a1[4];
  int v35 = *((_DWORD *)a1 + 10);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v30, 3, (uint64_t)&__p);
  std::string v16 = operations_research::sat::CpModelBuilder::NewConstant(a2, 1);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v23, (uint64_t)v16, v17);
  std::string::size_type v29 = operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v23);
  std::operator+<char>();
  unint64_t v18 = std::string::append(&v21, ":mutex_allocation_decision", 0x1AuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::Constraint::WithName((uint64_t *)&v29, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v23.__r_.__value_.__r.__words[0])
  {
    v23.__r_.__value_.__l.__size_ = v23.__r_.__value_.__r.__words[0];
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_23CB309A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a32);
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::ORToolsCpAllocator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>::unordered_map(a1 + 8, a3);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  operator new();
}

void sub_23CB30D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::ofstream::~ofstream(v20);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)(v19 + 216), 0);
  int v22 = *(operations_research::sat::CpModelProto **)(v18 + 160);
  *(void *)(v18 + 160) = 0;
  if (v22) {
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](v18 + 160, v22);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table(v18);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a9);
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::~ORToolsCpAllocator(ORToolsCpAllocator *this)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *((void *)this + 28) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)this + *(void *)(v3 - 24) + 224) = *(void *)(v2 + 24);
  MEMORY[0x23ECF2880]((char *)this + 232);
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10]((char *)this + 640);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)this + 27, 0);
  uint64_t v4 = (operations_research::sat::CpModelProto *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v4) {
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100]((uint64_t)this + 208, v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 8);
}

void *ORToolsCpAllocator::CreateTensorAllocationVariable(CpGraph **this, unint64_t *a2)
{
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&v9);
  std::string::size_type size = v9.__r_.__value_.__l.__size_;
  uint64_t v4 = (unint64_t *)v9.__r_.__value_.__r.__words[0];
  if (v9.__r_.__value_.__r.__words[0] != v9.__r_.__value_.__l.__size_)
  {
    do
    {
      unint64_t v8 = *v4;
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 21, &v8))
      {
        memset(&__p, 0, sizeof(__p));
        CpGraph::GetTensorName((uint64_t)*this, v8, &__p);
        operator new();
      }
      ++v4;
    }
    while (v4 != (unint64_t *)size);
    uint64_t v4 = (unint64_t *)v9.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    v9.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
    operator delete(v4);
  }
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 21, (unint64_t *)&OutputTensor);
  if (!result)
  {
    memset(&v9, 0, sizeof(v9));
    CpGraph::GetTensorName((uint64_t)*this, (unint64_t)OutputTensor, &v9);
    operator new();
  }
  return result;
}

void sub_23CB310FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, ORToolsCpL2AccessVariable *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::CreateLayerScheduleVariable(CpGraph **this, unint64_t *a2, const operations_research::Domain *a3)
{
  uint64_t v3 = a2;
  v26[0] = 0;
  v26[1] = a2;
  int v24 = 0;
  uint64_t v25 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&v23);
  std::string::size_type size = v23.__r_.__value_.__l.__size_;
  unint64_t v5 = (unint64_t *)v23.__r_.__value_.__r.__words[0];
  if (v23.__r_.__value_.__r.__words[0] != v23.__r_.__value_.__l.__size_)
  {
    uint64_t v18 = v3;
    do
    {
      OutputTensor = 0;
      OutputTensor = (void *)*v5;
      std::string __p = &OutputTensor;
      uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, (void **)&__p)[3];
      unint64_t v8 = v25;
      if ((unint64_t)v25 >= v26[0])
      {
        uint64_t v10 = (v25 - v24) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = (uint64_t)(v26[0] - (void)v24) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if (v26[0] - (void)v24 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)v26, v12);
        }
        else {
          size_t v13 = 0;
        }
        long long v14 = &v13[8 * v10];
        *(void *)long long v14 = v7;
        std::string v9 = v14 + 8;
        std::string v16 = v24;
        uint64_t v15 = v25;
        if (v25 != v24)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          uint64_t v15 = v24;
        }
        int v24 = v14;
        uint64_t v25 = v9;
        v26[0] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)uint64_t v25 = v7;
        std::string v9 = v8 + 8;
      }
      uint64_t v25 = v9;
      ++v5;
    }
    while (v5 != (unint64_t *)size);
    unint64_t v5 = (unint64_t *)v23.__r_.__value_.__r.__words[0];
    uint64_t v3 = v18;
  }
  if (v5)
  {
    v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    operator delete(v5);
  }
  OutputTensor = 0;
  OutputTensor = CpGraph::GetOutputTensor(*this, v3);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&OutputTensor;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, &v23);
  std::string v21 = 0;
  if (CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v3, &v21))
  {
    memset(&v23, 0, sizeof(v23));
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    CpGraph::GetLayerName((uint64_t)*this, (unint64_t)v3, &v23);
    CpAllocGraph::GetLayerSchedule(*this, (unint64_t)v3, &v20);
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v21, (char **)&__p);
    operator new();
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_23CB31494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, ORToolsLayerScheduleVariable *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](&a20, 0);
  if (a29 < 0) {
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 128);
  if (v31)
  {
    *(void *)(v29 - 120) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::CreateChainScheduleVariable(CpGraph **this, unint64_t *a2, unint64_t *a3, unint64_t a4, const operations_research::Domain *a5)
{
  unint64_t v5 = this;
  int v54 = a3;
  v55[0] = a2;
  int v51 = 0;
  std::string::size_type v52 = 0;
  uint64_t v53 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&p_OutputTensor);
  long long v6 = p_OutputTensor;
  uint64_t v7 = (std::string::size_type **)v49;
  int v35 = v5;
  if (p_OutputTensor != (std::string::size_type **)v49)
  {
    do
    {
      v44[0] = 0;
      v44[0] = *v6;
      OutputTensor = (std::string::size_type *)v44;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 21), (unint64_t *)v44, (uint64_t)&std::piecewise_construct, &OutputTensor)[3];
      std::string v9 = v52;
      if (v52 >= v53)
      {
        uint64_t v11 = (v52 - v51) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = (v53 - v51) >> 2;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v53 - v51) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v53, v13);
        }
        else {
          long long v14 = 0;
        }
        uint64_t v15 = &v14[8 * v11];
        *(void *)uint64_t v15 = v8;
        uint64_t v10 = v15 + 8;
        uint64_t v17 = v51;
        std::string v16 = v52;
        if (v52 != v51)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          std::string v16 = v51;
        }
        int v51 = v15;
        std::string::size_type v52 = v10;
        uint64_t v53 = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)std::string::size_type v52 = v8;
        uint64_t v10 = v9 + 8;
      }
      std::string::size_type v52 = v10;
      ++v6;
    }
    while (v6 != v7);
    long long v6 = p_OutputTensor;
  }
  if (v6)
  {
    unint64_t v49 = (char *)v6;
    operator delete(v6);
  }
  uint64_t v19 = (uint64_t)(v5 + 21);
  OutputTensor = CpGraph::GetOutputTensor(*v5, v55[0]);
  p_OutputTensor = &OutputTensor;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, &p_OutputTensor);
  p_OutputTensor = 0;
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  CpGraph::GetInputTensors(*v5, v54, (uint64_t)&OutputTensor);
  uint64_t v20 = OutputTensor;
  std::string v21 = v46;
  if (OutputTensor != v46)
  {
    do
    {
      v41.__r_.__value_.__r.__words[0] = 0;
      v41.__r_.__value_.__r.__words[0] = *v20;
      v44[0] = &v41;
      uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v19, (unint64_t *)&v41, (uint64_t)&std::piecewise_construct, v44)[3];
      std::string v23 = v49;
      if (v49 >= v50)
      {
        uint64_t v25 = (v49 - (char *)p_OutputTensor) >> 3;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (v50 - (char *)p_OutputTensor) >> 2;
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        if ((unint64_t)(v50 - (char *)p_OutputTensor) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v50, v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * v25];
        *(void *)uint64_t v29 = v22;
        int v24 = v29 + 8;
        uint64_t v31 = p_OutputTensor;
        std::string::size_type v30 = (std::string::size_type **)v49;
        if (v49 != (char *)p_OutputTensor)
        {
          do
          {
            uint64_t v32 = (uint64_t)*--v30;
            *((void *)v29 - 1) = v32;
            v29 -= 8;
          }
          while (v30 != v31);
          std::string::size_type v30 = p_OutputTensor;
        }
        p_OutputTensor = (std::string::size_type **)v29;
        unint64_t v49 = v24;
        uint64_t v50 = &v28[8 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(void *)unint64_t v49 = v22;
        int v24 = v23 + 8;
      }
      unint64_t v49 = v24;
      ++v20;
    }
    while (v20 != v21);
    uint64_t v20 = OutputTensor;
    unint64_t v5 = v35;
  }
  if (v20)
  {
    long long v46 = v20;
    operator delete(v20);
  }
  v44[0] = CpGraph::GetOutputTensor(*v5, v54);
  OutputTensor = (std::string::size_type *)v44;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v19, (unint64_t *)v44, (uint64_t)&std::piecewise_construct, &OutputTensor);
  v44[0] = v55;
  uint64_t v33 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)v55, (uint64_t)&std::piecewise_construct, v44)[3];
  long long v46 = 0;
  uint64_t v47 = 0;
  OutputTensor = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&OutputTensor, *(const void **)(v33 + 192), *(void *)(v33 + 200), (uint64_t)(*(void *)(v33 + 200) - *(void *)(v33 + 192)) >> 4);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, &v41)[3];
  memset(v44, 0, sizeof(v44));
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(v44, *(const void **)(v34 + 192), *(void *)(v34 + 200), (uint64_t)(*(void *)(v34 + 200) - *(void *)(v34 + 192)) >> 4);
  uint64_t v42 = 0;
  std::locale v43 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v55[0], &v43);
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v54, &v42);
  memset(&v41, 0, sizeof(v41));
  uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
  CpGraph::GetLayerName((uint64_t)*v5, (unint64_t)v55[0], &v41);
  CpAllocGraph::GetLayerSchedule(*v5, (unint64_t)v55[0], &v40);
  memset(&v39, 0, sizeof(v39));
  uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
  CpGraph::GetLayerName((uint64_t)*v5, (unint64_t)v54, &v39);
  CpAllocGraph::GetLayerSchedule(*v5, (unint64_t)v54, &v38);
  LayerCycleAndFootprintEstimator::GetReadBehaviors(v43, (char **)&__p);
  ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(v5, v55[0]);
  LayerCycleAndFootprintEstimator::GetReadBehaviors(v42, &v36);
  ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(v5, v54);
  operator new();
}

void sub_23CB31B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,ORToolsChainScheduleVariable *a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](&a39, 0);
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 217) < 0) {
    operator delete(*(void **)(v46 - 240));
  }
  uint64_t v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(void *)(v46 - 192) = v48;
    operator delete(v48);
  }
  unint64_t v49 = *(void **)(v46 - 176);
  if (v49)
  {
    *(void *)(v46 - 168) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v46 - 152);
  if (v50)
  {
    *(void *)(v46 - 144) = v50;
    operator delete(v50);
  }
  int v51 = *(void **)(v46 - 128);
  if (v51)
  {
    *(void *)(v46 - 120) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(CpAllocGraph **this, unint64_t *a2)
{
  uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayerSchedule(*this, (unint64_t)a2, &v17);
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&__p);
  uint64_t v4 = __p;
  unint64_t v5 = v16;
  if (__p != v16)
  {
    while (2)
    {
      uint64_t v14 = *v4;
      long long v6 = *this;
      uint64_t v7 = (void *)((char *)*this + 24);
      uint64_t v18 = (uint64_t)&v14;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v7, (unint64_t **)&v18);
      std::string v9 = (uint64_t **)((char *)v6 + 104);
      if (v8) {
        std::string v9 = v8 + 3;
      }
      uint64_t v10 = (unint64_t **)*v9;
      uint64_t v11 = (unint64_t **)v9[1];
      while (v10 != v11)
      {
        unint64_t v12 = **v10;
        if ((unint64_t *)v12 != a2)
        {
          uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
          CpAllocGraph::GetLayerSchedule(*this, v12, &v18);
          if (v18 > v17)
          {
            if (__p)
            {
              std::string v16 = __p;
              operator delete(__p);
            }
            return 0;
          }
        }
        ++v10;
      }
      if (++v4 != v5) {
        continue;
      }
      break;
    }
    uint64_t v4 = __p;
  }
  if (v4)
  {
    std::string v16 = v4;
    operator delete(v4);
  }
  return 1;
}

void sub_23CB31D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(CpAllocGraph **this, unint64_t *a2)
{
  uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayerSchedule(*this, (unint64_t)a2, &v13);
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  uint64_t v4 = *this;
  unint64_t v5 = (void *)((char *)*this + 64);
  uint64_t p_OutputTensor = (uint64_t)&OutputTensor;
  long long v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v5, (unint64_t **)&p_OutputTensor);
  uint64_t v7 = (uint64_t **)((char *)v4 + 104);
  if (v6) {
    uint64_t v7 = v6 + 3;
  }
  uint64_t v8 = (unint64_t **)*v7;
  std::string v9 = (unint64_t **)v7[1];
  while (1)
  {
    if (v8 == v9) {
      return 1;
    }
    unint64_t v10 = **v8;
    if ((unint64_t *)v10 != a2)
    {
      uint64_t p_OutputTensor = 0x7FFFFFFFFFFFFFFFLL;
      CpAllocGraph::GetLayerSchedule(*this, v10, &p_OutputTensor);
      if (p_OutputTensor < v13) {
        break;
      }
    }
    ++v8;
  }
  return 0;
}

void ORToolsCpAllocator::CreateL2DepScheduleVariable(CpGraph **this, unint64_t *a2, unint64_t *a3, unint64_t a4, const operations_research::Domain *a5)
{
  unint64_t v5 = this;
  unint64_t v49 = a3;
  uint64_t v50 = a2;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&p_OutputTensor);
  uint64_t v7 = (void **)p_OutputTensor;
  long long v6 = (void **)v44;
  uint64_t v36 = v5;
  if (p_OutputTensor != v44)
  {
    uint64_t v8 = (uint64_t)(v5 + 21);
    do
    {
      __p[0] = 0;
      __p[0] = *v7;
      OutputTensor = __p;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v8, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (void **)&OutputTensor)[3];
      unint64_t v10 = v47;
      if (v47 >= v48)
      {
        uint64_t v12 = (v47 - v46) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = (v48 - v46) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v48 - v46) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v48, v14);
        }
        else {
          uint64_t v15 = 0;
        }
        std::string v16 = &v15[8 * v12];
        *(void *)std::string v16 = v9;
        uint64_t v11 = v16 + 8;
        uint64_t v18 = v46;
        uint64_t v17 = v47;
        if (v47 != v46)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = v46;
        }
        uint64_t v46 = v16;
        uint64_t v47 = v11;
        uint64_t v48 = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v47 = v9;
        uint64_t v11 = v10 + 8;
      }
      uint64_t v47 = v11;
      ++v7;
    }
    while (v7 != v6);
    uint64_t v7 = (void **)p_OutputTensor;
    unint64_t v5 = v36;
  }
  if (v7)
  {
    std::string::size_type v44 = (char *)v7;
    operator delete(v7);
  }
  uint64_t v20 = (uint64_t)(v5 + 21);
  OutputTensor = CpGraph::GetOutputTensor(*v5, v50);
  uint64_t p_OutputTensor = &OutputTensor;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, (void **)&p_OutputTensor);
  uint64_t p_OutputTensor = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  CpGraph::GetInputTensors(*v5, v49, (uint64_t)&OutputTensor);
  uint64_t v22 = (void **)OutputTensor;
  std::string v21 = v41;
  if (OutputTensor != v41)
  {
    do
    {
      v51[0] = 0;
      v51[0] = *v22;
      __p[0] = v51;
      uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v20, (unint64_t *)v51, (uint64_t)&std::piecewise_construct, (void **)__p)[3];
      int v24 = v44;
      if (v44 >= v45)
      {
        uint64_t v26 = (v44 - (unsigned char *)p_OutputTensor) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = (v45 - (unsigned char *)p_OutputTensor) >> 2;
        if (v27 <= v26 + 1) {
          unint64_t v27 = v26 + 1;
        }
        if ((unint64_t)(v45 - (unsigned char *)p_OutputTensor) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v45, v28);
        }
        else {
          uint64_t v29 = 0;
        }
        std::string::size_type v30 = &v29[8 * v26];
        *(void *)std::string::size_type v30 = v23;
        uint64_t v25 = v30 + 8;
        uint64_t v32 = (char *)p_OutputTensor;
        uint64_t v31 = v44;
        if (v44 != p_OutputTensor)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *((void *)v30 - 1) = v33;
            v30 -= 8;
          }
          while (v31 != v32);
          uint64_t v31 = (char *)p_OutputTensor;
        }
        uint64_t p_OutputTensor = v30;
        std::string::size_type v44 = v25;
        uint64_t v45 = &v29[8 * v28];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(void *)std::string::size_type v44 = v23;
        uint64_t v25 = v24 + 8;
      }
      std::string::size_type v44 = v25;
      ++v22;
    }
    while (v22 != v21);
    uint64_t v22 = (void **)OutputTensor;
    unint64_t v5 = v36;
  }
  if (v22)
  {
    std::string v41 = v22;
    operator delete(v22);
  }
  __p[0] = CpGraph::GetOutputTensor(*v5, v49);
  OutputTensor = __p;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v20, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (void **)&OutputTensor);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v50, &v39);
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v49, &v38);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v5 + 6, (unint64_t *)&v50);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v5 + 6, (unint64_t *)&v49);
  __p[0] = &v50;
  uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)&v50, (uint64_t)&std::piecewise_construct, (void **)__p)[3];
  std::string v41 = 0;
  uint64_t v42 = 0;
  OutputTensor = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&OutputTensor, *(const void **)(v34 + 192), *(void *)(v34 + 200), (uint64_t)(*(void *)(v34 + 200) - *(void *)(v34 + 192)) >> 4);
  v51[0] = &v49;
  uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)&v49, (uint64_t)&std::piecewise_construct, v51)[3];
  memset(__p, 0, sizeof(__p));
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(__p, *(const void **)(v35 + 192), *(void *)(v35 + 200), (uint64_t)(*(void *)(v35 + 200) - *(void *)(v35 + 192)) >> 4);
  ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(v5, v50);
  ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(v5, v49);
  operator new();
}

void sub_23CB32390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,ORToolsL2DepScheduleVariable *a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](&a21, 0);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  uint64_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t *ORToolsCpAllocator::GetResidentBufferSize(ORToolsCpAllocator *this, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = *(void *)this;
  uint64_t v4 = (void *)(*(void *)this + 64);
  unint64_t v5 = &v27;
  uint64_t v25 = (unint64_t *)&v27;
  long long v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, &v25);
  uint64_t v7 = (uint64_t **)(v3 + 104);
  if (v6) {
    uint64_t v7 = v6 + 3;
  }
  uint64_t v8 = (unint64_t **)*v7;
  uint64_t v9 = (unint64_t **)v7[1];
  while (v8 != v9)
  {
    unint64_t v10 = *v8;
    uint64_t v25 = 0;
    if (CpAllocGraph::GetLayerBehavior(*(void *)this, *v10, &v25)) {
      return *(uint64_t **)(v25[4] + 8);
    }
    ++v8;
  }
  uint64_t v11 = *(void *)this;
  uint64_t v12 = (void *)(*(void *)this + 24);
  uint64_t v25 = (unint64_t *)&v27;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v12, &v25);
  unint64_t v14 = (uint64_t **)(v11 + 104);
  if (v13) {
    unint64_t v14 = v13 + 3;
  }
  uint64_t v15 = (unint64_t ***)*v14;
  std::string v16 = (unint64_t ***)v14[1];
  if (*v14 == (uint64_t *)v16) {
    return 0;
  }
  while (1)
  {
    uint64_t v17 = *v15;
    CpGraph::GetInputTensors(*(CpGraph **)this, **v15, (uint64_t)&v25);
    uint64_t v19 = v25;
    uint64_t v18 = v26;
    if (v26 != v25)
    {
      uint64_t v20 = 0;
      while (1)
      {
        if (v27 == v19[v20])
        {
          int v24 = 0;
          if (CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)*v17, &v24))
          {
            LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v24, (char **)__p);
            unint64_t v5 = *(uint64_t **)(*((void *)__p[0] + v20) + 8);
            __p[1] = __p[0];
            operator delete(__p[0]);
            int v21 = 1;
            uint64_t v18 = v25;
            if (v25) {
              goto LABEL_19;
            }
            goto LABEL_20;
          }
          uint64_t v19 = v25;
          uint64_t v18 = v26;
        }
        if (++v20 >= (unint64_t)(v18 - v19))
        {
          int v21 = 0;
          uint64_t v18 = v19;
          if (v19) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }
      }
    }
    int v21 = 0;
    if (v26)
    {
LABEL_19:
      uint64_t v26 = v18;
      operator delete(v18);
    }
LABEL_20:
    if (v21) {
      return v5;
    }
    if (++v15 == v16) {
      return 0;
    }
  }
}

void sub_23CB325F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpAllocator::AddResidentAllocationConstraint(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v39 = a2;
  long long v38 = 0uLL;
  unint64_t v5 = a1 + 1;
  CpAllocGraph::GetTensorLiverange(*a1, a2, &v38);
  long long v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v5, &v39);
  if (!v6 || *((_DWORD *)v6 + 6) != 1)
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    uint64_t v7 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(a1 + 21), &v39, (uint64_t)&std::piecewise_construct, &v37)[3];
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v10 = (operations_research::sat::CpModelBuilder *)a1[26];
    ResidentBufferSize = ORToolsCpAllocator::GetResidentBufferSize((ORToolsCpAllocator *)a1, v39);
    int v12 = operations_research::sat::CpModelBuilder::NewConstant(v10, (uint64_t)ResidentBufferSize);
    uint64_t v14 = v13;
    memset(&v37, 0, sizeof(v37));
    CpGraph::GetTensorName(*a1, v39, &v37);
    uint64_t v15 = v38;
    uint64_t v16 = *a1;
    uint64_t v17 = (void *)(*a1 + 64);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    uint64_t v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v17, (unint64_t **)&v35);
    uint64_t v19 = (void *)(v16 + 104);
    if (v18) {
      uint64_t v19 = v18 + 3;
    }
    if (v19[1] != *v19)
    {
      uint64_t v20 = *a1;
      int v21 = (void *)(*a1 + 64);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
      uint64_t v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v21, (unint64_t **)&v35);
      uint64_t v23 = (unint64_t ***)(v20 + 104);
      if (v22) {
        uint64_t v23 = (unint64_t ***)(v22 + 3);
      }
      int v24 = **v23;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(a1 + 6), v24, (uint64_t)&std::piecewise_construct, &v35)[3];
      uint64_t v27 = *(void *)(v25 + 192);
      uint64_t v26 = *(void *)(v25 + 200);
      v35.__r_.__value_.__r.__words[0] = 0;
      CpAllocGraph::GetLayerSchedule((CpAllocGraph *)*a1, *v24, (uint64_t *)&v35);
      if (v26 != v27) {
        uint64_t v15 = v35.__r_.__value_.__r.__words[0] + 1;
      }
    }
    unint64_t v28 = (operations_research::sat::CpModelBuilder *)a1[26];
    uint64_t v29 = *((void *)&v38 + 1);
    std::operator+<char>();
    std::string::size_type v30 = std::string::append(&v35, ":resident_demand_pressure_interval", 0x22uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    int v32 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v28, v15, v29, v8, v9, &__p);
    int v34 = v33;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    operations_research::sat::CumulativeConstraint::AddDemand(a3, v32, v34, v12, v14);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB32860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpAllocator::AddL2DepHWConstraint(ORToolsCpAllocator *this, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v69 = a3;
  uint64_t v70 = a2;
  unint64_t v68 = a5;
  uint64_t v8 = (char *)this + 48;
  std::string::size_type v63 = &v70;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, (unint64_t *)&v70, (uint64_t)&std::piecewise_construct, (void **)&v63);
  std::string::size_type v63 = &v69;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v8, (unint64_t *)&v69, (uint64_t)&std::piecewise_construct, (void **)&v63);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(this, v70);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(this, v69);
  memset(&v67, 0, sizeof(v67));
  CpGraph::GetTensorName(*(void *)this, a5, &v67);
  uint64_t v11 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(void *)(v9[3] + 160), *(void *)(v9[3] + 168));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v59, *(void *)(v10[3] + 176), *(void *)(v10[3] + 184));
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v11, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
  std::operator+<char>();
  int v12 = std::string::append(&__str, ":l2_dep_equality", 0x10uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::Constraint::WithName((uint64_t *)&v54, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v61)
  {
    size_t v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  if (v65)
  {
    std::string::size_type v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  std::string::size_type v63 = &v68;
  uint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, &v68, (uint64_t)&std::piecewise_construct, (void **)&v63);
  uint64_t v15 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(void *)(v9[3] + 160), *(void *)(v9[3] + 168));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v59, *(void *)v14[3], *(void *)(v14[3] + 8));
  operations_research::sat::CpModelBuilder::AddLessOrEqual(v15, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
  if (v61)
  {
    size_t v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  if (v65)
  {
    std::string::size_type v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  uint64_t v56 = 0;
  CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)v69, &v56);
  if (!**(unsigned char **)(v56 + 40))
  {
    CpGraph::GetInputTensors(*(CpGraph **)this, v69, (uint64_t)&v63);
    uint64_t v16 = v63;
    if (v64 - (unsigned char *)v63 == 16)
    {
      uint64_t v17 = *(void *)this;
      uint64_t v18 = (void *)(*(void *)this + 64);
      std::string::size_type v59 = &v69;
      uint64_t v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v59);
      uint64_t v20 = (void ***)(v17 + 104);
      if (v19) {
        uint64_t v20 = (void ***)(v19 + 3);
      }
      int v21 = *v20;
      uint64_t v22 = *(void *)this;
      uint64_t v23 = (void *)(*(void *)this + 64);
      std::string::size_type v59 = &v69;
      int v24 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v23, (unint64_t **)&v59);
      uint64_t v25 = (uint64_t **)(v22 + 104);
      if (v24) {
        uint64_t v25 = v24 + 3;
      }
      BOOL v26 = **v21 != *(void *)(*v25)[1];
      uint64_t v16 = v63;
      if (!v63) {
        goto LABEL_31;
      }
    }
    else
    {
      BOOL v26 = 0;
      if (!v63) {
        goto LABEL_31;
      }
    }
    uint64_t v64 = v16;
    operator delete(v16);
LABEL_31:
    if (v26)
    {
      memset(&__p, 0, sizeof(__p));
      uint64_t v27 = *(void *)(*(void *)(v10[3] + 104) + 8 * (a4 == 0));
      uint64_t v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], 1uLL);
      std::string::size_type v30 = &v29[v28];
      *uint64_t v29 = *(_OWORD *)(v27 + 224);
      long long v31 = v29 + 1;
      std::string::size_type size = (_DWORD *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v33 = __p.__r_.__value_.__r.__words[0];
      std::string::size_type v34 = (std::string::size_type)v29;
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v35 = *((void *)size - 2);
          size -= 4;
          int v36 = size[2];
          *(void *)(v34 - 16) = v35;
          v34 -= 16;
          *(_DWORD *)(v34 + 8) = v36;
        }
        while (size != (_DWORD *)v33);
        std::string::size_type size = (_DWORD *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = v34;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 1);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[v28];
      if (size)
      {
        operator delete(size);
        std::string::size_type v30 = (_OWORD *)__p.__r_.__value_.__r.__words[2];
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 1);
      std::string v37 = (_OWORD *)(**(void **)(v9[3] + 104) + 224);
      if (v31 >= v30)
      {
        uint64_t v39 = (uint64_t)((uint64_t)v31 - __p.__r_.__value_.__r.__words[0]) >> 4;
        if ((unint64_t)(v39 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = (uint64_t)v30 - __p.__r_.__value_.__r.__words[0];
        uint64_t v41 = v40 >> 3;
        if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
          uint64_t v41 = v39 + 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          std::locale v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v42);
        }
        else {
          std::locale v43 = 0;
        }
        std::string::size_type v44 = (std::string::size_type)v43 + 16 * v39;
        std::string::size_type v45 = (std::string::size_type)v43 + 16 * v42;
        *(_OWORD *)std::string::size_type v44 = *v37;
        std::string::size_type v38 = v44 + 16;
        uint64_t v46 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v48 = *((void *)v46 - 2);
            v46 -= 4;
            int v49 = v46[2];
            *(void *)(v44 - 16) = v48;
            v44 -= 16;
            *(_DWORD *)(v44 + 8) = v49;
          }
          while (v46 != (_DWORD *)v47);
          uint64_t v46 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = v44;
        __p.__r_.__value_.__l.__size_ = v38;
        __p.__r_.__value_.__r.__words[2] = v45;
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        _OWORD *v31 = *v37;
        std::string::size_type v38 = (std::string::size_type)(v29 + 2);
      }
      __p.__r_.__value_.__l.__size_ = v38;
      uint64_t v50 = (void *)__p.__r_.__value_.__r.__words[0];
      if (v38 - __p.__r_.__value_.__r.__words[0] >= 0x11)
      {
        int v51 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(void *)(v9[3] + 160), *(void *)(v9[3] + 168));
        operations_research::sat::LinearExpr::BooleanSum((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t)&v59);
        unint64_t v55 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v51, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
        std::operator+<char>();
        std::string::size_type v52 = std::string::append(&v54, ":l2_dep_dual_input_conx", 0x17uLL);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v55, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v61)
        {
          size_t v62 = v61;
          operator delete(v61);
        }
        if (v59)
        {
          long long v60 = v59;
          operator delete(v59);
        }
        if (v65)
        {
          std::string::size_type v66 = v65;
          operator delete(v65);
        }
        if (v63)
        {
          uint64_t v64 = v63;
          operator delete(v63);
        }
        uint64_t v50 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      if (v50)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        operator delete(v50);
      }
    }
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
}

void sub_23CB32E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a32);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a39);
  if (a25) {
    operator delete(a25);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(ORToolsCpAllocator *this, unint64_t *a2)
{
  uint64_t v100 = a2;
  uint64_t v81 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, (unint64_t *)&v100);
  size_t v97 = 0;
  std::string v98 = 0;
  v99 = 0;
  CpGraph::GetInputTensors(*(CpGraph **)this, v100, (uint64_t)&v95);
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long long *>>((uint64_t)&v93, v95, v96);
  uint64_t v3 = v93;
  if (v93 == v94) {
    goto LABEL_56;
  }
  do
  {
    uint64_t v4 = (void *)v3[4];
    v84[0] = v4;
    v87[0] = v84;
    unint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, (unint64_t *)v84, (uint64_t)&std::piecewise_construct, (void **)v87);
    uint64_t v6 = *(void *)this;
    for (uint64_t i = *(void **)(*(void *)this + 304); i; uint64_t i = (void *)*i)
    {
      unint64_t v8 = i[4];
      if (v8 <= (unint64_t)v4)
      {
        if (v8 >= (unint64_t)v4)
        {
          uint64_t v9 = (_OWORD *)(v5[3] + 32);
          unint64_t v10 = v98;
          if (v98 >= v99)
          {
            uint64_t v12 = (v98 - v97) >> 4;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v14 = v99 - v97;
            if ((v99 - v97) >> 3 > v13) {
              unint64_t v13 = v14 >> 3;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15) {
              uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v15);
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = &v16[16 * v12];
            *(_OWORD *)uint64_t v17 = *v9;
            uint64_t v19 = v97;
            uint64_t v18 = v98;
            uint64_t v20 = v17;
            if (v98 != v97)
            {
              do
              {
                uint64_t v21 = *((void *)v18 - 2);
                v18 -= 16;
                int v22 = *((_DWORD *)v18 + 2);
                *((void *)v20 - 2) = v21;
                v20 -= 16;
                *((_DWORD *)v20 + 2) = v22;
              }
              while (v18 != v19);
              uint64_t v18 = v97;
            }
            uint64_t v11 = v17 + 16;
            size_t v97 = v20;
            std::string v98 = v17 + 16;
            v99 = &v16[16 * v15];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *(_OWORD *)std::string v98 = *v9;
            uint64_t v11 = v10 + 16;
          }
          std::string v98 = v11;
          uint64_t v6 = *(void *)this;
          break;
        }
        ++i;
      }
    }
    uint64_t v23 = *(void **)(v6 + 328);
    if (!v23) {
      goto LABEL_50;
    }
    while (1)
    {
      unint64_t v24 = v23[4];
      if (v24 <= (unint64_t)v4) {
        break;
      }
LABEL_29:
      uint64_t v23 = (void *)*v23;
      if (!v23) {
        goto LABEL_50;
      }
    }
    if (v24 < (unint64_t)v4)
    {
      ++v23;
      goto LABEL_29;
    }
    v87[0] = (void *)-1;
    v84[0] = (void *)-1;
    if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, (uint64_t)v4, (unint64_t *)v87, (unint64_t *)v84)&& v100 == v84[0])
    {
      uint64_t v25 = (_OWORD *)(v81[3] + 176);
      BOOL v26 = v98;
      if (v98 >= v99)
      {
        uint64_t v28 = (v98 - v97) >> 4;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v99 - v97;
        if ((v99 - v97) >> 3 > v29) {
          unint64_t v29 = v30 >> 3;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31) {
          int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v31);
        }
        else {
          int v32 = 0;
        }
        std::string::size_type v33 = &v32[16 * v28];
        *(_OWORD *)std::string::size_type v33 = *v25;
        uint64_t v35 = v97;
        std::string::size_type v34 = v98;
        int v36 = v33;
        if (v98 != v97)
        {
          do
          {
            uint64_t v37 = *((void *)v34 - 2);
            v34 -= 16;
            int v38 = *((_DWORD *)v34 + 2);
            *((void *)v36 - 2) = v37;
            v36 -= 16;
            *((_DWORD *)v36 + 2) = v38;
          }
          while (v34 != v35);
          std::string::size_type v34 = v97;
        }
        uint64_t v27 = v33 + 16;
        size_t v97 = v36;
        std::string v98 = v33 + 16;
        v99 = &v32[16 * v31];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(_OWORD *)std::string v98 = *v25;
        uint64_t v27 = v26 + 16;
      }
      std::string v98 = v27;
    }
LABEL_50:
    uint64_t v39 = (void *)v3[1];
    if (v39)
    {
      do
      {
        uint64_t v40 = (void **)v39;
        uint64_t v39 = (void *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        uint64_t v40 = (void **)v3[2];
        BOOL v41 = *v40 == v3;
        uint64_t v3 = v40;
      }
      while (!v41);
    }
    uint64_t v3 = v40;
  }
  while (v40 != v94);
LABEL_56:
  v92 = 0;
  OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, v100);
  v92 = OutputTensor;
  uint64_t v43 = *(void *)this;
  for (j = *(void **)(*(void *)this + 304); j; j = (void *)*j)
  {
    unint64_t v45 = j[4];
    if (v45 <= (unint64_t)OutputTensor)
    {
      if (v45 >= (unint64_t)OutputTensor)
      {
        v87[0] = &v92;
        uint64_t v46 = (_OWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, (unint64_t *)&v92, (uint64_t)&std::piecewise_construct, (void **)v87)[3]+ 32);
        std::string::size_type v47 = v98;
        if (v98 >= v99)
        {
          uint64_t v49 = (v98 - v97) >> 4;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = v99 - v97;
          if ((v99 - v97) >> 3 > v50) {
            unint64_t v50 = v51 >> 3;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52) {
            long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v52);
          }
          else {
            long long v53 = 0;
          }
          std::string v54 = &v53[16 * v49];
          unint64_t v55 = &v53[16 * v52];
          *(_OWORD *)std::string v54 = *v46;
          uint64_t v48 = v54 + 16;
          std::string v57 = v97;
          uint64_t v56 = v98;
          if (v98 != v97)
          {
            do
            {
              uint64_t v58 = *((void *)v56 - 2);
              v56 -= 16;
              int v59 = *((_DWORD *)v56 + 2);
              *((void *)v54 - 2) = v58;
              v54 -= 16;
              *((_DWORD *)v54 + 2) = v59;
            }
            while (v56 != v57);
            uint64_t v56 = v97;
          }
          size_t v97 = v54;
          std::string v98 = v48;
          v99 = v55;
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *(_OWORD *)std::string v98 = *v46;
          uint64_t v48 = v47 + 16;
        }
        std::string v98 = v48;
        uint64_t v43 = *(void *)this;
        OutputTensor = v92;
        break;
      }
      ++j;
    }
  }
  long long v60 = *(void **)(v43 + 328);
  if (!v60) {
    goto LABEL_102;
  }
  while (2)
  {
    unint64_t v61 = v60[4];
    if (v61 > (unint64_t)OutputTensor)
    {
LABEL_83:
      long long v60 = (void *)*v60;
      if (!v60) {
        goto LABEL_102;
      }
      continue;
    }
    break;
  }
  if (v61 < (unint64_t)OutputTensor)
  {
    ++v60;
    goto LABEL_83;
  }
  size_t v62 = (_OWORD *)(v81[3] + 160);
  std::string::size_type v63 = v98;
  if (v98 >= v99)
  {
    uint64_t v65 = (v98 - v97) >> 4;
    unint64_t v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v67 = v99 - v97;
    if ((v99 - v97) >> 3 > v66) {
      unint64_t v66 = v67 >> 3;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68) {
      uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v68);
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v70 = &v69[16 * v65];
    uint64_t v71 = &v69[16 * v68];
    *(_OWORD *)uint64_t v70 = *v62;
    uint64_t v64 = v70 + 16;
    int v73 = v97;
    int v72 = v98;
    if (v98 != v97)
    {
      do
      {
        uint64_t v74 = *((void *)v72 - 2);
        v72 -= 16;
        int v75 = *((_DWORD *)v72 + 2);
        *((void *)v70 - 2) = v74;
        v70 -= 16;
        *((_DWORD *)v70 + 2) = v75;
      }
      while (v72 != v73);
      int v72 = v97;
    }
    size_t v97 = v70;
    std::string v98 = v64;
    v99 = v71;
    if (v72) {
      operator delete(v72);
    }
  }
  else
  {
    *(_OWORD *)std::string v98 = *v62;
    uint64_t v64 = v63 + 16;
  }
  std::string v98 = v64;
LABEL_102:
  if ((unint64_t)(v98 - v97) >= 0x11)
  {
    memset(&v91, 0, sizeof(v91));
    CpGraph::GetTensorName(*(void *)this, (unint64_t)v100, &v91);
    v76 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
    operations_research::sat::LinearExpr::BooleanSum((uint64_t)v97, (v98 - v97) >> 4, (uint64_t)v87);
    std::string::size_type v77 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)v84, (uint64_t)v77, v78);
    uint64_t v90 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v76, (const operations_research::sat::LinearExpr *)v87, (const operations_research::sat::LinearExpr *)v84);
    std::operator+<char>();
    std::string v79 = std::string::append(&v82, ":mutex_chain", 0xCuLL);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    operations_research::sat::Constraint::WithName((uint64_t *)&v90, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (v85)
    {
      uint64_t v86 = v85;
      operator delete(v85);
    }
    if (v84[0])
    {
      v84[1] = v84[0];
      operator delete(v84[0]);
    }
    if (v88)
    {
      uint64_t v89 = v88;
      operator delete(v88);
    }
    if (v87[0])
    {
      v87[1] = v87[0];
      operator delete(v87[0]);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v93, v94[0]);
  if (v95)
  {
    std::string::size_type v96 = v95;
    operator delete(v95);
  }
  if (v97)
  {
    std::string v98 = v97;
    operator delete(v97);
  }
}

void sub_23CB33648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v45 - 168, *(void **)(v45 - 160));
  std::string::size_type v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(void *)(v45 - 136) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(v45 - 120);
  if (v48)
  {
    *(void *)(v45 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::AddChainHWConstraint(operations_research::sat::CpModelBuilder **this, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v64 = a3;
  uint64_t v65 = a2;
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint((ORToolsCpAllocator *)this, a2);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint((ORToolsCpAllocator *)this, a3);
  std::string v54 = &v65;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 6), (unint64_t *)&v65, (uint64_t)&std::piecewise_construct, (void **)&v54);
  std::string v54 = &v64;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 6), (unint64_t *)&v64, (uint64_t)&std::piecewise_construct, (void **)&v54);
  uint64_t v63 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v64, &v63);
  if (!**(unsigned char **)(v63 + 40))
  {
    CpGraph::GetInputTensors(*this, v64, (uint64_t)&v54);
    int64_t v11 = v55 - (unsigned char *)v54;
    if (v54)
    {
      unint64_t v55 = v54;
      operator delete(v54);
    }
    BOOL v12 = a4 == 0;
    if (v11 == 16)
    {
      unint64_t v13 = *this;
      uint64_t v14 = (void *)((char *)*this + 64);
      std::string v54 = &v64;
      unint64_t v15 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v14, (unint64_t **)&v54);
      uint64_t v16 = (void ***)((char *)v13 + 104);
      if (v15) {
        uint64_t v16 = (void ***)(v15 + 3);
      }
      uint64_t v17 = *v16;
      uint64_t v18 = *this;
      uint64_t v19 = (void *)((char *)*this + 64);
      std::string v54 = &v64;
      uint64_t v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v19, (unint64_t **)&v54);
      uint64_t v21 = (uint64_t **)((char *)v18 + 104);
      if (v20) {
        uint64_t v21 = v20 + 3;
      }
      if (**v17 != *(void *)(*v21)[1])
      {
        long long v60 = 0;
        unint64_t v61 = 0;
        size_t v62 = 0;
        uint64_t v22 = *(void *)(*(void *)(v10[3] + 104) + 8 * v12);
        unint64_t v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v62, 1uLL);
        uint64_t v25 = (char *)&v24[v23];
        *unint64_t v24 = *(_OWORD *)(v22 + 224);
        BOOL v26 = (char *)(v24 + 1);
        uint64_t v28 = (uint64_t)v60;
        uint64_t v27 = v61;
        uint64_t v29 = (uint64_t)v24;
        if (v61 != v60)
        {
          do
          {
            uint64_t v30 = *((void *)v27 - 2);
            v27 -= 4;
            int v31 = v27[2];
            *(void *)(v29 - 16) = v30;
            v29 -= 16;
            *(_DWORD *)(v29 + 8) = v31;
          }
          while (v27 != (_DWORD *)v28);
          uint64_t v27 = v60;
        }
        long long v60 = (_DWORD *)v29;
        unint64_t v61 = v24 + 1;
        size_t v62 = (char *)&v24[v23];
        if (v27)
        {
          operator delete(v27);
          uint64_t v25 = v62;
        }
        unint64_t v61 = v24 + 1;
        int v32 = (_OWORD *)(**(void **)(v9[3] + 104) + 224);
        if (v26 >= v25)
        {
          uint64_t v34 = (v26 - (char *)v60) >> 4;
          if ((unint64_t)(v34 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v35 = v25 - (char *)v60;
          uint64_t v36 = v35 >> 3;
          if (v35 >> 3 <= (unint64_t)(v34 + 1)) {
            uint64_t v36 = v34 + 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37) {
            int v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v62, v37);
          }
          else {
            int v38 = 0;
          }
          uint64_t v39 = (uint64_t)&v38[16 * v34];
          uint64_t v40 = &v38[16 * v37];
          *(_OWORD *)uint64_t v39 = *v32;
          std::string::size_type v33 = (_OWORD *)(v39 + 16);
          uint64_t v42 = (uint64_t)v60;
          BOOL v41 = v61;
          if (v61 != v60)
          {
            do
            {
              uint64_t v43 = *((void *)v41 - 2);
              v41 -= 4;
              int v44 = v41[2];
              *(void *)(v39 - 16) = v43;
              v39 -= 16;
              *(_DWORD *)(v39 + 8) = v44;
            }
            while (v41 != (_DWORD *)v42);
            BOOL v41 = v60;
          }
          long long v60 = (_DWORD *)v39;
          unint64_t v61 = v33;
          size_t v62 = v40;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(_OWORD *)BOOL v26 = *v32;
          std::string::size_type v33 = v24 + 2;
        }
        unint64_t v61 = v33;
        uint64_t v45 = v60;
        if ((unint64_t)((char *)v33 - (char *)v60) >= 0x11)
        {
          memset(&v59, 0, sizeof(v59));
          CpGraph::GetTensorName((uint64_t)*this, a5, &v59);
          uint64_t v46 = this[26];
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v54, *(void *)(*(void *)(v9[3] + 136) + 256), *(void *)(*(void *)(v9[3] + 136) + 264));
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)v60, ((char *)v61 - (char *)v60) >> 4, (uint64_t)v51);
          uint64_t v58 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v46, (const operations_research::sat::LinearExpr *)&v54, (const operations_research::sat::LinearExpr *)v51);
          std::operator+<char>();
          std::string::size_type v47 = std::string::append(&v49, ":chain_dual_input_conx", 0x16uLL);
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v58, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (v52)
          {
            long long v53 = v52;
            operator delete(v52);
          }
          if (v51[0])
          {
            v51[1] = v51[0];
            operator delete(v51[0]);
          }
          if (v56)
          {
            std::string v57 = v56;
            operator delete(v56);
          }
          if (v54)
          {
            unint64_t v55 = v54;
            operator delete(v54);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          uint64_t v45 = v60;
        }
        if (v45)
        {
          unint64_t v61 = v45;
          operator delete(v45);
        }
      }
    }
  }
}

void sub_23CB33B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a23);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a30);
  if (*(char *)(v30 - 129) < 0) {
    operator delete(*(void **)(v30 - 152));
  }
  int v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(void *)(v30 - 120) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

BOOL ORToolsCpAllocator::FindL2DepPair(CpAllocGraph **this, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  *a3 = 0x7FFFFFFFLL;
  uint64_t v7 = *this;
  unint64_t v8 = (void *)((char *)*this + 64);
  uint64_t v31 = a2;
  uint64_t v32 = (uint64_t)&v31;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v8, (unint64_t **)&v32);
  unint64_t v10 = (uint64_t **)((char *)v7 + 104);
  if (v9) {
    unint64_t v10 = v9 + 3;
  }
  int64_t v11 = (unint64_t **)*v10;
  BOOL v12 = (unint64_t **)v10[1];
  if (*v10 != (uint64_t *)v12)
  {
    uint64_t v13 = -1;
    do
    {
      uint64_t v14 = *v11;
      uint64_t v32 = 0;
      BOOL LayerSchedule = CpAllocGraph::GetLayerSchedule(*this, *v14, &v32);
      uint64_t v16 = v32;
      if (LayerSchedule && v32 > v13)
      {
        *a3 = *v14;
        uint64_t v13 = v16;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  *a4 = 0x7FFFFFFFLL;
  uint64_t v18 = *this;
  uint64_t v19 = (void *)((char *)*this + 24);
  uint64_t v32 = (uint64_t)&v31;
  uint64_t v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v19, (unint64_t **)&v32);
  uint64_t v21 = (uint64_t **)((char *)v18 + 104);
  if (v20) {
    uint64_t v21 = v20 + 3;
  }
  uint64_t v22 = (unint64_t **)*v21;
  uint64_t v23 = (unint64_t **)v21[1];
  if (*v21 != (uint64_t *)v23)
  {
    uint64_t v24 = 0x7FFFFFFFLL;
    do
    {
      uint64_t v25 = *v22;
      uint64_t v32 = 0;
      BOOL v26 = CpAllocGraph::GetLayerSchedule(*this, *v25, &v32);
      uint64_t v27 = v32;
      if (v26 && v32 < v24)
      {
        *a4 = *v25;
        uint64_t v24 = v27;
      }
      ++v22;
    }
    while (v22 != v23);
  }
  return *a3 != 0x7FFFFFFF && *a4 != 0x7FFFFFFF;
}

void ORToolsCpAllocator::SetEarlyAllocationDecision(ORToolsCpAllocator *this)
{
  CpGraph::GetTensors(*(CpGraph ***)this, &v49);
  uint64_t v2 = v49;
  uint64_t v3 = v50;
  if (v49 == v50) {
    goto LABEL_60;
  }
  do
  {
    unint64_t v48 = *v2;
    memset(&v47, 0, sizeof(v47));
    CpGraph::GetTensorName(*(void *)this, v48, &v47);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 1, &v48);
    unint64_t v5 = v4;
    if (v4)
    {
      ORToolsCpAllocator::SetAllocationDecisionForTensor((uint64_t *)this, v48, *((_DWORD *)v4 + 6));
      if (CpAllocUtils::IsL2Dependent(*((_DWORD *)v5 + 6)) && *((_DWORD *)v5 + 6) != 7)
      {
        ORToolsCpAllocator::EnableL2Dependent(this, v48);
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 21, &v48);
      if (v6)
      {
        uint64_t v7 = (uint64_t *)v6[3];
        if ((unint64_t)ORToolsCpAllocator::GetResidentBufferSize(this, v48) >= *((void *)this + 99))
        {
          unint64_t v8 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v42, *v7, v7[1]);
          uint64_t v9 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v38, (uint64_t)v9, v10);
          uint64_t v46 = operations_research::sat::CpModelBuilder::AddEquality(v8, (const operations_research::sat::LinearExpr *)&v42, (const operations_research::sat::LinearExpr *)&v38);
          std::operator+<char>();
          int64_t v11 = std::string::append(&v36, ":early_allocation_decision", 0x1AuLL);
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v46, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (v40)
          {
            BOOL v41 = v40;
            operator delete(v40);
          }
          if (v38)
          {
            uint64_t v39 = v38;
            operator delete(v38);
          }
          if (v44)
          {
            uint64_t v45 = v44;
            operator delete(v44);
          }
          if (v42)
          {
            uint64_t v43 = v42;
            operator delete(v42);
          }
        }
        for (uint64_t i = *(void **)(*(void *)this + 304); i; uint64_t i = (void *)*i)
        {
          unint64_t v14 = i[4];
          if (v14 <= v48)
          {
            if (v14 >= v48) {
              goto LABEL_37;
            }
            ++i;
          }
        }
        unint64_t v15 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v42, v7[4], v7[5]);
        uint64_t v16 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v38, (uint64_t)v16, v17);
        uint64_t v46 = operations_research::sat::CpModelBuilder::AddEquality(v15, (const operations_research::sat::LinearExpr *)&v42, (const operations_research::sat::LinearExpr *)&v38);
        std::operator+<char>();
        uint64_t v18 = std::string::append(&v36, ":early_allocation_decision", 0x1AuLL);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v46, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v40)
        {
          BOOL v41 = v40;
          operator delete(v40);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        if (v44)
        {
          uint64_t v45 = v44;
          operator delete(v44);
        }
        if (v42)
        {
          uint64_t v43 = v42;
          operator delete(v42);
        }
      }
    }
LABEL_37:
    uint64_t v20 = *(void **)(*(void *)this + 328);
    if (!v20)
    {
LABEL_42:
      ORToolsCpAllocator::DisableL2Dependent(this, v48);
      goto LABEL_43;
    }
    while (1)
    {
      unint64_t v21 = v20[4];
      if (v21 <= v48) {
        break;
      }
LABEL_41:
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_42;
      }
    }
    if (v21 < v48)
    {
      ++v20;
      goto LABEL_41;
    }
    int v38 = (void *)-1;
    __p.__r_.__value_.__r.__words[0] = -1;
    if (!ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, v48, (unint64_t *)&v38, (unint64_t *)&__p))goto LABEL_43; {
    v36.__r_.__value_.__r.__words[0] = 0;
    }
    uint64_t v30 = __p.__r_.__value_.__r.__words[0];
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)__p.__r_.__value_.__l.__data_);
    uint64_t v31 = *(CpGraph ***)this;
    uint64_t v42 = (void *)v36.__r_.__value_.__r.__words[0];
    if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v31 + 43, (unint64_t *)&v42))
    {
      uint64_t v32 = *(CpGraph ***)this;
      std::string::size_type v33 = (void *)(*(void *)this + 24);
      uint64_t v42 = &v36;
      uint64_t v34 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v33, (unint64_t **)&v42);
      uint64_t v35 = v32 + 13;
      if (v34) {
        uint64_t v35 = v34 + 3;
      }
      if (v35[1] - *v35 >= 9uLL) {
        goto LABEL_42;
      }
    }
    ORToolsCpAllocator::PrepareL2Dependent(this, v48, (uint64_t)v38, v30);
LABEL_43:
    uint64_t v22 = *(CpGraph ***)this;
    uint64_t v23 = (void *)(*(void *)this + 64);
    uint64_t v42 = &v48;
    uint64_t v24 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v23, (unint64_t **)&v42);
    uint64_t v25 = v22 + 13;
    if (v24) {
      uint64_t v25 = v24 + 3;
    }
    if (v25[1] == *v25) {
      goto LABEL_49;
    }
    BOOL v26 = *(CpGraph ***)this;
    uint64_t v27 = (void *)(*(void *)this + 24);
    uint64_t v42 = &v48;
    uint64_t v28 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v27, (unint64_t **)&v42);
    uint64_t v29 = v26 + 13;
    if (v28) {
      uint64_t v29 = v28 + 3;
    }
    if (v29[1] == *v29) {
LABEL_49:
    }
      ORToolsCpAllocator::DisableL2Dependent(this, v48);
LABEL_50:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = v49;
LABEL_60:
  if (v2)
  {
    unint64_t v50 = v2;
    operator delete(v2);
  }
}

void sub_23CB34198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a29);
  if (*(char *)(v29 - 121) < 0) {
    operator delete(*(void **)(v29 - 144));
  }
  uint64_t v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(void *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::SetAllocationDecisionForTensor(uint64_t *a1, unint64_t a2, int a3)
{
  unint64_t v51 = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(a1 + 21, &v51);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)v5[3];
    memset(&v50, 0, sizeof(v50));
    CpGraph::GetTensorName(*a1, v51, &v50);
    switch(a3)
    {
      case 0:
        uint64_t v13 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v13, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        unint64_t v14 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        uint64_t v16 = *(void **)(*a1 + 304);
        if (!v16) {
          goto LABEL_45;
        }
        break;
      case 1:
        unint64_t v21 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v21, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        uint64_t v22 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        uint64_t v24 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v24, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        uint64_t v25 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        goto LABEL_82;
      case 2:
        uint64_t v30 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v30, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        uint64_t v31 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        std::string::size_type v33 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v33, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        uint64_t v34 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        std::string v36 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[4], v6[5]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v36, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        unint64_t v37 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        goto LABEL_108;
      case 3:
      case 6:
      case 7:
        uint64_t v7 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v7, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        unint64_t v8 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        uint64_t v10 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v10, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        int64_t v11 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
LABEL_82:
        uint64_t v27 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[4], v6[5]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v27, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        uint64_t v28 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
LABEL_108:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        goto LABEL_120;
      default:
        goto LABEL_120;
    }
    while (1)
    {
      unint64_t v17 = v16[4];
      if (v17 <= v51)
      {
        if (v17 >= v51)
        {
LABEL_120:
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          return;
        }
        ++v16;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16)
      {
LABEL_45:
        uint64_t v18 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        std::string v49 = operations_research::sat::CpModelBuilder::AddEquality(v18, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        long long v19 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (v43)
        {
          int v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        goto LABEL_82;
      }
    }
  }
}

void sub_23CB34C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a29);
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::EnableL2Dependent(ORToolsCpAllocator *this, uint64_t a2)
{
  unint64_t v45 = -1;
  v46[0] = a2;
  unint64_t v44 = -1;
  if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, a2, &v45, &v44))
  {
    uint64_t v3 = *(void *)this;
    uint64_t v4 = (void *)(*(void *)this + 64);
    std::string v36 = v46;
    unint64_t v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, (unint64_t **)&v36);
    uint64_t v6 = (uint64_t **)(v3 + 104);
    if (v5) {
      uint64_t v6 = v5 + 3;
    }
    uint64_t v7 = (unint64_t **)*v6;
    unint64_t v8 = (unint64_t **)v6[1];
    if (*v6 != (uint64_t *)v8)
    {
      unint64_t v9 = v45;
      do
      {
        uint64_t v10 = *v7;
        int64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v7);
        memset(&v43, 0, sizeof(v43));
        CpGraph::GetLayerName(*(void *)this, *v10, &v43);
        unint64_t v12 = *v10;
        if (v9 == *v10) {
          uint64_t v13 = ":enable_l2_dep_producer";
        }
        else {
          uint64_t v13 = ":disable_l2_dep_producer";
        }
        std::string::basic_string[abi:ne180100]<0>(v41, v13);
        unint64_t v14 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(void *)(v11[3] + 160), *(void *)(v11[3] + 168));
        long long v15 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), v9 == v12);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v15, v16);
        uint64_t v40 = operations_research::sat::CpModelBuilder::AddEquality(v14, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, (const void **)v41, (uint64_t)&__p);
        operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v34)
        {
          long long v35 = v34;
          operator delete(v34);
        }
        if (v32)
        {
          std::string::size_type v33 = v32;
          operator delete(v32);
        }
        if (v38)
        {
          std::string v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          unint64_t v37 = v36;
          operator delete(v36);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        ++v7;
      }
      while (v7 != v8);
    }
    uint64_t v17 = *(void *)this;
    uint64_t v18 = (void *)(*(void *)this + 24);
    std::string v36 = v46;
    long long v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v36);
    long long v20 = (uint64_t **)(v17 + 104);
    if (v19) {
      long long v20 = v19 + 3;
    }
    unint64_t v21 = (unint64_t **)*v20;
    uint64_t v22 = (unint64_t **)v20[1];
    if (*v20 != (uint64_t *)v22)
    {
      unint64_t v23 = v44;
      do
      {
        uint64_t v24 = *v21;
        uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v21);
        memset(&v43, 0, sizeof(v43));
        CpGraph::GetLayerName(*(void *)this, *v24, &v43);
        unint64_t v26 = *v24;
        if (v23 == *v24) {
          uint64_t v27 = ":enable_l2_dep_consumer";
        }
        else {
          uint64_t v27 = ":disable_l2_dep_consumer";
        }
        std::string::basic_string[abi:ne180100]<0>(v41, v27);
        uint64_t v28 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(void *)(v25[3] + 176), *(void *)(v25[3] + 184));
        uint64_t v29 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), v23 == v26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v29, v30);
        uint64_t v40 = operations_research::sat::CpModelBuilder::AddEquality(v28, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, (const void **)v41, (uint64_t)&__p);
        operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v34)
        {
          long long v35 = v34;
          operator delete(v34);
        }
        if (v32)
        {
          std::string::size_type v33 = v32;
          operator delete(v32);
        }
        if (v38)
        {
          std::string v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          unint64_t v37 = v36;
          operator delete(v36);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        ++v21;
      }
      while (v21 != v22);
    }
  }
}

void sub_23CB3513C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 113) < 0) {
    operator delete(*(void **)(v35 - 136));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::DisableL2Dependent(ORToolsCpAllocator *this, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = *(void *)this;
  uint64_t v4 = (void *)(*(void *)this + 64);
  std::string v36 = &v42;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, (unint64_t **)&v36);
  uint64_t v6 = (uint64_t **)(v3 + 104);
  if (v5) {
    uint64_t v6 = v5 + 3;
  }
  uint64_t v7 = (unint64_t **)*v6;
  unint64_t v8 = (unint64_t **)v6[1];
  if (*v6 != (uint64_t *)v8)
  {
    do
    {
      unint64_t v9 = *v7;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v7);
      memset(&v41, 0, sizeof(v41));
      CpGraph::GetLayerName(*(void *)this, *v9, &v41);
      int64_t v11 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(void *)(v10[3] + 160), *(void *)(v10[3] + 168));
      unint64_t v12 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v12, v13);
      uint64_t v40 = operations_research::sat::CpModelBuilder::AddEquality(v11, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v41.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v41;
        }
        else {
          uint64_t v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        memmove(p_p, v16, size);
      }
      strcpy((char *)p_p + size, ":disable_l2_dep_producer");
      operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        std::string::size_type v33 = v32;
        operator delete(v32);
      }
      if (v38)
      {
        std::string v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        unint64_t v37 = v36;
        operator delete(v36);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  uint64_t v17 = *(void *)this;
  uint64_t v18 = (void *)(*(void *)this + 24);
  std::string v36 = &v42;
  long long v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v36);
  long long v20 = (uint64_t **)(v17 + 104);
  if (v19) {
    long long v20 = v19 + 3;
  }
  unint64_t v21 = (unint64_t **)*v20;
  uint64_t v22 = (unint64_t **)v20[1];
  if (*v20 != (uint64_t *)v22)
  {
    do
    {
      unint64_t v23 = *v21;
      uint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v21);
      memset(&v41, 0, sizeof(v41));
      CpGraph::GetLayerName(*(void *)this, *v23, &v41);
      uint64_t v25 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(void *)(v24[3] + 176), *(void *)(v24[3] + 184));
      unint64_t v26 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v26, v27);
      uint64_t v40 = operations_research::sat::CpModelBuilder::AddEquality(v25, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = v41.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &__p;
      }
      else {
        uint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v28)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v30 = &v41;
        }
        else {
          uint64_t v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        memmove(v29, v30, v28);
      }
      strcpy((char *)v29 + v28, ":disable_l2_dep_consumer");
      operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        std::string::size_type v33 = v32;
        operator delete(v32);
      }
      if (v38)
      {
        std::string v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        unint64_t v37 = v36;
        operator delete(v36);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      ++v21;
    }
    while (v21 != v22);
  }
}

void sub_23CB3555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::PrepareL2Dependent(ORToolsCpAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a2;
  uint64_t v7 = *(void *)this;
  unint64_t v8 = (void *)(*(void *)this + 64);
  uint64_t v40 = &v46;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v8, (unint64_t **)&v40);
  uint64_t v10 = (uint64_t **)(v7 + 104);
  if (v9) {
    uint64_t v10 = v9 + 3;
  }
  int64_t v11 = (unint64_t **)*v10;
  unint64_t v12 = (unint64_t **)v10[1];
  if (*v10 != (uint64_t *)v12)
  {
    do
    {
      uint64_t v13 = *v11;
      if (**v11 != a3)
      {
        unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v11);
        memset(&v45, 0, sizeof(v45));
        CpGraph::GetLayerName(*(void *)this, *v13, &v45);
        long long v15 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v40, *(void *)(v14[3] + 160), *(void *)(v14[3] + 168));
        uint64_t v16 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, (uint64_t)v16, v17);
        unint64_t v44 = operations_research::sat::CpModelBuilder::AddEquality(v15, (const operations_research::sat::LinearExpr *)&v40, (const operations_research::sat::LinearExpr *)&v36);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v45.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 24);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v20 = &v45;
          }
          else {
            long long v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
          }
          memmove(p_p, v20, size);
        }
        strcpy((char *)p_p + size, ":disable_l2_dep_producer");
        operations_research::sat::Constraint::WithName((uint64_t *)&v44, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v38)
        {
          std::string v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          unint64_t v37 = v36;
          operator delete(v36);
        }
        if (v42)
        {
          std::string v43 = v42;
          operator delete(v42);
        }
        if (v40)
        {
          std::string v41 = v40;
          operator delete(v40);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  uint64_t v21 = *(void *)this;
  uint64_t v22 = (void *)(*(void *)this + 24);
  uint64_t v40 = &v46;
  unint64_t v23 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v22, (unint64_t **)&v40);
  uint64_t v24 = (uint64_t **)(v21 + 104);
  if (v23) {
    uint64_t v24 = v23 + 3;
  }
  uint64_t v25 = (unint64_t **)*v24;
  unint64_t v26 = (unint64_t **)v24[1];
  if (*v24 != (uint64_t *)v26)
  {
    do
    {
      uint64_t v27 = *v25;
      if (**v25 != a4)
      {
        std::string::size_type v28 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, *v25);
        memset(&v45, 0, sizeof(v45));
        CpGraph::GetLayerName(*(void *)this, *v27, &v45);
        uint64_t v29 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v40, *(void *)(v28[3] + 176), *(void *)(v28[3] + 184));
        uint64_t v30 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, (uint64_t)v30, v31);
        unint64_t v44 = operations_research::sat::CpModelBuilder::AddEquality(v29, (const operations_research::sat::LinearExpr *)&v40, (const operations_research::sat::LinearExpr *)&v36);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v32 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v32 = v45.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 24);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = &__p;
        }
        else {
          std::string::size_type v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v32)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v34 = &v45;
          }
          else {
            uint64_t v34 = (std::string *)v45.__r_.__value_.__r.__words[0];
          }
          memmove(v33, v34, v32);
        }
        strcpy((char *)v33 + v32, ":disable_l2_dep_consumer");
        operations_research::sat::Constraint::WithName((uint64_t *)&v44, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v38)
        {
          std::string v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          unint64_t v37 = v36;
          operator delete(v36);
        }
        if (v42)
        {
          std::string v43 = v42;
          operator delete(v42);
        }
        if (v40)
        {
          std::string v41 = v40;
          operator delete(v40);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
      ++v25;
    }
    while (v25 != v26);
  }
}

void sub_23CB35984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::SetObjectiveFunction(CpAllocGraph **this)
{
  uint64_t v1 = this;
  v99 = 0;
  uint64_t v100 = 0;
  v101[0] = 0;
  std::string::size_type v96 = 0;
  size_t v97 = 0;
  std::string v98 = 0;
  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&v91);
  uint64_t v2 = (std::string::size_type *)v91;
  uint64_t v3 = (std::string::size_type *)__p;
  uint64_t v86 = (ORToolsCpAllocator *)v1;
  if (v91 != __p)
  {
    uint64_t v4 = (uint64_t)(v1 + 6);
    do
    {
      __str.__r_.__value_.__r.__words[0] = 0;
      __str.__r_.__value_.__r.__words[0] = *v2;
      v88[0] = &__str;
      unint64_t v5 = (_OWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&__str, (uint64_t)&std::piecewise_construct, (void **)v88)[3]+ 16);
      uint64_t v6 = v100;
      if ((unint64_t)v100 >= v101[0])
      {
        uint64_t v8 = (v100 - v99) >> 4;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v101[0] - (void)v99;
        if ((uint64_t)(v101[0] - (void)v99) >> 3 > v9) {
          unint64_t v9 = v10 >> 3;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11) {
          unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v11);
        }
        else {
          unint64_t v12 = 0;
        }
        uint64_t v13 = &v12[16 * v8];
        *(_OWORD *)uint64_t v13 = *v5;
        long long v15 = v99;
        unint64_t v14 = v100;
        uint64_t v16 = v13;
        if (v100 != v99)
        {
          do
          {
            uint64_t v17 = *((void *)v14 - 2);
            v14 -= 16;
            int v18 = *((_DWORD *)v14 + 2);
            *((void *)v16 - 2) = v17;
            v16 -= 16;
            *((_DWORD *)v16 + 2) = v18;
          }
          while (v14 != v15);
          unint64_t v14 = v99;
        }
        uint64_t v7 = v13 + 16;
        v99 = v16;
        uint64_t v100 = v13 + 16;
        v101[0] = &v12[16 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v100 = *v5;
        uint64_t v7 = v6 + 16;
      }
      uint64_t v100 = v7;
      long long v19 = v97;
      if (v97 >= (uint64_t *)v98)
      {
        uint64_t v21 = v96;
        uint64_t v22 = v97 - v96;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v98 - (char *)v96;
        if ((v98 - (char *)v96) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v25);
          uint64_t v21 = v96;
          long long v19 = v97;
        }
        else
        {
          unint64_t v26 = 0;
        }
        uint64_t v27 = (uint64_t *)&v26[8 * v22];
        *uint64_t v27 = 1;
        long long v20 = v27 + 1;
        while (v19 != v21)
        {
          uint64_t v28 = *--v19;
          *--uint64_t v27 = v28;
        }
        std::string::size_type v96 = v27;
        size_t v97 = v20;
        std::string v98 = &v26[8 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *size_t v97 = 1;
        long long v20 = v19 + 1;
      }
      size_t v97 = v20;
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (std::string::size_type *)v91;
    uint64_t v1 = (CpAllocGraph **)v86;
  }
  if (v2)
  {
    std::string __p = v2;
    operator delete(v2);
  }
  for (uint64_t i = v1[13]; i; uint64_t i = *(CpAllocGraph **)i)
  {
    uint64_t v30 = (_OWORD *)(*((void *)i + 3) + 16);
    uint64_t v31 = v100;
    if ((unint64_t)v100 >= v101[0])
    {
      uint64_t v33 = (v100 - v99) >> 4;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v101[0] - (void)v99;
      if ((uint64_t)(v101[0] - (void)v99) >> 3 > v34) {
        unint64_t v34 = v35 >> 3;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36) {
        unint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v36);
      }
      else {
        unint64_t v37 = 0;
      }
      long long v38 = &v37[16 * v33];
      *(_OWORD *)long long v38 = *v30;
      uint64_t v40 = v99;
      std::string v39 = v100;
      std::string v41 = v38;
      if (v100 != v99)
      {
        do
        {
          uint64_t v42 = *((void *)v39 - 2);
          v39 -= 16;
          int v43 = *((_DWORD *)v39 + 2);
          *((void *)v41 - 2) = v42;
          v41 -= 16;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v39 != v40);
        std::string v39 = v99;
      }
      std::string::size_type v32 = v38 + 16;
      v99 = v41;
      uint64_t v100 = v38 + 16;
      v101[0] = &v37[16 * v36];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v100 = *v30;
      std::string::size_type v32 = v31 + 16;
    }
    uint64_t v100 = v32;
    unint64_t v44 = v97;
    if (v97 >= (uint64_t *)v98)
    {
      uint64_t v46 = v96;
      uint64_t v47 = v97 - v96;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v98 - (char *)v96;
      if ((v98 - (char *)v96) >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v50);
        uint64_t v46 = v96;
        unint64_t v44 = v97;
      }
      else
      {
        unint64_t v51 = 0;
      }
      unint64_t v52 = (uint64_t *)&v51[8 * v47];
      *unint64_t v52 = 1;
      std::string v45 = v52 + 1;
      while (v44 != v46)
      {
        uint64_t v53 = *--v44;
        *--unint64_t v52 = v53;
      }
      std::string::size_type v96 = v52;
      size_t v97 = v45;
      std::string v98 = &v51[8 * v50];
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *size_t v97 = 1;
      std::string v45 = v44 + 1;
    }
    size_t v97 = v45;
  }
  for (j = (void *)*((void *)v86 + 18); j; j = (void *)*j)
  {
    unint64_t v55 = (_OWORD *)(j[3] + 16);
    uint64_t v56 = v100;
    if ((unint64_t)v100 >= v101[0])
    {
      uint64_t v58 = (v100 - v99) >> 4;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v60 = v101[0] - (void)v99;
      if ((uint64_t)(v101[0] - (void)v99) >> 3 > v59) {
        unint64_t v59 = v60 >> 3;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v59;
      }
      if (v61) {
        size_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v61);
      }
      else {
        size_t v62 = 0;
      }
      uint64_t v63 = &v62[16 * v58];
      *(_OWORD *)uint64_t v63 = *v55;
      uint64_t v65 = v99;
      uint64_t v64 = v100;
      unint64_t v66 = v63;
      if (v100 != v99)
      {
        do
        {
          uint64_t v67 = *((void *)v64 - 2);
          v64 -= 16;
          int v68 = *((_DWORD *)v64 + 2);
          *((void *)v66 - 2) = v67;
          v66 -= 16;
          *((_DWORD *)v66 + 2) = v68;
        }
        while (v64 != v65);
        uint64_t v64 = v99;
      }
      std::string v57 = v63 + 16;
      v99 = v66;
      uint64_t v100 = v63 + 16;
      v101[0] = &v62[16 * v61];
      if (v64) {
        operator delete(v64);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v100 = *v55;
      std::string v57 = v56 + 16;
    }
    uint64_t v100 = v57;
    uint64_t v69 = v97;
    if (v97 >= (uint64_t *)v98)
    {
      uint64_t v71 = v96;
      uint64_t v72 = v97 - v96;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v74 = v98 - (char *)v96;
      if ((v98 - (char *)v96) >> 2 > v73) {
        unint64_t v73 = v74 >> 2;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75)
      {
        v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v75);
        uint64_t v71 = v96;
        uint64_t v69 = v97;
      }
      else
      {
        v76 = 0;
      }
      std::string::size_type v77 = (uint64_t *)&v76[8 * v72];
      *std::string::size_type v77 = 1;
      uint64_t v70 = v77 + 1;
      while (v69 != v71)
      {
        uint64_t v78 = *--v69;
        *--std::string::size_type v77 = v78;
      }
      std::string::size_type v96 = v77;
      size_t v97 = v70;
      std::string v98 = &v76[8 * v75];
      if (v71) {
        operator delete(v71);
      }
    }
    else
    {
      *size_t v97 = 1;
      uint64_t v70 = v69 + 1;
    }
    size_t v97 = v70;
  }
  uint64_t RegionMaxCycle = ORToolsCpAllocator::GetRegionMaxCycle((CpAllocGraph **)v86);
  long long v80 = (operations_research::sat::CpModelBuilder *)*((void *)v86 + 26);
  operations_research::Domain::Domain(&v91, 0, RegionMaxCycle);
  uint64_t v81 = operations_research::sat::CpModelBuilder::NewIntVar(v80, (const operations_research::Domain *)&v91);
  uint64_t v83 = v82;
  if (v91) {
    operator delete(__p);
  }
  uint64_t v84 = (operations_research::sat::CpModelBuilder *)*((void *)v86 + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v91, (uint64_t)v81, v83);
  operations_research::sat::LinearExpr::ScalProd((uint64_t)v99, (v100 - v99) >> 4, v96, v97 - v96, (uint64_t)v88);
  std::string::size_type v95 = operations_research::sat::CpModelBuilder::AddEquality(v84, (const operations_research::sat::LinearExpr *)&v91, (const operations_research::sat::LinearExpr *)v88);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_func");
  operations_research::sat::Constraint::WithName((uint64_t *)&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v89)
  {
    uint64_t v90 = v89;
    operator delete(v89);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v93)
  {
    int v94 = v93;
    operator delete(v93);
  }
  if (v91)
  {
    std::string __p = v91;
    operator delete(v91);
  }
  std::locale v85 = (operations_research::sat::CpModelBuilder *)*((void *)v86 + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v91, (uint64_t)v81, v83);
  operations_research::sat::CpModelBuilder::Minimize(v85, (const operations_research::sat::LinearExpr *)&v91);
  if (v93)
  {
    int v94 = v93;
    operator delete(v93);
  }
  if (v91)
  {
    std::string __p = v91;
    operator delete(v91);
  }
  if (v96)
  {
    size_t v97 = v96;
    operator delete(v96);
  }
  if (v99)
  {
    uint64_t v100 = v99;
    operator delete(v99);
  }
}

void sub_23CB36110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a23);
  unint64_t v26 = *(void **)(v24 - 136);
  if (v26)
  {
    *(void *)(v24 - 128) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)(v24 - 112);
  if (v27)
  {
    *(void *)(v24 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpAllocator::GetRegionMaxCycle(CpAllocGraph **this)
{
  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&__p);
  uint64_t v2 = (unint64_t **)__p;
  uint64_t v3 = v10;
  if (__p == v10)
  {
    uint64_t v4 = 0;
    if (!__p) {
      return v4;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = *v2;
    uint64_t v8 = 0;
    if (CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v5, &v8))
    {
      *(_WORD *)uint64_t v7 = 0;
      ORToolsCpAllocator::GetEarlyAllocationDecision(this, v5, &v7[1], v7);
      v4 += LayerCycleAndFootprintEstimator::GetMaxCycle(v8, v7[1], v7[0]);
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = (unint64_t **)__p;
  if (__p)
  {
LABEL_7:
    uint64_t v10 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_23CB362B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v9 = a1;
    }
    else {
      unint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

BOOL ORToolsCpAllocator::Execute(ORToolsCpAllocator *this)
{
  uint64_t v160 = *MEMORY[0x263EF8340];
  size_t v127 = (void *)((char *)this + 224);
  ORToolsCpBasedAllocatorUtil::PrintRegion((void *)this + 28, *(void *)this, (void *)this + 1);
  std::string::size_type v133 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), *((void *)this + 99));
  uint64_t v134 = v2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "l2_space_const");
  uint64_t v3 = operations_research::sat::BoolVar::WithName((int *)&v133, &__p);
  uint64_t v5 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v155[0] = operations_research::sat::CpModelBuilder::AddCumulative(*((void *)this + 26), v3, v5);
  v155[1] = v6;
  uint64_t v153 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v154 = 0x7FFFFFFFFFFFFFFFLL;
  ORToolsCpAllocator::FindMinMaxSchedule((CpAllocGraph **)this, &v154, &v153);
  operations_research::Domain::Domain(v152, v154, v153);
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  uint64_t v7 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
      ORToolsCpAllocator::CreateTensorAllocationVariable((CpGraph **)this, *v7++);
    while (v7 != (unint64_t **)size);
    uint64_t v7 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    operator delete(v7);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  unint64_t v9 = (void **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      std::locale v150 = 0;
      std::locale v150 = (unint64_t *)*v9;
      __str.__r_.__value_.__r.__words[0] = 0;
      if (CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)v150, &__str))
      {
        unint64_t MaxCycle = LayerCycleAndFootprintEstimator::GetMaxCycle((LayerCycleAndFootprintEstimator *)__str.__r_.__value_.__l.__data_, 0, 0);
        operations_research::Domain::Domain(&v133, 0, MaxCycle);
        ORToolsCpAllocator::CreateLayerScheduleVariable((CpGraph **)this, v150, (const operations_research::Domain *)&v133);
        int v156 = &v150;
        uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, (unint64_t *)&v150, (uint64_t)&std::piecewise_construct, &v156)[3];
        uint64_t v13 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)__str.__r_.__value_.__l.__data_, (char **)&v156);
        ORToolsLayerScheduleVariable::CreateLayerConstraint(v12, v13, v155, &v156, (const operations_research::Domain *)&v133);
        if (v156)
        {
          uint64_t v157 = v156;
          operator delete(v156);
        }
        if (v133) {
          operator delete(v134);
        }
      }
      ++v9;
    }
    while (v9 != (void **)v10);
    unint64_t v9 = (void **)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    operator delete(v9);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&v156);
  unint64_t v14 = v156;
  long long v15 = v157;
  if (v156 != v157)
  {
    while (1)
    {
      uint64_t v16 = *v14;
      std::string v144 = 0;
      OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, v16);
      std::string v144 = OutputTensor;
      uint64_t v18 = *(void *)this;
      long long v19 = *(void **)(*(void *)this + 304);
      if (!v19) {
        goto LABEL_24;
      }
      while (1)
      {
        unint64_t v20 = v19[4];
        if (v20 <= (unint64_t)OutputTensor) {
          break;
        }
LABEL_23:
        long long v19 = (void *)*v19;
        if (!v19) {
          goto LABEL_24;
        }
      }
      if (v20 < (unint64_t)OutputTensor) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
      uint64_t v21 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)(v18 + 24), (unint64_t **)&__p);
      uint64_t v22 = (void *)(v18 + 104);
      if (v21) {
        uint64_t v22 = v21 + 3;
      }
      if (v22[1] != *v22)
      {
        int v140 = v16;
        uint64_t v23 = *(void *)this;
        uint64_t v24 = (void *)(*(void *)this + 24);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
        unint64_t v25 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v24, (unint64_t **)&__p);
        unint64_t v26 = (unint64_t ****)(v23 + 104);
        if (v25) {
          unint64_t v26 = (unint64_t ****)(v25 + 3);
        }
        uint64_t v27 = **v26;
        CpGraph::GetInputTensors(*(CpGraph **)this, *v27, (uint64_t)&v150);
        if (v151 == v150)
        {
LABEL_36:
          unint64_t v28 = 0;
        }
        else
        {
          unint64_t v28 = 0;
          unint64_t v29 = v151 - v150;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          while ((void *)v150[v28] != v144)
          {
            if (v29 == ++v28) {
              goto LABEL_36;
            }
          }
        }
        if (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, (unint64_t *)&v140)&& std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, (unint64_t *)v27))
        {
          v138.__r_.__value_.__r.__words[0] = 0;
          v137.__r_.__value_.__r.__words[0] = 0;
          CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)v140, &v138);
          std::string::size_type LayerBehavior = CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)*v27, &v137);
          if (!*(void *)(*(void *)(v138.__r_.__value_.__r.__words[0] + 32) + 104))
          {
            std::string::size_type LayerBehavior = (std::string::size_type)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 21, (unint64_t *)&v144);
            if (LayerBehavior)
            {
              std::string::size_type v32 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
              operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(void *)(*(void *)(LayerBehavior + 24) + 32), *(void *)(*(void *)(LayerBehavior + 24) + 40));
              operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v133, 0);
              uint64_t v149 = (unint64_t *)operations_research::sat::CpModelBuilder::AddEquality(v32, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v133);
              std::string::basic_string[abi:ne180100]<0>(&__str, "T: disable-chain");
              operations_research::sat::Constraint::WithName((uint64_t *)&v149, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (v135)
              {
                uint64_t v136 = v135;
                operator delete(v135);
              }
              if (v133)
              {
                uint64_t v134 = v133;
                operator delete(v133);
              }
              if (v130)
              {
                uint64_t v131 = v130;
                operator delete(v130);
              }
              std::string::size_type LayerBehavior = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          ChainExecutionVariableunint64_t MaxCycle = ORToolsCpAllocator::GetChainExecutionVariableMaxCycle((ORToolsCpAllocator *)LayerBehavior, (const LayerCycleAndFootprintEstimator *)v138.__r_.__value_.__l.__data_, (const LayerCycleAndFootprintEstimator *)v137.__r_.__value_.__l.__data_);
          operations_research::Domain::Domain(&__p, 0, ChainExecutionVariableMaxCycle);
          ORToolsCpAllocator::CreateChainScheduleVariable((CpGraph **)this, (unint64_t *)v140, *v27, v28, (const operations_research::Domain *)&__p);
        }
        if (v150)
        {
          uint64_t v151 = v150;
          operator delete(v150);
        }
      }
LABEL_24:
      if (++v14 == v15)
      {
        unint64_t v14 = v156;
        goto LABEL_54;
      }
    }
    ++v19;
    goto LABEL_23;
  }
LABEL_54:
  if (v14)
  {
    uint64_t v157 = v14;
    operator delete(v14);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
  uint64_t v33 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
LABEL_57:
    uint64_t v35 = CpGraph::GetOutputTensor(*(CpGraph **)this, *v33);
    unint64_t v36 = *(void **)(*(void *)this + 328);
    if (!v36) {
      goto LABEL_80;
    }
    unint64_t v37 = v35;
    while (1)
    {
      unint64_t v38 = v36[4];
      if (v38 <= (unint64_t)v35)
      {
        if (v38 >= (unint64_t)v35)
        {
          __str.__r_.__value_.__r.__words[0] = -1;
          std::string v144 = (void *)-1;
          if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, (uint64_t)v35, (unint64_t *)&__str, (unint64_t *)&v144))
          {
            CpGraph::GetInputTensors(*(CpGraph **)this, (unint64_t *)v144, (uint64_t)&v133);
            if (v134 == v133)
            {
LABEL_70:
              unint64_t v39 = 0;
            }
            else
            {
              unint64_t v39 = 0;
              unint64_t v40 = ((unsigned char *)v134 - (unsigned char *)v133) >> 3;
              if (v40 <= 1) {
                unint64_t v40 = 1;
              }
              while (*((void **)v133 + v39) != v37)
              {
                if (v40 == ++v39) {
                  goto LABEL_70;
                }
              }
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, (unint64_t *)&__str)&& std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((void *)this + 6, (unint64_t *)&v144))
            {
              int v140 = 0;
              int v140 = CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)v144);
              uint64_t v41 = *(void *)this;
              int v156 = (unint64_t **)v140;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(v41 + 344), (unint64_t *)&v156))goto LABEL_77; {
              uint64_t v42 = *(void *)this;
              }
              int v43 = (void *)(*(void *)this + 24);
              int v156 = (unint64_t **)&v140;
              unint64_t v44 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v43, (unint64_t **)&v156);
              std::string v45 = (void *)(v42 + 104);
              if (v44) {
                std::string v45 = v44 + 3;
              }
              if (v45[1] - *v45 <= 8uLL)
              {
LABEL_77:
                v138.__r_.__value_.__r.__words[0] = 0;
                v137.__r_.__value_.__r.__words[0] = 0;
                CpAllocGraph::GetLayerBehavior(*(void *)this, __str.__r_.__value_.__r.__words[0], &v138);
                BOOL v46 = CpAllocGraph::GetLayerBehavior(*(void *)this, (unint64_t)v144, &v137);
                unint64_t v47 = ORToolsCpAllocator::GetChainExecutionVariableMaxCycle((ORToolsCpAllocator *)v46, (const LayerCycleAndFootprintEstimator *)v138.__r_.__value_.__l.__data_, (const LayerCycleAndFootprintEstimator *)v137.__r_.__value_.__l.__data_);
                operations_research::Domain::Domain(&v156, 0, v47);
                ORToolsCpAllocator::CreateL2DepScheduleVariable((CpGraph **)this, (unint64_t *)__str.__r_.__value_.__l.__data_, (unint64_t *)v144, v39, (const operations_research::Domain *)&v156);
              }
            }
            if (v133)
            {
              uint64_t v134 = v133;
              operator delete(v133);
            }
          }
LABEL_80:
          if (++v33 == (unint64_t **)v34)
          {
            uint64_t v33 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
            break;
          }
          goto LABEL_57;
        }
        ++v36;
      }
      unint64_t v36 = (void *)*v36;
      if (!v36) {
        goto LABEL_80;
      }
    }
  }
  if (v33)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    operator delete(v33);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&v150);
  unint64_t v48 = (unint64_t **)v150;
  uint64_t v49 = (unint64_t **)v151;
  if (v150 != v151)
  {
    unint64_t v50 = (char *)this + 48;
    while (1)
    {
      uint64_t v149 = 0;
      uint64_t v149 = *v48;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
      unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v50, (unint64_t *)&v149, (uint64_t)&std::piecewise_construct, &__p);
      memset(&__str, 0, sizeof(__str));
      CpGraph::GetLayerName(*(void *)this, (unint64_t)v149, &__str);
      uint64_t v147 = -1;
      CpAllocGraph::GetLayerSchedule(*(CpAllocGraph **)this, (unint64_t)v149, &v147);
      v145 = 0;
      std::string v144 = 0;
      uint64_t v146 = 0;
      uint64_t v52 = v51[3];
      uint64_t v53 = *(char **)(v52 + 192);
      std::string v54 = *(char **)(v52 + 200);
      if (v54 == v53) {
        goto LABEL_156;
      }
      std::vector<operations_research::sat::BoolVar>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::BoolVar const*>,std::__wrap_iter<operations_research::sat::BoolVar const*>>((uint64_t)&v144, 0, v53, v54, (v54 - v53) >> 4);
      if (v145 != v144)
      {
        std::string::size_type v128 = v48;
        BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(*((operations_research::sat::CpModelBuilder **)this + 26), (uint64_t *)&v144);
        uint64_t v56 = v50;
        std::string v57 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        operations_research::sat::BoolVar::BoolVar((uint64_t)&v133, ~v58, (uint64_t)BooleanOr);
        unint64_t v59 = v49;
        uint64_t v60 = v133;
        unint64_t v61 = v134;
        uint64_t v62 = *(void *)(v51[3] + 136);
        int v156 = *(unint64_t ***)(v62 + 224);
        LODWORD(v157) = *(_DWORD *)(v62 + 232);
        uint64_t v63 = operator new(0x20uLL);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v63 + 4);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v63 + 4);
        *uint64_t v63 = v60;
        v63[1] = v61;
        v63[2] = v156;
        *((_DWORD *)v63 + 6) = v157;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
        BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v57, (uint64_t *)&__p);
        int v66 = v65;
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v67 = CpGraph::GetOutputTensor(*(CpGraph **)this, v149);
        int v68 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        ResidentBufferSize = ORToolsCpAllocator::GetResidentBufferSize(this, (uint64_t)v67);
        int v70 = operations_research::sat::CpModelBuilder::NewConstant(v68, (uint64_t)ResidentBufferSize);
        uint64_t v72 = v71;
        unint64_t v73 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
        uint64_t v74 = v147;
        std::operator+<char>();
        unint64_t v75 = std::string::append(&__p, ":in_place_l2_pressure_increase_interval", 0x27uLL);
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        int v77 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v73, v74, v74, (uint64_t)BooleanAnd, v66, &v143);
        int v79 = v78;
        uint64_t v49 = v59;
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        unint64_t v50 = v56;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        operations_research::sat::CumulativeConstraint::AddDemand(v155, v77, v79, v70, v72);
        unint64_t v48 = v128;
      }
      uint64_t v80 = *(void *)(v51[3] + 192);
      uint64_t v81 = *(void *)(v51[3] + 200);
      if (v81 - v80 != 32 || v81 == v80) {
        goto LABEL_156;
      }
      unint64_t v83 = 0;
      do
      {
        CpGraph::GetInputTensors(*(CpGraph **)this, v149, (uint64_t)&__p);
        uint64_t v84 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v83);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
        unint64_t v142 = 0;
        CpGraph::GetInputTensors(*(CpGraph **)this, v149, (uint64_t)&__p);
        unint64_t v85 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * (v83 == 0));
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
        unint64_t v142 = v85;
        uint64_t v86 = *(void *)this;
        std::string v87 = *(void **)(*(void *)this + 304);
        if (!v87) {
          goto LABEL_128;
        }
        while (1)
        {
          unint64_t v88 = v87[4];
          if (v88 <= v85) {
            break;
          }
LABEL_104:
          std::string v87 = (void *)*v87;
          if (!v87) {
            goto LABEL_128;
          }
        }
        if (v88 < v85)
        {
          ++v87;
          goto LABEL_104;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
        uint64_t v89 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)(v86 + 64), (unint64_t **)&__p);
        uint64_t v90 = (unint64_t ****)(v86 + 104);
        if (v89) {
          uint64_t v90 = (unint64_t ****)(v89 + 3);
        }
        CpGraph::GetInputTensors(*(CpGraph **)this, ***v90, (uint64_t)&v140);
        std::string v91 = v140;
        v92 = v141;
        if (v140 != v141)
        {
          do
          {
            if (*v91 == v84) {
              goto LABEL_112;
            }
            ++v91;
          }
          while (v91 != v141);
          std::string v91 = v141;
        }
LABEL_112:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
        uint64_t v93 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, &v142, (uint64_t)&std::piecewise_construct, &__p);
        if (v91 != v92)
        {
          uint64_t v94 = v93[3];
          std::string::size_type v95 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
          std::string::size_type v96 = (char *)v144 + 16 * v83;
          int v97 = *((_DWORD *)v96 + 2);
          int v156 = *(unint64_t ***)v96;
          LODWORD(v157) = v97;
          uint64_t v158 = *(void *)(v94 + 32);
          int v159 = *(_DWORD *)(v94 + 40);
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v156, 2, (uint64_t)&__p);
          std::string v98 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v133, (uint64_t)v98, v99);
          v139 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v95, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v133);
          std::operator+<char>();
          uint64_t v100 = std::string::append(&v137, ":inplace_chain_mutex_constraint", 0x1FuLL);
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v139, &v138);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (v135)
          {
            uint64_t v136 = v135;
            operator delete(v135);
          }
          if (v133)
          {
            uint64_t v134 = v133;
            operator delete(v133);
          }
          if (v130)
          {
            uint64_t v131 = v130;
            operator delete(v130);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v140)
        {
          uint64_t v141 = v140;
          operator delete(v140);
        }
        uint64_t v86 = *(void *)this;
        unint64_t v85 = v142;
LABEL_128:
        std::string::size_type v102 = *(void **)(v86 + 328);
        if (!v102) {
          goto LABEL_155;
        }
        while (2)
        {
          unint64_t v103 = v102[4];
          if (v103 > v85)
          {
LABEL_132:
            std::string::size_type v102 = (void *)*v102;
            if (!v102) {
              goto LABEL_155;
            }
            continue;
          }
          break;
        }
        if (v103 < v85)
        {
          ++v102;
          goto LABEL_132;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
        uint64_t v104 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)(v86 + 64), (unint64_t **)&__p);
        uint64_t v105 = (unint64_t ****)(v86 + 104);
        if (v104) {
          uint64_t v105 = (unint64_t ****)(v104 + 3);
        }
        uint64_t v106 = **v105;
        CpGraph::GetInputTensors(*(CpGraph **)this, *v106, (uint64_t)&v140);
        uint64_t v107 = v140;
        uint64_t v108 = v141;
        if (v140 != v141)
        {
          while (*v107 != v84)
          {
            if (++v107 == v141)
            {
              uint64_t v107 = v141;
              break;
            }
          }
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
        std::string::size_type v109 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v50, (unint64_t *)v106, (uint64_t)&std::piecewise_construct, &__p);
        if (v107 != v108)
        {
          uint64_t v110 = v109[3];
          uint64_t v111 = (operations_research::sat::CpModelBuilder *)*((void *)this + 26);
          v112 = (char *)v144 + 16 * v83;
          int v113 = *((_DWORD *)v112 + 2);
          int v156 = *(unint64_t ***)v112;
          LODWORD(v157) = v113;
          uint64_t v158 = *(void *)(v110 + 160);
          int v159 = *(_DWORD *)(v110 + 168);
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v156, 2, (uint64_t)&__p);
          unint64_t v114 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v133, (uint64_t)v114, v115);
          v139 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v111, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v133);
          std::operator+<char>();
          uint64_t v116 = std::string::append(&v137, ":inplace_l2_dep_mutex_constraint", 0x20uLL);
          long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v139, &v138);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (v135)
          {
            uint64_t v136 = v135;
            operator delete(v135);
          }
          if (v133)
          {
            uint64_t v134 = v133;
            operator delete(v133);
          }
          if (v130)
          {
            uint64_t v131 = v130;
            operator delete(v130);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v140)
        {
          uint64_t v141 = v140;
          operator delete(v140);
        }
LABEL_155:
        ++v83;
      }
      while (v83 < (uint64_t)(*(void *)(v51[3] + 200) - *(void *)(v51[3] + 192)) >> 4);
LABEL_156:
      if (v144)
      {
        v145 = v144;
        operator delete(v144);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (++v48 == v49)
      {
        unint64_t v48 = (unint64_t **)v150;
        break;
      }
    }
  }
  if (v48)
  {
    uint64_t v151 = (unint64_t *)v48;
    operator delete(v48);
  }
  CpGraph::GetTensors(*(CpGraph ***)this, (unint64_t **)&__p);
  std::string::size_type v119 = __p.__r_.__value_.__l.__size_;
  size_t v118 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
      ORToolsCpAllocator::AddResidentAllocationConstraint((uint64_t *)this, *v118++, v155);
    while (v118 != (unint64_t *)v119);
    size_t v118 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
  }
  if (v118)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
    operator delete(v118);
  }
  ORToolsCpAllocator::SetEarlyAllocationDecision(this);
  ORToolsCpAllocator::SetObjectiveFunction((CpAllocGraph **)this);
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&v133, *((const operations_research::sat::CpModelProto **)this + 26));
  uint64_t v120 = *((void *)this + 26);
  v121 = *(CpAllocGraph **)this;
  ORToolsCpAllocator::GetRegionMaxCycle((CpAllocGraph **)this);
  ORToolsCpBasedAllocatorUtil::PrintConstraintProblem(v127, v120, (operations_research::sat *)&v133, v121);
  uint64_t v122 = *((void *)this + 27);
  *(_DWORD *)(v122 + 20) |= 0x20000000u;
  *(void *)(v122 + 280) = 0x4066800000000000;
  operations_research::sat::SolveWithParameters((operations_research::sat *)&v133, (const operations_research::sat::CpModelProto *)v122, (operations_research::sat::CpSolverResponse *)&__p);
  if ((ORToolsCpAllocator::UpdateAllocationDecisionMap(this, (const operations_research::sat::CpSolverResponse *)&__p) & 1) == 0) {
    goto LABEL_176;
  }
  int v123 = v132;
  if (v132 == 2)
  {
    std::string::size_type v124 = (char *)this + 800;
    *((unsigned char *)this + 800) = 1;
    goto LABEL_174;
  }
  *((unsigned char *)this + 800) = v132 == 4;
  if (v123 != 4)
  {
LABEL_176:
    BOOL v125 = 0;
    goto LABEL_178;
  }
  std::string::size_type v124 = (char *)this + 800;
LABEL_174:
  if (ORToolsCpAllocator::VerifyParallelDecision(this, (const operations_research::sat::CpSolverResponse *)&__p))
  {
    BOOL v125 = *v124 != 0;
  }
  else
  {
    BOOL v125 = 0;
    unsigned char *v124 = 0;
  }
LABEL_178:
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p);
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&v133);
  if (v152[0]) {
    operator delete((void *)v152[1]);
  }
  return v125;
}

void sub_23CB37390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  if (*(char *)(v44 - 217) < 0) {
    operator delete(*(void **)(v44 - 240));
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a13);
  BOOL v46 = *(void **)(v44 - 208);
  if (v46)
  {
    *(void *)(v44 - 200) = v46;
    operator delete(v46);
  }
  unint64_t v47 = *(void **)(v44 - 128);
  if (v47)
  {
    *(void *)(v44 - 120) = v47;
    operator delete(v47);
  }
  if (*(unsigned char *)(v44 - 184)) {
    operator delete(*(void **)(v44 - 176));
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::FindMinMaxSchedule(CpAllocGraph **this, uint64_t *a2, uint64_t *a3)
{
  *a2 = 0x7FFFFFFFFFFFFFFFLL;
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&v12);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  if (v12 != v13)
  {
    do
    {
      unint64_t v8 = *v6;
      uint64_t v11 = -1;
      CpAllocGraph::GetLayerSchedule(*this, v8, &v11);
      uint64_t v9 = v11;
      uint64_t v10 = *a2;
      if (v11 < *a2) {
        uint64_t v10 = v11;
      }
      *a2 = v10;
      *a3 = v9;
      ++v6;
    }
    while (v6 != v7);
    uint64_t v6 = v12;
  }
  if (v6)
  {
    uint64_t v13 = v6;
    operator delete(v6);
  }
}

void sub_23CB3777C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ORToolsCpAllocator::GetChainExecutionVariableMaxCycle(ORToolsCpAllocator *this, const LayerCycleAndFootprintEstimator *a2, const LayerCycleAndFootprintEstimator *a3)
{
  unint64_t MaxCycleWithoutStall = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(a2, 0, 0);
  unint64_t v6 = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(a3, 0, 0);
  if (MaxCycleWithoutStall <= v6) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = MaxCycleWithoutStall;
  }
  return v7 + LayerCycleAndFootprintEstimator::GetOverheadCycles((uint64_t **)a2);
}

uint64_t ORToolsCpAllocator::UpdateAllocationDecisionMap(ORToolsCpAllocator *this, const operations_research::sat::CpSolverResponse *a2)
{
  int v3 = *((_DWORD *)a2 + 38);
  if (v3 != 4 && v3 != 2)
  {
LABEL_72:
    ORToolsCpBasedAllocatorUtil::PrintSolverResult((void *)this + 28, *(CpAllocGraph **)this, (void *)this + 21, (void *)this + 6, (void *)this + 11, (void *)this + 16, a2);
    return 1;
  }
  CpGraph::GetTensors(*(CpGraph ***)this, (unint64_t **)&__p);
  uint64_t v5 = __p;
  uint64_t v56 = v64;
  if (__p == v64)
  {
LABEL_70:
    if (v5)
    {
      uint64_t v64 = v5;
      operator delete(v5);
    }
    goto LABEL_72;
  }
  j = (void *)((char *)this + 8);
  unint64_t v7 = (char *)this + 168;
  uint64_t v52 = (char *)this + 8;
  while (1)
  {
    unint64_t v62 = *v5;
    unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(j, &v62);
    if (v8 && (CpAllocUtils::IsL2Dependent(*((_DWORD *)v8 + 6)) & 1) != 0) {
      goto LABEL_60;
    }
    unint64_t v59 = &v62;
    uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    int v10 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)v9[3], *(void *)(v9[3] + 8));
    unint64_t v59 = &v62;
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    BOOL v12 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)(v11[3] + 16), *(void *)(v11[3] + 24));
    unint64_t v59 = &v62;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    int v14 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)(v13[3] + 32), *(void *)(v13[3] + 40));
    if ((v10 ^ v12) == v14) {
      break;
    }
    int v54 = v14;
    uint64_t v15 = *(void *)this;
    uint64_t v16 = (void *)(*(void *)this + 64);
    unint64_t v59 = &v62;
    uint64_t v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v16, &v59);
    uint64_t v18 = (void *)(v15 + 104);
    if (v17) {
      uint64_t v18 = v17 + 3;
    }
    if (v18[1] == *v18)
    {
      BOOL v53 = 0;
    }
    else
    {
      unint64_t v65 = -1;
      unint64_t v61 = -1;
      ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, v62, &v65, &v61);
      unint64_t v59 = &v65;
      long long v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, &v65, (uint64_t)&std::piecewise_construct, &v59);
      BOOL v53 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)(v19[3] + 160), *(void *)(v19[3] + 168));
      LOBYTE(v10) = v10 & ~v53;
    }
    uint64_t v20 = *(void *)this;
    uint64_t v21 = (void *)(*(void *)this + 24);
    unint64_t v59 = &v62;
    uint64_t v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v21, &v59);
    BOOL v55 = v12;
    std::string v57 = v5;
    uint64_t v23 = (uint64_t **)(v20 + 104);
    if (v22) {
      uint64_t v23 = v22 + 3;
    }
    unint64_t v25 = (unint64_t **)*v23;
    uint64_t v24 = (unint64_t **)v23[1];
    if (*v23 == (uint64_t *)v24)
    {
      BOOL v26 = 0;
      if ((v10 & 1) == 0) {
        goto LABEL_50;
      }
    }
    else
    {
      BOOL v26 = 0;
      do
      {
        uint64_t v27 = *v25;
        v60[0] = 0;
        v60[1] = 0;
        unint64_t v59 = (unint64_t *)v60;
        if (CpAllocGraph::GetInPlacePorts(*(void *)this, *v27, (uint64_t **)&v59))
        {
          for (unint64_t i = 0; ; ++i)
          {
            uint64_t v29 = *(void *)this;
            uint64_t v30 = (void *)(*(void *)this + 64);
            unint64_t v65 = (unint64_t)v27;
            uint64_t v31 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v30, (unint64_t **)&v65);
            std::string::size_type v32 = (void *)(v29 + 104);
            if (v31) {
              std::string::size_type v32 = v31 + 3;
            }
            if (i >= (uint64_t)(v32[1] - *v32) >> 3) {
              break;
            }
            uint64_t v33 = *(void *)this;
            std::string::size_type v34 = (void *)(*(void *)this + 64);
            unint64_t v65 = (unint64_t)v27;
            uint64_t v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v34, (unint64_t **)&v65);
            unint64_t v36 = (void *)(v33 + 104);
            if (v35) {
              unint64_t v36 = v35 + 3;
            }
            unint64_t v37 = v60[0];
            if (**(void **)(*v36 + 8 * i) == v62 && v60[0] != 0)
            {
              unint64_t v39 = v60;
              do
              {
                unint64_t v40 = v37;
                uint64_t v41 = v39;
                unint64_t v42 = v37[4];
                int v43 = v37 + 1;
                if (v42 >= i)
                {
                  int v43 = v40;
                  unint64_t v39 = (void **)v40;
                }
                unint64_t v37 = (void *)*v43;
              }
              while (v37);
              if (v39 != v60)
              {
                if (v42 < i) {
                  unint64_t v40 = v41;
                }
                if (v40[4] <= i)
                {
                  unint64_t v65 = (unint64_t)v27;
                  uint64_t v44 = (uint64_t *)(*(void *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, v27, (uint64_t)&std::piecewise_construct, (void **)&v65)[3]+ 192)+ 16 * i);
                  BOOL v26 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *v44, v44[1]);
                  LOBYTE(v10) = !v26 & v10;
                }
              }
            }
          }
        }
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v59, v60[0]);
        ++v25;
      }
      while (v25 != v24);
      if ((v10 & 1) == 0)
      {
LABEL_50:
        uint64_t v5 = v57;
        unint64_t v7 = (char *)this + 168;
        j = (void *)((char *)this + 8);
        if (v55)
        {
          unint64_t v59 = &v62;
          unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          int v48 = 1;
          goto LABEL_59;
        }
        if (v54)
        {
          unint64_t v59 = &v62;
          unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          int v48 = 2;
          goto LABEL_59;
        }
        if (v53 || v26)
        {
          if (!v26 && v53)
          {
            uint64_t v49 = *(void **)(*(void *)this + 392);
            if (!v49)
            {
LABEL_67:
              unint64_t v59 = &v62;
              unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
              int v48 = 3;
              goto LABEL_59;
            }
            while (1)
            {
              unint64_t v50 = v49[4];
              if (v50 <= v62)
              {
                if (v50 >= v62)
                {
                  unint64_t v59 = &v62;
                  unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
                  int v48 = 7;
                  goto LABEL_59;
                }
                ++v49;
              }
              uint64_t v49 = (void *)*v49;
              if (!v49) {
                goto LABEL_67;
              }
            }
          }
          unint64_t v59 = &v62;
          unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          if (v53 || !v26) {
            int v48 = 5;
          }
          else {
            int v48 = 4;
          }
LABEL_59:
          *((_DWORD *)v47 + 6) = v48;
        }
        goto LABEL_60;
      }
    }
    std::string v45 = *(void **)(*(void *)this + 392);
    uint64_t v5 = v57;
    unint64_t v7 = (char *)this + 168;
    for (j = (void *)((char *)this + 8); v45; std::string v45 = (void *)*v45)
    {
      unint64_t v46 = v45[4];
      if (v46 <= v62)
      {
        if (v46 >= v62)
        {
          unint64_t v59 = &v62;
          unint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          int v48 = 6;
          goto LABEL_59;
        }
        ++v45;
      }
    }
    unint64_t v59 = &v62;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59)+ 6) = 0;
LABEL_60:
    if (++v5 == v56)
    {
      uint64_t v5 = __p;
      goto LABEL_70;
    }
  }
  if (__p)
  {
    uint64_t v64 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_23CB37DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ORToolsCpAllocator::VerifyParallelDecision(ORToolsCpAllocator *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v2 = (uint64_t **)*((void *)this + 8);
  if (!v2) {
    return 1;
  }
  uint64_t v5 = (void *)((char *)this + 168);
  while (1)
  {
    BOOL v6 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][20], v2[3][21]);
    BOOL v7 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][22], v2[3][23]);
    OutputTensor = 0;
    OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)v2[2]);
    unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, (unint64_t *)&OutputTensor);
    if (!v8) {
      return 0;
    }
    BOOL v9 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)(v8[3] + 32), *(void *)(v8[3] + 40));
    CpGraph::GetInputTensors(*(CpGraph **)this, (unint64_t *)v2[2], (uint64_t)&v16);
    int v10 = v16;
    uint64_t v11 = v17;
    if (v16 == v17)
    {
      int v13 = 0;
      if (v16) {
        goto LABEL_13;
      }
    }
    else
    {
      while (1)
      {
        unint64_t v15 = 0;
        unint64_t v15 = *v10;
        BOOL v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, &v15);
        if (v12)
        {
          if (operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(void *)(v12[3] + 32), *(void *)(v12[3] + 40)))
          {
            break;
          }
        }
        if (++v10 == v11)
        {
          int v13 = 0;
          goto LABEL_12;
        }
      }
      int v13 = 1;
LABEL_12:
      int v10 = v16;
      if (v16)
      {
LABEL_13:
        uint64_t v17 = v10;
        operator delete(v10);
      }
    }
    if (((v6 || v7) | v9 | v13) == operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][27], v2[3][28])) {
      return 0;
    }
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 1;
    }
  }
}

void sub_23CB37F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ORToolsCpAllocator::GetEarlyAllocationDecision(CpGraph **this, unint64_t *a2, BOOL *a3, BOOL *a4)
{
  *a3 = 1;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&OutputTensor);
  unint64_t v8 = OutputTensor;
  BOOL v9 = v15;
  if (OutputTensor != v15)
  {
    while (1)
    {
      unint64_t v13 = *v8;
      int v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 1, &v13);
      if (!v10 || *((_DWORD *)v10 + 6)) {
        break;
      }
      if (++v8 == v9) {
        goto LABEL_7;
      }
    }
    *a3 = 0;
LABEL_7:
    unint64_t v8 = OutputTensor;
  }
  if (v8)
  {
    unint64_t v15 = v8;
    operator delete(v8);
  }
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 1, (unint64_t *)&OutputTensor);
  if (result) {
    BOOL v12 = *((_DWORD *)result + 6) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  *a4 = v12;
  return result;
}

void sub_23CB38090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::BoolVar>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::BoolVar const*>,std::__wrap_iter<operations_research::sat::BoolVar const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  BOOL v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v28 = &v18[16 * v15];
    std::string __p = v18;
    std::string::size_type v34 = v28;
    unint64_t v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    uint64_t v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)unint64_t v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = (char *)std::vector<operations_research::sat::BoolVar>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[16 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[16 * a5];
    unint64_t v25 = &v23[-16 * a5];
    BOOL v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      BOOL v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)BOOL v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24 - 4);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7 - 4);
    }
    return v5;
  }
  uint64_t v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], v22 - 4);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_23CB3828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<operations_research::sat::BoolVar>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  BOOL v6 = (char *)*a1;
  BOOL v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    BOOL v7 = *(_DWORD **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 2);
      v8 -= 16;
      int v10 = *((_DWORD *)v8 + 2);
      *((void *)v7 - 2) = v9;
      v7 -= 4;
      BOOL v7[2] = v10;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - 4);
    BOOL v7 = *(_DWORD **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  uint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_23CB383F8(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB38618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsLayerScheduleVariable ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsLayerScheduleVariable **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (ORToolsLayerScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsChainScheduleVariable ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsChainScheduleVariable **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (ORToolsChainScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsL2DepScheduleVariable ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsL2DepScheduleVariable **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (ORToolsL2DepScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__deallocate_node(a1, *(ORToolsCpL2AccessVariable ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__deallocate_node(uint64_t a1, ORToolsCpL2AccessVariable **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (ORToolsCpL2AccessVariable **)v3;
    }
    while (v3);
  }
}

ORToolsCpL2AccessVariable *std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](ORToolsCpL2AccessVariable **a1, ORToolsCpL2AccessVariable *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB38ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsCpL2AccessVariable **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

ORToolsLayerScheduleVariable *std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](ORToolsLayerScheduleVariable **a1, ORToolsLayerScheduleVariable *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsLayerScheduleVariable::~ORToolsLayerScheduleVariable(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB38DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsLayerScheduleVariable **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

ORToolsChainScheduleVariable *std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](ORToolsChainScheduleVariable **a1, ORToolsChainScheduleVariable *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsChainScheduleVariable::~ORToolsChainScheduleVariable(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB390A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsChainScheduleVariable **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

ORToolsL2DepScheduleVariable *std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](ORToolsL2DepScheduleVariable **a1, ORToolsL2DepScheduleVariable *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsL2DepScheduleVariable::~ORToolsL2DepScheduleVariable(result);
    JUMPOUT(0x23ECF2BC0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23CB3944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsL2DepScheduleVariable **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long long *>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
      std::__tree<unsigned long>::__emplace_hint_unique_impl<unsigned long long &>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_23CB39528(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_impl<unsigned long long &>(uint64_t **a1, void *a2, unint64_t *a3)
{
  unint64_t v6 = (unint64_t *)operator new(0x28uLL);
  v6[4] = *a3;
  unint64_t v7 = (uint64_t **)std::__tree<unsigned long long>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, v6 + 4);
  unint64_t v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<unsigned long long>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_23CB395D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23CB397F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ORToolsLayerScheduleVariable::ORToolsLayerScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, operations_research::Domain *a11)
{
  unint64_t v42 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  uint64_t v43 = v15;
  if (*(char *)(a4 + 23) >= 0) {
    size_t v16 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v16 = *(void *)(a4 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v16 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*(char *)(a4 + 23) >= 0) {
      size_t v18 = (const std::string::value_type *)a4;
    }
    else {
      size_t v18 = *(const std::string::value_type **)a4;
    }
    memmove(p_p, v18, v16);
  }
  strcpy((char *)p_p + v16, ":layer_begin");
  *(void *)a1 = operations_research::sat::BoolVar::WithName((int *)&v42, &__p);
  *(void *)(a1 + 8) = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v42 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  uint64_t v43 = v20;
  if (*(char *)(a4 + 23) >= 0) {
    size_t v21 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v21 = *(void *)(a4 + 8);
  }
  unint64_t v22 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v21 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v21)
  {
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v23 = (const void *)a4;
    }
    else {
      uint64_t v23 = *(const void **)a4;
    }
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, ":layer_time");
  *(void *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v42, &__p);
  *(void *)(a1 + 24) = v24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v42 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  uint64_t v43 = v25;
  if (*(char *)(a4 + 23) >= 0) {
    size_t v26 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v26 = *(void *)(a4 + 8);
  }
  long long v27 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if (*(char *)(a4 + 23) >= 0) {
      unint64_t v28 = (const void *)a4;
    }
    else {
      unint64_t v28 = *(const void **)a4;
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, ":layer_end");
  *(void *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v42, &__p);
  *(void *)(a1 + 40) = v29;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v40 = *(std::string *)a4;
  }
  ORToolsLayerScheduleVariable::CreateReadEndVariables(a2, (const void **)&v40.__r_.__value_.__l.__data_, (uint64_t)(a6[1] - *a6) >> 3, a11, (uint64_t **)(a1 + 48));
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  unint64_t v42 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  uint64_t v43 = v30;
  if (*(char *)(a4 + 23) >= 0) {
    size_t v31 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v31 = *(void *)(a4 + 8);
  }
  std::string::size_type v32 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v31 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v33 = (const void *)a4;
    }
    else {
      uint64_t v33 = *(const void **)a4;
    }
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, ":compute_end");
  *(void *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v42, &__p);
  *(void *)(a1 + 80) = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v42 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  uint64_t v43 = v35;
  if (*(char *)(a4 + 23) >= 0) {
    size_t v36 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v36 = *(void *)(a4 + 8);
  }
  uint64_t v37 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v36 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v36)
  {
    if (*(char *)(a4 + 23) >= 0) {
      unint64_t v38 = (const void *)a4;
    }
    else {
      unint64_t v38 = *(const void **)a4;
    }
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, ":write_end");
  *(void *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v42, &__p);
  *(void *)(a1 + 96) = v39;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ORToolsLayerScheduleVariable::CreateInputL2AccessVariables(a6, (void *)(a1 + 104));
  operator new();
}

{
  ORToolsLayerScheduleVariable::ORToolsLayerScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_23CB3A0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v27 + 200) = v30;
    operator delete(v30);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v27 + 136), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v27 + 128), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  size_t v31 = *a9;
  if (*a9)
  {
    *(void *)(v27 + 56) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_23CB3A1F8()
{
  MEMORY[0x23ECF2BC0](v0, 0x1020C4036FA8A49);
  JUMPOUT(0x23CB3A1C4);
}

void sub_23CB3A218()
{
}

void sub_23CB3A220()
{
  MEMORY[0x23ECF2BC0](v0, 0x1020C401AC86FC1);
  JUMPOUT(0x23CB3A1D0);
}

void sub_23CB3A240()
{
}

void sub_23CB3A248(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_23CB3A27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x23CB3A1ECLL);
  }
  JUMPOUT(0x23CB3A1F0);
}

void sub_23CB3A290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x23CB3A1ECLL);
  }
  JUMPOUT(0x23CB3A1F0);
}

void ORToolsLayerScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, unint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  BOOL v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  uint64_t v56 = v10;
  if (*((char *)a2 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0) {
      float v13 = a2;
    }
    else {
      float v13 = *a2;
    }
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  uint64_t v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  unint64_t v18 = (unint64_t)a5[2];
  uint64_t v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = ((char *)v19 - (char *)*a5) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v18 - (void)*a5;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    }
    else {
      uint64_t v25 = 0;
    }
    size_t v26 = (uint64_t *)&v25[16 * v21];
    uint64_t v27 = &v25[16 * v24];
    uint64_t *v26 = v16;
    v26[1] = v17;
    uint64_t v20 = v26 + 2;
    uint64_t v29 = *a5;
    unint64_t v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        uint64_t v30 = *(v28 - 2);
        v28 -= 2;
        int v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      unint64_t v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3 >= 2)
  {
    BOOL v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    uint64_t v56 = v32;
    if (*((char *)a2 + 23) >= 0) {
      size_t v33 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v33 = (size_t)a2[1];
    }
    uint64_t v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v35 = a2;
      }
      else {
        uint64_t v35 = *a2;
      }
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    uint64_t v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    uint64_t v41 = a5[1];
    unint64_t v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      uint64_t v43 = ((char *)v41 - (char *)*a5) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v40 - (void)*a5;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      }
      else {
        unint64_t v47 = 0;
      }
      int v48 = (uint64_t *)&v47[16 * v43];
      uint64_t v49 = &v47[16 * v46];
      *int v48 = v38;
      v48[1] = v39;
      unint64_t v42 = v48 + 2;
      unint64_t v51 = *a5;
      unint64_t v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          uint64_t v52 = *(v50 - 2);
          v50 -= 2;
          int v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        unint64_t v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      uint64_t *v41 = v36;
      v41[1] = v37;
      unint64_t v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB3A5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsLayerScheduleVariable::CreateInputL2AccessVariables(void *a1@<X2>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1] != *a1) {
    operator new();
  }
}

void sub_23CB3A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsLayerScheduleVariable::CreateInPlaceVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t *a3@<X3>, uint64_t **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (v6)
  {
    unint64_t v10 = v6 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    while (!*(void *)(*(void *)v5 + 112))
    {
      v5 += 8;
      if (!--v10) {
        return;
      }
    }
    unint64_t v11 = 0;
    do
    {
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::NewBoolVar(a1);
      v43.__r_.__value_.__l.__size_ = v12;
      if (*((char *)a2 + 23) >= 0) {
        size_t v13 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v13 = (size_t)a2[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v44, v13 + 17);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v44;
      }
      else {
        uint64_t v14 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if (v13)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v15 = a2;
        }
        else {
          uint64_t v15 = *a2;
        }
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, ":in_place_update_");
      std::to_string(&__str, v11);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      unint64_t v18 = std::string::append(&v44, (const std::string::value_type *)p_str, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = operations_research::sat::BoolVar::WithName((int *)&v43, &__p);
      uint64_t v22 = v20;
      uint64_t v23 = v21;
      uint64_t v25 = a4[1];
      unint64_t v24 = (unint64_t)a4[2];
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v27 = ((char *)v25 - (char *)*a4) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v24 - (void)*a4;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30) {
          int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a4 + 2), v30);
        }
        else {
          int v31 = 0;
        }
        uint64_t v32 = (uint64_t *)&v31[16 * v27];
        *uint64_t v32 = v22;
        v32[1] = v23;
        uint64_t v34 = *a4;
        size_t v33 = a4[1];
        uint64_t v35 = v32;
        if (v33 != *a4)
        {
          do
          {
            uint64_t v36 = *(v33 - 2);
            v33 -= 2;
            int v37 = *((_DWORD *)v33 + 2);
            *(v35 - 2) = v36;
            v35 -= 2;
            *((_DWORD *)v35 + 2) = v37;
          }
          while (v33 != v34);
          size_t v33 = *a4;
        }
        size_t v26 = v32 + 2;
        *a4 = v35;
        a4[1] = v32 + 2;
        a4[2] = (uint64_t *)&v31[16 * v30];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        uint64_t *v25 = v20;
        v25[1] = v21;
        size_t v26 = v25 + 2;
      }
      a4[1] = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      uint64_t v38 = *a3;
      if (!*(void *)(*(void *)(*a3 + 8 * v11) + 112))
      {
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, (*a4)[2 * v11], (*a4)[2 * v11 + 1]);
        uint64_t v39 = operations_research::sat::CpModelBuilder::NewConstant(a1, 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v44, (uint64_t)v39, v40);
        unint64_t v50 = operations_research::sat::CpModelBuilder::AddEquality(a1, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v44);
        std::operator+<char>();
        uint64_t v41 = std::string::append(&v43, "disable_inplace_allocation", 0x1AuLL);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v50, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v45)
        {
          unint64_t v46 = v45;
          operator delete(v45);
        }
        if (v44.__r_.__value_.__r.__words[0])
        {
          v44.__r_.__value_.__l.__size_ = v44.__r_.__value_.__r.__words[0];
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (v48)
        {
          uint64_t v49 = v48;
          operator delete(v48);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v38 = *a3;
      }
      ++v11;
    }
    while (v11 < (a3[1] - v38) >> 3);
  }
}

void sub_23CB3ABDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a27);
  uint64_t v34 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ORToolsLayerScheduleVariable::~ORToolsLayerScheduleVariable(ORToolsLayerScheduleVariable *this)
{
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  int8x8_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 17, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 16, 0);
  unint64_t v4 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
}

void ORToolsLayerScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t *a3, void *a4, const operations_research::Domain *a5)
{
  uint64_t v277 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(a1 + 104);
  if (*(void *)(a1 + 112) - (void)v6 < 9uLL)
  {
    uint64_t v15 = *v6;
    *(void *)std::string __str = *(void *)(v15 + 256);
    *(_DWORD *)&__str[8] = *(_DWORD *)(v15 + 264);
    uint64_t v16 = *(void *)(a1 + 136);
    *(void *)&__str[16] = *(void *)(v16 + 256);
    *(_DWORD *)&__str[24] = *(_DWORD *)(v16 + 264);
    uint64_t v17 = operator new(0x20uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 2);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 2);
    *uint64_t v17 = *(_OWORD *)__str;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)&__str[12];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)&__p);
  }
  else
  {
    uint64_t v8 = *v6;
    *(void *)int v276 = *(void *)(*v6 + 256);
    *(_DWORD *)&v276[8] = *(_DWORD *)(v8 + 264);
    uint64_t v9 = v6[1];
    *(void *)&v276[16] = *(void *)(v9 + 256);
    *(_DWORD *)&v276[24] = *(_DWORD *)(v9 + 264);
    uint64_t v10 = *(void *)(a1 + 136);
    *(void *)&v276[32] = *(void *)(v10 + 256);
    *(_DWORD *)&v276[40] = *(_DWORD *)(v10 + 264);
    unint64_t v11 = operator new(0x30uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v11 + 3);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v11 + 3);
    long long v12 = *(_OWORD *)&v276[16];
    *unint64_t v11 = *(_OWORD *)v276;
    v11[1] = v12;
    *(_OWORD *)((char *)v11 + 28) = *(_OWORD *)&v276[28];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)&__p);
  }
  uint64_t v18 = (uint64_t)BooleanOr;
  int v19 = v14;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)int v276 = *(void *)(a1 + 160);
  *(_DWORD *)&v276[8] = *(_DWORD *)(a1 + 168);
  *(void *)&v276[16] = *(void *)(a1 + 176);
  *(_DWORD *)&v276[24] = *(_DWORD *)(a1 + 184);
  uint64_t v20 = operator new(0x20uLL);
  *(void *)std::string __str = v20;
  *(void *)&__str[16] = v20 + 2;
  _OWORD *v20 = *(_OWORD *)v276;
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)&v276[12];
  *(void *)&__str[8] = v20 + 2;
  uint64_t v21 = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)__str);
  int v23 = v22;
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  uint64_t v24 = operations_research::sat::BoolVar::BoolVar((uint64_t)__str, ~v19, v18);
  long long v25 = *(_OWORD *)__str;
  operations_research::sat::BoolVar::BoolVar(v24, ~v23, (uint64_t)v21);
  long long v26 = *(_OWORD *)__str;
  uint64_t v27 = operator new(0x20uLL);
  *(void *)int v276 = v27;
  *(void *)&v276[16] = v27 + 4;
  *(_OWORD *)uint64_t v27 = v25;
  v27[2] = v26;
  *((_DWORD *)v27 + 6) = DWORD2(v26);
  *(void *)&v276[8] = v27 + 4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__l.__size_ = v28;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v29 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v29 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v29 + 12);
  if (__str[23] >= 0) {
    unint64_t v30 = __str;
  }
  else {
    unint64_t v30 = *(unsigned char **)__str;
  }
  if (v29)
  {
    if (*(char *)(a1 + 271) >= 0) {
      int v31 = (const void *)(a1 + 248);
    }
    else {
      int v31 = *(const void **)(a1 + 248);
    }
    memmove(v30, v31, v29);
  }
  strcpy(&v30[v29], ":no_parallel");
  uint64_t v32 = operations_research::sat::BoolVar::WithName((int *)&__p, (std::string *)__str);
  unsigned int v263 = v33;
  uint64_t v264 = v32;
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, v264, v263);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, *(void *)(a1 + 216), *(void *)(a1 + 224));
  operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(void *)&__str[24])
  {
    uint64_t v275 = *(void *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  if (*(void *)&v276[24])
  {
    *(void *)&v276[32] = *(void *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(void *)(a1 + 16), *(void *)(a1 + 24));
  __p.__r_.__value_.__r.__words[0] = *(void *)(a1 + 32);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __p.__r_.__value_.__r.__words[2] = *(void *)a1;
  int v273 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v271.__r_.__value_.__l.__data_ = xmmword_23CE7E330;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__p, 2, (uint64_t *)&v271, 2, (uint64_t)__str);
  v268.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0) {
    size_t v34 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v34 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v270, v34 + 15);
  if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v270;
  }
  else {
    uint64_t v35 = (std::string *)v270.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v36 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v36 = *(const void **)(a1 + 248);
    }
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, ":layer_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v268, &v270);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  if (*(void *)&__str[24])
  {
    uint64_t v275 = *(void *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  if (*(void *)&v276[24])
  {
    *(void *)&v276[32] = *(void *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  uint64_t v37 = *(void *)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  uint64_t v39 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v37, v38, (uint64_t)v39, v40, *(void *)(a1 + 32), *(void *)(a1 + 40), v41, v18, v19);
  uint64_t v42 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v42)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      uint64_t v45 = *(void *)a1;
      uint64_t v46 = *(void *)(a1 + 8);
      uint64_t v47 = *(void *)(*(void *)(a1 + 104) + 8 * v44);
      uint64_t v48 = *(void *)v47;
      uint64_t v49 = *(void *)(v47 + 8);
      unint64_t v50 = (uint64_t *)(v42 + v43);
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      v268.__r_.__value_.__r.__words[0] = *(void *)(v47 + 224);
      LODWORD(v268.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v47 + 232);
      int v53 = operator new(0x20uLL);
      *(void *)&v276[8] = v53 + 4;
      *(void *)&v276[16] = v53 + 4;
      *(_OWORD *)int v53 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v53[2] = v264;
      *((_DWORD *)v53 + 6) = v263;
      *(void *)int v276 = v53;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v271.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v45, v46, v48, v49, v51, v52, v56, (uint64_t)BooleanAnd, v55);
      v271.__r_.__value_.__l.__size_ = v57;
      if (*(char *)(a1 + 271) >= 0) {
        size_t v58 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v58 = *(void *)(a1 + 256);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v58 + 29);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v58)
      {
        if (*(char *)(a1 + 271) >= 0) {
          uint64_t v60 = (const void *)(a1 + 248);
        }
        else {
          uint64_t v60 = *(const void **)(a1 + 248);
        }
        memmove(p_p, v60, v58);
      }
      strcpy((char *)p_p + v58, ":resident_read_time_interval_");
      std::to_string(&v270, v44);
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v61 = &v270;
      }
      else {
        unint64_t v61 = (std::string *)v270.__r_.__value_.__r.__words[0];
      }
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v270.__r_.__value_.__l.__size_;
      }
      uint64_t v63 = std::string::append(&__p, (const std::string::value_type *)v61, size);
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      *(void *)&__str[16] = *((void *)&v63->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __str = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v271, (std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v270.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      uint64_t v65 = *(void *)a1;
      uint64_t v66 = *(void *)(a1 + 8);
      uint64_t v67 = *(void *)(*(void *)(a1 + 104) + 8 * v44);
      uint64_t v68 = *(void *)(v67 + 16);
      uint64_t v69 = *(void *)(v67 + 24);
      int v70 = (uint64_t *)(*(void *)(a1 + 48) + v43);
      uint64_t v72 = *v70;
      uint64_t v71 = v70[1];
      v268.__r_.__value_.__r.__words[0] = *(void *)(v67 + 240);
      LODWORD(v268.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v67 + 248);
      unint64_t v73 = operator new(0x20uLL);
      *(void *)&v276[8] = v73 + 4;
      *(void *)&v276[16] = v73 + 4;
      *(_OWORD *)unint64_t v73 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v73[2] = v264;
      *((_DWORD *)v73 + 6) = v263;
      *(void *)int v276 = v73;
      uint64_t v74 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v271.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v65, v66, v68, v69, v72, v71, v76, (uint64_t)v74, v75);
      v271.__r_.__value_.__l.__size_ = v77;
      if (*(char *)(a1 + 271) >= 0) {
        size_t v78 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v78 = *(void *)(a1 + 256);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v78 + 32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v79 = &__p;
      }
      else {
        int v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v78)
      {
        if (*(char *)(a1 + 271) >= 0) {
          uint64_t v80 = (const void *)(a1 + 248);
        }
        else {
          uint64_t v80 = *(const void **)(a1 + 248);
        }
        memmove(v79, v80, v78);
      }
      strcpy((char *)v79 + v78, ":nonresident_read_time_interval_");
      std::to_string(&v270, v44);
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v81 = &v270;
      }
      else {
        uint64_t v81 = (std::string *)v270.__r_.__value_.__r.__words[0];
      }
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v82 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v82 = v270.__r_.__value_.__l.__size_;
      }
      unint64_t v83 = std::string::append(&__p, (const std::string::value_type *)v81, v82);
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      *(void *)&__str[16] = *((void *)&v83->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __str = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v271, (std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v270.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      ++v44;
      uint64_t v42 = *(void *)(a1 + 48);
      v43 += 16;
    }
    while (v44 < (*(void *)(a1 + 56) - v42) >> 4);
  }
  uint64_t v85 = *(void *)a1;
  uint64_t v86 = *(void *)(a1 + 8);
  std::string v87 = *(uint64_t **)(a1 + 128);
  uint64_t v88 = *v87;
  uint64_t v89 = v87[1];
  uint64_t v90 = *(void *)(a1 + 72);
  uint64_t v91 = *(void *)(a1 + 80);
  uint64_t v92 = **(void **)(a1 + 104);
  v270.__r_.__value_.__r.__words[0] = *(void *)(v92 + 224);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v92 + 232);
  uint64_t v93 = operator new(0x20uLL);
  *(void *)int v276 = v93;
  *(void *)&v276[16] = v93 + 4;
  *(_OWORD *)uint64_t v93 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v93[2] = v264;
  *((_DWORD *)v93 + 6) = v263;
  *(void *)&v276[8] = v93 + 4;
  uint64_t v94 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v85, v86, v88, v89, v90, v91, v96, (uint64_t)v94, v95);
  __p.__r_.__value_.__l.__size_ = v97;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v98 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v98 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v98 + 31);
  if (__str[23] >= 0) {
    uint64_t v99 = __str;
  }
  else {
    uint64_t v99 = *(unsigned char **)__str;
  }
  if (v98)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v100 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v100 = *(const void **)(a1 + 248);
    }
    memmove(v99, v100, v98);
  }
  strcpy(&v99[v98], ":compute_resident_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  uint64_t v101 = *(void *)a1;
  uint64_t v102 = *(void *)(a1 + 8);
  uint64_t v103 = *(void *)(a1 + 128);
  uint64_t v104 = *(void *)(v103 + 16);
  uint64_t v105 = *(void *)(v103 + 24);
  uint64_t v107 = *(void *)(a1 + 72);
  uint64_t v106 = *(void *)(a1 + 80);
  uint64_t v108 = **(void **)(a1 + 104);
  v270.__r_.__value_.__r.__words[0] = *(void *)(v108 + 240);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v108 + 248);
  std::string::size_type v109 = operator new(0x20uLL);
  *(void *)int v276 = v109;
  *(void *)&v276[16] = v109 + 4;
  *(_OWORD *)std::string::size_type v109 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v109[2] = v264;
  *((_DWORD *)v109 + 6) = v263;
  *(void *)&v276[8] = v109 + 4;
  uint64_t v110 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v101, v102, v104, v105, v107, v106, v112, (uint64_t)v110, v111);
  __p.__r_.__value_.__l.__size_ = v113;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v114 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v114 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v114 + 34);
  if (__str[23] >= 0) {
    uint64_t v115 = __str;
  }
  else {
    uint64_t v115 = *(unsigned char **)__str;
  }
  if (v114)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v116 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v116 = *(const void **)(a1 + 248);
    }
    memmove(v115, v116, v114);
  }
  strcpy(&v115[v114], ":compute_nonresident_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  uint64_t v117 = *(void *)a1;
  uint64_t v118 = *(void *)(a1 + 8);
  uint64_t v119 = *(void *)(a1 + 136);
  uint64_t v120 = *(void *)v119;
  uint64_t v121 = *(void *)(v119 + 8);
  uint64_t v122 = *(void *)(a1 + 88);
  uint64_t v123 = *(void *)(a1 + 96);
  v270.__r_.__value_.__r.__words[0] = *(void *)(v119 + 224);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v119 + 232);
  std::string::size_type v124 = operator new(0x20uLL);
  *(void *)int v276 = v124;
  *(void *)&v276[16] = v124 + 4;
  *(_OWORD *)std::string::size_type v124 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v124[2] = v264;
  *((_DWORD *)v124 + 6) = v263;
  *(void *)&v276[8] = v124 + 4;
  BOOL v125 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v117, v118, v120, v121, v122, v123, v127, (uint64_t)v125, v126);
  __p.__r_.__value_.__l.__size_ = v128;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v129 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v129 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v129 + 29);
  if (__str[23] >= 0) {
    uint64_t v130 = __str;
  }
  else {
    uint64_t v130 = *(unsigned char **)__str;
  }
  if (v129)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v131 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v131 = *(const void **)(a1 + 248);
    }
    memmove(v130, v131, v129);
  }
  strcpy(&v130[v129], ":resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  uint64_t v132 = *(void *)a1;
  uint64_t v133 = *(void *)(a1 + 8);
  uint64_t v134 = *(void *)(a1 + 136);
  uint64_t v135 = *(void *)(v134 + 16);
  uint64_t v136 = *(void *)(v134 + 24);
  uint64_t v137 = *(void *)(a1 + 88);
  uint64_t v138 = *(void *)(a1 + 96);
  v270.__r_.__value_.__r.__words[0] = *(void *)(v134 + 240);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v134 + 248);
  v139 = operator new(0x20uLL);
  *(void *)int v276 = v139;
  *(void *)&v276[16] = v139 + 4;
  *(_OWORD *)v139 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v139[2] = v264;
  *((_DWORD *)v139 + 6) = v263;
  *(void *)&v276[8] = v139 + 4;
  int v140 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v132, v133, v135, v136, v137, v138, v142, (uint64_t)v140, v141);
  __p.__r_.__value_.__l.__size_ = v143;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v144 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v144 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v144 + 32);
  if (__str[23] >= 0) {
    v145 = __str;
  }
  else {
    v145 = *(unsigned char **)__str;
  }
  if (v144)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v146 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v146 = *(const void **)(a1 + 248);
    }
    memmove(v145, v146, v144);
  }
  strcpy(&v145[v144], ":nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  uint64_t v147 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a5);
  uint64_t v260 = v148;
  std::string::size_type v262 = v147;
  uint64_t v149 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v149)
  {
    uint64_t v150 = 0;
    unint64_t v151 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(void *)(v149 + v150), *(void *)(v149 + v150 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
      v269 = operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
      if (*(char *)(a1 + 271) >= 0) {
        size_t v152 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v152 = *(void *)(a1 + 256);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v271, v152 + 6);
      if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v153 = &v271;
      }
      else {
        uint64_t v153 = (std::string *)v271.__r_.__value_.__r.__words[0];
      }
      if (v152)
      {
        if (*(char *)(a1 + 271) >= 0) {
          uint64_t v154 = (const void *)(a1 + 248);
        }
        else {
          uint64_t v154 = *(const void **)(a1 + 248);
        }
        memmove(v153, v154, v152);
      }
      strcpy((char *)v153 + v152, ":read_");
      std::to_string(&v268, v151);
      if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v155 = &v268;
      }
      else {
        v155 = (std::string *)v268.__r_.__value_.__r.__words[0];
      }
      if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v156 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v156 = v268.__r_.__value_.__l.__size_;
      }
      uint64_t v157 = std::string::append(&v271, (const std::string::value_type *)v155, v156);
      long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
      v270.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v158;
      v157->__r_.__value_.__l.__size_ = 0;
      v157->__r_.__value_.__r.__words[2] = 0;
      v157->__r_.__value_.__r.__words[0] = 0;
      int v159 = std::string::append(&v270, "_end_constraint", 0xFuLL);
      long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v160;
      v159->__r_.__value_.__l.__size_ = 0;
      v159->__r_.__value_.__r.__words[2] = 0;
      v159->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v269, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v270.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v268.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v271.__r_.__value_.__l.__data_);
      }
      if (*(void *)&__str[24])
      {
        uint64_t v275 = *(void *)&__str[24];
        operator delete(*(void **)&__str[24]);
      }
      if (*(void *)__str)
      {
        *(void *)&__str[8] = *(void *)__str;
        operator delete(*(void **)__str);
      }
      if (*(void *)&v276[24])
      {
        *(void *)&v276[32] = *(void *)&v276[24];
        operator delete(*(void **)&v276[24]);
      }
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      ++v151;
      uint64_t v149 = *(void *)(a1 + 48);
      v150 += 16;
    }
    while (v151 < (*(void *)(a1 + 56) - v149) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(void *)(a1 + 72), *(void *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0) {
    size_t v161 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v161 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v161 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v162 = &__p;
  }
  else {
    uint64_t v162 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v161)
  {
    if (*(char *)(a1 + 271) >= 0) {
      uint64_t v163 = (const void *)(a1 + 248);
    }
    else {
      uint64_t v163 = *(const void **)(a1 + 248);
    }
    memmove(v162, v163, v161);
  }
  strcpy((char *)v162 + v161, ":compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&v270, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)&__str[24])
  {
    uint64_t v275 = *(void *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  if (*(void *)&v276[24])
  {
    *(void *)&v276[32] = *(void *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(void *)(a1 + 88), *(void *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0) {
    size_t v164 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v164 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v164 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v165 = &__p;
  }
  else {
    uint64_t v165 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v164)
  {
    if (*(char *)(a1 + 271) >= 0) {
      unint64_t v166 = (const void *)(a1 + 248);
    }
    else {
      unint64_t v166 = *(const void **)(a1 + 248);
    }
    memmove(v165, v166, v164);
  }
  strcpy((char *)v165 + v164, ":write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&v270, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)&__str[24])
  {
    uint64_t v275 = *(void *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  if (*(void *)&v276[24])
  {
    *(void *)&v276[32] = *(void *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v270, 0, sizeof(v270));
  size_t v167 = *(void **)(a1 + 104);
  if (*(void **)(a1 + 112) != v167)
  {
    unint64_t v168 = 0;
    do
    {
      uint64_t v169 = v167[v168];
      *(void *)&__str[4] = *(void *)(v169 + 240);
      *(_DWORD *)&__str[12] = *(_DWORD *)(v169 + 248);
      v170 = (char *)operator new(0x20uLL);
      *(void *)&v276[8] = v170 + 32;
      *(void *)&v276[16] = v170 + 32;
      *(void *)v170 = v264;
      *((_DWORD *)v170 + 2) = v263;
      *(_OWORD *)(v170 + 12) = *(_OWORD *)__str;
      *(void *)int v276 = v170;
      std::string::size_type v171 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      long long v173 = v171;
      v174 = v172;
      std::string::size_type v175 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        uint64_t v177 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v178 = v177 + 1;
        if ((unint64_t)(v177 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v179 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v178) {
          unint64_t v178 = v179 >> 3;
        }
        if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v180 = v178;
        }
        if (v180) {
          v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v180);
        }
        else {
          v181 = 0;
        }
        uint64_t v182 = (operations_research::sat::CpModelBuilder **)&v181[16 * v177];
        *uint64_t v182 = v173;
        v182[1] = v174;
        uint64_t v183 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v184 = __p.__r_.__value_.__r.__words[0];
        std::string::size_type v185 = (std::string::size_type)v182;
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v186 = *((void *)v183 - 2);
            v183 -= 4;
            int v187 = v183[2];
            *(void *)(v185 - 16) = v186;
            v185 -= 16;
            *(_DWORD *)(v185 + 8) = v187;
          }
          while (v183 != (_DWORD *)v184);
          uint64_t v183 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v176 = (std::string::size_type)(v182 + 2);
        __p.__r_.__value_.__r.__words[0] = v185;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v182 + 2);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v181[16 * v180];
        if (v183) {
          operator delete(v183);
        }
      }
      else
      {
        *(void *)__p.__r_.__value_.__l.__size_ = v171;
        *(void *)(v175 + 8) = v172;
        std::string::size_type v176 = v175 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v176;
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      uint64_t v188 = *(void *)(*(void *)(*a4 + 8 * v168) + 120);
      std::string::size_type v189 = v270.__r_.__value_.__l.__size_;
      if (v270.__r_.__value_.__l.__size_ >= v270.__r_.__value_.__r.__words[2])
      {
        long long v191 = (void *)v270.__r_.__value_.__r.__words[0];
        uint64_t v192 = (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v193 = v192 + 1;
        if ((unint64_t)(v192 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v194 = v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0]) >> 2 > v193) {
          unint64_t v193 = v194 >> 2;
        }
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v195 = v193;
        }
        if (v195)
        {
          v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v270.__r_.__value_.__r.__words[2], v195);
          std::string::size_type v189 = v270.__r_.__value_.__l.__size_;
          long long v191 = (void *)v270.__r_.__value_.__r.__words[0];
        }
        else
        {
          v196 = 0;
        }
        size_t v197 = &v196[8 * v192];
        *(void *)size_t v197 = v188;
        std::string::size_type v190 = (std::string::size_type)(v197 + 8);
        while ((void *)v189 != v191)
        {
          uint64_t v198 = *(void *)(v189 - 8);
          v189 -= 8;
          *((void *)v197 - 1) = v198;
          v197 -= 8;
        }
        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
        v270.__r_.__value_.__l.__size_ = v190;
        v270.__r_.__value_.__r.__words[2] = (std::string::size_type)&v196[8 * v195];
        if (v191) {
          operator delete(v191);
        }
      }
      else
      {
        *(void *)v270.__r_.__value_.__l.__size_ = v188;
        std::string::size_type v190 = v189 + 8;
      }
      v270.__r_.__value_.__l.__size_ = v190;
      ++v168;
      size_t v167 = *(void **)(a1 + 104);
      uint64_t v199 = *(void *)(a1 + 112) - (void)v167;
    }
    while (v168 < v199 >> 3);
    if ((unint64_t)v199 > 8)
    {
      uint64_t v200 = *v167;
      *(void *)&__str[4] = *(void *)(*v167 + 240);
      *(_DWORD *)&__str[12] = *(_DWORD *)(v200 + 248);
      uint64_t v201 = v167[1];
      *(std::string::size_type *)((char *)v271.__r_.__value_.__r.__words + 4) = *(void *)(v201 + 240);
      HIDWORD(v271.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v201 + 248);
      uint64_t v202 = (char *)operator new(0x30uLL);
      *(void *)&v276[8] = v202 + 48;
      *(void *)&v276[16] = v202 + 48;
      *(void *)uint64_t v202 = v264;
      *((_DWORD *)v202 + 2) = v263;
      *(_OWORD *)(v202 + 12) = *(_OWORD *)__str;
      *(_OWORD *)(v202 + 28) = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
      *(void *)int v276 = v202;
      v203 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v205 = v203;
      v206 = v204;
      std::string::size_type v207 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        uint64_t v209 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v210 = v209 + 1;
        if ((unint64_t)(v209 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v211 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v210) {
          unint64_t v210 = v211 >> 3;
        }
        if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v212 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v212 = v210;
        }
        if (v212) {
          unint64_t v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v212);
        }
        else {
          unint64_t v213 = 0;
        }
        v214 = (operations_research::sat::CpModelBuilder **)&v213[16 * v209];
        std::string::size_type v215 = (std::string::size_type)&v213[16 * v212];
        char *v214 = v205;
        v214[1] = v206;
        std::string::size_type v208 = (std::string::size_type)(v214 + 2);
        v216 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v217 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            std::string::size_type v218 = (operations_research::sat::CpModelBuilder *)*((void *)v216 - 2);
            v216 -= 4;
            int v219 = v216[2];
            *(v214 - 2) = v218;
            v214 -= 2;
            *((_DWORD *)v214 + 2) = v219;
          }
          while (v216 != (_DWORD *)v217);
          v216 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
        __p.__r_.__value_.__l.__size_ = v208;
        __p.__r_.__value_.__r.__words[2] = v215;
        if (v216) {
          operator delete(v216);
        }
      }
      else
      {
        *(void *)__p.__r_.__value_.__l.__size_ = v203;
        *(void *)(v207 + 8) = v204;
        std::string::size_type v208 = v207 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v208;
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      std::string::size_type v220 = v270.__r_.__value_.__l.__size_;
      if (v270.__r_.__value_.__l.__size_ >= v270.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v222 = (void *)v270.__r_.__value_.__r.__words[0];
        uint64_t v223 = (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v225 = v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0]) >> 2 > v224) {
          unint64_t v224 = v225 >> 2;
        }
        if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v226 = v224;
        }
        if (v226)
        {
          int64_t v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v270.__r_.__value_.__r.__words[2], v226);
          std::string::size_type v220 = v270.__r_.__value_.__l.__size_;
          std::string::size_type v222 = (void *)v270.__r_.__value_.__r.__words[0];
        }
        else
        {
          int64_t v227 = 0;
        }
        unint64_t v228 = &v227[8 * v223];
        std::string::size_type v229 = (std::string::size_type)&v227[8 * v226];
        *(void *)unint64_t v228 = 1;
        std::string::size_type v221 = (std::string::size_type)(v228 + 8);
        while ((void *)v220 != v222)
        {
          uint64_t v230 = *(void *)(v220 - 8);
          v220 -= 8;
          *((void *)v228 - 1) = v230;
          v228 -= 8;
        }
        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
        v270.__r_.__value_.__l.__size_ = v221;
        v270.__r_.__value_.__r.__words[2] = v229;
        if (v222) {
          operator delete(v222);
        }
      }
      else
      {
        *(void *)v270.__r_.__value_.__l.__size_ = 1;
        std::string::size_type v221 = v220 + 8;
      }
      v270.__r_.__value_.__l.__size_ = v221;
    }
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(void *)(a1 + 144), *(void *)(a1 + 152));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)v270.__r_.__value_.__l.__data_, (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)__str);
  operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(void *)&__str[24])
  {
    uint64_t v275 = *(void *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(void *)__str)
  {
    *(void *)&__str[8] = *(void *)__str;
    operator delete(*(void **)__str);
  }
  if (*(void *)&v276[24])
  {
    *(void *)&v276[32] = *(void *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(a2, (uint64_t)v262, v260, *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v231 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v231)
  {
    unint64_t v232 = 0;
    do
    {
      uint64_t v233 = *(void *)(a1 + 240);
      uint64_t v234 = *(void *)(v231 + 8 * v232);
      *(void *)std::string __str = *(void *)(v234 + 240);
      *(_DWORD *)&__str[8] = *(_DWORD *)(v234 + 248);
      v235 = operator new(0x20uLL);
      *(void *)&v276[8] = v235 + 4;
      *(void *)&v276[16] = v235 + 4;
      *(_OWORD *)v235 = *(_OWORD *)__str;
      v235[2] = v264;
      *((_DWORD *)v235 + 6) = v263;
      *(void *)int v276 = v235;
      v236 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      int v238 = v237;
      if (*(char *)(a1 + 271) >= 0) {
        size_t v239 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v239 = *(void *)(a1 + 256);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v267, v239 + 35);
      if ((v267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v240 = &v267;
      }
      else {
        std::string::size_type v240 = (std::string *)v267.__r_.__value_.__r.__words[0];
      }
      if (v239)
      {
        if (*(char *)(a1 + 271) >= 0) {
          std::string::size_type v241 = (const void *)(a1 + 248);
        }
        else {
          std::string::size_type v241 = *(const void **)(a1 + 248);
        }
        memmove(v240, v241, v239);
      }
      strcpy((char *)v240 + v239, ":nonresident_read_pressure_interval");
      int v242 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(a2, v233, v233, (uint64_t)v236, v238, &v267);
      int v244 = v243;
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v267.__r_.__value_.__l.__data_);
      }
      if (*(void *)v276)
      {
        *(void *)&v276[8] = *(void *)v276;
        operator delete(*(void **)v276);
      }
      uint64_t v245 = *(void *)(*(void *)(a1 + 104) + 8 * v232);
      operations_research::sat::CumulativeConstraint::AddDemand(a3, v242, v244, *(void *)(v245 + 128), *(void *)(v245 + 136));
      ++v232;
      uint64_t v231 = *(void *)(a1 + 104);
    }
    while (v232 < (*(void *)(a1 + 112) - v231) >> 3);
  }
  uint64_t v246 = *(void *)(a1 + 240);
  uint64_t v247 = *(void *)(a1 + 136);
  *(void *)std::string __str = *(void *)(v247 + 240);
  *(_DWORD *)&__str[8] = *(_DWORD *)(v247 + 248);
  std::string::size_type v248 = operator new(0x20uLL);
  *(void *)&v276[8] = v248 + 4;
  *(void *)&v276[16] = v248 + 4;
  *(_OWORD *)std::string::size_type v248 = *(_OWORD *)__str;
  v248[2] = v264;
  *((_DWORD *)v248 + 6) = v263;
  *(void *)int v276 = v248;
  v249 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  int v251 = v250;
  if (*(char *)(a1 + 271) >= 0) {
    size_t v252 = *(unsigned __int8 *)(a1 + 271);
  }
  else {
    size_t v252 = *(void *)(a1 + 256);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v266, v252 + 36);
  if ((v266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v253 = &v266;
  }
  else {
    std::string::size_type v253 = (std::string *)v266.__r_.__value_.__r.__words[0];
  }
  if (v252)
  {
    if (*(char *)(a1 + 271) >= 0) {
      std::string::size_type v254 = (const void *)(a1 + 248);
    }
    else {
      std::string::size_type v254 = *(const void **)(a1 + 248);
    }
    memmove(v253, v254, v252);
  }
  strcpy((char *)v253 + v252, ":nonresident_write_pressure_interval");
  int v255 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(a2, v246, v246, (uint64_t)v249, v251, &v266);
  int v257 = v256;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v266.__r_.__value_.__l.__data_);
  }
  if (*(void *)v276)
  {
    *(void *)&v276[8] = *(void *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(a3, v255, v257, *(void *)(*(void *)(a1 + 136) + 128), *(void *)(*(void *)(a1 + 136) + 136));
  ORToolsLayerScheduleVariable::CreateInplaceAllocationConstraints(a1, a2);
  if (v270.__r_.__value_.__r.__words[0])
  {
    v270.__r_.__value_.__l.__size_ = v270.__r_.__value_.__r.__words[0];
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CB3C5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsLayerScheduleVariable::CreateInplaceAllocationConstraints(uint64_t a1, operations_research::sat::CpModelBuilder *a2)
{
  v36[2] = *MEMORY[0x263EF8340];
  int8x8_t v2 = *(uint64_t **)(a1 + 192);
  if (*(uint64_t **)(a1 + 200) != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v20 = (const void *)(a1 + 248);
    do
    {
      uint64_t v7 = operations_research::sat::IntVar::IntVar((uint64_t)v36, (const operations_research::sat::BoolVar *)&v2[v5]);
      uint64_t v35 = 2;
      operations_research::sat::LinearExpr::ScalProd(v7, 1, &v35, 1, (uint64_t)&v26);
      uint64_t v8 = *(void *)(*(void *)(a1 + 104) + 8 * v6);
      uint64_t v31 = *(void *)(v8 + 224);
      int v32 = *(_DWORD *)(v8 + 232);
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v33 = *(void *)(v9 + 224);
      int v34 = *(_DWORD *)(v9 + 232);
      operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v31, 2, (uint64_t)&v22);
      unint64_t v30 = operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)&v26, (const operations_research::sat::LinearExpr *)&v22);
      if (*(char *)(a1 + 271) >= 0) {
        size_t v10 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v10 = *(void *)(a1 + 256);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v10)
      {
        if (*(char *)(a1 + 271) >= 0) {
          long long v12 = v20;
        }
        else {
          long long v12 = *(const void **)(a1 + 248);
        }
        memmove(p_p, v12, v10);
      }
      strcpy((char *)p_p + v10, ":in_place_var_constraint");
      operations_research::sat::Constraint::WithName((uint64_t *)&v30, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v24)
      {
        long long v25 = v24;
        operator delete(v24);
      }
      if (v22)
      {
        int v23 = v22;
        operator delete(v22);
      }
      if (v28)
      {
        size_t v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      ++v6;
      int8x8_t v2 = *(uint64_t **)(a1 + 192);
      uint64_t v13 = *(void *)(a1 + 200) - (void)v2;
      v5 += 2;
    }
    while (v6 < v13 >> 4);
    if ((unint64_t)v13 > 0x10)
    {
      uint64_t v14 = *v2;
      int v32 = *((_DWORD *)v2 + 2);
      uint64_t v31 = v14;
      LODWORD(v14) = *((_DWORD *)v2 + 6);
      uint64_t v33 = v2[2];
      int v34 = v14;
      operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v31, 2, (uint64_t)&v26);
      uint64_t v15 = operations_research::sat::CpModelBuilder::NewConstant(a2, 1);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v22, (uint64_t)v15, v16);
      v36[0] = (uint64_t)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)&v26, (const operations_research::sat::LinearExpr *)&v22);
      if (*(char *)(a1 + 271) >= 0) {
        size_t v17 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        size_t v17 = *(void *)(a1 + 256);
      }
      uint64_t v18 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v17)
      {
        if (*(char *)(a1 + 271) >= 0) {
          int v19 = v20;
        }
        else {
          int v19 = *(const void **)(a1 + 248);
        }
        memmove(v18, v19, v17);
      }
      strcpy((char *)v18 + v17, ":mutex_inplace");
      operations_research::sat::Constraint::WithName(v36, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v24)
      {
        long long v25 = v24;
        operator delete(v24);
      }
      if (v22)
      {
        int v23 = v22;
        operator delete(v22);
      }
      if (v28)
      {
        size_t v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
    }
  }
}

void sub_23CB3CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a24);
  _Unwind_Resume(a1);
}

BOOL CpAllocGraph::GetTensorLiverange(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(a1 + 408), &v6);
  if (v4) {
    *a3 = *(_OWORD *)(v4 + 3);
  }
  return v4 != 0;
}

BOOL CpAllocGraph::GetInPlacePorts(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v7 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(a1 + 488), &v7);
  uint64_t v5 = v4;
  if (v4 && v4 + 3 != a3) {
    std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a3, (void *)v4[3], v4 + 4);
  }
  return v5 != 0;
}

BOOL CpAllocGraph::GetLayerBehavior(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)(a1 + 448), &v6);
  if (v4) {
    *a3 = v4[3];
  }
  return v4 != 0;
}

BOOL CpAllocGraph::GetLayerSchedule(CpAllocGraph *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 32, &v6);
  if (v4) {
    *a3 = v4[3];
  }
  return v4 != 0;
}

void CpAllocGraph::GetLayers(CpAllocGraph *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = (char *)this + 8;
  unint64_t v6 = *(char **)this;
  if (*(CpAllocGraph **)this != (CpAllocGraph *)((char *)this + 8))
  {
    do
    {
      unint64_t v7 = *((void *)v6 + 4);
      uint64_t v27 = (CpAllocGraph *)v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v27))
      {
        uint64_t v9 = (unint64_t *)a3[1];
        unint64_t v8 = a3[2];
        if ((unint64_t)v9 >= v8)
        {
          unint64_t v11 = (unint64_t *)*a3;
          uint64_t v12 = ((uint64_t)v9 - *a3) >> 3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a3 + 2), v15);
            unint64_t v11 = (unint64_t *)*a3;
            uint64_t v9 = (unint64_t *)a3[1];
          }
          else
          {
            uint64_t v16 = 0;
          }
          size_t v17 = (unint64_t *)&v16[8 * v12];
          *size_t v17 = v7;
          size_t v10 = v17 + 1;
          while (v9 != v11)
          {
            unint64_t v18 = *--v9;
            *--size_t v17 = v18;
          }
          *a3 = (uint64_t)v17;
          a3[1] = (uint64_t)v10;
          a3[2] = (uint64_t)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *uint64_t v9 = v7;
          size_t v10 = v9 + 1;
        }
        a3[1] = (uint64_t)v10;
      }
      int v19 = (char *)*((void *)v6 + 1);
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          int v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (char *)*((void *)v6 + 2);
          BOOL v21 = *(void *)v20 == (void)v6;
          unint64_t v6 = v20;
        }
        while (!v21);
      }
      unint64_t v6 = v20;
    }
    while (v20 != v5);
  }
  if (a2)
  {
    uint64_t v22 = *a3;
    int v23 = (unint64_t *)a3[1];
    unint64_t v24 = 126 - 2 * __clz(((uint64_t)v23 - *a3) >> 3);
    BOOL v21 = v23 == (unint64_t *)*a3;
    uint64_t v27 = this;
    if (v21) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(v22, v23, &v27, v25, 1);
  }
}

void sub_23CB3CECC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(uint64_t result, unint64_t *a2, void *a3, uint64_t a4, char a5)
{
  size_t v10 = (unint64_t *)result;
LABEL_2:
  size_t v144 = a2 - 1;
  while (1)
  {
    unint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v10;
    uint64_t v13 = a2 - v10;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unint64_t v65 = *(a2 - 1);
          unint64_t v151 = *v11;
          unint64_t v152 = v65;
          uint64_t v66 = (void *)(*a3 + 256);
          uint64_t v67 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v66, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v66, &v151);
          if (v67[3] < *(void *)(result + 24))
          {
            unint64_t v68 = *v11;
            *unint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v68;
          }
          break;
        case 3:
          uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v11, v11 + 1, v144, a3);
          break;
        case 4:
          uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v11, v11 + 1, v11 + 2, v144, a3);
          break;
        case 5:
          uint64_t result = (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(v11, v11 + 1, v11 + 2, v11 + 3, v144, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    uint64_t v150 = v11;
    if (!a4)
    {
      if (v11 == a2) {
        return result;
      }
      unint64_t v142 = v12;
      uint64_t v143 = v13;
      int64_t v83 = (unint64_t)(v13 - 2) >> 1;
      int64_t v84 = v83;
      do
      {
        int64_t v85 = v84;
        if (v83 >= v84)
        {
          uint64_t v86 = (2 * v84) | 1;
          std::string v87 = &v11[v86];
          uint64_t v88 = 2 * v84 + 2;
          int64_t v145 = v84;
          if (v88 < v13)
          {
            unint64_t v89 = *v87;
            unint64_t v151 = v87[1];
            unint64_t v152 = v89;
            uint64_t v90 = (void *)(*a3 + 256);
            uint64_t v91 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v90, &v152);
            BOOL v92 = v91[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v90, &v151)[3];
            int64_t v85 = v145;
            if (v92) {
              ++v87;
            }
            unint64_t v11 = v150;
            if (v92) {
              uint64_t v86 = v88;
            }
          }
          uint64_t v93 = &v11[v85];
          unint64_t v94 = *v87;
          unint64_t v151 = *v93;
          unint64_t v152 = v94;
          int v95 = (void *)(*a3 + 256);
          uint64_t v96 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v95, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v95, &v151);
          int64_t v85 = v145;
          if (v96[3] >= *(void *)(result + 24))
          {
            unint64_t v148 = *v93;
            do
            {
              std::string::size_type v97 = v87;
              unint64_t *v93 = *v87;
              if (v83 < v86) {
                break;
              }
              uint64_t v98 = (2 * v86) | 1;
              std::string v87 = &v150[v98];
              uint64_t v99 = 2 * v86 + 2;
              if (v99 < v13)
              {
                unint64_t v100 = *v87;
                unint64_t v151 = v87[1];
                unint64_t v152 = v100;
                uint64_t v101 = (void *)(*a3 + 256);
                uint64_t v102 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v101, &v152);
                uint64_t v103 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v101, &v151);
                uint64_t v104 = v102[3];
                uint64_t v105 = v103[3];
                if (v104 < v105) {
                  ++v87;
                }
                uint64_t v13 = v143;
                if (v104 < v105) {
                  uint64_t v98 = v99;
                }
              }
              unint64_t v106 = *v87;
              unint64_t v151 = v148;
              unint64_t v152 = v106;
              uint64_t v107 = (void *)(*a3 + 256);
              uint64_t v108 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v107, &v152);
              uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v107, &v151);
              uint64_t v109 = v108[3];
              uint64_t v93 = v97;
              uint64_t v86 = v98;
            }
            while (v109 >= *(void *)(result + 24));
            unint64_t v11 = v150;
            *std::string::size_type v97 = v148;
            int64_t v85 = v145;
          }
        }
        int64_t v84 = v85 - 1;
      }
      while (v85);
      uint64_t v110 = v142 >> 3;
      while (2)
      {
        uint64_t v111 = 0;
        unint64_t v146 = *v11;
        uint64_t v149 = a2;
        uint64_t v112 = v11;
        do
        {
          std::string::size_type v113 = &v112[v111 + 1];
          uint64_t v114 = (2 * v111) | 1;
          uint64_t v115 = 2 * v111 + 2;
          if (v115 < v110)
          {
            unint64_t v116 = *v113;
            unint64_t v151 = v113[1];
            unint64_t v152 = v116;
            uint64_t v117 = (void *)(*a3 + 256);
            uint64_t v118 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v117, &v152);
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v117, &v151);
            if (v118[3] < *(void *)(result + 24))
            {
              ++v113;
              uint64_t v114 = v115;
            }
          }
          unint64_t *v112 = *v113;
          uint64_t v112 = v113;
          uint64_t v111 = v114;
        }
        while (v114 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
        uint64_t v119 = v149 - 1;
        if (v113 != v149 - 1)
        {
          unint64_t *v113 = *v119;
          uint64_t v120 = v149 - 1;
          unint64_t *v119 = v146;
          unint64_t v11 = v150;
          uint64_t v121 = (char *)v113 - (char *)v150 + 8;
          if (v121 >= 9)
          {
            unint64_t v122 = (((unint64_t)v121 >> 3) - 2) >> 1;
            uint64_t v123 = &v150[v122];
            unint64_t v124 = *v123;
            unint64_t v151 = *v113;
            unint64_t v152 = v124;
            BOOL v125 = (void *)(*a3 + 256);
            int v126 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v125, &v152);
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v125, &v151);
            if (v126[3] < *(void *)(result + 24))
            {
              unint64_t v127 = *v113;
              do
              {
                std::string::size_type v128 = v123;
                unint64_t *v113 = *v123;
                if (!v122) {
                  break;
                }
                unint64_t v122 = (v122 - 1) >> 1;
                uint64_t v123 = &v150[v122];
                unint64_t v129 = *v123;
                unint64_t v151 = v127;
                unint64_t v152 = v129;
                uint64_t v130 = (void *)(*a3 + 256);
                uint64_t v131 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v130, &v152);
                uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v130, &v151);
                std::string::size_type v113 = v128;
              }
              while (v131[3] < *(void *)(result + 24));
              unint64_t *v128 = v127;
LABEL_110:
              unint64_t v11 = v150;
            }
          }
          BOOL v92 = v110-- <= 2;
          a2 = v120;
          if (v92) {
            return result;
          }
          continue;
        }
        break;
      }
      uint64_t v120 = v149 - 1;
      unint64_t *v113 = v146;
      goto LABEL_110;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = &v11[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v15, v11, v144, a3);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v11, v15, v144, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v11 + 1, v15 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v11 + 2, &v11[v14 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v15 - 1, v15, &v11[v14 + 1], a3);
      unint64_t v16 = *v11;
      *unint64_t v11 = *v15;
      unint64_t *v15 = v16;
    }
    --a4;
    if ((a5 & 1) != 0
      || (unint64_t v17 = *(v11 - 1),
          unint64_t v151 = *v11,
          unint64_t v152 = v17,
          unint64_t v18 = (void *)(*a3 + 256),
          int v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v152), v19[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v151)[3]))
    {
      uint64_t v20 = 0;
      unint64_t v21 = *v11;
      do
      {
        unint64_t v22 = v11[v20 + 1];
        unint64_t v151 = v21;
        unint64_t v152 = v22;
        int v23 = (void *)(*a3 + 256);
        unint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v23, &v152);
        ++v20;
      }
      while (v24[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v23, &v151)[3]);
      uint64_t v25 = &v11[v20];
      long long v26 = a2;
      if (v20 == 1)
      {
        long long v26 = a2;
        do
        {
          if (v25 >= v26) {
            break;
          }
          unint64_t v30 = *--v26;
          unint64_t v151 = v21;
          unint64_t v152 = v30;
          uint64_t v31 = (void *)(*a3 + 256);
          int v32 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v31, &v152);
        }
        while (v32[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v31, &v151)[3]);
      }
      else
      {
        do
        {
          unint64_t v27 = *--v26;
          unint64_t v151 = v21;
          unint64_t v152 = v27;
          std::string::size_type v28 = (void *)(*a3 + 256);
          size_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v28, &v152);
        }
        while (v29[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v28, &v151)[3]);
      }
      if (v25 >= v26)
      {
        uint64_t v42 = v25 - 1;
      }
      else
      {
        uint64_t v33 = &v11[v20];
        int v34 = v26;
        do
        {
          unint64_t v35 = *v33;
          *uint64_t v33 = *v34;
          *int v34 = v35;
          do
          {
            unint64_t v36 = v33[1];
            ++v33;
            unint64_t v151 = v21;
            unint64_t v152 = v36;
            uint64_t v37 = (void *)(*a3 + 256);
            uint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v37, &v152);
          }
          while (v38[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v37, &v151)[3]);
          do
          {
            unint64_t v39 = *--v34;
            unint64_t v151 = v21;
            unint64_t v152 = v39;
            uint64_t v40 = (void *)(*a3 + 256);
            uint64_t v41 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v40, &v152);
          }
          while (v41[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v40, &v151)[3]);
        }
        while (v33 < v34);
        uint64_t v42 = v33 - 1;
      }
      if (v42 != v150) {
        *uint64_t v150 = *v42;
      }
      *uint64_t v42 = v21;
      if (v25 < v26) {
        goto LABEL_33;
      }
      BOOL v43 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v150, v42, a3);
      size_t v10 = v42 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v42 + 1, a2, a3);
      if (result)
      {
        a2 = v42;
        size_t v10 = v150;
        if (v43) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v43)
      {
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(v150, v42, a3, a4, a5 & 1);
        a5 = 0;
        size_t v10 = v42 + 1;
      }
    }
    else
    {
      size_t v10 = v11;
      unint64_t v44 = *v11;
      unint64_t v151 = *v144;
      unint64_t v152 = v44;
      uint64_t v45 = (void *)(*a3 + 256);
      uint64_t v46 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v45, &v152);
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v45, &v151);
      if (v46[3] >= *(void *)(result + 24))
      {
        unint64_t v50 = v10 + 1;
        do
        {
          size_t v10 = v50;
          if (v50 >= a2) {
            break;
          }
          ++v50;
          unint64_t v151 = *v10;
          unint64_t v152 = v44;
          uint64_t v51 = (void *)(*a3 + 256);
          uint64_t v52 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v51, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v51, &v151);
        }
        while (v52[3] >= *(void *)(result + 24));
      }
      else
      {
        do
        {
          unint64_t v47 = v10[1];
          ++v10;
          unint64_t v151 = v47;
          unint64_t v152 = v44;
          uint64_t v48 = (void *)(*a3 + 256);
          uint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v48, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v48, &v151);
        }
        while (v49[3] >= *(void *)(result + 24));
      }
      int v53 = a2;
      if (v10 < a2)
      {
        int v53 = a2;
        do
        {
          unint64_t v54 = *--v53;
          unint64_t v151 = v54;
          unint64_t v152 = v44;
          int v55 = (void *)(*a3 + 256);
          uint64_t v56 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v55, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v55, &v151);
        }
        while (v56[3] < *(void *)(result + 24));
      }
      while (v10 < v53)
      {
        unint64_t v57 = *v10;
        *size_t v10 = *v53;
        *int v53 = v57;
        do
        {
          unint64_t v58 = v10[1];
          ++v10;
          unint64_t v151 = v58;
          unint64_t v152 = v44;
          unint64_t v59 = (void *)(*a3 + 256);
          uint64_t v60 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v59, &v152);
        }
        while (v60[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v59, &v151)[3]);
        do
        {
          unint64_t v61 = *--v53;
          unint64_t v151 = v61;
          unint64_t v152 = v44;
          unint64_t v62 = (void *)(*a3 + 256);
          uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v62, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v62, &v151);
        }
        while (v63[3] < *(void *)(result + 24));
      }
      long long v64 = v10 - 1;
      BOOL v5 = v10 - 1 >= v150;
      BOOL v6 = v10 - 1 == v150;
      if (v10 - 1 != v150) {
        *uint64_t v150 = *v64;
      }
      a5 = 0;
      *long long v64 = v44;
    }
  }
  uint64_t v69 = v11 + 1;
  BOOL v71 = v11 == a2 || v69 == a2;
  if (a5)
  {
    if (!v71)
    {
      uint64_t v72 = 0;
      unint64_t v73 = v11;
      do
      {
        unint64_t v75 = *v73;
        unint64_t v74 = v73[1];
        unint64_t v73 = v69;
        unint64_t v151 = v75;
        unint64_t v152 = v74;
        uint64_t v76 = (void *)(*a3 + 256);
        std::string::size_type v77 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v76, &v152);
        uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v76, &v151);
        if (v77[3] < *(void *)(result + 24))
        {
          unint64_t v78 = *v73;
          uint64_t v79 = v72;
          while (1)
          {
            *(unint64_t *)((char *)v11 + v79 + 8) = *(unint64_t *)((char *)v11 + v79);
            if (!v79) {
              break;
            }
            unint64_t v151 = *(unint64_t *)((char *)v11 + v79 - 8);
            unint64_t v152 = v78;
            uint64_t v80 = (void *)(*a3 + 256);
            uint64_t v81 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v80, &v152);
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v80, &v151);
            v79 -= 8;
            if (v81[3] >= *(void *)(result + 24))
            {
              std::string::size_type v82 = (unint64_t *)((char *)v11 + v79 + 8);
              goto LABEL_74;
            }
          }
          std::string::size_type v82 = v11;
LABEL_74:
          unint64_t *v82 = v78;
        }
        uint64_t v69 = v73 + 1;
        v72 += 8;
      }
      while (v73 + 1 != a2);
    }
  }
  else if (!v71)
  {
    do
    {
      unint64_t v133 = *v11;
      unint64_t v132 = v11[1];
      unint64_t v11 = v69;
      unint64_t v151 = v133;
      unint64_t v152 = v132;
      uint64_t v134 = (void *)(*a3 + 256);
      uint64_t v135 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v134, &v152);
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v134, &v151);
      if (v135[3] < *(void *)(result + 24))
      {
        unint64_t v136 = *v11;
        uint64_t v137 = v11;
        do
        {
          uint64_t v138 = v137;
          unint64_t v139 = *--v137;
          unint64_t *v138 = v139;
          unint64_t v151 = *(v138 - 2);
          unint64_t v152 = v136;
          int v140 = (void *)(*a3 + 256);
          int v141 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v140, &v152);
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v140, &v151);
        }
        while (v141[3] < *(void *)(result + 24));
        unint64_t *v137 = v136;
      }
      uint64_t v69 = v11 + 1;
    }
    while (v11 + 1 != a2);
  }
  return result;
}

void *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, void *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a2, a3, a4, a6);
  unint64_t v12 = *a5;
  unint64_t v29 = *a4;
  unint64_t v30 = v12;
  uint64_t v13 = (void *)(*a6 + 256);
  unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v30);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v29);
  if (v14[3] < result[3])
  {
    unint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    unint64_t v17 = *a4;
    unint64_t v29 = *a3;
    unint64_t v30 = v17;
    unint64_t v18 = (void *)(*a6 + 256);
    int v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v30);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v29);
    if (v19[3] < result[3])
    {
      unint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      unint64_t v21 = *a3;
      unint64_t v29 = *a2;
      unint64_t v30 = v21;
      unint64_t v22 = (void *)(*a6 + 256);
      int v23 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v22, &v30);
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v22, &v29);
      if (v23[3] < result[3])
      {
        unint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        unint64_t v25 = *a2;
        unint64_t v29 = *a1;
        unint64_t v30 = v25;
        long long v26 = (void *)(*a6 + 256);
        unint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v30);
        uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v29);
        if (v27[3] < result[3])
        {
          unint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

void *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v27 = *a1;
  unint64_t v28 = v8;
  uint64_t v9 = (void *)(*a4 + 256);
  size_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v28);
  unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v27);
  unint64_t v12 = *a3;
  if (v10[3] >= v11[3])
  {
    unint64_t v27 = *a2;
    unint64_t v28 = v12;
    unint64_t v17 = (void *)(*a4 + 256);
    unint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v28);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v27);
    if (v18[3] < result[3])
    {
      unint64_t v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      unint64_t v20 = *a2;
      unint64_t v27 = *a1;
      unint64_t v28 = v20;
      unint64_t v21 = (void *)(*a4 + 256);
      unint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v28);
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v27);
      if (v22[3] < result[3])
      {
        unint64_t v23 = *a1;
        *a1 = *a2;
        *a2 = v23;
      }
    }
  }
  else
  {
    unint64_t v27 = *a2;
    unint64_t v28 = v12;
    uint64_t v13 = (void *)(*a4 + 256);
    unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v28);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v27);
    unint64_t v16 = *a1;
    if (v14[3] >= result[3])
    {
      *a1 = *a2;
      *a2 = v16;
      unint64_t v24 = *a3;
      unint64_t v27 = v16;
      unint64_t v28 = v24;
      unint64_t v25 = (void *)(*a4 + 256);
      long long v26 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v25, &v28);
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v25, &v27);
      if (v26[3] >= result[3]) {
        return result;
      }
      unint64_t v16 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = *(a2 - 1);
      unint64_t v24 = *a1;
      unint64_t v25 = v8;
      uint64_t v9 = (void *)(*a3 + 256);
      size_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v25);
      if (v10[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v24)[3])
      {
        unint64_t v11 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v12 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *v13;
    unint64_t v24 = *v12;
    unint64_t v25 = v16;
    unint64_t v17 = (void *)(*a3 + 256);
    unint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v25);
    if (v18[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v24)[3])
    {
      unint64_t v19 = *v13;
      uint64_t v20 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v20 + 24) = *(unint64_t *)((char *)a1 + v20 + 16);
        if (v20 == -16) {
          break;
        }
        unint64_t v24 = *(unint64_t *)((char *)a1 + v20 + 8);
        unint64_t v25 = v19;
        unint64_t v21 = (void *)(*a3 + 256);
        unint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v25);
        v20 -= 8;
        if (v22[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v24)[3])
        {
          unint64_t v23 = (unint64_t *)((char *)a1 + v20 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v23 = a1;
LABEL_12:
      *unint64_t v23 = v19;
      if (++v15 == 8) {
        return v13 + 1 == a2;
      }
    }
    unint64_t v12 = v13;
    v14 += 8;
    if (++v13 == a2) {
      return 1;
    }
  }
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, void *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a2, a3, a5);
  unint64_t v10 = *a4;
  unint64_t v23 = *a3;
  unint64_t v24 = v10;
  unint64_t v11 = (void *)(*a5 + 256);
  unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v11, &v24);
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v11, &v23);
  if (v12[3] < result[3])
  {
    unint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    unint64_t v15 = *a3;
    unint64_t v23 = *a2;
    unint64_t v24 = v15;
    unint64_t v16 = (void *)(*a5 + 256);
    unint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v24);
    BOOL result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v23);
    if (v17[3] < result[3])
    {
      unint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      unint64_t v19 = *a2;
      unint64_t v23 = *a1;
      unint64_t v24 = v19;
      uint64_t v20 = (void *)(*a5 + 256);
      unint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v20, &v24);
      BOOL result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v20, &v23);
      if (v21[3] < result[3])
      {
        unint64_t v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  BOOL v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    BOOL v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    unint64_t v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<unsigned long>::__node_insert_multi(v5, v8);
          unint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    BOOL result = (uint64_t **)std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(v5, a2 + 4);
      unint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_23CB3E2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        BOOL v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    BOOL v5 = v3 + 1;
  }
  else
  {
    BOOL v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

void *std::__tree<unsigned long>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    unint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        unint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          BOOL result = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unint64_t v3 = (void *)result[1])
      {
        do
        {
          BOOL result = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int8x8_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(uint64_t **a1, unint64_t *a2)
{
  unint64_t v4 = (uint64_t *)operator new(0x28uLL);
  unint64_t v5 = *a2;
  v4[4] = *a2;
  uint64_t v6 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        unint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void ORToolsChainScheduleVariable::ORToolsChainScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, const void **a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,operations_research::Domain *a21)
{
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  uint64_t v67 = v25;
  if (*((char *)a4 + 23) >= 0) {
    size_t v26 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v26 = (size_t)a4[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v28 = a4;
    }
    else {
      unint64_t v28 = *a4;
    }
    memmove(p_p, v28, v26);
  }
  strcpy((char *)p_p + v26, ":chain_begin");
  *(void *)a1 = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 8) = v29;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v30;
  if (*((char *)a4 + 23) >= 0) {
    size_t v31 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v31 = (size_t)a4[1];
  }
  int v32 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v31 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v33 = a4;
    }
    else {
      uint64_t v33 = *a4;
    }
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, ":chain_time");
  *(void *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 24) = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v35;
  if (*((char *)a4 + 23) >= 0) {
    size_t v36 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v36 = (size_t)a4[1];
  }
  uint64_t v37 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v36 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v36)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v38 = a4;
    }
    else {
      uint64_t v38 = *a4;
    }
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, ":chain_end");
  *(void *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 40) = v39;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ORToolsChainScheduleVariable::CreateReadEndVariables(a2, a4, (uint64_t)(a6[1] - *a6) >> 3, a21, (uint64_t **)(a1 + 48));
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v40;
  if (*((char *)a4 + 23) >= 0) {
    size_t v41 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v41 = (size_t)a4[1];
  }
  uint64_t v42 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v41 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v41)
  {
    if (*((char *)a4 + 23) >= 0) {
      BOOL v43 = a4;
    }
    else {
      BOOL v43 = *a4;
    }
    memmove(v42, v43, v41);
  }
  strcpy((char *)v42 + v41, ":producer_compute_end");
  *(void *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 80) = v44;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v45;
  if (*((char *)a4 + 23) >= 0) {
    size_t v46 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v46 = (size_t)a4[1];
  }
  unint64_t v47 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v46 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v46)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v48 = a4;
    }
    else {
      uint64_t v48 = *a4;
    }
    memmove(v47, v48, v46);
  }
  strcpy((char *)v47 + v46, ":prodcuer_write_end");
  *(void *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 96) = v49;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ORToolsChainScheduleVariable::CreateReadEndVariables(a2, (const void **)a13, (uint64_t)(a15[1] - *a15) >> 3, a21, (uint64_t **)(a1 + 104));
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v50;
  if (*(char *)(a13 + 23) >= 0) {
    size_t v51 = *(unsigned __int8 *)(a13 + 23);
  }
  else {
    size_t v51 = *(void *)(a13 + 8);
  }
  uint64_t v52 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v51 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v51)
  {
    if (*(char *)(a13 + 23) >= 0) {
      int v53 = (const void *)a13;
    }
    else {
      int v53 = *(const void **)a13;
    }
    memmove(v52, v53, v51);
  }
  strcpy((char *)v52 + v51, ":consumer_compute_end");
  *(void *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 136) = v54;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v55;
  if (*(char *)(a13 + 23) >= 0) {
    size_t v56 = *(unsigned __int8 *)(a13 + 23);
  }
  else {
    size_t v56 = *(void *)(a13 + 8);
  }
  unint64_t v57 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v56 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v56)
  {
    if (*(char *)(a13 + 23) >= 0) {
      unint64_t v58 = (const void *)a13;
    }
    else {
      unint64_t v58 = *(const void **)a13;
    }
    memmove(v57, v58, v56);
  }
  strcpy((char *)v57 + v56, ":consumer_write_end");
  *(void *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 152) = v59;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v66 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  uint64_t v67 = v60;
  if (*((char *)a4 + 23) >= 0) {
    size_t v61 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v61 = (size_t)a4[1];
  }
  unint64_t v62 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v61 + 29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v61)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v63 = a4;
    }
    else {
      uint64_t v63 = *a4;
    }
    memmove(v62, v63, v61);
  }
  strcpy((char *)v62 + v61, ":pipeline_stall_overhead_time");
  *(void *)(a1 + 160) = operations_research::sat::BoolVar::WithName((int *)&v66, &__p);
  *(void *)(a1 + 168) = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ORToolsChainScheduleVariable::CreateInputL2AccessVariables(a6, (void *)(a1 + 176));
  operator new();
}

{
  ORToolsChainScheduleVariable::ORToolsChainScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
}

void sub_23CB3ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 343) < 0) {
    operator delete(*v24);
  }
  size_t v26 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 288) = v26;
    operator delete(v26);
  }
  unint64_t v27 = *v23;
  if (*v23)
  {
    *(void *)(v21 + 264) = v27;
    operator delete(v27);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v21 + 248), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v21 + 240), 0);
  std::string __p = a15;
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v21 + 208), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v21 + 200), 0);
  std::string __p = a10;
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v28 = *a11;
  if (*a11)
  {
    *(void *)(v21 + 112) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *a12;
  if (*a12)
  {
    *(void *)(v21 + 56) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_23CB3EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x23CB3EFA8);
  }
  JUMPOUT(0x23CB3EFACLL);
}

void ORToolsChainScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  uint64_t v56 = v10;
  if (*((char *)a2 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *a2;
    }
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  uint64_t v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  unint64_t v18 = (unint64_t)a5[2];
  unint64_t v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = ((char *)v19 - (char *)*a5) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v18 - (void)*a5;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    }
    else {
      uint64_t v25 = 0;
    }
    size_t v26 = (uint64_t *)&v25[16 * v21];
    unint64_t v27 = &v25[16 * v24];
    uint64_t *v26 = v16;
    v26[1] = v17;
    uint64_t v20 = v26 + 2;
    uint64_t v29 = *a5;
    unint64_t v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        uint64_t v30 = *(v28 - 2);
        v28 -= 2;
        int v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      unint64_t v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *unint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3 == 2)
  {
    uint64_t v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    uint64_t v56 = v32;
    if (*((char *)a2 + 23) >= 0) {
      size_t v33 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v33 = (size_t)a2[1];
    }
    uint64_t v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v35 = a2;
      }
      else {
        uint64_t v35 = *a2;
      }
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    uint64_t v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    size_t v41 = a5[1];
    unint64_t v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      uint64_t v43 = ((char *)v41 - (char *)*a5) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v40 - (void)*a5;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      }
      else {
        unint64_t v47 = 0;
      }
      uint64_t v48 = (uint64_t *)&v47[16 * v43];
      uint64_t v49 = &v47[16 * v46];
      *uint64_t v48 = v38;
      v48[1] = v39;
      uint64_t v42 = v48 + 2;
      size_t v51 = *a5;
      uint64_t v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          uint64_t v52 = *(v50 - 2);
          v50 -= 2;
          int v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        uint64_t v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      uint64_t *v41 = v36;
      v41[1] = v37;
      uint64_t v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB3F318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsChainScheduleVariable::CreateInputL2AccessVariables(void *a1@<X2>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1] != *a1) {
    operator new();
  }
}

void sub_23CB3F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsChainScheduleVariable::~ORToolsChainScheduleVariable(ORToolsChainScheduleVariable *this)
{
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  int8x8_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 31, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 30, 0);
  uint64_t v6 = (void **)((char *)this + 216);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 26, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 25, 0);
  uint64_t v6 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
}

void ORToolsChainScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, void *a4, uint64_t a5, const operations_research::Domain *a6)
{
  *(void *)v391 = a3;
  v395 = a2;
  uint64_t v415 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 208);
  uint64_t v393 = *(void *)(v7 + 256);
  uint64_t v394 = *(void *)(v7 + 264);
  operations_research::sat::BoolVar::BoolVar((uint64_t)&v406, ~v394, v393);
  long long v8 = *(_OWORD *)&v406.__r_.__value_.__l.__data_;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 16), *(void *)(a1 + 24));
  __str.__r_.__value_.__r.__words[0] = *(void *)(a1 + 32);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __str.__r_.__value_.__r.__words[2] = *(void *)a1;
  int v411 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v409.__r_.__value_.__l.__data_ = xmmword_23CE7E330;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__str, 2, (uint64_t *)&v409, 2, (uint64_t)&v412);
  v403.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0) {
    size_t v9 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v9 = *(void *)(a1 + 328);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*(char *)(a1 + 343) >= 0) {
      size_t v11 = (const void *)(a1 + 320);
    }
    else {
      size_t v11 = *(const void **)(a1 + 320);
    }
    memmove(p_p, v11, v9);
  }
  v392 = (const void *)(a1 + 320);
  strcpy((char *)p_p + v9, ":chain_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v403, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = operations_research::sat::CpModelBuilder::NewConstant(v395, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, v12, v13, (uint64_t)v14, v15, *(void *)(a1 + 32), *(void *)(a1 + 40), v16, v8, SDWORD2(v8));
  uint64_t v18 = *(void *)(a1 + 176);
  if (*(void *)(a1 + 184) != v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(void *)(v18 + 8 * v20);
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      size_t v26 = (uint64_t *)(*(void *)(a1 + 48) + v19);
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      v403.__r_.__value_.__r.__words[0] = *(void *)(v23 + 224);
      LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v23 + 232);
      uint64_t v29 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 4);
      *(_OWORD *)uint64_t v29 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
      v29[2] = v393;
      uint64_t v30 = v395;
      *((_DWORD *)v29 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v30, v21, v22, v24, v25, v27, v28, v33, (uint64_t)BooleanAnd, v32);
      v409.__r_.__value_.__l.__size_ = v34;
      if (*(char *)(a1 + 343) >= 0) {
        size_t v35 = *(unsigned __int8 *)(a1 + 343);
      }
      else {
        size_t v35 = *(void *)(a1 + 328);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v35 + 43);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if (*(char *)(a1 + 343) >= 0) {
          uint64_t v37 = v392;
        }
        else {
          uint64_t v37 = *(const void **)(a1 + 320);
        }
        memmove(p_str, v37, v35);
      }
      strcpy((char *)p_str + v35, ":chain_producer_resident_read_time_interval");
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &__p;
      }
      else {
        uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v40 = std::string::append(&__str, (const std::string::value_type *)v38, size);
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v412.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
      if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      uint64_t v42 = *(void *)a1;
      uint64_t v43 = *(void *)(a1 + 8);
      uint64_t v44 = *(void *)(*(void *)(a1 + 176) + 8 * v20);
      uint64_t v45 = *(void *)(v44 + 32);
      uint64_t v46 = *(void *)(v44 + 40);
      unint64_t v47 = (uint64_t *)(*(void *)(a1 + 48) + v19);
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      v403.__r_.__value_.__r.__words[0] = *(void *)(v44 + 240);
      LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v44 + 248);
      uint64_t v50 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v50 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v50 + 4);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
      v50[2] = v393;
      size_t v51 = v395;
      *((_DWORD *)v50 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      uint64_t v52 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v51, v42, v43, v45, v46, v49, v48, v54, (uint64_t)v52, v53);
      v409.__r_.__value_.__l.__size_ = v55;
      if (*(char *)(a1 + 343) >= 0) {
        size_t v56 = *(unsigned __int8 *)(a1 + 343);
      }
      else {
        size_t v56 = *(void *)(a1 + 328);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v56 + 46);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v57 = &__str;
      }
      else {
        unint64_t v57 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v56)
      {
        if (*(char *)(a1 + 343) >= 0) {
          unint64_t v58 = v392;
        }
        else {
          unint64_t v58 = *(const void **)(a1 + 320);
        }
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, ":chain_producer_nonresident_read_time_interval");
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v59 = &__p;
      }
      else {
        uint64_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v60 = __p.__r_.__value_.__l.__size_;
      }
      size_t v61 = std::string::append(&__str, (const std::string::value_type *)v59, v60);
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v412.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
      if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v20;
      uint64_t v18 = *(void *)(a1 + 176);
      v19 += 16;
    }
    while (v20 < (*(void *)(a1 + 184) - v18) >> 3);
  }
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(void *)a1, *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 200) + 56), *(void *)(*(void *)(a1 + 200) + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), v17, v393, v394);
  v412.__r_.__value_.__l.__size_ = v63;
  if (*(char *)(a1 + 343) >= 0) {
    size_t v64 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v64 = *(void *)(a1 + 328);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v64 + 37);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v65 = &v406;
  }
  else {
    unint64_t v65 = (std::string *)v406.__r_.__value_.__r.__words[0];
  }
  if (v64)
  {
    if (*(char *)(a1 + 343) >= 0) {
      uint64_t v66 = v392;
    }
    else {
      uint64_t v66 = *(const void **)(a1 + 320);
    }
    memmove(v65, v66, v64);
  }
  strcpy((char *)v65 + v64, ":chain_producer_compute_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(void *)a1, *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 208) + 96), *(void *)(*(void *)(a1 + 208) + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), v67, v393, v394);
  v412.__r_.__value_.__l.__size_ = v68;
  if (*(char *)(a1 + 343) >= 0) {
    size_t v69 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v69 = *(void *)(a1 + 328);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v69 + 30);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v70 = &v406;
  }
  else {
    int v70 = (std::string *)v406.__r_.__value_.__r.__words[0];
  }
  if (v69)
  {
    if (*(char *)(a1 + 343) >= 0) {
      BOOL v71 = v392;
    }
    else {
      BOOL v71 = *(const void **)(a1 + 320);
    }
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, ":chain_producer_write_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  uint64_t v73 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) != v73)
  {
    uint64_t v74 = 0;
    unint64_t v75 = 0;
    do
    {
      if (v75 == *(void *)(a1 + 384))
      {
        __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(void *)a1, *(void *)(a1 + 8), *(void *)(*(void *)(v73 + 8 * v75) + 96), *(void *)(*(void *)(v73 + 8 * v75) + 104), *(void *)(*(void *)(a1 + 104) + v74), *(void *)(*(void *)(a1 + 104) + v74 + 8), v72, v393, v394);
        __p.__r_.__value_.__l.__size_ = v76;
        if (*(char *)(a1 + 367) >= 0) {
          size_t v77 = *(unsigned __int8 *)(a1 + 367);
        }
        else {
          size_t v77 = *(void *)(a1 + 352);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v412, v77 + 39);
        if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v78 = &v412;
        }
        else {
          unint64_t v78 = (std::string *)v412.__r_.__value_.__r.__words[0];
        }
        if (v77)
        {
          if (*(char *)(a1 + 367) >= 0) {
            uint64_t v79 = (const void *)(a1 + 344);
          }
          else {
            uint64_t v79 = *(const void **)(a1 + 344);
          }
          memmove(v78, v79, v77);
        }
        strcpy((char *)v78 + v77, ":chain_consumer_resident_read_interval_");
        std::to_string(&__str, v75);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v80 = &__str;
        }
        else {
          uint64_t v80 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v81 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v81 = __str.__r_.__value_.__l.__size_;
        }
        std::string::size_type v82 = std::string::append(&v412, (const std::string::value_type *)v80, v81);
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v406.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v406.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&__p, &v406);
        if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v412.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_177;
        }
        int64_t v84 = (void *)v412.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v85 = *(void *)a1;
        uint64_t v86 = *(void *)(a1 + 8);
        uint64_t v87 = *(void *)(v73 + 8 * v75);
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = *(void *)(v87 + 8);
        uint64_t v90 = (uint64_t *)(*(void *)(a1 + 104) + v74);
        uint64_t v91 = *v90;
        uint64_t v92 = v90[1];
        v403.__r_.__value_.__r.__words[0] = *(void *)(v87 + 224);
        LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v87 + 232);
        uint64_t v93 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v93 + 4);
        *(_OWORD *)uint64_t v93 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
        v93[2] = v393;
        unint64_t v94 = v395;
        *((_DWORD *)v93 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        int v95 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v94, v85, v86, v88, v89, v91, v92, v97, (uint64_t)v95, v96);
        v409.__r_.__value_.__l.__size_ = v98;
        if (*(char *)(a1 + 367) >= 0) {
          size_t v99 = *(unsigned __int8 *)(a1 + 367);
        }
        else {
          size_t v99 = *(void *)(a1 + 352);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v99 + 42);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v100 = &__str;
        }
        else {
          unint64_t v100 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v99)
        {
          if (*(char *)(a1 + 367) >= 0) {
            uint64_t v101 = (const void *)(a1 + 344);
          }
          else {
            uint64_t v101 = *(const void **)(a1 + 344);
          }
          memmove(v100, v101, v99);
        }
        qmemcpy(v390, "nonresident_read:chain_consumer_", sizeof(v390));
        strcpy((char *)v100 + v99, ":chain_consumer_nonresident_read_interval_");
        std::to_string(&__p, v75);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v102 = &__p;
        }
        else {
          uint64_t v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v103 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v104 = std::string::append(&__str, (const std::string::value_type *)v102, v103);
        long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v412.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
        if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v412.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        uint64_t v106 = *(void *)a1;
        uint64_t v107 = *(void *)(a1 + 8);
        uint64_t v108 = *(void *)(*(void *)(a1 + 216) + 8 * v75);
        uint64_t v109 = *(void *)(v108 + 48);
        uint64_t v110 = *(void *)(v108 + 56);
        uint64_t v111 = (uint64_t *)(*(void *)(a1 + 104) + v74);
        uint64_t v112 = *v111;
        uint64_t v113 = v111[1];
        v403.__r_.__value_.__r.__words[0] = *(void *)(v108 + 240);
        LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v108 + 248);
        uint64_t v114 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v114 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v114 + 4);
        *(_OWORD *)uint64_t v114 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
        v114[2] = v393;
        uint64_t v115 = v395;
        *((_DWORD *)v114 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
        unint64_t v116 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v115, v106, v107, v109, v110, v112, v113, v118, (uint64_t)v116, v117);
        v409.__r_.__value_.__l.__size_ = v119;
        if (*(char *)(a1 + 367) >= 0) {
          size_t v120 = *(unsigned __int8 *)(a1 + 367);
        }
        else {
          size_t v120 = *(void *)(a1 + 352);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v120 + 42);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v121 = &__str;
        }
        else {
          uint64_t v121 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v120)
        {
          if (*(char *)(a1 + 367) >= 0) {
            unint64_t v122 = (const void *)(a1 + 344);
          }
          else {
            unint64_t v122 = *(const void **)(a1 + 344);
          }
          memmove(v121, v122, v120);
        }
        uint64_t v123 = (_OWORD *)((char *)v121 + v120);
        *uint64_t v123 = v390[1];
        v123[1] = v390[0];
        strcpy(&v121[1].__r_.__value_.__s.__data_[v120 + 2], "t_read_interval_");
        std::to_string(&__p, v75);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v124 = &__p;
        }
        else {
          unint64_t v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v125 = __p.__r_.__value_.__l.__size_;
        }
        int v126 = std::string::append(&__str, (const std::string::value_type *)v124, v125);
        long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v412.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
        if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v412.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        int64_t v84 = (void *)v406.__r_.__value_.__r.__words[0];
        if (!v406.__r_.__value_.__r.__words[0]) {
          goto LABEL_177;
        }
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
      }
      operator delete(v84);
LABEL_177:
      ++v75;
      uint64_t v73 = *(void *)(a1 + 216);
      v74 += 16;
    }
    while (v75 < (*(void *)(a1 + 224) - v73) >> 3);
  }
  std::string::size_type v128 = (uint64_t *)(*(void *)(*(void *)(a1 + 240) + 32) + 16 * *(void *)(a1 + 384));
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(void *)a1, *(void *)(a1 + 8), *v128, v128[1], *(void *)(a1 + 128), *(void *)(a1 + 136), v72, v393, v394);
  v412.__r_.__value_.__l.__size_ = v129;
  if (*(char *)(a1 + 367) >= 0) {
    size_t v130 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v130 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v130 + 41);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v131 = &v406;
  }
  else {
    uint64_t v131 = (std::string *)v406.__r_.__value_.__r.__words[0];
  }
  if (v130)
  {
    if (*(char *)(a1 + 367) >= 0) {
      unint64_t v132 = (const void *)(a1 + 344);
    }
    else {
      unint64_t v132 = *(const void **)(a1 + 344);
    }
    memmove(v131, v132, v130);
  }
  *(void *)&v390[0] = a1 + 344;
  strcpy((char *)v131 + v130, ":chain_consumer_compute_resident_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  uint64_t v133 = *(void *)a1;
  uint64_t v134 = *(void *)(a1 + 8);
  uint64_t v135 = *(void *)(a1 + 248);
  uint64_t v136 = *(void *)v135;
  uint64_t v137 = *(void *)(v135 + 8);
  uint64_t v139 = *(void *)(a1 + 144);
  uint64_t v138 = *(void *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(void *)(v135 + 224);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v135 + 232);
  int v140 = operator new(0x20uLL);
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v140 + 4);
  *(_OWORD *)int v140 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v140[2] = v393;
  int v141 = v395;
  *((_DWORD *)v140 + 6) = v394;
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v140 + 4);
  unint64_t v142 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v141, v133, v134, v136, v137, v139, v138, v144, (uint64_t)v142, v143);
  __str.__r_.__value_.__l.__size_ = v145;
  if (*(char *)(a1 + 367) >= 0) {
    size_t v146 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v146 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v412, v146 + 44);
  if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v147 = &v412;
  }
  else {
    uint64_t v147 = (std::string *)v412.__r_.__value_.__r.__words[0];
  }
  if (v146)
  {
    if (*(char *)(a1 + 367) >= 0) {
      unint64_t v148 = *(const void **)&v390[0];
    }
    else {
      unint64_t v148 = *(const void **)(a1 + 344);
    }
    memmove(v147, v148, v146);
  }
  strcpy((char *)v147 + v146, ":chain_consumer_resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v412);
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  uint64_t v149 = *(void *)a1;
  uint64_t v150 = *(void *)(a1 + 8);
  uint64_t v151 = *(void *)(a1 + 248);
  uint64_t v152 = *(void *)(v151 + 48);
  uint64_t v153 = *(void *)(v151 + 56);
  uint64_t v154 = *(void *)(a1 + 144);
  uint64_t v155 = *(void *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(void *)(v151 + 240);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v151 + 248);
  std::string::size_type v156 = operator new(0x20uLL);
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v156 + 4);
  *(_OWORD *)std::string::size_type v156 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v156[2] = v393;
  uint64_t v157 = v395;
  *((_DWORD *)v156 + 6) = v394;
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v156 + 4);
  long long v158 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v157, v149, v150, v152, v153, v154, v155, v160, (uint64_t)v158, v159);
  __str.__r_.__value_.__l.__size_ = v161;
  if (*(char *)(a1 + 367) >= 0) {
    size_t v162 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v162 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v412, v162 + 47);
  if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v163 = &v412;
  }
  else {
    uint64_t v163 = (std::string *)v412.__r_.__value_.__r.__words[0];
  }
  if (v162)
  {
    if (*(char *)(a1 + 367) >= 0) {
      size_t v164 = *(const void **)&v390[0];
    }
    else {
      size_t v164 = *(const void **)(a1 + 344);
    }
    memmove(v163, v164, v162);
  }
  strcpy((char *)v163 + v162, ":chain_consumer_nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v412);
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  *(void *)&v390[1] = operations_research::sat::CpModelBuilder::NewIntVar(v395, a6);
  uint64_t v166 = v165;
  uint64_t v167 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v167)
  {
    uint64_t v168 = 0;
    unint64_t v169 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(v167 + v168), *(void *)(v167 + v168 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
      v404 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
      if (*(char *)(a1 + 343) >= 0) {
        size_t v170 = *(unsigned __int8 *)(a1 + 343);
      }
      else {
        size_t v170 = *(void *)(a1 + 328);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v409, v170 + 21);
      if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v171 = &v409;
      }
      else {
        std::string::size_type v171 = (std::string *)v409.__r_.__value_.__r.__words[0];
      }
      if (v170)
      {
        if (*(char *)(a1 + 343) >= 0) {
          v172 = v392;
        }
        else {
          v172 = *(const void **)(a1 + 320);
        }
        memmove(v171, v172, v170);
      }
      strcpy((char *)v171 + v170, ":chain_producer_read_");
      std::to_string(&v403, v169);
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v173 = &v403;
      }
      else {
        long long v173 = (std::string *)v403.__r_.__value_.__r.__words[0];
      }
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v174 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v174 = v403.__r_.__value_.__l.__size_;
      }
      std::string::size_type v175 = std::string::append(&v409, (const std::string::value_type *)v173, v174);
      long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v176;
      v175->__r_.__value_.__l.__size_ = 0;
      v175->__r_.__value_.__r.__words[2] = 0;
      v175->__r_.__value_.__r.__words[0] = 0;
      uint64_t v177 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v404, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v403.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v409.__r_.__value_.__l.__data_);
      }
      if (v413)
      {
        v414 = v413;
        operator delete(v413);
      }
      if (v412.__r_.__value_.__r.__words[0])
      {
        v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (v407)
      {
        v408 = v407;
        operator delete(v407);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v169;
      uint64_t v167 = *(void *)(a1 + 48);
      v168 += 16;
    }
    while (v169 < (*(void *)(a1 + 56) - v167) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 72), *(void *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0) {
    size_t v179 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v179 = *(void *)(a1 + 328);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v179 + 38);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v180 = &__str;
  }
  else {
    unint64_t v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v179)
  {
    if (*(char *)(a1 + 343) >= 0) {
      v181 = v392;
    }
    else {
      v181 = *(const void **)(a1 + 320);
    }
    memmove(v180, v181, v179);
  }
  strcpy((char *)v180 + v179, ":chain_producer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 88), *(void *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0) {
    size_t v182 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v182 = *(void *)(a1 + 328);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v182 + 36);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v183 = &__str;
  }
  else {
    uint64_t v183 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v182)
  {
    if (*(char *)(a1 + 343) >= 0) {
      std::string::size_type v184 = v392;
    }
    else {
      std::string::size_type v184 = *(const void **)(a1 + 320);
    }
    memmove(v183, v184, v182);
  }
  strcpy((char *)v183 + v182, ":chain_producer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  uint64_t v185 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v185)
  {
    uint64_t v186 = 0;
    unint64_t v187 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(v185 + v186), *(void *)(v185 + v186 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
      v404 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
      if (*(char *)(a1 + 367) >= 0) {
        size_t v188 = *(unsigned __int8 *)(a1 + 367);
      }
      else {
        size_t v188 = *(void *)(a1 + 352);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v409, v188 + 21);
      if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v189 = &v409;
      }
      else {
        std::string::size_type v189 = (std::string *)v409.__r_.__value_.__r.__words[0];
      }
      if (v188)
      {
        if (*(char *)(a1 + 367) >= 0) {
          std::string::size_type v190 = *(const void **)&v390[0];
        }
        else {
          std::string::size_type v190 = *(const void **)(a1 + 344);
        }
        memmove(v189, v190, v188);
      }
      strcpy((char *)v189 + v188, ":chain_consumer_read_");
      std::to_string(&v403, v187);
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v191 = &v403;
      }
      else {
        long long v191 = (std::string *)v403.__r_.__value_.__r.__words[0];
      }
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v192 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v192 = v403.__r_.__value_.__l.__size_;
      }
      unint64_t v193 = std::string::append(&v409, (const std::string::value_type *)v191, v192);
      long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v194;
      v193->__r_.__value_.__l.__size_ = 0;
      v193->__r_.__value_.__r.__words[2] = 0;
      v193->__r_.__value_.__r.__words[0] = 0;
      unint64_t v195 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      long long v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v404, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v403.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v409.__r_.__value_.__l.__data_);
      }
      if (v413)
      {
        v414 = v413;
        operator delete(v413);
      }
      if (v412.__r_.__value_.__r.__words[0])
      {
        v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (v407)
      {
        v408 = v407;
        operator delete(v407);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v187;
      uint64_t v185 = *(void *)(a1 + 104);
      v186 += 16;
    }
    while (v187 < (*(void *)(a1 + 112) - v185) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 128), *(void *)(a1 + 136));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 367) >= 0) {
    size_t v197 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v197 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v197 + 38);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v198 = &__str;
  }
  else {
    uint64_t v198 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v197)
  {
    if (*(char *)(a1 + 367) >= 0) {
      uint64_t v199 = *(const void **)&v390[0];
    }
    else {
      uint64_t v199 = *(const void **)(a1 + 344);
    }
    memmove(v198, v199, v197);
  }
  strcpy((char *)v198 + v197, ":chain_consumer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 144), *(void *)(a1 + 152));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 367) >= 0) {
    size_t v200 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v200 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v200 + 36);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v201 = &__str;
  }
  else {
    uint64_t v201 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v200)
  {
    if (*(char *)(a1 + 367) >= 0) {
      uint64_t v202 = *(const void **)&v390[0];
    }
    else {
      uint64_t v202 = *(const void **)(a1 + 344);
    }
    memmove(v201, v202, v200);
  }
  strcpy((char *)v201 + v200, ":chain_consumer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  memset(&__p, 0, sizeof(__p));
  uint64_t v203 = *(void *)(a1 + 176);
  if (*(void *)(a1 + 184) == v203)
  {
    std::string::size_type v236 = 0;
    std::string::size_type v235 = 0;
  }
  else
  {
    unint64_t v204 = 0;
    do
    {
      uint64_t v205 = *(void *)(v203 + 8 * v204);
      *(std::string::size_type *)((char *)v412.__r_.__value_.__r.__words + 4) = *(void *)(v205 + 240);
      HIDWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v205 + 248);
      v206 = (char *)operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v206 + 32);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v206 + 32);
      *(void *)v206 = v393;
      *((_DWORD *)v206 + 2) = v394;
      *(_OWORD *)(v206 + 12) = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
      std::string::size_type v207 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      uint64_t v209 = v207;
      unint64_t v210 = v208;
      std::string::size_type v211 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        uint64_t v213 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v215 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3 > v214) {
          unint64_t v214 = v215 >> 3;
        }
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v216 = v214;
        }
        if (v216) {
          std::string::size_type v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v216);
        }
        else {
          std::string::size_type v217 = 0;
        }
        std::string::size_type v218 = (operations_research::sat::CpModelBuilder **)&v217[16 * v213];
        *std::string::size_type v218 = v209;
        v218[1] = v210;
        int v219 = (_DWORD *)__str.__r_.__value_.__l.__size_;
        std::string::size_type v220 = __str.__r_.__value_.__r.__words[0];
        std::string::size_type v221 = (std::string::size_type)v218;
        if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v222 = *((void *)v219 - 2);
            v219 -= 4;
            int v223 = v219[2];
            *(void *)(v221 - 16) = v222;
            v221 -= 16;
            *(_DWORD *)(v221 + 8) = v223;
          }
          while (v219 != (_DWORD *)v220);
          int v219 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v212 = (std::string::size_type)(v218 + 2);
        __str.__r_.__value_.__r.__words[0] = v221;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v218 + 2);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v217[16 * v216];
        if (v219) {
          operator delete(v219);
        }
      }
      else
      {
        *(void *)__str.__r_.__value_.__l.__size_ = v207;
        *(void *)(v211 + 8) = v208;
        std::string::size_type v212 = v211 + 16;
      }
      __str.__r_.__value_.__l.__size_ = v212;
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      uint64_t v224 = *(void *)(*(void *)(*a4 + 8 * v204) + 120);
      std::string::size_type v225 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        int64_t v227 = (void *)__p.__r_.__value_.__r.__words[0];
        uint64_t v228 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v229 = v228 + 1;
        if ((unint64_t)(v228 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int64_t v230 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v229) {
          unint64_t v229 = v230 >> 2;
        }
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v231 = v229;
        }
        if (v231)
        {
          unint64_t v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v231);
          std::string::size_type v225 = __p.__r_.__value_.__l.__size_;
          int64_t v227 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          unint64_t v232 = 0;
        }
        uint64_t v233 = &v232[8 * v228];
        *(void *)uint64_t v233 = v224;
        std::string::size_type v226 = (std::string::size_type)(v233 + 8);
        while ((void *)v225 != v227)
        {
          uint64_t v234 = *(void *)(v225 - 8);
          v225 -= 8;
          *((void *)v233 - 1) = v234;
          v233 -= 8;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
        __p.__r_.__value_.__l.__size_ = v226;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v232[8 * v231];
        if (v227) {
          operator delete(v227);
        }
      }
      else
      {
        *(void *)__p.__r_.__value_.__l.__size_ = v224;
        std::string::size_type v226 = v225 + 8;
      }
      __p.__r_.__value_.__l.__size_ = v226;
      ++v204;
      uint64_t v203 = *(void *)(a1 + 176);
    }
    while (v204 < (*(void *)(a1 + 184) - v203) >> 3);
    std::string::size_type v235 = __str.__r_.__value_.__r.__words[2];
    std::string::size_type v236 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_ < __str.__r_.__value_.__r.__words[2])
    {
      *(void *)__str.__r_.__value_.__l.__size_ = v393;
      *(void *)(v236 + 8) = v394;
      std::string::size_type v237 = v236 + 16;
      goto LABEL_431;
    }
  }
  uint64_t v238 = (uint64_t)(v236 - __str.__r_.__value_.__r.__words[0]) >> 4;
  unint64_t v239 = v238 + 1;
  if ((unint64_t)(v238 + 1) >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v240 = v235 - __str.__r_.__value_.__r.__words[0];
  if (v240 >> 3 > v239) {
    unint64_t v239 = v240 >> 3;
  }
  if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v241 = v239;
  }
  if (v241) {
    int v242 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v241);
  }
  else {
    int v242 = 0;
  }
  int v243 = &v242[16 * v238];
  std::string::size_type v244 = (std::string::size_type)&v242[16 * v241];
  *(void *)int v243 = v393;
  *((void *)v243 + 1) = v394;
  std::string::size_type v237 = (std::string::size_type)(v243 + 16);
  uint64_t v245 = (_DWORD *)__str.__r_.__value_.__l.__size_;
  std::string::size_type v246 = __str.__r_.__value_.__r.__words[0];
  if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
  {
    do
    {
      uint64_t v247 = *((void *)v245 - 2);
      v245 -= 4;
      int v248 = v245[2];
      *((void *)v243 - 2) = v247;
      v243 -= 16;
      *((_DWORD *)v243 + 2) = v248;
    }
    while (v245 != (_DWORD *)v246);
    uint64_t v245 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v243;
  __str.__r_.__value_.__l.__size_ = v237;
  __str.__r_.__value_.__r.__words[2] = v244;
  if (v245) {
    operator delete(v245);
  }
LABEL_431:
  __str.__r_.__value_.__l.__size_ = v237;
  uint64_t v249 = *(void *)(a5 + 128);
  std::string::size_type v250 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
  {
    size_t v252 = (void *)__p.__r_.__value_.__r.__words[0];
    uint64_t v253 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
    unint64_t v254 = v253 + 1;
    if ((unint64_t)(v253 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v255 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
    if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v254) {
      unint64_t v254 = v255 >> 2;
    }
    if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v256 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v256 = v254;
    }
    if (v256)
    {
      int v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v256);
      std::string::size_type v250 = __p.__r_.__value_.__l.__size_;
      size_t v252 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      int v257 = 0;
    }
    int64_t v258 = &v257[8 * v253];
    std::string::size_type v259 = (std::string::size_type)&v257[8 * v256];
    *(void *)int64_t v258 = v249;
    std::string::size_type v251 = (std::string::size_type)(v258 + 8);
    while ((void *)v250 != v252)
    {
      uint64_t v260 = *(void *)(v250 - 8);
      v250 -= 8;
      *((void *)v258 - 1) = v260;
      v258 -= 8;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v258;
    __p.__r_.__value_.__l.__size_ = v251;
    __p.__r_.__value_.__r.__words[2] = v259;
    if (v252) {
      operator delete(v252);
    }
  }
  else
  {
    *(void *)__p.__r_.__value_.__l.__size_ = v249;
    std::string::size_type v251 = v250 + 8;
  }
  __p.__r_.__value_.__l.__size_ = v251;
  v261 = *(void **)(a1 + 176);
  if (*(void *)(a1 + 184) - (void)v261 >= 9uLL)
  {
    uint64_t v262 = *v261;
    *(std::string::size_type *)((char *)v412.__r_.__value_.__r.__words + 4) = *(void *)(*v261 + 240);
    HIDWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v262 + 248);
    uint64_t v263 = v261[1];
    *(std::string::size_type *)((char *)v409.__r_.__value_.__r.__words + 4) = *(void *)(v263 + 240);
    HIDWORD(v409.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v263 + 248);
    uint64_t v264 = (char *)operator new(0x30uLL);
    v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v264 + 48);
    v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v264 + 48);
    *(void *)uint64_t v264 = v393;
    *((_DWORD *)v264 + 2) = v394;
    *(_OWORD *)(v264 + 12) = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
    *(_OWORD *)(v264 + 28) = *(_OWORD *)&v409.__r_.__value_.__l.__data_;
    v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    unint64_t v265 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
    std::string v267 = v265;
    std::string v268 = v266;
    std::string::size_type v269 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
    {
      uint64_t v271 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v272 = v271 + 1;
      if ((unint64_t)(v271 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v273 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3 > v272) {
        unint64_t v272 = v273 >> 3;
      }
      if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v274 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v274 = v272;
      }
      if (v274) {
        uint64_t v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v274);
      }
      else {
        uint64_t v275 = 0;
      }
      int v276 = (operations_research::sat::CpModelBuilder **)&v275[16 * v271];
      std::string::size_type v277 = (std::string::size_type)&v275[16 * v274];
      *int v276 = v267;
      v276[1] = v268;
      std::string::size_type v270 = (std::string::size_type)(v276 + 2);
      int v278 = (_DWORD *)__str.__r_.__value_.__l.__size_;
      std::string::size_type v279 = __str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v280 = (operations_research::sat::CpModelBuilder *)*((void *)v278 - 2);
          v278 -= 4;
          int v281 = v278[2];
          *(v276 - 2) = v280;
          v276 -= 2;
          *((_DWORD *)v276 + 2) = v281;
        }
        while (v278 != (_DWORD *)v279);
        int v278 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
      __str.__r_.__value_.__l.__size_ = v270;
      __str.__r_.__value_.__r.__words[2] = v277;
      if (v278) {
        operator delete(v278);
      }
    }
    else
    {
      *(void *)__str.__r_.__value_.__l.__size_ = v265;
      *(void *)(v269 + 8) = v266;
      std::string::size_type v270 = v269 + 16;
    }
    __str.__r_.__value_.__l.__size_ = v270;
    if (v406.__r_.__value_.__r.__words[0])
    {
      v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
      operator delete(v406.__r_.__value_.__l.__data_);
    }
    std::string::size_type v282 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      int v284 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v285 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v286 = v285 + 1;
      if ((unint64_t)(v285 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v287 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v286) {
        unint64_t v286 = v287 >> 2;
      }
      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v288 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v288 = v286;
      }
      if (v288)
      {
        int v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v288);
        std::string::size_type v282 = __p.__r_.__value_.__l.__size_;
        int v284 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        int v289 = 0;
      }
      int v290 = &v289[8 * v285];
      std::string::size_type v291 = (std::string::size_type)&v289[8 * v288];
      *(void *)int v290 = 1;
      std::string::size_type v283 = (std::string::size_type)(v290 + 8);
      while ((void *)v282 != v284)
      {
        uint64_t v292 = *(void *)(v282 - 8);
        v282 -= 8;
        *((void *)v290 - 1) = v292;
        v290 -= 8;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v290;
      __p.__r_.__value_.__l.__size_ = v283;
      __p.__r_.__value_.__r.__words[2] = v291;
      if (v284) {
        operator delete(v284);
      }
    }
    else
    {
      *(void *)__p.__r_.__value_.__l.__size_ = 1;
      std::string::size_type v283 = v282 + 8;
    }
    __p.__r_.__value_.__l.__size_ = v283;
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(void *)(a1 + 160), *(void *)(a1 + 168));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__str.__r_.__value_.__l.__data_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)&v412);
  operations_research::sat::CpModelBuilder::AddEquality(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(v395, *(uint64_t *)&v390[1], v166, *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v293 = *(void *)(a1 + 176);
  if (*(void *)(a1 + 184) != v293)
  {
    unint64_t v294 = 0;
    do
    {
      uint64_t v295 = *(void *)(a1 + 368);
      uint64_t v296 = *(void *)(a1 + 376);
      uint64_t v297 = *(void *)(v293 + 8 * v294);
      v412.__r_.__value_.__r.__words[0] = *(void *)(v297 + 240);
      LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v297 + 248);
      uint64_t v298 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v298 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v298 + 4);
      *(_OWORD *)uint64_t v298 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v298[2] = v393;
      *((_DWORD *)v298 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
      v299 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      int v301 = v300;
      if (*(char *)(a1 + 343) >= 0) {
        size_t v302 = *(unsigned __int8 *)(a1 + 343);
      }
      else {
        size_t v302 = *(void *)(a1 + 328);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v402, v302 + 50);
      if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v303 = &v402;
      }
      else {
        size_t v303 = (std::string *)v402.__r_.__value_.__r.__words[0];
      }
      if (v302)
      {
        if (*(char *)(a1 + 343) >= 0) {
          v304 = v392;
        }
        else {
          v304 = *(const void **)(a1 + 320);
        }
        memmove(v303, v304, v302);
      }
      strcpy((char *)v303 + v302, ":chain_producer_nonresident_read_pressure_interval");
      int v305 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v295, v296, (uint64_t)v299, v301, &v402);
      int v307 = v306;
      if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v402.__r_.__value_.__l.__data_);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      uint64_t v308 = *(void *)(*(void *)(a1 + 176) + 8 * v294);
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v305, v307, *(void *)(v308 + 144), *(void *)(v308 + 152));
      if (*(unsigned char *)(a1 + 392))
      {
        uint64_t v309 = *(void *)(a1 + 376);
        uint64_t v310 = *(void *)(*(void *)(a1 + 176) + 8 * v294);
        v412.__r_.__value_.__r.__words[0] = *(void *)(v310 + 224);
        LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v310 + 232);
        uint64_t v311 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v311 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v311 + 4);
        *(_OWORD *)uint64_t v311 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
        v311[2] = v393;
        *((_DWORD *)v311 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
        uint64_t v312 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        int v314 = v313;
        if (*(char *)(a1 + 343) >= 0) {
          size_t v315 = *(unsigned __int8 *)(a1 + 343);
        }
        else {
          size_t v315 = *(void *)(a1 + 328);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v401, v315 + 47);
        if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v316 = &v401;
        }
        else {
          int v316 = (std::string *)v401.__r_.__value_.__r.__words[0];
        }
        if (v315)
        {
          if (*(char *)(a1 + 343) >= 0) {
            size_t v317 = v392;
          }
          else {
            size_t v317 = *(const void **)(a1 + 320);
          }
          memmove(v316, v317, v315);
        }
        strcpy((char *)v316 + v315, ":chain_producer_resident_read_pressure_interval");
        int v318 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v309, v309, (uint64_t)v312, v314, &v401);
        int v320 = v319;
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v401.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        uint64_t v321 = *(void *)(*(void *)(a1 + 176) + 8 * v294);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v318, v320, *(void *)(v321 + 112), *(void *)(v321 + 120));
      }
      ++v294;
      uint64_t v293 = *(void *)(a1 + 176);
    }
    while (v294 < (*(void *)(a1 + 184) - v293) >> 3);
  }
  uint64_t v322 = *(void *)(a1 + 368);
  uint64_t v323 = *(void *)(a1 + 376);
  if (*(char *)(a1 + 343) >= 0) {
    size_t v324 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    size_t v324 = *(void *)(a1 + 328);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v400, v324 + 45);
  if ((v400.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v325 = &v400;
  }
  else {
    v325 = (std::string *)v400.__r_.__value_.__r.__words[0];
  }
  if (v324)
  {
    if (*(char *)(a1 + 343) >= 0) {
      v326 = v392;
    }
    else {
      v326 = *(const void **)(a1 + 320);
    }
    memmove(v325, v326, v324);
  }
  strcpy((char *)v325 + v324, ":chain_producer_chain_write_pressure_interval");
  int v327 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v322, v323, v393, v394, &v400);
  int v329 = v328;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v400.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v327, v329, *(void *)(*(void *)(a1 + 208) + 208), *(void *)(*(void *)(a1 + 208) + 216));
  uint64_t v330 = *(void *)(a1 + 216);
  uint64_t v331 = *(void *)(a1 + 224);
  if (v331 != v330)
  {
    unint64_t v332 = 0;
    do
    {
      if (v332 != *(void *)(a1 + 384))
      {
        uint64_t v333 = *(void *)(a1 + 368);
        uint64_t v334 = *(void *)(a1 + 376);
        uint64_t v335 = *(void *)(v330 + 8 * v332);
        v412.__r_.__value_.__r.__words[0] = *(void *)(v335 + 240);
        LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v335 + 248);
        v336 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v336 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v336 + 4);
        *(_OWORD *)v336 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
        v336[2] = v393;
        *((_DWORD *)v336 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v336;
        v337 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        int v339 = v338;
        if (*(char *)(a1 + 367) >= 0) {
          size_t v340 = *(unsigned __int8 *)(a1 + 367);
        }
        else {
          size_t v340 = *(void *)(a1 + 352);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v399, v340 + 50);
        if ((v399.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v341 = &v399;
        }
        else {
          uint64_t v341 = (std::string *)v399.__r_.__value_.__r.__words[0];
        }
        if (v340)
        {
          if (*(char *)(a1 + 367) >= 0) {
            uint64_t v342 = *(const void **)&v390[0];
          }
          else {
            uint64_t v342 = *(const void **)(a1 + 344);
          }
          memmove(v341, v342, v340);
        }
        strcpy((char *)v341 + v340, ":chain_consumer_nonresident_read_pressure_interval");
        int v343 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v333, v334, (uint64_t)v337, v339, &v399);
        int v345 = v344;
        if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v399.__r_.__value_.__l.__data_);
        }
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        uint64_t v346 = *(void *)(*(void *)(a1 + 216) + 8 * v332);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v343, v345, *(void *)(v346 + 160), *(void *)(v346 + 168));
        uint64_t v330 = *(void *)(a1 + 216);
        uint64_t v331 = *(void *)(a1 + 224);
      }
      ++v332;
    }
    while (v332 < (v331 - v330) >> 3);
  }
  uint64_t v347 = *(void *)(a1 + 368);
  uint64_t v348 = *(void *)(a1 + 376);
  uint64_t v349 = *(void *)(a1 + 248);
  v412.__r_.__value_.__r.__words[0] = *(void *)(v349 + 240);
  LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v349 + 248);
  v350 = operator new(0x20uLL);
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v350 + 4);
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v350 + 4);
  *(_OWORD *)v350 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
  v350[2] = v393;
  *((_DWORD *)v350 + 6) = v394;
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v350;
  std::string v351 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  int v353 = v352;
  if (*(char *)(a1 + 367) >= 0) {
    size_t v354 = *(unsigned __int8 *)(a1 + 367);
  }
  else {
    size_t v354 = *(void *)(a1 + 352);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v398, v354 + 51);
  if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v355 = &v398;
  }
  else {
    std::string v355 = (std::string *)v398.__r_.__value_.__r.__words[0];
  }
  if (v354)
  {
    if (*(char *)(a1 + 367) >= 0) {
      v356 = *(const void **)&v390[0];
    }
    else {
      v356 = *(const void **)(a1 + 344);
    }
    memmove(v355, v356, v354);
  }
  strcpy((char *)v355 + v354, ":chain_consumer_nonresident_write_pressure_interval");
  int v357 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v347, v348, (uint64_t)v351, v353, &v398);
  int v359 = v358;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v357, v359, *(void *)(*(void *)(a1 + 248) + 160), *(void *)(*(void *)(a1 + 248) + 168));
  if (*(unsigned char *)(a1 + 393))
  {
    unint64_t v360 = *(void *)(a1 + 384) == 0;
    uint64_t v361 = *(void *)(a1 + 280);
    if (v360 >= (*(void *)(a1 + 288) - v361) >> 4 || *(void *)(a1 + 224) - *(void *)(a1 + 216) < 9uLL)
    {
      uint64_t v375 = *(void *)(a1 + 368);
      uint64_t v376 = *(void *)(a1 + 248);
      v412.__r_.__value_.__r.__words[0] = *(void *)(v376 + 224);
      LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v376 + 232);
      v377 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v377 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v377 + 4);
      *(_OWORD *)v377 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v377[2] = v393;
      *((_DWORD *)v377 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v377;
      v378 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      int v380 = v379;
      if (*(char *)(a1 + 367) >= 0) {
        size_t v381 = *(unsigned __int8 *)(a1 + 367);
      }
      else {
        size_t v381 = *(void *)(a1 + 352);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v396, v381 + 48);
      if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v382 = &v396;
      }
      else {
        v382 = (std::string *)v396.__r_.__value_.__r.__words[0];
      }
      if (v381)
      {
        if (*(char *)(a1 + 367) >= 0) {
          v383 = *(const void **)&v390[0];
        }
        else {
          v383 = *(const void **)(a1 + 344);
        }
        memmove(v382, v383, v381);
      }
      strcpy((char *)v382 + v381, ":chain_consumer_resident_write_pressure_interval");
      int v384 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v375, v375, (uint64_t)v378, v380, &v396);
      int v386 = v385;
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v396.__r_.__value_.__l.__data_);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v384, v386, *(void *)(*(void *)(a1 + 248) + 112), *(void *)(*(void *)(a1 + 248) + 120));
    }
    else
    {
      uint64_t v362 = *(void *)(a1 + 368);
      uint64_t v363 = *(void *)(a1 + 248);
      v409.__r_.__value_.__r.__words[0] = *(void *)(v363 + 224);
      LODWORD(v409.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v363 + 232);
      operations_research::sat::BoolVar::BoolVar((uint64_t)&v412, ~*(_DWORD *)(v361 + 16 * v360 + 8), *(void *)(v361 + 16 * v360));
      long long v364 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v365 = operator new(0x30uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v365 + 6);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v365 + 6);
      *(_OWORD *)v365 = *(_OWORD *)&v409.__r_.__value_.__l.__data_;
      v365[2] = v393;
      *((_DWORD *)v365 + 6) = v394;
      v365[4] = v364;
      *((_DWORD *)v365 + 10) = DWORD2(v364);
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
      v366 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      int v368 = v367;
      if (*(char *)(a1 + 367) >= 0) {
        size_t v369 = *(unsigned __int8 *)(a1 + 367);
      }
      else {
        size_t v369 = *(void *)(a1 + 352);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v397, v369 + 59);
      if ((v397.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v370 = &v397;
      }
      else {
        v370 = (std::string *)v397.__r_.__value_.__r.__words[0];
      }
      if (v369)
      {
        if (*(char *)(a1 + 367) >= 0) {
          v371 = *(const void **)&v390[0];
        }
        else {
          v371 = *(const void **)(a1 + 344);
        }
        memmove(v370, v371, v369);
      }
      strcpy((char *)v370 + v369, ":chain_consumer_inplacable_resident_write_pressure_interval");
      int v372 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v362, v362, (uint64_t)v366, v368, &v397);
      int v374 = v373;
      if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v397.__r_.__value_.__l.__data_);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v372, v374, *(void *)(*(void *)(a1 + 248) + 112), *(void *)(*(void *)(a1 + 248) + 120));
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23CB41D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::string::size_type v55 = *(void **)(v53 - 192);
  if (v55)
  {
    *(void *)(v53 - 184) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

uint64_t CpAllocUtils::IsL2Dependent(unsigned int a1)
{
  return (a1 < 8) & (0xA8u >> a1);
}

uint64_t L2CycleEstimator::GetMaxCycle(L2CycleEstimator *this, char a2)
{
  unint64_t v4 = *(void *)this;
  unint64_t v5 = *((void *)this + 12);
  uint64_t v6 = (unint64_t *)operator new(0x10uLL);
  uint64_t v7 = v6 + 2;
  size_t v64 = (char *)(v6 + 2);
  uint64_t v66 = (char *)(v6 + 2);
  unint64_t *v6 = v4;
  v6[1] = v5;
  std::string __p = (char *)v6;
  if (a2) {
    goto LABEL_72;
  }
  size_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, 4uLL);
  uint64_t v10 = __p;
  size_t v11 = v64;
  *((void *)v9 + 2) = *((void *)this + 2);
  uint64_t v12 = v9 + 16;
  uint64_t v13 = &v9[8 * v8];
  uint64_t v14 = v9 + 24;
  while (v11 != __p)
  {
    uint64_t v15 = *((void *)v11 - 1);
    v11 -= 8;
    *((void *)v12 - 1) = v15;
    v12 -= 8;
  }
  __pa = v12;
  uint64_t v66 = &v9[8 * v8];
  if (v10)
  {
    operator delete(v10);
    uint64_t v13 = v66;
  }
  unint64_t v65 = v9 + 24;
  if (v14 >= v13)
  {
    uint64_t v17 = __pa;
    uint64_t v18 = (v14 - __pa) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v20 = v13 - __pa;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v21);
      uint64_t v17 = __pa;
      uint64_t v14 = v65;
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = &v22[8 * v18];
    uint64_t v13 = &v22[8 * v21];
    *(void *)uint64_t v23 = *((void *)this + 4);
    uint64_t v16 = v23 + 8;
    while (v14 != v17)
    {
      uint64_t v24 = *((void *)v14 - 1);
      v14 -= 8;
      *((void *)v23 - 1) = v24;
      v23 -= 8;
    }
    __pa = v23;
    uint64_t v66 = v13;
    if (v17)
    {
      operator delete(v17);
      uint64_t v13 = v66;
    }
  }
  else
  {
    *((void *)v9 + 3) = *((void *)this + 4);
    uint64_t v16 = v9 + 32;
  }
  if (v16 >= v13)
  {
    size_t v26 = __pa;
    uint64_t v27 = (v16 - __pa) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v29 = v13 - __pa;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v30);
      size_t v26 = __pa;
    }
    else
    {
      int v31 = 0;
    }
    int v32 = &v31[8 * v27];
    uint64_t v13 = &v31[8 * v30];
    *(void *)int v32 = *((void *)this + 6);
    uint64_t v25 = v32 + 8;
    while (v16 != v26)
    {
      uint64_t v33 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v32 - 1) = v33;
      v32 -= 8;
    }
    __pa = v32;
    uint64_t v66 = v13;
    if (v26)
    {
      operator delete(v26);
      uint64_t v13 = v66;
    }
  }
  else
  {
    *(void *)uint64_t v16 = *((void *)this + 6);
    uint64_t v25 = v16 + 8;
  }
  if (v25 >= v13)
  {
    size_t v35 = __pa;
    uint64_t v36 = (v25 - __pa) >> 3;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v38 = v13 - __pa;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v39);
      size_t v35 = __pa;
    }
    else
    {
      unint64_t v40 = 0;
    }
    long long v41 = &v40[8 * v36];
    uint64_t v13 = &v40[8 * v39];
    *(void *)long long v41 = *((void *)this + 8);
    std::string::size_type v34 = v41 + 8;
    while (v25 != v35)
    {
      uint64_t v42 = *((void *)v25 - 1);
      v25 -= 8;
      *((void *)v41 - 1) = v42;
      v41 -= 8;
    }
    __pa = v41;
    uint64_t v66 = v13;
    if (v35)
    {
      operator delete(v35);
      uint64_t v13 = v66;
    }
  }
  else
  {
    *(void *)uint64_t v25 = *((void *)this + 8);
    std::string::size_type v34 = v25 + 8;
  }
  if (v34 >= v13)
  {
    uint64_t v43 = __pa;
    uint64_t v44 = (v34 - __pa) >> 3;
    unint64_t v45 = v44 + 1;
    if (!((unint64_t)(v44 + 1) >> 61))
    {
      uint64_t v46 = v13 - __pa;
      if (v46 >> 2 > v45) {
        unint64_t v45 = v46 >> 2;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v47);
        uint64_t v43 = __pa;
      }
      else
      {
        uint64_t v48 = 0;
      }
      uint64_t v49 = &v48[8 * v44];
      uint64_t v50 = &v48[8 * v47];
      *(void *)uint64_t v49 = *((void *)this + 10);
      uint64_t v7 = (unint64_t *)(v49 + 8);
      while (v34 != v43)
      {
        uint64_t v51 = *((void *)v34 - 1);
        v34 -= 8;
        *((void *)v49 - 1) = v51;
        v49 -= 8;
      }
      __pa = v49;
      uint64_t v66 = v50;
      if (v43) {
        operator delete(v43);
      }
      goto LABEL_71;
    }
LABEL_85:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  *(void *)std::string::size_type v34 = *((void *)this + 10);
  uint64_t v7 = (unint64_t *)(v34 + 8);
LABEL_71:
  uint64_t v6 = (unint64_t *)__pa;
LABEL_72:
  uint64_t v52 = (uint64_t *)(v6 + 1);
  BOOL v53 = v6 == v7 || v52 == (uint64_t *)v7;
  uint64_t v54 = (uint64_t *)v6;
  if (!v53)
  {
    unint64_t v55 = *v6;
    uint64_t v54 = (uint64_t *)v6;
    size_t v56 = v6 + 1;
    do
    {
      unint64_t v58 = *v56++;
      unint64_t v57 = v58;
      BOOL v59 = v55 >= v58;
      if (v55 <= v58) {
        unint64_t v55 = v57;
      }
      if (!v59) {
        uint64_t v54 = v52;
      }
      uint64_t v52 = (uint64_t *)v56;
    }
    while (v56 != v7);
  }
  uint64_t v60 = *v54;
  if (v6) {
    operator delete(v6);
  }
  return v60;
}

void sub_23CB42490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double absl::lts_2020_02_25::base_internal::CycleClock::Frequency(absl::lts_2020_02_25::base_internal::CycleClock *this)
{
  return 1000000000.0;
}

_DWORD *absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(_DWORD *result, int a2)
{
  void *result = 2 * (a2 == 1);
  return result;
}

uint64_t absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load_explicit(&_MergedGlobals_20, memory_order_acquire) != 221) {
    absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>((absl::lts_2020_02_25::base_internal *)&_MergedGlobals_20, a2, a3, a4, a5, a6, a7, a8);
  }
  int v9 = dword_26AED0C34;
  do
  {
    uint64_t result = *(unsigned int *)this;
    BOOL v11 = __OFSUB__(v9--, 1);
  }
  while ((result & 1) != 0 && !((v9 < 0) ^ v11 | (v9 == 0)));
  return result;
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>(absl::lts_2020_02_25::base_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (atomic_uint *)a1;
  int v9 = *(_DWORD *)a1;
  if (*(int *)a1 <= 94570705)
  {
    if (!v9 || v9 == 221) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  if (v9 != 94570706 && v9 != 1707250555) {
LABEL_4:
  }
    a1 = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *(_DWORD *)a1);
LABEL_10:
  int v11 = 0;
  atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v11, 0x65C2937Bu, memory_order_relaxed, memory_order_relaxed);
  if (!v11
    || (a1 = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::base_internal::SpinLockWait(v8, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0 &&)::trans), !a1))
  {
    int v12 = (int)absl::lts_2020_02_25::base_internal::NumCPUs(a1, a2, a3, a4, a5, a6, a7, a8) <= 1 ? 1 : 1000;
    dword_26AED0C34 = v12;
    atomic_uint v13 = *v8;
    atomic_store(0xDDu, (unsigned int *)v8);
    if (v13 == 94570706)
    {
      ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v8);
    }
  }
}

uint64_t absl::lts_2020_02_25::base_internal::NumCPUs(absl::lts_2020_02_25::base_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load_explicit(dword_26AED0C40, memory_order_acquire) != 221) {
    absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(dword_26AED0C40, a2, a3, a4, a5, a6, a7, a8);
  }
  return _MergedGlobals_21;
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(atomic_uint *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *a1;
  if (*a1 <= 94570705)
  {
    if (!v9 || v9 == 221) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  if (v9 != 94570706 && v9 != 1707250555) {
LABEL_4:
  }
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
LABEL_10:
  int v11 = 0;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v11, 0x65C2937Bu, memory_order_relaxed, memory_order_relaxed);
  if (!v11
    || !absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0 &&)::trans))
  {
    _MergedGlobals_21 = std::thread::hardware_concurrency();
    atomic_uint v12 = *a1;
    atomic_store(0xDDu, (unsigned int *)a1);
    if (v12 == 94570706)
    {
      ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
    }
  }
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void)>(atomic_uint *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *a1;
  if (*a1 <= 94570705)
  {
    if (!v10 || v10 == 221) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  if (v10 != 94570706 && v10 != 1707250555) {
LABEL_4:
  }
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
LABEL_10:
  int v12 = 0;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v12, 0x65C2937Bu, memory_order_relaxed, memory_order_relaxed);
  if (!v12
    || !absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void)>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,void (&)(void) &&)::trans))
  {
    a3();
    atomic_uint v13 = *a1;
    atomic_store(0xDDu, (unsigned int *)a1);
    if (v13 == 94570706)
    {
      ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
    }
  }
}

uint64_t _GLOBAL__sub_I_sysinfo_cc()
{
  return __cxa_atexit((void (*)(void *))absl::lts_2020_02_25::base_internal::SpinLock::~SpinLock, &unk_26AED0C3C, &dword_23CB1E000);
}

uint64_t absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a2;
  if ((atomic_load_explicit(_MergedGlobals_22, memory_order_acquire) & 1) != 0 && pthread_getspecific(qword_26AED0C60)) {
    absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity();
  }
  if (atomic_load_explicit(&dword_26AED0C5C, memory_order_acquire) != 221) {
  sigset_t v10 = 0;
  }
  sigset_t v11 = -1;
  pthread_sigmask(3, &v11, &v10);
  pthread_setspecific(qword_26AED0C60, a1);
  return pthread_sigmask(3, &v10, 0);
}

void *absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(absl::lts_2020_02_25::base_internal *this)
{
  if (atomic_load_explicit(_MergedGlobals_22, memory_order_acquire)) {
    return pthread_getspecific(qword_26AED0C60);
  }
  else {
    return 0;
  }
}

uint64_t absl::lts_2020_02_25::base_internal::anonymous namespace'::AllocateThreadIdentityKey(absl::lts_2020_02_25::base_internal::_anonymous_namespace_ *this, void (*a2)(void *))
{
  uint64_t result = pthread_key_create((pthread_key_t *)&qword_26AED0C60, (void (__cdecl *)(void *))this);
  atomic_store(1u, (unsigned __int8 *)_MergedGlobals_22);
  return result;
}

void absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity(absl::lts_2020_02_25::base_internal *this)
{
  if (atomic_load_explicit(_MergedGlobals_22, memory_order_acquire))
  {
    if (pthread_getspecific(qword_26AED0C60)) {
      absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity();
    }
  }
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void (*)(void *)),void (*&)(void *)>(atomic_uint *a1, uint64_t a2, void (*a3)(void), void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *a1;
  if (*a1 <= 94570705)
  {
    if (!v11 || v11 == 221) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  if (v11 != 94570706 && v11 != 1707250555) {
LABEL_4:
  }
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
LABEL_10:
  int v13 = 0;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v13, 0x65C2937Bu, memory_order_relaxed, memory_order_relaxed);
  if (!v13
    || !absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void (*)(void *)),void (*&)(void *)>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,void (&)(void (*)(void *)) &&,void (*&)(void *) &&)::trans))
  {
    a3(*a4);
    atomic_uint v14 = *a1;
    atomic_store(0xDDu, (unsigned int *)a1);
    if (v14 == 94570706)
    {
      ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
    }
  }
}

unint64_t absl::lts_2020_02_25::hash_internal::CityHash64(absl::lts_2020_02_25::hash_internal *this, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v8 = 2 * a2 - 0x651E95C4D06FBFB1;
      uint64_t v10 = *(void *)((char *)this + a2 - 32);
      uint64_t v9 = *(void *)((char *)this + a2 - 24);
      uint64_t v11 = 9 * *((void *)this + 3);
      uint64_t v12 = *(void *)((char *)this + a2 - 8);
      uint64_t v13 = *(void *)((char *)this + a2 - 16) * v8;
      uint64_t v14 = v11 - 0x651E95C4D06FBFB1 * *((void *)this + 2);
      uint64_t v15 = __ROR8__(v14, 42);
      unint64_t v16 = v14
          + v9
          + *((void *)this + 1)
          + bswap64((v14+ v9+ v12+ v15+ v9+ bswap64((v11+ ((v12 - 0x651E95C4D06FBFB1 * *(void *)this) ^ v10)+ 1+ v13+ bswap64((__ROR8__(v12 - 0x651E95C4D06FBFB1 * *(void *)this, 43)+ 9 * (__ROR8__(*((void *)this + 1), 30) + v9)+ v11+ ((v12 - 0x651E95C4D06FBFB1 * *(void *)this) ^ v10)+ 1)* v8))* v8))* v8);
      return v15 + v9 + ((v13 + v10 + v16 * v8) ^ ((v13 + v10 + v16 * v8) >> 47)) * v8;
    }
    uint64_t v2 = 0x9DDFEA08EB382D69;
    uint64_t v19 = *(void *)((char *)this + a2 - 48);
    uint64_t v20 = *(void *)((char *)this + a2 - 40);
    uint64_t v21 = *(void *)((char *)this + a2 - 24);
    uint64_t v23 = *(void *)((char *)this + a2 - 64);
    uint64_t v22 = *(void *)((char *)this + a2 - 56);
    uint64_t v24 = *(void *)((char *)this + a2 - 16);
    uint64_t v25 = *(void *)((char *)this + a2 - 8);
    unint64_t v26 = v22 + v24;
    unint64_t v27 = 0x9DDFEA08EB382D69
        * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v19 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ (v19 + a2))));
    unint64_t v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
    uint64_t v29 = (const char *)(v23 + a2 + v22 + v19);
    unint64_t v30 = (unint64_t)&v29[v20];
    unint64_t v31 = __ROR8__(v29, 44) + v23 + a2 + __ROR8__(v20 + v23 + a2 - 0x622015F714C7D297 * (v27 ^ (v27 >> 47)), 21);
    uint64_t v32 = v22 + v24 + *(void *)((char *)this + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v33 = v32 + v21 + v24;
    uint64_t v34 = __ROR8__(v33, 44);
    uint64_t v35 = v33 + v25;
    uint64_t v36 = v34 + v32 + __ROR8__(v32 + v20 + v25, 21);
    uint64_t v38 = *(void *)this;
    unint64_t v37 = (void *)((char *)this + 32);
    unint64_t v39 = v38 - 0x4B6D499041670D8DLL * v20;
    uint64_t v40 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v41 = *(v37 - 3);
      uint64_t v42 = (const char *)(v39 + v30 + v26 + v41);
      uint64_t v43 = v37[2];
      uint64_t v44 = v37[3];
      uint64_t v45 = v37[1];
      unint64_t v26 = v45 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v26 + v31 + v43, 42);
      uint64_t v46 = v28 + v35;
      uint64_t v47 = *(v37 - 2);
      uint64_t v48 = *(v37 - 1);
      uint64_t v49 = *(v37 - 4) - 0x4B6D499041670D8DLL * v31;
      uint64_t v50 = v49 + v35 + v48;
      uint64_t v51 = v49 + v41 + v47;
      unint64_t v30 = v51 + v48;
      uint64_t v52 = __ROR8__(v51, 44) + v49;
      unint64_t v53 = (0xB492B66FBE98F273 * __ROR8__(v42, 37)) ^ v36;
      unint64_t v39 = 0xB492B66FBE98F273 * __ROR8__(v46, 33);
      unint64_t v31 = v52 + __ROR8__(v50 + v53, 21);
      unint64_t v54 = v39 + v36 + *v37;
      uint64_t v35 = v54 + v45 + v43 + v44;
      uint64_t v36 = __ROR8__(v54 + v45 + v43, 44) + v54 + __ROR8__(v26 + v47 + v54 + v44, 21);
      v37 += 8;
      unint64_t v28 = v53;
      v40 += 64;
    }
    while (v40);
    unint64_t v55 = v39
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v31)))) >> 47));
    unint64_t v56 = v55 ^ (v53
               - 0x4B6D499041670D8DLL * (v26 ^ (v26 >> 47))
               - 0x622015F714C7D297
               * ((0x9DDFEA08EB382D69
                 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) >> 47)));
    goto LABEL_12;
  }
  uint64_t v2 = 0x9AE16A3B2F90404FLL;
  if (a2 > 0x10)
  {
    uint64_t v3 = 2 * a2 - 0x651E95C4D06FBFB1;
    uint64_t v18 = *((void *)this + 1);
    uint64_t v6 = __ROR8__(v18 - 0x651E95C4D06FBFB1, 18)
       - 0x4B6D499041670D8DLL * *(void *)this
       + *(void *)((char *)this + a2 - 8) * v3;
    uint64_t v7 = (__ROR8__(*(void *)((char *)this + a2 - 8) * v3, 30)
        + __ROR8__(0xB492B66FBE98F273 * *(void *)this + v18, 43)
        - 0x651E95C4D06FBFB1 * *(void *)((char *)this + a2 - 16)) ^ v6;
    return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                            * v3) >> 47))
         * v3;
  }
  if (a2 >= 8)
  {
    uint64_t v3 = 2 * a2 - 0x651E95C4D06FBFB1;
    uint64_t v4 = *(void *)this - 0x651E95C4D06FBFB1;
    uint64_t v5 = v4 + __ROR8__(*(void *)((char *)this + a2 - 8), 37) * v3;
    uint64_t v6 = (__ROR8__(v4, 25) + *(void *)((char *)this + a2 - 8)) * v3;
    uint64_t v7 = v6 ^ v5;
    return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                            * v3) >> 47))
         * v3;
  }
  if (a2 >= 4)
  {
    uint64_t v2 = 2 * a2 - 0x651E95C4D06FBFB1;
    unint64_t v55 = *(unsigned int *)((char *)this + a2 - 4);
    unint64_t v56 = (a2 + 8 * *(unsigned int *)this) ^ v55;
LABEL_12:
    unint64_t v57 = (v55 ^ ((v56 * v2) >> 47) ^ (v56 * v2)) * v2;
    goto LABEL_13;
  }
  if (!a2) {
    return v2;
  }
  unint64_t v57 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8)));
LABEL_13:
  v2 *= v57 ^ (v57 >> 47);
  return v2;
}

void **absl::lts_2020_02_25::VerifyTree(void **a1)
{
  if (!a1) {
    return a1;
  }
  unint64_t v2 = 2;
  unint64_t v37 = 0;
  uint64_t v38 = a1;
  uint64_t v3 = "tag == CONCAT";
  uint64_t v4 = "concat";
  do
  {
    uint64_t v6 = v38;
    if ((v2 & 1) == 0) {
      uint64_t v6 = (void **)&v38;
    }
    uint64_t v7 = (void **)v6[(v2 >> 1) - 1];
    unint64_t v37 = v2 - 2;
    if (!v7)
    {
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E3F0;
      strcpy(v36.__r_.__value_.__l.__data_, "Check node != nullptr failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v35 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v19 = v35;
      }
      else {
        std::string::size_type v19 = v34;
      }
      std::string::append(&v36, p_p, v19);
      if ((char)v35 < 0) {
        operator delete(__p);
      }
      ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1906, &v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
    }
    if (v7 != a1 && !*v7)
    {
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E400;
      strcpy(v36.__r_.__value_.__l.__data_, "Check node->length != 0 failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v35 & 0x80u) == 0) {
        uint64_t v20 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v20 = (const std::string::value_type *)__p;
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v21 = v35;
      }
      else {
        std::string::size_type v21 = v34;
      }
      std::string::append(&v36, v20, v21);
      if ((char)v35 < 0) {
        operator delete(__p);
      }
      ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1908, &v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
    }
    unsigned int v8 = *((unsigned __int8 *)v7 + 12);
    if (*((unsigned char *)v7 + 12))
    {
      if (v8 >= 3)
      {
        if (v8 >= 0x81) {
          uint64_t v5 = 32 * v8 - 3072;
        }
        else {
          uint64_t v5 = 8 * v8;
        }
        if ((unint64_t)*v7 <= v5 - 13) {
          goto LABEL_7;
        }
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E440;
        strcpy(v36.__r_.__value_.__l.__data_, "Check node->length <= TagToLength(node->tag) failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          unint64_t v26 = (const std::string::value_type *)&__p;
        }
        else {
          unint64_t v26 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v27 = v35;
        }
        else {
          std::string::size_type v27 = v34;
        }
        std::string::append(&v36, v26, v27);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1925, &v36);
        goto LABEL_102;
      }
      if (v8 == 1)
      {
        if (v7[2]) {
          goto LABEL_7;
        }
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E430;
        strcpy(v36.__r_.__value_.__l.__data_, "Check node->external()->base != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          uint64_t v9 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v9 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v10 = v35;
        }
        else {
          std::string::size_type v10 = v34;
        }
        std::string::append(&v36, v9, v10);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1928, &v36);
        goto LABEL_102;
      }
      unint64_t v14 = (unint64_t)v7[2];
      unint64_t v15 = *(void *)v7[3];
      if (v14 < v15)
      {
        if ((unint64_t)*v7 + v14 <= v15) {
          goto LABEL_7;
        }
LABEL_40:
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E420;
        strcpy(v36.__r_.__value_.__l.__data_, "Check node->substring()->start + node->length <= node->substring()->child->length failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          unint64_t v16 = (const std::string::value_type *)&__p;
        }
        else {
          unint64_t v16 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v17 = v35;
        }
        else {
          std::string::size_type v17 = v34;
        }
        std::string::append(&v36, v16, v17);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1935, &v36);
LABEL_102:
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        goto LABEL_7;
      }
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
      *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E410;
      strcpy(v36.__r_.__value_.__l.__data_, "Check node->substring()->start < node->substring()->child->length failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v35 & 0x80u) == 0) {
        unint64_t v28 = (const std::string::value_type *)&__p;
      }
      else {
        unint64_t v28 = (const std::string::value_type *)__p;
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v29 = v35;
      }
      else {
        std::string::size_type v29 = v34;
      }
      std::string::append(&v36, v28, v29);
      if ((char)v35 < 0) {
        operator delete(__p);
      }
      ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1932, &v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (*((unsigned char *)v7 + 12) != 2)
      {
        int v32 = 116;
        uint64_t v4 = "substring";
        uint64_t v3 = "tag == SUBSTRING";
LABEL_123:
        __assert_rtn(v4, "cord.cc", v32, v3);
      }
      if ((char *)v7[2] + (unint64_t)*v7 > (char *)*(void *)v7[3]) {
        goto LABEL_40;
      }
    }
    else
    {
      if (!v7[2])
      {
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E450;
        strcpy(v36.__r_.__value_.__l.__data_, "Check node->concat()->left != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          uint64_t v22 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v22 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v23 = v35;
        }
        else {
          std::string::size_type v23 = v34;
        }
        std::string::append(&v36, v22, v23);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1913, &v36);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (*((unsigned char *)v7 + 12))
        {
LABEL_122:
          int v32 = 106;
          goto LABEL_123;
        }
      }
      uint64_t v11 = v7[3];
      if (!v11)
      {
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E460;
        strcpy(v36.__r_.__value_.__l.__data_, "Check node->concat()->right != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          uint64_t v24 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v24 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v25 = v35;
        }
        else {
          std::string::size_type v25 = v34;
        }
        std::string::append(&v36, v24, v25);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1915, &v36);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (*((unsigned char *)v7 + 12)) {
          goto LABEL_122;
        }
        uint64_t v11 = v7[3];
      }
      if (*v7 != (void *)(*v11 + *(void *)v7[2]))
      {
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_23CE7E470;
        strcpy(v36.__r_.__value_.__l.__data_, "Check (node->length == node->concat()->left->length + node->concat()->right->length) failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v35 & 0x80u) == 0) {
          uint64_t v12 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v12 = (const std::string::value_type *)__p;
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v13 = v35;
        }
        else {
          std::string::size_type v13 = v34;
        }
        std::string::append(&v36, v12, v13);
        if ((char)v35 < 0) {
          operator delete(__p);
        }
        ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1918, &v36);
        goto LABEL_102;
      }
    }
LABEL_7:
    unint64_t v2 = v37;
  }
  while (v37 > 1);
  if (v37)
  {
    unint64_t v30 = v38;
    if (v38) {
      memset(v38, 171, (4 * v37) & 0x7FFFFFFFFFFFFFF8);
    }
    operator delete(v30);
  }
  return a1;
}

void sub_23CB436FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 113) < 0)
  {
    operator delete(*(void **)(v32 - 136));
    uint64_t v33 = *(void *)(v32 - 112);
    if (v33)
    {
LABEL_6:
      unsigned __int8 v35 = *(void **)(v32 - 104);
      if (v35) {
        memset(*(void **)(v32 - 104), 171, (4 * v33) & 0xFFFFFFFFFFFFFFF8);
      }
      operator delete(v35);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v33 = *(void *)(v32 - 112);
    if (v33) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::Cord::DestroyCordSlow(void ***this)
{
  if (*((char *)this + 15) <= 15)
  {
    absl::lts_2020_02_25::VerifyTree(0);
  }
  else
  {
    uint64_t v1 = (atomic_uint *)absl::lts_2020_02_25::VerifyTree(*this);
    if (v1)
    {
      int add = atomic_fetch_add(v1 + 2, 0xFFFFFFFF);
      if (add <= 0) {
        absl::lts_2020_02_25::Cord::DestroyCordSlow();
      }
      if (add == 1)
      {
        absl::lts_2020_02_25::UnrefInternal(v1);
      }
    }
  }
}

uint64_t absl::lts_2020_02_25::ReportError(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Error at node ", 14);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" in:", 4);
  int v4 = 0;
  unint64_t v86 = 0;
  unint64_t v83 = 0;
  __b = &v84;
  unint64_t v75 = &v87;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        *(void *)((char *)&v76[3] + *(void *)(v76[0] - 24)) = 3;
        atomic_load_explicit((atomic_uint *volatile)(a2 + 8), memory_order_acquire);
        std::ostream::operator<<();
        uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
        *(void *)((char *)v5 + *(void *)(*v5 - 24) + 24) = 7;
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" [", 2);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"]", 1);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
        if (*(unsigned char *)(a2 + 12)
          || (unsigned int v7 = *(unsigned __int8 *)(a2 + 13), v7 < 0x10)
          || v7 <= 0x2F
          && *(void *)a2 >= *(void *)((char *)&absl::lts_2020_02_25::min_length + ((4 * v7) & 0x3F8)))
        {
          std::string::value_type v8 = 98;
        }
        else
        {
          std::string::value_type v8 = 117;
        }
        __p.__r_.__value_.__s.__data_[0] = v8;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
        *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = v4;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"", 0);
        int v10 = *(unsigned __int8 *)(a2 + 12);
        if (v10 != 2) {
          break;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"SUBSTRING @ ", 12);
        if (*(unsigned char *)(a2 + 12) != 2
          || (unint64_t v14 = (void *)std::ostream::operator<<(),
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1),
              *(unsigned char *)(a2 + 12) != 2))
        {
          int v64 = 116;
          uint64_t v66 = "substring";
          uint64_t v67 = "tag == SUBSTRING";
          unint64_t v65 = "cord.cc";
          goto LABEL_136;
        }
        ++v4;
        a2 = *(void *)(a2 + 24);
      }
      if (v10 == 1) {
        break;
      }
      if (*(unsigned char *)(a2 + 12))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"FLAT cap=", 9);
        unint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" [", 2);
        unint64_t v18 = *(void *)a2;
        unint64_t v16 = (const void *)(a2 + 13);
        size_t v17 = v18;
        if (v18 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 >= 0x17)
        {
          uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v20 = v17 | 7;
          }
          uint64_t v21 = v20 + 1;
          p_dst = (void ***)operator new(v20 + 1);
          std::string::size_type v80 = v17;
          int64_t v81 = v21 | 0x8000000000000000;
          __dst = (void **)p_dst;
        }
        else
        {
          HIBYTE(v81) = v17;
          p_dst = &__dst;
          if (!v17) {
            goto LABEL_30;
          }
        }
        memmove(p_dst, v16, v17);
LABEL_30:
        *((unsigned char *)p_dst + v17) = 0;
        if (v81 >= 0) {
          uint64_t v22 = (std::string::value_type *)&__dst;
        }
        else {
          uint64_t v22 = (std::string::value_type *)__dst;
        }
        if (v81 >= 0) {
          std::string::size_type v23 = HIBYTE(v81);
        }
        else {
          std::string::size_type v23 = v80;
        }
        absl::lts_2020_02_25::CEscape(v22, v23, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        goto LABEL_58;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"CONCAT depth=", 13);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
      ++v4;
      unint64_t v33 = v83;
      unint64_t v34 = v83 & 1;
      if (v83) {
        unsigned __int8 v35 = (char *)v84;
      }
      else {
        unsigned __int8 v35 = (char *)&v84;
      }
      if (v83) {
        unint64_t v36 = v85;
      }
      else {
        unint64_t v36 = 47;
      }
      if (v83 >> 1 != v36)
      {
        *(_DWORD *)&v35[4 * (v83 >> 1)] = v4;
        goto LABEL_93;
      }
      if (((v36 >> 61) & 3) != 0) {
        goto LABEL_151;
      }
      unint64_t v37 = operator new(8 * v36);
      uint64_t v38 = v37;
      *((_DWORD *)v37 + v36) = v4;
      if (v33 >= 2)
      {
        unint64_t v39 = 0;
        if (v36 < 8)
        {
          uint64_t v40 = v35;
        }
        else
        {
          uint64_t v40 = v35;
          if ((unint64_t)((char *)v37 - v35) >= 0x20)
          {
            unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v40 = &v35[4 * (v36 & 0xFFFFFFFFFFFFFFF8)];
            uint64_t v41 = v37 + 1;
            uint64_t v42 = (long long *)(v35 + 16);
            unint64_t v43 = v36 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v44 = *v42;
              *(v41 - 1) = *(v42 - 1);
              _OWORD *v41 = v44;
              v41 += 2;
              v42 += 2;
              v43 -= 8;
            }
            while (v43);
            if (v36 == v39) {
              goto LABEL_88;
            }
          }
        }
        unint64_t v45 = v36 - v39;
        uint64_t v46 = (_DWORD *)v37 + v39;
        do
        {
          int v47 = *(_DWORD *)v40;
          v40 += 4;
          *v46++ = v47;
          --v45;
        }
        while (v45);
      }
LABEL_88:
      if (v35)
      {
        memset(v35, 171, 4 * v36);
        unint64_t v33 = v83;
        unint64_t v34 = v83 & 1;
      }
      if (v34)
      {
        operator delete(v84);
        unint64_t v33 = v83;
      }
      int64_t v84 = v38;
      uint64_t v85 = 2 * v36;
      v33 |= 1uLL;
LABEL_93:
      unint64_t v83 = v33 + 2;
      if (*(unsigned char *)(a2 + 12)) {
        goto LABEL_117;
      }
      unint64_t v48 = v86;
      unint64_t v49 = v86 & 1;
      if (v86) {
        uint64_t v50 = (char *)v87;
      }
      else {
        uint64_t v50 = (char *)&v87;
      }
      if (v86) {
        unint64_t v51 = v88;
      }
      else {
        unint64_t v51 = 47;
      }
      if (v86 >> 1 != v51)
      {
        *(void *)&v50[8 * (v86 >> 1)] = *(void *)(a2 + 24);
        unint64_t v86 = v48 + 2;
        goto LABEL_3;
      }
      if (((v51 >> 60) & 7) != 0) {
LABEL_151:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v52 = operator new(16 * v51);
      unint64_t v53 = v52;
      *((void *)v52 + v51) = *(void *)(a2 + 24);
      if (v48 >= 2)
      {
        unint64_t v54 = 0;
        if (v51 < 4)
        {
          unint64_t v55 = v50;
LABEL_110:
          unint64_t v60 = v51 - v54;
          size_t v61 = (void *)v52 + v54;
          do
          {
            uint64_t v62 = *(void *)v55;
            v55 += 8;
            *v61++ = v62;
            --v60;
          }
          while (v60);
          goto LABEL_112;
        }
        unint64_t v55 = v50;
        if ((unint64_t)((char *)v52 - v50) < 0x20) {
          goto LABEL_110;
        }
        unint64_t v54 = v51 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v55 = &v50[8 * (v51 & 0xFFFFFFFFFFFFFFFCLL)];
        unint64_t v56 = v52 + 1;
        unint64_t v57 = (long long *)(v50 + 16);
        unint64_t v58 = v51 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v59 = *v57;
          *(v56 - 1) = *(v57 - 1);
          _OWORD *v56 = v59;
          v56 += 2;
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        if (v51 != v54) {
          goto LABEL_110;
        }
      }
LABEL_112:
      if (v50)
      {
        memset(v50, 171, 8 * v51);
        unint64_t v48 = v86;
        unint64_t v49 = v86 & 1;
      }
      if (v49)
      {
        operator delete(v87);
        unint64_t v48 = v86;
      }
      uint64_t v88 = 2 * v51;
      uint64_t v87 = v53;
      int v63 = *(unsigned __int8 *)(a2 + 12);
      unint64_t v86 = (v48 | 1) + 2;
      if (v63)
      {
LABEL_117:
        int v64 = 106;
        unint64_t v65 = "cord.cc";
        uint64_t v66 = "concat";
        uint64_t v67 = "tag == CONCAT";
        goto LABEL_136;
      }
LABEL_3:
      a2 = *(void *)(a2 + 16);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"EXTERNAL [", 10);
    if (*(unsigned char *)(a2 + 12) != 1) {
      __assert_rtn("external", "cord.cc", 126, "tag == EXTERNAL");
    }
    size_t v11 = *(void *)a2;
    if (*(void *)a2 > 0x7FFFFFFFFFFFFFF7uLL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = *(const void **)(a2 + 16);
    if (v11 >= 0x17)
    {
      uint64_t v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v26 = v11 | 7;
      }
      uint64_t v27 = v26 + 1;
      std::string::size_type v13 = (void ***)operator new(v26 + 1);
      std::string::size_type v80 = v11;
      int64_t v81 = v27 | 0x8000000000000000;
      __dst = (void **)v13;
    }
    else
    {
      HIBYTE(v81) = v11;
      std::string::size_type v13 = &__dst;
      if (!v11) {
        goto LABEL_46;
      }
    }
    memmove(v13, v12, v11);
LABEL_46:
    *((unsigned char *)v13 + v11) = 0;
    unint64_t v28 = v81 >= 0 ? (std::string::value_type *)&__dst : (std::string::value_type *)__dst;
    std::string::size_type v29 = v81 >= 0 ? HIBYTE(v81) : v80;
    absl::lts_2020_02_25::CEscape(v28, v29, &__p);
    p_p = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type size = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
LABEL_58:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v81) & 0x80000000) == 0) {
        goto LABEL_60;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(__dst);
LABEL_60:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"]\n", 2);
    if (v86 < 2) {
      break;
    }
    unint64_t v30 = v87;
    if ((v86 & 1) == 0) {
      unint64_t v30 = &v87;
    }
    a2 = v30[(v86 >> 1) - 1];
    v86 -= 2;
    if (v83 < 2)
    {
      int v64 = 373;
      uint64_t v66 = "back";
      unint64_t v65 = "inlined_vector.h";
      uint64_t v67 = "!empty()";
LABEL_136:
      __assert_rtn(v66, v65, v64, v67);
    }
    unint64_t v31 = v84;
    if ((v83 & 1) == 0) {
      unint64_t v31 = &v84;
    }
    int v4 = v31[(v83 >> 1) - 1];
    v83 -= 2;
  }
  unint64_t v68 = v83;
  if (v83 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Check indents.empty() failed: ");
    std::string::basic_string[abi:ne180100]<0>(&__dst, "");
    if (v81 >= 0) {
      uint64_t v72 = (const std::string::value_type *)&__dst;
    }
    else {
      uint64_t v72 = (const std::string::value_type *)__dst;
    }
    if (v81 >= 0) {
      std::string::size_type v73 = HIBYTE(v81);
    }
    else {
      std::string::size_type v73 = v80;
    }
    std::string::append(&__p, v72, v73);
    if (SHIBYTE(v81) < 0) {
      operator delete(__dst);
    }
    ((void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load_explicit((atomic_ullong *volatile)absl::lts_2020_02_25::raw_logging_internal::internal_log_function, memory_order_acquire))(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1888, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v68 = v83;
    if ((v83 & 1) == 0) {
      goto LABEL_121;
    }
LABEL_120:
    __b = v84;
    if (v84) {
      goto LABEL_121;
    }
    size_t v69 = 0;
LABEL_124:
    operator delete(v69);
  }
  else
  {
    if (v83) {
      goto LABEL_120;
    }
LABEL_121:
    memset(__b, 171, (2 * v68) & 0xFFFFFFFFFFFFFFFCLL);
    if (v83)
    {
      size_t v69 = v84;
      goto LABEL_124;
    }
  }
  if ((v86 & 1) != 0 && (unint64_t v75 = v87) == 0)
  {
    int v70 = 0;
LABEL_130:
    operator delete(v70);
  }
  else
  {
    memset(v75, 171, (4 * v86) & 0xFFFFFFFFFFFFFFF8);
    if (v86)
    {
      int v70 = v87;
      goto LABEL_130;
    }
  }
  std::stringbuf::str();
  v76[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v76 + *(void *)(v76[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v76[1] = MEMORY[0x263F8C318] + 16;
  if (v77 < 0) {
    operator delete((void *)v76[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23ECF2B10](&v78);
}

void sub_23CB442B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__b, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if ((a55 & 1) == 0 || (__b = a56) != 0)
  {
    memset(__b, 171, (2 * a55) & 0xFFFFFFFFFFFFFFFCLL);
    if ((a55 & 1) == 0)
    {
LABEL_9:
      if (STACK[0x220])
      {
        a12 = (void *)STACK[0x228];
        if (!STACK[0x228])
        {
          operator delete(0);
          std::ostringstream::~ostringstream((uint64_t)&a13);
          _Unwind_Resume(a1);
        }
      }
      memset(a12, 171, (4 * STACK[0x220]) & 0xFFFFFFFFFFFFFFF8);
      if (STACK[0x220]) {
        operator delete((void *)STACK[0x228]);
      }
      std::ostringstream::~ostringstream((uint64_t)&a13);
      _Unwind_Resume(a1);
    }
    unint64_t v57 = a56;
  }
  else
  {
    unint64_t v57 = 0;
  }
  operator delete(v57);
  goto LABEL_9;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_23CB44578(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](a1 + 112);
  return a1;
}

void *absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector(void *a1)
{
  uint64_t v3 = (void **)(a1 + 1);
  uint64_t v2 = *a1;
  uint64_t v4 = a1 + 1;
  if (v2)
  {
    uint64_t v4 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
  }
  memset(v4, 171, (4 * v2) & 0xFFFFFFFFFFFFFFF8);
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = *v3;
LABEL_5:
    operator delete(v4);
  }
  return a1;
}

void absl::lts_2020_02_25::UnrefInternal(atomic_uint *__p)
{
  uint64_t v35 = v6;
  uint64_t v36 = v5;
  uint64_t v37 = v4;
  uint64_t v38 = v3;
  uint64_t v39 = v2;
  uint64_t v40 = v1;
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!__p) {
    absl::lts_2020_02_25::UnrefInternal();
  }
  unsigned int v7 = __p;
  unint64_t v31 = 0;
  p_pa = &__pa;
  while (1)
  {
    while (1)
    {
      int v9 = *((unsigned __int8 *)v7 + 12);
      if (v9 != 2)
      {
        if (v9 == 1)
        {
          (*((void (**)(unsigned __int8 *, void, void))v7 + 3))((unsigned __int8 *)v7 + 32, *((void *)v7 + 2), *(void *)v7);
LABEL_25:
          operator delete(v7);
          break;
        }
        if (*((unsigned char *)v7 + 12)) {
          goto LABEL_25;
        }
        uint64_t v10 = *((void *)v7 + 3);
        int explicit = atomic_load_explicit((atomic_uint *volatile)(v10 + 8), memory_order_acquire);
        if (explicit <= 0) {
          __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
        }
        if (explicit != 1 && atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) != 1) {
          goto LABEL_42;
        }
        unint64_t v12 = v31;
        unint64_t v13 = v31 & 1;
        if (v31) {
          unint64_t v14 = (char *)__pa;
        }
        else {
          unint64_t v14 = (char *)&__pa;
        }
        if (v31) {
          unint64_t v15 = v33;
        }
        else {
          unint64_t v15 = 47;
        }
        if (v31 >> 1 != v15)
        {
          *(void *)&v14[8 * (v31 >> 1)] = v10;
LABEL_41:
          unint64_t v31 = v12 + 2;
LABEL_42:
          std::string::size_type v25 = (atomic_uint *)*((void *)v7 + 2);
          MEMORY[0x23ECF2BC0](v7, 0x1020C40F492414DLL);
          int v26 = atomic_load_explicit(v25 + 2, memory_order_acquire);
          if (v26 <= 0) {
            __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
          }
          goto LABEL_43;
        }
        if (((v15 >> 60) & 7) != 0) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v16 = operator new(16 * v15);
        size_t v17 = (char *)v16;
        *((void *)v16 + v15) = v10;
        if (v12 >= 2)
        {
          unint64_t v18 = 0;
          if (v15 < 4)
          {
            std::string::size_type v19 = v14;
          }
          else
          {
            std::string::size_type v19 = v14;
            if ((unint64_t)((char *)v16 - v14) >= 0x20)
            {
              unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
              std::string::size_type v19 = &v14[8 * (v15 & 0xFFFFFFFFFFFFFFFCLL)];
              uint64_t v20 = v16 + 1;
              uint64_t v21 = (long long *)(v14 + 16);
              unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                long long v23 = *v21;
                *(v20 - 1) = *(v21 - 1);
                _OWORD *v20 = v23;
                v20 += 2;
                v21 += 2;
                v22 -= 4;
              }
              while (v22);
              if (v15 == v18) {
                goto LABEL_36;
              }
            }
          }
          unint64_t v27 = v15 - v18;
          unint64_t v28 = &v17[8 * v18];
          do
          {
            uint64_t v29 = *(void *)v19;
            v19 += 8;
            *(void *)unint64_t v28 = v29;
            v28 += 8;
            --v27;
          }
          while (v27);
        }
LABEL_36:
        if (v14)
        {
          memset(v14, 171, 8 * v15);
          unint64_t v12 = v31;
          unint64_t v13 = v31 & 1;
        }
        if (v13)
        {
          operator delete(__pa);
          unint64_t v12 = v31;
        }
        __pa = v17;
        uint64_t v33 = 2 * v15;
        v12 |= 1uLL;
        goto LABEL_41;
      }
      std::string::size_type v25 = (atomic_uint *)*((void *)v7 + 3);
      MEMORY[0x23ECF2BC0](v7, 0x1020C4086E87781);
      int v26 = atomic_load_explicit(v25 + 2, memory_order_acquire);
      if (v26 <= 0) {
        __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
      }
LABEL_43:
      unsigned int v7 = v25;
      if (v26 != 1)
      {
        unsigned int v7 = v25;
        if (atomic_fetch_add(v25 + 2, 0xFFFFFFFF) != 1) {
          break;
        }
      }
    }
    if (v31 < 2) {
      break;
    }
    uint64_t v24 = __pa;
    if ((v31 & 1) == 0) {
      uint64_t v24 = &__pa;
    }
    unsigned int v7 = (atomic_uint *)v24[(v31 >> 1) - 1];
    v31 -= 2;
  }
  if (v31 && (p_pa = __pa) == 0)
  {
    unint64_t v30 = 0;
LABEL_51:
    operator delete(v30);
  }
  else
  {
    memset(p_pa, 171, (4 * v31) & 0x7FFFFFFFFFFFFFF8);
    if (v31)
    {
      unint64_t v30 = __pa;
      goto LABEL_51;
    }
  }
}

void sub_23CB44A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB44A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB44A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB44AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB44AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

absl::lts_2020_02_25::synchronization_internal::GraphCycles *absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(absl::lts_2020_02_25::synchronization_internal::GraphCycles *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = _MergedGlobals_23;
  if ((_MergedGlobals_23 & 1) == 0)
  {
    atomic_compare_exchange_strong_explicit(&_MergedGlobals_23, (unsigned int *)&v9, v9 | 1, memory_order_acquire, memory_order_acquire);
    if ((v9 & 1) == 0)
    {
      if (qword_26AED0C70) {
        goto LABEL_4;
      }
LABEL_7:
      qword_26AED0C70 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(0, a2, a3, a4, a5, a6, a7, a8);
      unsigned int v10 = atomic_exchange_explicit(&_MergedGlobals_23, _MergedGlobals_23 & 2, memory_order_release);
      if (v10 < 8) {
        goto LABEL_5;
      }
LABEL_8:
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_23, v10);
      goto LABEL_5;
    }
  }
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_23, a2, a3, a4, a5, a6, a7, a8);
  if (!qword_26AED0C70) {
    goto LABEL_7;
  }
LABEL_4:
  unsigned int v10 = atomic_exchange_explicit(&_MergedGlobals_23, _MergedGlobals_23 & 2, memory_order_release);
  if (v10 >= 8) {
    goto LABEL_8;
  }
LABEL_5:
  size_t v11 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x8128uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
  *size_t v11 = v11 + 1;
  v11[9] = 0x800000000;
  v11[10] = v11 + 11;
  v11[15] = 0x800000000;
  v11[16] = v11;
  memset(v11 + 17, 255, 0x7FACuLL);
  v11[4103] = v11 + 4104;
  v11[4108] = 0x800000000;
  v11[4109] = v11 + 4110;
  v11[4114] = 0x800000000;
  v11[4115] = v11 + 4116;
  v11[4120] = 0x800000000;
  v11[4121] = v11 + 4122;
  v11[4126] = 0x800000000;
  v11[4127] = v11 + 4128;
  v11[4132] = 0x800000000;
  *(void *)this = v11;
  return this;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::NodeSet::insert(absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *((_DWORD *)this + 10) - 1;
  int v9 = *(absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet **)this;
  unsigned int v10 = v8 & (41 * a2);
  int v11 = *(_DWORD *)(*(void *)this + 4 * v10);
  if (v11 == a2) {
    return 0;
  }
  int v13 = -1;
  while (v11 != -1)
  {
    if (v13 < 0 && v11 == -2) {
      int v13 = v10;
    }
    unsigned int v10 = (v10 + 1) & v8;
    int v11 = *((_DWORD *)v9 + v10);
    if (v11 == a2) {
      return 0;
    }
  }
  uint64_t v15 = v13 >= 0 ? v13 : v10;
  int v16 = *((_DWORD *)v9 + v15);
  if (v16 == a2) {
    return 0;
  }
  if (v16 != -1)
  {
    *((_DWORD *)v9 + v15) = a2;
    unsigned int v18 = *((_DWORD *)this + 10);
    if (*((_DWORD *)this + 12) < v18 - (v18 >> 2)) {
      return 1;
    }
LABEL_20:
    __src = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34;
    unint64_t v35 = 0x800000000;
    std::string::size_type v19 = (char *)this + 8;
    if (v9 == (absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet *)((char *)this + 8))
    {
      unint64_t v22 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34;
      unsigned int v23 = v18;
      if (v18 >= 9)
      {
        for (unsigned int i = 8; i < v18; i *= 2)
          ;
        HIDWORD(v35) = i;
        std::string::size_type v25 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * i, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
        unint64_t v22 = v25;
        if (v35) {
          memmove(v25, v34, 4 * v35);
        }
        __src = v22;
        unsigned int v23 = *((_DWORD *)this + 10);
      }
      LODWORD(v35) = v18;
      if (v23)
      {
        memmove(v22, *(const void **)this, 4 * v23);
        unsigned int v18 = v35;
      }
      *((_DWORD *)this + 10) = 0;
      unsigned int v20 = *((_DWORD *)this + 11);
      *((_DWORD *)this + 12) = 0;
      unsigned int v21 = 2 * v18;
      if (v20 >= v21)
      {
LABEL_38:
        *((_DWORD *)this + 10) = v21;
        if (!v21)
        {
LABEL_41:
          unint64_t v31 = __src;
          if (v35)
          {
            uint64_t v32 = 4 * v35;
            do
            {
              a2 = *(unsigned int *)v31;
              if ((a2 & 0x80000000) == 0) {
              unint64_t v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v31 + 4);
              }
              v32 -= 4;
            }
            while (v32);
            unint64_t v31 = __src;
          }
          if (v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34) {
            absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v31, a2, a3, a4, a5, a6, a7, a8);
          }
          return 1;
        }
LABEL_39:
        unint64_t v29 = 0;
        uint64_t v30 = *(void *)this;
        do
          *(_DWORD *)(v30 + 4 * v29++) = -1;
        while (v29 < *((unsigned int *)this + 10));
        goto LABEL_41;
      }
    }
    else
    {
      __src = v9;
      unint64_t v35 = __PAIR64__(*((_DWORD *)this + 11), v18);
      *(void *)this = v19;
      *((void *)this + 5) = 0x800000000;
      unsigned int v20 = 8;
      *((_DWORD *)this + 12) = 0;
      unsigned int v21 = 2 * v18;
      if (v21 <= 8) {
        goto LABEL_38;
      }
    }
    do
      v20 *= 2;
    while (v20 < v21);
    *((_DWORD *)this + 11) = v20;
    int v26 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v20, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
    unint64_t v27 = v26;
    uint64_t v28 = *((unsigned int *)this + 10);
    if (v28) {
      memmove(v26, *(const void **)this, 4 * v28);
    }
    if (*(char **)this != v19) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)this, a2, a3, a4, a5, a6, a7, a8);
    }
    *(void *)this = v27;
    *((_DWORD *)this + 10) = v21;
    goto LABEL_39;
  }
  ++*((_DWORD *)this + 12);
  *((_DWORD *)v9 + v15) = a2;
  unsigned int v18 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) >= v18 - (v18 >> 2)) {
    goto LABEL_20;
  }
  return 1;
}

void sub_23CB44EF4(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, absl::lts_2020_02_25::base_internal::LowLevelAlloc *a9)
{
  if (a9 != v9) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(a9, a2, a3, a4, a5, a6, a7, a8);
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::NodeSet::~NodeSet(absl::lts_2020_02_25::base_internal::LowLevelAlloc **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(this + 1);
  int v8 = *this;
  if (v8 != v9) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(absl::lts_2020_02_25::synchronization_internal::GraphCycles *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)this;
  unint64_t v10 = a2 ^ 0xF03A5F7BF03A5F7BLL;
  uint64_t v11 = *(void *)this + 136;
  unint64_t v12 = a2 % 0x1FEB;
  uint64_t v13 = *(unsigned int *)(v11 + 4 * (a2 % 0x1FEB));
  if (v13 == -1)
  {
LABEL_4:
    int v15 = *(_DWORD *)(v9 + 120);
    if (v15)
    {
      unsigned int v16 = v15 - 1;
      uint64_t v17 = *(unsigned int *)(*(void *)(v9 + 80) + 4 * v16);
      *(_DWORD *)(v9 + 120) = v16;
      uint64_t v18 = *(void *)(*(void *)v9 + 8 * v17);
      *(void *)(v18 + 136) = 0;
      uint64_t v19 = *(void *)(**(void **)(v9 + 128) + 8 * v17);
      int v20 = *(_DWORD *)(v11 + 4 * v12);
      *(void *)(v18 + 16) = v10;
      *(_DWORD *)(v19 + 8) = v20;
      *(_DWORD *)(v11 + 4 * v12) = v17;
      return v17 | ((unint64_t)*(unsigned int *)(v18 + 4) << 32);
    }
    unint64_t v22 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x1D0uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
    unint64_t v29 = v22;
    unint64_t v30 = 0;
    *(void *)(v22 + 24) = v22 + 32;
    *(void *)(v22 + 64) = 0x800000008;
    do
      *(_DWORD *)(v22 + 4 * v30++ + 32) = -1;
    while (v30 < *(unsigned int *)(v22 + 64));
    unint64_t v31 = 0;
    *(_DWORD *)(v22 + 72) = 0;
    *(void *)(v22 + 80) = v22 + 88;
    *(void *)(v22 + 120) = 0x800000008;
    do
      *(_DWORD *)(v22 + 4 * v31++ + 88) = -1;
    while (v31 < *(unsigned int *)(v22 + 120));
    *(_DWORD *)(v22 + 128) = 0;
    *(unsigned char *)(v22 + 12) = 0;
    uint64_t v32 = *(void *)this;
    unsigned int v33 = *(_DWORD *)(*(void *)this + 72);
    *(_DWORD *)unint64_t v22 = v33;
    *(_DWORD *)(v22 + 4) = 1;
    *(void *)(v22 + 16) = v10;
    *(void *)(v22 + 136) = 0;
    if (v33 != *(_DWORD *)(v32 + 76))
    {
      uint64_t v42 = *(void **)v32;
      unsigned int v44 = v33;
LABEL_22:
      v42[v44] = v29;
      *(_DWORD *)(v32 + 72) = v44 + 1;
      uint64_t v45 = *(void *)this + 128 + 4 * v12;
      *(_DWORD *)(*(void *)(**(void **)(*(void *)this + 128) + 8 * v33) + 8) = *(_DWORD *)(v45 + 8);
      *(_DWORD *)(v45 + 8) = v33;
      return *(void *)v29;
    }
    unsigned int v34 = v33 + 1;
    if (v33 == -1)
    {
      uint64_t v42 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x7FFFFFFF8uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
      uint64_t v43 = *(unsigned int *)(v32 + 72);
      if (!v43) {
        goto LABEL_17;
      }
    }
    else
    {
      do
        v33 *= 2;
      while (v33 < v34);
      *(_DWORD *)(v32 + 76) = v33;
      uint64_t v42 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(8 * v33, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
      uint64_t v43 = *(unsigned int *)(v32 + 72);
      if (!v43) {
        goto LABEL_17;
      }
    }
    memmove(v42, *(const void **)v32, 8 * v43);
LABEL_17:
    if (*(void *)v32 != v32 + 8) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v32, v35, v36, v37, v38, v39, v40, v41);
    }
    *(void *)uint64_t v32 = v42;
    unsigned int v44 = *(_DWORD *)(v32 + 72);
    unsigned int v33 = *(_DWORD *)v29;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(**(void **)(v9 + 128) + 8 * v13);
    if (*(void *)(v14 + 16) == v10) {
      return v13 | ((unint64_t)*(unsigned int *)(*(void *)(*(void *)v9 + 8 * v13) + 4) << 32);
    }
    uint64_t v13 = *(unsigned int *)(v14 + 8);
    if (v13 == -1) {
      goto LABEL_4;
    }
  }
}

void absl::lts_2020_02_25::synchronization_internal::GraphCycles::RemoveNode(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *this;
  unint64_t v9 = (unint64_t)*this + 4 * (a2 % 0x1FEBuLL);
  unsigned int v12 = *(_DWORD *)(v9 + 136);
  unint64_t v10 = (_DWORD *)(v9 + 136);
  uint64_t v11 = v12;
  if (v12 == -1) {
    return;
  }
  uint64_t v14 = *(void *)v8[16];
  uint64_t v15 = *(void *)(v14 + 8 * v11);
  if (*(void *)(v15 + 16) == (a2 ^ 0xF03A5F7BF03A5F7BLL))
  {
LABEL_6:
    LODWORD(v17) = 0;
    *unint64_t v10 = *(_DWORD *)(v15 + 8);
    *(_DWORD *)(v15 + 8) = -1;
    uint64_t v18 = *v8;
    uint64_t v19 = *(void *)(v18 + 8 * v11);
    unsigned int v20 = 41 * v11;
LABEL_7:
    LODWORD(v21) = *(_DWORD *)(v19 + 120);
    if (v17 <= v21) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = v17;
    }
    uint64_t v17 = v17;
    while (v21 != v17)
    {
      uint64_t v22 = *(unsigned int *)(*(void *)(v19 + 80) + 4 * v17++);
      if ((v22 & 0x80000000) == 0)
      {
        uint64_t v23 = *(void *)(v18 + 8 * v22);
        uint64_t v24 = *(void *)(v23 + 24);
        int v25 = *(_DWORD *)(v23 + 64) - 1;
        uint64_t v26 = v25 & v20;
        int v27 = *(_DWORD *)(v24 + 4 * v26);
        if (v27 == v11) {
          goto LABEL_27;
        }
        int v28 = -1;
        while (v27 != -1)
        {
          if (v28 < 0 && v27 == -2) {
            int v28 = v26;
          }
          uint64_t v26 = (v26 + 1) & v25;
          int v27 = *(_DWORD *)(v24 + 4 * v26);
          if (v27 == v11) {
            goto LABEL_27;
          }
        }
        uint64_t v26 = v28 >= 0 ? v28 : v26;
        if (*(_DWORD *)(v24 + 4 * v26) == v11) {
LABEL_27:
        }
          *(_DWORD *)(v24 + 4 * v26) = -2;
        goto LABEL_7;
      }
    }
    LODWORD(v30) = 0;
    unint64_t v31 = *(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v19 + 24);
LABEL_29:
    LODWORD(v32) = *(_DWORD *)(v19 + 64);
    if (v30 <= v32) {
      uint64_t v32 = v32;
    }
    else {
      uint64_t v32 = v30;
    }
    uint64_t v30 = v30;
    while (v32 != v30)
    {
      uint64_t v33 = *((unsigned int *)v31 + v30++);
      if ((v33 & 0x80000000) == 0)
      {
        uint64_t v34 = *(void *)(v18 + 8 * v33);
        uint64_t v35 = *(void *)(v34 + 80);
        int v36 = *(_DWORD *)(v34 + 120) - 1;
        uint64_t v37 = v36 & v20;
        int v38 = *(_DWORD *)(v35 + 4 * v37);
        if (v38 == v11) {
          goto LABEL_49;
        }
        int v39 = -1;
        while (v38 != -1)
        {
          if (v39 < 0 && v38 == -2) {
            int v39 = v37;
          }
          uint64_t v37 = (v37 + 1) & v36;
          int v38 = *(_DWORD *)(v35 + 4 * v37);
          if (v38 == v11) {
            goto LABEL_49;
          }
        }
        uint64_t v37 = v39 >= 0 ? v39 : v37;
        if (*(_DWORD *)(v35 + 4 * v37) == v11) {
LABEL_49:
        }
          *(_DWORD *)(v35 + 4 * v37) = -2;
        goto LABEL_29;
      }
    }
    uint64_t v41 = v19 + 32;
    if (v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v19 + 32)) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v31, a2, a3, a4, a5, a6, a7, a8);
    }
    unint64_t v42 = 0;
    *(void *)(v19 + 24) = v41;
    *(void *)(v19 + 64) = 0x800000008;
    do
      *(_DWORD *)(v41 + 4 * v42++) = -1;
    while (v42 < *(unsigned int *)(v19 + 64));
    *(_DWORD *)(v19 + 72) = 0;
    uint64_t v43 = *(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v19 + 80);
    uint64_t v44 = v19 + 88;
    if (v43 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v19 + 88)) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v43, a2, a3, a4, a5, a6, a7, a8);
    }
    unint64_t v45 = 0;
    *(void *)(v19 + 80) = v44;
    *(void *)(v19 + 120) = 0x800000008;
    do
      *(_DWORD *)(v44 + 4 * v45++) = -1;
    while (v45 < *(unsigned int *)(v19 + 120));
    *(_DWORD *)(v19 + 128) = 0;
    *(void *)(v19 + 16) = 0xF03A5F7BF03A5F7BLL;
    int v46 = *(_DWORD *)(v19 + 4);
    if (v46 == -1) {
      return;
    }
    *(_DWORD *)(v19 + 4) = v46 + 1;
    int v47 = *this;
    unsigned int v48 = *((_DWORD *)*this + 30);
    if (v48 != *((_DWORD *)*this + 31))
    {
      unint64_t v57 = (_DWORD *)v47[10];
LABEL_70:
      v57[v48] = v11;
      ++*((_DWORD *)v47 + 30);
      return;
    }
    unsigned int v49 = v48 + 1;
    if (v48 == -1)
    {
      unint64_t v57 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
      uint64_t v58 = *((unsigned int *)v47 + 30);
      if (!v58) {
        goto LABEL_66;
      }
    }
    else
    {
      do
        v48 *= 2;
      while (v48 < v49);
      *((_DWORD *)v47 + 31) = v48;
      unint64_t v57 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v48, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
      uint64_t v58 = *((unsigned int *)v47 + 30);
      if (!v58) {
        goto LABEL_66;
      }
    }
    memmove(v57, (const void *)v47[10], 4 * v58);
LABEL_66:
    long long v59 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v47[10];
    if (v59 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v47 + 11)) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v59, v50, v51, v52, v53, v54, v55, v56);
    }
    v47[10] = (uint64_t)v57;
    unsigned int v48 = *((_DWORD *)v47 + 30);
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v11 = *(unsigned int *)(v15 + 8);
    if (v11 == -1) {
      break;
    }
    uint64_t v16 = v15;
    uint64_t v15 = *(void *)(v14 + 8 * v11);
    if (*(void *)(v15 + 16) == (a2 ^ 0xF03A5F7BF03A5F7BLL))
    {
      unint64_t v10 = (_DWORD *)(v16 + 8);
      goto LABEL_6;
    }
  }
}

unint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr(void **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(**a1 + 8 * a2);
  if (v2) {
    BOOL v3 = *(_DWORD *)(v2 + 4) == HIDWORD(a2);
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return *(void *)(v2 + 16) ^ 0xF03A5F7BF03A5F7BLL;
  }
  else {
    return 0;
  }
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::InsertEdge(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  unint64_t v10 = *a1;
  uint64_t v11 = **a1;
  if (*(_DWORD *)(*(void *)(v11 + 8 * a2) + 4) == HIDWORD(a2)) {
    unsigned int v12 = *(_DWORD **)(v11 + 8 * a2);
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(_DWORD **)(v11 + 8 * a3);
  if (v13[1] == HIDWORD(a3)) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v12) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    return 1;
  }
  if (v12 == v14) {
    return 0;
  }
  if (*v12 <= *v14) {
    return 1;
  }
  int v171 = *v12;
  int v168 = a2;
  unint64_t v29 = (const void **)(v10 + 4103);
  uint64_t v30 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4103];
  size_t v170 = v10 + 4104;
  if (v30 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4104)) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v30, v22, v23, v24, v25, v26, v27, v28);
  }
  uint64_t v167 = (const void **)(v10 + 4121);
  unint64_t v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4115);
  uint64_t v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
  *unint64_t v29 = v170;
  v10[4108] = 0x800000000;
  uint64_t v33 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
  unint64_t v169 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4128);
  if (v33 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4128)) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v33, v22, v23, v24, v25, v26, v27, v28);
  }
  v10[4127] = (uint64_t)v169;
  *((_DWORD *)v10 + 8256) = v8;
  v10[4132] = 0x800000001;
  int v34 = 1;
  v172 = (int **)(v10 + 4109);
  int v35 = v171;
  do
  {
    uint64_t v36 = *(unsigned int *)(v10[4127] + 4 * --v34);
    *((_DWORD *)v10 + 8264) = v34;
    uint64_t v37 = *(void *)(*v10 + 8 * v36);
    if (*(unsigned char *)(v37 + 12)) {
      continue;
    }
    *(unsigned char *)(v37 + 12) = 1;
    unsigned int v38 = *((_DWORD *)v10 + 8216);
    if (v38 != *((_DWORD *)v10 + 8217))
    {
      uint64_t v40 = (void *)*v29;
      goto LABEL_33;
    }
    unsigned int v39 = v38 + 1;
    if (v38 == -1)
    {
      uint64_t v40 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
      uint64_t v41 = *((unsigned int *)v10 + 8216);
      if (!v41) {
        goto LABEL_29;
      }
    }
    else
    {
      do
        v38 *= 2;
      while (v38 < v39);
      *((_DWORD *)v10 + 8217) = v38;
      uint64_t v40 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v38, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
      uint64_t v41 = *((unsigned int *)v10 + 8216);
      if (!v41) {
        goto LABEL_29;
      }
    }
    memmove(v40, *v29, 4 * v41);
LABEL_29:
    if (*v29 != v170) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*v29, v22, v23, v24, v25, v26, v27, v28);
    }
    *unint64_t v29 = v40;
    unsigned int v38 = *((_DWORD *)v10 + 8216);
    int v35 = v171;
LABEL_33:
    LODWORD(v42) = 0;
    *((_DWORD *)v40 + v38) = v36;
    ++*((_DWORD *)v10 + 8216);
LABEL_34:
    LODWORD(v43) = *(_DWORD *)(v37 + 120);
    if (v42 <= v43) {
      uint64_t v43 = v43;
    }
    else {
      uint64_t v43 = v42;
    }
    uint64_t v42 = v42;
    while (v43 != v42)
    {
      uint64_t v44 = *(unsigned int *)(*(void *)(v37 + 80) + 4 * v42++);
      if ((v44 & 0x80000000) == 0)
      {
        uint64_t v45 = *v10;
        uint64_t v46 = *(void *)(*v10 + 8 * v44);
        if (*(_DWORD *)v46 == v35)
        {
          uint64_t v135 = *((void *)v12 + 10);
          int v136 = v12[30] - 1;
          uint64_t v137 = v136 & (41 * v8);
          int v138 = *(_DWORD *)(v135 + 4 * v137);
          if (v138 == v8)
          {
            int v139 = v168;
            goto LABEL_171;
          }
          int v148 = -1;
          int v139 = v168;
          while (v138 != -1)
          {
            if (v148 < 0 && v138 == -2) {
              int v148 = v137;
            }
            uint64_t v137 = (v137 + 1) & v136;
            int v138 = *(_DWORD *)(v135 + 4 * v137);
            if (v138 == v8) {
              goto LABEL_171;
            }
          }
          if (v148 >= 0) {
            uint64_t v137 = v148;
          }
          else {
            uint64_t v137 = v137;
          }
          if (*(_DWORD *)(v135 + 4 * v137) == v8) {
LABEL_171:
          }
            *(_DWORD *)(v135 + 4 * v137) = -2;
          uint64_t v150 = *((void *)v14 + 3);
          int v151 = v14[16] - 1;
          uint64_t v152 = v151 & (41 * v139);
          int v153 = *(_DWORD *)(v150 + 4 * v152);
          if (v153 == v139) {
            goto LABEL_186;
          }
          int v154 = -1;
          while (v153 != -1)
          {
            if (v154 < 0 && v153 == -2) {
              int v154 = v152;
            }
            uint64_t v152 = (v152 + 1) & v151;
            int v153 = *(_DWORD *)(v150 + 4 * v152);
            if (v153 == v139) {
              goto LABEL_186;
            }
          }
          uint64_t v152 = v154 >= 0 ? v154 : v152;
          if (*(_DWORD *)(v150 + 4 * v152) == v139) {
LABEL_186:
          }
            *(_DWORD *)(v150 + 4 * v152) = -2;
          uint64_t v156 = *((unsigned int *)v10 + 8216);
          if (v156)
          {
            uint64_t v157 = (char *)*v29;
            uint64_t v158 = (v156 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v158)
            {
              uint64_t v159 = v158 + 1;
              uint64_t v160 = (v158 + 1) & 0x7FFFFFFFFFFFFFFELL;
              std::string::size_type v161 = &v157[4 * v160];
              size_t v162 = (unsigned int *)(v157 + 4);
              uint64_t v163 = v160;
              do
              {
                uint64_t v164 = *(void *)(v45 + 8 * *v162);
                *(unsigned char *)(*(void *)(v45 + 8 * *(v162 - 1)) + 12) = 0;
                *(unsigned char *)(v164 + 12) = 0;
                v162 += 2;
                v163 -= 2;
              }
              while (v163);
              if (v159 == v160) {
                return 0;
              }
            }
            else
            {
              std::string::size_type v161 = (char *)*v29;
            }
            uint64_t v165 = &v157[4 * v156];
            do
            {
              uint64_t result = 0;
              unsigned int v166 = *(_DWORD *)v161;
              v161 += 4;
              *(unsigned char *)(*(void *)(v45 + 8 * v166) + 12) = 0;
            }
            while (v161 != v165);
            return result;
          }
          return 0;
        }
        if (*(_DWORD *)v46 >= v35 || *(unsigned char *)(v46 + 12) != 0) {
          goto LABEL_34;
        }
        unsigned int v48 = *((_DWORD *)v10 + 8264);
        if (v48 == *((_DWORD *)v10 + 8265))
        {
          unsigned int v49 = v48 + 1;
          if (v48 == -1)
          {
            uint64_t v50 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
            uint64_t v51 = *((unsigned int *)v10 + 8264);
            if (!v51) {
              goto LABEL_53;
            }
LABEL_52:
            memmove(v50, (const void *)v10[4127], 4 * v51);
            goto LABEL_53;
          }
          do
            v48 *= 2;
          while (v48 < v49);
          *((_DWORD *)v10 + 8265) = v48;
          uint64_t v50 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v48, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
          uint64_t v51 = *((unsigned int *)v10 + 8264);
          if (v51) {
            goto LABEL_52;
          }
LABEL_53:
          uint64_t v52 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
          if (v52 != v169) {
            absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v52, v22, v23, v24, v25, v26, v27, v28);
          }
          v10[4127] = (uint64_t)v50;
          unsigned int v48 = *((_DWORD *)v10 + 8264);
          int v35 = v171;
        }
        else
        {
          uint64_t v50 = (void *)v10[4127];
        }
        *((_DWORD *)v50 + v48) = v44;
        ++*((_DWORD *)v10 + 8264);
        goto LABEL_34;
      }
    }
    int v34 = *((_DWORD *)v10 + 8264);
    uint64_t v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
  }
  while (v34);
  int v53 = *v14;
  uint64_t v54 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4110);
  if (*v32 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4110)) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v32, v22, v23, v24, v25, v26, v27, v28);
  }
  *uint64_t v32 = v54;
  v32[5] = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x800000000;
  uint64_t v55 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
  if (v55 != v169) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v55, v22, v23, v24, v25, v26, v27, v28);
  }
  v10[4127] = (uint64_t)v169;
  *((_DWORD *)v10 + 8256) = v168;
  int v56 = 1;
  v10[4132] = 0x800000001;
  while (2)
  {
    uint64_t v57 = *(unsigned int *)(v10[4127] + 4 * --v56);
    *((_DWORD *)v10 + 8264) = v56;
    uint64_t v58 = *(void *)(*v10 + 8 * v57);
    if (!*(unsigned char *)(v58 + 12))
    {
      *(unsigned char *)(v58 + 12) = 1;
      unsigned int v59 = *((_DWORD *)v32 + 10);
      if (v59 == *((_DWORD *)v32 + 11))
      {
        unsigned int v60 = v59 + 1;
        if (v59 == -1)
        {
          uint64_t v62 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
          uint64_t v63 = *((unsigned int *)v32 + 10);
          if (!v63) {
            goto LABEL_73;
          }
LABEL_72:
          memmove(v62, *v32, 4 * v63);
          goto LABEL_73;
        }
        do
          v59 *= 2;
        while (v59 < v60);
        *((_DWORD *)v32 + 11) = v59;
        uint64_t v62 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v59, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
        uint64_t v63 = *((unsigned int *)v32 + 10);
        if (v63) {
          goto LABEL_72;
        }
LABEL_73:
        if (*v32 != v54) {
          absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v32, v61, v23, v24, v25, v26, v27, v28);
        }
        *uint64_t v32 = v62;
        unsigned int v59 = *((_DWORD *)v32 + 10);
      }
      else
      {
        uint64_t v62 = *v32;
      }
      int v64 = v32;
      LODWORD(v32) = 0;
      *((_DWORD *)v62 + v59) = v57;
      ++*((_DWORD *)v64 + 10);
LABEL_78:
      LODWORD(v65) = *(_DWORD *)(v58 + 64);
      if (v32 <= v65) {
        unint64_t v65 = v65;
      }
      else {
        unint64_t v65 = v32;
      }
      uint64_t v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v32;
      while ((absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v65 != v32)
      {
        uint64_t v66 = *(unsigned int *)(*(void *)(v58 + 24) + 4 * (void)v32);
        uint64_t v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)((char *)v32 + 1);
        if ((v66 & 0x80000000) == 0)
        {
          uint64_t v67 = *(void *)(*v10 + 8 * v66);
          if (!*(unsigned char *)(v67 + 12) && *(_DWORD *)v67 > v53)
          {
            unsigned int v68 = *((_DWORD *)v10 + 8264);
            if (v68 == *((_DWORD *)v10 + 8265))
            {
              unsigned int v69 = v68 + 1;
              if (v68 == -1)
              {
                unint64_t v70 = 0x3FFFFFFFCLL;
              }
              else
              {
                do
                  v68 *= 2;
                while (v68 < v69);
                *((_DWORD *)v10 + 8265) = v68;
                unint64_t v70 = 4 * v68;
              }
              BOOL v71 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(v70, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v23, v24, v25, v26, v27, v28);
              std::string::size_type v73 = v71;
              uint64_t v74 = *((unsigned int *)v10 + 8264);
              if (v74) {
                memmove(v71, (const void *)v10[4127], 4 * v74);
              }
              unint64_t v75 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
              if (v75 != v169) {
                absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v75, v72, v23, v24, v25, v26, v27, v28);
              }
              v10[4127] = (uint64_t)v73;
              unsigned int v68 = *((_DWORD *)v10 + 8264);
            }
            else
            {
              std::string::size_type v73 = (_DWORD *)v10[4127];
            }
            v73[v68] = v66;
            ++*((_DWORD *)v10 + 8264);
          }
          goto LABEL_78;
        }
      }
      int v56 = *((_DWORD *)v10 + 8264);
      uint64_t v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
    }
    if (v56) {
      continue;
    }
    break;
  }
  std::string::size_type v76 = *v32;
  unint64_t v77 = *((unsigned int *)v32 + 10);
  uint64_t v78 = (unsigned int *)((char *)*v32 + 4 * v77);
  long long v173 = v10;
  unint64_t v79 = 126 - 2 * __clz(v77);
  if (v77) {
    uint64_t v80 = v79;
  }
  else {
    uint64_t v80 = 0;
  }
  int64_t v81 = *v29;
  unint64_t v82 = *((unsigned int *)v10 + 8216);
  unint64_t v83 = (unsigned int *)((char *)*v29 + 4 * v82);
  long long v173 = v10;
  unint64_t v84 = 126 - 2 * __clz(v82);
  if (v82) {
    uint64_t v85 = v84;
  }
  else {
    uint64_t v85 = 0;
  }
  uint64_t v93 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4116);
  if (*v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4116)) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v86, v87, v88, v89, v90, v91, v92);
  }
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v31 = v93;
  v10[4120] = 0x800000000;
  uint64_t v94 = *((unsigned int *)v32 + 10);
  if (v94)
  {
    int v95 = *v32;
    uint64_t v96 = (uint64_t)*v32 + 4 * v94;
    uint64_t v97 = v10 + 4116;
    while (1)
    {
      uint64_t v99 = *(unsigned int *)v95;
      uint64_t v100 = *(void *)(*v10 + 8 * v99);
      *(_DWORD *)int v95 = *(_DWORD *)v100;
      *(unsigned char *)(v100 + 12) = 0;
      unsigned int v98 = *((_DWORD *)v10 + 8240);
      if (v98 == *((_DWORD *)v10 + 8241)) {
        break;
      }
LABEL_109:
      v97[v98] = v99;
      ++*((_DWORD *)v10 + 8240);
      int v95 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v95 + 4);
      if (v95 == (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v96) {
        goto LABEL_120;
      }
    }
    unsigned int v101 = v98 + 1;
    if (v98 == -1)
    {
      uint64_t v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v87, v88, v89, v90, v91, v92);
      uint64_t v103 = *((unsigned int *)v10 + 8240);
      if (!v103) {
        goto LABEL_117;
      }
    }
    else
    {
      do
        v98 *= 2;
      while (v98 < v101);
      *((_DWORD *)v10 + 8241) = v98;
      uint64_t v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v98, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v87, v88, v89, v90, v91, v92);
      uint64_t v103 = *((unsigned int *)v10 + 8240);
      if (!v103) {
        goto LABEL_117;
      }
    }
    memmove(v97, *v31, 4 * v103);
LABEL_117:
    if (*v31 != v93) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v102, v87, v88, v89, v90, v91, v92);
    }
    absl::lts_2020_02_25::base_internal::LowLevelAlloc *v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v97;
    unsigned int v98 = *((_DWORD *)v10 + 8240);
    goto LABEL_109;
  }
  uint64_t v97 = v10 + 4116;
LABEL_120:
  uint64_t v104 = *((unsigned int *)v10 + 8216);
  if (!v104) {
    goto LABEL_134;
  }
  long long v105 = *v29;
  uint64_t v106 = (uint64_t)*v29 + 4 * v104;
  while (2)
  {
    uint64_t v108 = *v105;
    uint64_t v109 = *(void *)(*v10 + 8 * v108);
    *long long v105 = *(_DWORD *)v109;
    *(unsigned char *)(v109 + 12) = 0;
    unsigned int v107 = *((_DWORD *)v10 + 8240);
    if (v107 == *((_DWORD *)v10 + 8241))
    {
      unsigned int v110 = v107 + 1;
      if (v107 == -1)
      {
        uint64_t v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v87, v88, v89, v90, v91, v92);
        uint64_t v112 = *((unsigned int *)v10 + 8240);
        if (!v112) {
          goto LABEL_131;
        }
LABEL_130:
        memmove(v97, *v31, 4 * v112);
        goto LABEL_131;
      }
      do
        v107 *= 2;
      while (v107 < v110);
      *((_DWORD *)v10 + 8241) = v107;
      uint64_t v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v107, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v87, v88, v89, v90, v91, v92);
      uint64_t v112 = *((unsigned int *)v10 + 8240);
      if (v112) {
        goto LABEL_130;
      }
LABEL_131:
      if (*v31 != v93) {
        absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v111, v87, v88, v89, v90, v91, v92);
      }
      absl::lts_2020_02_25::base_internal::LowLevelAlloc *v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v97;
      unsigned int v107 = *((_DWORD *)v10 + 8240);
    }
    v97[v107] = v108;
    ++*((_DWORD *)v10 + 8240);
    if (++v105 != (_DWORD *)v106) {
      continue;
    }
    break;
  }
  LODWORD(v104) = *((_DWORD *)v10 + 8216);
LABEL_134:
  int v113 = *((_DWORD *)v10 + 8228);
  unsigned int v114 = v113 + v104;
  unsigned int v115 = *((_DWORD *)v10 + 8253);
  if (v115 >= v113 + (int)v104)
  {
    unint64_t v124 = *v167;
    *((_DWORD *)v10 + 8252) = v114;
    long long v127 = (int *)*v29;
    uint64_t v128 = (uint64_t)*v29 + 4 * v104;
    if (!v113) {
      goto LABEL_148;
    }
  }
  else
  {
    do
      v115 *= 2;
    while (v115 < v114);
    *((_DWORD *)v10 + 8253) = v115;
    unint64_t v116 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v115, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, v87, v88, v89, v90, v91, v92);
    unint64_t v124 = v116;
    uint64_t v125 = *((unsigned int *)v10 + 8252);
    if (v125) {
      memmove(v116, *v167, 4 * v125);
    }
    if (*v167 != v10 + 4122) {
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*v167, v117, v118, v119, v120, v121, v122, v123);
    }
    *uint64_t v167 = v124;
    int v113 = *((_DWORD *)v10 + 8228);
    unsigned int v126 = *((_DWORD *)v10 + 8216);
    *((_DWORD *)v10 + 8252) = v114;
    long long v127 = (int *)*v29;
    uint64_t v128 = (uint64_t)*v29 + 4 * v126;
    if (!v113)
    {
LABEL_148:
      if (v127 != (int *)v128)
      {
        size_t v133 = v128 - (void)v127;
        uint64_t v134 = v124;
        goto LABEL_153;
      }
      goto LABEL_154;
    }
  }
  std::string::size_type v129 = *v172;
  uint64_t v130 = (uint64_t)&(*v172)[v113];
  while (v127 != (int *)v128)
  {
    int v131 = *v127;
    BOOL v132 = *v127 >= *v129;
    if (*v127 >= *v129) {
      int v131 = *v129;
    }
    v127 += *v127 < *v129;
    v129 += v132;
    *v124++ = v131;
    if (v129 == (int *)v130) {
      goto LABEL_148;
    }
  }
  size_t v133 = v130 - (void)v129;
  uint64_t v134 = v124;
  long long v127 = v129;
LABEL_153:
  memmove(v134, v127, v133);
LABEL_154:
  uint64_t v140 = *((unsigned int *)v10 + 8240);
  if (v140)
  {
    int v141 = (int *)*v167;
    unint64_t v142 = *v31;
    uint64_t v143 = *v10;
    do
    {
      int v145 = *v141++;
      int v144 = v145;
      unsigned int v146 = *(_DWORD *)v142;
      unint64_t v142 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v142 + 4);
      **(_DWORD **)(v143 + 8 * v146) = v144;
      --v140;
    }
    while (v140);
  }
  return 1;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  unint64_t v9 = *a1;
  uint64_t v10 = **a1;
  uint64_t v11 = *(void *)(v10 + 8 * a2);
  if (v11) {
    BOOL v12 = *(_DWORD *)(v11 + 4) == HIDWORD(a2);
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return 0;
  }
  int v13 = a3;
  uint64_t v14 = *(void *)(v10 + 8 * a3);
  if (!v14 || *(_DWORD *)(v14 + 4) != HIDWORD(a3)) {
    return 0;
  }
  int v18 = a4;
  unint64_t v19 = 0;
  uint64_t v20 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v9 + 4127);
  uint64_t v40 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v41;
  uint64_t v42 = 0x800000008;
  do
    *(_DWORD *)&v41[4 * v19++] = -1;
  while (v19 < v42);
  int v43 = 0;
  uint64_t v21 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v9 + 4128);
  if ((uint64_t *)v9[4127] != v9 + 4128) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
  }
  LODWORD(v16) = 0;
  _OWORD *v20 = v21;
  *((_DWORD *)v9 + 8256) = v8;
  v9[4132] = 0x800000001;
  unsigned int v22 = 1;
  do
  {
    while (1)
    {
      uint64_t v23 = *v20;
      uint64_t v24 = v22 - 1;
      uint64_t v25 = *((unsigned int *)*v20 + v24);
      *((_DWORD *)v9 + 8264) = v24;
      if ((v25 & 0x80000000) == 0) {
        break;
      }
      LODWORD(v16) = v16 - 1;
      --v22;
      if (!v24) {
        goto LABEL_50;
      }
    }
    if ((int)v16 < v18) {
      *(void *)(a5 + 8 * (int)v16) = v25 | ((unint64_t)*(unsigned int *)(*(void *)(**a1 + 8 * v25) + 4) << 32);
    }
    if (v24 == *((_DWORD *)v9 + 8265))
    {
      do
        LODWORD(v24) = 2 * v24;
      while (v24 < v22);
      *((_DWORD *)v9 + 8265) = v24;
      uint64_t v26 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v24, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
      uint64_t v23 = v26;
      uint64_t v27 = *((unsigned int *)v9 + 8264);
      if (v27) {
        memmove(v26, *v20, 4 * v27);
      }
      if (*v20 != v21) {
        absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
      }
      _OWORD *v20 = v23;
      uint64_t v24 = *((unsigned int *)v9 + 8264);
    }
    uint64_t v16 = (v16 + 1);
    *((_DWORD *)v23 + v24) = -1;
    ++*((_DWORD *)v9 + 8264);
    if (v25 == v13) {
      goto LABEL_51;
    }
    LODWORD(v28) = 0;
LABEL_30:
    uint64_t v29 = *(void *)(*v9 + 8 * v25);
    LODWORD(v30) = *(_DWORD *)(v29 + 120);
    if (v28 <= v30) {
      uint64_t v30 = v30;
    }
    else {
      uint64_t v30 = v28;
    }
    uint64_t v28 = v28;
    while (v30 != v28)
    {
      uint64_t v31 = *(unsigned int *)(*(void *)(v29 + 80) + 4 * v28++);
      if ((v31 & 0x80000000) == 0)
      {
        {
          unsigned int v32 = *((_DWORD *)v9 + 8264);
          if (v32 == *((_DWORD *)v9 + 8265))
          {
            unsigned int v33 = v32 + 1;
            if (v32 == -1)
            {
              unint64_t v34 = 0x3FFFFFFFCLL;
            }
            else
            {
              do
                v32 *= 2;
              while (v32 < v33);
              *((_DWORD *)v9 + 8265) = v32;
              unint64_t v34 = 4 * v32;
            }
            int v35 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(v34, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_26AED0C70, a3, a4, a5, a6, a7, a8);
            uint64_t v36 = v35;
            uint64_t v37 = *((unsigned int *)v9 + 8264);
            if (v37) {
              memmove(v35, *v20, 4 * v37);
            }
            if (*v20 != v21) {
              absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
            }
            _OWORD *v20 = v36;
            unsigned int v32 = *((_DWORD *)v9 + 8264);
          }
          else
          {
            uint64_t v36 = *v20;
          }
          *((_DWORD *)v36 + v32) = v31;
          ++*((_DWORD *)v9 + 8264);
        }
        goto LABEL_30;
      }
    }
    unsigned int v22 = *((_DWORD *)v9 + 8264);
  }
  while (v22);
LABEL_50:
  uint64_t v16 = 0;
LABEL_51:
  if (v40 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v41) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v40, a2, a3, a4, a5, a6, a7, a8);
  }
  return v16;
}

void sub_23CB46250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_23CB46264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_23CB46278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Unwind_Resume(a1);
}

void **absl::lts_2020_02_25::synchronization_internal::GraphCycles::UpdateStackTrace(void **result, uint64_t a2, int a3, uint64_t (*a4)(_DWORD *, uint64_t))
{
  uint64_t v4 = *(_DWORD **)(**result + 8 * a2);
  if (v4) {
    BOOL v5 = v4[1] == HIDWORD(a2);
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && v4[34] < a3)
  {
    uint64_t result = (void **)a4(v4 + 36, 40);
    v4[34] = a3;
    v4[35] = result;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetStackTrace(void **a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(**a1 + 8 * a2);
  if (v3) {
    BOOL v4 = *(_DWORD *)(v3 + 4) == HIDWORD(a2);
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t result = *(unsigned int *)(v3 + 140);
    *a3 = v3 + 144;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<int> *)::ByRank &,int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    BOOL v12 = v11;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        uint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v98 = *(a2 - 1);
              uint64_t v99 = *v12;
              if (**(_DWORD **)(**a3 + 8 * v98) >= **(_DWORD **)(**a3 + 8 * v99)) {
                return result;
              }
              unsigned int *v12 = v98;
              goto LABEL_172;
            case 3:
              uint64_t v100 = **a3;
              uint64_t v99 = *v12;
              uint64_t v101 = v12[1];
              int v102 = **(_DWORD **)(v100 + 8 * v101);
              uint64_t v103 = *(_DWORD **)(v100 + 8 * v99);
              uint64_t v104 = *(a2 - 1);
              int v105 = **(_DWORD **)(v100 + 8 * v104);
              if (v102 >= *v103)
              {
                if (v105 < v102)
                {
                  v12[1] = v104;
                  *(a2 - 1) = v101;
                  uint64_t v160 = *v12;
                  uint64_t v159 = v12[1];
                  if (**(_DWORD **)(v100 + 8 * v159) < **(_DWORD **)(v100 + 8 * v160))
                  {
                    unsigned int *v12 = v159;
                    v12[1] = v160;
                  }
                }
              }
              else
              {
                if (v105 >= v102)
                {
                  unsigned int *v12 = v101;
                  v12[1] = v99;
                  uint64_t v166 = *(a2 - 1);
                  if (**(_DWORD **)(v100 + 8 * v166) >= *v103) {
                    return result;
                  }
                  v12[1] = v166;
                }
                else
                {
                  unsigned int *v12 = v104;
                }
LABEL_172:
                *(a2 - 1) = v99;
              }
              break;
            case 4:
              uint64_t v106 = **a3;
            case 5:
              unsigned int v107 = v12 + 2;
              uint64_t v108 = v12 + 3;
              uint64_t v109 = *(a2 - 1);
              uint64_t v110 = **a3;
              uint64_t v111 = v11[3];
              if (**(_DWORD **)(v110 + 8 * v109) < **(_DWORD **)(v110 + 8 * v111))
              {
                *uint64_t v108 = v109;
                *(a2 - 1) = v111;
                uint64_t v112 = *v108;
                int v113 = *(_DWORD **)(v110 + 8 * v112);
                uint64_t v114 = *v107;
                if (*v113 < **(_DWORD **)(v110 + 8 * v114))
                {
                  *unsigned int v107 = v112;
                  *uint64_t v108 = v114;
                  uint64_t v115 = v11[1];
                  if (*v113 < **(_DWORD **)(v110 + 8 * v115))
                  {
                    v11[1] = v112;
                    v11[2] = v115;
                    uint64_t v116 = *v11;
                    if (*v113 < **(_DWORD **)(v110 + 8 * v116))
                    {
                      *uint64_t v11 = v112;
                      v11[1] = v116;
                    }
                  }
                }
              }
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 95)
        {
          uint64_t v117 = *a3;
          if (a5)
          {
            if (v12 != a2)
            {
              uint64_t v118 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v119 = 0;
                uint64_t v120 = *v117;
                uint64_t v121 = v12;
                do
                {
                  uint64_t v124 = *v121;
                  uint64_t v123 = v121[1];
                  uint64_t v125 = *(_DWORD **)(v120 + 8 * v123);
                  uint64_t v121 = v118;
                  if (*v125 < **(_DWORD **)(v120 + 8 * v124))
                  {
                    uint64_t v126 = v119;
                    do
                    {
                      *(unsigned int *)((char *)v12 + v126 + 4) = v124;
                      if (!v126)
                      {
                        uint64_t v122 = v12;
                        goto LABEL_120;
                      }
                      uint64_t v124 = *(unsigned int *)((char *)v12 + v126 - 4);
                      v126 -= 4;
                    }
                    while (*v125 < **(_DWORD **)(v120 + 8 * v124));
                    uint64_t v122 = (unsigned int *)((char *)v12 + v126 + 4);
LABEL_120:
                    unsigned int *v122 = v123;
                  }
                  uint64_t v118 = v121 + 1;
                  v119 += 4;
                }
                while (v121 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            std::string::size_type v161 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v162 = *v117;
              do
              {
                uint64_t v164 = *v11;
                uint64_t v163 = v11[1];
                uint64_t v165 = *(_DWORD **)(v162 + 8 * v163);
                uint64_t v11 = v161;
                if (*v165 < **(_DWORD **)(v162 + 8 * v164))
                {
                  do
                  {
                    unsigned int *v161 = v164;
                    uint64_t v164 = *(v161 - 2);
                    --v161;
                  }
                  while (*v165 < **(_DWORD **)(v162 + 8 * v164));
                  unsigned int *v161 = v163;
                }
                std::string::size_type v161 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v127 = (unint64_t)(v14 - 2) >> 1;
            uint64_t v128 = *a3;
            int64_t v129 = v127;
            do
            {
              if (v127 >= v129)
              {
                uint64_t v131 = (2 * v129) | 1;
                BOOL v132 = &v12[v131];
                uint64_t v133 = *v132;
                if (2 * v129 + 2 < v14)
                {
                  uint64_t v134 = *v128;
                  if (**(_DWORD **)(*v128 + 8 * v133) < **(_DWORD **)(*v128 + 8 * v132[1]))
                  {
                    uint64_t v133 = v132[1];
                    ++v132;
                    uint64_t v131 = 2 * v129 + 2;
                  }
                }
                else
                {
                  uint64_t v134 = *v128;
                }
                uint64_t v135 = &v12[v129];
                uint64_t v136 = *v135;
                uint64_t result = *(void *)(v134 + 8 * v136);
                if (**(_DWORD **)(v134 + 8 * v133) >= *(_DWORD *)result)
                {
                  do
                  {
                    uint64_t v137 = v132;
                    *uint64_t v135 = v133;
                    if (v127 < v131) {
                      break;
                    }
                    uint64_t v138 = (2 * v131) | 1;
                    BOOL v132 = &v12[v138];
                    uint64_t v139 = 2 * v131 + 2;
                    uint64_t v133 = *v132;
                    if (v139 < v14 && **(_DWORD **)(v134 + 8 * v133) < **(_DWORD **)(v134 + 8 * v132[1]))
                    {
                      uint64_t v133 = v132[1];
                      ++v132;
                      uint64_t v138 = v139;
                    }
                    uint64_t v135 = v137;
                    uint64_t v131 = v138;
                  }
                  while (**(_DWORD **)(v134 + 8 * v133) >= *(_DWORD *)result);
                  unsigned int *v137 = v136;
                  uint64_t v128 = *a3;
                }
              }
              BOOL v130 = v129-- <= 0;
            }
            while (!v130);
            uint64_t v140 = (unint64_t)v13 >> 2;
            do
            {
              uint64_t v141 = 0;
              unsigned int v142 = *v12;
              uint64_t v143 = *a3;
              int64_t v144 = (unint64_t)(v140 - 2) >> 1;
              int v145 = v12;
              do
              {
                while (1)
                {
                  int v148 = &v145[v141];
                  unsigned int v149 = v148[1];
                  uint64_t v147 = v148 + 1;
                  uint64_t v146 = v149;
                  uint64_t v150 = (2 * v141) | 1;
                  uint64_t v141 = 2 * v141 + 2;
                  if (v141 < v140) {
                    break;
                  }
                  uint64_t v141 = v150;
                  unsigned int *v145 = v146;
                  int v145 = v147;
                  if (v150 > v144) {
                    goto LABEL_154;
                  }
                }
                uint64_t result = v147[1];
                if (**(_DWORD **)(*v143 + 8 * v146) >= **(_DWORD **)(*v143 + 8 * result))
                {
                  uint64_t v141 = v150;
                }
                else
                {
                  LODWORD(v146) = v147[1];
                  ++v147;
                }
                unsigned int *v145 = v146;
                int v145 = v147;
              }
              while (v141 <= v144);
LABEL_154:
              if (v147 == --a2)
              {
                *uint64_t v147 = v142;
              }
              else
              {
                *uint64_t v147 = *a2;
                *a2 = v142;
                uint64_t v151 = (char *)v147 - (char *)v12 + 4;
                if (v151 >= 5)
                {
                  unint64_t v152 = (((unint64_t)v151 >> 2) - 2) >> 1;
                  int v153 = &v12[v152];
                  uint64_t v154 = *v153;
                  uint64_t v155 = **a3;
                  uint64_t v156 = *v147;
                  uint64_t v157 = *(_DWORD **)(v155 + 8 * v156);
                  if (**(_DWORD **)(v155 + 8 * v154) < *v157)
                  {
                    do
                    {
                      uint64_t v158 = v153;
                      *uint64_t v147 = v154;
                      if (!v152) {
                        break;
                      }
                      unint64_t v152 = (v152 - 1) >> 1;
                      int v153 = &v12[v152];
                      uint64_t v154 = *v153;
                      uint64_t result = *v157;
                      uint64_t v147 = v158;
                    }
                    while (**(_DWORD **)(v155 + 8 * v154) < (int)result);
                    *uint64_t v158 = v156;
                  }
                }
              }
              BOOL v130 = v140-- <= 2;
            }
            while (!v130);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        uint64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = **a3;
        uint64_t v18 = *(a2 - 1);
        int v19 = **(_DWORD **)(v17 + 8 * v18);
        if ((unint64_t)v13 >= 0x201) {
          break;
        }
        uint64_t v24 = *v12;
        uint64_t v25 = *v16;
        int v26 = **(_DWORD **)(v17 + 8 * v24);
        uint64_t v27 = *(_DWORD **)(v17 + 8 * v25);
        if (v26 < *v27)
        {
          if (v19 >= v26)
          {
            *uint64_t v16 = v24;
            unsigned int *v12 = v25;
            uint64_t v45 = *(a2 - 1);
            if (**(_DWORD **)(v17 + 8 * v45) >= *v27) {
              goto LABEL_33;
            }
            unsigned int *v12 = v45;
          }
          else
          {
            *uint64_t v16 = v18;
          }
          *(a2 - 1) = v25;
LABEL_33:
          --a4;
          uint64_t v32 = *v12;
          if (a5) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v19 >= v26) {
          goto LABEL_33;
        }
        unsigned int *v12 = v18;
        *(a2 - 1) = v24;
        uint64_t v30 = *v12;
        uint64_t v31 = *v16;
        if (**(_DWORD **)(v17 + 8 * v30) >= **(_DWORD **)(v17 + 8 * v31)) {
          goto LABEL_33;
        }
        *uint64_t v16 = v30;
        unsigned int *v12 = v31;
        --a4;
        uint64_t v32 = v31;
        if (a5) {
          goto LABEL_57;
        }
LABEL_56:
        uint64_t v67 = *(int **)(v17 + 8 * v32);
        int v68 = *v67;
        if (**(_DWORD **)(v17 + 8 * *(v12 - 1)) < *v67) {
          goto LABEL_57;
        }
        if (v68 >= **(_DWORD **)(v17 + 8 * *(a2 - 1)))
        {
          uint64_t v89 = v12 + 1;
          do
          {
            BOOL v12 = v89;
            if (v89 >= a2) {
              break;
            }
            ++v89;
          }
          while (v68 >= **(_DWORD **)(v17 + 8 * *v12));
        }
        else
        {
          do
          {
            unsigned int v88 = v12[1];
            ++v12;
          }
          while (v68 >= **(_DWORD **)(v17 + 8 * v88));
        }
        uint64_t v90 = a2;
        if (v12 < a2)
        {
          uint64_t v90 = a2;
          do
            unsigned int v91 = *--v90;
          while (v68 < **(_DWORD **)(v17 + 8 * v91));
        }
        if (v12 < v90)
        {
          unsigned int v92 = *v12;
          unsigned int v93 = *v90;
          do
          {
            unsigned int *v12 = v93;
            *uint64_t v90 = v92;
            int v94 = *v67;
            do
            {
              unsigned int v95 = v12[1];
              ++v12;
              unsigned int v92 = v95;
            }
            while (v94 >= **(_DWORD **)(v17 + 8 * v95));
            do
            {
              unsigned int v96 = *--v90;
              unsigned int v93 = v96;
            }
            while (v94 < **(_DWORD **)(v17 + 8 * v96));
          }
          while (v12 < v90);
        }
        uint64_t v97 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          *uint64_t v11 = *v97;
        }
        a5 = 0;
        *uint64_t v97 = v32;
      }
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      int v22 = **(_DWORD **)(v17 + 8 * v20);
      uint64_t v23 = *(_DWORD **)(v17 + 8 * v21);
      if (v22 >= *v23)
      {
        if (v19 < v22)
        {
          *uint64_t v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v16;
          uint64_t v29 = *v12;
          if (**(_DWORD **)(v17 + 8 * v28) < **(_DWORD **)(v17 + 8 * v29))
          {
            unsigned int *v12 = v28;
            *uint64_t v16 = v29;
          }
        }
      }
      else
      {
        if (v19 >= v22)
        {
          unsigned int *v12 = v20;
          *uint64_t v16 = v21;
          uint64_t v33 = *(a2 - 1);
          if (**(_DWORD **)(v17 + 8 * v33) >= *v23) {
            goto LABEL_24;
          }
          *uint64_t v16 = v33;
        }
        else
        {
          unsigned int *v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      unint64_t v34 = &v12[v15];
      unsigned int v37 = *(v34 - 1);
      int v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v12[1];
      int v39 = **(_DWORD **)(v17 + 8 * v37);
      uint64_t v40 = *(_DWORD **)(v17 + 8 * v38);
      uint64_t v41 = *(a2 - 2);
      int v42 = **(_DWORD **)(v17 + 8 * v41);
      if (v39 >= *v40)
      {
        if (v42 < v39)
        {
          unsigned int *v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v12[1];
          if (**(_DWORD **)(v17 + 8 * v43) < **(_DWORD **)(v17 + 8 * v44))
          {
            v12[1] = v43;
            unsigned int *v35 = v44;
          }
        }
      }
      else
      {
        if (v42 >= v39)
        {
          v12[1] = v36;
          unsigned int *v35 = v38;
          uint64_t v46 = *(a2 - 2);
          if (**(_DWORD **)(v17 + 8 * v46) >= *v40) {
            goto LABEL_38;
          }
          unsigned int *v35 = v46;
        }
        else
        {
          v12[1] = v41;
        }
        *(a2 - 2) = v38;
      }
LABEL_38:
      int v47 = &v12[v15];
      unsigned int v50 = v47[1];
      unsigned int v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v12[2];
      int v52 = **(_DWORD **)(v17 + 8 * v50);
      int v53 = *(_DWORD **)(v17 + 8 * v51);
      uint64_t v54 = *(a2 - 3);
      int v55 = **(_DWORD **)(v17 + 8 * v54);
      if (v52 >= *v53)
      {
        if (v55 < v52)
        {
          *unsigned int v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v12[2];
          if (**(_DWORD **)(v17 + 8 * v56) < **(_DWORD **)(v17 + 8 * v57))
          {
            v12[2] = v56;
            *unsigned int v48 = v57;
          }
        }
      }
      else
      {
        if (v55 >= v52)
        {
          v12[2] = v49;
          *unsigned int v48 = v51;
          uint64_t v58 = *(a2 - 3);
          if (**(_DWORD **)(v17 + 8 * v58) >= *v53) {
            goto LABEL_47;
          }
          *unsigned int v48 = v58;
        }
        else
        {
          v12[2] = v54;
        }
        *(a2 - 3) = v51;
      }
LABEL_47:
      uint64_t v59 = *v16;
      uint64_t v60 = *v35;
      int v61 = **(_DWORD **)(v17 + 8 * v59);
      uint64_t v62 = *(int **)(v17 + 8 * v60);
      uint64_t v63 = *v48;
      int v64 = *(int **)(v17 + 8 * v63);
      uint64_t result = *v64;
      if (v61 >= *v62)
      {
        if ((int)result >= v61) {
          goto LABEL_55;
        }
        *uint64_t v16 = v63;
        *unsigned int v48 = v59;
        unsigned int v48 = v16;
        LODWORD(v59) = v60;
        if (*v64 < *v62)
        {
LABEL_54:
          unsigned int *v35 = v63;
          *unsigned int v48 = v60;
LABEL_55:
          unsigned int v66 = *v12;
          unsigned int *v12 = v59;
          *uint64_t v16 = v66;
          --a4;
          uint64_t v32 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v87 = *v12;
        unsigned int *v12 = v63;
        *uint64_t v16 = v87;
        --a4;
        uint64_t v32 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if ((int)result < v61) {
        goto LABEL_54;
      }
      unsigned int *v35 = v59;
      *uint64_t v16 = v60;
      int v35 = v16;
      LODWORD(v59) = v63;
      if (*v64 < *v62) {
        goto LABEL_54;
      }
      unsigned int v65 = *v12;
      unsigned int *v12 = v60;
      *uint64_t v16 = v65;
      --a4;
      uint64_t v32 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v69 = 0;
      uint64_t v70 = **a3;
      BOOL v71 = *(int **)(v70 + 8 * v32);
      int v72 = *v71;
      do
        uint64_t v73 = v12[++v69];
      while (**(_DWORD **)(v70 + 8 * v73) < v72);
      uint64_t v74 = &v12[v69];
      unint64_t v75 = a2;
      if (v69 == 1)
      {
        unint64_t v75 = a2;
        do
        {
          if (v74 >= v75) {
            break;
          }
          unsigned int v77 = *--v75;
        }
        while (**(_DWORD **)(v70 + 8 * v77) >= v72);
      }
      else
      {
        do
          unsigned int v76 = *--v75;
        while (**(_DWORD **)(v70 + 8 * v76) >= v72);
      }
      if (v74 >= v75)
      {
        uint64_t v85 = v74 - 1;
        if (v74 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        unsigned int *v12 = *v85;
        goto LABEL_75;
      }
      unsigned int v78 = *v75;
      unsigned int v79 = v73;
      uint64_t v80 = v74;
      int64_t v81 = v75;
      do
      {
        unsigned int *v80 = v78;
        *int64_t v81 = v79;
        int v82 = *v71;
        do
        {
          unsigned int v83 = v80[1];
          ++v80;
          unsigned int v79 = v83;
        }
        while (**(_DWORD **)(v70 + 8 * v83) < v82);
        do
        {
          unsigned int v84 = *--v81;
          unsigned int v78 = v84;
        }
        while (**(_DWORD **)(v70 + 8 * v84) >= v82);
      }
      while (v80 < v81);
      uint64_t v85 = v80 - 1;
      if (v80 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *uint64_t v85 = v32;
      if (v74 < v75) {
        goto LABEL_78;
      }
      BOOL v12 = v85 + 1;
      if (result) {
        break;
      }
      if (!v86)
      {
LABEL_78:
        a5 = 0;
        BOOL v12 = v85 + 1;
      }
    }
    a2 = v85;
    if (!v86) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<int> *)::ByRank &,int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (**(_DWORD **)(**a3 + 8 * v8) < **(_DWORD **)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = **a3;
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      int v13 = **(_DWORD **)(v10 + 8 * v12);
      uint64_t v14 = *(_DWORD **)(v10 + 8 * v11);
      uint64_t v15 = *(a2 - 1);
      int v16 = **(_DWORD **)(v10 + 8 * v15);
      if (v13 >= *v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (**(_DWORD **)(v10 + 8 * v40) < **(_DWORD **)(v10 + 8 * v41))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v50 = *(a2 - 1);
        if (**(_DWORD **)(v10 + 8 * v50) < *v14)
        {
          a1[1] = v50;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      return 1;
    case 5:
      uint64_t v30 = a1 + 2;
      uint64_t v31 = a1 + 3;
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = **a3;
      uint64_t v34 = a1[3];
      if (**(_DWORD **)(v33 + 8 * v32) >= **(_DWORD **)(v33 + 8 * v34)) {
        return 1;
      }
      _DWORD *v31 = v32;
      *(a2 - 1) = v34;
      uint64_t v35 = *v31;
      unsigned int v36 = *(_DWORD **)(v33 + 8 * v35);
      uint64_t v37 = *v30;
      if (*v36 >= **(_DWORD **)(v33 + 8 * v37)) {
        return 1;
      }
      _DWORD *v30 = v35;
      _DWORD *v31 = v37;
      uint64_t v38 = a1[1];
      if (*v36 >= **(_DWORD **)(v33 + 8 * v38)) {
        return 1;
      }
      a1[1] = v35;
      a1[2] = v38;
      uint64_t v39 = *a1;
      if (*v36 >= **(_DWORD **)(v33 + 8 * v39)) {
        return 1;
      }
      *a1 = v35;
      a1[1] = v39;
      return 1;
    default:
      uint64_t v17 = a1 + 2;
      uint64_t v18 = a1[2];
      uint64_t v19 = a1[1];
      uint64_t v20 = **a3;
      uint64_t v21 = *a1;
      int v22 = *(int **)(v20 + 8 * v21);
      int v23 = **(_DWORD **)(v20 + 8 * v19);
      uint64_t v24 = *(int **)(v20 + 8 * v18);
      int v25 = *v24;
      if (v23 >= *v22)
      {
        if (v25 >= v23) {
          goto LABEL_25;
        }
        a1[1] = v18;
        *uint64_t v17 = v19;
        int v28 = *v24;
        int v29 = *v22;
        int v26 = a1;
        uint64_t v27 = a1 + 1;
      }
      else
      {
        int v26 = a1;
        uint64_t v27 = a1 + 2;
        if (v25 < v23) {
          goto LABEL_24;
        }
        *a1 = v19;
        a1[1] = v21;
        int v28 = *v24;
        int v29 = *v22;
        int v26 = a1 + 1;
        uint64_t v27 = a1 + 2;
      }
      if (v28 >= v29) {
        goto LABEL_25;
      }
LABEL_24:
      _DWORD *v26 = v18;
      *uint64_t v27 = v21;
LABEL_25:
      int v42 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v43 = 0;
      uint64_t v44 = 12;
      break;
  }
  while (1)
  {
    uint64_t v45 = *v42;
    uint64_t v46 = *(_DWORD **)(v20 + 8 * v45);
    uint64_t v47 = *v17;
    if (*v46 < **(_DWORD **)(v20 + 8 * v47)) {
      break;
    }
LABEL_34:
    uint64_t v17 = v42;
    v44 += 4;
    if (++v42 == a2) {
      return 1;
    }
  }
  uint64_t v48 = v44;
  do
  {
    *(unsigned int *)((char *)a1 + v48) = v47;
    uint64_t v49 = v48 - 4;
    if (v48 == 4)
    {
      *a1 = v45;
      if (++v43 != 8) {
        goto LABEL_34;
      }
      return v42 + 1 == a2;
    }
    uint64_t v47 = *(unsigned int *)((char *)a1 + v48 - 8);
    v48 -= 4;
  }
  while (*v46 < **(_DWORD **)(v20 + 8 * v47));
  *(unsigned int *)((char *)a1 + v49) = v45;
  if (++v43 != 8) {
    goto LABEL_34;
  }
  return v42 + 1 == a2;
}

_DWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::anonymous namespace'::Vec<int> *)::ByRank &,int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  int v7 = **(_DWORD **)(a5 + 8 * v5);
  uint64_t v8 = *(_DWORD **)(a5 + 8 * v6);
  int v9 = *a3;
  int v10 = **(_DWORD **)(a5 + 8 * *a3);
  if (v7 >= *v8)
  {
    if (v10 >= v7)
    {
      uint64_t v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    uint64_t v11 = *a2;
    uint64_t v12 = *result;
    if (**(_DWORD **)(a5 + 8 * v11) >= **(_DWORD **)(a5 + 8 * v12))
    {
      uint64_t v6 = v5;
      int v9 = v5;
      goto LABEL_14;
    }
    void *result = v11;
    *a2 = v12;
    uint64_t v6 = *a3;
  }
  else
  {
    if (v10 >= v7)
    {
      void *result = v5;
      *a2 = v6;
      int v9 = *a3;
      if (**(_DWORD **)(a5 + 8 * *a3) >= *v8)
      {
        uint64_t v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      void *result = v9;
    }
    *a3 = v6;
  }
  int v9 = v6;
LABEL_14:
  uint64_t v13 = *a4;
  if (**(_DWORD **)(a5 + 8 * v13) < **(_DWORD **)(a5 + 8 * v6))
  {
    *a3 = v13;
    *a4 = v9;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (**(_DWORD **)(a5 + 8 * v14) < **(_DWORD **)(a5 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *result;
      if (**(_DWORD **)(a5 + 8 * v16) < **(_DWORD **)(a5 + 8 * v17))
      {
        void *result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_graphcycles_cc()
{
  return __cxa_atexit((void (*)(void *))absl::lts_2020_02_25::base_internal::SpinLock::~SpinLock, &_MergedGlobals_23, &dword_23CB1E000);
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64(absl::lts_2020_02_25::hash_internal::CityHashState *this, absl::lts_2020_02_25::hash_internal *a2, char *a3)
{
  unint64_t v3 = (unint64_t)a3;
  if ((unint64_t)a3 >= 0x400)
  {
    do
    {
      unint64_t v6 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, 0x400uLL);
      this = (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v6)
                                                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + v6)));
      v3 -= 1024;
      a2 = (absl::lts_2020_02_25::hash_internal *)((char *)a2 + 1024);
    }
    while (v3 > 0x3FF);
  }
  if (v3 >= 0x11)
  {
    unint64_t v7 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, v3);
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + v7)));
  }
  if (v3 >= 9)
  {
    unint64_t v7 = *(void *)((char *)a2 + v3 - 8) >> (-8 * v3);
    this = (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + *(void *)a2)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + *(void *)a2)));
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + v7)));
  }
  if (v3 >= 4)
  {
    unint64_t v7 = ((unint64_t)*(unsigned int *)((char *)a2 + v3 - 4) << (8 * v3 - 32)) | *(unsigned int *)a2;
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + v7)));
  }
  if (v3)
  {
    unint64_t v7 = (*((unsigned __int8 *)a2 + (v3 >> 1)) << ((4 * v3) & 0xF8)) | *(unsigned __int8 *)a2 | (*((unsigned __int8 *)a2
                                                                                                 + v3
                                                                                                 - 1) << (8 * (v3 - 1)));
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)this + v7)));
  }
  return this;
}

absl::lts_2020_02_25::container_internal::HashtablezSampler *absl::lts_2020_02_25::container_internal::HashtablezSampler::HashtablezSampler(absl::lts_2020_02_25::container_internal::HashtablezSampler *this)
{
  *((void *)this + 10) = 0;
  uint64_t v2 = (absl::lts_2020_02_25::container_internal::HashtablezSampler *)((char *)this + 80);
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = -1;
  *((void *)this + 13) = absl::lts_2020_02_25::Now(this);
  *((void *)this + 14) = v3;
  *((_DWORD *)this + 30) = absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25::container_internal::HashtablezSampler *)((char *)this + 128), (void **)0x40, 0);
  *((void *)this + 12) = 0;
  *((void *)this + 80) = 0;
  absl::lts_2020_02_25::Mutex::Lock(v2, v4);
  *((void *)this + 12) = (char *)this + 24;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v2, v5, v6, v7, v8, v9, v10, v11);
  return this;
}

void sub_23CB47660(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void sub_23CB47674(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::container_internal::HashtablezSampler::PushDead(absl::lts_2020_02_25 **a1, void *a2)
{
  BOOL v4 = a1[80];
  if (v4) {
    ((void (*)(void *))v4)(a2);
  }
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 10), (absl::lts_2020_02_25::Mutex *)a2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 7), v5);
  a2[9] = a1[12];
  a1[12] = (absl::lts_2020_02_25 *)a2;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)a2 + 7, v6, v7, v8, v9, v10, v11, v12);
  absl::lts_2020_02_25::Mutex::Unlock(a1 + 10, v13, v14, v15, v16, v17, v18, v19);
}

void sub_23CB47700(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::container_internal::UnsampleSlow(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AED0C80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AED0C80))
  {
    operator new();
  }
  uint64_t v2 = _MergedGlobals_24;
  absl::lts_2020_02_25::container_internal::HashtablezSampler::PushDead((absl::lts_2020_02_25 **)_MergedGlobals_24, a1);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
}

void sub_23CB477AC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10A0C40ED5098EFLL);
  __cxa_guard_abort(&qword_26AED0C80);
  _Unwind_Resume(a1);
}

void sub_23CB477DC(_Unwind_Exception *a1)
{
}

atomic_ullong *absl::lts_2020_02_25::container_internal::RecordInsertSlow(atomic_ullong *result, unint64_t a2, unint64_t a3)
{
  atomic_fetch_and_explicit(result + 6, a2, memory_order_relaxed);
  atomic_fetch_or_explicit(result + 5, a2, memory_order_relaxed);
  unint64_t v3 = result[3];
  if (v3 <= a3 >> 3) {
    unint64_t v3 = a3 >> 3;
  }
  result[3] = v3;
  atomic_fetch_add_explicit(result + 4, a3 >> 3, memory_order_relaxed);
  atomic_fetch_add_explicit(result + 1, 1uLL, memory_order_relaxed);
  return result;
}

double absl::lts_2020_02_25::base_internal::anonymous namespace'::CreateGlobalArenas(absl::lts_2020_02_25::base_internal::_anonymous_namespace_ *this)
{
  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(dword_26AED0C90, 0);
  qword_26AED0DB0 = 0x100000000;
  qword_26AED0DB8 = sysconf(29);
  xmmword_26AED0DC0 = xmmword_23CE7E630;
  dword_26AED0DD0 = 0;
  qword_26AED0C98 = 0;
  qword_26AED0CA0 = (unint64_t)&qword_26AED0C98 ^ 0xFFFFFFFFB37CC16ALL;
  unk_26AED0CA8 = dword_26AED0C90;
  dword_26AED0CB8 = 0;
  xmmword_26AED0CC0 = 0u;
  unk_26AED0CD0 = 0u;
  xmmword_26AED0CE0 = 0u;
  unk_26AED0CF0 = 0u;
  xmmword_26AED0D00 = 0u;
  unk_26AED0D10 = 0u;
  xmmword_26AED0D20 = 0u;
  unk_26AED0D30 = 0u;
  xmmword_26AED0D40 = 0u;
  unk_26AED0D50 = 0u;
  xmmword_26AED0D60 = 0u;
  unk_26AED0D70 = 0u;
  xmmword_26AED0D80 = 0u;
  unk_26AED0D90 = 0u;
  xmmword_26AED0DA0 = 0u;
  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(&algn_26AED0DD4[4], 0);
  qword_26AED0EF8 = 0;
  qword_26AED0F00 = sysconf(29);
  xmmword_26AED0F08 = xmmword_23CE7E630;
  dword_26AED0F18 = 0;
  qword_26AED0DE0 = 0;
  unk_26AED0DE8 = (unint64_t)&qword_26AED0DE0 ^ 0xFFFFFFFFB37CC16ALL;
  qword_26AED0DF0 = (uint64_t)&algn_26AED0DD4[4];
  dword_26AED0E00 = 0;
  xmmword_26AED0E08 = 0u;
  unk_26AED0E18 = 0u;
  xmmword_26AED0E28 = 0u;
  unk_26AED0E38 = 0u;
  xmmword_26AED0E48 = 0u;
  unk_26AED0E58 = 0u;
  xmmword_26AED0E68 = 0u;
  unk_26AED0E78 = 0u;
  xmmword_26AED0E88 = 0u;
  unk_26AED0E98 = 0u;
  xmmword_26AED0EA8 = 0u;
  unk_26AED0EB8 = 0u;
  xmmword_26AED0EC8 = 0u;
  unk_26AED0ED8 = 0u;
  xmmword_26AED0EE8 = 0u;
  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(dword_26AED0F20, 0);
  qword_26AED1040 = 0x200000000;
  qword_26AED1048 = sysconf(29);
  xmmword_26AED1050 = xmmword_23CE7E630;
  dword_26AED1060 = 0;
  qword_26AED0F28 = 0;
  qword_26AED0F30 = (unint64_t)&qword_26AED0F28 ^ 0xFFFFFFFFB37CC16ALL;
  qword_26AED0F38 = (uint64_t)dword_26AED0F20;
  dword_26AED0F48 = 0;
  double result = 0.0;
  xmmword_26AED0F50 = 0u;
  unk_26AED0F60 = 0u;
  xmmword_26AED0F70 = 0u;
  unk_26AED0F80 = 0u;
  xmmword_26AED0F90 = 0u;
  unk_26AED0FA0 = 0u;
  xmmword_26AED0FB0 = 0u;
  unk_26AED0FC0 = 0u;
  xmmword_26AED0FD0 = 0u;
  unk_26AED0FE0 = 0u;
  xmmword_26AED0FF0 = 0u;
  unk_26AED1000 = 0u;
  xmmword_26AED1010 = 0u;
  unk_26AED1020 = 0u;
  xmmword_26AED1030 = 0u;
  return result;
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (int)this;
  if (atomic_load_explicit(_MergedGlobals_25, memory_order_acquire) == 221)
  {
    if ((this & 2) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if (v8)
      {
        uint64_t v9 = (absl::lts_2020_02_25::base_internal::SpinLock *)dword_26AED0C90;
      }
      else
      {
        uint64_t v9 = (absl::lts_2020_02_25::base_internal::SpinLock *)&algn_26AED0DD4[4];
        if (atomic_load_explicit(_MergedGlobals_25, memory_order_acquire) != 221) {
          goto LABEL_10;
        }
      }
      goto LABEL_9;
    }
  }
  uint64_t v9 = (absl::lts_2020_02_25::base_internal::SpinLock *)dword_26AED0F20;
  if (atomic_load_explicit(_MergedGlobals_25, memory_order_acquire) != 221) {
LABEL_10:
  }
LABEL_9:
  unint64_t v10 = absl::lts_2020_02_25::base_internal::DoAllocWithArena(0x148uLL, v9, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = absl::lts_2020_02_25::base_internal::SpinLock::SpinLock((_DWORD *)v10, 0);
  v11[72] = 0;
  v11[73] = v8;
  *(void *)(v10 + 296) = sysconf(29);
  *(_OWORD *)(v10 + 304) = xmmword_23CE7E630;
  *(_DWORD *)(v10 + 320) = 0;
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = (v10 + 8) ^ 0xFFFFFFFFB37CC16ALL;
  *(void *)(v10 + 24) = v10;
  *(_DWORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  return v10;
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(unint64_t a1, absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!this) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 611, "Check %s failed: %s", a5, a6, a7, a8, (char)"arena != nullptr");
  }

  return absl::lts_2020_02_25::base_internal::DoAllocWithArena(a1, this, a3, a4, a5, a6, a7, a8);
}

void absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (this)
  {
    uint64_t v9 = *((void *)this - 2);
    BOOL v24 = 0;
    int v26 = (absl::lts_2020_02_25::base_internal::SpinLock *)v9;
    unint64_t v10 = (absl::lts_2020_02_25::base_internal::SpinLock *)v9;
    if ((*(unsigned char *)(v9 + 292) & 2) != 0)
    {
      sigset_t v27 = -1;
      BOOL v24 = pthread_sigmask(1, &v27, &v25) == 0;
      unint64_t v10 = v26;
    }
    if ((*(_DWORD *)v10 & 1) != 0
      || (int v11 = *(_DWORD *)v10,
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v10, (unsigned int *)&v11, v11 | 1, memory_order_acquire, memory_order_acquire), (v11 & 1) != 0))
    {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    absl::lts_2020_02_25::base_internal::AddToFreelist((int *)this, v9, a3, a4, a5, a6, a7, a8);
    int v16 = *(_DWORD *)(v9 + 288);
    if (v16 <= 0)
    {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 516, "Check %s failed: %s", v12, v13, v14, v15, (char)"arena->allocation_count > 0");
      int v16 = *(_DWORD *)(v9 + 288);
    }
    *(_DWORD *)(v9 + 288) = v16 - 1;
    uint64_t v17 = v26;
    unsigned int v18 = atomic_exchange_explicit((atomic_uint *volatile)v26, *(_DWORD *)v26 & 2, memory_order_release);
    if (v18 >= 8) {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock(v17, v18);
    }
    if (v24)
    {
      int v19 = pthread_sigmask(3, &v25, 0);
      if (v19) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 301, "pthread_sigmask failed: %d", v20, v21, v22, v23, v19);
      }
    }
  }
}

void sub_23CB47CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_23CB47CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::base_internal::anonymous namespace'::ArenaLock::~ArenaLock(absl::lts_2020_02_25::base_internal::_anonymous_namespace_::ArenaLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)this) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 294, "Check %s failed: %s", a5, a6, a7, a8, (char)"left_");
  }
}

unint64_t *absl::lts_2020_02_25::base_internal::AddToFreelist(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v10 = (unint64_t *)(a1 - 8);
  if (*((void *)a1 - 3) == ((unint64_t)(a1 - 8) ^ 0x4C833E95))
  {
    if (*((void *)a1 - 2) == a2) {
      goto LABEL_3;
    }
  }
  else
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 495, "Check %s failed: %s", a5, a6, a7, a8, (char)"f->header.magic == Magic(kMagicAllocated, &f->header)");
    if (*((void *)a1 - 2) == a2)
    {
LABEL_3:
      unint64_t v11 = *v10;
      unint64_t v12 = *(void *)(a2 + 312);
      unint64_t v13 = *v10 - 40;
      if (*v10 > v12) {
        goto LABEL_4;
      }
LABEL_9:
      int v14 = 0;
      goto LABEL_10;
    }
  }
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 497, "Check %s failed: %s", a5, a6, a7, a8, (char)"f->header.arena == arena");
  unint64_t v11 = *v10;
  unint64_t v12 = *(void *)(a2 + 312);
  unint64_t v13 = *v10 - 40;
  if (*v10 <= v12) {
    goto LABEL_9;
  }
LABEL_4:
  int v14 = 0;
  do
  {
    ++v14;
    v11 >>= 1;
  }
  while (v11 > v12);
LABEL_10:
  unint64_t v15 = v13 >> 3;
  int v16 = *(_DWORD *)(a2 + 320);
  do
  {
    int v16 = 1103515245 * v16 + 12345;
    ++v14;
  }
  while ((v16 & 0x40000000) == 0);
  *(_DWORD *)(a2 + 320) = v16;
  if (v15 >= v14) {
    int v17 = v14;
  }
  else {
    int v17 = v15;
  }
  if (v17 <= 0) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
  }
  if (v17 >= 29) {
    int v18 = 29;
  }
  else {
    int v18 = v17;
  }
  *a1 = v18;
  uint64_t v19 = *(unsigned int *)(a2 + 40);
  uint64_t v20 = (int)v19;
  memset(v40, 0, sizeof(v40));
  if ((int)v19 >= 1)
  {
    uint64_t v21 = v19;
    uint64_t v22 = a2 + 8;
    do
    {
      uint64_t v23 = (v21 - 1);
      unint64_t v24 = v22;
      do
      {
        uint64_t v22 = v24;
        unint64_t v24 = *(void *)(v24 + 8 * v23 + 40);
        if (v24) {
          BOOL v25 = v24 >= (unint64_t)v10;
        }
        else {
          BOOL v25 = 1;
        }
      }
      while (!v25);
      *((void *)v40 + v23) = v22;
    }
    while (v21-- > 1);
  }
  if ((int)v19 < v18)
  {
    int v27 = v19 + 1;
    do
    {
      *((void *)v40 + v20++) = a2 + 8;
      *(_DWORD *)(a2 + 40) = v27++;
    }
    while (v20 < *a1);
    int v18 = *a1;
  }
  if (v18)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 8 * v18;
    do
    {
      unint64_t v30 = *(void *)((char *)v40 + v28) + v28;
      *(void *)&a1[v28 / 4 + 2] = *(void *)(v30 + 40);
      *(void *)(v30 + 40) = v10;
      v28 += 8;
    }
    while (v29 != v28);
  }
  *((void *)a1 - 3) = (unint64_t)v10 ^ 0xFFFFFFFFB37CC16ALL;
  absl::lts_2020_02_25::base_internal::Coalesce(v10, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v38 = *(unint64_t **)&v40[0];

  return absl::lts_2020_02_25::base_internal::Coalesce(v38, v31, v32, v33, v34, v35, v36, v37);
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load_explicit(_MergedGlobals_25, memory_order_acquire) != 221) {

  }
  return absl::lts_2020_02_25::base_internal::DoAllocWithArena((unint64_t)this, (absl::lts_2020_02_25::base_internal::SpinLock *)dword_26AED0C90, a3, a4, a5, a6, a7, a8);
}

unint64_t absl::lts_2020_02_25::base_internal::DoAllocWithArena(unint64_t a1, absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a1;
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (a1)
  {
    BOOL v64 = 0;
    unsigned int v66 = this;
    unint64_t v10 = this;
    if ((*((unsigned char *)this + 292) & 2) != 0)
    {
      v67[0] = -1;
      BOOL v64 = pthread_sigmask(1, v67, &v65) == 0;
      unint64_t v10 = v66;
    }
    if ((*(_DWORD *)v10 & 1) != 0
      || (int v11 = *(_DWORD *)v10,
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v10, (unsigned int *)&v11, v11 | 1, memory_order_acquire, memory_order_acquire), (v11 & 1) != 0))
    {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock(v10, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    if (v8 >= 0xFFFFFFFFFFFFFFE0) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    }
    unint64_t v12 = v8 + 32;
    uint64_t v13 = *((void *)this + 38);
    unint64_t v14 = v8 + v13 + 31;
    if (v14 < v12) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    }
    unint64_t v15 = v14 & -v13;
    int v16 = (char *)this + 8;
    unint64_t v17 = v15 - 1;
    while (1)
    {
      unint64_t v18 = *((void *)this + 39);
      if (v15 <= v18)
      {
        int v19 = 0;
      }
      else
      {
        int v19 = 0;
        unint64_t v20 = v15;
        do
        {
          ++v19;
          v20 >>= 1;
        }
        while (v20 > v18);
      }
      if ((v15 - 40) >> 3 >= v19 + 1) {
        int v21 = v19 + 1;
      }
      else {
        int v21 = (v15 - 40) >> 3;
      }
      if (v21 <= 0) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
      }
      int v22 = v21 >= 29 ? 29 : v21;
      if (v22 <= *((_DWORD *)this + 10)) {
        break;
      }
LABEL_26:
      unsigned int v23 = atomic_exchange_explicit((atomic_uint *volatile)this, *(_DWORD *)this & 2, memory_order_release);
      if (v23 >= 8) {
        absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock(this, v23);
      }
      uint64_t v24 = 16 * *((void *)this + 37);
      if (v17 + v24 < v15) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
      }
      unint64_t v32 = (unint64_t)mmap(0, (v17 + v24) & -v24, 3, 4098, -1, 0);
      if (v32 == -1)
      {
        uint64_t v33 = __error();
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 570, "mmap error: %d", v34, v35, v36, v37, *v33);
      }
      if ((*(_DWORD *)this & 1) != 0
        || (int v38 = *(_DWORD *)this,
            atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this, (unsigned int *)&v38, v38 | 1, memory_order_acquire, memory_order_acquire), (v38 & 1) != 0))
      {
        absl::lts_2020_02_25::base_internal::SpinLock::SlowLock(this, v25, v26, v27, v28, v29, v30, v31);
      }
      *(void *)unint64_t v32 = (v17 + v24) & -v24;
      *(void *)(v32 + 8) = v32 ^ 0x4C833E95;
      *(void *)(v32 + 16) = this;
      absl::lts_2020_02_25::base_internal::AddToFreelist((int *)(v32 + 32), (uint64_t)this, v26, v27, v28, v29, v30, v31);
    }
    uint64_t v39 = (char *)this + 8;
    do
    {
      uint64_t v40 = v39;
      if (*((_DWORD *)v39 + 8) < v22) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 454, "Check %s failed: %s", a5, a6, a7, a8, (char)"i < prev->levels");
      }
      uint64_t v39 = *(char **)&v39[8 * v22 + 32];
      if (!v39) {
        goto LABEL_26;
      }
      if (*((void *)v39 + 1) != ((unint64_t)v39 ^ 0xFFFFFFFFB37CC16ALL)) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 459, "Check %s failed: %s", a5, a6, a7, a8, (char)"next->header.magic == Magic(kMagicUnallocated, &next->header)");
      }
      if (*((absl::lts_2020_02_25::base_internal::SpinLock **)v39 + 2) != this) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 460, "Check %s failed: %s", a5, a6, a7, a8, (char)"next->header.arena == arena");
      }
      if (v16 != v40)
      {
        if (v39 <= v40) {
          absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 462, "Check %s failed: %s", a5, a6, a7, a8, (char)"prev < next");
        }
        if (&v40[*(void *)v40] >= v39) {
          absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 465, "Check %s failed: %s", a5, a6, a7, a8, (char)"reinterpret_cast<char *>(prev) + prev->header.size < reinterpret_cast<char *>(next)");
        }
      }
    }
    while (*(void *)v39 < v15);
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    *(_OWORD *)uint64_t v67 = 0u;
    int v41 = *((_DWORD *)this + 10);
    if (v41 >= 1)
    {
      uint64_t v42 = *((unsigned int *)this + 10);
      do
      {
        uint64_t v43 = (v42 - 1);
        uint64_t v44 = v16;
        do
        {
          int v16 = v44;
          uint64_t v44 = *(char **)&v44[8 * v43 + 40];
          if (v44) {
            BOOL v45 = v44 >= v39;
          }
          else {
            BOOL v45 = 1;
          }
        }
        while (!v45);
        *(void *)&v67[2 * v43] = v16;
      }
      while (v42-- > 1);
    }
    if (!v41 || *(char **)(*(void *)v67 + 40) != v39) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
    }
    unint64_t v8 = (unint64_t)(v39 + 32);
    uint64_t v47 = *((unsigned int *)v39 + 8);
    if (v47)
    {
      unint64_t v48 = 0;
      uint64_t v49 = 8 * v47;
      do
      {
        unint64_t v50 = *(void *)&v67[v48 / 4] + v48;
        if (*(char **)(v50 + 40) != v39) {
          break;
        }
        *(void *)(v50 + 40) = *(void *)&v39[v48 + 40];
        v48 += 8;
      }
      while (v49 != v48);
    }
    uint64_t v51 = *((unsigned int *)this + 10);
    if ((int)v51 >= 1)
    {
      do
      {
        uint64_t v52 = v51 - 1;
        if (*((void *)this + (v51 - 1) + 6)) {
          break;
        }
        *((_DWORD *)this + 10) = --v51;
      }
      while ((unint64_t)(v52 + 1) > 1);
    }
    uint64_t v53 = *((void *)this + 39);
    unint64_t v54 = v53 + v15;
    if (__CFADD__(v53, v15)) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    }
    if (v54 <= *(void *)v39)
    {
      int v55 = &v39[v15];
      *(void *)int v55 = *(void *)v39 - v15;
      *((void *)v55 + 1) = (unint64_t)&v39[v15] ^ 0x4C833E95;
      *((void *)v55 + 2) = this;
      *(void *)uint64_t v39 = v15;
      absl::lts_2020_02_25::base_internal::AddToFreelist((int *)&v39[v15 + 32], (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    *((void *)v39 + 1) = (unint64_t)v39 ^ 0x4C833E95;
    if (*((absl::lts_2020_02_25::base_internal::SpinLock **)v39 + 2) != this) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 596, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->header.arena == arena");
    }
    ++*((_DWORD *)this + 72);
    uint64_t v56 = v66;
    unsigned int v57 = atomic_exchange_explicit((atomic_uint *volatile)v66, *(_DWORD *)v66 & 2, memory_order_release);
    if (v57 >= 8) {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock(v56, v57);
    }
    if (v64)
    {
      int v58 = pthread_sigmask(3, &v65, 0);
      if (v58) {
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 301, "pthread_sigmask failed: %d", v59, v60, v61, v62, v58);
      }
    }
  }
  return v8;
}

void sub_23CB4875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB48770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB48784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB48798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB487AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB487C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB487D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB487EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_23CB48800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Unwind_Resume(a1);
}

unint64_t *absl::lts_2020_02_25::base_internal::Coalesce(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unint64_t v8 = result[5];
  if (!v8) {
    return result;
  }
  uint64_t v9 = result;
  if ((unint64_t *)((char *)result + *result) != (unint64_t *)v8) {
    return result;
  }
  unint64_t v10 = result[2];
  *result += *(void *)v8;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  memset(v54, 0, sizeof(v54));
  int v11 = *(_DWORD *)(v10 + 40);
  if (v11 >= 1)
  {
    uint64_t v12 = *(unsigned int *)(v10 + 40);
    unint64_t v13 = v10 + 8;
    do
    {
      uint64_t v14 = (v12 - 1);
      unint64_t v15 = v13;
      do
      {
        unint64_t v13 = v15;
        unint64_t v15 = *(void *)(v15 + 8 * v14 + 40);
        if (v15) {
          BOOL v16 = v15 >= v8;
        }
        else {
          BOOL v16 = 1;
        }
      }
      while (!v16);
      *((void *)v54 + v14) = v13;
      BOOL v17 = v12-- <= 1;
    }
    while (!v17);
  }
  if (v11 && *(void *)(*(void *)&v54[0] + 40) == v8)
  {
    uint64_t v18 = *(unsigned int *)(v8 + 32);
    if (!v18) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v52 = v8;
    double result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
    unint64_t v8 = v52;
    uint64_t v18 = *(unsigned int *)(v52 + 32);
    if (!v18) {
      goto LABEL_19;
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = 8 * v18;
  do
  {
    uint64_t v21 = *(void *)((char *)v54 + v19) + v19;
    if (*(void *)(v21 + 40) != v8) {
      break;
    }
    *(void *)(v21 + 40) = *(void *)(v8 + v19 + 40);
    v19 += 8;
  }
  while (v20 != v19);
LABEL_19:
  uint64_t v22 = *(unsigned int *)(v10 + 40);
  if ((int)v22 >= 1)
  {
    if (*(void *)(v10 + 8 * (v22 - 1) + 48))
    {
LABEL_21:
      uint64_t v22 = v22;
      unint64_t v23 = v10 + 8;
      do
      {
        uint64_t v24 = (v22 - 1);
        unint64_t v25 = v23;
        do
        {
          unint64_t v23 = v25;
          unint64_t v25 = *(void *)(v25 + 8 * v24 + 40);
          if (v25) {
            BOOL v26 = v25 >= (unint64_t)v9;
          }
          else {
            BOOL v26 = 1;
          }
        }
        while (!v26);
        *((void *)v54 + v24) = v23;
        BOOL v17 = v22-- <= 1;
      }
      while (!v17);
LABEL_39:
      if (*(unint64_t **)(*(void *)&v54[0] + 40) == v9) {
        goto LABEL_40;
      }
      goto LABEL_80;
    }
    do
    {
      int v28 = v22 - 1;
      if ((unint64_t)v22 <= 1)
      {
        *(_DWORD *)(v10 + 40) = v22 - 1;
        if (!v9) {
          goto LABEL_40;
        }
        goto LABEL_80;
      }
    }
    while (!*(void *)(v10 + 8 * (v22-- - 2) + 48));
    *(_DWORD *)(v10 + 40) = v28;
    LODWORD(v22) = v28;
    if (v28 >= 1) {
      goto LABEL_21;
    }
  }
  if (v22) {
    goto LABEL_39;
  }
  if (!v9)
  {
LABEL_40:
    uint64_t v29 = *((unsigned int *)v9 + 8);
    if (v29) {
      goto LABEL_41;
    }
    goto LABEL_44;
  }
LABEL_80:
  double result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
  uint64_t v29 = *((unsigned int *)v9 + 8);
  if (v29)
  {
LABEL_41:
    unint64_t v30 = 0;
    uint64_t v31 = 8 * v29;
    do
    {
      unint64_t v32 = *(void *)((char *)v54 + v30) + v30;
      if (*(unint64_t **)(v32 + 40) != v9) {
        break;
      }
      *(void *)(v32 + 40) = v9[v30 / 8 + 5];
      v30 += 8;
    }
    while (v31 != v30);
  }
LABEL_44:
  uint64_t v33 = *(unsigned int *)(v10 + 40);
  if ((int)v33 >= 1)
  {
    do
    {
      uint64_t v34 = v33 - 1;
      if (*(void *)(v10 + 8 * (v33 - 1) + 48)) {
        break;
      }
      *(_DWORD *)(v10 + 40) = --v33;
    }
    while ((unint64_t)(v34 + 1) > 1);
  }
  unint64_t v35 = *v9;
  unint64_t v36 = *(void *)(v10 + 312);
  if (*v9 <= v36)
  {
    int v37 = 0;
  }
  else
  {
    int v37 = 0;
    do
    {
      ++v37;
      v35 >>= 1;
    }
    while (v35 > v36);
  }
  unint64_t v38 = (*v9 - 40) >> 3;
  int v39 = *(_DWORD *)(v10 + 320);
  do
  {
    int v39 = 1103515245 * v39 + 12345;
    ++v37;
  }
  while ((v39 & 0x40000000) == 0);
  *(_DWORD *)(v10 + 320) = v39;
  if (v38 < v37) {
    int v37 = v38;
  }
  if (v37 <= 0)
  {
    int v53 = v37;
    double result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
    int v37 = v53;
  }
  if (v37 >= 29) {
    int v40 = 29;
  }
  else {
    int v40 = v37;
  }
  *((_DWORD *)v9 + 8) = v40;
  int v41 = *(_DWORD *)(v10 + 40);
  uint64_t v42 = v41;
  if (v41 >= 1)
  {
    uint64_t v43 = *(unsigned int *)(v10 + 40);
    unint64_t v44 = v10 + 8;
    do
    {
      uint64_t v45 = (v43 - 1);
      unint64_t v46 = v44;
      do
      {
        unint64_t v44 = v46;
        unint64_t v46 = *(void *)(v46 + 8 * v45 + 40);
        if (v46) {
          BOOL v47 = v46 >= (unint64_t)v9;
        }
        else {
          BOOL v47 = 1;
        }
      }
      while (!v47);
      *((void *)v54 + v45) = v44;
      BOOL v17 = v43-- <= 1;
    }
    while (!v17);
  }
  if (v41 < v40)
  {
    int v48 = v41 + 1;
    do
    {
      *((void *)v54 + v42++) = v10 + 8;
      *(_DWORD *)(v10 + 40) = v48++;
    }
    while (v42 < *((int *)v9 + 8));
    int v40 = *((_DWORD *)v9 + 8);
  }
  if (v40)
  {
    unint64_t v49 = 0;
    uint64_t v50 = 8 * v40;
    do
    {
      unint64_t v51 = *(void *)((char *)v54 + v49) + v49;
      v9[v49 / 8 + 5] = *(void *)(v51 + 40);
      *(void *)(v51 + 40) = v9;
      v49 += 8;
    }
    while (v50 != v49);
  }
  return result;
}

ssize_t absl::lts_2020_02_25::raw_logging_internal::RawLog(int a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)&__size[4] = __s;
  *(_DWORD *)__std::string::size_type size = 3000;
  signed int v12 = *(_DWORD *)__size;
  int v13 = vsnprintf(*(char **)&__size[4], *(int *)__size, a4, &a9);
  int v15 = v12 - 26;
  if (v12 < 0x1A) {
    int v15 = 0;
  }
  if (v13 >= 0 && v13 <= v12) {
    int v16 = v13;
  }
  else {
    int v16 = v15;
  }
  *(_DWORD *)__std::string::size_type size = v12 - v16;
  *(void *)&__size[4] += v16;
  if (v13 >= 0 && v13 <= v12)
  {
    BOOL v17 = "\n";
  }
  else
  {
    uint64_t v20 = " ... (message truncated)\n";
    BOOL v17 = "%s";
  }
  size_t v18 = strlen(__s);
  ssize_t result = write(2, __s, v18);
  if (a1 == 3)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(a2);
    abort();
  }
  return result;
}

ssize_t absl::lts_2020_02_25::raw_logging_internal::DefaultInternalLog(int a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)a4 + 23) >= 0) {
    LOBYTE(v8) = (_BYTE)a4;
  }
  else {
    uint64_t v8 = *a4;
  }
  return absl::lts_2020_02_25::raw_logging_internal::RawLog(a1, a2, a3, "%s", a5, a6, a7, a8, v8);
}

uint64_t anonymous namespace'::DoRawLog(char **this, char **a2, const char *a3, const char *a4, ...)
{
  va_start(va, a4);
  uint64_t result = vsnprintf(*this, *(int *)a2, a3, va);
  if ((result & 0x80000000) == 0 && *(_DWORD *)a2 >= (int)result)
  {
    *(_DWORD *)a2 -= result;
    *this += result;
  }
  return result;
}

int *AbslInternalSpinLockDelay(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *__error();
  if (a3)
  {
    if (a3 == 1)
    {
      sched_yield();
    }
    else
    {
      int v5 = -554899859 * absl::lts_2020_02_25::base_internal::delay_rand + 11;
      absl::lts_2020_02_25::base_internal::delay_rand = 0x5DEECE66DLL * absl::lts_2020_02_25::base_internal::delay_rand
                                                      + 11;
      if (a3 >= 0x20) {
        unsigned int v6 = 32;
      }
      else {
        unsigned int v6 = a3;
      }
      v8.tv_sec = 0;
      v8.tv_nsec = ((0x20000 << (v6 >> 3)) - 1) & v5 | (0x20000 << (v6 >> 3));
      nanosleep(&v8, 0);
    }
  }
  uint64_t result = __error();
  int *result = v4;
  return result;
}

void sub_23CB48F40(_Unwind_Exception *a1)
{
  *__error() = v1;
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::base_internal::SpinLockWait(atomic_uint *a1, unsigned int a2, uint64_t a3)
{
  if (!a2)
  {
    for (unsigned int i = 1; ; ++i)
      AbslInternalSpinLockDelay((uint64_t)a1, atomic_load_explicit(a1, memory_order_acquire), i);
  }
  int v4 = 0;
  uint64_t v5 = a2;
  uint64_t v6 = a3 + 4;
  while (1)
  {
LABEL_4:
    uint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    while (explicit != *(_DWORD *)(v9 - 4))
    {
      v9 += 12;
      if (!--v8)
      {
        AbslInternalSpinLockDelay((uint64_t)a1, explicit, ++v4);
        goto LABEL_4;
      }
    }
    if (*(_DWORD *)v9 != explicit)
    {
      int v10 = explicit;
      atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v10, *(_DWORD *)v9, memory_order_acquire, memory_order_acquire);
      if (v10 != explicit) {
        continue;
      }
    }
    if (*(unsigned char *)(v9 + 4)) {
      return explicit;
    }
  }
}

uint64_t absl::lts_2020_02_25::GetStackTrace(absl::lts_2020_02_25 *this, void **a2, int a3)
{
  if (!explicit) {
    uint64_t explicit = UnwindImpl<false,false>;
  }
  return explicit((uint64_t)this, 0, (uint64_t)a2, (a3 + 1), 0, 0);
}

uint64_t UnwindImpl<false,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (a6) {
    *a6 = 0;
  }
  return 0;
}

uint64_t absl::lts_2020_02_25::Status::UnrefNonInlined(uint64_t this)
{
  if ((this & 1) == 0) {
    absl::lts_2020_02_25::Status::UnrefNonInlined();
  }
  uint64_t v1 = this - 1;
  if (atomic_load_explicit((atomic_uint *volatile)(this - 1), memory_order_acquire) == 1
    || atomic_fetch_add((atomic_uint *volatile)v1, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = *(char **)(this + 31);
    *(void *)(v1 + 32) = 0;
    if (v2)
    {
      unint64_t v3 = absl::lts_2020_02_25::inlined_vector_internal::Storage<absl::lts_2020_02_25::status_internal::Payload,1ul,std::allocator<absl::lts_2020_02_25::status_internal::Payload>>::~Storage(v2);
      MEMORY[0x23ECF2BC0](v3, 0x1022C407F822AEDLL);
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x23ECF2BC0);
  }
  return this;
}

void *absl::lts_2020_02_25::Status::Status(void *result, int a2, uint64_t a3, uint64_t a4)
{
  int *result = 4 * a2;
  if (a2)
  {
    if (a4) {
      operator new();
    }
  }
  return result;
}

char *absl::lts_2020_02_25::inlined_vector_internal::Storage<absl::lts_2020_02_25::status_internal::Payload,1ul,std::allocator<absl::lts_2020_02_25::status_internal::Payload>>::~Storage(char *__b)
{
  unint64_t v3 = (void **)(__b + 8);
  unint64_t v2 = *(void *)__b;
  int v4 = __b + 8;
  if (*(void *)__b)
  {
    int v4 = (char *)*v3;
    if (!*v3) {
      goto LABEL_11;
    }
  }
  unint64_t v5 = v2 >> 1;
  if (v2 >= 2)
  {
    uint64_t v6 = &v4[40 * v5 - 17];
    unint64_t v7 = v2 >> 1;
    do
    {
      while (1)
      {
        if (v6[16] >= 16) {
          absl::lts_2020_02_25::Cord::DestroyCordSlow((void ***)(v6 + 1));
        }
        if (*v6 < 0) {
          break;
        }
        v6 -= 40;
        if (!--v7) {
          goto LABEL_10;
        }
      }
      operator delete(*(void **)(v6 - 23));
      v6 -= 40;
      --v7;
    }
    while (v7);
  }
LABEL_10:
  memset(v4, 171, 40 * v5);
  if (*__b) {
LABEL_11:
  }
    operator delete(*v3);
  return __b;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<BOOL>(char a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20) {
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1 & 1, a2, a3, a4);
  }
  *(_DWORD *)a4 = a1 & 1;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>(int a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20) {
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  }
  *(_DWORD *)a4 = a1;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(int a1, uint64_t a2, unsigned int a3, char *a4)
{
  *(void *)&v19[5] = *MEMORY[0x263EF8340];
  if (a2 - 10 <= 7)
  {
    uint64_t v17 = a2;
    unsigned int v18 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v17, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5) {
    return 0;
  }
  if ((a2 & 0xFE) == 4)
  {
    LOBYTE(v17) = a1 < 0;
    uint64_t v6 = v19;
    if (a1)
    {
      if (a1 >= 0) {
        unsigned int v7 = a1;
      }
      else {
        unsigned int v7 = -a1;
      }
      uint64_t v6 = v19;
      do
      {
        *--uint64_t v6 = (v7 % 0xA) | 0x30;
        BOOL v8 = v7 > 9;
        v7 /= 0xAu;
      }
      while (v8);
    }
    signed int v9 = v19 - v6;
    HIDWORD(v17) = v9;
    if (a2 == 19 || (a2 & 0x100) == 0)
    {
    }
    else
    {
      if ((_BYTE)v17)
      {
        int v10 = (char *)*((void *)a4 + 3);
        ++*((void *)a4 + 2);
        if (a4 + 1056 == v10)
        {
          int v10 = a4 + 32;
          (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
          *((void *)a4 + 3) = v10;
        }
        *int v10 = 45;
        ++*((void *)a4 + 3);
        signed int v9 = HIDWORD(v17);
      }
      uint64_t v11 = *((void *)a4 + 2);
      signed int v12 = a4 + 1056;
      if (v9)
      {
        uint64_t v13 = v9;
        uint64_t v14 = &v19[-v9];
        *((void *)a4 + 2) = v11 + v9;
        int v15 = (unsigned char *)*((void *)a4 + 3);
        if (v12 - v15 <= (unint64_t)v9)
        {
          (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v15 - (a4 + 32));
          *((void *)a4 + 3) = a4 + 32;
          (*((void (**)(void, unsigned char *, uint64_t))a4 + 1))(*(void *)a4, v14, v13);
        }
        else
        {
          memcpy(v15, v14, v9);
          *((void *)a4 + 3) += v13;
        }
      }
      else
      {
        *((void *)a4 + 2) = v11 + 1;
        int v16 = (unsigned char *)*((void *)a4 + 3);
        if (v12 == v16)
        {
          int v16 = a4 + 32;
          (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
          *((void *)a4 + 3) = a4 + 32;
        }
        *int v16 = 48;
        ++*((void *)a4 + 3);
      }
    }
    return 1;
  }
  return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(unsigned int a1, uint64_t a2, unsigned int a3, char *a4)
{
  *(void *)&v20[5] = *MEMORY[0x263EF8340];
  if (a2 - 10 <= 7)
  {
    uint64_t v18 = a2;
    unsigned int v19 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v18, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5) {
    return 0;
  }
  LOBYTE(v18) = 0;
  switch(a2)
  {
    case 9u:
      uint64_t v8 = 1;
      goto LABEL_16;
    case 8u:
      uint64_t v8 = 0;
LABEL_16:
      uint64_t v6 = v20;
      if (a1)
      {
        uint64_t v6 = v20;
        do
        {
          *--uint64_t v6 = v9[a1 & 0xF];
          BOOL v10 = a1 > 0xF;
          a1 >>= 4;
        }
        while (v10);
      }
      break;
    case 6u:
      if (!a1)
      {
        HIDWORD(v18) = 0;
        if ((a2 & 0x100) != 0)
        {
LABEL_35:
          uint64_t v17 = (char *)*((void *)a4 + 3);
          ++*((void *)a4 + 2);
          if (a4 + 1056 == v17)
          {
            uint64_t v17 = a4 + 32;
            (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
            *((void *)a4 + 3) = a4 + 32;
          }
          *uint64_t v17 = 48;
          uint64_t v16 = *((void *)a4 + 3) + 1;
          goto LABEL_38;
        }
LABEL_34:
        return 1;
      }
      uint64_t v6 = v20;
      do
      {
        *--uint64_t v6 = a1 & 7 | 0x30;
        BOOL v7 = a1 >= 8;
        a1 >>= 3;
      }
      while (v7);
      break;
    default:
      uint64_t v6 = v20;
      if (a1)
      {
        uint64_t v6 = v20;
        do
        {
          *--uint64_t v6 = (a1 % 0xA) | 0x30;
          BOOL v7 = a1 >= 0xA;
          a1 /= 0xAu;
        }
        while (v7);
      }
      break;
  }
  signed int v11 = v20 - v6;
  HIDWORD(v18) = v11;
  if (a2 == 19 || (a2 & 0x100) == 0) {
    goto LABEL_34;
  }
  if ((_BYTE)v18)
  {
    signed int v12 = (char *)*((void *)a4 + 3);
    ++*((void *)a4 + 2);
    if (a4 + 1056 == v12)
    {
      signed int v12 = a4 + 32;
      (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
      *((void *)a4 + 3) = v12;
    }
    char *v12 = 45;
    ++*((void *)a4 + 3);
    signed int v11 = HIDWORD(v18);
  }
  if (!v11) {
    goto LABEL_35;
  }
  uint64_t v13 = v11;
  uint64_t v14 = &v20[-v11];
  int v15 = (void *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v11;
  if (a4 - (unsigned char *)v15 + 1056 > (unint64_t)v11)
  {
    memcpy(v15, v14, v11);
    uint64_t v16 = *((void *)a4 + 3) + v13;
LABEL_38:
    *((void *)a4 + 3) = v16;
    return 1;
  }
  (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, (unsigned char *)v15 - (a4 + 32));
  *((void *)a4 + 3) = a4 + 32;
  (*((void (**)(void, unsigned char *, uint64_t))a4 + 1))(*(void *)a4, v14, v13);
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long>(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 == 20)
  {
    int v5 = 0x7FFFFFFF;
    if (a1 < 0x7FFFFFFF) {
      int v5 = a1;
    }
    *(_DWORD *)a4 = v5;
    return 1;
  }
  else if (a2 - 10 > 7)
  {
    if ((_BYTE)a2)
    {
      if (a2 - 4 > 5)
      {
        return 0;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v6 = a2;
    unsigned int v7 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v6, a4, (double)a1);
  }
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20) {
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  }
  uint64_t v5 = 0xFFFFFFFF80000000;
  if (a1 > (uint64_t)0xFFFFFFFF80000000) {
    uint64_t v5 = a1;
  }
  if (v5 >= 0x7FFFFFFF) {
    LODWORD(v5) = 0x7FFFFFFF;
  }
  *(_DWORD *)a4 = v5;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  *(void *)&v19[5] = *MEMORY[0x263EF8340];
  if (a2 - 10 <= 7)
  {
    uint64_t v17 = a2;
    unsigned int v18 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v17, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5) {
    return 0;
  }
  if ((a2 & 0xFE) == 4)
  {
    LOBYTE(v17) = a1 < 0;
    uint64_t v6 = v19;
    if (a1)
    {
      if (a1 >= 0) {
        unint64_t v7 = a1;
      }
      else {
        unint64_t v7 = -a1;
      }
      uint64_t v6 = v19;
      do
      {
        *--uint64_t v6 = (v7 % 0xA) | 0x30;
        BOOL v8 = v7 > 9;
        v7 /= 0xAuLL;
      }
      while (v8);
    }
    signed int v9 = v19 - v6;
    HIDWORD(v17) = v9;
    if (a2 == 19 || (a2 & 0x100) == 0)
    {
    }
    else
    {
      if ((_BYTE)v17)
      {
        BOOL v10 = (char *)*((void *)a4 + 3);
        ++*((void *)a4 + 2);
        if (a4 + 1056 == v10)
        {
          BOOL v10 = a4 + 32;
          (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
          *((void *)a4 + 3) = v10;
        }
        *BOOL v10 = 45;
        ++*((void *)a4 + 3);
        signed int v9 = HIDWORD(v17);
      }
      uint64_t v11 = *((void *)a4 + 2);
      signed int v12 = a4 + 1056;
      if (v9)
      {
        uint64_t v13 = v9;
        uint64_t v14 = &v19[-v9];
        *((void *)a4 + 2) = v11 + v9;
        int v15 = (unsigned char *)*((void *)a4 + 3);
        if (v12 - v15 <= (unint64_t)v9)
        {
          (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v15 - (a4 + 32));
          *((void *)a4 + 3) = a4 + 32;
          (*((void (**)(void, unsigned char *, uint64_t))a4 + 1))(*(void *)a4, v14, v13);
        }
        else
        {
          memcpy(v15, v14, v9);
          *((void *)a4 + 3) += v13;
        }
      }
      else
      {
        *((void *)a4 + 2) = v11 + 1;
        uint64_t v16 = (unsigned char *)*((void *)a4 + 3);
        if (v12 == v16)
        {
          uint64_t v16 = a4 + 32;
          (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
          *((void *)a4 + 3) = a4 + 32;
        }
        *uint64_t v16 = 48;
        ++*((void *)a4 + 3);
      }
    }
    return 1;
  }
  return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20) {
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  }
  int v5 = 0x7FFFFFFF;
  if (a1 < 0x7FFFFFFF) {
    int v5 = a1;
  }
  *(_DWORD *)a4 = v5;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  *(void *)&v20[5] = *MEMORY[0x263EF8340];
  if (a2 - 10 <= 7)
  {
    uint64_t v18 = a2;
    unsigned int v19 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v18, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5) {
    return 0;
  }
  LOBYTE(v18) = 0;
  switch(a2)
  {
    case 9u:
      uint64_t v8 = 1;
      goto LABEL_16;
    case 8u:
      uint64_t v8 = 0;
LABEL_16:
      uint64_t v6 = v20;
      if (a1)
      {
        uint64_t v6 = v20;
        do
        {
          *--uint64_t v6 = v9[a1 & 0xF];
          BOOL v10 = a1 > 0xF;
          a1 >>= 4;
        }
        while (v10);
      }
      break;
    case 6u:
      if (!a1)
      {
        HIDWORD(v18) = 0;
        if ((a2 & 0x100) != 0)
        {
LABEL_35:
          uint64_t v17 = (char *)*((void *)a4 + 3);
          ++*((void *)a4 + 2);
          if (a4 + 1056 == v17)
          {
            uint64_t v17 = a4 + 32;
            (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
            *((void *)a4 + 3) = a4 + 32;
          }
          *uint64_t v17 = 48;
          uint64_t v16 = *((void *)a4 + 3) + 1;
          goto LABEL_38;
        }
LABEL_34:
        return 1;
      }
      uint64_t v6 = v20;
      do
      {
        *--uint64_t v6 = a1 & 7 | 0x30;
        BOOL v7 = a1 >= 8;
        a1 >>= 3;
      }
      while (v7);
      break;
    default:
      uint64_t v6 = v20;
      if (a1)
      {
        uint64_t v6 = v20;
        do
        {
          *--uint64_t v6 = (a1 % 0xA) | 0x30;
          BOOL v7 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v7);
      }
      break;
  }
  signed int v11 = v20 - v6;
  HIDWORD(v18) = v11;
  if (a2 == 19 || (a2 & 0x100) == 0) {
    goto LABEL_34;
  }
  if ((_BYTE)v18)
  {
    signed int v12 = (char *)*((void *)a4 + 3);
    ++*((void *)a4 + 2);
    if (a4 + 1056 == v12)
    {
      signed int v12 = a4 + 32;
      (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
      *((void *)a4 + 3) = v12;
    }
    char *v12 = 45;
    ++*((void *)a4 + 3);
    signed int v11 = HIDWORD(v18);
  }
  if (!v11) {
    goto LABEL_35;
  }
  uint64_t v13 = v11;
  uint64_t v14 = &v20[-v11];
  int v15 = (void *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v11;
  if (a4 - (unsigned char *)v15 + 1056 > (unint64_t)v11)
  {
    memcpy(v15, v14, v11);
    uint64_t v16 = *((void *)a4 + 3) + v13;
LABEL_38:
    *((void *)a4 + 3) = v16;
    return 1;
  }
  (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, (unsigned char *)v15 - (a4 + 32));
  *((void *)a4 + 3) = a4 + 32;
  (*((void (**)(void, unsigned char *, uint64_t))a4 + 1))(*(void *)a4, v14, v13);
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  if (a2 == 20) {
    return 0;
  }
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  uint64_t v7 = a2;
  int v8 = a3;
  return a2 - 10 <= 7
      && absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v7, a4, *(double *)&a1);
}

uint64_t absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  if (a2 == 20) {
    return 0;
  }
  int v4 = *(char *)(a1 + 23);
  uint64_t v5 = v4 >= 0 ? (void *)a1 : *(void **)a1;
  size_t v6 = v4 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
  if (a2 != 2) {
    return 0;
  }
  if ((a2 & 0x100) != 0)
  {
    if (v6)
    {
      uint64_t v9 = (unsigned char *)*((void *)a4 + 3);
      *((void *)a4 + 2) += v6;
      if (v6 >= a4 - v9 + 1056)
      {
        (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v9 - (a4 + 32));
        *((void *)a4 + 3) = a4 + 32;
        (*((void (**)(void, void *, size_t))a4 + 1))(*(void *)a4, v5, v6);
        return 1;
      }
      memcpy(v9, v5, v6);
      *((void *)a4 + 3) += v6;
    }
    return 1;
  }

  return absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(a4, v5, v6, SHIDWORD(a2), a3, (a2 & 0x200) != 0);
}

unint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConvertIntImplInner<unsigned long>(unint64_t result, uint64_t a2, int a3, char *a4)
{
  *(void *)&v19[1] = *MEMORY[0x263EF8340];
  LOBYTE(v17) = 0;
  if (a2 > 0x13u)
  {
LABEL_23:
    size_t v6 = v19;
    if (result)
    {
      size_t v6 = v19;
      do
      {
        *--size_t v6 = (result % 0xA) | 0x30;
        BOOL v7 = result >= 0xA;
        result /= 0xAuLL;
      }
      while (v7);
    }
    goto LABEL_13;
  }
  uint64_t v5 = 1;
  if (((1 << a2) & 0x90100) != 0)
  {
    uint64_t v5 = 0;
LABEL_10:
    size_t v6 = v19;
    if (result)
    {
      size_t v6 = v19;
      do
      {
        *--size_t v6 = v8[result & 0xF];
        BOOL v9 = result > 0xF;
        result >>= 4;
      }
      while (v9);
    }
    goto LABEL_13;
  }
  if (((1 << a2) & 0x20200) != 0) {
    goto LABEL_10;
  }
  if (a2 != 6) {
    goto LABEL_23;
  }
  if (!result)
  {
    signed int v18 = 0;
    if ((a2 & 0x100) != 0) {
      goto LABEL_30;
    }
  }
  size_t v6 = v19;
  do
  {
    *--size_t v6 = result & 7 | 0x30;
    BOOL v7 = result >= 8;
    result >>= 3;
  }
  while (v7);
LABEL_13:
  signed int v10 = v19 - v6;
  signed int v18 = v10;
  if (a2 != 19 && (a2 & 0x100) != 0)
  {
    if ((_BYTE)v17)
    {
      signed int v11 = (char *)*((void *)a4 + 3);
      ++*((void *)a4 + 2);
      if (a4 + 1056 == v11)
      {
        signed int v11 = a4 + 32;
        uint64_t result = (*((uint64_t (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
        *((void *)a4 + 3) = v11;
      }
      *signed int v11 = 45;
      ++*((void *)a4 + 3);
      signed int v10 = v18;
    }
    if (v10)
    {
      uint64_t v12 = v10;
      uint64_t v13 = &v19[-v10];
      uint64_t v14 = (unsigned char *)*((void *)a4 + 3);
      *((void *)a4 + 2) += v10;
      if (a4 - v14 + 1056 <= (unint64_t)v10)
      {
        (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v14 - (a4 + 32));
        *((void *)a4 + 3) = a4 + 32;
        return (*((uint64_t (**)(void, unsigned char *, uint64_t))a4 + 1))(*(void *)a4, v13, v12);
      }
      uint64_t result = (unint64_t)memcpy(v14, v13, v10);
      uint64_t v15 = *((void *)a4 + 3) + v12;
      goto LABEL_33;
    }
LABEL_30:
    uint64_t v16 = (char *)*((void *)a4 + 3);
    ++*((void *)a4 + 2);
    if (a4 + 1056 == v16)
    {
      uint64_t v16 = a4 + 32;
      uint64_t result = (*((uint64_t (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
      *((void *)a4 + 3) = a4 + 32;
    }
    *uint64_t v16 = 48;
    uint64_t v15 = *((void *)a4 + 3) + 1;
LABEL_33:
    *((void *)a4 + 3) = v15;
    return result;
  }
}

int *absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConvertIntImplInner(int *result, uint64_t a2, int a3, char *a4)
{
  size_t v5 = HIDWORD(a2);
  if (a2 < 0) {
    size_t v5 = 0;
  }
  size_t v6 = result[1];
  BOOL v7 = v5 >= v6;
  size_t v8 = v5 - v6;
  if (!v7) {
    size_t v8 = 0;
  }
  size_t v9 = (a2 & 0xFE) == 4;
  if ((a2 & 0xFE) == 4) {
    signed int v10 = "-";
  }
  else {
    signed int v10 = 0;
  }
  if ((a2 & 0xFE) == 4)
  {
    signed int v11 = "+";
    uint64_t v12 = 1;
    uint64_t v13 = " ";
    if ((a2 & 0x800) == 0) {
      uint64_t v13 = 0;
    }
    if ((a2 & 0x400) == 0)
    {
      uint64_t v12 = (BYTE1(a2) & 8) >> 3;
      signed int v11 = v13;
    }
    if (!*(unsigned char *)result)
    {
      size_t v9 = v12;
      signed int v10 = v11;
    }
  }
  size_t v14 = 0;
  uint64_t v15 = (char *)result - v6 + 51;
  BOOL v7 = v8 >= v9;
  size_t v16 = v8 - v9;
  if (!v7) {
    size_t v16 = 0;
  }
  char v17 = 1;
  if (a2 > 0x13u)
  {
    signed int v18 = 0;
  }
  else
  {
    signed int v18 = 0;
    if (((1 << a2) & 0xB0300) != 0)
    {
      size_t v14 = 0;
      signed int v18 = 0;
      BOOL v19 = (a2 & 0x1000) != 0 || a2 == 19;
      if (v19 && v6)
      {
        if (a2 <= 0x11u && ((1 << a2) & 0x2AA00) != 0)
        {
          char v17 = 0;
          signed int v18 = "0X";
        }
        else
        {
          char v17 = 0;
          signed int v18 = "0x";
        }
        size_t v14 = 2;
      }
    }
  }
  BOOL v7 = v16 >= v14;
  size_t v20 = v16 - v14;
  if (!v7) {
    size_t v20 = 0;
  }
  if (a3 < 0) {
    int v21 = 1;
  }
  else {
    int v21 = a3;
  }
  if (a2 == 6 && (a2 & 0x1000) != 0 && (!v6 || *v15 != 48) && v21 <= (int)v6 + 1) {
    int v21 = v6 + 1;
  }
  BOOL v7 = v21 >= v6;
  size_t v22 = v21 - v6;
  if (v7) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = 0;
  }
  BOOL v7 = v20 >= v23;
  size_t v24 = v20 - v23;
  if (!v7) {
    size_t v24 = 0;
  }
  if ((a2 & 0x200) != 0) {
    size_t v25 = 0;
  }
  else {
    size_t v25 = v24;
  }
  if (a3 < 0 && (a2 & 0x2000) != 0)
  {
    v23 += v25;
    if ((a2 & 0x200) != 0) {
      size_t v26 = v24;
    }
    else {
      size_t v26 = 0;
    }
  }
  else
  {
    if ((a2 & 0x200) != 0) {
      size_t v26 = v24;
    }
    else {
      size_t v26 = 0;
    }
    if (v25)
    {
      unint64_t v49 = v18;
      size_t v50 = v26;
      unint64_t v51 = v10;
      uint64_t v48 = (uint64_t)result - v6 + 51;
      uint64_t v27 = (unsigned char *)*((void *)a4 + 3);
      *((void *)a4 + 2) += v25;
      int v28 = a4 + 1056;
      unint64_t v29 = a4 + 1056 - v27;
      size_t v30 = v25 - v29;
      if (v25 <= v29)
      {
        size_t v30 = v24;
        uint64_t v31 = v27;
        uint64_t v15 = (unsigned char *)v48;
      }
      else
      {
        uint64_t v31 = a4 + 32;
        if (v28 == (void *)v27)
        {
          unint64_t v32 = a4 + 1056;
        }
        else
        {
          memset(v27, 32, a4 + 1056 - v27);
          unint64_t v32 = (char *)(*((void *)a4 + 3) + v29);
          *((void *)a4 + 3) = v32;
        }
        uint64_t v15 = (unsigned char *)v48;
        (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v32 - v31);
        *((void *)a4 + 3) = v31;
        if (v30 >= 0x401)
        {
          do
          {
            v30 -= 1024;
            memset(a4 + 32, 32, 0x400uLL);
            *((void *)a4 + 3) = v28;
            (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
            *((void *)a4 + 3) = v31;
          }
          while (v30 > 0x400);
        }
      }
      signed int v10 = v51;
      uint64_t result = (int *)memset(v31, 32, v30);
      *((void *)a4 + 3) += v30;
      signed int v18 = v49;
      size_t v26 = v50;
    }
  }
  if (!v9)
  {
LABEL_70:
    if (v17) {
      goto LABEL_75;
    }
    goto LABEL_73;
  }
  uint64_t v33 = (void *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v9;
  if (v9 < a4 - (unsigned char *)v33 + 1056)
  {
    uint64_t result = (int *)memcpy(v33, v10, v9);
    *((void *)a4 + 3) += v9;
    goto LABEL_70;
  }
  (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, (unsigned char *)v33 - (a4 + 32));
  *((void *)a4 + 3) = a4 + 32;
  uint64_t result = (int *)(*((uint64_t (**)(void, const char *, size_t))a4 + 1))(*(void *)a4, v10, v9);
  if (v17) {
    goto LABEL_75;
  }
LABEL_73:
  uint64_t v34 = (unsigned char *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v14;
  if (v14 >= a4 - v34 + 1056)
  {
    (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v34 - (a4 + 32));
    *((void *)a4 + 3) = a4 + 32;
    uint64_t result = (int *)(*((uint64_t (**)(void, const char *, size_t))a4 + 1))(*(void *)a4, v18, v14);
    if (!v23) {
      goto LABEL_86;
    }
    goto LABEL_76;
  }
  uint64_t result = (int *)memcpy(v34, v18, v14);
  *((void *)a4 + 3) += v14;
LABEL_75:
  if (!v23) {
    goto LABEL_86;
  }
LABEL_76:
  unint64_t v35 = (unsigned char *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v23;
  unint64_t v36 = a4 + 1056;
  unint64_t v37 = a4 + 1056 - v35;
  size_t v38 = v23 - v37;
  if (v23 <= v37)
  {
    size_t v38 = v23;
    int v39 = v35;
  }
  else
  {
    int v39 = a4 + 32;
    if (v36 == (void *)v35)
    {
      int v40 = a4 + 1056;
    }
    else
    {
      memset(v35, 48, a4 + 1056 - v35);
      int v40 = (char *)(*((void *)a4 + 3) + v37);
      *((void *)a4 + 3) = v40;
    }
    (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v40 - v39);
    *((void *)a4 + 3) = v39;
    if (v38 >= 0x401)
    {
      do
      {
        v38 -= 1024;
        memset(a4 + 32, 48, 0x400uLL);
        *((void *)a4 + 3) = v36;
        (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
        *((void *)a4 + 3) = v39;
      }
      while (v38 > 0x400);
    }
  }
  uint64_t result = (int *)memset(v39, 48, v38);
  *((void *)a4 + 3) += v38;
LABEL_86:
  if (!v6) {
    goto LABEL_89;
  }
  int v41 = (void *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v6;
  if (a4 - (unsigned char *)v41 + 1056 > v6)
  {
    uint64_t result = (int *)memcpy(v41, v15, v6);
    *((void *)a4 + 3) += v6;
LABEL_89:
    if (!v26) {
      return result;
    }
    goto LABEL_92;
  }
  (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, (unsigned char *)v41 - (a4 + 32));
  *((void *)a4 + 3) = a4 + 32;
  uint64_t result = (int *)(*((uint64_t (**)(void, unsigned char *, size_t))a4 + 1))(*(void *)a4, v15, v6);
  if (!v26) {
    return result;
  }
LABEL_92:
  uint64_t v42 = (unsigned char *)*((void *)a4 + 3);
  *((void *)a4 + 2) += v26;
  uint64_t v43 = a4 + 1056;
  unint64_t v44 = a4 + 1056 - v42;
  size_t v45 = v26 - v44;
  if (v26 <= v44)
  {
    size_t v45 = v26;
    unint64_t v46 = v42;
  }
  else
  {
    unint64_t v46 = a4 + 32;
    if (v43 == (void *)v42)
    {
      BOOL v47 = a4 + 1056;
    }
    else
    {
      memset(v42, 32, a4 + 1056 - v42);
      BOOL v47 = (char *)(*((void *)a4 + 3) + v44);
      *((void *)a4 + 3) = v47;
    }
    (*((void (**)(void, char *, int64_t))a4 + 1))(*(void *)a4, a4 + 32, v47 - v46);
    *((void *)a4 + 3) = v46;
    if (v45 >= 0x401)
    {
      do
      {
        v45 -= 1024;
        memset(a4 + 32, 32, 0x400uLL);
        *((void *)a4 + 3) = v43;
        (*((void (**)(void, char *, uint64_t))a4 + 1))(*(void *)a4, a4 + 32, 1024);
        *((void *)a4 + 3) = v46;
      }
      while (v45 > 0x400);
    }
  }
  uint64_t result = (int *)memset(v46, 32, v45);
  *((void *)a4 + 3) += v45;
  return result;
}

char *absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConvertCharImpl(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int16 v5 = a2;
  if (HIDWORD(a2)) {
    uint64_t v7 = HIDWORD(a2) - 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 >= 0) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  if ((a2 & 0x200) != 0 || !v8)
  {
    uint64_t v15 = (unsigned char *)a4[3];
    ++a4[2];
    size_t v16 = (char *)(a4 + 132);
    if (a4 + 132 == (void *)v15)
    {
LABEL_19:
      uint64_t v15 = a4 + 4;
      ((void (*)(void, void *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
      a4[3] = a4 + 4;
    }
  }
  else
  {
    size_t v9 = (unsigned char *)a4[3];
    a4[2] += v8;
    signed int v10 = a4 + 132;
    unint64_t v11 = (char *)(a4 + 132) - v9;
    size_t v12 = v8 - v11;
    if (v8 <= v11)
    {
      size_t v12 = v7;
      uint64_t v13 = v9;
    }
    else
    {
      uint64_t v13 = a4 + 4;
      if (v10 == (void *)v9)
      {
        size_t v14 = (char *)(a4 + 132);
      }
      else
      {
        memset(v9, 32, (char *)(a4 + 132) - v9);
        size_t v14 = (char *)(a4[3] + v11);
        a4[3] = v14;
      }
      ((void (*)(void, void *, int64_t))a4[1])(*a4, a4 + 4, v14 - v13);
      a4[3] = v13;
      if (v12 >= 0x401)
      {
        do
        {
          v12 -= 1024;
          memset(a4 + 4, 32, 0x400uLL);
          a4[3] = v10;
          ((void (*)(void, void *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
          a4[3] = v13;
        }
        while (v12 > 0x400);
      }
    }
    memset(v13, 32, v12);
    uint64_t v15 = (unsigned char *)(a4[3] + v12);
    ++a4[2];
    a4[3] = v15;
    size_t v16 = (char *)(a4 + 132);
    if (a4 + 132 == (void *)v15) {
      goto LABEL_19;
    }
  }
  unsigned char *v15 = a1;
  uint64_t result = (char *)(a4[3] + 1);
  a4[3] = result;
  if ((v5 & 0x200) != 0 && v8)
  {
    a4[2] += v8;
    int64_t v18 = v16 - result;
    size_t v19 = v8 - (v16 - result);
    if (v8 <= v16 - result)
    {
      size_t v19 = v7;
      size_t v20 = result;
    }
    else
    {
      size_t v20 = (char *)(a4 + 4);
      if (v16 == result)
      {
        int v21 = v16;
      }
      else
      {
        memset(result, 32, v16 - result);
        int v21 = (char *)(a4[3] + v18);
        a4[3] = v21;
      }
      ((void (*)(void, void *, int64_t))a4[1])(*a4, a4 + 4, v21 - v20);
      a4[3] = v20;
      if (v19 >= 0x401)
      {
        do
        {
          v19 -= 1024;
          memset(a4 + 4, 32, 0x400uLL);
          a4[3] = v16;
          ((void (*)(void, void *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
          a4[3] = v20;
        }
        while (v19 > 0x400);
      }
    }
    uint64_t result = (char *)memset(v20, 32, v19);
    a4[3] += v19;
  }
  return result;
}

void absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::~FormatSinkImpl(absl::lts_2020_02_25::str_format_internal::FormatSinkImpl *this)
{
  unint64_t v2 = (char *)this + 32;
  (*((void (**)(void, char *, void))this + 1))(*(void *)this, (char *)this + 32, *((void *)this + 3) - ((void)this + 32));
  *((void *)this + 3) = v2;
}

unint64_t absl::lts_2020_02_25::str_format_internal::FormatUntyped(uint64_t a1, void (*a2)(uint64_t, char *, int64_t), unsigned __int8 *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = (unint64_t)__s;
  v35[0] = *MEMORY[0x263EF8340];
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = 0;
  uint64_t v33 = v34;
  if (a4 == -1)
  {
    size_t v22 = &v30;
    uint64_t v23 = a5;
    uint64_t v24 = a6;
    uint64_t v16 = *((void *)__s + 2);
    uint64_t v17 = *((void *)__s + 3);
    if (v16 != v17)
    {
      size_t v18 = 0;
      size_t v19 = (char *)*((void *)__s + 1);
      size_t v20 = v19;
      do
      {
        v20 += v18;
        size_t v18 = &v19[*(void *)(v16 + 8)] - v20;
        if (*(unsigned char *)v16)
        {
          {
LABEL_22:
            unint64_t v6 = 0;
            goto LABEL_39;
          }
        }
        else if (v18)
        {
          v32 += v18;
          if (v18 < (char *)v35 - v33)
          {
            memcpy(v33, v20, v18);
            v33 += v18;
          }
          else
          {
            v31(v30, v34, v33 - v34);
            uint64_t v33 = v34;
            v31(v30, v20, v18);
          }
        }
        v16 += 32;
      }
      while (v16 != v17);
    }
    unint64_t v6 = *(unsigned char *)v6 == 0;
    goto LABEL_39;
  }
  size_t v22 = &v30;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  int v29 = 0;
  if (!a4) {
    goto LABEL_38;
  }
  uint64_t v7 = &__s[a4];
  while (1)
  {
    unint64_t v8 = (unint64_t)&v7[-v6];
    size_t v9 = memchr((void *)v6, 37, (size_t)&v7[-v6]);
    if (!v9) {
      break;
    }
    signed int v10 = v9;
    size_t v11 = (size_t)&v9[-v6];
    if (v9 != (unsigned char *)v6)
    {
      v32 += v11;
      if (v11 >= (char *)v35 - v33)
      {
        v31(v30, v34, v33 - v34);
        uint64_t v33 = v34;
        v31(v30, (char *)v6, v11);
      }
      else
      {
        memcpy(v33, (const void *)v6, v11);
        v33 += v11;
      }
    }
    size_t v12 = v10 + 1;
    if (v10 + 1 >= v7) {
      goto LABEL_22;
    }
    uint64_t v13 = *v12;
    int v14 = absl::lts_2020_02_25::str_format_internal::kTags[v13];
    if ((v14 & 0x80000000) == 0)
    {
      int v15 = v29;
      if (v29 < 0) {
        goto LABEL_22;
      }
      uint64_t v26 = -1;
      __int16 v27 = 2305;
      char v28 = v14;
      ++v29;
      int v25 = v15 + 1;
      goto LABEL_5;
    }
    if (v13 == 37)
    {
      ++v32;
      if ((unint64_t)((char *)v35 - v33) > 1)
      {
        *v33++ = 37;
      }
      else
      {
        v31(v30, v34, v33 - v34);
        uint64_t v33 = v34;
        v31(v30, "%", 1);
      }
LABEL_5:
      unint64_t v6 = (unint64_t)(v10 + 2);
      goto LABEL_6;
    }
    uint64_t v26 = -1;
    char v28 = 20;
    __int16 v27 = 2305;
    unint64_t v6 = (unint64_t)absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v12, v7, (uint64_t)&v25, &v29);
    if (!v6) {
      goto LABEL_39;
    }
LABEL_6:
    if ((unsigned __int8 *)v6 == v7) {
      goto LABEL_38;
    }
  }
  if (v7 != (unsigned __int8 *)v6)
  {
    v32 += v8;
    if (v8 >= (char *)v35 - v33)
    {
      v31(v30, v34, v33 - v34);
      uint64_t v33 = v34;
      v31(v30, (char *)v6, (int64_t)&v7[-v6]);
    }
    else
    {
      memcpy(v33, (const void *)v6, (size_t)&v7[-v6]);
      v33 += v8;
    }
  }
LABEL_38:
  unint64_t v6 = 1;
LABEL_39:
  v31(v30, v34, v33 - v34);
  return v6;
}

void sub_23CB4AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::~FormatSinkImpl((absl::lts_2020_02_25::str_format_internal::FormatSinkImpl *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::str_format_internal::AppendPack(uint64_t a1, unsigned __int8 *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v6 = *(void *)(a1 + 8);
    if (absl::lts_2020_02_25::str_format_internal::FormatUntyped(a1, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a3, a4, a5))return a1; {
  }
    }
  else
  {
    std::string::size_type v6 = *(unsigned __int8 *)(a1 + 23);
    if (absl::lts_2020_02_25::str_format_internal::FormatUntyped(a1, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a3, a4, a5))return a1; {
  }
    }
  std::string::erase((std::string *)a1, v6, 0xFFFFFFFFFFFFFFFFLL);
  return a1;
}

unint64_t absl::lts_2020_02_25::str_format_internal::FormatPack@<X0>(unsigned __int8 *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  unint64_t result = absl::lts_2020_02_25::str_format_internal::FormatUntyped(a5, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a2, a3, a4);
  if ((result & 1) == 0)
  {
    if (*(char *)(a5 + 23) < 0)
    {
      **(unsigned char **)a5 = 0;
      *(void *)(a5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 23) = 0;
    }
  }
  return result;
}

void sub_23CB4B060(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t absl::lts_2020_02_25::str_format_internal::FprintF(uint64_t a1, unsigned __int8 *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  int v10 = 0;
  unint64_t v11 = 0;
  if ((absl::lts_2020_02_25::str_format_internal::FormatUntyped((uint64_t)&v9, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<absl::lts_2020_02_25::str_format_internal::FILERawSink>, __s, a3, a4, a5) & 1) == 0)
  {
    std::string::size_type v6 = __error();
    int v7 = 22;
LABEL_5:
    int *v6 = v7;
    return 0xFFFFFFFFLL;
  }
  int v5 = v10;
  if (v10)
  {
    *__error() = v5;
    return 0xFFFFFFFFLL;
  }
  unint64_t result = v11;
  if (v11 >> 31)
  {
    std::string::size_type v6 = __error();
    int v7 = 27;
    goto LABEL_5;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConverterConsumer<absl::lts_2020_02_25::str_format_internal::anonymous namespace'::DefaultConverter>::ConvertOne(void *a1, int *a2)
{
  unint64_t v2 = *a2 - 1;
  unint64_t v3 = a1[2];
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v6 = a1[1];
  int v7 = *((unsigned __int8 *)a2 + 12);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = a2[1];
    unsigned int v18 = v8;
    if ((int)v8 > -2)
    {
      int v9 = 0;
      uint64_t v10 = a2[2];
      int v17 = v10;
      if ((int)v10 > -2)
      {
LABEL_19:
        uint64_t v15 = v8 << 32;
        unsigned __int8 v16 = *((unsigned char *)a2 + 12);
        if (v9) {
          v16 |= 2u;
        }
        unint64_t v11 = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
        return (*(uint64_t (**)(void, unint64_t, void, void))(v6 + 16 * v2 + 8))(*(void *)(v6 + 16 * v2), v11 | *((unsigned __int8 *)a2 + 14), v10, *a1);
      }
    }
    else
    {
      if (v3 < ~v8
        || !(*(unsigned int (**)(void, uint64_t, void, unsigned int *))(v6 + 16 * (4294967294 - v8) + 8))(*(void *)(v6 + 16 * (4294967294 - v8)), 20, 0, &v18))
      {
        return 0;
      }
      uint64_t v8 = v18;
      if ((v18 & 0x80000000) != 0)
      {
        if (v18 <= 0x80000001) {
          int v14 = -2147483647;
        }
        else {
          int v14 = v18;
        }
        uint64_t v8 = -v14;
        int v9 = 1;
        uint64_t v10 = a2[2];
        int v17 = v10;
        unsigned int v18 = v8;
        if ((int)v10 > -2) {
          goto LABEL_19;
        }
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = a2[2];
        int v17 = v10;
        if ((int)v10 > -2) {
          goto LABEL_19;
        }
      }
    }
    if (a1[2] >= (unint64_t)~v10)
    {
      uint64_t v12 = a1[1] + 16 * (4294967294 - v10);
      if ((*(unsigned int (**)(void, uint64_t, void, int *))(v12 + 8))(*(void *)v12, 20, 0, &v17))
      {
        LODWORD(v10) = v17;
        uint64_t v8 = v18;
        goto LABEL_19;
      }
    }
    return 0;
  }
  unint64_t v11 = (v7 << 8) | 0xFFFFFFFF00000000;
  LODWORD(v10) = -1;
  return (*(uint64_t (**)(void, unint64_t, void, void))(v6 + 16 * v2 + 8))(*(void *)(v6 + 16 * v2), v11 | *((unsigned __int8 *)a2 + 14), v10, *a1);
}

std::string *absl::lts_2020_02_25::str_format_internal::Flags::ToString@<X0>(absl::lts_2020_02_25::str_format_internal::Flags *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((*(unsigned char *)this & 2) != 0) {
    int v4 = "-";
  }
  else {
    int v4 = "";
  }
  std::string::append(a2, v4);
  if ((*(unsigned char *)this & 4) != 0) {
    int v5 = "+";
  }
  else {
    int v5 = "";
  }
  std::string::append(a2, v5);
  if ((*(unsigned char *)this & 8) != 0) {
    uint64_t v6 = " ";
  }
  else {
    uint64_t v6 = "";
  }
  std::string::append(a2, v6);
  if ((*(unsigned char *)this & 0x10) != 0) {
    int v7 = "#";
  }
  else {
    int v7 = "";
  }
  std::string::append(a2, v7);
  if ((*(unsigned char *)this & 0x20) != 0) {
    uint64_t v8 = "0";
  }
  else {
    uint64_t v8 = "";
  }
  return std::string::append(a2, v8);
}

void sub_23CB4B378(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(char *a1, void *__src, unint64_t a3, int a4, int a5, char a6)
{
  size_t v8 = a4 & ~(a4 >> 31);
  size_t v9 = a5;
  if (a3 < a5) {
    size_t v9 = a3;
  }
  if (a5 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = a3;
  }
  if (v8 >= v10) {
    size_t v11 = v8 - v10;
  }
  else {
    size_t v11 = 0;
  }
  if (a6)
  {
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v12 = (void *)*((void *)a1 + 3);
    *((void *)a1 + 2) += v10;
    if (v10 < a1 - (unsigned char *)v12 + 1056)
    {
      memcpy(v12, __src, v10);
      *((void *)a1 + 3) += v10;
LABEL_13:
      if (v10 >= v8) {
        return 1;
      }
      goto LABEL_20;
    }
    (*((void (**)(void, char *, int64_t))a1 + 1))(*(void *)a1, a1 + 32, (unsigned char *)v12 - (a1 + 32));
    *((void *)a1 + 3) = a1 + 32;
    (*((void (**)(void, void *, size_t))a1 + 1))(*(void *)a1, __src, v10);
    if (v10 < v8)
    {
LABEL_20:
      size_t v19 = (unsigned char *)*((void *)a1 + 3);
      *((void *)a1 + 2) += v11;
      size_t v20 = a1 + 1056;
      unint64_t v21 = a1 + 1056 - v19;
      size_t v10 = v11 - v21;
      if (v11 <= v21)
      {
        size_t v10 = v11;
        size_t v22 = v19;
      }
      else
      {
        size_t v22 = a1 + 32;
        if (v20 == (void *)v19)
        {
          uint64_t v23 = a1 + 1056;
        }
        else
        {
          memset(v19, 32, a1 + 1056 - v19);
          uint64_t v23 = (char *)(*((void *)a1 + 3) + v21);
          *((void *)a1 + 3) = v23;
        }
        (*((void (**)(void, char *, int64_t))a1 + 1))(*(void *)a1, a1 + 32, v23 - v22);
        *((void *)a1 + 3) = v22;
        if (v10 >= 0x401)
        {
          do
          {
            v10 -= 1024;
            memset(a1 + 32, 32, 0x400uLL);
            *((void *)a1 + 3) = v20;
            (*((void (**)(void, char *, uint64_t))a1 + 1))(*(void *)a1, a1 + 32, 1024);
            *((void *)a1 + 3) = v22;
          }
          while (v10 > 0x400);
        }
      }
      memset(v22, 32, v10);
      goto LABEL_37;
    }
  }
  else
  {
    if (v10 < v8)
    {
      uint64_t v13 = (unsigned char *)*((void *)a1 + 3);
      *((void *)a1 + 2) += v11;
      int v14 = a1 + 1056;
      unint64_t v15 = a1 + 1056 - v13;
      size_t v16 = v11 - v15;
      if (v11 <= v15)
      {
        size_t v16 = v11;
        int v17 = v13;
      }
      else
      {
        int v17 = a1 + 32;
        if (v14 == (void *)v13)
        {
          unsigned int v18 = a1 + 1056;
        }
        else
        {
          memset(v13, 32, a1 + 1056 - v13);
          unsigned int v18 = (char *)(*((void *)a1 + 3) + v15);
          *((void *)a1 + 3) = v18;
        }
        (*((void (**)(void, char *, int64_t))a1 + 1))(*(void *)a1, a1 + 32, v18 - v17);
        *((void *)a1 + 3) = v17;
        if (v16 >= 0x401)
        {
          do
          {
            v16 -= 1024;
            memset(a1 + 32, 32, 0x400uLL);
            *((void *)a1 + 3) = v14;
            (*((void (**)(void, char *, uint64_t))a1 + 1))(*(void *)a1, a1 + 32, 1024);
            *((void *)a1 + 3) = v17;
          }
          while (v16 > 0x400);
        }
      }
      memset(v17, 32, v16);
      *((void *)a1 + 3) += v16;
    }
    if (v10)
    {
      uint64_t v24 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 2) += v10;
      if (v10 < a1 - (unsigned char *)v24 + 1056)
      {
        memcpy(v24, __src, v10);
LABEL_37:
        *((void *)a1 + 3) += v10;
        return 1;
      }
      (*((void (**)(void, char *, int64_t))a1 + 1))(*(void *)a1, a1 + 32, (unsigned char *)v24 - (a1 + 32));
      *((void *)a1 + 3) = a1 + 32;
      (*((void (**)(void, void *, size_t))a1 + 1))(*(void *)a1, __src, v10);
    }
  }
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(unsigned __int8 *a1, char *a2, double a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    double v8 = -a3;
    uint64_t v6 = 45;
  }
  else
  {
    if ((a1[1] & 4) != 0)
    {
      uint64_t v6 = 43;
    }
    else
    {
      if ((a1[1] & 8) == 0)
      {
        uint64_t v6 = 0;
        int v7 = __e;
        double v8 = a3;
        goto LABEL_10;
      }
      uint64_t v6 = 32;
    }
    double v8 = a3;
  }
  int v7 = (int *)((char *)__e + 1);
  LOBYTE(__e[0]) = v6;
LABEL_10:
  if (fabs(v8) == INFINITY)
  {
    unsigned int v9 = *a1 - 9;
    size_t v10 = v9 > 8 ? "inf" : off_264E82C70[(char)v9];
    __int16 v11 = *(_WORD *)v10;
    *((unsigned char *)v7 + 2) = v10[2];
    *(_WORD *)int v7 = v11;
    if (absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(a2, __e, (char *)v7 - (char *)__e + 3, *((_DWORD *)a1 + 1), -1, (a1[1] & 2) != 0))return 1; {
  }
    }
  if (*((int *)a1 + 2) >= 0) {
    int v12 = *((_DWORD *)a1 + 2);
  }
  else {
    int v12 = 6;
  }
  unsigned int v78 = 0;
  __e[0] = 0;
  long double v13 = frexp(v8, __e);
  double v14 = ldexp(v13, 53);
  unsigned int v15 = __e[0] - 53;
  switch(*a1)
  {
    case 0xAu:
    case 0xBu:
      if (v12 > 0x27) {
      unint64_t v23 = (unint64_t)v14;
      }
      __dst = v80;
      unsigned int v83 = v80;
      if (__e[0] < 53)
      {
        if (v15 < 0xFFFFFFC4)
        {
          if (v15 < 0xFFFFFF84) {
          *(_OWORD *)&unint64_t v30 = (unsigned __int128)v14;
          }
          uint64_t v32 = (unsigned __int128)v14;
          uint64_t v33 = (unsigned __int128)v14 >> 64;
          char v34 = 53 - LOBYTE(__e[0]);
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0) {
            unint64_t v35 = -1 << v34;
          }
          else {
            unint64_t v35 = (-1 << v34) | (0x7FFFFFFFFFFFFFFFuLL >> ~v34);
          }
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = -1 << v34;
          }
          unint64_t v37 = v31 >> v34;
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0) {
            unint64_t v38 = 0;
          }
          else {
            unint64_t v38 = v31 >> v34;
          }
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0) {
            unint64_t v39 = v37;
          }
          else {
            unint64_t v39 = ((2 * v33) << ~(53 - LOBYTE(__e[0]))) | (v30 >> v34);
          }
          uint64_t v40 = ~v36;
          unint64_t v41 = ~v35;
          unint64_t v42 = ~v36 & v32;
          unint64_t v43 = ~v35 & v33;
          if (v12)
          {
            int v44 = v12 + 1;
            do
            {
              size_t v45 = v83;
              if (v83 >= v81) {
                absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
              }
              unint64_t v46 = (__PAIR128__(v43, v42) * 0xA) >> 64;
              unint64_t v47 = 10 * v42;
              unint64_t v48 = v46 >> v34;
              if ((v34 & 0x40) == 0) {
                unint64_t v48 = ((2 * v46) << ~v34) | (v47 >> v34);
              }
              ++v83;
              unsigned char *v45 = v48 + 48;
              unint64_t v43 = v46 & v41;
              unint64_t v42 = v47 & v40;
              --v44;
            }
            while (v44 > 1);
          }
          unint64_t v49 = (__PAIR128__(v43, v42) * 0xA) >> 64;
          unint64_t v50 = 10 * v42;
          unint64_t v51 = v49 >> v34;
          if ((v34 & 0x40) == 0) {
            unint64_t v51 = ((2 * v49) << ~v34) | (v50 >> v34);
          }
          if ((int)v51 < 6)
          {
            if (v51 != 5) {
              goto LABEL_134;
            }
            unint64_t v75 = v50 & v40;
            unint64_t v52 = (unint64_t)v83;
            if (!(v75 | v49 & v41))
            {
              int v76 = *(v83 - 1);
              if (v76 == 46) {
                LOBYTE(v76) = *(v83 - 2);
              }
              if (((char)v76 & 0x80000001) != 1) {
                goto LABEL_134;
              }
            }
          }
          else
          {
            unint64_t v52 = (unint64_t)v83;
          }
          long long v77 = __dst;
          if ((unint64_t)__dst >= v52) {
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
          }
          long long v73 = (unsigned char *)(v52 - 1);
          while (1)
          {
            int v74 = *v73;
            if (v74 != 46)
            {
              if (v74 != 57) {
                goto LABEL_132;
              }
              *long long v73 = 48;
              long long v77 = __dst;
            }
            if (--v73 < v77) {
              goto LABEL_133;
            }
          }
        }
        char v55 = 53 - LOBYTE(__e[0]);
        uint64_t v56 = ~(-1 << v55);
        unint64_t v57 = v56 & v23;
        if (v12)
        {
          int v58 = v12 + 1;
          do
          {
            uint64_t v59 = v83;
            if (v83 >= v81) {
              absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
            }
            unint64_t v60 = 10 * v57;
            ++v83;
            *uint64_t v59 = (v60 >> v55) + 48;
            unint64_t v57 = v60 & v56;
            --v58;
          }
          while (v58 > 1);
        }
        uint64_t v61 = 10 * v57;
        unint64_t v62 = (10 * v57) >> v55;
        if ((int)v62 < 6)
        {
          if (v62 != 5) {
            goto LABEL_134;
          }
          unint64_t v63 = (unint64_t)v83;
          if ((v61 & v56) == 0)
          {
            int v71 = *(v83 - 1);
            if (v71 == 46) {
              LOBYTE(v71) = *(v83 - 2);
            }
            if (((char)v71 & 0x80000001) != 1) {
              goto LABEL_134;
            }
          }
        }
        else
        {
          unint64_t v63 = (unint64_t)v83;
        }
        long long v72 = __dst;
        if ((unint64_t)__dst >= v63) {
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        }
        long long v73 = (unsigned char *)(v63 - 1);
        do
        {
          int v74 = *v73;
          if (v74 != 46)
          {
            if (v74 != 57)
            {
LABEL_132:
              *long long v73 = v74 + 1;
              goto LABEL_134;
            }
            *long long v73 = 48;
            long long v72 = __dst;
          }
          --v73;
        }
        while (v73 >= v72);
LABEL_133:
        *long long v73 = 49;
        __dst = v73;
      }
      else
      {
        if (v15 > 0xB)
        {
          if (v15 <= 0x4B)
          {
            *(_OWORD *)&unint64_t v24 = (unsigned __int128)v14;
            if ((v15 & 0x40) != 0) {
              unint64_t v26 = v24 << v15;
            }
            else {
              unint64_t v26 = (v25 << v15) | (v24 >> 1 >> ~(_BYTE)v15);
            }
            if ((v15 & 0x40) != 0) {
              unint64_t v27 = 0;
            }
            else {
              unint64_t v27 = v24 << v15;
            }
            if (v12)
            {
              int v28 = v12 + 1;
              do
              {
                int v29 = v83;
                if (v83 >= v81) {
                  absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
                }
                ++v83;
                *int v29 = 48;
                --v28;
              }
              while (v28 > 1);
            }
            goto LABEL_134;
          }
        }
        if (v12)
        {
          int v53 = v12 + 1;
          do
          {
            unint64_t v54 = v83;
            if (v83 >= v81) {
              absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
            }
            ++v83;
            *unint64_t v54 = 48;
            --v53;
          }
          while (v53 > 1);
        }
      }
LABEL_134:
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v83) {
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        }
        if (*(v83 - 1) == 46) {
          --v83;
        }
      }
LABEL_138:
      return 1;
    case 0xCu:
    case 0xDu:
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v83) {
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        }
        if (*(v83 - 1) == 46) {
          --v83;
        }
      }
      uint64_t v17 = v78;
      unsigned int v21 = *a1 - 9;
      if (v21 > 8) {
        char v22 = 101;
      }
      else {
        char v22 = byte_23CE7E6B0[(char)v21];
      }
      goto LABEL_78;
    case 0xEu:
    case 0xFu:
      if (v12 <= 1) {
        int v12 = 1;
      }
      uint64_t v17 = v78;
      if (v12 > (int)v78 && (int)v78 >= -4)
      {
        if ((v78 & 0x80000000) != 0)
        {
          *((unsigned char *)__dst + 1) = *(unsigned char *)__dst;
          if (v17 != -1)
          {
            int v64 = v17 + 1;
            do
            {
              sigset_t v65 = __dst;
              __dst = (char *)__dst - 1;
              unsigned char *v65 = 48;
              BOOL v66 = __CFADD__(v64++, 1);
            }
            while (!v66);
          }
          uint64_t v17 = 0;
          uint64_t v67 = __dst;
          __dst = (char *)__dst - 1;
          *uint64_t v67 = 46;
          *(unsigned char *)__dst = 48;
        }
        else if (v78)
        {
          unsigned int v18 = (char *)__dst + 1;
          char v19 = *((unsigned char *)__dst + 1);
          uint64_t v20 = v78;
          memmove((char *)__dst + 1, (char *)__dst + 2, v78);
          uint64_t v17 = 0;
          v18[v20] = v19;
        }
      }
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v83) {
LABEL_101:
        }
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        long long v68 = v83 - 1;
        while (1)
        {
          int v69 = *v68;
          if (v69 != 48) {
            break;
          }
          unsigned int v83 = v68;
          BOOL v66 = __dst >= v68--;
          if (v66) {
            goto LABEL_101;
          }
        }
        if (v69 == 46)
        {
          if (__dst >= v68 + 1) {
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
          }
          unsigned int v83 = v68;
        }
      }
      if (v17)
      {
        unsigned int v70 = *a1 - 9;
        if (v70 > 8) {
          char v22 = 101;
        }
        else {
          char v22 = byte_23CE7E6B0[(char)v70];
        }
LABEL_78:
      }
      goto LABEL_138;
    case 0x10u:
    case 0x11u:
    default:
      return 0;
  }
}

uint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::PrintExponent(uint64_t result, char a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned char **)(a3 + 96);
  unint64_t v4 = a3 + 85;
  if ((unint64_t)v3 >= a3 + 85) {
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
  }
  *(void *)(a3 + 96) = v3 + 1;
  *unint64_t v3 = a2;
  int v5 = *(unsigned char **)(a3 + 96);
  if ((result & 0x80000000) != 0)
  {
    if ((unint64_t)v5 >= v4) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
    *(void *)(a3 + 96) = v5 + 1;
    unsigned char *v5 = 45;
    unint64_t result = -(int)result;
    uint64_t v6 = *(unsigned char **)(a3 + 96);
    if (result >= 0x64) {
      goto LABEL_5;
    }
  }
  else
  {
    if ((unint64_t)v5 >= v4) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
    *(void *)(a3 + 96) = v5 + 1;
    unsigned char *v5 = 43;
    uint64_t v6 = *(unsigned char **)(a3 + 96);
    if (result >= 0x64)
    {
LABEL_5:
      if ((unint64_t)v6 >= v4) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      *(void *)(a3 + 96) = v6 + 1;
      unsigned char *v6 = result / 0x64 + 48;
      int v7 = *(unsigned char **)(a3 + 96);
      if ((unint64_t)v7 >= v4) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      *(void *)(a3 + 96) = v7 + 1;
      unsigned char *v7 = (result / 0xA - 10 * ((429496730 * (unint64_t)(result / 0xA)) >> 32)) | 0x30;
      double v8 = *(unsigned char **)(a3 + 96);
      if ((unint64_t)v8 >= v4) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      *(void *)(a3 + 96) = v8 + 1;
      *double v8 = (result % 0xA) | 0x30;
      return result;
    }
  }
  if ((unint64_t)v6 >= v4) {
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
  }
  *(void *)(a3 + 96) = v6 + 1;
  unsigned char *v6 = result / 0xAu + 48;
  unsigned int v9 = *(unsigned char **)(a3 + 96);
  if ((unint64_t)v9 >= v4) {
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
  }
  *(void *)(a3 + 96) = v9 + 1;
  *unsigned int v9 = (result % 0xAu) | 0x30;
  return result;
}

void *absl::lts_2020_02_25::str_format_internal::anonymous namespace'::WriteBufferToSink(void *result, void *__src, size_t __n, char a4, int a5, char *a6)
{
  int v9 = (int)result;
  if (result) {
    int v10 = -1;
  }
  else {
    int v10 = 0;
  }
  unsigned int v11 = (v10 - __n + a5) & ~((v10 - (int)__n + a5) >> 31);
  if (a5 >= 0) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = 0;
  }
  if ((a4 & 2) != 0)
  {
    unsigned int v13 = 0;
  }
  else
  {
    if ((a4 & 0x20) != 0) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = 0;
    }
    if ((a4 & 0x20) != 0)
    {
      LODWORD(v12) = 0;
    }
    else if (v12)
    {
      double v14 = (unsigned char *)*((void *)a6 + 3);
      *((void *)a6 + 2) += v12;
      unsigned int v15 = a6 + 1056;
      unint64_t v16 = a6 + 1056 - v14;
      size_t v17 = v12 - v16;
      if (v12 <= v16)
      {
        size_t v17 = v12;
        unsigned int v18 = v14;
      }
      else
      {
        unsigned int v18 = a6 + 32;
        if (v15 == (void *)v14)
        {
          char v19 = a6 + 1056;
        }
        else
        {
          memset(v14, 32, a6 + 1056 - v14);
          char v19 = (char *)(*((void *)a6 + 3) + v16);
          *((void *)a6 + 3) = v19;
        }
        (*((void (**)(void, char *, int64_t))a6 + 1))(*(void *)a6, a6 + 32, v19 - v18);
        *((void *)a6 + 3) = v18;
        if (v17 >= 0x401)
        {
          do
          {
            v17 -= 1024;
            memset(a6 + 32, 32, 0x400uLL);
            *((void *)a6 + 3) = v15;
            (*((void (**)(void, char *, uint64_t))a6 + 1))(*(void *)a6, a6 + 32, 1024);
            *((void *)a6 + 3) = v18;
          }
          while (v17 > 0x400);
        }
      }
      unint64_t result = memset(v18, 32, v17);
      LODWORD(v12) = 0;
      *((void *)a6 + 3) += v17;
    }
  }
  if (v9)
  {
    uint64_t v20 = (char *)*((void *)a6 + 3);
    ++*((void *)a6 + 2);
    if (a6 + 1056 == v20)
    {
      uint64_t v20 = a6 + 32;
      unint64_t result = (void *)(*((uint64_t (**)(void, char *, uint64_t))a6 + 1))(*(void *)a6, a6 + 32, 1024);
      *((void *)a6 + 3) = a6 + 32;
    }
    char *v20 = v9;
    ++*((void *)a6 + 3);
  }
  if (v13)
  {
    unsigned int v21 = (unsigned char *)*((void *)a6 + 3);
    *((void *)a6 + 2) += v13;
    char v22 = a6 + 1056;
    unint64_t v23 = a6 + 1056 - v21;
    size_t v24 = v13 - v23;
    if (v13 <= v23)
    {
      size_t v24 = v13;
      uint64_t v25 = v21;
    }
    else
    {
      uint64_t v25 = a6 + 32;
      if (v22 == (void *)v21)
      {
        unint64_t v26 = a6 + 1056;
      }
      else
      {
        memset(v21, 48, a6 + 1056 - v21);
        unint64_t v26 = (char *)(*((void *)a6 + 3) + v23);
        *((void *)a6 + 3) = v26;
      }
      (*((void (**)(void, char *, int64_t))a6 + 1))(*(void *)a6, a6 + 32, v26 - v25);
      *((void *)a6 + 3) = v25;
      if (v24 >= 0x401)
      {
        do
        {
          v24 -= 1024;
          memset(a6 + 32, 48, 0x400uLL);
          *((void *)a6 + 3) = v22;
          (*((void (**)(void, char *, uint64_t))a6 + 1))(*(void *)a6, a6 + 32, 1024);
          *((void *)a6 + 3) = v25;
        }
        while (v24 > 0x400);
      }
    }
    unint64_t result = memset(v25, 48, v24);
    *((void *)a6 + 3) += v24;
  }
  if (!__n)
  {
LABEL_39:
    if (!v12) {
      return result;
    }
    goto LABEL_42;
  }
  unint64_t v27 = (void *)*((void *)a6 + 3);
  *((void *)a6 + 2) += __n;
  if (__n < a6 - (unsigned char *)v27 + 1056)
  {
    unint64_t result = memcpy(v27, __src, __n);
    *((void *)a6 + 3) += __n;
    goto LABEL_39;
  }
  (*((void (**)(void, char *, int64_t))a6 + 1))(*(void *)a6, a6 + 32, (unsigned char *)v27 - (a6 + 32));
  *((void *)a6 + 3) = a6 + 32;
  unint64_t result = (void *)(*((uint64_t (**)(void, void *, size_t))a6 + 1))(*(void *)a6, __src, __n);
  if (!v12) {
    return result;
  }
LABEL_42:
  int v28 = (unsigned char *)*((void *)a6 + 3);
  *((void *)a6 + 2) += v12;
  int v29 = a6 + 1056;
  unint64_t v30 = a6 + 1056 - v28;
  size_t v31 = v12 - v30;
  if (v12 <= v30)
  {
    size_t v31 = v12;
    uint64_t v32 = v28;
  }
  else
  {
    uint64_t v32 = a6 + 32;
    if (v29 == (void *)v28)
    {
      uint64_t v33 = a6 + 1056;
    }
    else
    {
      memset(v28, 32, a6 + 1056 - v28);
      uint64_t v33 = (char *)(*((void *)a6 + 3) + v30);
      *((void *)a6 + 3) = v33;
    }
    (*((void (**)(void, char *, int64_t))a6 + 1))(*(void *)a6, a6 + 32, v33 - v32);
    *((void *)a6 + 3) = v32;
    if (v31 >= 0x401)
    {
      do
      {
        v31 -= 1024;
        memset(a6 + 32, 32, 0x400uLL);
        *((void *)a6 + 3) = v29;
        (*((void (**)(void, char *, uint64_t))a6 + 1))(*(void *)a6, a6 + 32, 1024);
        *((void *)a6 + 3) = v32;
      }
      while (v31 > 0x400);
    }
  }
  unint64_t result = memset(v32, 32, v31);
  *((void *)a6 + 3) += v31;
  return result;
}

unint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::PrintIntegralDigits<(absl::lts_2020_02_25::str_format_internal::anonymous namespace'::FormatStyle)0,unsigned __int128>(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (result | a2)
  {
    do
    {
      unint64_t v3 = *(void *)(a3 + 88);
      if (v3 <= a3) {
      *((void *)&v5 + 1) = a2;
      }
      *(void *)&long long v5 = result;
      unint64_t v4 = v5 >> 1;
      unint64_t v6 = v4 + (a2 >> 1);
      if (__CFADD__(v4, a2 >> 1)) {
        ++v6;
      }
      unsigned long long v7 = __PAIR128__(a2 >> 1, v4) - v6 % 5;
      BOOL v8 = result <= 9;
      a2 = (v7 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
      *(void *)(a3 + 88) = v3 - 1;
      *(unsigned char *)(v3 - 1) = (result - 2 * v7) | 0x30;
      unint64_t result = 0xCCCCCCCCCCCCCCCDLL * v7;
    }
    while (!v8);
    unint64_t v11 = *(void *)(a3 + 96);
    int v9 = (void *)(a3 + 96);
    int v10 = (unsigned char *)v11;
    if (v11 >= (unint64_t)v9 - 11) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
  }
  else
  {
    unint64_t v12 = *(void *)(a3 + 88);
    if (v12 <= a3) {
    *(void *)(a3 + 88) = v12 - 1;
    }
    *(unsigned char *)(v12 - 1) = 48;
    unint64_t v13 = *(void *)(a3 + 96);
    int v9 = (void *)(a3 + 96);
    int v10 = (unsigned char *)v13;
    if (v13 >= (unint64_t)v9 - 11) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
  }
  *int v9 = v10 + 1;
  *int v10 = 46;
  return result;
}

BOOL absl::lts_2020_02_25::str_format_internal::anonymous namespace'::RemoveExtraPrecision(int a1, char a2, uint64_t a3, _DWORD *a4)
{
  if (a1 < 1) {
    return a1 > 0;
  }
  uint64_t v4 = *(void *)(a3 + 96);
  long long v5 = (char *)(v4 - a1);
  *(void *)(a3 + 96) = v5;
  int v6 = *v5;
  if (v6 <= 53)
  {
    if (v6 != 53) {
      return a1 > 0;
    }
    if ((a2 & 1) == 0)
    {
      if (a1 != 1)
      {
        uint64_t v11 = 1 - a1;
        while (*(unsigned char *)(v4 + v11) == 48)
        {
          if (!++v11) {
            goto LABEL_17;
          }
        }
        goto LABEL_3;
      }
LABEL_17:
      int v12 = *(v5 - 1);
      if (v12 == 46) {
        LOBYTE(v12) = *(v5 - 2);
      }
      if (((char)v12 & 0x80000001) != 1) {
        return a1 > 0;
      }
    }
  }
LABEL_3:
  unint64_t v7 = *(void *)(a3 + 88);
  if (v7 >= (unint64_t)v5) {
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
  }
  BOOL v8 = v5 - 1;
  do
  {
    int v9 = *v8;
    if (v9 != 46)
    {
      if (v9 != 57)
      {
        *BOOL v8 = v9 + 1;
        return a1 > 0;
      }
      *BOOL v8 = 48;
      unint64_t v7 = *(void *)(a3 + 88);
    }
    --v8;
  }
  while ((unint64_t)v8 >= v7);
  *BOOL v8 = 49;
  *(void *)(a3 + 88) = v8;
  unsigned __int8 v13 = v8[1];
  v8[1] = v8[2];
  v8[2] = v13;
  ++*a4;
  unint64_t v14 = *(void *)(a3 + 96);
  if (*(void *)(a3 + 88) >= v14) {
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
  }
  *(void *)(a3 + 96) = v14 - 1;
  return a1 > 0;
}

unint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::PrintIntegralDigits<(absl::lts_2020_02_25::str_format_internal::anonymous namespace'::FormatStyle)0,unsigned long long>(unint64_t result, unint64_t a2)
{
  if (result)
  {
    do
    {
      unint64_t v2 = *(void *)(a2 + 88);
      if (v2 <= a2) {
      *(void *)(a2 + 88) = v2 - 1;
      }
      *(unsigned char *)(v2 - 1) = (result % 0xA) | 0x30;
      BOOL v3 = result > 9;
      result /= 0xAuLL;
    }
    while (v3);
    unint64_t v6 = *(void *)(a2 + 96);
    uint64_t v4 = (void *)(a2 + 96);
    long long v5 = (unsigned char *)v6;
    if (v6 >= (unint64_t)v4 - 11) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 88);
    if (v7 <= a2) {
    *(void *)(a2 + 88) = v7 - 1;
    }
    *(unsigned char *)(v7 - 1) = 48;
    unint64_t v8 = *(void *)(a2 + 96);
    uint64_t v4 = (void *)(a2 + 96);
    long long v5 = (unsigned char *)v8;
    if (v8 >= (unint64_t)v4 - 11) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
  }
  *uint64_t v4 = v5 + 1;
  unsigned char *v5 = 46;
  return result;
}

BOOL absl::lts_2020_02_25::str_format_internal::anonymous namespace'::FallbackToSnprintf<double>(_DWORD *a1, char *a2, double a3)
{
  *(void *)&v22[31] = *MEMORY[0x263EF8340];
  int v7 = a1[1];
  int v6 = a1[2];
  if (v6 < 0) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v6;
  }
  char __format = 37;
  absl::lts_2020_02_25::str_format_internal::Flags::ToString((absl::lts_2020_02_25::str_format_internal::Flags *)((char *)a1 + 1), &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    int64_t size = __src.__r_.__value_.__l.__size_;
    int v10 = (void *)__src.__r_.__value_.__r.__words[0];
    memcpy(v22, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    operator delete(v10);
  }
  else
  {
    int64_t size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    memcpy(v22, &__src, HIBYTE(__src.__r_.__value_.__r.__words[2]));
  }
  *(_WORD *)&v22[size] = 11818;
  v22[size + 2] = 42;
  unint64_t v11 = *(char *)a1;
  if (v11 > 0x14) {
    char v12 = 0;
  }
  else {
    char v12 = aCcssdiouxxffee[v11];
  }
  v22[size + 3] = v12;
  v22[size + 4] = 0;
  if (size >= 27) {
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x208uLL);
  }
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = xmmword_23CE7E6A0;
  bzero(__src.__r_.__value_.__l.__data_, 0x201uLL);
  while (1)
  {
    unsigned __int8 v13 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__src
        : (std::string *)__src.__r_.__value_.__r.__words[0];
    size_t v14 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__src.__r_.__value_.__r.__words[2])
        : __src.__r_.__value_.__l.__size_;
    unsigned int v15 = snprintf((char *)v13, v14, &__format, v7 & ~(v7 >> 31), v8, *(void *)&a3);
    unsigned int v16 = v15;
    if ((v15 & 0x80000000) != 0) {
      break;
    }
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__src.__r_.__value_.__l.__size_ > v15)
      {
        p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (!v15) {
          break;
        }
        goto LABEL_26;
      }
    }
    else if (v15 < HIBYTE(__src.__r_.__value_.__r.__words[2]))
    {
      p_src = &__src;
      if (!v15) {
        break;
      }
LABEL_26:
      unsigned int v18 = (unsigned char *)*((void *)a2 + 3);
      *((void *)a2 + 2) += v16;
      if (a2 - v18 + 1056 <= (unint64_t)v16)
      {
        (*((void (**)(void, char *, int64_t))a2 + 1))(*(void *)a2, a2 + 32, v18 - (a2 + 32));
        *((void *)a2 + 3) = a2 + 32;
        (*((void (**)(void, std::string *, void))a2 + 1))(*(void *)a2, p_src, v16);
      }
      else
      {
        memcpy(v18, p_src, v16);
        *((void *)a2 + 3) += v16;
      }
      break;
    }
    std::string::resize(&__src, v15 + 1, 0);
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  return (v16 & 0x80000000) == 0;
}

void sub_23CB4C8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::FloatToBuffer<(absl::lts_2020_02_25::str_format_internal::anonymous namespace'::FormatStyle)1,double>(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int *a5)
{
  if (a3 > 39) {
    return 0;
  }
  int v8 = a3;
  unint64_t v10 = (unint64_t)*(double *)&a1;
  *(void *)(a4 + 88) = a4 + 41;
  *(void *)(a4 + 96) = a4 + 41;
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 < 0xFFFFFFC4)
    {
      *(_OWORD *)&unint64_t v25 = (unsigned __int128)*(double *)&a1;
      if (a2 < 0xFFFFFF84) {
        return 0;
      }
      int v47 = -a2;
      char v48 = a2 - 1;
      uint64_t v49 = -1 << -(char)a2;
      unint64_t v50 = v49 | (0x7FFFFFFFFFFFFFFFuLL >> (a2 - 1));
      if ((-a2 & 0x40) != 0)
      {
        unint64_t v50 = -1 << -(char)a2;
        uint64_t v49 = 0;
      }
      uint64_t v51 = ~v49;
      unint64_t v52 = ~v50;
      if ((v47 & 0x40) != 0) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = v26 >> v47;
      }
      unint64_t v54 = ((2 * v26) << v48) | (v25 >> v47);
      if ((v47 & 0x40) != 0) {
        unint64_t v54 = v26 >> v47;
      }
      if (v54 | v53)
      {
        do
        {
          unint64_t v55 = *(void *)(a4 + 88);
          if (v55 <= a4) {
          *((void *)&v57 + 1) = v53;
          }
          *(void *)&long long v57 = v54;
          unint64_t v56 = v57 >> 1;
          unint64_t v58 = v56 + (v53 >> 1);
          if (__CFADD__(v56, v53 >> 1)) {
            ++v58;
          }
          unsigned long long v59 = __PAIR128__(v53 >> 1, v56) - v58 % 5;
          BOOL v20 = v54 <= 9;
          unint64_t v53 = (v59 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
          *(void *)(a4 + 88) = v55 - 1;
          *(unsigned char *)(v55 - 1) = (v54 - 2 * v59) | 0x30;
          unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * v59;
        }
        while (!v20);
        unint64_t v60 = *(char **)(a4 + 88);
        if ((unint64_t)v60 <= a4) {
        char v61 = *v60;
        }
        int v62 = *(_DWORD *)(a4 + 96);
        *(void *)(a4 + 88) = v60 - 1;
        *(v60 - 1) = v61;
        *(unsigned char *)(*(void *)(a4 + 88) + 1) = 46;
        unint64_t v63 = v51 & v25;
        unint64_t v64 = v52 & v26;
        int v65 = v62 - v60;
        if (v65)
        {
          int v66 = v65 - 1;
          *a5 = v66;
          int v8 = a3 - v66;
          {
            return 1;
          }
          goto LABEL_103;
        }
      }
      else
      {
        unint64_t v63 = v51 & v25;
        unint64_t v64 = v52 & v26;
      }
      *a5 = 0;
      if (v63 | v64)
      {
        int v85 = 0;
        do
        {
          unint64_t v64 = (__PAIR128__(v64, v63) * 0xA) >> 64;
          v63 *= 10;
          --v85;
        }
        while (__PAIR128__(v52, v51) >= __PAIR128__(v64, v63));
        *a5 = v85;
      }
      else
      {
        unint64_t v63 = 0;
        unint64_t v64 = 0;
      }
      unint64_t v86 = *(void *)(a4 + 88);
      if (v86 <= a4) {
      uint64_t v87 = ((2 * v64) << ~(_BYTE)v47) | (v63 >> v47);
      }
      if ((v47 & 0x40) != 0) {
        uint64_t v87 = v64 >> v47;
      }
      *(void *)(a4 + 88) = v86 - 1;
      *(unsigned char *)(v86 - 1) = v87 + 48;
      unsigned int v88 = *(unsigned char **)(a4 + 96);
      if ((unint64_t)v88 >= a4 + 85) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      *(void *)(a4 + 96) = v88 + 1;
      unsigned char *v88 = 46;
      v63 &= v51;
      v64 &= v52;
LABEL_103:
      if (v8 >= 1)
      {
        int v89 = v8 + 1;
        do
        {
          uint64_t v90 = *(unsigned char **)(a4 + 96);
          if ((unint64_t)v90 >= a4 + 85) {
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
          }
          unint64_t v91 = (__PAIR128__(v64, v63) * 0xA) >> 64;
          unint64_t v92 = v91 >> v47;
          if ((v47 & 0x40) == 0) {
            unint64_t v92 = ((2 * v91) << ~(_BYTE)v47) | ((10 * v63) >> v47);
          }
          unint64_t v64 = v91 & v52;
          unint64_t v63 = (10 * v63) & v51;
          *(void *)(a4 + 96) = v90 + 1;
          *uint64_t v90 = v92 + 48;
          --v89;
        }
        while (v89 > 1);
      }
      unint64_t v93 = (__PAIR128__(v64, v63) * 0xA) >> 64;
      unint64_t v94 = v93 >> v47;
      if ((v47 & 0x40) == 0) {
        unint64_t v94 = ((2 * v93) << ~(_BYTE)v47) | ((10 * v63) >> v47);
      }
      if ((int)v94 < 6)
      {
        if (v94 != 5) {
          return 1;
        }
        unint64_t v96 = v93 & v52;
        unint64_t v95 = *(void *)(a4 + 96);
        if (!((10 * v63) & v51 | v96))
        {
          int v97 = *(unsigned __int8 *)(v95 - 1);
          if (v97 == 46) {
            LOBYTE(v97) = *(unsigned char *)(v95 - 2);
          }
          if (((char)v97 & 0x80000001) != 1) {
            return 1;
          }
        }
      }
      else
      {
        unint64_t v95 = *(void *)(a4 + 96);
      }
      unint64_t v98 = *(void *)(a4 + 88);
      if (v98 >= v95) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      long long v77 = (unsigned __int8 *)(v95 - 1);
      do
      {
        int v78 = *v77;
        if (v78 != 46)
        {
          if (v78 != 57) {
            goto LABEL_124;
          }
          *long long v77 = 48;
          unint64_t v98 = *(void *)(a4 + 88);
        }
        --v77;
      }
      while ((unint64_t)v77 >= v98);
      *long long v77 = 49;
      *(void *)(a4 + 88) = v77;
      unsigned __int8 v99 = v77[1];
      v77[1] = v77[2];
      v77[2] = v99;
      ++*a5;
      unint64_t v80 = *(void *)(a4 + 96);
      if (*(void *)(a4 + 88) >= v80) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      goto LABEL_126;
    }
    int v34 = -a2;
    unint64_t v35 = ~(-1 << -(char)a2);
    unint64_t v36 = v10 >> -(char)a2;
    if (v36)
    {
      do
      {
        unint64_t v37 = *(void *)(a4 + 88);
        if (v37 <= a4) {
        *(void *)(a4 + 88) = v37 - 1;
        }
        *(unsigned char *)(v37 - 1) = (v36 % 0xA) | 0x30;
        BOOL v29 = v36 > 9;
        v36 /= 0xAuLL;
      }
      while (v29);
      unint64_t v38 = *(char **)(a4 + 88);
      if ((unint64_t)v38 <= a4) {
      char v39 = *v38;
      }
      int v40 = *(_DWORD *)(a4 + 96);
      *(void *)(a4 + 88) = v38 - 1;
      *(v38 - 1) = v39;
      *(unsigned char *)(*(void *)(a4 + 88) + 1) = 46;
      unint64_t v41 = v35 & v10;
      if (v40 != v38)
      {
        int v42 = v40 - v38 - 1;
        *a5 = v42;
        int v8 = a3 - v42;
        {
          return 1;
        }
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t v41 = v35 & v10;
    }
    *a5 = 0;
    if (v41)
    {
      int v67 = 0;
      do
      {
        v41 *= 10;
        --v67;
      }
      while (v41 <= v35);
      *a5 = v67;
    }
    unint64_t v68 = *(void *)(a4 + 88);
    if (v68 <= a4) {
    *(void *)(a4 + 88) = v68 - 1;
    }
    *(unsigned char *)(v68 - 1) = (v41 >> v34) + 48;
    int v69 = *(unsigned char **)(a4 + 96);
    if ((unint64_t)v69 >= a4 + 85) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
    *(void *)(a4 + 96) = v69 + 1;
    *int v69 = 46;
    v41 &= v35;
LABEL_65:
    if (v8 >= 1)
    {
      int v70 = v8 + 1;
      do
      {
        int v71 = *(unsigned char **)(a4 + 96);
        if ((unint64_t)v71 >= a4 + 85) {
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        }
        char v72 = ((10 * v41) >> v34) + 48;
        unint64_t v41 = (10 * v41) & v35;
        *(void *)(a4 + 96) = v71 + 1;
        unsigned char *v71 = v72;
        --v70;
      }
      while (v70 > 1);
    }
    unint64_t v73 = (10 * v41) >> v34;
    if ((int)v73 < 6)
    {
      if (v73 != 5) {
        return 1;
      }
      unint64_t v74 = *(void *)(a4 + 96);
      if (((10 * v41) & v35) == 0)
      {
        int v75 = *(unsigned __int8 *)(v74 - 1);
        if (v75 == 46) {
          LOBYTE(v75) = *(unsigned char *)(v74 - 2);
        }
        if (((char)v75 & 0x80000001) != 1) {
          return 1;
        }
      }
    }
    else
    {
      unint64_t v74 = *(void *)(a4 + 96);
    }
    unint64_t v76 = *(void *)(a4 + 88);
    if (v76 >= v74) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
    long long v77 = (unsigned __int8 *)(v74 - 1);
    do
    {
      int v78 = *v77;
      if (v78 != 46)
      {
        if (v78 != 57)
        {
LABEL_124:
          *long long v77 = v78 + 1;
          return 1;
        }
        *long long v77 = 48;
        unint64_t v76 = *(void *)(a4 + 88);
      }
      --v77;
    }
    while ((unint64_t)v77 >= v76);
    *long long v77 = 49;
    *(void *)(a4 + 88) = v77;
    unsigned __int8 v79 = v77[1];
    v77[1] = v77[2];
    v77[2] = v79;
    ++*a5;
    unint64_t v80 = *(void *)(a4 + 96);
    if (*(void *)(a4 + 88) >= v80) {
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
    }
LABEL_126:
    *(void *)(a4 + 96) = v80 - 1;
    return 1;
  }
  if (a2 <= 0xB)
  {
    unint64_t v27 = v10 << a2;
    if (v27)
    {
      do
      {
        unint64_t v28 = *(void *)(a4 + 88);
        if (v28 <= a4) {
        *(void *)(a4 + 88) = v28 - 1;
        }
        *(unsigned char *)(v28 - 1) = (v27 % 0xA) | 0x30;
        BOOL v29 = v27 > 9;
        v27 /= 0xAuLL;
      }
      while (v29);
      unint64_t v30 = *(char **)(a4 + 88);
      if ((unint64_t)v30 <= a4) {
      char v31 = *v30;
      }
      int v32 = *(_DWORD *)(a4 + 96);
      *(void *)(a4 + 88) = v30 - 1;
      *(v30 - 1) = v31;
      *(unsigned char *)(*(void *)(a4 + 88) + 1) = 46;
      int v33 = ~v30 + v32;
    }
    else
    {
      int v33 = -1;
    }
    *a5 = v33;
    int v43 = a3 - v33;
    uint64_t result = 1;
    if (v43 >= 1 && !v44)
    {
      int v45 = v43 + 1;
      do
      {
        unint64_t v46 = *(unsigned char **)(a4 + 96);
        if ((unint64_t)v46 >= a4 + 85) {
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
        }
        *(void *)(a4 + 96) = v46 + 1;
        unsigned char *v46 = 48;
        --v45;
      }
      while (v45 > 1);
      return 1;
    }
    return result;
  }
  if (a2 > 0x4B) {
    return 0;
  }
  *(_OWORD *)&unint64_t v11 = (unsigned __int128)*(double *)&a1;
  unint64_t v13 = (v12 << a2) | (v11 >> 1 >> ~(_BYTE)a2);
  if ((a2 & 0x40) != 0)
  {
    unint64_t v13 = v11 << a2;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = v11 << a2;
  }
  if (v14 | v13)
  {
    do
    {
      unint64_t v15 = *(void *)(a4 + 88);
      if (v15 <= a4) {
      *((void *)&v17 + 1) = v13;
      }
      *(void *)&long long v17 = v14;
      unint64_t v16 = v17 >> 1;
      unint64_t v18 = v16 + (v13 >> 1);
      if (__CFADD__(v16, v13 >> 1)) {
        ++v18;
      }
      unsigned long long v19 = __PAIR128__(v13 >> 1, v16) - v18 % 5;
      BOOL v20 = v14 <= 9;
      unint64_t v13 = (v19 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
      *(void *)(a4 + 88) = v15 - 1;
      *(unsigned char *)(v15 - 1) = (v14 - 2 * v19) | 0x30;
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * v19;
    }
    while (!v20);
    unsigned int v21 = *(char **)(a4 + 88);
    if ((unint64_t)v21 <= a4) {
    char v22 = *v21;
    }
    int v23 = *(_DWORD *)(a4 + 96);
    *(void *)(a4 + 88) = v21 - 1;
    *(v21 - 1) = v22;
    *(unsigned char *)(*(void *)(a4 + 88) + 1) = 46;
    int v24 = ~v21 + v23;
  }
  else
  {
    int v24 = -1;
  }
  *a5 = v24;
  int v81 = a3 - v24;
  uint64_t result = 1;
  if (v81 >= 1 && !v82)
  {
    int v83 = v81 + 1;
    do
    {
      uint64_t v84 = *(unsigned char **)(a4 + 96);
      if ((unint64_t)v84 >= a4 + 85) {
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl();
      }
      *(void *)(a4 + 96) = v84 + 1;
      *uint64_t v84 = 48;
      --v83;
    }
    while (v83 > 1);
    return 1;
  }
  return result;
}

int *absl::lts_2020_02_25::str_format_internal::FILERawSink::Write(int *result, char *a2, size_t a3)
{
  if (a3)
  {
    size_t v3 = a3;
    long long v5 = result;
    do
    {
      if (v5[2]) {
        break;
      }
      int v7 = *__error();
      *__error() = 0;
      size_t v6 = fwrite(a2, 1uLL, v3, *(FILE **)v5);
      if (v6)
      {
        *((void *)v5 + 2) += v6;
        a2 += v6;
        v3 -= v6;
      }
      else if (*__error() != 4)
      {
        if (*__error())
        {
          v5[2] = *__error();
        }
        else if (ferror(*(FILE **)v5))
        {
          v5[2] = 9;
        }
      }
      uint64_t result = __error();
      if (!*result)
      {
        uint64_t result = __error();
        char *result = v7;
      }
    }
    while (v3);
  }
  return result;
}

void sub_23CB4D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ClearErrnoGuard::~ClearErrnoGuard(absl::lts_2020_02_25::str_format_internal::_anonymous_namespace_::ClearErrnoGuard *this)
{
  if (!*__error())
  {
    int v2 = *(_DWORD *)this;
    *__error() = v2;
  }
}

unsigned __int8 *absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, int *a4)
{
  if ((*a4 & 0x80000000) == 0)
  {
    int v34 = a2;
    v32[0] = (char *)&v33;
    v32[1] = (char *)&v35;
    v32[2] = (char *)&v34;
    if (a1 == a2) {
      return 0;
    }
    int v7 = a1 + 1;
    LODWORD(v6) = (char)*a1;
    unint64_t v35 = a1 + 1;
    unsigned __int8 v33 = v6;
    if ((*(unsigned char *)(a3 + 12) & 1) == 0) {
      absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
    }
    if ((int)v6 <= 64)
    {
      int v9 = *(unsigned char *)(a3 + 12) & 0xFE;
      *(unsigned char *)(a3 + 12) = v9;
      if ((int)v6 <= 48)
      {
        do
        {
          int v10 = 2;
          switch((char)v6)
          {
            case ' ':
              int v10 = 8;
              break;
            case '#':
              int v10 = 16;
              break;
            case '+':
              int v10 = 4;
              break;
            case '-':
              break;
            case '0':
              int v10 = 32;
              break;
            default:
              if ((char)v6 >= 48) {
                goto LABEL_14;
              }
              if (v6 != 42) {
                goto LABEL_22;
              }
              if (v7 == a2) {
                return 0;
              }
              unsigned __int8 v17 = *v7;
              LOBYTE(v6) = *v7;
              unint64_t v35 = v7 + 1;
              unsigned __int8 v33 = v17;
              int v18 = (*a4)++;
              if (v18 < 0) {
                absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
              }
              *(_DWORD *)(a3 + 4) = -2 - v18;
              goto LABEL_22;
          }
          v9 |= v10;
          *(unsigned char *)(a3 + 12) = v9;
          if (v7 == a2) {
            return 0;
          }
          int v11 = (char)*v7++;
          LODWORD(v6) = v11;
          unint64_t v35 = v7;
          unsigned __int8 v33 = v11;
        }
        while (v11 < 49);
      }
      if (v6 < 0x3A)
      {
LABEL_14:
        LOBYTE(v6) = v33;
        if (v33 == 36)
        {
          if (!*a4)
          {
            *a4 = -1;
            *(unsigned char *)(a3 + 12) = 1;
          }
          return 0;
        }
        if (v12 < 0) {
          absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
        }
        *(_DWORD *)(a3 + 4) = v12;
LABEL_22:
        if (v6 == 46)
        {
          size_t v6 = v35;
          if (v35 == v34) {
            return 0;
          }
          unint64_t v14 = ++v35;
          unsigned __int8 v33 = *v6;
          unsigned __int8 v15 = v33;
          if ((char)v33 < 0) {
            goto LABEL_35;
          }
          if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v33 + 60) & 0x400) != 0)
          {
            if (v19 < 0) {
              absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
            }
            *(_DWORD *)(a3 + 8) = v19;
            LOBYTE(v6) = v33;
            goto LABEL_38;
          }
          if (v33 != 42)
          {
LABEL_35:
            *(_DWORD *)(a3 + 8) = 0;
            LOBYTE(v6) = v15;
            goto LABEL_38;
          }
          if (v14 == v34) {
            return 0;
          }
          unint64_t v35 = v6 + 2;
          LOBYTE(v6) = v6[1];
          unsigned __int8 v33 = v6;
          int v16 = (*a4)++;
          if (v16 < 0) {
            absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
          }
          *(_DWORD *)(a3 + 8) = -2 - v16;
        }
      }
    }
LABEL_38:
    int v20 = absl::lts_2020_02_25::str_format_internal::kTags[v6];
    if ((absl::lts_2020_02_25::str_format_internal::kTags[v6] & 0x80000000) == 0)
    {
LABEL_39:
      unsigned int v21 = *(unsigned __int8 *)(a3 + 12);
      int v22 = *(_DWORD *)(a3 + 8);
      BOOL v25 = (v21 & 0x3E) == 0 && *(_DWORD *)(a3 + 4) == -1 && v22 == -1;
      int v26 = v21 & 1;
      if ((((v26 == 0) ^ v25) & 1) == 0)
      {
        fprintf((FILE *)*MEMORY[0x263EF8348], "basic=%d left=%d show_pos=%d sign_col=%d alt=%d zero=%d width=%d precision=%d\n", v26, (v21 >> 1) & 1, (v21 >> 2) & 1, (v21 >> 3) & 1, (v21 >> 4) & 1, (v21 >> 5) & 1, *(_DWORD *)(a3 + 4), v22);
        int v26 = *(unsigned char *)(a3 + 12) & 1;
      }
      if (((v25 ^ (v26 == 0)) & 1) == 0) {
        absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
      }
      *(unsigned char *)(a3 + 14) = v20;
      int v27 = *a4 + 1;
      *a4 = v27;
      *(_DWORD *)a3 = v27;
      return v35;
    }
    if (v20 == 128) {
      return 0;
    }
    BOOL v29 = v34;
    unint64_t v28 = v35;
    if (v35 == v34) {
      return 0;
    }
    unint64_t v30 = ++v35;
    int v31 = *v28;
    unsigned __int8 v33 = *v28;
    if (v20 == 255 && v31 == 104)
    {
      *(unsigned char *)(a3 + 13) = 1;
      if (v30 == v29) {
        return 0;
      }
    }
    else
    {
      if (v20 != 253 || v31 != 108)
      {
        *(unsigned char *)(a3 + 13) = ~(_BYTE)v20;
LABEL_65:
        if ((absl::lts_2020_02_25::str_format_internal::kTags[v31] & 0x80000000) == 0)
        {
          LOBYTE(v20) = absl::lts_2020_02_25::str_format_internal::kTags[v31];
          goto LABEL_39;
        }
        return 0;
      }
      *(unsigned char *)(a3 + 13) = 3;
      if (v30 == v29) {
        return 0;
      }
    }
    unint64_t v35 = v28 + 2;
    int v31 = v28[1];
    unsigned __int8 v33 = v28[1];
    goto LABEL_65;
  }
}

unsigned __int8 *absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConsumeConversion<true>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v34 = a2;
  v32[0] = (char *)&v33;
  v32[1] = (char *)&v35;
  v32[2] = (char *)&v34;
  if (a1 == a2) {
    return 0;
  }
  int v3 = *a1;
  unint64_t v35 = a1 + 1;
  unsigned __int8 v33 = v3;
  if ((v3 - 58) < 0xFFFFFFF7) {
    return 0;
  }
  *(_DWORD *)a3 = v5;
  if (v5 <= 0) {
  if (v33 != 36)
  }
    return 0;
  int v7 = v34;
  size_t v6 = v35;
  if (v35 == v34) {
    return 0;
  }
  int v8 = ++v35;
  LODWORD(v6) = (char)*v6;
  unsigned __int8 v33 = v6;
  if ((*(unsigned char *)(a3 + 12) & 1) == 0) {
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  }
  if ((int)v6 > 64) {
    goto LABEL_32;
  }
  int v9 = *(unsigned char *)(a3 + 12) & 0xFE;
  *(unsigned char *)(a3 + 12) = v9;
  if ((int)v6 <= 48)
  {
    do
    {
      int v10 = 2;
      switch((char)v6)
      {
        case ' ':
          int v10 = 8;
          break;
        case '#':
          int v10 = 16;
          break;
        case '+':
          int v10 = 4;
          break;
        case '-':
          break;
        case '0':
          int v10 = 32;
          break;
        default:
          if ((char)v6 >= 48) {
            goto LABEL_17;
          }
          if (v6 != 42) {
            goto LABEL_19;
          }
          if (v8 == v7) {
            return 0;
          }
          unint64_t v35 = v8 + 1;
          unsigned __int8 v33 = *v8;
          if (v33 - 58 < 0xFFFFFFF7) {
            return 0;
          }
          if (v26 <= 0) {
            absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
          }
          *(_DWORD *)(a3 + 4) = ~v26;
          if (v33 != 36) {
            return 0;
          }
          size_t v6 = v35;
          if (v35 == v34) {
            return 0;
          }
          ++v35;
          LOBYTE(v6) = *v6;
          unsigned __int8 v33 = v6;
          goto LABEL_19;
      }
      v9 |= v10;
      *(unsigned char *)(a3 + 12) = v9;
      if (v8 == v7) {
        return 0;
      }
      unint64_t v35 = v8 + 1;
      unsigned __int8 v33 = *v8;
      LODWORD(v6) = (char)v33;
      ++v8;
    }
    while ((char)v33 < 49);
  }
  if (v6 >= 0x3A)
  {
LABEL_32:
    int v18 = absl::lts_2020_02_25::str_format_internal::kTags[v6];
    if (absl::lts_2020_02_25::str_format_internal::kTags[v6] < 0) {
      goto LABEL_56;
    }
    goto LABEL_33;
  }
LABEL_17:
  if (v11 < 0) {
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  }
  *(_DWORD *)(a3 + 4) = v11;
  LOBYTE(v6) = v33;
LABEL_19:
  if (v6 != 46) {
    goto LABEL_32;
  }
  int v12 = v35;
  if (v35 == v34) {
    return 0;
  }
  unint64_t v13 = ++v35;
  unsigned __int8 v33 = *v12;
  unsigned __int8 v14 = v33;
  if ((char)v33 < 0) {
    goto LABEL_31;
  }
  if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v33 + 60) & 0x400) != 0)
  {
    if (v27 < 0) {
      absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
    }
    *(_DWORD *)(a3 + 8) = v27;
    int v18 = absl::lts_2020_02_25::str_format_internal::kTags[v33];
    if ((absl::lts_2020_02_25::str_format_internal::kTags[v33] & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_56:
    if (v18 == 128) {
      return 0;
    }
    BOOL v29 = v34;
    unint64_t v28 = v35;
    if (v35 == v34) {
      return 0;
    }
    unint64_t v30 = ++v35;
    unsigned int v31 = *v28;
    unsigned __int8 v33 = *v28;
    if (v18 == 255 && v31 == 104)
    {
      *(unsigned char *)(a3 + 13) = 1;
      if (v30 == v29) {
        return 0;
      }
    }
    else
    {
      if (v18 != 253 || v31 != 108)
      {
        *(unsigned char *)(a3 + 13) = ~(_BYTE)v18;
LABEL_71:
        if ((absl::lts_2020_02_25::str_format_internal::kTags[v31] & 0x80000000) == 0)
        {
          LOBYTE(v18) = absl::lts_2020_02_25::str_format_internal::kTags[v31];
          goto LABEL_33;
        }
        return 0;
      }
      *(unsigned char *)(a3 + 13) = 3;
      if (v30 == v29) {
        return 0;
      }
    }
    unint64_t v35 = v28 + 2;
    unsigned int v31 = v28[1];
    unsigned __int8 v33 = v28[1];
    goto LABEL_71;
  }
  if (v33 != 42)
  {
LABEL_31:
    *(_DWORD *)(a3 + 8) = 0;
    LOBYTE(v6) = v14;
    goto LABEL_32;
  }
  if (v13 == v34) {
    return 0;
  }
  unint64_t v35 = v12 + 2;
  int v15 = v12[1];
  unsigned __int8 v33 = v15;
  if ((v15 - 58) < 0xFFFFFFF7) {
    return 0;
  }
  if (v16 <= 0) {
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  }
  *(_DWORD *)(a3 + 8) = ~v16;
  if (v33 != 36) {
    return 0;
  }
  unsigned __int8 v17 = v35;
  if (v35 == v34) {
    return 0;
  }
  ++v35;
  unsigned __int8 v33 = *v17;
  int v18 = absl::lts_2020_02_25::str_format_internal::kTags[v33];
  if (absl::lts_2020_02_25::str_format_internal::kTags[v33] < 0) {
    goto LABEL_56;
  }
LABEL_33:
  unsigned int v19 = *(unsigned __int8 *)(a3 + 12);
  int v20 = *(_DWORD *)(a3 + 8);
  BOOL v23 = (v19 & 0x3E) == 0 && *(_DWORD *)(a3 + 4) == -1 && v20 == -1;
  int v24 = v19 & 1;
  if ((((v24 == 0) ^ v23) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "basic=%d left=%d show_pos=%d sign_col=%d alt=%d zero=%d width=%d precision=%d\n", v24, (v19 >> 1) & 1, (v19 >> 2) & 1, (v19 >> 3) & 1, (v19 >> 4) & 1, (v19 >> 5) & 1, *(_DWORD *)(a3 + 4), v20);
    int v24 = *(unsigned char *)(a3 + 12) & 1;
  }
  if (((v23 ^ (v24 == 0)) & 1) == 0) {
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  }
  *(unsigned char *)(a3 + 14) = v18;
  return v35;
}

uint64_t absl::lts_2020_02_25::str_format_internal::anonymous namespace'::ConsumeConversion<true>(char const*,char const*,absl::lts_2020_02_25::str_format_internal::UnboundConversion *,int *)::{lambda(void)#1}::operator()(char **a1)
{
  int v2 = (char **)a1[1];
  uint64_t result = (**a1 - 48);
  uint64_t v4 = *v2;
  if (*v2 != *(char **)a1[2])
  {
    *int v2 = v4 + 1;
    **a1 = *v4;
    unsigned int v5 = **a1;
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = MEMORY[0x263EF8318];
      if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v5 + 60) & 0x400) != 0)
      {
        uint64_t result = v5 + 10 * result - 48;
        int v7 = (char **)a1[1];
        int v8 = *v7;
        if (*v7 != *(char **)a1[2])
        {
          unsigned __int8 *v7 = v8 + 1;
          **a1 = *v8;
          unsigned int v9 = **a1;
          if ((v9 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0)
          {
            uint64_t result = v9 + 10 * result - 48;
            int v10 = (char **)a1[1];
            int v11 = *v10;
            if (*v10 != *(char **)a1[2])
            {
              *int v10 = v11 + 1;
              **a1 = *v11;
              unsigned int v12 = **a1;
              if ((v12 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v12 + 60) & 0x400) != 0)
              {
                uint64_t result = v12 + 10 * result - 48;
                unint64_t v13 = (char **)a1[1];
                unsigned __int8 v14 = *v13;
                if (*v13 != *(char **)a1[2])
                {
                  unsigned __int8 *v13 = v14 + 1;
                  **a1 = *v14;
                  unsigned int v15 = **a1;
                  if ((v15 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) != 0)
                  {
                    uint64_t result = v15 + 10 * result - 48;
                    int v16 = (char **)a1[1];
                    unsigned __int8 v17 = *v16;
                    if (*v16 != *(char **)a1[2])
                    {
                      *int v16 = v17 + 1;
                      **a1 = *v17;
                      unsigned int v18 = **a1;
                      if ((v18 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v18 + 60) & 0x400) != 0)
                      {
                        uint64_t result = v18 + 10 * result - 48;
                        unsigned int v19 = (char **)a1[1];
                        int v20 = *v19;
                        if (*v19 != *(char **)a1[2])
                        {
                          *unsigned int v19 = v20 + 1;
                          **a1 = *v20;
                          unsigned int v21 = **a1;
                          if ((v21 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v21 + 60) & 0x400) != 0)
                          {
                            uint64_t result = v21 + 10 * result - 48;
                            int v22 = (char **)a1[1];
                            BOOL v23 = *v22;
                            if (*v22 != *(char **)a1[2])
                            {
                              *int v22 = v23 + 1;
                              **a1 = *v23;
                              unsigned int v24 = **a1;
                              if ((v24 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v24 + 60) & 0x400) != 0)
                              {
                                uint64_t result = v24 + 10 * result - 48;
                                BOOL v25 = (char **)a1[1];
                                int v26 = *v25;
                                if (*v25 != *(char **)a1[2])
                                {
                                  unsigned char *v25 = v26 + 1;
                                  **a1 = *v26;
                                  unsigned int v27 = **a1;
                                  if ((v27 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v27 + 60) & 0x400) != 0)
                                  {
                                    uint64_t result = v27 + 10 * result - 48;
                                    unint64_t v28 = (char **)a1[1];
                                    BOOL v29 = *v28;
                                    if (*v28 != *(char **)a1[2])
                                    {
                                      *unint64_t v28 = v29 + 1;
                                      **a1 = *v29;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void absl::lts_2020_02_25::CEscape(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3 = __n;
  uint64_t v4 = __s;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!__n) {
    goto LABEL_9;
  }
  if (__n == 1)
  {
    unint64_t v6 = 0;
    int v7 = __s;
    do
    {
LABEL_7:
      int v14 = *v7++;
    }
    while (v7 != &__s[__n]);
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = &__s[__n & 0xFFFFFFFFFFFFFFFELL];
  int v10 = __s + 1;
  std::string::size_type v11 = __n & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v12 = *(v10 - 1);
    int v13 = *v10;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  unint64_t v6 = v9 + v8;
  if (__n != (__n & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_7;
  }
LABEL_8:
  if (v6 == __n)
  {
LABEL_9:
    std::string::append(a3, __s, __n);
    return;
  }
  if (v6)
  {
    if (v6 >= 0x17)
    {
      std::string::__grow_by(a3, 0x16uLL, v6 - 22, 0, 0, 0, 0);
      a3->__r_.__value_.__l.__size_ = 0;
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        unsigned int v15 = (std::string *)a3->__r_.__value_.__r.__words[0];
        a3->__r_.__value_.__l.__size_ = v6;
        goto LABEL_17;
      }
    }
    *((unsigned char *)&a3->__r_.__value_.__s + 23) = v6 & 0x7F;
  }
  else
  {
    *((unsigned char *)&a3->__r_.__value_.__s + 23) = 0;
  }
  unsigned int v15 = a3;
LABEL_17:
  v15->__r_.__value_.__s.__data_[v6] = 0;
  int v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = a3;
  }
  do
  {
    uint64_t v17 = *v4;
    if (v18 == 2)
    {
      switch(*v4)
      {
        case 9:
          LOWORD(v16->__r_.__value_.__l.__data_) = 29788;
          int v16 = (std::string *)((char *)v16 + 2);
          break;
        case 10:
          LOWORD(v16->__r_.__value_.__l.__data_) = 28252;
          int v16 = (std::string *)((char *)v16 + 2);
          break;
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
          break;
        case 13:
          LOWORD(v16->__r_.__value_.__l.__data_) = 29276;
          int v16 = (std::string *)((char *)v16 + 2);
          break;
        case 34:
          LOWORD(v16->__r_.__value_.__l.__data_) = 8796;
          int v16 = (std::string *)((char *)v16 + 2);
          break;
        case 39:
          LOWORD(v16->__r_.__value_.__l.__data_) = 10076;
          int v16 = (std::string *)((char *)v16 + 2);
          break;
        default:
          if (v17 == 92)
          {
            LOWORD(v16->__r_.__value_.__l.__data_) = 23644;
            int v16 = (std::string *)((char *)v16 + 2);
          }
          break;
      }
    }
    else if (v18 == 1)
    {
      v16->__r_.__value_.__s.__data_[0] = v17;
      int v16 = (std::string *)((char *)v16 + 1);
    }
    else
    {
      v16->__r_.__value_.__s.__data_[0] = 92;
      v16->__r_.__value_.__s.__data_[1] = (v17 >> 6) | 0x30;
      v16->__r_.__value_.__s.__data_[2] = (v17 >> 3) & 7 | 0x30;
      v16->__r_.__value_.__s.__data_[3] = v17 & 7 | 0x30;
      int v16 = (std::string *)((char *)v16 + 4);
    }
    ++v4;
    --v3;
  }
  while (v3);
}

void sub_23CB4E0B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(absl::lts_2020_02_25::numbers_internal *this, unsigned char *a2, char *a3)
{
  if (this >= 0x3B9ACA00)
  {
    *(_WORD *)a2 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2
                                                                                     * (this
                                                                                      / 0x5F5E100)];
    a2 += 2;
    LODWORD(this) = this % 0x5F5E100;
    if (this <= 0x5F5E0FF) {
      goto LABEL_3;
    }
LABEL_23:
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
  }
  if (this > 0x63)
  {
    if (this >> 4 <= 0x270)
    {
      if (this <= 0x3E7)
      {
        unsigned int v7 = (unsigned __int16)this / 0x64u;
        LODWORD(this) = this - 100 * v7;
        *a2++ = v7 + 48;
        if (this < 0x64) {
          goto LABEL_6;
        }
        goto LABEL_13;
      }
      goto LABEL_5;
    }
    if (this < 0xF4240)
    {
      if (this >> 5 <= 0xC34)
      {
        unsigned int v8 = this / 0x2710;
        LODWORD(this) = this % 0x2710;
        *a2++ = v8 + 48;
        if (this >> 4 >= 0x271) {
          goto LABEL_17;
        }
LABEL_5:
        unsigned int v5 = (unsigned __int16)this / 0x64u;
        LODWORD(this) = this - 100 * v5;
        *(_WORD *)a2 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v5];
        a2 += 2;
        if (this < 0x64)
        {
LABEL_6:
          *(_WORD *)a2 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * this];
          a2[2] = 0;
          return a2 + 2;
        }
LABEL_13:
        absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
      }
LABEL_4:
      unint64_t v4 = this / 0x2710uLL;
      LODWORD(this) = this % 0x2710;
      *(_WORD *)a2 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v4];
      a2 += 2;
      if (this >> 4 < 0x271) {
        goto LABEL_5;
      }
LABEL_17:
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
    }
    if (this >= 0x5F5E100)
    {
      *a2++ = this / 0x5F5E100 + 48;
      LODWORD(this) = this % 0x5F5E100;
      if (this > 0x5F5E0FF) {
        goto LABEL_23;
      }
    }
    else if (this <= 0x98967F)
    {
      unsigned int v9 = this / 0xF4240;
      LODWORD(this) = this % 0xF4240;
      *a2++ = v9 + 48;
      if (this > 0xF423F) {
        goto LABEL_21;
      }
      goto LABEL_4;
    }
LABEL_3:
    unsigned int v3 = this / 0xF4240;
    LODWORD(this) = this % 0xF4240;
    *(_WORD *)a2 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v3];
    a2 += 2;
    if (this <= 0xF423F) {
      goto LABEL_4;
    }
LABEL_21:
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
  }
  if (this > 9) {
    goto LABEL_6;
  }
  return a2 + 1;
}

{
  if ((this & 0x80000000) != 0)
  {
    *a2++ = 45;
    this = (absl::lts_2020_02_25::numbers_internal *)-(int)this;
  }
  return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, a2, a3);
}

{
  int v3;
  unint64_t v5;
  _WORD *v6;
  unint64_t v7;
  unsigned char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t vars8;

  unsigned int v3 = (int)this;
  if ((unint64_t)this >> 32)
  {
    unsigned int v5 = (unint64_t)this / 0x3B9ACA00;
    if ((unint64_t)this > 0x3B9AC9FFFFFFFFFFLL)
    {
      unsigned int v7 = v5 - 100 * ((unint64_t)this / 0x174876E800);
      unsigned int v8 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)((unint64_t)this / 0x174876E800), a2, a3);
      if (v7 >= 0x64) {
        absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
      }
      *(_WORD *)unsigned int v8 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v7];
      unint64_t v6 = v8 + 2;
    }
    else
    {
      unint64_t v6 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)((unint64_t)this / 0x3B9ACA00), a2, a3);
    }
    unsigned int v9 = v3 - 1000000000 * v5;
    if (v9 >= 0x3B9ACA00) {
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
    }
    int v10 = v9 / 0x989680;
    std::string::size_type v11 = v9 % 0x989680;
    unsigned __int8 *v6 = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v10];
    if (v11 > 0x98967F) {
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
    }
    uint64_t v12 = v11 / 0x186A0;
    int v13 = v11 % 0x186A0;
    v6[1] = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v12];
    if (v13 >> 5 >= 0xC35) {
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
    }
    int v14 = v13 / 0x3E8uLL;
    unsigned int v15 = v13 % 0x3E8;
    v6[2] = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v14];
    if (v15 >= 0x3E8) {
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
    }
    int v16 = (unsigned __int16)v15 / 0xAu;
    v6[3] = *(_WORD *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v16];
    return (char *)v6 + 9;
  }
  else
  {
    return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, a2, a3);
  }
}

unsigned char *absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(uint64_t this, unsigned char *a2, char *a3)
{
  if (this < 0)
  {
    *a2++ = 45;
    this = -this;
  }
  return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)this, a2, a3);
}

uint64_t absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer(absl::lts_2020_02_25::numbers_internal *this, double a2, char *a3)
{
  if (a2 == 0.0)
  {
    unint64_t v4 = this;
    if ((*(void *)&a2 & 0x8000000000000000) != 0)
    {
      *(unsigned char *)this = 45;
      unint64_t v4 = (absl::lts_2020_02_25::numbers_internal *)((char *)this + 1);
    }
    *(_WORD *)unint64_t v4 = 48;
    return v4 - this + 1;
  }
  if (a2 < 0.0)
  {
    *(unsigned char *)this = 45;
    unint64_t v6 = (absl::lts_2020_02_25::numbers_internal *)((char *)this + 1);
    a2 = -a2;
    if (fabs(a2) != INFINITY) {
      goto LABEL_7;
    }
LABEL_30:
    *(_DWORD *)unint64_t v6 = 6712937;
    return v6 - this + 3;
  }
  unint64_t v6 = this;
  if (fabs(a2) == INFINITY) {
    goto LABEL_30;
  }
LABEL_7:
  if (a2 >= 999999.5)
  {
    double v7 = a2 * 1.0e-256;
    if (a2 >= 1.0e261)
    {
      int v12 = 261;
    }
    else
    {
      double v7 = a2;
      int v12 = 5;
    }
    if (v7 >= 1.0e133)
    {
      double v7 = v7 * 1.0e-128;
      v12 |= 0x80u;
    }
    if (v7 >= 1.0e69)
    {
      double v7 = v7 * 1.0e-64;
      v12 |= 0x40u;
    }
    if (v7 >= 1.0e37)
    {
      double v7 = v7 * 1.0e-32;
      v12 |= 0x20u;
    }
    if (v7 >= 1.0e21)
    {
      double v7 = v7 * 1.0e-16;
      v12 += 16;
    }
    if (v7 >= 1.0e13)
    {
      double v7 = v7 * 0.00000001;
      v12 += 8;
    }
    if (v7 >= 1000000000.0)
    {
      double v7 = v7 * 0.0001;
      v12 += 4;
    }
    if (v7 < 10000000.0)
    {
      int v10 = v12;
    }
    else
    {
      double v7 = v7 * 0.01;
      int v10 = v12 + 2;
    }
    if (v7 >= 1000000.0)
    {
      ++v10;
      double v11 = 0.1;
      goto LABEL_51;
    }
  }
  else
  {
    double v7 = a2 * 1.0e256;
    if (a2 < 1.0e-250)
    {
      int v8 = -251;
    }
    else
    {
      double v7 = a2;
      int v8 = 5;
    }
    if (v7 < 1.0e-122)
    {
      double v7 = v7 * 1.0e128;
      v8 -= 128;
    }
    if (v7 < 1.0e-58)
    {
      double v7 = v7 * 1.0e64;
      v8 -= 64;
    }
    if (v7 < 1.0e-26)
    {
      double v7 = v7 * 1.0e32;
      v8 -= 32;
    }
    if (v7 < 1.0e-10)
    {
      double v7 = v7 * 1.0e16;
      v8 -= 16;
    }
    if (v7 >= 0.01)
    {
      int v9 = v8;
    }
    else
    {
      double v7 = v7 * 100000000.0;
      int v9 = v8 - 8;
    }
    if (v7 < 100.0)
    {
      double v7 = v7 * 10000.0;
      v9 -= 4;
    }
    if (v7 >= 10000.0)
    {
      int v10 = v9;
    }
    else
    {
      double v7 = v7 * 100.0;
      int v10 = v9 - 2;
    }
    if (v7 < 100000.0)
    {
      --v10;
      double v11 = 10.0;
LABEL_51:
      double v7 = v7 * v11;
    }
  }
  unint64_t v13 = vcvtd_n_u64_f64(v7, 0x10uLL);
  if ((unint64_t)(unsigned __int16)v13 - 0x7FFF <= 1)
  {
    unint64_t v14 = v13 >> 16;
    unint64_t v15 = 2 * vcvtd_n_u64_f64(frexp(a2, &__e), 0x3FuLL);
    int v16 = (2 * v14) | 1;
    if (v10 < 6)
    {
      unint64_t v17 = (uint64_t)v16 << __clz(v16);
      unint64_t v15 = absl::lts_2020_02_25::PowFive(v15, 5 - v10);
      unint64_t v19 = 0;
      if (v17 < v15)
      {
LABEL_69:
        LODWORD(v21) = v14 + 1;
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v17 = absl::lts_2020_02_25::PowFive(v16, v10 - 5);
      unint64_t v19 = v18;
      unint64_t v20 = 0;
      if (v17 < v15) {
        goto LABEL_69;
      }
    }
    if (v15 < v17 || v19 >= v20)
    {
      BOOL v23 = v15 == v17 && v20 == v19;
      LODWORD(v21) = (v14 & 1) + v14;
      if (!v23) {
        LODWORD(v21) = v14;
      }
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  unint64_t v21 = (v13 + 0x8000) >> 16;
LABEL_70:
  if (v21 == 1000000) {
    int v24 = 100000;
  }
  else {
    int v24 = v21;
  }
  int v25 = v24 / 10000;
  if ((v24 / 10000) >= 0x64) {
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
  }
  int v26 = v24 % 10000;
  if ((v26 / 100) >= 0x64) {
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
  }
  if ((v26 % 100) >= 0x64) {
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
  }
  uint64_t v27 = *(unsigned __int16 *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * v25];
  uint64_t v28 = *(unsigned __int16 *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * (v26 / 100)];
  BOOL v29 = v21 > 0xF4240;
  if (v21 == 1000000) {
    int v30 = v10 + 1;
  }
  else {
    int v30 = v10;
  }
  unsigned int v31 = *(unsigned __int16 *)&absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[2 * (v26 % 100)];
  unint64_t v32 = (v27 << 32) | (v28 << 48);
  *(_WORD *)unint64_t v6 = 11824;
  switch(v30)
  {
    case -4:
      *((unsigned char *)v6 + 2) = 48;
      unint64_t v6 = (absl::lts_2020_02_25::numbers_internal *)((char *)v6 + 1);
      goto LABEL_81;
    case -3:
LABEL_81:
      *((unsigned char *)v6 + 2) = 48;
      unint64_t v6 = (absl::lts_2020_02_25::numbers_internal *)((char *)v6 + 1);
      goto LABEL_82;
    case -2:
LABEL_82:
      *((unsigned char *)v6 + 2) = 48;
      unint64_t v6 = (absl::lts_2020_02_25::numbers_internal *)((char *)v6 + 1);
      goto LABEL_83;
    case -1:
LABEL_83:
      *((unsigned char *)v6 + 2) = v27;
      *(_WORD *)((char *)v6 + 3) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 5) = HIBYTE(v32);
      *((_WORD *)v6 + 3) = v31;
      unsigned __int8 v33 = (char *)v6 + 9;
      uint64_t result = (absl::lts_2020_02_25::numbers_internal *)((char *)v6 + 9) - this;
      do
      {
        int v34 = *(v33 - 2);
        --result;
        --v33;
      }
      while (v34 == 48);
      *unsigned __int8 v33 = 0;
      return result;
    case 0:
      *(unsigned char *)unint64_t v6 = v27;
      *((unsigned char *)v6 + 1) = 46;
      *((_WORD *)v6 + 1) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 4) = HIBYTE(v32);
      *(_WORD *)((char *)v6 + 5) = v31;
      int v43 = (char *)v6 + 8;
      do
      {
        int v44 = *(v43 - 2);
        --v43;
      }
      while (v44 == 48);
      if (v44 == 46) {
        --v43;
      }
      break;
    case 1:
      *(unsigned char *)unint64_t v6 = v27;
      *((unsigned char *)v6 + 1) = BYTE5(v32);
      *((unsigned char *)v6 + 2) = 46;
      *(_WORD *)((char *)v6 + 3) = v28;
      int v45 = (char *)v6 + 8;
      *(_WORD *)((char *)v6 + 5) = v31;
      do
      {
        int v46 = *(v45 - 2);
        --v45;
      }
      while (v46 == 48);
      goto LABEL_112;
    case 2:
      *(unsigned char *)unint64_t v6 = v27;
      *(_WORD *)((char *)v6 + 1) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 3) = 46;
      *((unsigned char *)v6 + 4) = BYTE1(v28);
      int v45 = (char *)v6 + 8;
      *(_WORD *)((char *)v6 + 5) = v31;
      do
      {
        int v46 = *(v45 - 2);
        --v45;
      }
      while (v46 == 48);
LABEL_112:
      if (v46 == 46) {
        int v43 = v45 - 1;
      }
      else {
        int v43 = v45;
      }
      break;
    case 3:
      *(unsigned char *)unint64_t v6 = v27;
      *(_WORD *)((char *)v6 + 1) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 3) = HIBYTE(v32);
      unsigned int v47 = v31 >> 8;
      if (((v31 >> 8) | v31) == 0x30)
      {
        int v43 = (char *)v6 + 4;
        break;
      }
      *((unsigned char *)v6 + 4) = 46;
      *((unsigned char *)v6 + 5) = v31;
      if (v47 != 48) {
        goto LABEL_123;
      }
      int v43 = (char *)v6 + 6;
      break;
    case 4:
      *(unsigned char *)unint64_t v6 = v27;
      *(_WORD *)((char *)v6 + 1) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 3) = HIBYTE(v32);
      *((unsigned char *)v6 + 4) = v31;
      unsigned int v47 = v31 >> 8;
      if (v31 >> 8 == 48)
      {
        int v43 = (char *)v6 + 5;
      }
      else
      {
        *((unsigned char *)v6 + 5) = 46;
LABEL_123:
        int v43 = (char *)v6 + 7;
        *((unsigned char *)v6 + 6) = v47;
      }
      break;
    case 5:
      *(unsigned char *)unint64_t v6 = v27;
      *(_WORD *)((char *)v6 + 1) = HIDWORD(v32) >> 8;
      *((unsigned char *)v6 + 3) = HIBYTE(v32);
      *((_WORD *)v6 + 2) = v31;
      *((unsigned char *)v6 + 6) = 0;
      return (absl::lts_2020_02_25::numbers_internal *)((char *)v6 + 6) - this;
    default:
      if (!v29) {
        absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer();
      }
      unint64_t v35 = v32 >> 40;
      *(unsigned char *)unint64_t v6 = v27;
      *((_WORD *)v6 + 1) = v35;
      *((unsigned char *)v6 + 4) = BYTE2(v35);
      *(_WORD *)((char *)v6 + 5) = v31;
      unint64_t v36 = (char *)v6 + 8;
      do
      {
        int v37 = *(v36 - 2);
        --v36;
      }
      while (v37 == 48);
      if (v37 == 46) {
        unint64_t v38 = v36 - 1;
      }
      else {
        unint64_t v38 = v36;
      }
      *unint64_t v38 = 101;
      if (v30 <= 0) {
        char v39 = 45;
      }
      else {
        char v39 = 43;
      }
      if (v30 >= 0) {
        unsigned int v40 = v30;
      }
      else {
        unsigned int v40 = -v30;
      }
      v38[1] = v39;
      if (v40 < 0x64)
      {
        int v42 = v38 + 2;
      }
      else
      {
        unsigned int v41 = v40 / 0x64;
        v40 %= 0x64u;
        v38[2] = v41 + 48;
        if (v40 >= 0x64) {
          absl::lts_2020_02_25::numbers_internal::FastIntToBuffer();
        }
        int v42 = v38 + 3;
      }
      *(_WORD *)int v42 = *(_WORD *)((unsigned __int16)v28 + 2 * v40);
      v42[2] = 0;
      return v42 + 2 - (unsigned char *)this;
  }
  *int v43 = 0;
  return v43 - (unsigned char *)this;
}

unint64_t absl::lts_2020_02_25::PowFive(unint64_t this, int a2)
{
  if (a2 < 13)
  {
    unint64_t v2 = 0;
  }
  else
  {
    unint64_t v2 = 0;
    int v3 = a2;
    do
    {
      unint64_t v4 = 1220703125 * this;
      unint64_t v5 = (__PAIR128__(0x48C2739500000000 * HIDWORD(this) + v4, 0x48C2739500000000 * HIDWORD(v2))
          + __PAIR128__((1220703125 * (unint64_t)HIDWORD(v2)) >> 32, 1220703125 * (unint64_t)v2)) >> 64;
      unint64_t v2 = 0x48C2739500000000 * HIDWORD(v2) + 1220703125 * v2;
      unint64_t v6 = (1220703125 * (unint64_t)HIDWORD(this)) >> 32;
      if (v5 < v4) {
        ++v6;
      }
      char v7 = __clz(v6);
      unint64_t v8 = (v2 >> -v7) + (v5 << v7);
      int v9 = (absl::lts_2020_02_25 *)((v5 >> -v7) + (v6 << v7));
      if (v6) {
        this = (unint64_t)v9;
      }
      else {
        this = v5;
      }
      if (v6) {
        unint64_t v2 = v8;
      }
      LOBYTE(a2) = v3 - 13;
      BOOL v10 = v3 <= 25;
      v3 -= 13;
    }
    while (!v10);
  }
  unsigned int v11 = dword_23CE7EA80[a2 & 0xF];
  unint64_t v12 = this * (unint64_t)v11;
  unint64_t v13 = HIDWORD(this) * (unint64_t)v11;
  unint64_t v16 = v2 * (unint64_t)v11 + ((HIDWORD(v2) * (unint64_t)v11) << 32);
  unint64_t v14 = (__PAIR128__((v13 << 32) + v12, v2 * (unint64_t)v11)
       + __PAIR128__((HIDWORD(v2) * (unint64_t)v11) >> 32, (HIDWORD(v2) * (unint64_t)v11) << 32)) >> 64;
  unint64_t v15 = v16;
  unint64_t v17 = HIDWORD(v13);
  if (v14 < v12) {
    ++v17;
  }
  char v18 = __clz(v17);
  unint64_t v19 = (v16 >> -v18) + (v14 << v18);
  unint64_t v20 = (v14 >> -v18) + (v17 << v18);
  if (v17)
  {
    unint64_t v14 = v20;
    unint64_t v15 = v19;
  }
  unint64_t v21 = __clz(v14);
  if (v21) {
    return (v15 >> -(char)v21) + (v14 << v21);
  }
  else {
    return v14;
  }
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unint64_t v6 = *(void *)(a2 + 8) + *(void *)(a1 + 8);
  if (!v6)
  {
    *((unsigned char *)&a3->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v6 < 0x17
    || (std::string::__grow_by(a3, 0x16uLL, v6 - 22, 0, 0, 0, 0),
        a3->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((unsigned char *)&a3->__r_.__value_.__s + 23) = v6 & 0x7F;
LABEL_6:
    char v7 = a3;
    goto LABEL_7;
  }
  char v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  a3->__r_.__value_.__l.__size_ = v6;
LABEL_7:
  v7->__r_.__value_.__s.__data_[v6] = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = a3;
  }
  else {
    int v9 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v8) {
    memcpy(v9, *(const void **)a1, *(void *)(a1 + 8));
  }
  BOOL v10 = (char *)v9 + v8;
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    memcpy(v10, *(const void **)a2, *(void *)(a2 + 8));
  }
  std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  if (&v10[v11] != (char *)v9 + size) {
    __assert_rtn("StrCat", "str_cat.cc", 106, "out == begin + result.size()");
  }
}

void sub_23CB4EFE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  unint64_t v8 = *(void *)(a2 + 8) + *(void *)(a1 + 8) + *(void *)(a3 + 8);
  if (!v8)
  {
    *((unsigned char *)&a4->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v8 < 0x17
    || (std::string::__grow_by(a4, 0x16uLL, v8 - 22, 0, 0, 0, 0),
        a4->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a4->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((unsigned char *)&a4->__r_.__value_.__s + 23) = v8 & 0x7F;
LABEL_6:
    int v9 = a4;
    goto LABEL_7;
  }
  int v9 = (std::string *)a4->__r_.__value_.__r.__words[0];
  a4->__r_.__value_.__l.__size_ = v8;
LABEL_7:
  v9->__r_.__value_.__s.__data_[v8] = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = (std::string *)a4->__r_.__value_.__r.__words[0];
  }
  if (v10) {
    memcpy(v11, *(const void **)a1, *(void *)(a1 + 8));
  }
  unint64_t v12 = (char *)v11 + v10;
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13) {
    memcpy(v12, *(const void **)a2, *(void *)(a2 + 8));
  }
  unint64_t v14 = &v12[v13];
  uint64_t v15 = *(void *)(a3 + 8);
  if (v15) {
    memcpy(v14, *(const void **)a3, *(void *)(a3 + 8));
  }
  std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (&v14[v15] != (char *)v11 + size) {
    __assert_rtn("StrCat", "str_cat.cc", 119, "out == begin + result.size()");
  }
}

void sub_23CB4F160(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  unint64_t v10 = *(void *)(a2 + 8) + *(void *)(a1 + 8) + *(void *)(a3 + 8) + *(void *)(a4 + 8);
  if (!v10)
  {
    *((unsigned char *)&a5->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v10 < 0x17
    || (std::string::__grow_by(a5, 0x16uLL, v10 - 22, 0, 0, 0, 0),
        a5->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a5->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((unsigned char *)&a5->__r_.__value_.__s + 23) = v10 & 0x7F;
LABEL_6:
    uint64_t v11 = a5;
    goto LABEL_7;
  }
  uint64_t v11 = (std::string *)a5->__r_.__value_.__r.__words[0];
  a5->__r_.__value_.__l.__size_ = v10;
LABEL_7:
  v11->__r_.__value_.__s.__data_[v10] = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = (std::string *)a5->__r_.__value_.__r.__words[0];
  }
  if (v12) {
    memcpy(v13, *(const void **)a1, *(void *)(a1 + 8));
  }
  unint64_t v14 = (char *)v13 + v12;
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15) {
    memcpy(v14, *(const void **)a2, *(void *)(a2 + 8));
  }
  unint64_t v16 = &v14[v15];
  uint64_t v17 = *(void *)(a3 + 8);
  if (v17) {
    memcpy(v16, *(const void **)a3, *(void *)(a3 + 8));
  }
  char v18 = &v16[v17];
  uint64_t v19 = *(void *)(a4 + 8);
  if (v19) {
    memcpy(v18, *(const void **)a4, *(void *)(a4 + 8));
  }
  std::string::size_type size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a5->__r_.__value_.__l.__size_;
  }
  if (&v18[v19] != (char *)v13 + size) {
    __assert_rtn("StrCat", "str_cat.cc", 134, "out == begin + result.size()");
  }
}

void sub_23CB4F30C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::strings_internal::CatPieces(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  if (!a2)
  {
    int v9 = a3 + 23;
LABEL_15:
    unint64_t v7 = 0;
    *int v9 = 0;
LABEL_16:
    a3[v7] = 0;
    LODWORD(v19) = a3[23];
    if ((int)v19 >= 0) {
      unint64_t v20 = a3;
    }
    else {
      unint64_t v20 = *(char **)a3;
    }
    if (a2) {
      goto LABEL_20;
    }
LABEL_29:
    BOOL v23 = v20;
    goto LABEL_30;
  }
  unint64_t v6 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v6 >= 4)
  {
    unint64_t v10 = v6 + 1;
    uint64_t v11 = v10 & 3;
    if ((v10 & 3) == 0) {
      uint64_t v11 = 4;
    }
    unint64_t v12 = v10 - v11;
    uint64_t v8 = a1 + 16 * v12;
    uint64_t v13 = (const double *)(a1 + 40);
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    do
    {
      unint64_t v16 = v13 - 4;
      unsigned long long v17 = (unsigned __int128)vld2q_f64(v16);
      unsigned long long v18 = (unsigned __int128)vld2q_f64(v13);
      int64x2_t v14 = vaddq_s64((int64x2_t)v17, v14);
      int64x2_t v15 = vaddq_s64((int64x2_t)v18, v15);
      v13 += 8;
      v12 -= 4;
    }
    while (v12);
    unint64_t v7 = vaddvq_s64(vaddq_s64(v15, v14));
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = a1;
  }
  do
  {
    v7 += *(void *)(v8 + 8);
    v8 += 16;
  }
  while (v8 != a1 + 16 * a2);
  int v9 = a3 + 23;
  if (!v7) {
    goto LABEL_15;
  }
  if (v7 < 0x17
    || (std::string::__grow_by((std::string *)a3, 0x16uLL, v7 - 22, 0, 0, 0, 0),
        *((void *)a3 + 1) = 0,
        (a3[23] & 0x80000000) == 0))
  {
    *int v9 = v7 & 0x7F;
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)a3;
  *((void *)a3 + 1) = v7;
  *(unsigned char *)(v19 + v7) = 0;
  LODWORD(v19) = a3[23];
  if ((int)v19 >= 0) {
    unint64_t v20 = a3;
  }
  else {
    unint64_t v20 = *(char **)a3;
  }
  if (!a2) {
    goto LABEL_29;
  }
LABEL_20:
  uint64_t v21 = 16 * a2;
  int v22 = (size_t *)(a1 + 8);
  BOOL v23 = v20;
  do
  {
    size_t v24 = *v22;
    if (*v22)
    {
      memcpy(v23, (const void *)*(v22 - 1), *v22);
      v23 += v24;
    }
    v22 += 2;
    v21 -= 16;
  }
  while (v21);
  LOBYTE(v19) = *v9;
LABEL_30:
  uint64_t v19 = v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)a3 + 1);
  }
  if (v23 != &v20[v19]) {
    __assert_rtn("CatPieces", "str_cat.cc", 156, "out == begin + result.size()");
  }
}

void sub_23CB4F51C(_Unwind_Exception *exception_object)
{
  if (*v2 < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::strings_internal::AppendPieces(std::string *this, void *a2, uint64_t a3)
{
  int v3 = (const void **)a2;
  LODWORD(v5) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80000000) != 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v7 = (const void **)&a2[2 * a3];
    if (a3)
    {
      uint64_t v14 = 16 * a3;
      int64x2_t v15 = a2 + 1;
      std::string::size_type v8 = this->__r_.__value_.__l.__size_;
      unint64_t v16 = a2 + 1;
      do
      {
        uint64_t v18 = *v16;
        v16 += 2;
        uint64_t v17 = v18;
        if (v18 && *(v15 - 1) - this->__r_.__value_.__r.__words[0] <= this->__r_.__value_.__l.__size_) {
LABEL_17:
        }
          absl::lts_2020_02_25::strings_internal::AppendPieces();
        v8 += v17;
        int64x2_t v15 = v16;
        v14 -= 16;
      }
      while (v14);
      char v12 = 0;
      if ((v5 & 0x80000000) != 0)
      {
LABEL_29:
        std::string::size_type v6 = this->__r_.__value_.__l.__size_;
        unint64_t v19 = v8 - v6;
        if (v8 <= v6)
        {
          std::string::size_type v23 = this->__r_.__value_.__r.__words[0];
          this->__r_.__value_.__l.__size_ = v8;
          *(unsigned char *)(v23 + v8) = 0;
          int v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0) {
            goto LABEL_37;
          }
          goto LABEL_33;
        }
        unint64_t v22 = this->__r_.__value_.__r.__words[2];
        std::string::size_type v20 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        unint64_t v5 = HIBYTE(v22);
        if (v20 - v6 >= v19) {
          goto LABEL_23;
        }
LABEL_22:
        std::string::__grow_by(this, v20, v19 - v20 + v6, v6, v6, 0, 0);
        this->__r_.__value_.__l.__size_ = v6;
        LOBYTE(v5) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_23:
        if ((v5 & 0x80) != 0)
        {
          std::string::size_type v26 = this->__r_.__value_.__r.__words[0];
          this->__r_.__value_.__l.__size_ = v6 + v19;
          *(unsigned char *)(v26 + v6 + v19) = 0;
          int v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0) {
            goto LABEL_37;
          }
        }
        else
        {
          *((unsigned char *)&this->__r_.__value_.__s + 23) = (v6 + v19) & 0x7F;
          this->__r_.__value_.__s.__data_[v6 + v19] = 0;
          int v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0) {
            goto LABEL_37;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      char v12 = 1;
      std::string::size_type v8 = this->__r_.__value_.__l.__size_;
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_29;
      }
    }
  }
  else
  {
    unint64_t v7 = (const void **)&a2[2 * a3];
    if (!a3)
    {
      char v12 = 1;
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      std::string::size_type size = v8;
      goto LABEL_26;
    }
    std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    int v9 = (const void **)a2;
    do
    {
      unint64_t v10 = v9[1];
      if (v10) {
        BOOL v11 = (unsigned char *)*v9 - (unsigned char *)this > v6;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11) {
        goto LABEL_17;
      }
      v8 += (std::string::size_type)v10;
      v9 += 2;
    }
    while (v9 != v7);
    char v12 = 0;
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_29;
    }
  }
  unint64_t v19 = v8 - v6;
  if (v8 > v6)
  {
    std::string::size_type v20 = 22;
    if (22 - v6 >= v19) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_26:
  *((unsigned char *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
  this->__r_.__value_.__s.__data_[v8] = 0;
  int v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v21 < 0)
  {
LABEL_37:
    int v25 = (std::string *)this->__r_.__value_.__r.__words[0];
    size_t v24 = (std::string *)(this->__r_.__value_.__r.__words[0] + size);
    if (v12)
    {
LABEL_45:
      if (v24 != (std::string *)((char *)v25 + this->__r_.__value_.__l.__size_)) {
        goto LABEL_46;
      }
      return;
    }
    do
    {
LABEL_40:
      uint64_t v27 = (char *)v3[1];
      if (v27)
      {
        memcpy(v24, *v3, (size_t)v3[1]);
        size_t v24 = (std::string *)&v27[(void)v24];
      }
      v3 += 2;
    }
    while (v3 != v7);
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v24 != (std::string *)((char *)v25 + HIBYTE(this->__r_.__value_.__r.__words[2]))) {
        goto LABEL_46;
      }
      return;
    }
    goto LABEL_45;
  }
LABEL_33:
  size_t v24 = (std::string *)((char *)this + size);
  int v25 = this;
  if ((v12 & 1) == 0) {
    goto LABEL_40;
  }
  if (v24 != (std::string *)((char *)this + v21)) {
LABEL_46:
  }
    absl::lts_2020_02_25::strings_internal::AppendPieces();
}

std::string *absl::lts_2020_02_25::StrAppend(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(const std::string::value_type **)a2;
  std::string::size_type v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      if ((unint64_t)&v2[-a1] > *(unsigned __int8 *)(a1 + 23)) {
        goto LABEL_4;
      }
LABEL_8:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v2[-*(void *)a1] <= *(void *)(a1 + 8)) {
      goto LABEL_8;
    }
  }
LABEL_4:

  return std::string::append((std::string *)a1, v2, v3);
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = *(unsigned char **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v7 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
        goto LABEL_4;
      }
LABEL_22:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v7[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
  }
LABEL_4:
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8)
  {
    int v9 = *(unsigned char **)a3;
    LODWORD(v10) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) != 0)
    {
      if ((unint64_t)&v9[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_7:
        if ((v10 & 0x80) == 0) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    else if (v9 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_7;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v10) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((v10 & 0x80) == 0)
  {
LABEL_8:
    std::string::size_type size = v10;
    unint64_t v12 = v8 + v6;
    unint64_t v13 = v8 + v6 + v10;
    if (v13 <= v10)
    {
LABEL_14:
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
      this->__r_.__value_.__s.__data_[v13] = 0;
      int64x2_t v15 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    if (!v12)
    {
      int64x2_t v15 = this;
      goto LABEL_30;
    }
    std::string::size_type v14 = 22;
    if (22 - (unint64_t)v10 >= v12)
    {
LABEL_12:
      if ((v10 & 0x80) != 0)
      {
        std::string::size_type v19 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v12;
        *(unsigned char *)(v19 + size + v12) = 0;
        int64x2_t v15 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      unint64_t v13 = size + v12;
      goto LABEL_14;
    }
LABEL_11:
    std::string::__grow_by(this, v14, v12 - v14 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v10) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_12;
  }
LABEL_17:
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  unint64_t v12 = v8 + v6;
  std::string::size_type v16 = v8 + v6 + size;
  if (size >= v16)
  {
    std::string::size_type v18 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v16;
    *(unsigned char *)(v18 + v16) = 0;
    int64x2_t v15 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v12)
  {
    unint64_t v17 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v14 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = HIBYTE(v17);
    if (v14 - size >= v12) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_29:
  int64x2_t v15 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_30:
  std::string::size_type v20 = (char *)v15 + size;
  uint64_t v21 = *(void *)(a2 + 8);
  if (v21) {
    memcpy(v20, *(const void **)a2, *(void *)(a2 + 8));
  }
  unint64_t v22 = &v20[v21];
  uint64_t v23 = *(void *)(a3 + 8);
  if (v23) {
    memcpy(v22, *(const void **)a3, *(void *)(a3 + 8));
  }
  size_t v24 = (std::string *)&v22[v23];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v24 == (std::string *)((char *)v15 + HIBYTE(this->__r_.__value_.__r.__words[2]))) {
      return;
    }
LABEL_38:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v24 != (std::string *)((char *)v15 + this->__r_.__value_.__l.__size_)) {
    goto LABEL_38;
  }
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8)
  {
    int v9 = *(unsigned char **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v9 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
        goto LABEL_4;
      }
LABEL_25:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v9[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
      goto LABEL_25;
    }
  }
LABEL_4:
  uint64_t v10 = *(void *)(a3 + 8);
  if (!v10) {
    goto LABEL_7;
  }
  BOOL v11 = *(unsigned char **)a3;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
      goto LABEL_7;
    }
LABEL_27:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v11[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v12 = *(void *)(a4 + 8);
  if (v12)
  {
    unint64_t v13 = *(unsigned char **)a4;
    LODWORD(v14) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) != 0)
    {
      if ((unint64_t)&v13[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_10:
        if ((v14 & 0x80) == 0) {
          goto LABEL_11;
        }
        goto LABEL_20;
      }
    }
    else if (v13 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_10;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v14) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((v14 & 0x80) == 0)
  {
LABEL_11:
    std::string::size_type size = v14;
    unint64_t v16 = v10 + v8 + v12;
    unint64_t v17 = v16 + v14;
    if (v17 <= v14)
    {
LABEL_17:
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
      this->__r_.__value_.__s.__data_[v17] = 0;
      std::string::size_type v19 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (!v16)
    {
      std::string::size_type v19 = this;
      goto LABEL_35;
    }
    std::string::size_type v18 = 22;
    if (22 - (unint64_t)v14 >= v16)
    {
LABEL_15:
      if ((v14 & 0x80) != 0)
      {
        std::string::size_type v23 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v16;
        *(unsigned char *)(v23 + size + v16) = 0;
        std::string::size_type v19 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      unint64_t v17 = size + v16;
      goto LABEL_17;
    }
LABEL_14:
    std::string::__grow_by(this, v18, v16 - v18 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v14) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_15;
  }
LABEL_20:
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  unint64_t v16 = v10 + v8 + v12;
  std::string::size_type v20 = v16 + size;
  if (size >= v16 + size)
  {
    std::string::size_type v22 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v20;
    *(unsigned char *)(v22 + v20) = 0;
    std::string::size_type v19 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v16)
  {
    unint64_t v21 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v18 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v14 = HIBYTE(v21);
    if (v18 - size >= v16) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_34:
  std::string::size_type v19 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_35:
  size_t v24 = (char *)v19 + size;
  uint64_t v25 = *(void *)(a2 + 8);
  if (v25) {
    memcpy(v24, *(const void **)a2, *(void *)(a2 + 8));
  }
  std::string::size_type v26 = &v24[v25];
  uint64_t v27 = *(void *)(a3 + 8);
  if (v27) {
    memcpy(v26, *(const void **)a3, *(void *)(a3 + 8));
  }
  uint64_t v28 = &v26[v27];
  uint64_t v29 = *(void *)(a4 + 8);
  if (v29) {
    memcpy(v28, *(const void **)a4, *(void *)(a4 + 8));
  }
  int v30 = (std::string *)&v28[v29];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v30 == (std::string *)((char *)v19 + HIBYTE(this->__r_.__value_.__r.__words[2]))) {
      return;
    }
LABEL_45:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v30 != (std::string *)((char *)v19 + this->__r_.__value_.__l.__size_)) {
    goto LABEL_45;
  }
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    BOOL v11 = *(unsigned char **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v11 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
        goto LABEL_4;
      }
LABEL_28:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v11[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
      goto LABEL_28;
    }
  }
LABEL_4:
  uint64_t v12 = *(void *)(a3 + 8);
  if (!v12) {
    goto LABEL_7;
  }
  unint64_t v13 = *(unsigned char **)a3;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
      goto LABEL_7;
    }
LABEL_30:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v13[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
    goto LABEL_30;
  }
LABEL_7:
  uint64_t v14 = *(void *)(a4 + 8);
  if (!v14) {
    goto LABEL_10;
  }
  int64x2_t v15 = *(unsigned char **)a4;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v15 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
LABEL_32:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v15[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_) {
    goto LABEL_32;
  }
LABEL_10:
  uint64_t v16 = *(void *)(a5 + 8);
  if (v16)
  {
    unint64_t v17 = *(unsigned char **)a5;
    LODWORD(v18) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v18 & 0x80000000) != 0)
    {
      if ((unint64_t)&v17[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_13:
        if ((v18 & 0x80) == 0) {
          goto LABEL_14;
        }
        goto LABEL_23;
      }
    }
    else if (v17 - (unsigned char *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_13;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v18) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((v18 & 0x80) == 0)
  {
LABEL_14:
    std::string::size_type size = v18;
    unint64_t v20 = v12 + v10 + v14 + v16;
    unint64_t v21 = v20 + v18;
    if (v21 <= v18)
    {
LABEL_20:
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v21 & 0x7F;
      this->__r_.__value_.__s.__data_[v21] = 0;
      std::string::size_type v23 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (!v20)
    {
      std::string::size_type v23 = this;
      goto LABEL_40;
    }
    std::string::size_type v22 = 22;
    if (22 - (unint64_t)v18 >= v20)
    {
LABEL_18:
      if ((v18 & 0x80) != 0)
      {
        std::string::size_type v27 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v20;
        *(unsigned char *)(v27 + size + v20) = 0;
        std::string::size_type v23 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      unint64_t v21 = size + v20;
      goto LABEL_20;
    }
LABEL_17:
    std::string::__grow_by(this, v22, v20 - v22 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v18) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_18;
  }
LABEL_23:
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  unint64_t v20 = v12 + v10 + v14 + v16;
  std::string::size_type v24 = v20 + size;
  if (size >= v20 + size)
  {
    std::string::size_type v26 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v24;
    *(unsigned char *)(v26 + v24) = 0;
    std::string::size_type v23 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v20)
  {
    unint64_t v25 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v22 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v18 = HIBYTE(v25);
    if (v22 - size >= v20) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_39:
  std::string::size_type v23 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_40:
  uint64_t v28 = (char *)v23 + size;
  uint64_t v29 = *(void *)(a2 + 8);
  if (v29) {
    memcpy(v28, *(const void **)a2, *(void *)(a2 + 8));
  }
  int v30 = &v28[v29];
  uint64_t v31 = *(void *)(a3 + 8);
  if (v31) {
    memcpy(v30, *(const void **)a3, *(void *)(a3 + 8));
  }
  unint64_t v32 = &v30[v31];
  uint64_t v33 = *(void *)(a4 + 8);
  if (v33) {
    memcpy(v32, *(const void **)a4, *(void *)(a4 + 8));
  }
  int v34 = &v32[v33];
  uint64_t v35 = *(void *)(a5 + 8);
  if (v35) {
    memcpy(v34, *(const void **)a5, *(void *)(a5 + 8));
  }
  unint64_t v36 = (std::string *)&v34[v35];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v36 == (std::string *)((char *)v23 + HIBYTE(this->__r_.__value_.__r.__words[2]))) {
      return;
    }
LABEL_52:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v36 != (std::string *)((char *)v23 + this->__r_.__value_.__l.__size_)) {
    goto LABEL_52;
  }
}

char *absl::lts_2020_02_25::ByChar::Find(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v6 = a3 > a4;
  size_t v7 = a3 - a4;
  if (!v6) {
    return (char *)(a2 + a3);
  }
  uint64_t result = (char *)memchr((void *)(a2 + a4), *a1, v7);
  int v9 = &result[-a2];
  if (!result || v9 + 1 == 0) {
    return (char *)(a2 + a3);
  }
  if (a3 < (unint64_t)v9) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return result;
}

uint64_t absl::lts_2020_02_25::Symbolize(absl::lts_2020_02_25 *this, const void *a2, char *a3)
{
  return 0;
}

void absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity(absl::lts_2020_02_25::synchronization_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((void *)this + 9);
  if (v9) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Destroy((uint64_t)this);
  absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity(v10);
  int v18 = _MergedGlobals_26;
  if ((_MergedGlobals_26 & 1) != 0
    || (atomic_compare_exchange_strong_explicit(&_MergedGlobals_26, (unsigned int *)&v18, v18 | 1, memory_order_acquire, memory_order_acquire), (v18 & 1) != 0))
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v11, v12, v13, v14, v15, v16, v17);
  }
  *((void *)this + 29) = qword_26AED1070;
  qword_26AED1070 = (uint64_t)this;
  unsigned int v19 = atomic_exchange_explicit(&_MergedGlobals_26, _MergedGlobals_26 & 2, memory_order_release);
  if (v19 >= 8) {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v19);
  }
}

void *absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(absl::lts_2020_02_25::synchronization_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = _MergedGlobals_26;
  if ((_MergedGlobals_26 & 1) == 0)
  {
    atomic_compare_exchange_strong_explicit(&_MergedGlobals_26, (unsigned int *)&v8, v8 | 1, memory_order_acquire, memory_order_acquire);
    if ((v8 & 1) == 0)
    {
      int v9 = (void *)qword_26AED1070;
      if (!qword_26AED1070) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, a2, a3, a4, a5, a6, a7, a8);
  int v9 = (void *)qword_26AED1070;
  if (qword_26AED1070) {
LABEL_4:
  }
    qword_26AED1070 = v9[29];
LABEL_5:
  unint64_t v10 = atomic_exchange_explicit(&_MergedGlobals_26, _MergedGlobals_26 & 2, memory_order_release);
  if (v10 >= 8) {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v10);
  }
  if (!v9) {
    int v9 = (void *)((absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x1EF, v10, a3, a4, a5, a6, a7, a8)+ 255) & 0xFFFFFFFFFFFFFF00);
  }
  v9[3] = 0;
  *((unsigned char *)v9 + 32) = 0;
  v9[5] = 0;
  *((_DWORD *)v9 + 12) = 0;
  v9[7] = 0;
  *int v9 = 0;
  v9[1] = 0;
  *((unsigned char *)v9 + 16) = 0;
  *((_DWORD *)v9 + 16) = 0;
  *((_WORD *)v9 + 34) = 0;
  *((unsigned char *)v9 + 70) = 0;
  v9[9] = 0;
  v9[26] = 0;
  *((_DWORD *)v9 + 54) = 0;
  *((_DWORD *)v9 + 55) = 0;
  *((unsigned char *)v9 + 224) = 0;
  v9[29] = 0;
  absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Init((uint64_t)v9);
  absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity(v9, (uint64_t)absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity, v11, v12, v13, v14, v15, v16);
  return v9;
}

uint64_t _GLOBAL__sub_I_create_thread_identity_cc()
{
  return __cxa_atexit((void (*)(void *))absl::lts_2020_02_25::base_internal::SpinLock::~SpinLock, &_MergedGlobals_26, &dword_23CB1E000);
}

uint64_t AbslInternalMutexYield()
{
  return sched_yield();
}

void absl::lts_2020_02_25::Mutex::~Mutex(absl::lts_2020_02_25::Mutex *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(void *)this & 0x10) != 0) {
    absl::lts_2020_02_25::ForgetSynchEvent((uint64_t)this, 16, 64, a4, a5, a6, a7, a8);
  }
  {
    int v9 = dword_26AED2084;
    if ((dword_26AED2084 & 1) != 0
      || (atomic_compare_exchange_strong_explicit(&dword_26AED2084, (unsigned int *)&v9, v9 | 1, memory_order_acquire, memory_order_acquire), (v9 & 1) != 0))
    {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, a2, a3, a4, a5, a6, a7, a8);
    }
    if (qword_26AED2090) {
      absl::lts_2020_02_25::synchronization_internal::GraphCycles::RemoveNode((uint64_t **)qword_26AED2090, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    unsigned int v10 = atomic_exchange_explicit(&dword_26AED2084, dword_26AED2084 & 2, memory_order_release);
    if (v10 >= 8) {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v10);
    }
  }
}

void absl::lts_2020_02_25::ForgetSynchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1 % 1031;
  int v12 = dword_26AED2088;
  if ((dword_26AED2088 & 1) == 0)
  {
    atomic_compare_exchange_strong_explicit(&dword_26AED2088, (unsigned int *)&v12, v12 | 1, memory_order_acquire, memory_order_acquire);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)&absl::lts_2020_02_25::synch_event[v11];
      uint64_t v14 = *v13;
      if (*v13) {
        goto LABEL_4;
      }
LABEL_19:
      for (atomic_ullong i = *(void *)a1; (*(void *)a1 & a2) != 0; atomic_ullong i = *(void *)a1)
      {
        if ((i & a3) == 0)
        {
          atomic_ullong v21 = i;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a1, (unint64_t *)&v21, i & ~a2, memory_order_release, memory_order_relaxed);
          if (v21 == i) {
            break;
          }
        }
      }
      unsigned int v22 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
      if (v22 >= 8)
      {
        absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v22);
      }
      return;
    }
  }
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)&absl::lts_2020_02_25::synch_event[v11];
  uint64_t v14 = *v13;
  if (!*v13) {
    goto LABEL_19;
  }
LABEL_4:
  if (*((void *)v14 + 2) != (a1 ^ 0xF03A5F7BF03A5F7BLL))
  {
    while (1)
    {
      uint64_t v15 = v14;
      uint64_t v14 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((void *)v14 + 1);
      if (!v14) {
        goto LABEL_19;
      }
      if (*((void *)v14 + 2) == (a1 ^ 0xF03A5F7BF03A5F7BLL))
      {
        uint64_t v13 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)((char *)v15 + 8);
        break;
      }
    }
  }
  unsigned char *v13 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((void *)v14 + 1);
  int v16 = *(_DWORD *)v14 - 1;
  *(_DWORD *)uint64_t v14 = v16;
  for (atomic_ullong j = *(void *)a1; (*(void *)a1 & a2) != 0; atomic_ullong j = *(void *)a1)
  {
    if ((j & a3) == 0)
    {
      atomic_ullong v18 = j;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a1, (unint64_t *)&v18, j & ~a2, memory_order_release, memory_order_relaxed);
      if (v18 == j) {
        break;
      }
    }
  }
  uint64_t v19 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
  if (v19 >= 8)
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v19);
    if (v16) {
      return;
    }
  }
  else if (v16)
  {
    return;
  }

  absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v14, v19, a3, a4, a5, a6, a7, a8);
}

unint64_t absl::lts_2020_02_25::Mutex::TryRemove(unint64_t result, uint64_t a2)
{
  atomic_ullong v2 = *(void *)result;
  if ((*(void *)result & 0x4DLL) != 4) {
    return result;
  }
  std::string::size_type v3 = (atomic_ullong *)result;
  atomic_ullong v4 = *(void *)result;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)result, (unint64_t *)&v4, v2 | 0x48, memory_order_acquire, memory_order_acquire);
  if (v4 != v2) {
    return result;
  }
  uint64_t result = v2 & 0xFFFFFFFFFFFFFF00;
  if ((v2 & 0xFFFFFFFFFFFFFF00) == 0) {
    goto LABEL_45;
  }
  BOOL v6 = *(void **)result;
  if (*(void *)result == a2)
  {
    unint64_t v10 = v2 & 0xFFFFFFFFFFFFFF00;
LABEL_44:
    uint64_t result = (unint64_t)absl::lts_2020_02_25::Dequeue((void *)result, (void **)v10);
    *(void *)a2 = 0;
    atomic_store(0, (unsigned int *)(a2 + 64));
    if (result) {
      goto LABEL_41;
    }
    goto LABEL_45;
  }
  size_t v7 = *(uint64_t **)(a2 + 24);
  uint64_t v8 = *v7;
  do
  {
    int v9 = (void *)v6[3];
    if (v8 == *v9)
    {
      uint64_t v14 = (void *)v7[1];
      uint64_t v15 = (void *)v9[1];
      if (v14)
      {
        if (v15 && *v15)
        {
          if (*v14 == *v15 && v14[1] == v15[1] && v14[4] == v15[4])
          {
            unint64_t v17 = v14[2];
            uint64_t v16 = v14[3];
            uint64_t v19 = v15[2];
            uint64_t v18 = v15[3];
            BOOL v21 = v16 == v18;
            unint64_t v20 = (v18 | v16) & 1 | v17;
            BOOL v21 = v21 || v20 == 0;
            BOOL v22 = v21;
            if (v17 == v19 && v22)
            {
LABEL_32:
              if (v6[1] == a2)
              {
                std::string::size_type v23 = *(void **)(a2 + 8);
                if (!v23)
                {
                  std::string::size_type v23 = (void *)*v6;
                  if (*v6 == a2) {
                    std::string::size_type v23 = 0;
                  }
                }
                v6[1] = v23;
              }
LABEL_37:
              unint64_t v10 = (unint64_t)v6;
              BOOL v6 = (void *)*v6;
              if (v10 == result) {
                break;
              }
              continue;
            }
          }
        }
        else if (!*v14)
        {
          goto LABEL_32;
        }
      }
      else if (!v15 || !*v15)
      {
        goto LABEL_32;
      }
    }
    unint64_t v10 = v6[1];
    if (!v10) {
      goto LABEL_37;
    }
    unint64_t v11 = *(void *)(v10 + 8);
    if (v11)
    {
      int v12 = v6;
      do
      {
        unint64_t v13 = v10;
        unint64_t v10 = v11;
        v12[1] = v11;
        unint64_t v11 = *(void *)(v11 + 8);
        int v12 = (void *)v13;
      }
      while (v11);
    }
    v6[1] = v10;
    BOOL v6 = *(void **)v10;
    if (v10 == result) {
      break;
    }
  }
  while (v6 != (void *)a2);
  if (v6 == (void *)a2) {
    goto LABEL_44;
  }
  if (result)
  {
    do
    {
LABEL_41:
      atomic_ullong v24 = *v3;
      unint64_t v25 = *v3 & 0x12 | result | 4;
      *(void *)(result + 40) = 0;
      *(unsigned char *)(result + 68) = 0;
      atomic_ullong v26 = v24;
      atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v26, v25, memory_order_release, memory_order_relaxed);
    }
    while (v26 != v24);
    return result;
  }
  do
  {
LABEL_45:
    atomic_ullong v27 = *v3;
    atomic_ullong v28 = *v3;
    atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v28, *v3 & 0x12, memory_order_release, memory_order_relaxed);
  }
  while (v28 != v27);
  return result;
}

void *absl::lts_2020_02_25::Dequeue(void *result, void **a2)
{
  atomic_ullong v2 = *a2;
  std::string::size_type v3 = (void *)**a2;
  *a2 = v3;
  if (v2 == result)
  {
    if (result == a2) {
      return 0;
    }
    else {
      return a2;
    }
  }
  else
  {
    if (a2 == result) {
      return result;
    }
    atomic_ullong v4 = a2[3];
    unint64_t v5 = (void *)v3[3];
    if (*v4 != *v5) {
      return result;
    }
    BOOL v6 = (void *)v4[1];
    size_t v7 = (void *)v5[1];
    if (!v6)
    {
      if (v7 && *v7) {
        return result;
      }
      goto LABEL_29;
    }
    if (!v7 || !*v7)
    {
      if (*v6) {
        return result;
      }
      goto LABEL_29;
    }
    if (*v6 == *v7 && v6[1] == v7[1] && v6[4] == v7[4])
    {
      unint64_t v9 = v6[2];
      uint64_t v8 = v6[3];
      uint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      BOOL v13 = v8 == v10;
      unint64_t v12 = (v10 | v8) & 1 | v9;
      BOOL v13 = v13 || v12 == 0;
      BOOL v14 = v13;
      if (v9 == v11 && v14)
      {
LABEL_29:
        uint64_t v16 = (void *)v3[1];
        if (v16) {
          a2[1] = v16;
        }
        else {
          a2[1] = v3;
        }
      }
    }
  }
  return result;
}

unint64_t absl::lts_2020_02_25::Mutex::Block(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load_explicit((atomic_uint *volatile)(a2 + 64), memory_order_acquire) == 1)
  {
    unint64_t v9 = (atomic_ullong *)result;
    do
    {
      uint64_t v11 = *(absl::lts_2020_02_25::base_internal **)(*(void *)(a2 + 24) + 16);
      unint64_t v12 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
      if (v12)
      {
        if (v12 != (void *)a2) {
          goto LABEL_69;
        }
      }
      else if (absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v13, v14, v15, v16, v17, v18, v19) != (void *)a2)
      {
LABEL_69:
        absl::lts_2020_02_25::Mutex::Block();
      }
      uint64_t result = AbslInternalPerThreadSemWait(v11);
      if ((result & 1) == 0)
      {
        absl::lts_2020_02_25::Mutex::TryRemove((unint64_t)v9, a2);
        if (*(void *)a2)
        {
          int v20 = 0;
          do
          {
            if (dword_26AED2040 <= 1) {
              int v21 = 0;
            }
            else {
              int v21 = 250;
            }
            if (v21 <= v20)
            {
              if (v21 == v20)
              {
                AbslInternalMutexYield();
                ++v20;
                atomic_ullong v22 = *v9;
                if ((*v9 & 0x4D) != 4) {
                  continue;
                }
              }
              else
              {
                AbslInternalSleepFor(0, 40000);
                int v20 = 0;
                atomic_ullong v22 = *v9;
                if ((*v9 & 0x4D) != 4) {
                  continue;
                }
              }
            }
            else
            {
              ++v20;
              atomic_ullong v22 = *v9;
              if ((*v9 & 0x4D) != 4) {
                continue;
              }
            }
            atomic_ullong v23 = v22;
            atomic_compare_exchange_strong_explicit(v9, (unint64_t *)&v23, v22 | 0x48, memory_order_acquire, memory_order_acquire);
            if (v23 != v22) {
              continue;
            }
            unint64_t v24 = v22 & 0xFFFFFFFFFFFFFF00;
            if ((v22 & 0xFFFFFFFFFFFFFF00) == 0) {
              goto LABEL_66;
            }
            unint64_t v25 = *(void **)v24;
            if (*(void *)v24 == a2)
            {
              unint64_t v29 = v22 & 0xFFFFFFFFFFFFFF00;
LABEL_63:
              unint64_t v24 = (unint64_t)absl::lts_2020_02_25::Dequeue((void *)v24, (void **)v29);
              *(void *)a2 = 0;
              atomic_store(0, (unsigned int *)(a2 + 64));
              if (v24) {
                goto LABEL_64;
              }
              do
              {
LABEL_66:
                atomic_ullong v46 = *v9;
                atomic_ullong v47 = *v9;
                atomic_compare_exchange_strong_explicit(v9, (unint64_t *)&v47, *v9 & 0x12, memory_order_release, memory_order_relaxed);
              }
              while (v47 != v46);
              continue;
            }
            atomic_ullong v26 = *(uint64_t **)(a2 + 24);
            uint64_t v27 = *v26;
            do
            {
              atomic_ullong v28 = (void *)v25[3];
              if (v27 == *v28)
              {
                uint64_t v33 = (void *)v26[1];
                int v34 = (void *)v28[1];
                if (v33)
                {
                  if (v34 && *v34)
                  {
                    if (*v33 == *v34 && v33[1] == v34[1] && v33[4] == v34[4])
                    {
                      unint64_t v36 = v33[2];
                      uint64_t v35 = v33[3];
                      uint64_t v38 = v34[2];
                      uint64_t v37 = v34[3];
                      BOOL v40 = v35 == v37;
                      unint64_t v39 = (v37 | v35) & 1 | v36;
                      BOOL v40 = v40 || v39 == 0;
                      BOOL v41 = v40;
                      if (v36 == v38 && v41)
                      {
LABEL_52:
                        if (v25[1] == a2)
                        {
                          int v42 = *(void **)(a2 + 8);
                          if (!v42)
                          {
                            int v42 = (void *)*v25;
                            if (*v25 == a2) {
                              int v42 = 0;
                            }
                          }
                          v25[1] = v42;
                        }
LABEL_57:
                        unint64_t v29 = (unint64_t)v25;
                        unint64_t v25 = (void *)*v25;
                        if (v29 == v24) {
                          break;
                        }
                        continue;
                      }
                    }
                  }
                  else if (!*v33)
                  {
                    goto LABEL_52;
                  }
                }
                else if (!v34 || !*v34)
                {
                  goto LABEL_52;
                }
              }
              unint64_t v29 = v25[1];
              if (!v29) {
                goto LABEL_57;
              }
              unint64_t v30 = *(void *)(v29 + 8);
              if (v30)
              {
                uint64_t v31 = v25;
                do
                {
                  unint64_t v32 = v29;
                  unint64_t v29 = v30;
                  v31[1] = v30;
                  unint64_t v30 = *(void *)(v30 + 8);
                  uint64_t v31 = (void *)v32;
                }
                while (v30);
              }
              v25[1] = v29;
              unint64_t v25 = *(void **)v29;
              if (v29 == v24) {
                break;
              }
            }
            while (v25 != (void *)a2);
            if (v25 == (void *)a2) {
              goto LABEL_63;
            }
            if (!v24) {
              goto LABEL_66;
            }
            do
            {
LABEL_64:
              atomic_ullong v43 = *v9;
              unint64_t v44 = *v9 & 0x12 | v24 | 4;
              *(void *)(v24 + 40) = 0;
              *(unsigned char *)(v24 + 68) = 0;
              atomic_ullong v45 = v43;
              atomic_compare_exchange_strong_explicit(v9, (unint64_t *)&v45, v44, memory_order_release, memory_order_relaxed);
            }
            while (v45 != v43);
          }
          while (*(void *)a2);
        }
        uint64_t result = absl::lts_2020_02_25::Mutex::TryRemove((unint64_t)v9, a2);
        uint64_t v10 = *(void *)(a2 + 24);
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
      }
    }
    while (atomic_load_explicit((atomic_uint *volatile)(a2 + 64), memory_order_acquire) == 1);
  }
  if (!*(void *)(a2 + 24) && !*(unsigned char *)(a2 + 32)) {
    uint64_t result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1135, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->waitp != nullptr || s->suppress_fatal_errors");
  }
  *(void *)(a2 + 24) = 0;
  return result;
}

uint64_t absl::lts_2020_02_25::Delay(int a1, int a2)
{
  if (a2) {
    int v3 = 250;
  }
  else {
    int v3 = 5000;
  }
  if (dword_26AED2040 <= 1) {
    int v4 = 0;
  }
  else {
    int v4 = v3;
  }
  if (v4 > a1) {
    return (a1 + 1);
  }
  if (v4 == a1)
  {
    AbslInternalMutexYield();
    return (a1 + 1);
  }
  else
  {
    AbslInternalSleepFor(0, 40000);
    return 0;
  }
}

unsigned char *absl::lts_2020_02_25::Mutex::Lock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t result = (unsigned char *)absl::lts_2020_02_25::DebugOnlyDeadlockCheck(this, a2);
  int v4 = result;
  uint64_t v5 = *(void *)this;
  if ((*(void *)this & 0x19) == 0)
  {
    uint64_t v6 = *(void *)this;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)this, (unint64_t *)&v6, v5 | 8, memory_order_acquire, memory_order_acquire);
    if (v6 == v5)
    {
LABEL_8:
LABEL_9:
      uint64_t v10 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
      ThreadIdentity = v10;
      if (v10)
      {
        uint64_t result = (unsigned char *)v10[9];
        if (result) {
          goto LABEL_11;
        }
      }
      else
      {
        ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v11, v12, v13, v14, v15, v16, v17);
        uint64_t result = (unsigned char *)ThreadIdentity[9];
        if (result)
        {
LABEL_11:
          uint64_t v19 = *(unsigned int *)result;
          if (v19)
          {
            uint64_t v20 = 0;
            do
            {
              if (*(unsigned char **)&result[v20 + 24] == v4)
              {
                ++*(_DWORD *)&result[v20 + 16];
                return result;
              }
              v20 += 24;
            }
            while (24 * v19 != v20);
            if (v19 == 40)
            {
              result[4] = 1;
              return result;
            }
            int v21 = *(_DWORD *)result;
          }
          else
          {
            int v21 = 0;
          }
          goto LABEL_25;
        }
      }
      uint64_t result = (unsigned char *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v11, v12, v13, v14, v15, v16, v17);
      LODWORD(v19) = 0;
      int v21 = 0;
      *(_DWORD *)uint64_t result = 0;
      result[4] = 0;
      ThreadIdentity[9] = result;
LABEL_25:
      atomic_ullong v22 = &result[24 * v21];
      *((void *)v22 + 1) = this;
      *((_DWORD *)v22 + 4) = 1;
      *((void *)v22 + 3) = v4;
      *(_DWORD *)uint64_t result = v19 + 1;
      return result;
    }
  }
  int v7 = dword_26AED2080 + 1;
  do
  {
    uint64_t v8 = *(void *)this;
    if ((*(void *)this & 0x11) != 0) {
      break;
    }
    if ((v8 & 8) == 0)
    {
      uint64_t v9 = *(void *)this;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)this, (unint64_t *)&v9, v8 | 8, memory_order_acquire, memory_order_acquire);
      if (v9 == v8) {
        goto LABEL_8;
      }
    }
    --v7;
  }
  while (v7 > 1);
  uint64_t result = (unsigned char *)absl::lts_2020_02_25::Mutex::Lock((atomic_ullong *)this);
    goto LABEL_9;
  return result;
}

unint64_t absl::lts_2020_02_25::DebugOnlyDeadlockCheck(absl::lts_2020_02_25 *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  {
    return 0;
  }
  int v3 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(this);
  ThreadIdentity = v3;
  if (v3)
  {
    unint64_t v12 = v3[9];
    if (v12) {
      goto LABEL_5;
    }
  }
  else
  {
    ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v4, v5, v6, v7, v8, v9, v10);
    unint64_t v12 = ThreadIdentity[9];
    if (v12)
    {
LABEL_5:
      int v13 = dword_26AED2084;
      if (dword_26AED2084) {
        goto LABEL_37;
      }
      goto LABEL_10;
    }
  }
  unint64_t v12 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v4, v5, v6, v7, v8, v9, v10);
  *(_DWORD *)unint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 0;
  ThreadIdentity[9] = v12;
  int v13 = dword_26AED2084;
  if (dword_26AED2084) {
    goto LABEL_37;
  }
LABEL_10:
  atomic_compare_exchange_strong_explicit(&dword_26AED2084, (unsigned int *)&v13, v13 | 1, memory_order_acquire, memory_order_acquire);
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_26AED2090;
    if (qword_26AED2090) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_37:
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v15 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_26AED2090;
  if (!qword_26AED2090)
  {
LABEL_12:
    uint64_t v16 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)8, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v15 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(v16);
    qword_26AED2090 = (uint64_t)v15;
  }
LABEL_13:
  unint64_t Id = absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(v15, (unint64_t)this, v5, v6, v7, v8, v9, v10);
  if (*(_DWORD *)v12)
  {
    if (*(_DWORD *)v12)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 24;
      while (1)
      {
        uint64_t v19 = *(void *)(v12 + v18);
        if (absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((void **)qword_26AED2090, v19))
        {
          if ((absl::lts_2020_02_25::synchronization_internal::GraphCycles::InsertEdge((uint64_t **)qword_26AED2090, v19, Id, v20, v21, v22, v23, v24) & 1) == 0)break; {
        }
          }
        ++v17;
        v18 += 24;
        if (v17 == *(_DWORD *)v12) {
          goto LABEL_34;
        }
      }
      unint64_t v32 = (char *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x1828, v25, v26, v27, v28, v29, v30, v31);
      int v76 = dword_26AED208C++;
      memset(v77, 0, sizeof(v77));
      StackTrace = (void **)absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25 *)v77, (void **)0x28, 2);
      absl::lts_2020_02_25::StackString((const void **)v77, StackTrace, v32, (char *)0x17D4, v76 < 2);
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1356, "Potential Mutex deadlock: %s", v34, v35, v36, v37, (char)v32);
      if (*(_DWORD *)v12)
      {
        uint64_t v42 = 0;
        int v43 = 0;
        uint64_t v44 = 24;
        do
        {
          atomic_ullong v45 = (const void *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((void **)qword_26AED2090, *(void *)(v12 + v44));
          if (v45)
          {
            snprintf(&v32[v43], 6100 - v43, " %p", v45);
            v43 += strlen(&v32[v43]);
          }
          ++v42;
          v44 += 24;
        }
        while (v42 != *(_DWORD *)v12);
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1366, "Acquiring %p    Mutexes held: %s", v38, v39, v40, v41, (char)this);
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1367, "Cycle: ", v46, v47, v48, v49, v74);
      unsigned int Path = absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath((uint64_t **)qword_26AED2090, Id, v19, 10, (uint64_t)(v32 + 6104), v50, v51, v52);
      if (Path)
      {
        uint64_t v61 = -(uint64_t)Path;
        uint64_t v62 = 763;
        do
        {
          uint64_t v63 = *(void *)&v32[8 * v62];
          unint64_t v64 = (const void *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((void **)qword_26AED2090, v63);
          if (v64)
          {
            *(void *)&v77[0] = 0;
            int v65 = (void **)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetStackTrace((void **)qword_26AED2090, v63, v77);
            snprintf(v32, 0x17D4uLL, "mutex@%p stack: ", v64);
            size_t v66 = strlen(v32);
            absl::lts_2020_02_25::StackString(*(const void ***)&v77[0], v65, &v32[v66], (char *)(6100 - v66), v76 < 2);
            absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1381, "%s", v67, v68, v69, v70, (char)v32);
          }
          ++v62;
        }
        while (v61 + v62 != 763);
      }
      {
        unsigned int v71 = atomic_exchange_explicit(&dword_26AED2084, dword_26AED2084 & 2, memory_order_release);
        if (v71 >= 8) {
          absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v71);
        }
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1386, "dying due to potential deadlock", v57, v58, v59, v60, v75);
      }
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v32, v54, v55, v56, v57, v58, v59, v60);
    }
  }
LABEL_34:
  unsigned int v72 = atomic_exchange_explicit(&dword_26AED2084, dword_26AED2084 & 2, memory_order_release);
  if (v72 >= 8) {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v72);
  }
  return Id;
}

void sub_23CB51190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v8, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v10 = atomic_exchange_explicit(&dword_26AED2084, dword_26AED2084 & 2, memory_order_release);
  if (v10 >= 8) {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v10);
  }
  _Unwind_Resume(a1);
}

unsigned char *absl::lts_2020_02_25::Mutex::ReaderLock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t result = (unsigned char *)absl::lts_2020_02_25::DebugOnlyDeadlockCheck(this, a2);
  unint64_t v4 = result;
  uint64_t v5 = *(void *)this;
  if ((*(void *)this & 0x1CLL) != 0
    || (uint64_t v6 = *(void *)this,
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)this, (unint64_t *)&v6, (v5 | 1) + 256, memory_order_acquire, memory_order_acquire), v6 != v5))
  {
    uint64_t result = (unsigned char *)absl::lts_2020_02_25::Mutex::ReaderLock((atomic_ullong *)this);
    {
LABEL_4:
      uint64_t v7 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
      ThreadIdentity = v7;
      if (v7)
      {
        uint64_t result = (unsigned char *)v7[9];
        if (result) {
          goto LABEL_6;
        }
      }
      else
      {
        ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v8, v9, v10, v11, v12, v13, v14);
        uint64_t result = (unsigned char *)ThreadIdentity[9];
        if (result)
        {
LABEL_6:
          uint64_t v16 = *(unsigned int *)result;
          if (v16)
          {
            uint64_t v17 = 0;
            do
            {
              if (*(unsigned char **)&result[v17 + 24] == v4)
              {
                ++*(_DWORD *)&result[v17 + 16];
                return result;
              }
              v17 += 24;
            }
            while (24 * v16 != v17);
            if (v16 == 40)
            {
              result[4] = 1;
              return result;
            }
            int v18 = *(_DWORD *)result;
          }
          else
          {
            int v18 = 0;
          }
          goto LABEL_20;
        }
      }
      uint64_t result = (unsigned char *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v8, v9, v10, v11, v12, v13, v14);
      LODWORD(v16) = 0;
      int v18 = 0;
      *(_DWORD *)uint64_t result = 0;
      result[4] = 0;
      ThreadIdentity[9] = result;
LABEL_20:
      uint64_t v19 = &result[24 * v18];
      *((void *)v19 + 1) = this;
      *((_DWORD *)v19 + 4) = 1;
      *((void *)v19 + 3) = v4;
      *(_DWORD *)uint64_t result = v16 + 1;
    }
  }
  {
    goto LABEL_4;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::Mutex::LockSlowWithDeadline(atomic_ullong *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v9 = (absl::lts_2020_02_25 **)a1;
  atomic_ullong v10 = *a1;
  if ((*a2 & *a1) != 0
    || (uint64_t v11 = (absl::lts_2020_02_25 *)*a1,
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v11, (absl::lts_2020_02_25::zap_desig_waker[a5 & 1] & v10 | a2[1]) + a2[2], memory_order_acquire, memory_order_acquire), v11 != (absl::lts_2020_02_25 *)v10))
  {
    LODWORD(v12) = 0;
  }
  else
  {
    if (!a3 || !*a3) {
      return 1;
    }
    a1 = (atomic_ullong *)((uint64_t (*)(void *))*a3)(a3);
    uint64_t v12 = 1;
    if (a1) {
      return v12;
    }
  }
  uint64_t v13 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)a1);
  if (v13)
  {
    uint64_t v39 = a2;
    uint64_t v40 = a3;
    uint64_t v41 = a4;
    uint64_t v42 = 0;
    ThreadIdentity = v13;
    uint64_t v44 = 0;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (!a3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v39 = a2;
    uint64_t v40 = a3;
    uint64_t v41 = a4;
    uint64_t v42 = 0;
    ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v14, v15, v16, v17, v18, v19, v20);
    uint64_t v44 = 0;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (!a3) {
      goto LABEL_12;
    }
  }
  if (*a3) {
    uint64_t v5 = v5 | 2;
  }
LABEL_12:
  if (v12)
  {
    absl::lts_2020_02_25::Mutex::UnlockSlow(v9, (uint64_t)&v39, v21.__d_.__rep_, v22.__d_.__rep_, v23.__d_.__rep_, v24.__d_.__rep_, v25.__d_.__rep_, v26.__d_.__rep_);
    absl::lts_2020_02_25::Mutex::Block((unint64_t)v9, (uint64_t)ThreadIdentity, v28, v29, v30, v31, v32, v33);
    absl::lts_2020_02_25::Mutex::LockSlowLoop((atomic_ullong *)v9, &v39, v5 | 1, v34, v35, v36, v37, v38);
    uint64_t v12 = 1;
    if (!a3) {
      return v12;
    }
  }
  else
  {
    absl::lts_2020_02_25::Mutex::LockSlowLoop((atomic_ullong *)v9, &v39, v5, v22.__d_.__rep_, v23.__d_.__rep_, v24.__d_.__rep_, v25.__d_.__rep_, v26.__d_.__rep_);
    uint64_t v12 = 1;
    if (!a3) {
      return v12;
    }
  }
  if (!v40 && *a3) {
    return ((uint64_t (*)(void *))*a3)(a3);
  }
  return v12;
}

ssize_t absl::lts_2020_02_25::Mutex::AssertReaderHeld(ssize_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(void *)this & 9) == 0)
  {
    ssize_t v8 = this;
    uint64_t v9 = this % 1031;
    int v10 = dword_26AED2088;
    if ((dword_26AED2088 & 1) != 0
      || (atomic_compare_exchange_strong_explicit(&dword_26AED2088, (unsigned int *)&v10, v10 | 1, memory_order_acquire, memory_order_acquire), (v10 & 1) != 0))
    {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, a2, a3, a4, a5, a6, a7, a8);
      uint64_t v11 = absl::lts_2020_02_25::synch_event[v9];
      if (v11)
      {
LABEL_5:
        while (*(void *)(v11 + 16) != (v8 ^ 0xF03A5F7BF03A5F7BLL))
        {
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11) {
            goto LABEL_9;
          }
        }
        ++*(_DWORD *)v11;
      }
    }
    else
    {
      uint64_t v11 = absl::lts_2020_02_25::synch_event[v9];
      if (v11) {
        goto LABEL_5;
      }
    }
LABEL_9:
    unsigned int v12 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
    if (v12 >= 8) {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v12);
    }
    return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2403, "thread should hold at least a read lock on Mutex %p %s", a5, a6, a7, a8, v8);
  }
  return this;
}

void absl::lts_2020_02_25::Mutex::LockSlowLoop(atomic_ullong *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v11 = &absl::lts_2020_02_25::kExclusiveS;
  if ((*this & 0x10) != 0)
  {
    if ((_UNKNOWN *)*a2 == &absl::lts_2020_02_25::kExclusiveS) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = 6;
    }
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v13 = a2[4];
  if (*(void *)(v13 + 24) && !*(unsigned char *)(v13 + 32)) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1910, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
  }
  uint64_t v14 = *this;
  if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0) {
LABEL_65:
  }
    absl::lts_2020_02_25::Mutex::LockSlowLoop(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  int v15 = 0;
  uint64_t v16 = (_DWORD *)&_MergedGlobals_115;
  while (1)
  {
    uint64_t v19 = (void *)*a2;
    if ((*(void *)(*a2 + 24) & v14) == 0)
    {
      uint64_t v28 = v14;
      atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v28, (absl::lts_2020_02_25::zap_desig_waker[v8 & 1] & v14 | v19[1]) + v19[2], memory_order_acquire, memory_order_acquire);
      if (v28 == v14) {
        goto LABEL_45;
      }
LABEL_49:
      uint64_t v44 = a2[4];
      if (!*(void *)(v44 + 24)) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if ((v14 & 0x44) != 0) {
      break;
    }
    uint64_t v29 = v11;
    uint64_t v30 = absl::lts_2020_02_25::Enqueue(0, (uint64_t)a2, v14, v8, a5, a6, a7, a8);
    uint64_t v31 = absl::lts_2020_02_25::zap_desig_waker[v8 & 1];
    if (!v30) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1937, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
    }
    uint64_t v32 = v14 & v31 & 0xFBLL | 4;
    uint64_t v33 = v14 & v31 & 0xDBLL | 0x24;
    if ((v14 & 1) == 0) {
      uint64_t v33 = v14 & v31 & 0xFBLL | 4;
    }
    uint64_t v11 = v29;
    if ((void *)*a2 != v29) {
      uint64_t v33 = v32;
    }
    uint64_t v34 = v14;
    atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v34, v33 | (unint64_t)v30, memory_order_release, memory_order_relaxed);
    uint64_t v16 = (int *)&_MergedGlobals_115;
    if (v34 == v14) {
      goto LABEL_41;
    }
    *(void *)(a2[4] + 24) = 0;
LABEL_52:
    uint64_t v44 = a2[4];
    if (!*(void *)(v44 + 24)) {
      goto LABEL_54;
    }
LABEL_53:
    if (*(unsigned char *)(v44 + 32))
    {
LABEL_54:
      if (v16[16] <= 1) {
        int v45 = 0;
      }
      else {
        int v45 = 250;
      }
      BOOL v18 = v45 == v15;
      if (v45 > v15) {
        goto LABEL_12;
      }
      goto LABEL_58;
    }
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2002, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
    if (v16[16] <= 1) {
      int v17 = 0;
    }
    else {
      int v17 = 250;
    }
    BOOL v18 = v17 == v15;
    if (v17 > v15) {
      goto LABEL_12;
    }
LABEL_58:
    if (v18)
    {
      AbslInternalMutexYield();
LABEL_12:
      ++v15;
      uint64_t v14 = *this;
      if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0) {
        goto LABEL_65;
      }
    }
    else
    {
      AbslInternalSleepFor(0, 40000);
      int v15 = 0;
      uint64_t v14 = *this;
      if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0) {
        goto LABEL_65;
      }
    }
  }
  uint64_t v20 = v19[4];
  uint64_t v21 = v8 & 1;
  if ((v20 & absl::lts_2020_02_25::ignore_waiting_writers[v21] & v14) != 0)
  {
    if ((v14 & 0x40) != 0) {
      goto LABEL_49;
    }
    uint64_t v22 = v14;
    atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v22, absl::lts_2020_02_25::zap_desig_waker[v21] & v14 | 0x44, memory_order_acquire, memory_order_acquire);
    if (v22 != v14) {
      goto LABEL_49;
    }
    std::chrono::steady_clock::time_point v23 = absl::lts_2020_02_25::Enqueue((uint64_t *)(v14 & 0xFFFFFFFFFFFFFF00), (uint64_t)a2, v14, v8, a5, a6, a7, a8);
    if (!v23) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1982, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
    }
    if ((void *)*a2 == v11) {
      uint64_t v24 = 32 * (v14 & 1);
    }
    else {
      uint64_t v24 = 0;
    }
    unint64_t v25 = v24 | (unint64_t)v23;
    do
    {
      atomic_ullong v26 = *this;
      atomic_ullong v27 = *this;
      atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v27, v25 | *this & 0xBB | 4, memory_order_release, memory_order_relaxed);
    }
    while (v27 != v26);
LABEL_41:
    absl::lts_2020_02_25::Mutex::Block((unint64_t)this, a2[4], a3, a4, a5, a6, a7, a8);
    int v15 = 0;
    v8 |= 1u;
    goto LABEL_52;
  }
  uint64_t v35 = v14;
  atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v35, absl::lts_2020_02_25::zap_desig_waker[v21] & v14 | 0x41, memory_order_acquire, memory_order_acquire);
  if (v35 != v14) {
    goto LABEL_49;
  }
  *(void *)((v14 & 0xFFFFFFFFFFFFFF00) + 0x28) += 256;
  do
  {
    uint64_t v14 = *this;
    atomic_ullong v36 = *this;
    atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v36, *this & 0xFFFFFFFFFFFFFFBELL | 1, memory_order_release, memory_order_relaxed);
  }
  while (v36 != v14);
LABEL_45:
  uint64_t v37 = (uint64_t (**)(void))a2[1];
  if (v37 && *v37 && ((*v37)() & 1) == 0)
  {
    absl::lts_2020_02_25::Mutex::UnlockSlow((absl::lts_2020_02_25 **)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    absl::lts_2020_02_25::Mutex::Block((unint64_t)this, a2[4], v38, v39, v40, v41, v42, v43);
    int v15 = 0;
    v8 |= 1u;
    goto LABEL_49;
  }
  uint64_t v46 = a2[4];
  if (*(void *)(v46 + 24) && !*(unsigned char *)(v46 + 32))
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2007, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
    if ((v14 & 0x10) != 0) {
      goto LABEL_67;
    }
  }
  else
  {
    if ((v14 & 0x10) == 0) {
      return;
    }
LABEL_67:
    if ((void *)*a2 == v11) {
      uint64_t v47 = 5;
    }
    else {
      uint64_t v47 = 7;
    }
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, v47, a3, a4, a5, a6, a7, a8);
  }
}

void absl::lts_2020_02_25::PostSynchEvent(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v10 = this % 1031;
  uint64_t v11 = &_MergedGlobals_115;
  int v12 = dword_26AED2088;
  if ((dword_26AED2088 & 1) != 0
    || (atomic_compare_exchange_strong_explicit(&dword_26AED2088, (unsigned int *)&v12, v12 | 1, memory_order_acquire, memory_order_acquire), (v12 & 1) != 0))
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v13 = absl::lts_2020_02_25::synch_event[v10];
    if (v13)
    {
LABEL_4:
      while (*(void *)(v13 + 16) != (this ^ 0xF03A5F7BF03A5F7BLL))
      {
        uint64_t v13 = *(void *)(v13 + 8);
        if (!v13) {
          goto LABEL_8;
        }
      }
      ++*(_DWORD *)v13;
    }
  }
  else
  {
    uint64_t v13 = absl::lts_2020_02_25::synch_event[v10];
    if (v13) {
      goto LABEL_4;
    }
  }
LABEL_8:
  uint64_t v14 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
  if (v14 >= 8)
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v14);
    if (!v13)
    {
LABEL_11:
      memset(v29, 0, sizeof(v29));
      unsigned int StackTrace = absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25 *)v29, (void **)0x28, 1);
      strcpy(v28, " @");
      if (StackTrace)
      {
        uint64_t v20 = StackTrace;
        int v21 = 2;
        uint64_t v22 = (const void **)v29;
        do
        {
          std::chrono::steady_clock::time_point v23 = *v22++;
          v21 += snprintf(&v28[v21], 960 - v21, " %p", v23);
          --v20;
        }
        while (v20);
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(0, (ORToolsCpL2AccessVariable *)"mutex.cc", 423, "%s%p %s %s", v16, v17, v18, v19, *((void *)&absl::lts_2020_02_25::event_properties + 2 * v8 + 1));
      uint64_t v11 = (_DWORD *)&_MergedGlobals_115;
      if (!v13 || (*((_DWORD *)&absl::lts_2020_02_25::event_properties + 4 * v8) & 2) == 0)
      {
        if (!v13) {
          return;
        }
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else if (!v13)
  {
    goto LABEL_11;
  }
  if (*(unsigned char *)(v13 + 40)) {
    goto LABEL_11;
  }
  if ((*((unsigned char *)&absl::lts_2020_02_25::event_properties + 16 * v8) & 2) != 0)
  {
LABEL_19:
    uint64_t v24 = *(void (**)(void))(v13 + 24);
    if (v24) {
      v24(*(void *)(v13 + 32));
    }
  }
LABEL_21:
  int v25 = v11[34];
  if ((v25 & 1) != 0
    || (atomic_compare_exchange_strong_explicit(&dword_26AED2088, (unsigned int *)&v25, v25 | 1, memory_order_acquire, memory_order_acquire), (v25 & 1) != 0))
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v14, a3, a4, a5, a6, a7, a8);
  }
  int v26 = *(_DWORD *)v13 - 1;
  *(_DWORD *)uint64_t v13 = v26;
  uint64_t v27 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
  if (v27 >= 8) {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v27);
  }
  if (!v26) {
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v13, v27, a3, a4, a5, a6, a7, a8);
  }
}

void absl::lts_2020_02_25::Mutex::Unlock(absl::lts_2020_02_25 **this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::DebugOnlyLockLeave(this, a2, a3, a4, a5, a6, a7, a8);
  int v15 = *this;
  if (((unint64_t)*this & 9) != 8) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1671, "Mutex unlocked when destroyed or not locked: v=0x%x", v11, v12, v13, v14, (char)*this);
  }
  BOOL v17 = (v15 & 0x18) == 8 && (v15 & 6) != 4;
  unint64_t v18 = ((unint64_t)v15 ^ 0xC) & 0x18;
  unint64_t v19 = ((unint64_t)v15 ^ 0xC) & 6;
  if (v17 != v18 < v19) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1692, "internal logic error %llx %llx %llx\n", v11, v12, v13, v14, (char)v15);
  }
  if (v18 >= v19
    || (uint64_t v20 = v15,
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)this, (unint64_t *)&v20, (unint64_t)v15 & 0xFFFFFFFFFFFFFFD7, memory_order_release, memory_order_relaxed), v20 != v15))
  {
    absl::lts_2020_02_25::Mutex::UnlockSlow(this, 0, v9, v10, v11, v12, v13, v14);
  }
}

void *absl::lts_2020_02_25::DebugOnlyLockLeave(void *this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)this;
  int v9 = dword_26AED2084;
  if ((dword_26AED2084 & 1) == 0)
  {
    atomic_compare_exchange_strong_explicit(&dword_26AED2084, (unsigned int *)&v9, v9 | 1, memory_order_acquire, memory_order_acquire);
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_26AED2090;
      if (qword_26AED2090) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_26AED2090;
  if (!qword_26AED2090)
  {
LABEL_5:
    uint64_t v11 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)8, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v10 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(v11);
    qword_26AED2090 = (uint64_t)v10;
  }
LABEL_6:
  unint64_t Id = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(v10, v8, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = Id;
  unsigned int v14 = atomic_exchange_explicit(&dword_26AED2084, dword_26AED2084 & 2, memory_order_release);
  if (v14 >= 8)
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2084, v14);
    this = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(v33);
    uint64_t v22 = this;
    if (this)
    {
LABEL_8:
      std::chrono::steady_clock::time_point v23 = (unsigned int *)v22[9];
      if (v23) {
        goto LABEL_9;
      }
LABEL_29:
      unint64_t v34 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v15, v16, v17, v18, v19, v20, v21);
      *(_DWORD *)unint64_t v34 = 0;
      *(unsigned char *)(v34 + 4) = 0;
      v22[9] = v34;
LABEL_30:
      uint64_t v35 = v8 % 1031;
      int v36 = dword_26AED2088;
      if ((dword_26AED2088 & 1) != 0
        || (atomic_compare_exchange_strong_explicit(&dword_26AED2088, (unsigned int *)&v36, v36 | 1, memory_order_acquire, memory_order_acquire), (v36 & 1) != 0))
      {
        absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v15, v16, v17, v18, v19, v20, v21);
        uint64_t v37 = absl::lts_2020_02_25::synch_event[v35];
        if (v37)
        {
LABEL_33:
          while (*(void *)(v37 + 16) != (v8 ^ 0xF03A5F7BF03A5F7BLL))
          {
            uint64_t v37 = *(void *)(v37 + 8);
            if (!v37) {
              goto LABEL_37;
            }
          }
          ++*(_DWORD *)v37;
        }
      }
      else
      {
        uint64_t v37 = absl::lts_2020_02_25::synch_event[v35];
        if (v37) {
          goto LABEL_33;
        }
      }
LABEL_37:
      unsigned int v38 = atomic_exchange_explicit(&dword_26AED2088, dword_26AED2088 & 2, memory_order_release);
      if (v38 >= 8) {
        absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_26AED2088, v38);
      }
      return (void *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1213, "thread releasing lock it does not hold: %p %s; ",
                         v18,
                         v19,
                         v20,
                         v21,
                         v8);
    }
  }
  else
  {
    this = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(Id);
    uint64_t v22 = this;
    if (this) {
      goto LABEL_8;
    }
  }
  this = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity((absl::lts_2020_02_25::synchronization_internal *)this, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v22 = this;
  std::chrono::steady_clock::time_point v23 = (unsigned int *)this[9];
  if (!v23) {
    goto LABEL_29;
  }
LABEL_9:
  uint64_t v24 = *v23;
  if (!v24)
  {
    if (*((unsigned char *)v23 + 4)) {
      return this;
    }
    goto LABEL_30;
  }
  uint64_t v25 = 0;
  do
  {
    int v26 = &v23[v25];
    if (*(absl::lts_2020_02_25::base_internal **)&v23[v25 + 6] == v13)
    {
      int v27 = v26[4];
      if (v27 == 1)
      {
        uint64_t v28 = &v23[v25];
        uint64_t v29 = (int)v24 - 1;
        *std::chrono::steady_clock::time_point v23 = v29;
        uint64_t v30 = &v23[6 * v29];
        long long v31 = *(_OWORD *)(v30 + 2);
        *((void *)v28 + 3) = *((void *)v30 + 3);
        *(_OWORD *)(v28 + 2) = v31;
        *((void *)v30 + 3) = 0;
        *((void *)v30 + 1) = 0;
      }
      else
      {
        if (v27 <= 0) {
          absl::lts_2020_02_25::DebugOnlyLockLeave();
        }
        v26[4] = v27 - 1;
      }
      return this;
    }
    v25 += 6;
  }
  while (6 * v24 != v25);
  if (!*((unsigned char *)v23 + 4))
  {
    uint64_t v32 = v23 + 2;
    while (*v32 != v8)
    {
      v32 += 3;
      if (!--v24) {
        goto LABEL_30;
      }
    }
  }
  return this;
}

void absl::lts_2020_02_25::Mutex::ReaderUnlock(atomic_ullong *this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::DebugOnlyLockLeave(this, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v15 = *this;
  if ((*this & 9) != 1) {
    absl::lts_2020_02_25::Mutex::ReaderUnlock();
  }
  if ((*this & 0x15) != 1) {
    goto LABEL_7;
  }
  if (v15 <= 0xFF) {
    absl::lts_2020_02_25::Mutex::ReaderUnlock();
  }
  uint64_t v16 = -257;
  if (v15 >= 0x200) {
    uint64_t v16 = -256;
  }
  atomic_ullong v17 = *this;
  atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v17, v16 + v15, memory_order_release, memory_order_relaxed);
  if (v17 != v15)
  {
LABEL_7:
    absl::lts_2020_02_25::Mutex::UnlockSlow((absl::lts_2020_02_25 **)this, 0, v9, v10, v11, v12, v13, v14);
  }
}

BOOL absl::lts_2020_02_25::ExactlyOneReader(absl::lts_2020_02_25 *this)
{
  if ((this & 9) != 1) {
    absl::lts_2020_02_25::ExactlyOneReader();
  }
  if ((unint64_t)this <= 0xFF) {
    absl::lts_2020_02_25::Mutex::ReaderUnlock();
  }
  return (unint64_t)this < 0x200;
}

uint64_t absl::lts_2020_02_25::CheckForMutexCorruption(uint64_t this, char a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((this & ((8 * this) ^ 0x20) & 0x28) != 0) {
    absl::lts_2020_02_25::CheckForMutexCorruption(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return this;
}

uint64_t *absl::lts_2020_02_25::Enqueue(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(atomic_ullong **)(a2 + 40);
  if (!v10)
  {
    uint64_t v18 = *(uint64_t **)(a2 + 32);
    uint64_t v19 = v18[3];
    if (v19) {
      BOOL v20 = v19 == a2;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20 && !*((unsigned char *)v18 + 32))
    {
      uint64_t v102 = a3;
      char v103 = a4;
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 887, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->waitp == nullptr || s->waitp == waitp || s->suppress_fatal_errors");
      a4 = v103;
      a3 = v102;
    }
    v18[3] = a2;
    v18[1] = 0;
    *((unsigned char *)v18 + 16) = 1;
    *((unsigned char *)v18 + 69) = 0;
    *((unsigned char *)v18 + 70) = (a4 & 2) != 0;
    if (!a1)
    {
      *uint64_t v18 = (uint64_t)v18;
      v18[5] = a3;
      uint64_t v35 = v18;
      *((unsigned char *)v18 + 68) = 0;
LABEL_112:
      *((_DWORD *)v18 + 16) = 1;
      return v35;
    }
    v21.__d_.__rep_ = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (v18[7] < v21.__d_.__rep_)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v21.__d_.__rep_;
      int v105 = 0;
      int v27 = pthread_self();
      uint64_t v28 = (absl::lts_2020_02_25::base_internal::CycleClock *)pthread_getschedparam(v27, &v105, &v104);
      if (!v28)
      {
        *((_DWORD *)v18 + 12) = v104.sched_priority;
        v18[7] = rep + (uint64_t)absl::lts_2020_02_25::base_internal::CycleClock::Frequency(v28);
        int v33 = *((_DWORD *)v18 + 12);
        int v34 = *((unsigned __int8 *)a1 + 68);
        if (v33 <= *((_DWORD *)a1 + 12)) {
          goto LABEL_33;
        }
LABEL_28:
        if (v34)
        {
          if (*(_UNKNOWN **)a2 == &absl::lts_2020_02_25::kExclusiveS)
          {
            uint64_t v63 = *(void **)(a2 + 8);
            uint64_t v48 = a1;
            if (!v63 || (uint64_t v48 = a1, !*v63))
            {
LABEL_81:
              uint64_t v64 = v48[1];
              *uint64_t v18 = *v48;
              *uint64_t v48 = (uint64_t)v18;
              if (v64)
              {
                int v65 = (void *)v48[3];
                size_t v66 = (void *)v18[3];
                if (*v65 != *v66) {
                  goto LABEL_83;
                }
                int v83 = (void *)v65[1];
                uint64_t v84 = (void *)v66[1];
                if (v83)
                {
                  if (!v84 || !*v84)
                  {
                    if (!*v83) {
                      goto LABEL_84;
                    }
                    goto LABEL_83;
                  }
                  if (*v83 != *v84 || v83[1] != v84[1] || v83[4] != v84[4]) {
                    goto LABEL_83;
                  }
                  unint64_t v86 = v83[2];
                  uint64_t v85 = v83[3];
                  uint64_t v88 = v84[2];
                  uint64_t v87 = v84[3];
                  BOOL v20 = v85 == v87;
                  unint64_t v89 = (v87 | v85) & 1 | v86;
                  BOOL v90 = v20 || v89 == 0;
                  BOOL v91 = v90;
                  if (v86 != v88 || !v91) {
LABEL_83:
                  }
                    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 964, "Check %s failed: %s", v22.__d_.__rep_, v23.__d_.__rep_, v24.__d_.__rep_, v25.__d_.__rep_, (char)"enqueue_after->skip == nullptr || MuSameCondition(enqueue_after, s)");
                }
                else if (v84 && *v84)
                {
                  goto LABEL_83;
                }
              }
LABEL_84:
              if (v48 == a1) {
                goto LABEL_87;
              }
              if (!*((unsigned char *)v48 + 16)) {
                goto LABEL_87;
              }
              uint64_t v67 = (void *)v48[3];
              uint64_t v68 = *(void **)(*v48 + 24);
              if (*v67 != *v68) {
                goto LABEL_87;
              }
              unint64_t v92 = (void *)v67[1];
              unint64_t v93 = (void *)v68[1];
              if (v92)
              {
                if (v93 && *v93)
                {
                  if (*v92 != *v93 || v92[1] != v93[1] || v92[4] != v93[4]) {
                    goto LABEL_87;
                  }
                  unint64_t v95 = v92[2];
                  uint64_t v94 = v92[3];
                  uint64_t v97 = v93[2];
                  uint64_t v96 = v93[3];
                  BOOL v20 = v94 == v96;
                  unint64_t v98 = (v96 | v94) & 1 | v95;
                  BOOL v99 = v20 || v98 == 0;
                  BOOL v100 = v99;
                  if (v95 != v97 || !v100)
                  {
LABEL_87:
                    uint64_t v69 = (void *)v18[3];
                    uint64_t v70 = *(void **)(*v18 + 24);
                    if (*v69 != *v70)
                    {
LABEL_88:
                      uint64_t v35 = a1;
                      goto LABEL_112;
                    }
                    unsigned int v71 = (void *)v69[1];
                    unsigned int v72 = (void *)v70[1];
                    if (v71)
                    {
                      if (v72 && *v72)
                      {
                        if (*v71 != *v72 || v71[1] != v72[1] || v71[4] != v72[4]) {
                          goto LABEL_88;
                        }
                        unint64_t v74 = v71[2];
                        uint64_t v73 = v71[3];
                        uint64_t v76 = v72[2];
                        uint64_t v75 = v72[3];
                        BOOL v20 = v73 == v75;
                        unint64_t v77 = (v75 | v73) & 1 | v74;
                        BOOL v78 = v20 || v77 == 0;
                        BOOL v79 = v78;
                        if (v74 != v76 || !v79) {
                          goto LABEL_88;
                        }
                      }
                      else if (*v71)
                      {
                        goto LABEL_88;
                      }
                    }
                    else if (v72 && *v72)
                    {
                      goto LABEL_88;
                    }
                    v18[1] = *v18;
                    goto LABEL_88;
                  }
                }
                else if (*v92)
                {
                  goto LABEL_87;
                }
              }
              else if (v93 && *v93)
              {
                goto LABEL_87;
              }
              v48[1] = *v48;
              goto LABEL_87;
            }
          }
          LOBYTE(v34) = 1;
LABEL_33:
          *uint64_t v18 = *a1;
          *a1 = (uint64_t)v18;
          v18[5] = a1[5];
          *((unsigned char *)v18 + 68) = v34;
          uint64_t v35 = v18;
          if (!*((unsigned char *)a1 + 16)) {
            goto LABEL_112;
          }
          int v36 = (void *)a1[3];
          uint64_t v37 = (void *)v18[3];
          uint64_t v35 = v18;
          if (*v36 != *v37) {
            goto LABEL_112;
          }
          unsigned int v38 = (uint64_t *)v36[1];
          uint64_t v39 = (uint64_t *)v37[1];
          if (v38)
          {
            if (v39 && *v39)
            {
              uint64_t v35 = v18;
              if (*v38 != *v39) {
                goto LABEL_112;
              }
              uint64_t v35 = v18;
              if (v38[1] != v39[1]) {
                goto LABEL_112;
              }
              uint64_t v35 = v18;
              if (v38[4] != v39[4]) {
                goto LABEL_112;
              }
              unint64_t v41 = v38[2];
              uint64_t v40 = v38[3];
              uint64_t v43 = v39[2];
              uint64_t v42 = v39[3];
              BOOL v20 = v40 == v42;
              unint64_t v44 = (v42 | v40) & 1 | v41;
              BOOL v45 = v20 || v44 == 0;
              BOOL v46 = v45;
              uint64_t v35 = v18;
              if (v41 != v43) {
                goto LABEL_112;
              }
              uint64_t v35 = v18;
              if (!v46) {
                goto LABEL_112;
              }
              goto LABEL_111;
            }
            uint64_t v81 = *v38;
          }
          else
          {
            if (!v39) {
              goto LABEL_111;
            }
            uint64_t v81 = *v39;
          }
          uint64_t v35 = v18;
          if (v81) {
            goto LABEL_112;
          }
LABEL_111:
          a1[1] = (uint64_t)v18;
          uint64_t v35 = v18;
          goto LABEL_112;
        }
        uint64_t v47 = a1;
        while (1)
        {
          uint64_t v48 = v47;
          uint64_t v49 = (uint64_t *)*v47;
          uint64_t v47 = *(uint64_t **)(*v47 + 8);
          if (v47)
          {
            uint64_t v50 = (uint64_t *)v47[1];
            if (v50)
            {
              uint64_t v51 = v49;
              do
              {
                uint64_t v52 = v47;
                uint64_t v47 = v50;
                v51[1] = (uint64_t)v50;
                uint64_t v50 = (uint64_t *)v50[1];
                uint64_t v51 = v52;
              }
              while (v50);
            }
            v49[1] = (uint64_t)v47;
            if (v47 != v49)
            {
              if (v33 <= *((_DWORD *)v47 + 12)) {
                goto LABEL_52;
              }
              unint64_t v53 = (void *)v18[3];
              uint64_t v54 = (void *)v49[3];
              if (*v53 != *v54) {
                goto LABEL_52;
              }
              uint64_t v55 = (void *)v53[1];
              uint64_t v56 = (void *)v54[1];
              if (v55)
              {
                if (v56 && *v56)
                {
                  if (*v55 != *v56 || v55[1] != v56[1] || v55[4] != v56[4]) {
                    goto LABEL_52;
                  }
                  unint64_t v58 = v55[2];
                  uint64_t v57 = v55[3];
                  uint64_t v60 = v56[2];
                  uint64_t v59 = v56[3];
                  BOOL v61 = !((v59 | v57) & 1 | v58) || v57 == v59;
                  if (!v61 || v58 != v60) {
                    goto LABEL_52;
                  }
                }
                else if (*v55)
                {
                  goto LABEL_52;
                }
              }
              else if (v56 && *v56)
              {
                goto LABEL_52;
              }
            }
          }
          uint64_t v47 = v49;
LABEL_52:
          if (v33 > *((_DWORD *)v47 + 12)) {
            goto LABEL_81;
          }
        }
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 910, "pthread_getschedparam failed: %d", v29, v30, v31, v32, (char)v28);
    }
    int v33 = *((_DWORD *)v18 + 12);
    int v34 = *((unsigned __int8 *)a1 + 68);
    if (v33 <= *((_DWORD *)a1 + 12)) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  int v11 = 0;
  *(void *)(a2 + 40) = 0;
  while (1)
  {
    atomic_ullong v12 = *v10;
    if ((*v10 & 1) == 0)
    {
      atomic_ullong v13 = *v10;
      atomic_compare_exchange_strong_explicit(v10, (unint64_t *)&v13, v12 | 1, memory_order_acquire, memory_order_acquire);
      if (v13 == v12) {
        break;
      }
    }
    if (dword_26AED2040 <= 1) {
      int v14 = 0;
    }
    else {
      int v14 = 250;
    }
    if (v14 > v11)
    {
      ++v11;
    }
    else if (v14 == v11)
    {
      AbslInternalMutexYield();
      ++v11;
    }
    else
    {
      AbslInternalSleepFor(0, 40000);
      int v11 = 0;
    }
  }
  uint64_t v15 = *(void *)(a2 + 32);
  if (*(void *)(v15 + 24))
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2498, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr");
    uint64_t v15 = *(void *)(a2 + 32);
    *(void *)(v15 + 24) = a2;
    uint64_t v16 = (void *)v15;
    atomic_ullong v17 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v12 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  *(void *)(v15 + 24) = a2;
  uint64_t v16 = (void *)v15;
  atomic_ullong v17 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
LABEL_15:
    *(void *)uint64_t v15 = *v17;
    uint64_t v16 = v17;
  }
LABEL_16:
  *uint64_t v16 = v15;
  *(_DWORD *)(v15 + 64) = 1;
  atomic_store(v12 & 2 | *(void *)(a2 + 32), (unint64_t *)v10);
  return a1;
}

ssize_t absl::lts_2020_02_25::Mutex::Fer(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void **)(a2 + 24);
  if (!v10[1])
  {
    if (!v10[2]) {
      goto LABEL_3;
    }
LABEL_30:
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2340, "Check %s failed: %s", a5, a6, a7, a8, (char)"!w->waitp->timeout.has_timeout()");
    uint64_t v10 = *(void **)(a2 + 24);
    if (!v10[5]) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2338, "Check %s failed: %s", a5, a6, a7, a8, (char)"w->waitp->cond == nullptr");
  uint64_t v10 = *(void **)(a2 + 24);
  if (v10[2]) {
    goto LABEL_30;
  }
LABEL_3:
  if (!v10[5]) {
    goto LABEL_4;
  }
LABEL_31:
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2342, "Check %s failed: %s", a5, a6, a7, a8, (char)"w->waitp->cv_word == nullptr");
  uint64_t v10 = *(void **)(a2 + 24);
LABEL_4:
  uint64_t v11 = *a1;
  if ((((*v10 != (void)absl::lts_2020_02_25::kSharedS) | 8) & *a1) != 0)
  {
    int v12 = 0;
    do
    {
      if ((v11 & 0x44) != 0)
      {
        if ((v11 & 0x40) == 0)
        {
          uint64_t v13 = v11;
          atomic_compare_exchange_strong(a1, (unint64_t *)&v13, v11 | 0x44);
          if (v13 == v11)
          {
            ssize_t result = (ssize_t)absl::lts_2020_02_25::Enqueue((uint64_t *)(v11 & 0xFFFFFFFFFFFFFF00), *(void *)(a2 + 24), v11, 2, a5, a6, a7, a8);
            ssize_t v22 = result;
            if (!result) {
              ssize_t result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2374, "Check %s failed: %s", v18, v19, v20, v21, (char)"new_h != nullptr");
            }
            do
            {
              atomic_ullong v23 = *a1;
              atomic_ullong v24 = *a1;
              atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v24, *a1 & 0xBB | v22 | 4, memory_order_release, memory_order_relaxed);
            }
            while (v24 != v23);
            return result;
          }
        }
      }
      else
      {
        ssize_t result = (ssize_t)absl::lts_2020_02_25::Enqueue(0, (uint64_t)v10, v11, 2, a5, a6, a7, a8);
        ssize_t v14 = result;
        if (!result) {
          ssize_t result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2363, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
        }
        uint64_t v15 = v11;
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v15, v11 | (unint64_t)v14 | 4, memory_order_release, memory_order_relaxed);
        if (v15 == v11) {
          return result;
        }
      }
      if (dword_26AED2040 <= 1) {
        int v16 = 0;
      }
      else {
        int v16 = 250;
      }
      if (v16 <= v12)
      {
        if (v16 != v12)
        {
          AbslInternalSleepFor(0, 40000);
          int v12 = 0;
          goto LABEL_8;
        }
        AbslInternalMutexYield();
      }
      ++v12;
LABEL_8:
      uint64_t v11 = *a1;
      uint64_t v10 = *(void **)(a2 + 24);
    }
    while ((((*v10 != (void)absl::lts_2020_02_25::kSharedS) | 8) & *a1) != 0);
  }
  *(void *)a2 = 0;
  atomic_store(0, (unsigned int *)(a2 + 64));

  return AbslInternalPerThreadSemPost(a2);
}

void absl::lts_2020_02_25::CondVar::~CondVar(absl::lts_2020_02_25::CondVar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(void *)this & 2) != 0) {
    absl::lts_2020_02_25::ForgetSynchEvent((uint64_t)this, 2, 1, a4, a5, a6, a7, a8);
  }
}

void absl::lts_2020_02_25::CondVar::SignalAll(atomic_ullong *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  atomic_ullong v8 = *this;
  if (!*this) {
    return;
  }
  int v10 = 0;
  while (1)
  {
    if ((v8 & 1) == 0)
    {
      unint64_t v11 = v8 & 2;
      atomic_ullong v12 = v8;
      atomic_compare_exchange_strong_explicit(this, (unint64_t *)&v12, v11, memory_order_acquire, memory_order_acquire);
      if (v12 == v8) {
        break;
      }
    }
    if (dword_26AED2040 <= 1) {
      int v13 = 0;
    }
    else {
      int v13 = 250;
    }
    if (v13 > v10) {
      goto LABEL_4;
    }
    if (v13 == v10)
    {
      AbslInternalMutexYield();
LABEL_4:
      ++v10;
      atomic_ullong v8 = *this;
      if (!*this) {
        return;
      }
    }
    else
    {
      AbslInternalSleepFor(0, 40000);
      int v10 = 0;
      atomic_ullong v8 = *this;
      if (!*this) {
        return;
      }
    }
  }
  ssize_t v14 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    uint64_t v15 = *v14;
    do
    {
      while (1)
      {
        uint64_t v17 = *(void *)v15;
        uint64_t v18 = *(void *)(v15 + 24);
        if (!*(void *)(v18 + 16))
        {
          uint64_t v19 = *(atomic_ullong **)(v18 + 24);
          if (v19) {
            break;
          }
        }
        *(void *)uint64_t v15 = 0;
        atomic_store(0, (unsigned int *)(v15 + 64));
        AbslInternalPerThreadSemPost(v15);
        BOOL v16 = v15 == (void)v14;
        uint64_t v15 = v17;
        if (v16) {
          goto LABEL_21;
        }
      }
      absl::lts_2020_02_25::Mutex::Fer(v19, v15, a3, a4, a5, a6, a7, a8);
      BOOL v16 = v15 == (void)v14;
      uint64_t v15 = v17;
    }
    while (!v16);
LABEL_21:
  }
  if (v11)
  {
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, 13, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t absl::lts_2020_02_25::anonymous namespace'::GetStack(absl::lts_2020_02_25::_anonymous_namespace_ *this, void **a2)
{
  return absl::lts_2020_02_25::GetStackTrace(this, a2, 3);
}

char *absl::lts_2020_02_25::StackString(const void **this, void **a2, char *a3, char *a4, char a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v6 = (int)a4;
    int v7 = (int)a2;
    atomic_ullong v8 = this;
    uint64_t v9 = a2;
    if (a5)
    {
      snprintf(a3, v6, "%s\t@ %p %s\n", "\n", *v8, v17);
      if (v7 != 1)
      {
        int v10 = strlen(a3);
        unint64_t v11 = v8 + 1;
        uint64_t v12 = v9 - 1;
        do
        {
          int v13 = *v11++;
          snprintf(&a3[v10], v6 - v10, "%s\t@ %p %s\n", "", v13, v17);
          v10 += strlen(&a3[v10]);
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      int v14 = 0;
      do
      {
        uint64_t v15 = *v8++;
        snprintf(&a3[v14], v6 - v14, " %p", v15);
        v14 += strlen(&a3[v14]);
        --v9;
      }
      while (v9);
    }
  }
  return a3;
}

ssize_t OUTLINED_FUNCTION_1(atomic_ullong *a1, void *a2)
{
  return absl::lts_2020_02_25::Mutex::LockSlow(a1, a2, 0, 0);
}

uint64_t *OUTLINED_FUNCTION_3(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return absl::lts_2020_02_25::Enqueue(a1, v8, v9, 2, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return 3;
}

void OUTLINED_FUNCTION_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t _GLOBAL__sub_I_mutex_cc(absl::lts_2020_02_25::base_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dword_26AED2040 = absl::lts_2020_02_25::base_internal::NumCPUs(a1, a2, a3, a4, a5, a6, a7, a8);
  if (dword_26AED2040 <= 1) {
    int v8 = 0;
  }
  else {
    int v8 = 1500;
  }
  dword_26AED2080 = v8;
  __cxa_atexit((void (*)(void *))absl::lts_2020_02_25::base_internal::SpinLock::~SpinLock, &dword_26AED2084, &dword_23CB1E000);
  return __cxa_atexit((void (*)(void *))absl::lts_2020_02_25::base_internal::SpinLock::~SpinLock, &dword_26AED2088, &dword_23CB1E000);
}

absl::lts_2020_02_25::synchronization_internal::Waiter *absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Init(uint64_t a1)
{
  ssize_t result = absl::lts_2020_02_25::synchronization_internal::Waiter::Waiter((absl::lts_2020_02_25::synchronization_internal::Waiter *)(a1 + 80));
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  return result;
}

void absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Destroy(uint64_t a1)
{
}

ssize_t AbslInternalPerThreadSemPost(uint64_t a1)
{
  return absl::lts_2020_02_25::synchronization_internal::Waiter::Post((absl::lts_2020_02_25::synchronization_internal::Waiter *)(a1 + 80));
}

uint64_t AbslInternalPerThreadSemWait(absl::lts_2020_02_25::base_internal *a1)
{
  ThreadIdentity = (char *)absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(a1);
  if (!ThreadIdentity) {
    ThreadIdentity = (char *)absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v2, v3, v4, v5, v6, v7, v8);
  }
  unsigned int v10 = *((_DWORD *)ThreadIdentity + 54);
  if (v10 <= 1) {
    unsigned int v10 = 1;
  }
  *((_DWORD *)ThreadIdentity + 55) = v10;
  ThreadIdentity[224] = 0;
  unint64_t v11 = (atomic_uint *)*((void *)ThreadIdentity + 26);
  if (v11) {
    atomic_fetch_add_explicit(v11, 1u, memory_order_relaxed);
  }
  uint64_t result = absl::lts_2020_02_25::synchronization_internal::Waiter::Wait((pthread_mutex_t *)(ThreadIdentity + 80), (uint64_t)a1);
  int v13 = (atomic_uint *)*((void *)ThreadIdentity + 26);
  if (v13) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFF, memory_order_relaxed);
  }
  ThreadIdentity[224] = 0;
  *((_DWORD *)ThreadIdentity + 55) = 0;
  return result;
}

absl::lts_2020_02_25::synchronization_internal::Waiter *absl::lts_2020_02_25::synchronization_internal::Waiter::Waiter(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  if (v2) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 208, "pthread_mutex_init failed: %d", v3, v4, v5, v6, v2);
  }
  int v7 = pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  if (v7) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 213, "pthread_cond_init failed: %d", v8, v9, v10, v11, v7);
  }
  *((void *)this + 14) = 0;
  return this;
}

void absl::lts_2020_02_25::synchronization_internal::Waiter::~Waiter(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2 = pthread_mutex_destroy((pthread_mutex_t *)this);
  if (v2) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 223, "pthread_mutex_destroy failed: %d", v3, v4, v5, v6, v2);
  }
  int v7 = pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  if (v7) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 228, "pthread_cond_destroy failed: %d", v8, v9, v10, v11, v7);
  }
}

uint64_t absl::lts_2020_02_25::synchronization_internal::Waiter::Wait(pthread_mutex_t *a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = a2 & ~(a2 >> 63);
    v34.tv_sec = v4 / 0x3B9ACA00;
    v34.tv_nsec = v4 % 0x3B9ACA00;
  }
  int v5 = pthread_mutex_lock(a1);
  if (v5) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 187, "pthread_mutex_lock failed: %d", v6, v7, v8, v9, v5);
  }
  int v10 = *(_DWORD *)&a1[1].__opaque[44];
  ++*(_DWORD *)&a1[1].__opaque[40];
  if (v10)
  {
LABEL_6:
    *(_DWORD *)&a1[1].__opaque[44] = v10 - 1;
    uint64_t v11 = 1;
    goto LABEL_7;
  }
  if (!a2)
  {
    while (1)
    {
      ssize_t v23 = pthread_cond_wait((pthread_cond_t *)&a1[1], a1);
      if (v23) {
        ssize_t v23 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 250, "pthread_cond_wait failed: %d", v24, v25, v26, v27, v23);
      }
      int v10 = *(_DWORD *)&a1[1].__opaque[44];
      if (v10) {
        goto LABEL_6;
      }
      uint64_t v28 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)v23);
      if (!v28) {
        goto LABEL_32;
      }
      if ((v28[224] & 1) == 0 && *((_DWORD *)v28 + 54) - *((_DWORD *)v28 + 55) >= 61) {
        v28[224] = 1;
      }
    }
  }
  ssize_t v18 = pthread_cond_timedwait((pthread_cond_t *)&a1[1], a1, &v34);
  if (!v18)
  {
LABEL_22:
    int v10 = *(_DWORD *)&a1[1].__opaque[44];
    if (!v10)
    {
      while (1)
      {
        uint64_t v29 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)v18);
        if (!v29) {
          break;
        }
        if ((v29[224] & 1) == 0 && *((_DWORD *)v29 + 54) - *((_DWORD *)v29 + 55) >= 61) {
          v29[224] = 1;
        }
        ssize_t v18 = pthread_cond_timedwait((pthread_cond_t *)&a1[1], a1, &v34);
        if (v18)
        {
          if (v18 == 60) {
            goto LABEL_13;
          }
          ssize_t v18 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 259, "pthread_cond_timedwait failed: %d", v30, v31, v32, v33, v18);
        }
        int v10 = *(_DWORD *)&a1[1].__opaque[44];
        if (v10) {
          goto LABEL_6;
        }
      }
LABEL_32:
      __assert_rtn("MaybeBecomeIdle", "waiter.cc", 58, "identity != nullptr");
    }
    goto LABEL_6;
  }
  if (v18 != 60)
  {
    ssize_t v18 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 259, "pthread_cond_timedwait failed: %d", v19, v20, v21, v22, v18);
    goto LABEL_22;
  }
LABEL_13:
  uint64_t v11 = 0;
LABEL_7:
  --*(_DWORD *)&a1[1].__opaque[40];
  int v12 = pthread_mutex_unlock(a1);
  if (v12) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v13, v14, v15, v16, v12);
  }
  return v11;
}

void sub_23CB53550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB53564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB53578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB5358C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB535A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB535B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB535CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB535E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_23CB535F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_unlock(*this);
  if (v1) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v2, v3, v4, v5, v1);
  }
}

ssize_t absl::lts_2020_02_25::synchronization_internal::Waiter::Post(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2 = pthread_mutex_lock((pthread_mutex_t *)this);
  if (v2) {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 187, "pthread_mutex_lock failed: %d", v3, v4, v5, v6, v2);
  }
  int v7 = *((_DWORD *)this + 28);
  ++*((_DWORD *)this + 29);
  if (v7)
  {
    int v8 = pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
    if (v8) {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 285, "pthread_cond_signal failed: %d", v9, v10, v11, v12, v8);
    }
  }
  ssize_t result = pthread_mutex_unlock((pthread_mutex_t *)this);
  if (result) {
    return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v14, v15, v16, v17, result);
  }
  return result;
}

void sub_23CB53724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::base_internal::anonymous namespace'::Throw<std::out_of_range>(const std::logic_error *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(v3, (struct type_info *)off_264E82AE0, MEMORY[0x263F8C068]);
}

void absl::lts_2020_02_25::base_internal::ThrowStdOutOfRange(absl::lts_2020_02_25::base_internal *this, const char *a2)
{
  std::logic_error::logic_error(&v2, (const char *)this);
  v2.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const std::logic_error *a2)
{
  ssize_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

unint64_t absl::lts_2020_02_25::Now(absl::lts_2020_02_25 *this)
{
  v1.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v2.__d_.__rep_ = std::chrono::system_clock::from_time_t(0).__d_.__rep_;
  if (v1.__d_.__rep_ - v2.__d_.__rep_ < 0) {
    return (-(uint64_t)(-1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) % 0x3B9ACA00uLL) >> 61)
  }
         - -1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) / 0x3B9ACA00uLL;
  else {
    return 1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) / 0x3B9ACA00uLL;
  }
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep absl::lts_2020_02_25::GetCurrentTimeNanos(absl::lts_2020_02_25 *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  return 1000 * (rep - std::chrono::system_clock::from_time_t(0).__d_.__rep_);
}

unint64_t *AbslInternalSleepFor(unint64_t *this, uint64_t a2)
{
  uint64_t v2 = (uint64_t)this;
  int v7 = this;
  uint64_t v8 = a2;
  while (v2)
  {
    if (v2 < 1) {
      return this;
    }
    uint64_t v3 = a2;
LABEL_7:
    if (v3) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = a2;
    }
    if (v2 == 0x7FFFFFFFFFFFFFFFLL) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = a2;
    }
    __rmtp.tv_sec = (__darwin_time_t)absl::lts_2020_02_25::ToTimespec(v2, v5);
    __rmtp.tv_nsec = v6;
    while (nanosleep(&__rmtp, &__rmtp) && *__error() == 4)
      ;
    this = absl::lts_2020_02_25::Duration::operator-=((unint64_t *)&v7, v2, v5);
    uint64_t v2 = (uint64_t)v7;
    LODWORD(a2) = v8;
  }
  uint64_t v3 = a2;
  if (a2) {
    goto LABEL_7;
  }
  return this;
}

unint64_t *absl::lts_2020_02_25::Duration::operator-=(unint64_t *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = result[1];
  if (v3 != 0xFFFFFFFFLL)
  {
    if (a3 == -1)
    {
      unint64_t v4 = (a2 >> 63) ^ 0x8000000000000000;
    }
    else
    {
      int64_t v5 = *result;
      uint64_t v6 = *result - a2;
      std::logic_error *result = v6;
      if (v3 < a3)
      {
        std::logic_error *result = --v6;
        LODWORD(v3) = v3 - 294967296;
      }
      *((_DWORD *)result + 2) = v3 - a3;
      if (a2 < 0)
      {
        if (v6 > v5) {
          return result;
        }
        unint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if (v6 <= v5) {
          return result;
        }
        unint64_t v4 = 0x8000000000000000;
      }
    }
    std::logic_error *result = v4;
    *((_DWORD *)result + 2) = -1;
  }
  return result;
}

char *absl::lts_2020_02_25::ToTimespec(uint64_t this, int a2)
{
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  if (this) {
    uint64_t v2 = (this >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((a2 + 3) < 0xEE6B2800) {
    unint64_t v3 = (char *)this;
  }
  else {
    unint64_t v3 = (char *)(this + 1);
  }
  if (this >= 0) {
    unint64_t v3 = (char *)this;
  }
  if (a2 == -1) {
    return (char *)v2;
  }
  else {
    return v3;
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      unint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t google::Demangle(google *this, const char *a2, char *a3)
{
  *((void *)&v24 + 1) = a2;
  *(void *)&long long v25 = a2;
  *((void *)&v25 + 1) = &a2[(int)a3];
  *(void *)&long long v26 = 0;
  *((void *)&v26 + 1) = 0x1FFFFFFFFFFFFLL;
  if (__PAIR64__(*((unsigned __int8 *)this + 1), *(unsigned __int8 *)this) != 0x5A0000005FLL) {
    goto LABEL_25;
  }
  *(void *)&long long v24 = (char *)this + 2;
  long long v27 = v24;
  long long v28 = v25;
  long long v29 = v26;
  google::ParseName((uint64_t)&v24);
  if (v3 && (char v4 = BYTE14(v26), BYTE14(v26) = 0, google::ParseType((unsigned __int8 **)&v24)))
  {
    while ((google::ParseType((unsigned __int8 **)&v24) & 1) != 0)
      ;
    BYTE14(v26) = v4 & 1;
    if (v4)
    {
      if ((unint64_t)(*((void *)&v24 + 1) + 1) >= *((void *)&v25 + 1)
        || (**((unsigned char **)&v24 + 1) = 40,
            uint64_t v5 = *((void *)&v24 + 1),
            uint64_t v6 = (unsigned char *)(*((void *)&v24 + 1) + 1),
            ++*((void *)&v24 + 1),
            (unint64_t)(v5 + 2) >= *((void *)&v25 + 1)))
      {
        HIBYTE(v26) = 1;
        uint64_t v8 = (char *)v24;
        int v9 = *(unsigned __int8 *)v24;
        if (*(unsigned char *)v24) {
          goto LABEL_14;
        }
        goto LABEL_39;
      }
      unsigned char *v6 = 41;
      uint64_t v7 = (unsigned char *)++*((void *)&v24 + 1);
      if (!HIBYTE(v26))
      {
        unsigned char *v7 = 0;
        uint64_t v8 = (char *)v24;
        int v9 = *(unsigned __int8 *)v24;
        if (!*(unsigned char *)v24) {
          goto LABEL_39;
        }
        goto LABEL_14;
      }
    }
  }
  else
  {
    long long v24 = v27;
    long long v25 = v28;
    long long v26 = v29;
    google::ParseName((uint64_t)&v24);
    if (!v10)
    {
      google::ParseSpecialName((unsigned __int8 **)&v24);
      if (!v11) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v8 = (char *)v24;
  int v9 = *(unsigned __int8 *)v24;
  if (*(unsigned char *)v24)
  {
LABEL_14:
    if (v9 == 64)
    {
      if (BYTE14(v26))
      {
        uint64_t v20 = 0;
        while (v8[++v20])
          ;
        if ((int)v20 >= 1)
        {
          unint64_t v22 = (unsigned char *)*((void *)&v24 + 1);
          uint64_t v20 = v20;
          do
          {
            if ((unint64_t)(v22 + 1) >= *((void *)&v25 + 1))
            {
              unsigned int v18 = 1;
              HIBYTE(v26) = 1;
              goto LABEL_26;
            }
            char v23 = *v8++;
            *unint64_t v22 = v23;
            unint64_t v22 = (unsigned char *)++*((void *)&v24 + 1);
            --v20;
          }
          while (v20);
          if (!HIBYTE(v26)) {
            *unint64_t v22 = 0;
          }
        }
      }
      goto LABEL_39;
    }
    if (v9 == 46)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v8 + 2;
      while ((v8[v12 + 1] & 0xDFu) - 65 <= 0x19)
      {
        uint64_t v14 = v12 + 1;
        do
        {
          int v15 = v13[v12];
          uint64_t v16 = v14;
          ++v12;
          ++v14;
        }
        while ((v15 & 0xFFFFFFDF) - 65 < 0x1A);
        if (v15 != 46 || v13[v12] - 48 > 9) {
          break;
        }
        do
          int v17 = v8[v16++ + 3];
        while ((v17 - 48) < 0xA);
        uint64_t v12 = v16 + 2;
        if (v17 != 46)
        {
          if (!v17) {
            goto LABEL_39;
          }
          break;
        }
      }
    }
LABEL_25:
    unsigned int v18 = 0;
    goto LABEL_26;
  }
LABEL_39:
  unsigned int v18 = 1;
LABEL_26:
  if (HIBYTE(v26)) {
    return 0;
  }
  else {
    return v18;
  }
}

uint64_t google::MaybeAppend(uint64_t result, char *a2)
{
  if (*(unsigned char *)(result + 46))
  {
    int v2 = *a2;
    if (*a2)
    {
      uint64_t v3 = 0;
      do
        char v4 = &a2[v3++];
      while (v4[1]);
      if ((int)v3 >= 1)
      {
        if (v2 == 60)
        {
          uint64_t v5 = *(unsigned char **)(result + 8);
          if (*(void *)(result + 16) < (unint64_t)v5 && *(v5 - 1) == 60)
          {
            if ((unint64_t)(v5 + 1) >= *(void *)(result + 24))
            {
              *(unsigned char *)(result + 47) = 1;
            }
            else
            {
              unsigned char *v5 = 32;
              uint64_t v6 = (unsigned char *)(*(void *)(result + 8) + 1);
              *(void *)(result + 8) = v6;
              if (!*(unsigned char *)(result + 47)) {
                unsigned char *v6 = 0;
              }
            }
          }
          int v2 = *a2;
        }
        uint64_t v7 = *(unsigned char **)(result + 8);
        if (v2 == 95 || (v2 & 0xFFFFFFDF) - 65 <= 0x19)
        {
          *(void *)(result + 32) = v7;
          *(_DWORD *)(result + 40) = v3;
        }
        uint64_t v3 = v3;
        do
        {
          if ((unint64_t)(v7 + 1) >= *(void *)(result + 24))
          {
            *(unsigned char *)(result + 47) = 1;
            return result;
          }
          char v8 = *a2++;
          unsigned char *v7 = v8;
          uint64_t v7 = (unsigned char *)(*(void *)(result + 8) + 1);
          *(void *)(result + 8) = v7;
          --v3;
        }
        while (v3);
        if (!*(unsigned char *)(result + 47)) {
          unsigned char *v7 = 0;
        }
      }
    }
  }
  return result;
}

double google::ParseEncoding(uint64_t a1)
{
  long long v27 = *(_OWORD *)a1;
  *(_OWORD *)long long v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 32);
  long long v35 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v28;
  *(_OWORD *)&v39[12] = *(_OWORD *)(a1 + 28);
  __int16 v2 = *(_WORD *)(a1 + 44);
  __int16 v3 = *(_WORD *)(a1 + 46);
  uint64_t v4 = *(void *)a1;
  if (**(unsigned char **)a1 != 78) {
    goto LABEL_8;
  }
  uint64_t v5 = v4 + 1;
  *(void *)a1 = v4 + 1;
  *(_WORD *)(a1 + 44) = 0;
  int v6 = *(unsigned __int8 *)(v4 + 1);
  if (v6 == 114)
  {
    uint64_t v5 = v4 + 2;
    *(void *)a1 = v4 + 2;
    int v6 = *(unsigned __int8 *)(v4 + 2);
    if (v6 != 86)
    {
LABEL_4:
      if (v6 != 75) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if (v6 != 86)
  {
    goto LABEL_4;
  }
  *(void *)a1 = v5 + 1;
  int v14 = *(unsigned __int8 *)++v5;
  if (v14 == 75) {
LABEL_5:
  }
    *(void *)a1 = v5 + 1;
LABEL_6:
  google::ParsePrefix(a1);
  *(_WORD *)(a1 + 44) = v2;
  if (**(unsigned char **)a1 == 69)
  {
    ++*(void *)a1;
    goto LABEL_20;
  }
LABEL_8:
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v39;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)&v39[12];
  *(_WORD *)(a1 + 44) = v2;
  *(_WORD *)(a1 + 46) = v3;
  if ((google::ParseLocalName(a1) & 1) == 0)
  {
    long long v29 = *(_OWORD *)a1;
    long long v31 = *(_OWORD *)(a1 + 16);
    long long v33 = *(_OWORD *)(a1 + 32);
    if ((google::ParseUnqualifiedName(a1) & 1) == 0)
    {
      long long v36 = *(_OWORD *)a1;
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v43 = *(_OWORD *)(a1 + 32);
      uint64_t v7 = *(void *)a1;
      if (**(unsigned char **)a1 != 83
        || *(unsigned char *)(v7 + 1) != 116
        || (*(void *)a1 = v7 + 2, google::MaybeAppend(a1, "std::"), !google::ParseUnqualifiedName(a1)))
      {
        *(_OWORD *)a1 = v36;
        *(_OWORD *)(a1 + 16) = v40;
        *(_OWORD *)(a1 + 32) = v43;
        if (!google::ParseSubstitution(a1)) {
          goto LABEL_19;
        }
      }
    }
    char v8 = *(unsigned char *)(a1 + 46);
    *(unsigned char *)(a1 + 46) = 0;
    if (**(unsigned char **)a1 != 73) {
      goto LABEL_19;
    }
    ++*(void *)a1;
    google::ParseTemplateArg((unsigned __int8 **)a1);
    if (!v9) {
      goto LABEL_19;
    }
    do
      google::ParseTemplateArg((unsigned __int8 **)a1);
    while ((v10 & 1) != 0);
    if (**(unsigned char **)a1 == 69)
    {
      ++*(void *)a1;
      *(unsigned char *)(a1 + 46) = v8 & 1;
      google::MaybeAppend(a1, "<>");
    }
    else
    {
LABEL_19:
      *(_OWORD *)a1 = v29;
      *(_OWORD *)(a1 + 16) = v31;
      *(_OWORD *)(a1 + 32) = v33;
      if ((google::ParseUnqualifiedName(a1) & 1) == 0)
      {
        int v15 = *(unsigned __int8 **)a1;
        if (**(unsigned char **)a1 != 83) {
          goto LABEL_30;
        }
        if (v15[1] != 116) {
          goto LABEL_30;
        }
        *(void *)a1 = v15 + 2;
        google::MaybeAppend(a1, "std::");
        if (!google::ParseUnqualifiedName(a1)) {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_20:
  char v11 = *(unsigned char *)(a1 + 46);
  *(unsigned char *)(a1 + 46) = 0;
  if (google::ParseType((unsigned __int8 **)a1))
  {
    while ((google::ParseType((unsigned __int8 **)a1) & 1) != 0)
      ;
    *(unsigned char *)(a1 + 46) = v11 & 1;
    uint64_t v12 = "()";
    goto LABEL_23;
  }
LABEL_30:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28[16];
  *(_OWORD *)a1 = v27;
  __int16 v16 = *(_WORD *)(a1 + 44);
  __int16 v17 = *(_WORD *)(a1 + 46);
  unsigned int v18 = *(unsigned __int8 **)a1;
  if (**(unsigned char **)a1 != 78) {
    goto LABEL_37;
  }
  unint64_t v19 = v18 + 1;
  *(void *)a1 = v18 + 1;
  *(_WORD *)(a1 + 44) = 0;
  int v20 = v18[1];
  if (v20 == 114)
  {
    unint64_t v19 = v18 + 2;
    *(void *)a1 = v18 + 2;
    int v20 = v18[2];
    if (v20 != 86)
    {
LABEL_33:
      if (v20 != 75) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
  }
  else if (v20 != 86)
  {
    goto LABEL_33;
  }
  *(void *)a1 = v19 + 1;
  int v25 = *++v19;
  if (v25 == 75) {
LABEL_34:
  }
    *(void *)a1 = v19 + 1;
LABEL_35:
  google::ParsePrefix(a1);
  *(_WORD *)(a1 + 44) = v16;
  if (**(unsigned char **)a1 == 69)
  {
    ++*(void *)a1;
    return result;
  }
LABEL_37:
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)&v28[12];
  *(_WORD *)(a1 + 44) = v16;
  *(_WORD *)(a1 + 46) = v17;
  if ((google::ParseLocalName(a1) & 1) == 0)
  {
    long long v30 = *(_OWORD *)a1;
    long long v32 = *(_OWORD *)(a1 + 16);
    long long v34 = *(_OWORD *)(a1 + 32);
    if (google::ParseUnqualifiedName(a1)) {
      goto LABEL_46;
    }
    long long v37 = *(_OWORD *)a1;
    long long v41 = *(_OWORD *)(a1 + 16);
    long long v44 = *(_OWORD *)(a1 + 32);
    unint64_t v21 = *(unsigned __int8 **)a1;
    if (**(unsigned char **)a1 == 83 && v21[1] == 116)
    {
      *(void *)a1 = v21 + 2;
      google::MaybeAppend(a1, "std::");
      if (google::ParseUnqualifiedName(a1)) {
        goto LABEL_46;
      }
    }
    *(_OWORD *)a1 = v37;
    *(_OWORD *)(a1 + 16) = v41;
    *(_OWORD *)(a1 + 32) = v44;
    if (google::ParseSubstitution(a1))
    {
LABEL_46:
      char v22 = *(unsigned char *)(a1 + 46);
      *(unsigned char *)(a1 + 46) = 0;
      if (**(unsigned char **)a1 == 73)
      {
        ++*(void *)a1;
        google::ParseTemplateArg((unsigned __int8 **)a1);
        if (v23)
        {
          do
            google::ParseTemplateArg((unsigned __int8 **)a1);
          while ((v24 & 1) != 0);
          if (**(unsigned char **)a1 == 69)
          {
            ++*(void *)a1;
            *(unsigned char *)(a1 + 46) = v22 & 1;
            uint64_t v12 = "<>";
LABEL_23:
            google::MaybeAppend(a1, v12);
            return result;
          }
        }
      }
    }
    *(_OWORD *)a1 = v30;
    *(_OWORD *)(a1 + 16) = v32;
    *(_OWORD *)(a1 + 32) = v34;
    if ((google::ParseUnqualifiedName(a1) & 1) == 0)
    {
      long long v38 = *(_OWORD *)a1;
      long long v42 = *(_OWORD *)(a1 + 16);
      long long v45 = *(_OWORD *)(a1 + 32);
      long long v26 = *(unsigned __int8 **)a1;
      if (**(unsigned char **)a1 != 83
        || v26[1] != 116
        || (*(void *)a1 = v26 + 2, google::MaybeAppend(a1, "std::"), !google::ParseUnqualifiedName(a1)))
      {
        *(_OWORD *)a1 = v38;
        *(_OWORD *)(a1 + 16) = v42;
        *(_OWORD *)(a1 + 32) = v45;
        *(void *)&double result = google::ParseSpecialName((unsigned __int8 **)a1).n128_u64[0];
      }
    }
  }
  return result;
}

__n128 google::ParseName(uint64_t a1)
{
  long long v17 = *(_OWORD *)a1;
  *(_OWORD *)int v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20[12] = *(_OWORD *)(a1 + 28);
  __int16 v2 = *(_WORD *)(a1 + 44);
  __int16 v3 = *(_WORD *)(a1 + 46);
  uint64_t v4 = *(void *)a1;
  if (**(unsigned char **)a1 != 78) {
    goto LABEL_8;
  }
  uint64_t v5 = v4 + 1;
  *(void *)a1 = v4 + 1;
  *(_WORD *)(a1 + 44) = 0;
  int v6 = *(unsigned __int8 *)(v4 + 1);
  if (v6 == 114)
  {
    uint64_t v5 = v4 + 2;
    *(void *)a1 = v4 + 2;
    int v6 = *(unsigned __int8 *)(v4 + 2);
    if (v6 != 86) {
      goto LABEL_4;
    }
  }
  else if (v6 != 86)
  {
LABEL_4:
    if (v6 != 75) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)a1 = v5 + 1;
  int v12 = *(unsigned __int8 *)++v5;
  if (v12 == 75) {
LABEL_5:
  }
    *(void *)a1 = v5 + 1;
LABEL_6:
  google::ParsePrefix(a1);
  *(_WORD *)(a1 + 44) = v2;
  if (**(unsigned char **)a1 == 69)
  {
    ++*(void *)a1;
    return result;
  }
LABEL_8:
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v20;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)&v20[12];
  *(_WORD *)(a1 + 44) = v2;
  *(_WORD *)(a1 + 46) = v3;
  if ((google::ParseLocalName((long long *)a1) & 1) == 0)
  {
    long long v14 = *(_OWORD *)a1;
    long long v15 = *(_OWORD *)(a1 + 16);
    long long v16 = *(_OWORD *)(a1 + 32);
    if ((google::ParseUnqualifiedName(a1) & 1) == 0)
    {
      long long v18 = *(_OWORD *)a1;
      long long v21 = *(_OWORD *)(a1 + 16);
      long long v23 = *(_OWORD *)(a1 + 32);
      uint64_t v8 = *(void *)a1;
      if (**(unsigned char **)a1 != 83
        || *(unsigned char *)(v8 + 1) != 116
        || (*(void *)a1 = v8 + 2, google::MaybeAppend(a1, "std::"), !google::ParseUnqualifiedName(a1)))
      {
        *(_OWORD *)a1 = v18;
        *(_OWORD *)(a1 + 16) = v21;
        *(_OWORD *)(a1 + 32) = v23;
        if (!google::ParseSubstitution(a1)) {
          goto LABEL_22;
        }
      }
    }
    char v9 = *(unsigned char *)(a1 + 46);
    *(unsigned char *)(a1 + 46) = 0;
    if (**(unsigned char **)a1 != 73) {
      goto LABEL_22;
    }
    ++*(void *)a1;
    google::ParseTemplateArg((unsigned __int8 **)a1);
    if (!v10) {
      goto LABEL_22;
    }
    do
      google::ParseTemplateArg((unsigned __int8 **)a1);
    while ((v11 & 1) != 0);
    if (**(unsigned char **)a1 == 69)
    {
      ++*(void *)a1;
      *(unsigned char *)(a1 + 46) = v9 & 1;
      google::MaybeAppend(a1, "<>");
    }
    else
    {
LABEL_22:
      *(_OWORD *)a1 = v14;
      *(_OWORD *)(a1 + 16) = v15;
      *(_OWORD *)(a1 + 32) = v16;
      if ((google::ParseUnqualifiedName(a1) & 1) == 0)
      {
        long long v19 = *(_OWORD *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        __n128 v24 = *(__n128 *)(a1 + 32);
        uint64_t v13 = *(unsigned __int8 **)a1;
        if (**(unsigned char **)a1 != 83
          || v13[1] != 116
          || (*(void *)a1 = v13 + 2, google::MaybeAppend(a1, "std::"), (google::ParseUnqualifiedName(a1) & 1) == 0))
        {
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v22;
          __n128 result = v24;
          *(__n128 *)(a1 + 32) = v24;
        }
      }
    }
  }
  return result;
}

__n128 google::ParseSpecialName(unsigned __int8 **a1)
{
  long long v50 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v51 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v51[14] = *(_OWORD *)((char *)a1 + 30);
  char v2 = *((unsigned char *)a1 + 46);
  char v3 = *((unsigned char *)a1 + 47);
  uint64_t v4 = (uint64_t)*a1;
  if (**a1 == 84)
  {
    *a1 = (unsigned __int8 *)(v4 + 1);
    unsigned int v5 = *(unsigned __int8 *)(v4 + 1) - 73;
    BOOL v6 = v5 > 0xD;
    int v7 = (1 << v5) & 0x2C01;
    if (!v6 && v7 != 0)
    {
      *a1 = (unsigned __int8 *)(v4 + 2);
      if (google::ParseType(a1)) {
        return result;
      }
    }
  }
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  int v10 = *a1;
  if (**a1 == 84 && v10[1] == 99)
  {
    *a1 = v10 + 2;
    if (google::ParseCallOffset((uint64_t)a1))
    {
      if google::ParseCallOffset((uint64_t)a1) && (google::ParseEncoding(a1)) {
        return result;
      }
    }
  }
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  char v11 = *a1;
  if (**a1 != 71 || v11[1] != 86) {
    goto LABEL_34;
  }
  *a1 = v11 + 2;
  long long v52 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v56 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v56[12] = *(_OWORD *)((char *)a1 + 28);
  __int16 v12 = *((_WORD *)a1 + 22);
  __int16 v13 = *((_WORD *)a1 + 23);
  if (v11[2] == 78)
  {
    long long v14 = v11 + 3;
    *a1 = v11 + 3;
    *((_WORD *)a1 + 22) = 0;
    int v15 = v11[3];
    if (v15 == 114)
    {
      long long v14 = v11 + 4;
      *a1 = v11 + 4;
      int v15 = v11[4];
      if (v15 != 86) {
        goto LABEL_17;
      }
    }
    else if (v15 != 86)
    {
LABEL_17:
      if (v15 != 75) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    *a1 = v14 + 1;
    int v35 = *++v14;
    if (v35 != 75)
    {
LABEL_19:
      google::ParsePrefix((uint64_t)a1);
      *((_WORD *)a1 + 22) = v12;
      long long v16 = *a1;
      if (**a1 == 69)
      {
LABEL_61:
        *a1 = v16 + 1;
        return result;
      }
      goto LABEL_20;
    }
LABEL_18:
    *a1 = v14 + 1;
    goto LABEL_19;
  }
LABEL_20:
  *(_OWORD *)a1 = v52;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v56;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v56[12];
  *((_WORD *)a1 + 22) = v12;
  *((_WORD *)a1 + 23) = v13;
  if (google::ParseLocalName(a1)) {
    return result;
  }
  long long v44 = *(_OWORD *)a1;
  long long v46 = *((_OWORD *)a1 + 1);
  long long v48 = *((_OWORD *)a1 + 2);
  if (google::ParseUnqualifiedName((uint64_t)a1)) {
    goto LABEL_95;
  }
  long long v53 = *(_OWORD *)a1;
  long long v57 = *((_OWORD *)a1 + 1);
  long long v60 = *((_OWORD *)a1 + 2);
  long long v17 = *a1;
  if (**a1 == 83 && v17[1] == 116)
  {
    *a1 = v17 + 2;
    google::MaybeAppend((uint64_t)a1, "std::");
    if (google::ParseUnqualifiedName((uint64_t)a1)) {
      goto LABEL_95;
    }
  }
  *(_OWORD *)a1 = v53;
  *((_OWORD *)a1 + 1) = v57;
  *((_OWORD *)a1 + 2) = v60;
  if (google::ParseSubstitution((uint64_t)a1))
  {
LABEL_95:
    char v18 = *((unsigned char *)a1 + 46);
    *((unsigned char *)a1 + 46) = 0;
    if (**a1 == 73)
    {
      ++*a1;
      google::ParseTemplateArg(a1);
      if (v19)
      {
        do
          google::ParseTemplateArg(a1);
        while ((v20 & 1) != 0);
        long long v21 = *a1;
        if (**a1 == 69) {
          goto LABEL_75;
        }
      }
    }
  }
  *(_OWORD *)a1 = v44;
  *((_OWORD *)a1 + 1) = v46;
  *((_OWORD *)a1 + 2) = v48;
  if (google::ParseUnqualifiedName((uint64_t)a1)) {
    return result;
  }
  long long v22 = *a1;
  if (**a1 == 83 && v22[1] == 116)
  {
    *a1 = v22 + 2;
    google::MaybeAppend((uint64_t)a1, "std::");
    if (google::ParseUnqualifiedName((uint64_t)a1)) {
      return result;
    }
  }
LABEL_34:
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  if (**a1 == 84)
  {
    ++*a1;
    if (google::ParseCallOffset((uint64_t)a1))
    {
      if (google::ParseEncoding(a1)) {
        return result;
      }
    }
  }
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  long long v23 = *a1;
  if (**a1 == 84 && v23[1] == 67)
  {
    *a1 = v23 + 2;
    if (google::ParseType(a1))
    {
      __n128 v24 = *a1;
      int v25 = **a1;
      if (v25 == 110)
      {
        *a1 = v24 + 1;
        int v25 = *++v24;
      }
      if ((v25 - 48) <= 9)
      {
        uint64_t v26 = 0;
        do
          unsigned int v27 = v24[++v26] - 48;
        while (v27 < 0xA);
        if (v26)
        {
          *a1 = &v24[v26];
          if (v24[v26] == 95)
          {
            *a1 = &v24[v26 + 1];
            *((unsigned char *)a1 + 46) = 0;
            if (google::ParseType(a1))
            {
              *((unsigned char *)a1 + 46) = v2 & 1;
              return result;
            }
          }
        }
      }
    }
  }
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  long long v28 = *a1;
  if (**a1 == 84)
  {
    *a1 = v28 + 1;
    int v29 = v28[1];
    if (v29 == 74 || v29 == 70)
    {
      *a1 = v28 + 2;
      if (google::ParseType(a1)) {
        return result;
      }
    }
  }
  *(_OWORD *)a1 = v50;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
  *((unsigned char *)a1 + 46) = v2;
  *((unsigned char *)a1 + 47) = v3;
  long long v30 = *a1;
  if (**a1 != 71 || v30[1] != 82)
  {
LABEL_83:
    *(_OWORD *)a1 = v50;
    *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
    *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
    *((unsigned char *)a1 + 46) = v2;
    *((unsigned char *)a1 + 47) = v3;
    long long v41 = *a1;
    if (**a1 != 71 || v41[1] != 65 || (*a1 = v41 + 2, (google::ParseEncoding(a1) & 1) == 0))
    {
      *(_OWORD *)a1 = v50;
      *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
      *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
      *((unsigned char *)a1 + 46) = v2;
      *((unsigned char *)a1 + 47) = v3;
      long long v42 = *a1;
      if (**a1 != 84) {
        goto LABEL_92;
      }
      *a1 = v42 + 1;
      int v43 = v42[1];
      if (v43 != 118 && v43 != 104) {
        goto LABEL_92;
      }
      *a1 = v42 + 2;
      if (!google::ParseCallOffset((uint64_t)a1) || (google::ParseEncoding(a1) & 1) == 0)
      {
LABEL_92:
        *(_OWORD *)a1 = v50;
        *((_OWORD *)a1 + 1) = *(_OWORD *)v51;
        __n128 result = *(__n128 *)&v51[14];
        *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v51[14];
        *((unsigned char *)a1 + 46) = v2;
        *((unsigned char *)a1 + 47) = v3;
      }
    }
    return result;
  }
  *a1 = v30 + 2;
  long long v54 = *(_OWORD *)a1;
  *(_OWORD *)unint64_t v58 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v58[12] = *(_OWORD *)((char *)a1 + 28);
  __int16 v31 = *((_WORD *)a1 + 22);
  __int16 v32 = *((_WORD *)a1 + 23);
  if (v30[2] != 78) {
    goto LABEL_65;
  }
  long long v33 = v30 + 3;
  *a1 = v30 + 3;
  *((_WORD *)a1 + 22) = 0;
  int v34 = v30[3];
  if (v34 == 114)
  {
    long long v33 = v30 + 4;
    *a1 = v30 + 4;
    int v34 = v30[4];
    if (v34 != 86) {
      goto LABEL_58;
    }
  }
  else if (v34 != 86)
  {
LABEL_58:
    if (v34 != 75) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  *a1 = v33 + 1;
  int v39 = *++v33;
  if (v39 == 75) {
LABEL_59:
  }
    *a1 = v33 + 1;
LABEL_60:
  google::ParsePrefix((uint64_t)a1);
  *((_WORD *)a1 + 22) = v31;
  long long v16 = *a1;
  if (**a1 == 69) {
    goto LABEL_61;
  }
LABEL_65:
  *(_OWORD *)a1 = v54;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v58;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v58[12];
  *((_WORD *)a1 + 22) = v31;
  *((_WORD *)a1 + 23) = v32;
  if ((google::ParseLocalName(a1) & 1) == 0)
  {
    long long v45 = *(_OWORD *)a1;
    long long v47 = *((_OWORD *)a1 + 1);
    long long v49 = *((_OWORD *)a1 + 2);
    if (google::ParseUnqualifiedName((uint64_t)a1)) {
      goto LABEL_96;
    }
    long long v55 = *(_OWORD *)a1;
    long long v59 = *((_OWORD *)a1 + 1);
    long long v61 = *((_OWORD *)a1 + 2);
    long long v36 = *a1;
    if (**a1 == 83 && v36[1] == 116)
    {
      *a1 = v36 + 2;
      google::MaybeAppend((uint64_t)a1, "std::");
      if (google::ParseUnqualifiedName((uint64_t)a1)) {
        goto LABEL_96;
      }
    }
    *(_OWORD *)a1 = v55;
    *((_OWORD *)a1 + 1) = v59;
    *((_OWORD *)a1 + 2) = v61;
    if (google::ParseSubstitution((uint64_t)a1))
    {
LABEL_96:
      char v18 = *((unsigned char *)a1 + 46);
      *((unsigned char *)a1 + 46) = 0;
      if (**a1 == 73)
      {
        ++*a1;
        google::ParseTemplateArg(a1);
        if (v37)
        {
          do
            google::ParseTemplateArg(a1);
          while ((v38 & 1) != 0);
          long long v21 = *a1;
          if (**a1 == 69)
          {
LABEL_75:
            *a1 = v21 + 1;
            *((unsigned char *)a1 + 46) = v18 & 1;
            google::MaybeAppend((uint64_t)a1, "<>");
            return result;
          }
        }
      }
    }
    *(_OWORD *)a1 = v45;
    *((_OWORD *)a1 + 1) = v47;
    *((_OWORD *)a1 + 2) = v49;
    if ((google::ParseUnqualifiedName((uint64_t)a1) & 1) == 0)
    {
      long long v40 = *a1;
      if (**a1 != 83) {
        goto LABEL_83;
      }
      if (v40[1] != 116) {
        goto LABEL_83;
      }
      *a1 = v40 + 2;
      google::MaybeAppend((uint64_t)a1, "std::");
      if (!google::ParseUnqualifiedName((uint64_t)a1)) {
        goto LABEL_83;
      }
    }
  }
  return result;
}

uint64_t google::ParseLocalName(long long *a1)
{
  long long v13 = *a1;
  long long v14 = a1[1];
  long long v15 = a1[2];
  if (**(unsigned char **)a1 == 90)
  {
    ++*(void *)a1;
    google::ParseEncoding((uint64_t)a1);
    if (v2)
    {
      if (**(unsigned char **)a1 == 69)
      {
        ++*(void *)a1;
        google::MaybeAppend((uint64_t)a1, "::");
        if (google::ParseName(a1))
        {
          long long v16 = *a1;
          long long v17 = a1[1];
          long long v18 = a1[2];
          char v3 = *(unsigned char **)a1;
          if (**(unsigned char **)a1 != 95) {
            goto LABEL_26;
          }
          uint64_t v4 = v3 + 1;
          *(void *)a1 = v3 + 1;
          int v5 = v3[1];
          if (v5 == 110)
          {
            uint64_t v4 = v3 + 2;
            *(void *)a1 = v3 + 2;
            int v5 = v3[2];
          }
          if ((v5 - 48) > 9) {
            goto LABEL_26;
          }
          uint64_t v6 = 0;
          do
            unsigned int v7 = v4[++v6] - 48;
          while (v7 < 0xA);
          if (!v6) {
            goto LABEL_26;
          }
LABEL_24:
          *(void *)a1 = &v4[v6];
          return 1;
        }
      }
    }
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = v15;
  if (**(unsigned char **)a1 != 90
    || (++*(void *)a1, google::ParseEncoding((uint64_t)a1), !v8)
    || (char v9 = *(unsigned char **)a1, **(unsigned char **)a1 != 69)
    || v9[1] != 115)
  {
    uint64_t result = 0;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v15;
    return result;
  }
  *(void *)a1 = v9 + 2;
  long long v16 = *a1;
  long long v17 = a1[1];
  long long v18 = a1[2];
  if (v9[2] == 95)
  {
    uint64_t v4 = v9 + 3;
    *(void *)a1 = v9 + 3;
    int v10 = v9[3];
    if (v10 == 110)
    {
      uint64_t v4 = v9 + 4;
      *(void *)a1 = v9 + 4;
      int v10 = v9[4];
    }
    if ((v10 - 48) <= 9)
    {
      uint64_t v6 = 0;
      do
        unsigned int v11 = v4[++v6] - 48;
      while (v11 < 0xA);
      if (v6) {
        goto LABEL_24;
      }
    }
  }
LABEL_26:
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v18;
  return 1;
}

__n128 google::ParseTemplateArgs(uint64_t a1)
{
  long long v5 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v6[14] = *(_OWORD *)(a1 + 30);
  char v2 = *(unsigned char *)(a1 + 46);
  char v3 = *(unsigned char *)(a1 + 47);
  *(unsigned char *)(a1 + 46) = 0;
  if (**(unsigned char **)a1 != 73) {
    goto LABEL_6;
  }
  ++*(void *)a1;
  if (!google::ParseTemplateArg(a1)) {
    goto LABEL_6;
  }
  while ((google::ParseTemplateArg(a1) & 1) != 0)
    ;
  if (**(unsigned char **)a1 == 69)
  {
    ++*(void *)a1;
    *(unsigned char *)(a1 + 46) = v2 & 1;
    google::MaybeAppend(a1, "<>");
  }
  else
  {
LABEL_6:
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    __n128 result = *(__n128 *)&v6[14];
    *(_OWORD *)(a1 + 30) = *(_OWORD *)&v6[14];
    *(unsigned char *)(a1 + 46) = v2;
    *(unsigned char *)(a1 + 47) = v3;
  }
  return result;
}

void google::ParsePrefix(uint64_t a1)
{
  while (2)
  {
    char v2 = 0;
    LOWORD(v3) = *(_WORD *)(a1 + 44);
    while (1)
    {
      if ((__int16)v3 < 1 || !*(unsigned char *)(a1 + 46))
      {
LABEL_7:
        unsigned int v7 = *(unsigned __int8 **)a1;
        if (**(unsigned char **)a1 != 84) {
          goto LABEL_14;
        }
        goto LABEL_8;
      }
      uint64_t v4 = *(unsigned char **)(a1 + 8);
      if ((unint64_t)(v4 + 1) >= *(void *)(a1 + 24)
        || (*uint64_t v4 = 58,
            uint64_t v5 = *(void *)(a1 + 8),
            *(void *)(a1 + 8) = v5 + 1,
            (unint64_t)(v5 + 2) >= *(void *)(a1 + 24)))
      {
        *(unsigned char *)(a1 + 47) = 1;
        unsigned int v7 = *(unsigned __int8 **)a1;
        if (**(unsigned char **)a1 != 84) {
          goto LABEL_14;
        }
      }
      else
      {
        *(unsigned char *)(v5 + 1) = 58;
        uint64_t v6 = (unsigned char *)(*(void *)(a1 + 8) + 1);
        *(void *)(a1 + 8) = v6;
        if (*(unsigned char *)(a1 + 47)) {
          goto LABEL_7;
        }
        unsigned char *v6 = 0;
        unsigned int v7 = *(unsigned __int8 **)a1;
        if (**(unsigned char **)a1 != 84)
        {
LABEL_14:
          long long v54 = *(_OWORD *)a1;
          long long v58 = *(_OWORD *)(a1 + 16);
          long long v62 = *(_OWORD *)(a1 + 32);
          goto LABEL_23;
        }
      }
LABEL_8:
      int v8 = v7 + 1;
      if (v7[1] == 95)
      {
        *(void *)a1 = v7 + 2;
        if (!*(unsigned char *)(a1 + 46)) {
          goto LABEL_106;
        }
        char v9 = *(unsigned char **)(a1 + 8);
        if ((unint64_t)(v9 + 1) >= *(void *)(a1 + 24)) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
      long long v54 = *(_OWORD *)a1;
      long long v58 = *(_OWORD *)(a1 + 16);
      long long v62 = *(_OWORD *)(a1 + 32);
      *(void *)a1 = v8;
      int v11 = *v8;
      if (v11 == 110)
      {
        int v8 = v7 + 2;
        *(void *)a1 = v7 + 2;
        int v11 = v7[2];
      }
      if ((v11 - 48) <= 9)
      {
        uint64_t v12 = 0;
        do
          unsigned int v13 = v8[++v12] - 48;
        while (v13 < 0xA);
        if (v12)
        {
          *(void *)a1 = &v8[v12];
          if (v8[v12] == 95)
          {
            long long v14 = &v8[v12];
LABEL_57:
            *(void *)a1 = v14 + 1;
            google::MaybeAppend(a1, "?");
            goto LABEL_106;
          }
        }
      }
LABEL_23:
      *(_OWORD *)a1 = v54;
      *(_OWORD *)(a1 + 16) = v58;
      *(_OWORD *)(a1 + 32) = v62;
      long long v15 = *(unsigned __int8 **)a1;
      if (**(unsigned char **)a1 == 83)
      {
        long long v16 = v15 + 1;
        if (v15[1] == 95)
        {
          *(void *)a1 = v15 + 2;
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_106;
          }
          char v9 = *(unsigned char **)(a1 + 8);
          if ((unint64_t)(v9 + 1) >= *(void *)(a1 + 24))
          {
LABEL_27:
            *(unsigned char *)(a1 + 47) = 1;
            goto LABEL_106;
          }
LABEL_11:
          *char v9 = 63;
          int v10 = (unsigned char *)(*(void *)(a1 + 8) + 1);
          *(void *)(a1 + 8) = v10;
          if (!*(unsigned char *)(a1 + 47)) {
            *int v10 = 0;
          }
          goto LABEL_106;
        }
        long long v55 = *(_OWORD *)a1;
        long long v59 = *(_OWORD *)(a1 + 16);
        long long v63 = *(_OWORD *)(a1 + 32);
        *(void *)a1 = v16;
        int v27 = *v16;
        if (*v16)
        {
          uint64_t v28 = 0;
          while (1)
          {
            unsigned int v29 = v27 - 48;
            unsigned int v30 = v27 - 65;
            if (v29 >= 0xA && v30 > 0x19) {
              break;
            }
            int v27 = v15[v28++ + 2];
            if (!v27) {
              goto LABEL_56;
            }
          }
          if (!v28) {
            goto LABEL_29;
          }
LABEL_56:
          long long v14 = &v15[v28 + 1];
          *(void *)a1 = v14;
          if (*v14 == 95) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        long long v55 = *(_OWORD *)a1;
        long long v59 = *(_OWORD *)(a1 + 16);
        long long v63 = *(_OWORD *)(a1 + 32);
      }
LABEL_29:
      *(_OWORD *)a1 = v55;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = v63;
      long long v17 = *(unsigned __int8 **)a1;
      if (**(unsigned char **)a1 != 83) {
        break;
      }
      *(void *)a1 = v17 + 1;
      int v18 = v17[1] - 97;
      int v19 = &google::kSubstitutionList;
      switch(v18)
      {
        case 0:
          int v19 = off_264E82DA8;
          if (*(unsigned char *)(a1 + 46)) {
            goto LABEL_68;
          }
          goto LABEL_74;
        case 1:
          int v19 = off_264E82DB8;
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_74;
          }
          goto LABEL_68;
        case 3:
          int v19 = off_264E82DF8;
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_74;
          }
          goto LABEL_68;
        case 8:
          int v19 = off_264E82DD8;
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_74;
          }
          goto LABEL_68;
        case 14:
          int v19 = off_264E82DE8;
          goto LABEL_67;
        case 18:
          int v19 = off_264E82DC8;
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_74;
          }
          goto LABEL_68;
        case 19:
LABEL_67:
          if (*(unsigned char *)(a1 + 46))
          {
LABEL_68:
            __int16 v32 = *(unsigned char **)(a1 + 8);
            *(void *)(a1 + 32) = v32;
            *(_DWORD *)(a1 + 40) = 3;
            if ((unint64_t)(v32 + 1) >= *(void *)(a1 + 24)
              || (*__int16 v32 = 115,
                  uint64_t v33 = *(void *)(a1 + 8),
                  *(void *)(a1 + 8) = v33 + 1,
                  (unint64_t)(v33 + 2) >= *(void *)(a1 + 24))
              || (*(unsigned char *)(v33 + 1) = 116,
                  uint64_t v34 = *(void *)(a1 + 8),
                  *(void *)(a1 + 8) = v34 + 1,
                  (unint64_t)(v34 + 2) >= *(void *)(a1 + 24)))
            {
              *(unsigned char *)(a1 + 47) = 1;
            }
            else
            {
              *(unsigned char *)(v34 + 1) = 100;
              int v35 = (unsigned char *)(*(void *)(a1 + 8) + 1);
              *(void *)(a1 + 8) = v35;
              if (!*(unsigned char *)(a1 + 47)) {
                unsigned char *v35 = 0;
              }
            }
          }
LABEL_74:
          long long v36 = v19[1];
          if (!*v36 || !*(unsigned char *)(a1 + 46)) {
            goto LABEL_105;
          }
          int v37 = *(unsigned char **)(a1 + 8);
          if ((unint64_t)(v37 + 1) >= *(void *)(a1 + 24)
            || (*int v37 = 58,
                uint64_t v38 = *(void *)(a1 + 8),
                *(void *)(a1 + 8) = v38 + 1,
                (unint64_t)(v38 + 2) >= *(void *)(a1 + 24)))
          {
            *(unsigned char *)(a1 + 47) = 1;
          }
          else
          {
            *(unsigned char *)(v38 + 1) = 58;
            int v39 = (unsigned char *)(*(void *)(a1 + 8) + 1);
            *(void *)(a1 + 8) = v39;
            if (!*(unsigned char *)(a1 + 47)) {
              *int v39 = 0;
            }
          }
          if (!*(unsigned char *)(a1 + 46)) {
            goto LABEL_105;
          }
          int v40 = *v36;
          if (!*v36) {
            goto LABEL_105;
          }
          uint64_t v41 = 0;
          int v42 = 1;
          do
          {
            unsigned int v43 = v42;
            long long v44 = &v36[v41++];
            int v45 = v44[1];
            int v42 = v43 + 1;
          }
          while (v45);
          if ((int)v41 < 1) {
            goto LABEL_105;
          }
          long long v46 = *(unsigned char **)(a1 + 8);
          if (v40 == 60)
          {
            if (*(void *)(a1 + 16) < (unint64_t)v46 && *(v46 - 1) == 60)
            {
              if ((unint64_t)(v46 + 1) >= *(void *)(a1 + 24))
              {
                *(unsigned char *)(a1 + 47) = 1;
              }
              else
              {
                unsigned char *v46 = 32;
                long long v46 = (unsigned char *)(*(void *)(a1 + 8) + 1);
                *(void *)(a1 + 8) = v46;
                if (!*(unsigned char *)(a1 + 47))
                {
                  unsigned char *v46 = 0;
                  long long v46 = *(unsigned char **)(a1 + 8);
                }
              }
            }
            int v40 = *v36;
          }
          if (v40 == 95 || (v40 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            *(void *)(a1 + 32) = v46;
            *(_DWORD *)(a1 + 40) = v41;
          }
          uint64_t v47 = v43;
          break;
        default:
          goto LABEL_33;
      }
      do
      {
        if ((unint64_t)(v46 + 1) >= *(void *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 47) = 1;
          goto LABEL_105;
        }
        char v48 = *v36++;
        unsigned char *v46 = v48;
        long long v46 = (unsigned char *)(*(void *)(a1 + 8) + 1);
        *(void *)(a1 + 8) = v46;
        --v47;
      }
      while (v47);
      if (!*(unsigned char *)(a1 + 47)) {
        unsigned char *v46 = 0;
      }
LABEL_105:
      ++*(void *)a1;
LABEL_106:
      int v3 = *(__int16 *)(a1 + 44);
      char v2 = 1;
      if ((v3 & 0x80000000) == 0)
      {
        LOWORD(v3) = v3 + 1;
        *(_WORD *)(a1 + 44) = v3;
      }
    }
LABEL_33:
    *(_OWORD *)a1 = v55;
    *(_OWORD *)(a1 + 16) = v59;
    *(_OWORD *)(a1 + 32) = v63;
    if (google::ParseUnqualifiedName(a1)) {
      goto LABEL_106;
    }
    long long v56 = *(_OWORD *)a1;
    long long v60 = *(_OWORD *)(a1 + 16);
    long long v64 = *(_OWORD *)(a1 + 32);
    char v20 = *(unsigned __int8 **)a1;
    if (**(unsigned char **)a1 == 83 && v20[1] == 116)
    {
      *(void *)a1 = v20 + 2;
      if (*(unsigned char *)(a1 + 46))
      {
        long long v21 = *(unsigned char **)(a1 + 8);
        *(void *)(a1 + 32) = v21;
        *(_DWORD *)(a1 + 40) = 5;
        if ((unint64_t)(v21 + 1) >= *(void *)(a1 + 24)) {
          goto LABEL_52;
        }
        unsigned char *v21 = 115;
        uint64_t v22 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22 + 1;
        if ((unint64_t)(v22 + 2) >= *(void *)(a1 + 24)) {
          goto LABEL_52;
        }
        *(unsigned char *)(v22 + 1) = 116;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23 + 1;
        if ((unint64_t)(v23 + 2) >= *(void *)(a1 + 24)
          || (*(unsigned char *)(v23 + 1) = 100,
              uint64_t v24 = *(void *)(a1 + 8),
              *(void *)(a1 + 8) = v24 + 1,
              (unint64_t)(v24 + 2) >= *(void *)(a1 + 24))
          || (*(unsigned char *)(v24 + 1) = 58,
              uint64_t v25 = *(void *)(a1 + 8),
              *(void *)(a1 + 8) = v25 + 1,
              (unint64_t)(v25 + 2) >= *(void *)(a1 + 24)))
        {
LABEL_52:
          *(unsigned char *)(a1 + 47) = 1;
        }
        else
        {
          *(unsigned char *)(v25 + 1) = 58;
          uint64_t v26 = (unsigned char *)(*(void *)(a1 + 8) + 1);
          *(void *)(a1 + 8) = v26;
          if (!*(unsigned char *)(a1 + 47)) {
            unsigned char *v26 = 0;
          }
        }
      }
      if (google::ParseUnqualifiedName(a1)) {
        goto LABEL_106;
      }
    }
    *(_OWORD *)a1 = v56;
    *(_OWORD *)(a1 + 16) = v60;
    *(_OWORD *)(a1 + 32) = v64;
    if (*(__int16 *)(a1 + 44) >= 1)
    {
      if (*(unsigned char *)(a1 + 46))
      {
        long long v49 = (unsigned char *)(*(void *)(a1 + 8) - 2);
        if (*(void *)(a1 + 16) <= (unint64_t)v49)
        {
          *(void *)(a1 + 8) = v49;
          *long long v49 = 0;
        }
      }
    }
    if (v2)
    {
      long long v57 = *(_OWORD *)a1;
      *(_OWORD *)long long v61 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v61[14] = *(_OWORD *)(a1 + 30);
      char v50 = *(unsigned char *)(a1 + 46);
      char v51 = *(unsigned char *)(a1 + 47);
      *(unsigned char *)(a1 + 46) = 0;
      if (**(unsigned char **)a1 == 73)
      {
        ++*(void *)a1;
        google::ParseTemplateArg((unsigned __int8 **)a1);
        if (v52)
        {
          do
            google::ParseTemplateArg((unsigned __int8 **)a1);
          while ((v53 & 1) != 0);
          if (**(unsigned char **)a1 == 69)
          {
            ++*(void *)a1;
            *(unsigned char *)(a1 + 46) = v50 & 1;
            google::MaybeAppend(a1, "<>");
            continue;
          }
        }
      }
      *(_OWORD *)a1 = v57;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 30) = *(_OWORD *)&v61[14];
      *(unsigned char *)(a1 + 46) = v50;
      *(unsigned char *)(a1 + 47) = v51;
    }
    break;
  }
}

uint64_t google::ParseTemplateParam(uint64_t a1)
{
  std::chrono::system_clock::time_point v1 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 84)
  {
    char v2 = v1 + 1;
    if (v1[1] == 95)
    {
      uint64_t v3 = (uint64_t)(v1 + 2);
LABEL_4:
      *(void *)a1 = v3;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    long long v9 = *(_OWORD *)(a1 + 16);
    long long v10 = *(_OWORD *)(a1 + 32);
    *(void *)a1 = v2;
    int v5 = *v2;
    if (v5 == 110)
    {
      char v2 = v1 + 2;
      *(void *)a1 = v1 + 2;
      int v5 = v1[2];
    }
    if ((v5 - 48) <= 9)
    {
      uint64_t v6 = 0;
      do
        unsigned int v7 = v2[++v6] - 48;
      while (v7 < 0xA);
      if (v6)
      {
        *(void *)a1 = &v2[v6];
        if (v2[v6] == 95)
        {
          uint64_t v3 = (uint64_t)&v2[v6 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    long long v8 = *(_OWORD *)a1;
    long long v9 = *(_OWORD *)(a1 + 16);
    long long v10 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  return 0;
}

uint64_t google::ParseSubstitution(uint64_t a1)
{
  char v2 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 83)
  {
    uint64_t v3 = v2 + 1;
    if (v2[1] == 95)
    {
      uint64_t v4 = v2 + 2;
LABEL_4:
      *(void *)a1 = v4;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    long long v15 = *(_OWORD *)a1;
    long long v16 = *(_OWORD *)(a1 + 16);
    long long v17 = *(_OWORD *)(a1 + 32);
    *(void *)a1 = v3;
    int v8 = *v3;
    if (*v3)
    {
      uint64_t v9 = 0;
      while (1)
      {
        unsigned int v10 = v8 - 48;
        unsigned int v11 = v8 - 65;
        if (v10 >= 0xA && v11 > 0x19) {
          break;
        }
        int v8 = v2[v9++ + 2];
        if (!v8) {
          goto LABEL_19;
        }
      }
      if (!v9) {
        goto LABEL_6;
      }
LABEL_19:
      unsigned int v13 = &v2[v9 + 1];
      *(void *)a1 = v13;
      if (*v13 == 95)
      {
        uint64_t v4 = v13 + 1;
        goto LABEL_4;
      }
    }
  }
  else
  {
    long long v15 = *(_OWORD *)a1;
    long long v16 = *(_OWORD *)(a1 + 16);
    long long v17 = *(_OWORD *)(a1 + 32);
  }
LABEL_6:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  uint64_t v6 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 83)
  {
    *(void *)a1 = v6 + 1;
    unsigned int v7 = &google::kSubstitutionList;
    switch(v6[1])
    {
      case 'a':
        unsigned int v7 = off_264E82DA8;
        break;
      case 'b':
        unsigned int v7 = off_264E82DB8;
        break;
      case 'd':
        unsigned int v7 = off_264E82DF8;
        break;
      case 'i':
        unsigned int v7 = off_264E82DD8;
        break;
      case 'o':
        unsigned int v7 = off_264E82DE8;
        break;
      case 's':
        unsigned int v7 = off_264E82DC8;
        break;
      case 't':
        break;
      default:
        goto LABEL_9;
    }
    google::MaybeAppend(a1, "std");
    long long v14 = v7[1];
    if (*v14)
    {
      google::MaybeAppend(a1, "::");
      google::MaybeAppend(a1, v14);
    }
    ++*(void *)a1;
    return 1;
  }
  else
  {
LABEL_9:
    uint64_t result = 0;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
  }
  return result;
}

__n128 google::ParseTemplateArg(unsigned __int8 **a1)
{
  long long v6 = *(_OWORD *)a1;
  long long v7 = *((_OWORD *)a1 + 1);
  __n128 v8 = *((__n128 *)a1 + 2);
  if (**a1 - 73 <= 1)
  {
    ++*a1;
    while ((google::ParseTemplateArg(a1) & 1) != 0)
      ;
    uint64_t v3 = *a1;
    if (**a1 == 69) {
      goto LABEL_5;
    }
  }
  *(_OWORD *)a1 = v6;
  *((_OWORD *)a1 + 1) = v7;
  *((__n128 *)a1 + 2) = v8;
  if ((google::ParseType(a1) & 1) == 0)
  {
    result.n128_u64[0] = google::ParseExprPrimary(a1).n128_u64[0];
    if ((v4 & 1) == 0)
    {
      *(_OWORD *)a1 = v6;
      *((_OWORD *)a1 + 1) = v7;
      *((__n128 *)a1 + 2) = v8;
      if (**a1 == 88)
      {
        ++*a1;
        result.n128_u64[0] = google::ParseExpression((uint64_t)a1).n128_u64[0];
        if (v5)
        {
          uint64_t v3 = *a1;
          if (**a1 == 69)
          {
LABEL_5:
            *a1 = v3 + 1;
            return result;
          }
        }
      }
      *(_OWORD *)a1 = v6;
      *((_OWORD *)a1 + 1) = v7;
      __n128 result = v8;
      *((__n128 *)a1 + 2) = v8;
    }
  }
  return result;
}

uint64_t google::ParseType(unsigned __int8 **a1)
{
  long long v27 = *(_OWORD *)a1;
  long long v28 = *((_OWORD *)a1 + 1);
  long long v29 = *((_OWORD *)a1 + 2);
  uint64_t v2 = (uint64_t)*a1;
  int v3 = **a1;
  if (v3 == 114)
  {
    *a1 = (unsigned __int8 *)(v2 + 1);
    int v4 = *(unsigned __int8 *)++v2;
    if (v4 != 86) {
      goto LABEL_3;
    }
LABEL_6:
    *a1 = (unsigned __int8 *)(v2 + 1);
    int v5 = *(unsigned __int8 *)++v2;
    if (v5 != 75) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v4 = **a1;
  if (v3 == 86) {
    goto LABEL_6;
  }
LABEL_3:
  int v5 = v4;
  if (v4 == 75) {
LABEL_7:
  }
    *a1 = (unsigned __int8 *)(v2 + 1);
LABEL_8:
  int v6 = v3 == 114;
  if (v4 == 86) {
    ++v6;
  }
  if (v5 == 75) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  if (v6 != v7 && (google::ParseType(a1) & 1) != 0) {
    return 1;
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  unsigned int v8 = **a1 - 67;
  BOOL v9 = v8 > 0xF;
  int v10 = (1 << v8) & 0xB011;
  if (!v9 && v10 != 0)
  {
    ++*a1;
    if (google::ParseType(a1)) {
      return 1;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  uint64_t v12 = (uint64_t)*a1;
  if (**a1 == 68 && *(unsigned char *)(v12 + 1) == 112)
  {
    *a1 = (unsigned __int8 *)(v12 + 2);
    if (google::ParseType(a1)) {
      return 1;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  uint64_t v13 = (uint64_t)*a1;
  if (**a1 == 68)
  {
    *a1 = (unsigned __int8 *)(v13 + 1);
    if ((*(unsigned __int8 *)(v13 + 1) | 0x20) == 0x74)
    {
      *a1 = (unsigned __int8 *)(v13 + 2);
      google::ParseExpression((uint64_t)a1);
      if (v14)
      {
        long long v15 = *a1;
        if (**a1 == 69) {
          goto LABEL_63;
        }
      }
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  if (**a1 == 85)
  {
    ++*a1;
    if (google::ParseSourceName(a1))
    {
      if (google::ParseType(a1)) {
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  int v16 = **a1;
  char v17 = v16 - 97;
  if (v16 - 97) <= 0x19 && ((0x3EC7BFFu >> v17))
  {
    google::MaybeAppend((uint64_t)a1, *((char **)off_264E83298[v17] + 1));
    long long v15 = *a1;
    goto LABEL_63;
  }
  if (v16 == 117)
  {
    ++*a1;
    if (google::ParseSourceName(a1)) {
      return 1;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  int v18 = *a1;
  if (**a1 == 70)
  {
    *a1 = v18 + 1;
    if (v18[1] == 89) {
      *a1 = v18 + 2;
    }
    char v19 = *((unsigned char *)a1 + 46);
    *((unsigned char *)a1 + 46) = 0;
    if (google::ParseType(a1))
    {
      while ((google::ParseType(a1) & 1) != 0)
        ;
      *((unsigned char *)a1 + 46) = v19 & 1;
      google::MaybeAppend((uint64_t)a1, "()");
      long long v15 = *a1;
      if (**a1 == 69)
      {
LABEL_63:
        *a1 = v15 + 1;
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  if (google::ParseName(a1)) {
    return 1;
  }
  long long v30 = *(_OWORD *)a1;
  long long v32 = *((_OWORD *)a1 + 1);
  long long v34 = *((_OWORD *)a1 + 2);
  char v20 = *a1;
  if (**a1 == 65)
  {
    long long v21 = v20 + 1;
    *a1 = v20 + 1;
    int v22 = v20[1];
    if (v22 == 110)
    {
      long long v21 = v20 + 2;
      *a1 = v20 + 2;
      int v22 = v20[2];
    }
    if ((v22 - 48) <= 9)
    {
      uint64_t v23 = 0;
      do
        unsigned int v24 = v21[++v23] - 48;
      while (v24 < 0xA);
      if (v23)
      {
        *a1 = &v21[v23];
        if (v21[v23] == 95)
        {
          *a1 = &v21[v23 + 1];
          if (google::ParseType(a1)) {
            return 1;
          }
        }
      }
    }
  }
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v32;
  *((_OWORD *)a1 + 2) = v34;
  if (**a1 == 65)
  {
    ++*a1;
    google::ParseExpression((uint64_t)a1);
    if (**a1 == 95)
    {
      ++*a1;
      if (google::ParseType(a1)) {
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v32;
  *((_OWORD *)a1 + 2) = v34;
  long long v31 = *(_OWORD *)a1;
  long long v33 = *((_OWORD *)a1 + 1);
  long long v35 = *((_OWORD *)a1 + 2);
  if (**a1 == 77)
  {
    ++*a1;
    if (google::ParseType(a1))
    {
      if (google::ParseType(a1)) {
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v31;
  *((_OWORD *)a1 + 1) = v33;
  *((_OWORD *)a1 + 2) = v35;
  if (google::ParseSubstitution((uint64_t)a1)) {
    return 1;
  }
  if (google::ParseTemplateTemplateParam((uint64_t)a1))
  {
    google::ParseTemplateArgs((uint64_t)a1);
    if (v25) {
      return 1;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;

  return google::ParseTemplateParam((uint64_t)a1);
}

__n128 google::ParseExprPrimary(unsigned __int8 **a1)
{
  long long v16 = *(_OWORD *)a1;
  long long v17 = *((_OWORD *)a1 + 1);
  __n128 v18 = *((__n128 *)a1 + 2);
  if (**a1 == 76)
  {
    ++*a1;
    if (google::ParseType(a1))
    {
      uint64_t v3 = (uint64_t)*a1;
      int v4 = **a1;
      if (v4 == 110)
      {
        *a1 = (unsigned __int8 *)(v3 + 1);
        int v4 = *(unsigned __int8 *)++v3;
      }
      if ((v4 - 48) <= 9)
      {
        uint64_t v5 = 0;
        do
          unsigned int v6 = *(unsigned __int8 *)(v3 + v5++ + 1) - 48;
        while (v6 < 0xA);
        if (v5)
        {
          *a1 = (unsigned __int8 *)(v3 + v5);
          if (*(unsigned char *)(v3 + v5) == 69)
          {
            int v7 = (unsigned __int8 *)(v3 + v5);
LABEL_36:
            *a1 = v7 + 1;
            return result;
          }
        }
      }
    }
  }
  *(_OWORD *)a1 = v16;
  *((_OWORD *)a1 + 1) = v17;
  *((__n128 *)a1 + 2) = v18;
  if (**a1 == 76)
  {
    ++*a1;
    if (google::ParseType(a1))
    {
      int v8 = **a1;
      if (**a1)
      {
        int v7 = *a1;
        do
        {
          unsigned int v9 = v8 - 48;
          unsigned int v10 = v8 - 97;
          if (v9 >= 0xA && v10 > 5) {
            break;
          }
          int v12 = *++v7;
          int v8 = v12;
        }
        while (v12);
        if (v7 != *a1)
        {
          *a1 = v7;
          if (*v7 == 69) {
            goto LABEL_36;
          }
        }
      }
    }
  }
  *(_OWORD *)a1 = v16;
  *((_OWORD *)a1 + 1) = v17;
  *((__n128 *)a1 + 2) = v18;
  uint64_t v13 = *a1;
  if (**a1 == 76)
  {
    *a1 = v13 + 1;
    if (v13[1] == 95 && v13[2] == 90)
    {
      *a1 = v13 + 3;
      long long v19 = *(_OWORD *)a1;
      long long v20 = *((_OWORD *)a1 + 1);
      long long v21 = *((_OWORD *)a1 + 2);
      if (google::ParseName(a1)
        && (char v14 = *((unsigned char *)a1 + 46), *((unsigned char *)a1 + 46) = 0, google::ParseType(a1)))
      {
        while ((google::ParseType(a1) & 1) != 0)
          ;
        *((unsigned char *)a1 + 46) = v14 & 1;
        google::MaybeAppend((uint64_t)a1, "()");
      }
      else
      {
        *(_OWORD *)a1 = v19;
        *((_OWORD *)a1 + 1) = v20;
        *((_OWORD *)a1 + 2) = v21;
        if (!google::ParseName(a1) && !google::ParseSpecialName(a1)) {
          goto LABEL_32;
        }
      }
      int v7 = *a1;
      if (**a1 == 69) {
        goto LABEL_36;
      }
    }
  }
LABEL_32:
  *(_OWORD *)a1 = v16;
  *((_OWORD *)a1 + 1) = v17;
  *((__n128 *)a1 + 2) = v18;
  uint64_t v15 = (uint64_t)*a1;
  if (**a1 == 76 && *(unsigned char *)(v15 + 1) == 90)
  {
    *a1 = (unsigned __int8 *)(v15 + 2);
    if (google::ParseEncoding(a1))
    {
      int v7 = *a1;
      if (**a1 == 69) {
        goto LABEL_36;
      }
    }
  }
  *(_OWORD *)a1 = v16;
  *((_OWORD *)a1 + 1) = v17;
  __n128 result = v18;
  *((__n128 *)a1 + 2) = v18;
  return result;
}

__n128 google::ParseExpression(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  if (**(unsigned char **)a1 == 84)
  {
    uint64_t v3 = v2 + 1;
    if (v2[1] == 95)
    {
      uint64_t v4 = (uint64_t)(v2 + 2);
LABEL_4:
      *(void *)a1 = v4;
      google::MaybeAppend(a1, "?");
      return result;
    }
    long long v14 = *(_OWORD *)a1;
    long long v16 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)(a1 + 32);
    *(void *)a1 = v3;
    int v6 = *v3;
    if (v6 == 110)
    {
      uint64_t v3 = v2 + 2;
      *(void *)a1 = v2 + 2;
      int v6 = v2[2];
    }
    if ((v6 - 48) <= 9)
    {
      uint64_t v7 = 0;
      do
        unsigned int v8 = v3[++v7] - 48;
      while (v8 < 0xA);
      if (v7)
      {
        *(void *)a1 = &v3[v7];
        if (v3[v7] == 95)
        {
          uint64_t v4 = (uint64_t)&v3[v7 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    long long v14 = *(_OWORD *)a1;
    long long v16 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v18;
  result.n128_u64[0] = google::ParseExprPrimary((unsigned __int8 **)a1).n128_u64[0];
  if ((v9 & 1) == 0)
  {
    long long v15 = *(_OWORD *)a1;
    long long v17 = *(_OWORD *)(a1 + 16);
    __n128 v19 = *(__n128 *)(a1 + 32);
    if (!google::ParseOperatorName((unsigned __int8 **)a1)
      || !google::ParseExpression(a1)
      || !google::ParseExpression(a1)
      || (google::ParseExpression(a1) & 1) == 0)
    {
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v17;
      *(__n128 *)(a1 + 32) = v19;
      if (!google::ParseOperatorName((unsigned __int8 **)a1)
        || !google::ParseExpression(a1)
        || (google::ParseExpression(a1) & 1) == 0)
      {
        *(_OWORD *)a1 = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(__n128 *)(a1 + 32) = v19;
        if (!google::ParseOperatorName((unsigned __int8 **)a1) || (google::ParseExpression(a1) & 1) == 0)
        {
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v17;
          *(__n128 *)(a1 + 32) = v19;
          unsigned int v10 = *(unsigned __int8 **)a1;
          if (**(unsigned char **)a1 != 115 || v10[1] != 116 || (*(void *)a1 = v10 + 2, (google::ParseType(a1) & 1) == 0))
          {
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v17;
            *(__n128 *)(a1 + 32) = v19;
            unsigned int v11 = *(unsigned __int8 **)a1;
            if (**(unsigned char **)a1 != 115
              || v11[1] != 114
              || (*(void *)a1 = v11 + 2, !google::ParseType(a1))
              || !google::ParseUnqualifiedName(a1)
              || (result.n128_u64[0] = google::ParseTemplateArgs(a1).n128_u64[0], (v12 & 1) == 0))
            {
              *(_OWORD *)a1 = v15;
              *(_OWORD *)(a1 + 16) = v17;
              *(__n128 *)(a1 + 32) = v19;
              uint64_t v13 = *(unsigned __int8 **)a1;
              if (**(unsigned char **)a1 != 115
                || v13[1] != 114
                || (*(void *)a1 = v13 + 2, !google::ParseType(a1))
                || (google::ParseUnqualifiedName(a1) & 1) == 0)
              {
                *(_OWORD *)a1 = v15;
                *(_OWORD *)(a1 + 16) = v17;
                __n128 result = v19;
                *(__n128 *)(a1 + 32) = v19;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t google::ParseSourceName(unsigned __int8 **a1)
{
  long long v22 = *(_OWORD *)a1;
  long long v23 = *((_OWORD *)a1 + 1);
  long long v24 = *((_OWORD *)a1 + 2);
  uint64_t v2 = *a1;
  int v3 = **a1;
  if (v3 == 110)
  {
    *a1 = v2 + 1;
    int v3 = v2[1];
    int v4 = -1;
    ++v2;
    if ((v3 - 48) > 9) {
      goto LABEL_15;
    }
  }
  else
  {
    int v4 = 1;
    if ((v3 - 48) > 9) {
      goto LABEL_15;
    }
  }
  int v5 = 0;
  int v6 = v2;
  do
  {
    int v5 = v3 + 10 * v5 - 48;
    int v7 = *++v6;
    int v3 = v7;
  }
  while ((v7 - 48) < 0xA);
  if (v6 == v2) {
    goto LABEL_15;
  }
  *a1 = v6;
  unint64_t v8 = (v5 * v4);
  if (v8 == -1) {
    goto LABEL_15;
  }
  if ((int)v8 >= 1)
  {
    int v9 = *v6;
    if (*v6)
    {
      uint64_t v10 = 1;
      while (v8 != v10)
      {
        if (!v6[v10++])
        {
          if (v10 - 1 < v8) {
            goto LABEL_15;
          }
          break;
        }
      }
      if ((int)v8 < 12) {
        goto LABEL_48;
      }
      uint64_t v13 = 0;
      int v14 = *v6;
      while (1)
      {
        int v15 = google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v13];
        if (!google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v13] || v14 != v15) {
          break;
        }
        uint64_t v17 = v13 + 1;
        int v14 = v6[++v13];
        if (!v14)
        {
          int v15 = google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v17];
          break;
        }
      }
      if (v15)
      {
LABEL_48:
        if (*((unsigned char *)a1 + 46))
        {
          if (v9 == 60)
          {
            long long v18 = a1[1];
            if (a1[2] < v18 && *(v18 - 1) == 60)
            {
              if (v18 + 1 >= a1[3])
              {
                *((unsigned char *)a1 + 47) = 1;
              }
              else
              {
                *long long v18 = 32;
                __n128 v19 = a1[1] + 1;
                a1[1] = v19;
                if (!*((unsigned char *)a1 + 47)) {
                  *__n128 v19 = 0;
                }
              }
            }
            int v9 = *v6;
          }
          long long v20 = a1[1];
          if (v9 == 95 || (v9 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            a1[4] = v20;
            *((_DWORD *)a1 + 10) = v8;
          }
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (v20 + 1 >= a1[3])
            {
              *((unsigned char *)a1 + 47) = 1;
              goto LABEL_45;
            }
            unsigned __int8 *v20 = v6[i];
            long long v20 = a1[1] + 1;
            a1[1] = v20;
          }
          if (!*((unsigned char *)a1 + 47)) {
            unsigned __int8 *v20 = 0;
          }
        }
      }
      else
      {
        google::MaybeAppend((uint64_t)a1, "(anonymous namespace)");
      }
      goto LABEL_45;
    }
LABEL_15:
    uint64_t result = 0;
    *(_OWORD *)a1 = v22;
    *((_OWORD *)a1 + 1) = v23;
    *((_OWORD *)a1 + 2) = v24;
    return result;
  }
LABEL_45:
  *a1 += (int)v8;
  return 1;
}

uint64_t google::ParseTemplateTemplateParam(uint64_t a1)
{
  std::chrono::system_clock::time_point v1 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 84)
  {
    uint64_t v2 = v1 + 1;
    if (v1[1] == 95)
    {
      uint64_t v3 = (uint64_t)(v1 + 2);
LABEL_4:
      *(void *)a1 = v3;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    long long v9 = *(_OWORD *)(a1 + 16);
    long long v10 = *(_OWORD *)(a1 + 32);
    *(void *)a1 = v2;
    int v5 = *v2;
    if (v5 == 110)
    {
      uint64_t v2 = v1 + 2;
      *(void *)a1 = v1 + 2;
      int v5 = v1[2];
    }
    if ((v5 - 48) <= 9)
    {
      uint64_t v6 = 0;
      do
        unsigned int v7 = v2[++v6] - 48;
      while (v7 < 0xA);
      if (v6)
      {
        *(void *)a1 = &v2[v6];
        if (v2[v6] == 95)
        {
          uint64_t v3 = (uint64_t)&v2[v6 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    long long v8 = *(_OWORD *)a1;
    long long v9 = *(_OWORD *)(a1 + 16);
    long long v10 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;

  return google::ParseSubstitution(a1);
}

uint64_t google::ParseOperatorName(unsigned __int8 **a1)
{
  std::chrono::system_clock::time_point v1 = *a1;
  if (!**a1 || !v1[1]) {
    return 0;
  }
  long long v13 = *(_OWORD *)a1;
  *(_OWORD *)int v14 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v14[12] = *(_OWORD *)((char *)a1 + 28);
  __int16 v3 = *((_WORD *)a1 + 22);
  __int16 v4 = *((_WORD *)a1 + 23);
  if (**a1 == 99 && v1[1] == 118)
  {
    *a1 = v1 + 2;
    google::MaybeAppend((uint64_t)a1, "operator ");
    *((_WORD *)a1 + 22) = 0;
    if (google::ParseType(a1))
    {
      *((_WORD *)a1 + 22) = v3;
      return 1;
    }
  }
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v14;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v14[12];
  *((_WORD *)a1 + 22) = v3;
  *((_WORD *)a1 + 23) = v4;
  uint64_t v6 = *a1;
  if (**a1 == 118)
  {
    *a1 = v6 + 1;
    if (v6[1] - 48 <= 9)
    {
      *a1 = v6 + 2;
      if (google::ParseSourceName(a1)) {
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v14;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v14[12];
  *((_WORD *)a1 + 22) = v3;
  *((_WORD *)a1 + 23) = v4;
  int v7 = **a1;
  if ((v7 - 97) > 0x19) {
    return 0;
  }
  int v8 = (*a1)[1];
  if ((v8 & 0xFFFFFFDF) - 65 > 0x19) {
    return 0;
  }
  long long v9 = "nw";
  long long v10 = off_264E82F88;
  while (v7 != *(unsigned __int8 *)v9 || v8 != *((unsigned __int8 *)v9 + 1))
  {
    unsigned int v11 = *v10;
    v10 += 2;
    long long v9 = v11;
    if (!v11) {
      return 0;
    }
  }
  google::MaybeAppend((uint64_t)a1, "operator");
  char v12 = *(v10 - 1);
  if (*v12 - 97 <= 0x19) {
    google::MaybeAppend((uint64_t)a1, " ");
  }
  google::MaybeAppend((uint64_t)a1, v12);
  *a1 += 2;
  return 1;
}

uint64_t google::ParseUnqualifiedName(uint64_t a1)
{
  if (google::ParseOperatorName((unsigned __int8 **)a1)) {
    return 1;
  }
  long long v31 = *(_OWORD *)a1;
  long long v34 = *(_OWORD *)(a1 + 16);
  long long v37 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(unsigned __int8 **)a1;
  if (**(unsigned char **)a1 == 67)
  {
    *(void *)a1 = v2 + 1;
    if (v2[1] - 49 <= 2)
    {
      *(void *)a1 = v2 + 2;
      uint64_t v3 = *(unsigned int *)(a1 + 40);
      if ((int)v3 < 1 || !*(unsigned char *)(a1 + 46)) {
        return 1;
      }
      __int16 v4 = *(char **)(a1 + 32);
      int v5 = *v4;
      if (v5 == 60)
      {
        uint64_t v6 = *(unsigned char **)(a1 + 8);
        if (*(void *)(a1 + 16) < (unint64_t)v6 && *(v6 - 1) == 60)
        {
          if ((unint64_t)(v6 + 1) >= *(void *)(a1 + 24))
          {
            *(unsigned char *)(a1 + 47) = 1;
          }
          else
          {
            unsigned char *v6 = 32;
            int v7 = (unsigned char *)(*(void *)(a1 + 8) + 1);
            *(void *)(a1 + 8) = v7;
            if (!*(unsigned char *)(a1 + 47)) {
              unsigned char *v7 = 0;
            }
          }
        }
        int v5 = *v4;
      }
      long long v23 = *(unsigned char **)(a1 + 8);
      if (v5 == 95 || (v5 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        *(void *)(a1 + 32) = v23;
        *(_DWORD *)(a1 + 40) = v3;
      }
      while ((unint64_t)(v23 + 1) < *(void *)(a1 + 24))
      {
        char v25 = *v4++;
        *long long v23 = v25;
        long long v23 = (unsigned char *)(*(void *)(a1 + 8) + 1);
        *(void *)(a1 + 8) = v23;
        if (!--v3)
        {
          if (!*(unsigned char *)(a1 + 47)) {
            *long long v23 = 0;
          }
          return 1;
        }
      }
      goto LABEL_66;
    }
  }
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v34;
  *(_OWORD *)(a1 + 32) = v37;
  int v8 = *(unsigned __int8 **)a1;
  if (**(unsigned char **)a1 == 68)
  {
    *(void *)a1 = v8 + 1;
    if (v8[1] - 48 <= 2)
    {
      *(void *)a1 = v8 + 2;
      long long v9 = *(char **)(a1 + 32);
      uint64_t v10 = *(unsigned int *)(a1 + 40);
      google::MaybeAppend(a1, "~");
      if ((int)v10 < 1 || !*(unsigned char *)(a1 + 46)) {
        return 1;
      }
      int v11 = *v9;
      if (v11 == 60)
      {
        char v12 = *(unsigned char **)(a1 + 8);
        if (*(void *)(a1 + 16) < (unint64_t)v12 && *(v12 - 1) == 60)
        {
          if ((unint64_t)(v12 + 1) >= *(void *)(a1 + 24))
          {
            *(unsigned char *)(a1 + 47) = 1;
          }
          else
          {
            unsigned char *v12 = 32;
            long long v13 = (unsigned char *)(*(void *)(a1 + 8) + 1);
            *(void *)(a1 + 8) = v13;
            if (!*(unsigned char *)(a1 + 47)) {
              unsigned char *v13 = 0;
            }
          }
        }
        int v11 = *v9;
      }
      uint64_t v26 = *(unsigned char **)(a1 + 8);
      if (v11 == 95 || (v11 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        *(void *)(a1 + 32) = v26;
        *(_DWORD *)(a1 + 40) = v10;
      }
      while ((unint64_t)(v26 + 1) < *(void *)(a1 + 24))
      {
        char v27 = *v9++;
        unsigned char *v26 = v27;
        uint64_t v26 = (unsigned char *)(*(void *)(a1 + 8) + 1);
        *(void *)(a1 + 8) = v26;
        if (!--v10)
        {
          if (!*(unsigned char *)(a1 + 47)) {
            unsigned char *v26 = 0;
          }
          return 1;
        }
      }
LABEL_66:
      *(unsigned char *)(a1 + 47) = 1;
      return 1;
    }
  }
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v34;
  *(_OWORD *)(a1 + 32) = v37;
  if (!google::ParseSourceName((unsigned __int8 **)a1))
  {
    long long v28 = *(_OWORD *)a1;
    long long v29 = *(_OWORD *)(a1 + 16);
    long long v30 = *(_OWORD *)(a1 + 32);
    if (**(unsigned char **)a1 != 76 || (++*(void *)a1, !google::ParseSourceName((unsigned __int8 **)a1)))
    {
      uint64_t result = 0;
      *(_OWORD *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v29;
      *(_OWORD *)(a1 + 32) = v30;
      return result;
    }
    long long v33 = *(_OWORD *)a1;
    long long v36 = *(_OWORD *)(a1 + 16);
    long long v38 = *(_OWORD *)(a1 + 32);
    long long v16 = *(unsigned __int8 **)a1;
    if (**(unsigned char **)a1 != 95) {
      goto LABEL_39;
    }
    uint64_t v17 = v16 + 1;
    *(void *)a1 = v16 + 1;
    int v18 = v16[1];
    if (v18 == 110)
    {
      uint64_t v17 = v16 + 2;
      *(void *)a1 = v16 + 2;
      int v18 = v16[2];
    }
    if ((v18 - 48) > 9) {
      goto LABEL_39;
    }
    uint64_t v19 = 0;
    do
      unsigned int v20 = v17[++v19] - 48;
    while (v20 < 0xA);
    if (v19)
    {
      long long v21 = &v17[v19];
      *(void *)a1 = v21;
    }
    else
    {
LABEL_39:
      *(_OWORD *)a1 = v33;
      *(_OWORD *)(a1 + 16) = v36;
      *(_OWORD *)(a1 + 32) = v38;
      long long v21 = *(unsigned __int8 **)a1;
    }
    long long v32 = *(_OWORD *)a1;
    *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v35[14] = *(_OWORD *)(a1 + 30);
    char v14 = *(unsigned char *)(a1 + 46);
    char v15 = *(unsigned char *)(a1 + 47);
    *(unsigned char *)(a1 + 46) = 0;
    if (*v21 == 66)
    {
      *(void *)a1 = v21 + 1;
      if (google::ParseSourceName((unsigned __int8 **)a1))
      {
        do
        {
          if (**(unsigned char **)a1 != 66) {
            break;
          }
          ++*(void *)a1;
        }
        while ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0);
        goto LABEL_27;
      }
    }
LABEL_45:
    *(_OWORD *)a1 = v32;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v35;
    *(_OWORD *)(a1 + 30) = *(_OWORD *)&v35[14];
    *(unsigned char *)(a1 + 46) = v14;
    *(unsigned char *)(a1 + 47) = v15;
    return 1;
  }
  long long v32 = *(_OWORD *)a1;
  *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35[14] = *(_OWORD *)(a1 + 30);
  char v14 = *(unsigned char *)(a1 + 46);
  char v15 = *(unsigned char *)(a1 + 47);
  *(unsigned char *)(a1 + 46) = 0;
  if (**(unsigned char **)a1 != 66) {
    goto LABEL_45;
  }
  ++*(void *)a1;
  if (!google::ParseSourceName((unsigned __int8 **)a1)) {
    goto LABEL_45;
  }
  do
  {
    if (**(unsigned char **)a1 != 66) {
      break;
    }
    ++*(void *)a1;
  }
  while ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0);
LABEL_27:
  *(unsigned char *)(a1 + 46) = v14 & 1;
  return 1;
}

uint64_t google::ParseCallOffset(uint64_t a1)
{
  long long v17 = *(_OWORD *)(a1 + 32);
  std::chrono::system_clock::time_point v1 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 104)
  {
    uint64_t v2 = v1 + 1;
    *(void *)a1 = v1 + 1;
    int v3 = v1[1];
    if (v3 == 110)
    {
      uint64_t v2 = v1 + 2;
      *(void *)a1 = v1 + 2;
      int v3 = v1[2];
    }
    if ((v3 - 48) <= 9)
    {
      uint64_t v4 = 0;
      do
        unsigned int v5 = v2[++v4] - 48;
      while (v5 < 0xA);
      if (v4)
      {
        *(void *)a1 = &v2[v4];
        if (v2[v4] == 95) {
          goto LABEL_9;
        }
      }
    }
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  int v7 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 != 118) {
    goto LABEL_25;
  }
  int v8 = v7 + 1;
  *(void *)a1 = v7 + 1;
  int v9 = v7[1];
  if (v9 == 110)
  {
    int v8 = v7 + 2;
    *(void *)a1 = v7 + 2;
    int v9 = v7[2];
  }
  if ((v9 - 48) > 9) {
    goto LABEL_25;
  }
  uint64_t v10 = 0;
  do
    unsigned int v11 = v8[++v10] - 48;
  while (v11 < 0xA);
  if (!v10) {
    goto LABEL_25;
  }
  *(void *)a1 = &v8[v10];
  if (v8[v10] != 95) {
    goto LABEL_25;
  }
  char v12 = &v8[v10];
  uint64_t v2 = v12 + 1;
  *(void *)a1 = v12 + 1;
  int v13 = v12[1];
  if (v13 == 110)
  {
    uint64_t v2 = v12 + 2;
    *(void *)a1 = v12 + 2;
    int v13 = v12[2];
  }
  if ((v13 - 48) > 9) {
    goto LABEL_25;
  }
  uint64_t v4 = 0;
  do
    unsigned int v14 = v2[++v4] - 48;
  while (v14 < 0xA);
  if (v4 && (*(void *)a1 = &v2[v4], v2[v4] == 95))
  {
LABEL_9:
    *(void *)a1 = &v2[v4 + 1];
    return 1;
  }
  else
  {
LABEL_25:
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    return 0;
  }
}

void glog_internal_namespace_::Mutex::~Mutex(pthread_rwlock_t *this)
{
  if (LOBYTE(this[1].__sig))
  {
    if (pthread_rwlock_destroy(this)) {
      abort();
    }
  }
}

google::LogDestination *google::LogDestination::LogDestination(google::LogDestination *this, unsigned int a2, const char *a3)
{
  *(void *)this = &unk_26F0BCC30;
  *((unsigned char *)this + 208) = 1;
  if (*((unsigned char *)this + 208) && pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 8), 0)) {
    abort();
  }
  *((unsigned char *)this + 216) = a3 != 0;
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = "";
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v9 = (char *)operator new(v10 + 1);
    *((void *)this + 29) = v8;
    *((void *)this + 30) = v11 | 0x8000000000000000;
    *((void *)this + 28) = v9;
    goto LABEL_13;
  }
  *((unsigned char *)this + 247) = v7;
  int v9 = (char *)this + 224;
  if (v7) {
LABEL_13:
  }
    size_t v7 = (size_t)memmove(v9, v6, v8);
  v9[v8] = 0;
  char v12 = google::glog_internal_namespace_::ProgramInvocationShortName((google::glog_internal_namespace_ *)v7);
  size_t v13 = strlen(v12);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    long long v15 = (char *)operator new(v16 + 1);
    *((void *)this + 32) = v14;
    *((void *)this + 33) = v17 | 0x8000000000000000;
    *((void *)this + 31) = v15;
    goto LABEL_21;
  }
  *((unsigned char *)this + 271) = v13;
  long long v15 = (char *)this + 248;
  if (v13) {
LABEL_21:
  }
    memmove(v15, v12, v14);
  v15[v14] = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = a2;
  *(_OWORD *)((char *)this + 308) = xmmword_23CE7EB40;
  *((void *)this + 41) = 0;
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v19 = "severity >= 0";
    int v20 = 845;
    goto LABEL_27;
  }
  if (a2 >= 4)
  {
    uint64_t v19 = "severity < NUM_SEVERITIES";
    int v20 = 846;
LABEL_27:
    __assert_rtn("LogFileObject", "logging.cc", v20, v19);
  }
  *((void *)this + 42) = this;
  return this;
}

void sub_23CB57A90(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 208))
  {
    if (pthread_rwlock_destroy(v2)) {
      abort();
    }
  }
  _Unwind_Resume(exception_object);
}

void glog_internal_namespace_::MutexLock::~MutexLock(glog_internal_namespace_::MutexLock *this)
{
  uint64_t v1 = *(void *)this;
  if (*(unsigned char *)(v1 + 200))
  {
    if (pthread_rwlock_unlock((pthread_rwlock_t *)v1)) {
      abort();
    }
  }
}

void google::LogMessage::LogMessageData::~LogMessageData(google::LogMessage::LogMessageData *this)
{
  *((void *)this + 3751) = &unk_26F0BCC88;
  uint64_t v1 = (char *)this + 30096;
  *((void *)this + 3762) = &unk_26F0BCCB0;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](v1);
}

void sub_23CB57C00(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

google::LogMessage::LogStream *google::LogMessage::LogStream::LogStream(google::LogMessage::LogStream *this, char *a2, int a3, int a4)
{
  *(void *)this = &unk_26F0BCCF8;
  *((void *)this + 11) = &unk_26F0BCD20;
  std::ios_base::init((std::ios_base *)((char *)this + 88), 0);
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = -1;
  *(void *)this = &unk_26F0BCC88;
  *((void *)this + 11) = &unk_26F0BCCB0;
  std::streambuf::basic_streambuf();
  *((void *)this + 1) = &unk_26F0BCD40;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = &a2[a3 - 2];
  *((_DWORD *)this + 18) = a4;
  *((void *)this + 10) = this;
  size_t v8 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  v8->__rdbuf_ = (char *)this + 8;
  std::ios_base::clear(v8, 0);
  return this;
}

void sub_23CB57D68(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

void google::LogMessage::Init(void *a1, google::glog_internal_namespace_ *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  *a1 = 0;
  if (a4 == 3 && google::exit_on_dfatal)
  {
    if (!byte_26AED2240 || !pthread_rwlock_wrlock(&stru_26AED2178))
    {
      if (_MergedGlobals_161)
      {
        unint64_t v12 = (unint64_t)&google::fatal_msg_data_shared;
        *((unsigned char *)&google::fatal_msg_data_shared + 30385) = 0;
        a1[1] = &google::fatal_msg_data_shared;
        if (!byte_26AED2240) {
          goto LABEL_14;
        }
      }
      else
      {
        _MergedGlobals_161 = 1;
        unint64_t v12 = (unint64_t)&google::fatal_msg_data_exclusive;
        *((unsigned char *)&google::fatal_msg_data_exclusive + 30385) = 1;
        a1[1] = &google::fatal_msg_data_exclusive;
        if (!byte_26AED2240) {
          goto LABEL_14;
        }
      }
      if (!pthread_rwlock_unlock(&stru_26AED2178))
      {
        unint64_t v12 = a1[1];
        goto LABEL_14;
      }
    }
    abort();
  }
  size_t v13 = (unsigned char *)google::thread_data_available();
  if (!*v13) {
    operator new();
  }
  unsigned char *v13 = 0;
  unint64_t v12 = (google::thread_msg_data() + 7) & 0xFFFFFFFFFFFFFFF8;
  google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)(v12 + 30008), (char *)(v12 | 4), 30000, 0);
  a1[1] = v12;
  *(unsigned char *)(v12 + 30385) = 0;
LABEL_14:
  size_t v14 = (const std::ios_base *)(v12 + 30008 + *(void *)(*(void *)(v12 + 30008) - 24));
  if (v14[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v14);
    long long v15 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
    std::locale::~locale(&v56);
    v14[1].__fmtflags_ = v16;
  }
  v14[1].__fmtflags_ = 48;
  uint64_t v17 = (google::glog_internal_namespace_ *)__error();
  uint64_t v18 = a1[1];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v17;
  *(unsigned char *)(v18 + 30248) = a4;
  *(_DWORD *)(v18 + 30252) = a3;
  *(void *)(v18 + 30256) = a5;
  *(void *)(v18 + 30264) = a6;
  *(void *)(v18 + 30272) = 0;
  *(void *)(a1[1] + 30272) = 0;
  double v19 = google::glog_internal_namespace_::WallTime_Now(v17);
  uint64_t v20 = a1[1];
  *(void *)(v20 + 30280) = (uint64_t)v19;
  localtime_r((const time_t *)(v20 + 30280), (tm *)(v20 + 30288));
  *(_OWORD *)(a1[1] + 30352) = 0u;
  long long v22 = google::glog_internal_namespace_::const_basename(a2, v21);
  uint64_t v23 = a1[1];
  *(void *)(v23 + 30368) = v22;
  *(void *)(v23 + 30376) = a2;
  *(unsigned char *)(v23 + 30384) = 0;
  if (a3 != -1 && fLB::FLAGS_log_prefix)
  {
    LOBYTE(v56.__locale_) = *google::LogSeverityNames[a4];
    long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v23 + 30008), (uint64_t)&v56, 1);
    *(void *)((char *)v24 + *(void *)(*v24 - 24) + 24) = 2;
    char v25 = (void *)std::ostream::operator<<();
    *(void *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 2;
    uint64_t v26 = (void *)std::ostream::operator<<();
    LOBYTE(v56.__locale_) = 32;
    char v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v56, 1);
    *(void *)((char *)v27 + *(void *)(*v27 - 24) + 24) = 2;
    long long v28 = (void *)std::ostream::operator<<();
    LOBYTE(v56.__locale_) = 58;
    long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v56, 1);
    *(void *)((char *)v29 + *(void *)(*v29 - 24) + 24) = 2;
    long long v30 = (void *)std::ostream::operator<<();
    LOBYTE(v56.__locale_) = 58;
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v56, 1);
    *(void *)((char *)v31 + *(void *)(*v31 - 24) + 24) = 2;
    long long v32 = (void *)std::ostream::operator<<();
    long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
    *(void *)((char *)v33 + *(void *)(*v33 - 24) + 24) = 6;
    long long v34 = (void *)std::ostream::operator<<();
    LOBYTE(v56.__locale_) = 32;
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v56, 1);
    LOBYTE(__p) = 32;
    long long v36 = (google::glog_internal_namespace_ *)std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, (char *)&__p);
    *(void *)((char *)v36 + *(void *)(*(void *)v36 - 24) + 24) = 5;
    google::glog_internal_namespace_::GetTID(v36);
    long long v37 = (void *)std::ostream::operator<<();
    char v55 = 48;
    long long v38 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, &v55);
    LOBYTE(v56.__locale_) = 32;
    int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)&v56, 1);
    size_t v40 = strlen(*(const char **)(a1[1] + 30368));
    uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, *(void *)(a1[1] + 30368), v40);
    LOBYTE(v56.__locale_) = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v56, 1);
    int v42 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"] ", 2);
    uint64_t v23 = a1[1];
  }
  *(void *)(v23 + 30344) = *(void *)(v23 + 30064) - *(void *)(v23 + 30056);
  uint64_t v43 = byte_268BCCAA7;
  if (byte_268BCCAA7 < 0) {
    uint64_t v43 = qword_268BCCA98;
  }
  if (v43)
  {
    snprintf((char *)&v56, 0x80uLL, "%s:%d", *(const char **)(v23 + 30368), a3);
    long long v44 = byte_268BCCAA7 >= 0
        ? (const char *)&fLS::FLAGS_log_backtrace_at_buf
        : (const char *)fLS::FLAGS_log_backtrace_at_buf;
    if (!strcmp(v44, (const char *)&v56))
    {
      std::string __p = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      google::glog_internal_namespace_::DumpStackTraceToString((uint64_t)&__p, v45, v46, v47);
      char v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1[1] + 30008), (uint64_t)" (stacktrace:\n", 14);
      if (v54 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v54 >= 0) {
        uint64_t v50 = HIBYTE(v54);
      }
      else {
        uint64_t v50 = v53;
      }
      char v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_p, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)") ", 2);
      if (SHIBYTE(v54) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_23CB583F4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F0C4056CFB368);
  _Unwind_Resume(a1);
}

void sub_23CB58418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::locale a19)
{
}

uint64_t google::LogMessage::SendToLog(size_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  size_t v5 = this;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v7 = *(void *)(v6 + 30352);
  if (!v7 || *(unsigned char *)(v7 + v6 + 3) != 10) {
    this = (size_t)google::RawLog__((google::glog_internal_namespace_ *)3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x583, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
  }
  if ((byte_26AED2099 & 1) == 0)
  {
    this = google::glog_internal_namespace_::IsGoogleLoggingInitialized((google::glog_internal_namespace_ *)this);
    if ((this & 1) == 0)
    {
      strcpy(__ptr, "WARNING: Logging before InitGoogleLogging() is written to STDERR\n");
      this = fwrite(__ptr, 0x41uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
      byte_26AED2099 = 1;
    }
  }
  if (fLB::FLAGS_logtostderr)
  {
    uint64_t v8 = *(void *)(v5 + 8);
LABEL_16:
    google::ColoredWriteToStderr((google *)*(char *)(v8 + 30248), (void *)(v8 + 4), *(void *)(v8 + 30352));
    uint64_t v13 = *(void *)(v5 + 8);
    size_t v14 = (char *)(v13 + 30248);
    goto LABEL_17;
  }
  BOOL IsGoogleLoggingInitialized = google::glog_internal_namespace_::IsGoogleLoggingInitialized((google::glog_internal_namespace_ *)this);
  uint64_t v8 = *(void *)(v5 + 8);
  if (!IsGoogleLoggingInitialized) {
    goto LABEL_16;
  }
  google::LogDestination::LogToAllLogfiles(*(char *)(v8 + 30248), *(void *)(v8 + 30280), (void *)(v8 + 4), *(void *)(v8 + 30352));
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v11 = (google *)*(char *)(v10 + 30248);
  if (fLI::FLAGS_stderrthreshold <= (int)v11 || fLB::FLAGS_alsologtostderr != 0)
  {
    google::ColoredWriteToStderr(v11, (void *)(v10 + 4), *(void *)(v10 + 30352));
    uint64_t v10 = *(void *)(v5 + 8);
    uint64_t v11 = (google *)*(char *)(v10 + 30248);
  }
  google::LogDestination::MaybeLogToEmail(v11, (const std::string::value_type *)(v10 + 4), *(const char **)(v10 + 30352));
  uint64_t v13 = *(void *)(v5 + 8);
  size_t v14 = (char *)(v13 + 30248);
LABEL_17:
  uint64_t result = google::LogDestination::LogToSinks(*v14, *(void *)(v13 + 30376), *(const char **)(v13 + 30368), (const char *)*((unsigned int *)v14 + 1), v13 + 30288, (const tm *)(v13 + *(void *)(v13 + 30344) + 4), (const char *)(*(void *)(v13 + 30352) + ~*(void *)(v13 + 30344)));
  if (*(unsigned char *)(*(void *)(v5 + 8) + 30248) == 3 && google::exit_on_dfatal != 0)
  {
    if (*(unsigned char *)(*(void *)(v5 + 8) + 30385))
    {
      qword_26AED2348 = qword_26AEE11C8;
      dword_26AED2350 = *((_DWORD *)&google::fatal_msg_data_exclusive + 7563);
      qword_26AED2358 = (uint64_t)&google::fatal_msg_data_exclusive + qword_26AEE11A8 + 4;
      dword_26AED2460 = google::GetStackTrace((google *)&unk_26AED2360, (void **)0x20, 4);
      google::glog_internal_namespace_::SetCrashReason((unint64_t)&qword_26AED2348);
      uint64_t v17 = *(void *)(v5 + 8);
      int v18 = *(_DWORD *)(v17 + 30352);
      if (v18 >= 255) {
        int v18 = 255;
      }
      uint64_t v19 = v18;
      memcpy(byte_26AED2248, (const void *)(v17 + 4), v18);
      byte_26AED2248[v19] = 0;
      qword_26AED20A0 = *(void *)(*(void *)(v5 + 8) + 30280);
    }
    if (fLB::FLAGS_logtostderr) {
      goto LABEL_33;
    }
    if (google::LogDestination::log_destinations_[0])
    {
      (*(void (**)(void, uint64_t, void, const char *, void))(**(void **)(google::LogDestination::log_destinations_[0]
                                                                                          + 336)
                                                                            + 16))(*(void *)(google::LogDestination::log_destinations_[0] + 336), 1, 0, "", 0);
      uint64_t v20 = qword_268BCCB08;
      if (!qword_268BCCB08)
      {
LABEL_30:
        uint64_t v21 = qword_268BCCB10;
        if (!qword_268BCCB10) {
          goto LABEL_31;
        }
LABEL_36:
        (*(void (**)(void, uint64_t, void, const char *, void))(**(void **)(v21 + 336) + 16))(*(void *)(v21 + 336), 1, 0, "", 0);
        uint64_t v22 = qword_268BCCB18;
        if (qword_268BCCB18) {
LABEL_32:
        }
          (*(void (**)(void, uint64_t, void, const char *, void))(**(void **)(v22 + 336) + 16))(*(void *)(v22 + 336), 1, 0, "", 0);
LABEL_33:
        glog_internal_namespace_::Mutex::Unlock((uint64_t)&stru_26AED20A8);
        google::LogDestination::WaitForSinks(*(void *)(v5 + 8));
        uint64_t v23 = (google *)write(2, "*** Check failure stack trace: ***\n", 0x23uLL);
        google::g_logging_fail_func(v23);
      }
    }
    else
    {
      uint64_t v20 = qword_268BCCB08;
      if (!qword_268BCCB08) {
        goto LABEL_30;
      }
    }
    (*(void (**)(void, uint64_t, void, const char *, void))(**(void **)(v20 + 336) + 16))(*(void *)(v20 + 336), 1, 0, "", 0);
    uint64_t v21 = qword_268BCCB10;
    if (!qword_268BCCB10)
    {
LABEL_31:
      uint64_t v22 = qword_268BCCB18;
      if (!qword_268BCCB18) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t google::LogMessage::stream(google::LogMessage *this)
{
  return *((void *)this + 1) + 30008;
}

google::LogMessage *google::LogMessage::LogMessage(google::LogMessage *this, google::glog_internal_namespace_ *a2, int a3)
{
  *(void *)this = 0;
  google::LogMessage::Init(this, a2, a3, 0, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

google::LogMessage *google::LogMessage::LogMessage(google::LogMessage *this, google::glog_internal_namespace_ *a2, int a3, int a4)
{
  *(void *)this = 0;
  google::LogMessage::Init(this, a2, a3, a4, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

uint64_t google::LogMessage::SendToSinkAndLog(google::LogMessage *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void *)(v6 + 30272);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 30352);
    if (!v8 || *(unsigned char *)(v8 + v6 + 3) != 10)
    {
      google::RawLog__((google::glog_internal_namespace_ *)3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x607, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = *(void *)(v6 + 30272);
      uint64_t v8 = *(void *)(v6 + 30352);
    }
    (*(void (**)(uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, *(char *)(v6 + 30248), *(void *)(v6 + 30376), *(void *)(v6 + 30368), *(unsigned int *)(v6 + 30252), v6 + 30288, v6 + *(void *)(v6 + 30344) + 4, v8 + ~*(void *)(v6 + 30344));
  }

  return google::LogMessage::SendToLog(this);
}

uint64_t google::LogMessage::SendToSink(google::LogMessage *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((void *)this + 1);
  uint64_t result = *(void *)(v6 + 30272);
  if (result)
  {
    uint64_t v8 = *(void *)(v6 + 30352);
    if (!v8 || *(unsigned char *)(v8 + v6 + 3) != 10)
    {
      google::RawLog__((google::glog_internal_namespace_ *)3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x607, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
      uint64_t result = *(void *)(*((void *)this + 1) + 30272);
    }
    int v9 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v9();
  }
  return result;
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  int v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    size_t v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_23CB58BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void google::LogMessage::~LogMessage(google::LogMessage *this)
{
  google::LogMessage::Flush((uint64_t)this);
  uint64_t v2 = google::thread_msg_data();
  if (v3 == v2)
  {
    *(void *)(v3 + 30008) = &unk_26F0BCC88;
    uint64_t v5 = v3 + 30096;
    *(void *)(v3 + 30096) = &unk_26F0BCCB0;
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23ECF2B10](v5);
    *(unsigned char *)google::thread_data_available() = 1;
  }
  else
  {
    uint64_t v4 = *(void *)this;
    if (*(void *)this)
    {
      *(void *)(v4 + 30008) = &unk_26F0BCC88;
      *(void *)(v4 + 30096) = &unk_26F0BCCB0;
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x23ECF2B10](v4 + 30096);
      MEMORY[0x23ECF2BC0](v4, 0x10F0C4056CFB368);
    }
  }
}

void sub_23CB58D58(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

void sub_23CB58D90(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F0C4056CFB368);
  _Unwind_Resume(a1);
}

uint64_t google::LogMessage::Flush(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (*(unsigned char *)(v1 + 30384) || fLI::FLAGS_minloglevel > *(char *)(v1 + 30248)) {
    return this;
  }
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(v1 + 30064) - *(void *)(v1 + 30056);
  *(void *)(v1 + 30352) = v3;
  *(void *)(v1 + 30360) = v3 - *(void *)(v1 + 30344);
  int v4 = *(unsigned __int8 *)(v3 + v1 + 3);
  if (v4 == 10)
  {
    char v5 = 0;
    if (!byte_26AED2170) {
      goto LABEL_9;
    }
  }
  else
  {
    char v5 = *(unsigned char *)(v1 + v3 + 4);
    *(void *)(v1 + 30352) = v3 + 1;
    *(unsigned char *)(v1 + v3 + 4) = 10;
    if (!byte_26AED2170) {
      goto LABEL_9;
    }
  }
  if (pthread_rwlock_wrlock(&stru_26AED20A8)) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void (**)(void *))(v6 + 30256);
  uint64_t v8 = *(void *)(v6 + 30264);
  int v9 = (void *)(v2 + (v8 >> 1));
  if (v8) {
    uint64_t v7 = *(void (**)(void *))(*v9 + v7);
  }
  v7(v9);
  uint64_t v10 = *(void *)(v2 + 8);
  ++google::LogMessage::num_messages_[*(char *)(v10 + 30248)];
  if (!byte_26AED2170) {
    goto LABEL_14;
  }
  if (pthread_rwlock_unlock(&stru_26AED20A8)) {
LABEL_19:
  }
    abort();
  uint64_t v10 = *(void *)(v2 + 8);
LABEL_14:
  this = google::LogDestination::WaitForSinks(v10);
  if (v4 != 10) {
    *(unsigned char *)(*(void *)(*(void *)(v2 + 8) + 30352) + *(void *)(v2 + 8) + 3) = v5;
  }
  uint64_t v11 = *(int **)(v2 + 8);
  int v12 = *v11;
  if (*v11)
  {
    this = (uint64_t)__error();
    *(_DWORD *)this = v12;
    uint64_t v11 = *(int **)(v2 + 8);
  }
  *((unsigned char *)v11 + 30384) = 1;
  return this;
}

void sub_23CB58F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

uint64_t google::LogDestination::WaitForSinks(uint64_t result)
{
  uint64_t v1 = (void *)result;
  if (byte_26AEE20F0)
  {
    uint64_t result = pthread_rwlock_rdlock(&google::LogDestination::sink_mutex_);
    if (result) {
      goto LABEL_25;
    }
  }
  if (google::LogDestination::sinks_)
  {
    for (unsigned int i = ((*(void *)(google::LogDestination::sinks_ + 8) - *(void *)google::LogDestination::sinks_) >> 3) - 1;
          (i & 0x80000000) == 0;
          --i)
    {
      uint64_t v3 = *(void *)(*(void *)google::LogDestination::sinks_ + 8 * i);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
  }
  int v4 = (uint64_t (*)(google::LogMessage *, uint64_t, uint64_t, uint64_t, const char *))v1[3782];
  BOOL v5 = !v1[3783] || (v1[3783] & 1 | (unint64_t)v4) == 0;
  BOOL v6 = v5;
  BOOL v7 = v4 == google::LogMessage::SendToSinkAndLog || v4 == google::LogMessage::SendToSink;
  if (v7 && v6)
  {
    uint64_t result = v1[3784];
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    }
  }
  if (byte_26AEE20F0)
  {
    uint64_t result = pthread_rwlock_unlock(&google::LogDestination::sink_mutex_);
    if (result) {
LABEL_25:
    }
      abort();
  }
  return result;
}

void sub_23CB590F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

size_t google::LogDestination::LogToAllLogfiles(size_t this, uint64_t a2, void *__ptr, size_t __size)
{
  unsigned int v6 = this;
  if (fLB::FLAGS_logtostderr)
  {
    return google::ColoredWriteToStderr((google *)this, __ptr, __size);
  }
  else if ((this & 0x80000000) == 0)
  {
    uint64_t v8 = this;
    do
    {
      if (v6 >= 4) {
        google::LogDestination::LogToAllLogfiles();
      }
      uint64_t v10 = google::LogDestination::log_destinations_[v8];
      if (!v10) {
        operator new();
      }
      this = (*(uint64_t (**)(void, BOOL, uint64_t, void *, size_t))(**(void **)(v10 + 336) + 16))(*(void *)(v10 + 336), v8 > fLI::FLAGS_logbuflevel, a2, __ptr, __size);
    }
    while (v8-- > 0);
  }
  return this;
}

void sub_23CB59248(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B2C4074DC3037);
  _Unwind_Resume(a1);
}

size_t google::ColoredWriteToStderr(google *this, void *__ptr, size_t __size)
{
  if (google::LogDestination::terminal_supports_color_) {
    BOOL v5 = fLB::FLAGS_colorlogtostderr == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (this >= 4) {
      google::ColoredWriteToStderr();
    }
    if ((this - 2) < 2)
    {
      uint64_t v10 = "1";
LABEL_15:
      uint64_t v11 = (FILE **)MEMORY[0x263EF8348];
      fprintf((FILE *)*MEMORY[0x263EF8348], "\x1B[0;3%sm", v10);
      fwrite(__ptr, __size, 1uLL, *v11);
      unsigned int v6 = *v11;
      BOOL v7 = "\x1B[m";
      size_t v8 = 3;
      return fwrite(v7, v8, 1uLL, v6);
    }
    if (this)
    {
      if (this != 1) {
        google::ColoredWriteToStderr();
      }
      uint64_t v10 = "3";
      goto LABEL_15;
    }
  }
  unsigned int v6 = (FILE *)*MEMORY[0x263EF8348];
  BOOL v7 = (const char *)__ptr;
  size_t v8 = __size;

  return fwrite(v7, v8, 1uLL, v6);
}

uint64_t google::LogDestination::LogToSinks(uint64_t this, uint64_t a2, const char *a3, const char *a4, uint64_t a5, const tm *a6, const char *a7)
{
  uint64_t v13 = this;
  if (byte_26AEE20F0)
  {
    this = pthread_rwlock_rdlock(&google::LogDestination::sink_mutex_);
    if (this) {
      goto LABEL_10;
    }
  }
  if (google::LogDestination::sinks_)
  {
    for (unsigned int i = ((*(void *)(google::LogDestination::sinks_ + 8) - *(void *)google::LogDestination::sinks_) >> 3) - 1;
          (i & 0x80000000) == 0;
          --i)
    {
      uint64_t v15 = *(void *)(*(void *)google::LogDestination::sinks_ + 8 * i);
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, const char *, uint64_t, const tm *, const char *))(*(void *)v15 + 16))(v15, v13, a2, a3, a4, a5, a6, a7);
    }
  }
  if (byte_26AEE20F0)
  {
    this = pthread_rwlock_unlock(&google::LogDestination::sink_mutex_);
    if (this) {
LABEL_10:
    }
      abort();
  }
  return this;
}

void sub_23CB594A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

void google::LogDestination::MaybeLogToEmail(google::LogDestination *this, const std::string::value_type *a2, const char *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (google::LogDestination::email_logging_severity_ <= (int)this || fLI::FLAGS_logemaillevel <= (int)this)
  {
    int v6 = (int)this;
    if (fLS::FLAGS_alsologtoemail_buf[23] < 0) {
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)fLS::FLAGS_alsologtoemail_buf, *(std::string::size_type *)&fLS::FLAGS_alsologtoemail_buf[8]);
    }
    else {
      std::string v51 = *(std::string *)fLS::FLAGS_alsologtoemail_buf;
    }
    std::string::size_type v7 = byte_268BCCADF;
    char v8 = byte_268BCCADF;
    uint64_t v9 = qword_268BCCAD0;
    if (byte_268BCCADF >= 0) {
      uint64_t v10 = byte_268BCCADF;
    }
    else {
      uint64_t v10 = qword_268BCCAD0;
    }
    if (v10)
    {
      std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v51.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::append(&v51, ",");
        std::string::size_type v7 = byte_268BCCADF;
        uint64_t v9 = qword_268BCCAD0;
        char v8 = byte_268BCCADF;
      }
      if (v8 >= 0) {
        int v12 = (const std::string::value_type *)&google::LogDestination::addresses_;
      }
      else {
        int v12 = (const std::string::value_type *)google::LogDestination::addresses_;
      }
      if (v8 >= 0) {
        std::string::size_type v13 = v7;
      }
      else {
        std::string::size_type v13 = v9;
      }
      std::string::append(&v51, v12, v13);
    }
    size_t v14 = google::LogSeverityNames[v6];
    uint64_t v15 = (google::glog_internal_namespace_ *)strlen(v14);
    std::string::size_type v16 = (std::string::size_type)v15 + 6;
    if ((unint64_t)v15 + 6 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = (size_t)v15;
    if (v16 >= 0x17)
    {
      uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v19 = v16 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v21 = (char *)operator new(v19 + 1);
      __p.__r_.__value_.__l.__size_ = v16;
      __p.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      *(_DWORD *)uint64_t v21 = 1196379227;
      int v18 = v21 + 6;
      *((_WORD *)v21 + 2) = 8285;
    }
    else
    {
      __p.__r_.__value_.__r.__words[2] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = (_BYTE)v15 + 6;
      int v18 = &__p.__r_.__value_.__s.__data_[6];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0x205D474F4C5BuLL;
      if (!v15)
      {
LABEL_32:
        v18[v17] = 0;
        int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v24 = v23 + 2;
        if (v23 + 2 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v24 >= 0x17)
        {
          uint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17) {
            uint64_t v26 = v24 | 7;
          }
          uint64_t v27 = v26 + 1;
          p_dst = (utsname *)operator new(v26 + 1);
          *(void *)&__dst.sysname[8] = v23 + 2;
          *(void *)&__dst.sysname[16] = v27 | 0x8000000000000000;
          *(void *)__dst.sysname = p_dst;
        }
        else
        {
          memset(&__dst, 0, 24);
          p_dst = &__dst;
          __dst.sysname[23] = v23 + 2;
          if (!v23) {
            goto LABEL_46;
          }
        }
        if (v22 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v15 = (google::glog_internal_namespace_ *)memmove(p_dst, p_p, v23);
LABEL_46:
        strcpy(&p_dst->sysname[v23], ": ");
        long long v29 = google::glog_internal_namespace_::ProgramInvocationShortName(v15);
        long long v30 = v29;
        int v31 = __dst.sysname[23];
        if (__dst.sysname[23] >= 0) {
          size_t v32 = __dst.sysname[23];
        }
        else {
          size_t v32 = *(void *)&__dst.sysname[8];
        }
        size_t v33 = strlen(v29);
        unint64_t v34 = v32 + v33;
        if (v32 + v33 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v35 = v33;
        if (v34 > 0x16)
        {
          uint64_t v42 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v42 = v34 | 7;
          }
          uint64_t v43 = v42 + 1;
          long long v36 = (char *)operator new(v42 + 1);
          unint64_t v49 = v34;
          int64_t v50 = v43 | 0x8000000000000000;
          char v48 = v36;
          if (!v32)
          {
LABEL_56:
            long long v38 = &v36[v32];
            if (v35) {
              memmove(v38, v30, v35);
            }
            v38[v35] = 0;
            if (v31 < 0)
            {
              operator delete(*(void **)__dst.sysname);
              if ((v22 & 0x80000000) == 0) {
                goto LABEL_60;
              }
            }
            else if ((v22 & 0x80000000) == 0)
            {
              goto LABEL_60;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_60:
            uint64_t v39 = *(void *)&google::LogDestination::hostname_[8];
            char v40 = google::LogDestination::hostname_[23];
            if (google::LogDestination::hostname_[23] >= 0) {
              uint64_t v39 = google::LogDestination::hostname_[23];
            }
            if (v39) {
              goto LABEL_68;
            }
            if (uname(&__dst)) {
              __dst.nodename[0] = 0;
            }
            MEMORY[0x23ECF27D0](google::LogDestination::hostname_, __dst.nodename);
            uint64_t v41 = google::LogDestination::hostname_[23];
            char v40 = google::LogDestination::hostname_[23];
            if (google::LogDestination::hostname_[23] < 0) {
              uint64_t v41 = *(void *)&google::LogDestination::hostname_[8];
            }
            if (v41)
            {
LABEL_68:
              if ((v40 & 0x80) == 0)
              {
LABEL_69:
                std::string __p = *(std::string *)google::LogDestination::hostname_;
                goto LABEL_78;
              }
            }
            else
            {
              MEMORY[0x23ECF27D0](google::LogDestination::hostname_, "(unknown)");
              if ((google::LogDestination::hostname_[23] & 0x80) == 0) {
                goto LABEL_69;
              }
            }
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)google::LogDestination::hostname_, *(std::string::size_type *)&google::LogDestination::hostname_[8]);
LABEL_78:
            std::string::append(&__p, "\n\n");
            std::string::append(&__p, a2, (std::string::size_type)a3);
            if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v44 = &v51;
            }
            else {
              long long v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
            }
            if (v50 >= 0) {
              uint64_t v45 = (const char *)&v48;
            }
            else {
              uint64_t v45 = (const char *)v48;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v46 = &__p;
            }
            else {
              long long v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            google::SendEmailInternal((google *)v44, v45, (const char *)v46, 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v50) & 0x80000000) == 0)
              {
LABEL_89:
                if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                goto LABEL_93;
              }
            }
            else if ((SHIBYTE(v50) & 0x80000000) == 0)
            {
              goto LABEL_89;
            }
            operator delete(v48);
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
LABEL_93:
            operator delete(v51.__r_.__value_.__l.__data_);
            return;
          }
        }
        else
        {
          unint64_t v49 = 0;
          int64_t v50 = 0;
          char v48 = 0;
          long long v36 = (char *)&v48;
          HIBYTE(v50) = v32 + v33;
          if (!v32) {
            goto LABEL_56;
          }
        }
        if (v31 >= 0) {
          long long v37 = &__dst;
        }
        else {
          long long v37 = *(utsname **)__dst.sysname;
        }
        memmove(v36, v37, v32);
        goto LABEL_56;
      }
    }
    uint64_t v15 = (google::glog_internal_namespace_ *)memmove(v18, v14, v17);
    goto LABEL_32;
  }
}

void sub_23CB599CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t glog_internal_namespace_::Mutex::Unlock(uint64_t this)
{
  if (*(unsigned char *)(this + 200))
  {
    this = pthread_rwlock_unlock((pthread_rwlock_t *)this);
    if (this) {
      abort();
    }
  }
  return this;
}

void google::LogMessage::Fail(google::LogMessage *this)
{
}

void google::logging_fail(google *this)
{
}

google::LogMessageFatal *google::LogMessageFatal::LogMessageFatal(google::LogMessageFatal *this, google::glog_internal_namespace_ *a2, int a3)
{
  *(void *)this = 0;
  google::LogMessage::Init(this, a2, a3, 3, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

void google::LogMessageFatal::~LogMessageFatal(google::LogMessageFatal *this)
{
}

{
  google *v1;

  uint64_t v1 = (google *)google::LogMessage::Flush((uint64_t)this);
  google::g_logging_fail_func(v1);
}

unint64_t google::StrError@<X0>(google *this@<X0>, void *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((google::posix_strerror_r(this, __str, (char *)0x64) & 0x80000000) != 0 || !__str[0]) {
    snprintf(__str, 0x64uLL, "Error number %d", v2);
  }
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, __str, v5);
LABEL_12:
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t google::SendEmailInternal(google *this, const char *__s, const char *a3, const char *a4)
{
  if (!this) {
    goto LABEL_132;
  }
  uint64_t v4 = (uint64_t)this;
  if (!*(unsigned char *)this) {
    goto LABEL_132;
  }
  int v81 = (int)a4;
  if (a4)
  {
    if (*_MergedGlobals_0[0] >= 1
      && (_MergedGlobals_0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_0, (int **)&fLI::FLAGS_v, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)1)))
    {
      unint64_t v95 = 0;
      google::LogMessage::Init(&v95, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1797, 0, (uint64_t)google::LogMessage::SendToLog, 0);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v96 + 30008), (uint64_t)"Trying to send TITLE:", 21);
      size_t v8 = strlen(__s);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__s, v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" BODY:", 6);
      size_t v11 = strlen(a3);
      int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
      std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to ", 4);
      size_t v14 = strlen((const char *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v4, v14);
      google::LogMessage::~LogMessage((google::LogMessage *)&v95);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Trying to send TITLE: %s BODY: %s to %s\n", __s, a3, (const char *)this);
  }
  int v15 = byte_26AEE2027;
  if (byte_26AEE2027 >= 0) {
    size_t v16 = byte_26AEE2027;
  }
  else {
    size_t v16 = qword_26AEE2018;
  }
  unint64_t v17 = v16 + 3;
  if (v16 + 3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v19 = v17 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    size_t v87 = v16 + 3;
    int64_t v88 = v20 | 0x8000000000000000;
    utsname __dst = p_dst;
  }
  else
  {
    size_t v87 = 0;
    int64_t v88 = 0;
    utsname __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v88) = v16 + 3;
    if (!v16) {
      goto LABEL_23;
    }
  }
  if (v15 >= 0) {
    uint64_t v21 = &fLS::FLAGS_logmailer_buf;
  }
  else {
    uint64_t v21 = (uint64_t *)fLS::FLAGS_logmailer_buf;
  }
  memmove(p_dst, v21, v16);
LABEL_23:
  *(_DWORD *)((char *)p_dst + v16) = 7548192;
  size_t v22 = strlen(__s);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    unint64_t v24 = operator new(v25 + 1);
    v84.__r_.__value_.__l.__size_ = v23;
    v84.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_30;
  }
  *((unsigned char *)&v84.__r_.__value_.__s + 23) = v22;
  unint64_t v24 = &v84;
  if (v22) {
LABEL_30:
  }
    memcpy(v24, __s, v23);
  *((unsigned char *)v24 + v23) = 0;
  google::ShellEscape(&v85, &v84);
  int v27 = SHIBYTE(v88);
  if (v88 >= 0) {
    size_t v28 = HIBYTE(v88);
  }
  else {
    size_t v28 = v87;
  }
  int v29 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v85.__r_.__value_.__l.__size_;
  }
  unint64_t v31 = size + v28;
  if (size + v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 <= 0x16)
  {
    size_t v90 = 0;
    int64_t v91 = 0;
    unint64_t v89 = 0;
    size_t v32 = (char *)&v89;
    HIBYTE(v91) = size + v28;
    if (!v28) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  uint64_t v40 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17) {
    uint64_t v40 = v31 | 7;
  }
  uint64_t v41 = v40 + 1;
  size_t v32 = (char *)operator new(v40 + 1);
  size_t v90 = size + v28;
  int64_t v91 = v41 | 0x8000000000000000;
  unint64_t v89 = v32;
  if (v28)
  {
LABEL_40:
    if (v27 >= 0) {
      size_t v33 = (void **)&__dst;
    }
    else {
      size_t v33 = __dst;
    }
    memmove(v32, v33, v28);
  }
LABEL_44:
  unint64_t v34 = &v32[v28];
  if (size)
  {
    if (v29 >= 0) {
      size_t v35 = &v85;
    }
    else {
      size_t v35 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    memmove(v34, v35, size);
  }
  v34[size] = 0;
  int v36 = SHIBYTE(v91);
  if (v91 >= 0) {
    size_t v37 = HIBYTE(v91);
  }
  else {
    size_t v37 = v90;
  }
  unint64_t v38 = v37 + 1;
  if (v37 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v38 >= 0x17)
  {
    uint64_t v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v42 = v38 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v39 = (void **)operator new(v42 + 1);
    size_t v93 = v37 + 1;
    int64_t v94 = v43 | 0x8000000000000000;
    unint64_t v92 = v39;
  }
  else
  {
    size_t v93 = 0;
    int64_t v94 = 0;
    unint64_t v92 = 0;
    uint64_t v39 = (void **)&v92;
    HIBYTE(v94) = v37 + 1;
    if (!v37) {
      goto LABEL_67;
    }
  }
  if (v36 >= 0) {
    long long v44 = &v89;
  }
  else {
    long long v44 = v89;
  }
  memmove(v39, v44, v37);
LABEL_67:
  *(_WORD *)((char *)v39 + v37) = 32;
  size_t v45 = strlen((const char *)v4);
  if (v45 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v46 = v45;
  if (v45 >= 0x17)
  {
    uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17) {
      uint64_t v48 = v45 | 7;
    }
    uint64_t v49 = v48 + 1;
    uint64_t v47 = operator new(v48 + 1);
    v82.__r_.__value_.__l.__size_ = v46;
    v82.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    goto LABEL_74;
  }
  *((unsigned char *)&v82.__r_.__value_.__s + 23) = v45;
  uint64_t v47 = &v82;
  if (v45) {
LABEL_74:
  }
    memcpy(v47, (const void *)v4, v46);
  *((unsigned char *)v47 + v46) = 0;
  google::ShellEscape(&__p, &v82);
  int v50 = SHIBYTE(v94);
  if (v94 >= 0) {
    size_t v51 = HIBYTE(v94);
  }
  else {
    size_t v51 = v93;
  }
  int v52 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v54 <= 0x16)
  {
    uint64_t v96 = 0;
    int64_t v97 = 0;
    unint64_t v95 = 0;
    char v55 = (void **)&v95;
    HIBYTE(v97) = v53 + v51;
    if (!v51) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v60 = v54 | 7;
  }
  uint64_t v61 = v60 + 1;
  char v55 = (void **)operator new(v60 + 1);
  uint64_t v96 = v53 + v51;
  int64_t v97 = v61 | 0x8000000000000000;
  unint64_t v95 = v55;
  if (v51)
  {
LABEL_84:
    if (v50 >= 0) {
      std::locale v56 = (void **)&v92;
    }
    else {
      std::locale v56 = v92;
    }
    memmove(v55, v56, v51);
  }
LABEL_88:
  uint64_t v57 = (char *)v55 + v51;
  if (v53)
  {
    if (v52 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(v57, p_p, v53);
  }
  v57[v53] = 0;
  if (v52 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_95:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_95;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v91) & 0x80000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_109;
  }
LABEL_108:
  operator delete(v92);
  if ((SHIBYTE(v91) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v89);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_111;
  }
LABEL_110:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_99:
    if ((SHIBYTE(v88) & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_100:
    long long v59 = off_26AECFB40[0];
    if (*off_26AECFB40[0] < 4) {
      goto LABEL_122;
    }
    goto LABEL_113;
  }
LABEL_112:
  operator delete(__dst);
  long long v59 = off_26AECFB40[0];
  if (*off_26AECFB40[0] < 4) {
    goto LABEL_122;
  }
LABEL_113:
  if (v59 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_26AECFB40, (int **)&fLI::FLAGS_v, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)4))
  {
    unint64_t v92 = 0;
    google::LogMessage::Init(&v92, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1807, 0, (uint64_t)google::LogMessage::SendToLog, 0);
    long long v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v93 + 30008), (uint64_t)"Mailing command: ", 17);
    if (v97 >= 0) {
      long long v63 = (void **)&v95;
    }
    else {
      long long v63 = v95;
    }
    if (v97 >= 0) {
      uint64_t v64 = HIBYTE(v97);
    }
    else {
      uint64_t v64 = v96;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
    google::LogMessage::~LogMessage((google::LogMessage *)&v92);
  }
LABEL_122:
  if (v97 >= 0) {
    int v65 = (const char *)&v95;
  }
  else {
    int v65 = (const char *)v95;
  }
  size_t v66 = popen(v65, "w");
  if (v66)
  {
    if (a3)
    {
      size_t v67 = strlen(a3);
      fwrite(a3, 1uLL, v67, v66);
    }
    if (pclose(v66) != -1)
    {
      LOBYTE(v4) = 1;
      if ((SHIBYTE(v97) & 0x80000000) == 0) {
        goto LABEL_131;
      }
      goto LABEL_130;
    }
    if (v81)
    {
      unint64_t v89 = 0;
      google::LogMessage::Init(&v89, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1817, 2, (uint64_t)google::LogMessage::SendToLog, 0);
      unsigned int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v90 + 30008), (uint64_t)"Problems sending mail to ", 25);
      size_t v72 = strlen((const char *)v4);
      uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v4, v72);
      unint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)": ", 2);
      uint64_t v75 = __error();
      google::StrError((google *)*v75, &v92);
      if (v94 >= 0) {
        uint64_t v76 = (void **)&v92;
      }
      else {
        uint64_t v76 = v92;
      }
      if (v94 >= 0) {
        uint64_t v77 = HIBYTE(v94);
      }
      else {
        uint64_t v77 = v93;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v76, v77);
      if (SHIBYTE(v94) < 0) {
        operator delete(v92);
      }
      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
    }
    else
    {
      BOOL v78 = (FILE *)*MEMORY[0x263EF8348];
      BOOL v79 = __error();
      google::StrError((google *)*v79, &v92);
      if (v94 >= 0) {
        unint64_t v80 = (const char *)&v92;
      }
      else {
        unint64_t v80 = (const char *)v92;
      }
      fprintf(v78, "Problems sending mail to %s: %s\n", (const char *)v4, v80);
      if (SHIBYTE(v94) < 0) {
        operator delete(v92);
      }
    }
    LOBYTE(v4) = 0;
    if (SHIBYTE(v97) < 0) {
LABEL_130:
    }
      operator delete(v95);
  }
  else if (v81)
  {
    unint64_t v92 = 0;
    google::LogMessage::Init(&v92, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1827, 2, (uint64_t)google::LogMessage::SendToLog, 0);
    uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v93 + 30008), (uint64_t)"Unable to send mail to ", 23);
    size_t v70 = strlen((const char *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v4, v70);
    google::LogMessage::~LogMessage((google::LogMessage *)&v92);
    if (SHIBYTE(v97) < 0) {
      goto LABEL_130;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Unable to send mail to %s\n", (const char *)v4);
    if (SHIBYTE(v97) < 0) {
      goto LABEL_130;
    }
  }
LABEL_131:
  if (!v66) {
LABEL_132:
  }
    LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_23CB5A580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v49 - 113) < 0) {
    operator delete(*(void **)(v49 - 136));
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a44);
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_23CB5A704()
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 112));
  JUMPOUT(0x23CB5A6FCLL);
}

uint64_t google::GetLoggingDirectories(google *this)
{
  if (!google::logging_directories_list) {
    operator new();
  }
  return google::logging_directories_list;
}

void sub_23CB5A91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void google::GetTempDirectories(uint64_t a1)
{
  v21[4] = *MEMORY[0x263EF8340];
  int v2 = *(char **)a1;
  for (unsigned int i = *(char **)(a1 + 8); i != v2; i -= 24)
  {
    if (*(i - 1) < 0) {
      operator delete(*((void **)i - 3));
    }
  }
  *(void *)(a1 + 8) = v2;
  uint64_t v4 = getenv("TEST_TMPDIR");
  v21[0] = v4;
  v21[1] = getenv("TMPDIR");
  v21[2] = getenv("TMP");
  v21[3] = "/tmp";
  for (uint64_t j = 1; ; ++j)
  {
    unint64_t v7 = j - 1;
    if (v4) {
      break;
    }
    if (v7 > 2) {
      return;
    }
LABEL_11:
    uint64_t v4 = (char *)v21[j];
  }
  size_t v8 = strlen(v4);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8) {
LABEL_22:
  }
    memmove(p_dst, v4, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size_t v14 = &__dst;
  }
  else
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    size_t v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v14->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::append(&__dst, "/");
  }
  unint64_t v15 = *(void *)(a1 + 8);
  if (v15 >= *(void *)(a1 + 16))
  {
    unint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, (uint64_t)&__dst);
  }
  else
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v15 = v16;
    }
    unint64_t v17 = (std::string *)(v15 + 24);
    *(void *)(a1 + 8) = v15 + 24;
  }
  *(void *)(a1 + 8) = v17;
  if (stat(v4, &v19) || (v19.st_mode & 0xF000) != 0x4000)
  {
    char v18 = 1;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    char v18 = 0;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_7:
  if (v7 < 3) {
    char v6 = v18;
  }
  else {
    char v6 = 0;
  }
  if (v6) {
    goto LABEL_11;
  }
}

void sub_23CB5ABAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  *(void *)(v33 + 8) = v34;
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::posix_strerror_r(google *this, char *a2, char *a3)
{
  if (a2 && a3)
  {
    int v5 = (int)this;
    *a2 = 0;
    int v6 = *__error();
    *__error() = 0;
    int v7 = strerror_r(v5, a2, (size_t)a3);
    if (*__error())
    {
      *a2 = 0;
      return 0xFFFFFFFFLL;
    }
    else
    {
      std::string::size_type v9 = __error();
      uint64_t result = 0;
      *std::string::size_type v9 = v6;
      a3[(void)a2 - 1] = 0;
      if (v7 && (char *)v7 != a2)
      {
        *a2 = 0;
        if (v7 >= *MEMORY[0x263EF8AA0])
        {
          strncat(a2, (const char *)v7, (size_t)(a3 - 1));
          return 0;
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  return result;
}

void *google::LogMessageFatal::LogMessageFatal(void *a1, google::glog_internal_namespace_ *a2, int a3, uint64_t **a4)
{
  *a1 = 0;
  google::LogMessage::Init(a1, a2, a3, 3, (uint64_t)google::LogMessage::SendToLog, 0);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1[1] + 30008), (uint64_t)"Check failed: ", 14);
  int v7 = *((char *)*a4 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t)*a4;
  }
  else {
    uint64_t v8 = **a4;
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)*a4 + 23);
  }
  else {
    uint64_t v9 = (*a4)[1];
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  return a1;
}

void sub_23CB5ADAC(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage(v1);
  _Unwind_Resume(a1);
}

void google::base::CheckOpMessageBuilder::CheckOpMessageBuilder(google::base::CheckOpMessageBuilder *this, const char *a2)
{
}

void sub_23CB5AE40(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

void google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder(google::base::CheckOpMessageBuilder *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

uint64_t google::base::CheckOpMessageBuilder::ForVar2(google::base::CheckOpMessageBuilder *this)
{
  return *(void *)this;
}

void google::base::CheckOpMessageBuilder::NewString(google::base::CheckOpMessageBuilder *this)
{
}

void sub_23CB5AF50(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::anonymous namespace'::LogFileObject::~LogFileObject(google::_anonymous_namespace_::LogFileObject *this)
{
  *(void *)this = &unk_26F0BCC30;
  int v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((unsigned char *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8))) {
    goto LABEL_17;
  }
  uint64_t v3 = (FILE *)*((void *)this + 37);
  if (v3)
  {
    fclose(v3);
    *((void *)this + 37) = 0;
  }
  if (*((unsigned char *)this + 208) && pthread_rwlock_unlock(v2)) {
LABEL_17:
  }
    abort();
  if (*((char *)this + 295) < 0)
  {
    operator delete(*((void **)this + 34));
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*((char *)this + 247) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_14:
      operator delete(*((void **)this + 28));
      if (!*((unsigned char *)this + 208)) {
        return;
      }
      goto LABEL_15;
    }
  }
  else if ((*((char *)this + 271) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0) {
    goto LABEL_14;
  }
LABEL_10:
  if (!*((unsigned char *)this + 208)) {
    return;
  }
LABEL_15:
  if (pthread_rwlock_destroy(v2)) {
    abort();
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x23ECF2BC0);
}

void sub_23CB5B064(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 295) < 0) {
    operator delete(*(void **)(v1 + 272));
  }
  {
    if (pthread_rwlock_destroy(v2)) {
      abort();
    }
  }
  _Unwind_Resume(a1);
}

void sub_23CB5B0F0(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B3C40E61D296FLL);
  _Unwind_Resume(a1);
}

pthread_rwlock_t *google::anonymous namespace'::LogFileObject::Write(google::_anonymous_namespace_::LogFileObject *this, char a2, time_t a3, const char *a4, int a5)
{
  uint64_t v189 = *MEMORY[0x263EF8340];
  time_t v187 = a3;
  uint64_t v9 = (pthread_rwlock_t *)((char *)this + 8);
  uint64_t v186 = v9;
  if (*((unsigned char *)this + 208))
  {
    uint64_t v9 = (pthread_rwlock_t *)pthread_rwlock_wrlock(v9);
    if (v9) {
      abort();
    }
  }
  if (*((unsigned char *)this + 216))
  {
    if (*((char *)this + 247) < 0)
    {
      if (!*((void *)this + 29)) {
        goto LABEL_227;
      }
    }
    else if (!*((unsigned char *)this + 247))
    {
      goto LABEL_227;
    }
  }
  unsigned int v10 = fLI::FLAGS_max_log_size;
  if (fLI::FLAGS_max_log_size <= 1) {
    unsigned int v10 = 1;
  }
  if (v10 <= *((_DWORD *)this + 79) >> 20
    || (uint64_t HasChanged = google::glog_internal_namespace_::PidHasChanged((google::glog_internal_namespace_ *)v9),
        HasChanged))
  {
    uint64_t v12 = (FILE **)((char *)this + 296);
    std::string::size_type v13 = (FILE *)*((void *)this + 37);
    if (v13) {
      fclose(v13);
    }
    *((void *)this + 37) = 0;
    *(_OWORD *)((char *)this + 308) = xmmword_23CE7EB40;
  }
  else
  {
    uint64_t v12 = (FILE **)((char *)this + 296);
    if (*((void *)this + 37)) {
      goto LABEL_215;
    }
  }
  int v14 = *((_DWORD *)this + 80) + 1;
  *((_DWORD *)this + 80) = v14;
  if (v14 == 32)
  {
    *((_DWORD *)this + 80) = 0;
    localtime_r(&v187, &v185);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v184);
    unint64_t v15 = (char *)v184 + *(void *)(v184[0] - 24);
    if (*((_DWORD *)v15 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v184 + *(void *)(v184[0] - 24)));
      long long v16 = std::locale::use_facet((const std::locale *)&v188, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
      std::locale::~locale((std::locale *)&v188);
    }
    *((_DWORD *)v15 + 36) = 48;
    unint64_t v17 = (void *)std::ostream::operator<<();
    *(void *)((char *)v17 + *(void *)(*v17 - 24) + 24) = 2;
    char v18 = (void *)std::ostream::operator<<();
    *(void *)((char *)v18 + *(void *)(*v18 - 24) + 24) = 2;
    stat v19 = (void *)std::ostream::operator<<();
    v188.sysname[0] = 45;
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v188, 1);
    *(void *)((char *)v20 + *(void *)(*v20 - 24) + 24) = 2;
    uint64_t v21 = (void *)std::ostream::operator<<();
    *(void *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 2;
    size_t v22 = (void *)std::ostream::operator<<();
    *(void *)((char *)v22 + *(void *)(*v22 - 24) + 24) = 2;
    std::string::size_type v23 = (void *)std::ostream::operator<<();
    v188.sysname[0] = 46;
    unint64_t v24 = (google::glog_internal_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v188, 1);
    google::glog_internal_namespace_::GetMainThreadPid(v24);
    std::ostream::operator<<();
    uint64_t v25 = (google::glog_internal_namespace_ *)std::stringbuf::str();
    if (*((unsigned char *)this + 216))
    {
        goto LABEL_239;
      goto LABEL_212;
    }
    uint64_t v157 = a4;
    char v158 = a2;
    uint64_t v26 = google::glog_internal_namespace_::ProgramInvocationShortName(v25);
    size_t v27 = strlen(v26);
    if (v27 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v28 = v27;
    if (v27 >= 0x17)
    {
      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v30 = v27 | 7;
      }
      uint64_t v31 = v30 + 1;
      int v29 = (std::string *)operator new(v30 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v28;
      __dst[0].__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    }
    else
    {
      *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v27;
      int v29 = __dst;
      if (!v27)
      {
LABEL_31:
        v29->__r_.__value_.__s.__data_[v28] = 0;
        size_t v179 = 0;
        size_t v180 = 0;
        uint64_t v181 = 0;
        if (uname(&v188)) {
          v188.nodename[0] = 0;
        }
        size_t v32 = (google::glog_internal_namespace_ *)MEMORY[0x23ECF27D0](&v179, v188.nodename);
        uint64_t v33 = (char *)google::glog_internal_namespace_::MyUserName(v32);
        if (v33[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v188, *(const std::string::value_type **)v33, *((void *)v33 + 1));
        }
        else
        {
          long long v34 = *(_OWORD *)v33;
          *(void *)&v188.sysname[16] = *((void *)v33 + 2);
          *(_OWORD *)v188.sysname = v34;
        }
        uint64_t v156 = v12;
        uint64_t v35 = v188.sysname[23];
        if (v188.sysname[23] < 0) {
          uint64_t v35 = *(void *)&v188.sysname[8];
        }
        if (!v35) {
          MEMORY[0x23ECF27D0](&v188, "invalid-user");
        }
        int v36 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst[0].__r_.__value_.__l.__size_;
        }
        unint64_t v38 = size + 1;
        if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        int v155 = a5;
        if (v38 >= 0x17)
        {
          uint64_t v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17) {
            uint64_t v40 = v38 | 7;
          }
          uint64_t v41 = v40 + 1;
          uint64_t v39 = (char *)operator new(v40 + 1);
          size_t v161 = size + 1;
          int64_t v162 = v41 | 0x8000000000000000;
          uint64_t v160 = v39;
        }
        else
        {
          size_t v161 = 0;
          int64_t v162 = 0;
          uint64_t v160 = 0;
          uint64_t v39 = (char *)&v160;
          HIBYTE(v162) = size + 1;
          if (!size) {
            goto LABEL_54;
          }
        }
        if (v36 >= 0) {
          uint64_t v42 = __dst;
        }
        else {
          uint64_t v42 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
        }
        memmove(v39, v42, size);
LABEL_54:
        *(_WORD *)&v39[size] = 46;
        int v43 = SHIBYTE(v162);
        if (v162 >= 0) {
          size_t v44 = HIBYTE(v162);
        }
        else {
          size_t v44 = v161;
        }
        int v45 = SHIBYTE(v181);
        if (v181 >= 0) {
          size_t v46 = HIBYTE(v181);
        }
        else {
          size_t v46 = v180;
        }
        unint64_t v47 = v46 + v44;
        if (v46 + v44 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v47 > 0x16)
        {
          uint64_t v56 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17) {
            uint64_t v56 = v47 | 7;
          }
          uint64_t v57 = v56 + 1;
          uint64_t v48 = (char *)operator new(v56 + 1);
          size_t v164 = v46 + v44;
          int64_t v165 = v57 | 0x8000000000000000;
          uint64_t v163 = v48;
          if (!v44)
          {
LABEL_67:
            int v50 = &v48[v44];
            if (v46)
            {
              if (v45 >= 0) {
                size_t v51 = &v179;
              }
              else {
                size_t v51 = v179;
              }
              memmove(v50, v51, v46);
            }
            v50[v46] = 0;
            int v52 = SHIBYTE(v165);
            if (v165 >= 0) {
              size_t v53 = HIBYTE(v165);
            }
            else {
              size_t v53 = v164;
            }
            unint64_t v54 = v53 + 1;
            if (v53 + 1 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v54 >= 0x17)
            {
              uint64_t v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v54 | 7) != 0x17) {
                uint64_t v58 = v54 | 7;
              }
              uint64_t v59 = v58 + 1;
              char v55 = (char *)operator new(v58 + 1);
              size_t v167 = v53 + 1;
              int64_t v168 = v59 | 0x8000000000000000;
              uint64_t v166 = v55;
            }
            else
            {
              size_t v167 = 0;
              int64_t v168 = 0;
              uint64_t v166 = 0;
              char v55 = (char *)&v166;
              HIBYTE(v168) = v53 + 1;
              if (!v53) {
                goto LABEL_90;
              }
            }
            if (v52 >= 0) {
              uint64_t v60 = &v163;
            }
            else {
              uint64_t v60 = v163;
            }
            memmove(v55, v60, v53);
LABEL_90:
            *(_WORD *)&v55[v53] = 46;
            int v61 = SHIBYTE(v168);
            if (v168 >= 0) {
              size_t v62 = HIBYTE(v168);
            }
            else {
              size_t v62 = v167;
            }
            int v63 = v188.sysname[23];
            if (v188.sysname[23] >= 0) {
              size_t v64 = v188.sysname[23];
            }
            else {
              size_t v64 = *(void *)&v188.sysname[8];
            }
            unint64_t v65 = v64 + v62;
            if (v64 + v62 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v65 > 0x16)
            {
              uint64_t v74 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v65 | 7) != 0x17) {
                uint64_t v74 = v65 | 7;
              }
              uint64_t v75 = v74 + 1;
              size_t v66 = (char *)operator new(v74 + 1);
              size_t v170 = v64 + v62;
              int64_t v171 = v75 | 0x8000000000000000;
              unint64_t v169 = v66;
              if (!v62)
              {
LABEL_103:
                uint64_t v68 = &v66[v62];
                if (v64)
                {
                  if (v63 >= 0) {
                    uint64_t v69 = &v188;
                  }
                  else {
                    uint64_t v69 = *(utsname **)v188.sysname;
                  }
                  memmove(v68, v69, v64);
                }
                v68[v64] = 0;
                int v70 = SHIBYTE(v171);
                if (v171 >= 0) {
                  size_t v71 = HIBYTE(v171);
                }
                else {
                  size_t v71 = v170;
                }
                unint64_t v72 = v71 + 5;
                if (v71 + 5 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                if (v72 >= 0x17)
                {
                  uint64_t v76 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v72 | 7) != 0x17) {
                    uint64_t v76 = v72 | 7;
                  }
                  uint64_t v77 = v76 + 1;
                  uint64_t v73 = operator new(v76 + 1);
                  size_t v173 = v71 + 5;
                  int64_t v174 = v77 | 0x8000000000000000;
                  v172 = v73;
                }
                else
                {
                  size_t v173 = 0;
                  int64_t v174 = 0;
                  v172 = 0;
                  uint64_t v73 = &v172;
                  HIBYTE(v174) = v71 + 5;
                  if (!v71) {
                    goto LABEL_126;
                  }
                }
                if (v70 >= 0) {
                  BOOL v78 = &v169;
                }
                else {
                  BOOL v78 = v169;
                }
                memmove(v73, v78, v71);
LABEL_126:
                strcpy((char *)v73 + v71, ".log.");
                BOOL v79 = google::LogSeverityNames[*((int *)this + 76)];
                int v80 = SHIBYTE(v174);
                if (v174 >= 0) {
                  size_t v81 = HIBYTE(v174);
                }
                else {
                  size_t v81 = v173;
                }
                size_t v82 = strlen(google::LogSeverityNames[*((int *)this + 76)]);
                unint64_t v83 = v81 + v82;
                if (v81 + v82 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                size_t v84 = v82;
                if (v83 > 0x16)
                {
                  uint64_t v92 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v83 | 7) != 0x17) {
                    uint64_t v92 = v83 | 7;
                  }
                  uint64_t v93 = v92 + 1;
                  std::string v85 = (char *)operator new(v92 + 1);
                  size_t v176 = v83;
                  int64_t v177 = v93 | 0x8000000000000000;
                  std::string __p = v85;
                  if (!v81)
                  {
LABEL_136:
                    size_t v87 = &v85[v81];
                    if (v84) {
                      memmove(v87, v79, v84);
                    }
                    v87[v84] = 0;
                    int v88 = SHIBYTE(v177);
                    if (v177 >= 0) {
                      size_t v89 = HIBYTE(v177);
                    }
                    else {
                      size_t v89 = v176;
                    }
                    unint64_t v90 = v89 + 1;
                    if (v89 + 1 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    if (v90 >= 0x17)
                    {
                      uint64_t v94 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17) {
                        uint64_t v94 = v90 | 7;
                      }
                      uint64_t v95 = v94 + 1;
                      p_str = (char *)operator new(v94 + 1);
                      __str.__r_.__value_.__l.__size_ = v89 + 1;
                      __str.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
                    }
                    else
                    {
                      memset(&__str, 0, sizeof(__str));
                      p_str = (char *)&__str;
                      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v89 + 1;
                      if (!v89) {
                        goto LABEL_156;
                      }
                    }
                    if (v88 >= 0) {
                      p_p = &__p;
                    }
                    else {
                      p_p = __p;
                    }
                    memmove(p_str, p_p, v89);
LABEL_156:
                    *(_WORD *)&p_str[v89] = 46;
                    int64_t v97 = std::string::operator=(__dst, &__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__str.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v177) & 0x80000000) == 0)
                      {
LABEL_158:
                        if ((SHIBYTE(v174) & 0x80000000) == 0) {
                          goto LABEL_159;
                        }
                        goto LABEL_232;
                      }
                    }
                    else if ((SHIBYTE(v177) & 0x80000000) == 0)
                    {
                      goto LABEL_158;
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v174) & 0x80000000) == 0)
                    {
LABEL_159:
                      if ((SHIBYTE(v171) & 0x80000000) == 0) {
                        goto LABEL_160;
                      }
                      goto LABEL_233;
                    }
LABEL_232:
                    operator delete(v172);
                    if ((SHIBYTE(v171) & 0x80000000) == 0)
                    {
LABEL_160:
                      if ((SHIBYTE(v168) & 0x80000000) == 0) {
                        goto LABEL_161;
                      }
                      goto LABEL_234;
                    }
LABEL_233:
                    operator delete(v169);
                    if ((SHIBYTE(v168) & 0x80000000) == 0)
                    {
LABEL_161:
                      if ((SHIBYTE(v165) & 0x80000000) == 0) {
                        goto LABEL_162;
                      }
                      goto LABEL_235;
                    }
LABEL_234:
                    operator delete(v166);
                    if ((SHIBYTE(v165) & 0x80000000) == 0)
                    {
LABEL_162:
                      if ((SHIBYTE(v162) & 0x80000000) == 0) {
                        goto LABEL_163;
                      }
LABEL_236:
                      operator delete(v160);
LABEL_163:
                      LoggingDirectories = (const void ***)google::GetLoggingDirectories((google *)v97);
                      BOOL v99 = *LoggingDirectories;
                      if (*LoggingDirectories == LoggingDirectories[1])
                      {
LABEL_207:
                        a5 = v155;
                        uint64_t v12 = v156;
                        a2 = v158;
                        a4 = v157;
                        char v118 = 1;
                        if (v188.sysname[23] < 0) {
                          goto LABEL_208;
                        }
                        goto LABEL_209;
                      }
                      while (1)
                      {
                        int v100 = *((char *)v99 + 23);
                        if (v100 >= 0) {
                          size_t v101 = *((unsigned __int8 *)v99 + 23);
                        }
                        else {
                          size_t v101 = (size_t)v99[1];
                        }
                        unint64_t v102 = v101 + 1;
                        if (v101 + 1 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        if (v102 >= 0x17)
                        {
                          uint64_t v104 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v102 | 7) != 0x17) {
                            uint64_t v104 = v102 | 7;
                          }
                          uint64_t v105 = v104 + 1;
                          char v103 = (char *)operator new(v104 + 1);
                          size_t v176 = v101 + 1;
                          int64_t v177 = v105 | 0x8000000000000000;
                          std::string __p = v103;
                        }
                        else
                        {
                          size_t v176 = 0;
                          int64_t v177 = 0;
                          std::string __p = 0;
                          char v103 = (char *)&__p;
                          HIBYTE(v177) = v101 + 1;
                          if (!v101) {
                            goto LABEL_178;
                          }
                        }
                        if (v100 >= 0) {
                          uint64_t v106 = v99;
                        }
                        else {
                          uint64_t v106 = *v99;
                        }
                        memmove(v103, v106, v101);
LABEL_178:
                        *(_WORD *)&v103[v101] = 47;
                        int v107 = SHIBYTE(v177);
                        if (v177 >= 0) {
                          size_t v108 = HIBYTE(v177);
                        }
                        else {
                          size_t v108 = v176;
                        }
                        int v109 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v110 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v110 = __dst[0].__r_.__value_.__l.__size_;
                        }
                        unint64_t v111 = v110 + v108;
                        if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        if (v111 <= 0x16)
                        {
                          memset(&__str, 0, sizeof(__str));
                          uint64_t v112 = (char *)&__str;
                          *((unsigned char *)&__str.__r_.__value_.__s + 23) = v110 + v108;
                          if (!v108) {
                            goto LABEL_191;
                          }
LABEL_187:
                          if (v107 >= 0) {
                            int v113 = &__p;
                          }
                          else {
                            int v113 = __p;
                          }
                          memmove(v112, v113, v108);
                          goto LABEL_191;
                        }
                        uint64_t v116 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v111 | 7) != 0x17) {
                          uint64_t v116 = v111 | 7;
                        }
                        uint64_t v117 = v116 + 1;
                        uint64_t v112 = (char *)operator new(v116 + 1);
                        __str.__r_.__value_.__l.__size_ = v110 + v108;
                        __str.__r_.__value_.__r.__words[2] = v117 | 0x8000000000000000;
                        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
                        if (v108) {
                          goto LABEL_187;
                        }
LABEL_191:
                        uint64_t v114 = &v112[v108];
                        if (v110)
                        {
                          if (v109 >= 0) {
                            uint64_t v115 = __dst;
                          }
                          else {
                            uint64_t v115 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                          }
                          memmove(v114, v115, v110);
                        }
                        v114[v110] = 0;
                        std::string::operator=((std::string *)((char *)this + 224), &__str);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__str.__r_.__value_.__l.__data_);
                          if ((v107 & 0x80000000) == 0) {
                            goto LABEL_198;
                          }
                        }
                        else if ((v107 & 0x80000000) == 0)
                        {
                          goto LABEL_198;
                        }
                        operator delete(__p);
LABEL_198:
                        {
                          char v118 = 0;
                          a5 = v155;
                          uint64_t v12 = v156;
                          a2 = v158;
                          a4 = v157;
                          if (v188.sysname[23] < 0) {
LABEL_208:
                          }
                            operator delete(*(void **)v188.sysname);
LABEL_209:
                          if (SHIBYTE(v181) < 0)
                          {
                            operator delete(v179);
                            if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
                              goto LABEL_238;
                            }
LABEL_211:
                            if (v118) {
                              goto LABEL_212;
                            }
LABEL_239:
                            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__dst);
                            int64_t v127 = (char *)__dst + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24);
                            if (*((_DWORD *)v127 + 36) == -1)
                            {
                              std::ios_base::getloc((const std::ios_base *)((char *)__dst
                                                                          + *(void *)(__dst[0].__r_.__value_.__r.__words[0]
                                                                                      - 24)));
                              uint64_t v128 = std::locale::use_facet((const std::locale *)&v188, MEMORY[0x263F8C108]);
                              ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 32);
                              std::locale::~locale((std::locale *)&v188);
                            }
                            *((_DWORD *)v127 + 36) = 48;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__dst, (uint64_t)"Log file created at: ", 21);
                            int64_t v129 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 47;
                            BOOL v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)&v188, 1);
                            *(void *)((char *)v130 + *(void *)(*v130 - 24) + 24) = 2;
                            uint64_t v131 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 47;
                            BOOL v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)&v188, 1);
                            *(void *)((char *)v132 + *(void *)(*v132 - 24) + 24) = 2;
                            uint64_t v133 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 32;
                            uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)&v188, 1);
                            *(void *)((char *)v134 + *(void *)(*v134 - 24) + 24) = 2;
                            uint64_t v135 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 58;
                            uint64_t v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)&v188, 1);
                            *(void *)((char *)v136 + *(void *)(*v136 - 24) + 24) = 2;
                            uint64_t v137 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 58;
                            uint64_t v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)&v188, 1);
                            *(void *)((char *)v138 + *(void *)(*v138 - 24) + 24) = 2;
                            uint64_t v139 = (void *)std::ostream::operator<<();
                            v188.sysname[0] = 10;
                            uint64_t v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)&v188, 1);
                            uint64_t v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"Running on machine: ", 20);
                            uint64_t v142 = google::LogDestination::hostname_[23];
                            char v143 = google::LogDestination::hostname_[23];
                            uint64_t v144 = *(void *)&google::LogDestination::hostname_[8];
                            if (google::LogDestination::hostname_[23] >= 0) {
                              uint64_t v145 = google::LogDestination::hostname_[23];
                            }
                            else {
                              uint64_t v145 = *(void *)&google::LogDestination::hostname_[8];
                            }
                            if (!v145)
                            {
                              if (uname(&v188)) {
                                v188.nodename[0] = 0;
                              }
                              MEMORY[0x23ECF27D0](google::LogDestination::hostname_, v188.nodename);
                              uint64_t v142 = google::LogDestination::hostname_[23];
                              char v143 = google::LogDestination::hostname_[23];
                              uint64_t v144 = *(void *)&google::LogDestination::hostname_[8];
                              if (google::LogDestination::hostname_[23] >= 0) {
                                uint64_t v146 = google::LogDestination::hostname_[23];
                              }
                              else {
                                uint64_t v146 = *(void *)&google::LogDestination::hostname_[8];
                              }
                              if (!v146)
                              {
                                MEMORY[0x23ECF27D0](google::LogDestination::hostname_, "(unknown)");
                                uint64_t v142 = google::LogDestination::hostname_[23];
                                uint64_t v144 = *(void *)&google::LogDestination::hostname_[8];
                                char v143 = google::LogDestination::hostname_[23];
                              }
                            }
                            if (v143 >= 0) {
                              uint64_t v147 = google::LogDestination::hostname_;
                            }
                            else {
                              uint64_t v147 = *(char **)google::LogDestination::hostname_;
                            }
                            if (v143 >= 0) {
                              uint64_t v148 = v142;
                            }
                            else {
                              uint64_t v148 = v144;
                            }
                            unsigned int v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v147, v148);
                            v188.sysname[0] = 10;
                            uint64_t v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)&v188, 1);
                            uint64_t v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu ", 44);
                            unint64_t v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"threadid file:line] msg", 23);
                            v188.sysname[0] = 10;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)&v188, 1);
                            std::stringbuf::str();
                            if (v188.sysname[23] >= 0) {
                              int v153 = v188.sysname[23];
                            }
                            else {
                              int v153 = *(_DWORD *)&v188.sysname[8];
                            }
                            if (v188.sysname[23] >= 0) {
                              uint64_t v154 = &v188;
                            }
                            else {
                              uint64_t v154 = *(utsname **)v188.sysname;
                            }
                            fwrite(v154, 1uLL, v153, *v12);
                            *((_DWORD *)this + 79) += v153;
                            *((_DWORD *)this + 77) += v153;
                            if (v188.sysname[23] < 0) {
                              operator delete(*(void **)v188.sysname);
                            }
                            std::ostringstream::~ostringstream((uint64_t)__dst);
                            char v119 = 1;
                            if (v183 < 0) {
                              goto LABEL_213;
                            }
                          }
                          else
                          {
                            if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                              goto LABEL_211;
                            }
LABEL_238:
                            operator delete(__dst[0].__r_.__value_.__l.__data_);
                            if ((v118 & 1) == 0) {
                              goto LABEL_239;
                            }
LABEL_212:
                            char v119 = 0;
                            if (v183 < 0) {
LABEL_213:
                            }
                              operator delete(v182[0]);
                          }
                          uint64_t HasChanged = std::ostringstream::~ostringstream((uint64_t)v184);
                          if (v119)
                          {
LABEL_215:
                            if (google::stop_writing)
                            {
                              if (google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)HasChanged) >= *((void *)this + 41)) {
                                google::stop_writing = 0;
                              }
                            }
                            else
                            {
                              *__error() = 0;
                              uint64_t v120 = (google::glog_internal_namespace_ *)fwrite(a4, 1uLL, a5, *v12);
                              if (fLB::FLAGS_stop_logging_if_full_disk
                                && (uint64_t v120 = (google::glog_internal_namespace_ *)__error(), *(_DWORD *)v120 == 28))
                              {
                                google::stop_writing = 1;
                              }
                              else
                              {
                                *((_DWORD *)this + 79) += a5;
                                unsigned int v121 = *((_DWORD *)this + 77) + a5;
                                *((_DWORD *)this + 77) = v121;
                                if ((a2 & 1) != 0
                                  || v121 > 0xF423F
                                  || google::glog_internal_namespace_::CycleClock_Now(v120) >= *((void *)this + 41))
                                {
                                  uint64_t v122 = *v12;
                                  if (*v12)
                                  {
                                    uint64_t v122 = (FILE *)fflush(v122);
                                    *((_DWORD *)this + 77) = 0;
                                  }
                                  int v123 = fLI::FLAGS_logbufsecs;
                                  __darwin_time_t v124 = google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)v122);
                                  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)(1000000 * v123));
                                  *((void *)this + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v125 + v124;
                                }
                              }
                            }
                          }
                          goto LABEL_227;
                        }
                        v99 += 3;
                        if (v99 == LoggingDirectories[1]) {
                          goto LABEL_207;
                        }
                      }
                    }
LABEL_235:
                    operator delete(v163);
                    if ((SHIBYTE(v162) & 0x80000000) == 0) {
                      goto LABEL_163;
                    }
                    goto LABEL_236;
                  }
                }
                else
                {
                  size_t v176 = 0;
                  int64_t v177 = 0;
                  std::string __p = 0;
                  std::string v85 = (char *)&__p;
                  HIBYTE(v177) = v81 + v82;
                  if (!v81) {
                    goto LABEL_136;
                  }
                }
                if (v80 >= 0) {
                  unint64_t v86 = &v172;
                }
                else {
                  unint64_t v86 = v172;
                }
                memmove(v85, v86, v81);
                goto LABEL_136;
              }
            }
            else
            {
              size_t v170 = 0;
              int64_t v171 = 0;
              unint64_t v169 = 0;
              size_t v66 = (char *)&v169;
              HIBYTE(v17std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v64 + v62;
              if (!v62) {
                goto LABEL_103;
              }
            }
            if (v61 >= 0) {
              size_t v67 = &v166;
            }
            else {
              size_t v67 = v166;
            }
            memmove(v66, v67, v62);
            goto LABEL_103;
          }
        }
        else
        {
          size_t v164 = 0;
          int64_t v165 = 0;
          uint64_t v163 = 0;
          uint64_t v48 = (char *)&v163;
          HIBYTE(v16std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v46 + v44;
          if (!v44) {
            goto LABEL_67;
          }
        }
        if (v43 >= 0) {
          uint64_t v49 = &v160;
        }
        else {
          uint64_t v49 = v160;
        }
        memmove(v48, v49, v44);
        goto LABEL_67;
      }
    }
    memmove(v29, v26, v28);
    goto LABEL_31;
  }
LABEL_227:
  uint64_t result = v186;
  if (LOBYTE(v186[1].__sig))
  {
    uint64_t result = (pthread_rwlock_t *)pthread_rwlock_unlock(v186);
    if (result) {
      abort();
    }
  }
  return result;
}

void sub_23CB5C1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x377]) < 0)
  {
    operator delete((void *)STACK[0x360]);
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a73 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_8:
      if (SLOBYTE(STACK[0x20F]) < 0) {
        operator delete(a74);
      }
      std::ostringstream::~ostringstream((uint64_t)&STACK[0x210]);
      glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)&STACK[0x350]);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a15);
    goto LABEL_8;
  }
  operator delete(a72);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void google::anonymous namespace'::LogFileObject::Flush(google::_anonymous_namespace_::LogFileObject *this)
{
  int v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((unsigned char *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8))) {
    goto LABEL_8;
  }
  uint64_t v3 = (FILE *)*((void *)this + 37);
  if (v3)
  {
    uint64_t v3 = (FILE *)fflush(v3);
    *((_DWORD *)this + 77) = 0;
  }
  int v4 = fLI::FLAGS_logbufsecs;
  __darwin_time_t v5 = google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)v3);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)(1000000 * v4));
  *((void *)this + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v6 + v5;
  if (*((unsigned char *)this + 208))
  {
    if (pthread_rwlock_unlock(v2)) {
LABEL_8:
    }
      abort();
  }
}

void sub_23CB5C544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

uint64_t google::anonymous namespace'::LogFileObject::LogSize(google::_anonymous_namespace_::LogFileObject *this)
{
  int v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((unsigned char *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8))
    || (uint64_t v3 = *((unsigned int *)this + 79), *((unsigned char *)this + 208)) && pthread_rwlock_unlock(v2))
  {
    abort();
  }
  return v3;
}

uint64_t google::anonymous namespace'::LogFileObject::CreateLogfile(void *a1, const void **a2)
{
  int v2 = *((char *)a1 + 247);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 247);
  }
  else {
    size_t v3 = a1[29];
  }
  int v4 = *((char *)a1 + 295);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 295);
  }
  else {
    size_t v5 = a1[35];
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 <= 0x16)
  {
    size_t v87 = 0;
    int64_t v88 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v88) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v10 = v6 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v87 = v5 + v3;
  int64_t v88 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      uint64_t v12 = a1 + 28;
    }
    else {
      uint64_t v12 = (const void *)a1[28];
    }
    memmove(p_dst, v12, v3);
  }
LABEL_18:
  std::string::size_type v13 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      int v14 = a1 + 34;
    }
    else {
      int v14 = (const void *)a1[34];
    }
    memmove(v13, v14, v5);
  }
  v13[v5] = 0;
  int v15 = SHIBYTE(v88);
  if (v88 >= 0) {
    size_t v16 = HIBYTE(v88);
  }
  else {
    size_t v16 = v87;
  }
  int v17 = *((char *)a2 + 23);
  if (v17 >= 0) {
    size_t v18 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v18 = (size_t)a2[1];
  }
  unint64_t v19 = v18 + v16;
  if (v18 + v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 <= 0x16)
  {
    size_t v90 = 0;
    int64_t v91 = 0;
    size_t v89 = 0;
    uint64_t v20 = (char *)&v89;
    HIBYTE(v9std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v18 + v16;
    if (!v16) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  uint64_t v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v29 = v19 | 7;
  }
  uint64_t v30 = v29 + 1;
  uint64_t v20 = (char *)operator new(v29 + 1);
  size_t v90 = v18 + v16;
  int64_t v91 = v30 | 0x8000000000000000;
  size_t v89 = v20;
  if (v16)
  {
LABEL_32:
    if (v15 >= 0) {
      uint64_t v21 = (void **)&__dst;
    }
    else {
      uint64_t v21 = __dst;
    }
    memmove(v20, v21, v16);
  }
LABEL_36:
  size_t v22 = &v20[v16];
  if (v18)
  {
    if (v17 >= 0) {
      std::string::size_type v23 = a2;
    }
    else {
      std::string::size_type v23 = *a2;
    }
    memmove(v22, v23, v18);
  }
  v22[v18] = 0;
  if (v15 < 0) {
    operator delete(__dst);
  }
  if (v91 >= 0) {
    unint64_t v24 = (char *)&v89;
  }
  else {
    unint64_t v24 = (char *)v89;
  }
  int v25 = open(v24, 2561, fLI::FLAGS_logfile_mode);
  int v26 = v25;
  if (v25 == -1)
  {
    uint64_t v31 = 0;
    if (SHIBYTE(v91) < 0) {
      goto LABEL_164;
    }
    return v31;
  }
  fcntl(v25, 2, 1);
  size_t v27 = fdopen(v26, "a");
  a1[37] = v27;
  if (!v27)
  {
    close(v26);
    unlink(v24);
    uint64_t v31 = 0;
    if (SHIBYTE(v91) < 0) {
      goto LABEL_164;
    }
    return v31;
  }
  size_t v28 = *((unsigned __int8 *)a1 + 271);
  if (*((char *)a1 + 271) < 0)
  {
    if (!a1[32]) {
      goto LABEL_163;
    }
LABEL_60:
    size_t v32 = strrchr(v24, 47);
    if ((v28 & 0x80u) == 0) {
      size_t v33 = v28;
    }
    else {
      size_t v33 = a1[32];
    }
    unint64_t v34 = v33 + 1;
    if (v33 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v32;
    if (v34 >= 0x17)
    {
      uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v37 = v34 | 7;
      }
      uint64_t v38 = v37 + 1;
      p_p = (std::string *)operator new(v37 + 1);
      __p.__r_.__value_.__l.__size_ = v33 + 1;
      __p.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v33 + 1;
      if (!v33) {
        goto LABEL_74;
      }
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v39 = a1 + 31;
    }
    else {
      uint64_t v39 = (const void *)a1[31];
    }
    memmove(p_p, v39, v33);
LABEL_74:
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v33) = 46;
    uint64_t v40 = google::LogSeverityNames[*((int *)a1 + 76)];
    int v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    size_t v43 = strlen(v40);
    unint64_t v44 = size + v43;
    if (size + v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v45 = v43;
    if (v44 > 0x16)
    {
      uint64_t v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v49 = v44 | 7;
      }
      uint64_t v50 = v49 + 1;
      size_t v46 = (void **)operator new(v49 + 1);
      size_t v87 = v44;
      int64_t v88 = v50 | 0x8000000000000000;
      std::string __dst = v46;
      if (!size)
      {
LABEL_84:
        uint64_t v48 = (char *)v46 + size;
        if (v45) {
          memmove(v48, v40, v45);
        }
        v48[v45] = 0;
        if (v41 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          if (!v35) {
            goto LABEL_104;
          }
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          if (!v35) {
            goto LABEL_104;
          }
        }
        unint64_t v51 = v35 - v24 + 1;
        if (v51 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v51 >= 0x17)
        {
          uint64_t v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v51 | 7) != 0x17) {
            uint64_t v53 = v51 | 7;
          }
          uint64_t v54 = v53 + 1;
          p_str = operator new(v53 + 1);
          __str.__r_.__value_.__l.__size_ = v35 - v24 + 1;
          __str.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
        }
        else
        {
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = (_BYTE)v35 - (_BYTE)v24 + 1;
          p_str = &__str;
          if (v35 - v24 == -1)
          {
LABEL_102:
            p_str[v51] = 0;
            std::string::operator=(&__p, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_104:
            if (v88 >= 0) {
              char v55 = (const std::string::value_type *)&__dst;
            }
            else {
              char v55 = (const std::string::value_type *)__dst;
            }
            if (v88 >= 0) {
              std::string::size_type v56 = HIBYTE(v88);
            }
            else {
              std::string::size_type v56 = v87;
            }
            std::string::append(&__p, v55, v56);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &__p;
            }
            else {
              uint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            unlink((const char *)v57);
            if (v35) {
              uint64_t v58 = v35 + 1;
            }
            else {
              uint64_t v58 = v24;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v59 = &__p;
            }
            else {
              uint64_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            symlink(v58, (const char *)v59);
            int v60 = byte_268BCCA87;
            if (byte_268BCCA87 >= 0) {
              size_t v61 = byte_268BCCA87;
            }
            else {
              size_t v61 = qword_268BCCA78;
            }
            if (!v61) {
              goto LABEL_161;
            }
            unint64_t v62 = v61 + 1;
            if (v61 + 1 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v62 > 0x16)
            {
              uint64_t v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v62 | 7) != 0x17) {
                uint64_t v64 = v62 | 7;
              }
              uint64_t v65 = v64 + 1;
              int v63 = (char *)operator new(v64 + 1);
              size_t v82 = v61 + 1;
              int64_t v83 = v65 | 0x8000000000000000;
              size_t v81 = v63;
            }
            else
            {
              size_t v82 = 0;
              int64_t v83 = 0;
              size_t v81 = 0;
              int v63 = (char *)&v81;
              HIBYTE(v83) = v61 + 1;
            }
            if (v60 >= 0) {
              size_t v66 = &fLS::FLAGS_log_link_buf;
            }
            else {
              size_t v66 = (uint64_t *)fLS::FLAGS_log_link_buf;
            }
            memmove(v63, v66, v61);
            *(_WORD *)&v63[v61] = 47;
            int v67 = SHIBYTE(v83);
            if (v83 >= 0) {
              size_t v68 = HIBYTE(v83);
            }
            else {
              size_t v68 = v82;
            }
            int v69 = SHIBYTE(v88);
            if (v88 >= 0) {
              size_t v70 = HIBYTE(v88);
            }
            else {
              size_t v70 = v87;
            }
            unint64_t v71 = v70 + v68;
            if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v71 > 0x16)
            {
              uint64_t v79 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v71 | 7) != 0x17) {
                uint64_t v79 = v71 | 7;
              }
              uint64_t v80 = v79 + 1;
              unint64_t v72 = (char *)operator new(v79 + 1);
              __str.__r_.__value_.__l.__size_ = v70 + v68;
              __str.__r_.__value_.__r.__words[2] = v80 | 0x8000000000000000;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
              if (!v68) {
                goto LABEL_145;
              }
            }
            else
            {
              memset(&__str, 0, sizeof(__str));
              unint64_t v72 = (char *)&__str;
              *((unsigned char *)&__str.__r_.__value_.__s + 23) = v70 + v68;
              if (!v68)
              {
LABEL_145:
                uint64_t v74 = &v72[v68];
                if (v70)
                {
                  if (v69 >= 0) {
                    uint64_t v75 = (void **)&__dst;
                  }
                  else {
                    uint64_t v75 = __dst;
                  }
                  memmove(v74, v75, v70);
                }
                v74[v70] = 0;
                std::string::operator=(&__p, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v67 < 0) {
                  operator delete(v81);
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v76 = &__p;
                }
                else {
                  uint64_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                unlink((const char *)v76);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v77 = &__p;
                }
                else {
                  uint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                symlink(v24, (const char *)v77);
LABEL_161:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v88) & 0x80000000) == 0) {
                    goto LABEL_163;
                  }
                }
                else if ((SHIBYTE(v88) & 0x80000000) == 0)
                {
                  goto LABEL_163;
                }
                operator delete(__dst);
                uint64_t v31 = 1;
                if ((SHIBYTE(v91) & 0x80000000) == 0) {
                  return v31;
                }
                goto LABEL_164;
              }
            }
            if (v67 >= 0) {
              uint64_t v73 = &v81;
            }
            else {
              uint64_t v73 = v81;
            }
            memmove(v72, v73, v68);
            goto LABEL_145;
          }
        }
        memmove(p_str, v24, v35 - v24 + 1);
        goto LABEL_102;
      }
    }
    else
    {
      size_t v87 = 0;
      int64_t v88 = 0;
      std::string __dst = 0;
      size_t v46 = (void **)&__dst;
      HIBYTE(v88) = size + v43;
      if (!size) {
        goto LABEL_84;
      }
    }
    if (v41 >= 0) {
      unint64_t v47 = &__p;
    }
    else {
      unint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(v46, v47, size);
    goto LABEL_84;
  }
  if (*((unsigned char *)a1 + 271)) {
    goto LABEL_60;
  }
LABEL_163:
  uint64_t v31 = 1;
  if (SHIBYTE(v91) < 0) {
LABEL_164:
  }
    operator delete(v89);
  return v31;
}

void sub_23CB5CD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(a10);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void google::LogMessage::LogStream::~LogStream(google::LogMessage::LogStream *this)
{
  *(void *)this = &unk_26F0BCC88;
  uint64_t v1 = (char *)this + 88;
  *((void *)this + 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = &unk_26F0BCCB0;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](v1);
}

{
  char *v1;
  uint64_t vars8;

  *(void *)this = &unk_26F0BCC88;
  uint64_t v1 = (char *)this + 88;
  *((void *)this + 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = &unk_26F0BCCB0;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23ECF2B10](v1);

  JUMPOUT(0x23ECF2BC0);
}

void sub_23CB5CE84(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'google::LogMessage::LogStream::~LogStream(google::LogMessage::LogStream *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = &unk_26F0BCC88;
  v1[11] = &unk_26F0BCCB0;
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x23ECF2B10);
}

{
  google::LogMessage::LogStream::~LogStream((google::LogMessage::LogStream *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
}

void sub_23CB5CF64(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2B10](v1);
  _Unwind_Resume(a1);
}

void sub_23CB5D048(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C4059880648);
  _Unwind_Resume(a1);
}

void google::base_logging::LogStreamBuf::~LogStreamBuf(google::base_logging::LogStreamBuf *this)
{
  std::streambuf::~streambuf();

  JUMPOUT(0x23ECF2BC0);
}

void sub_23CB5D108(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0xB1C400BA862E9);
  _Unwind_Resume(a1);
}

uint64_t google::base_logging::LogStreamBuf::overflow(google::base_logging::LogStreamBuf *this, uint64_t a2)
{
  return a2;
}

std::string *google::ShellEscape(std::string *a1, std::string *this)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&this->__r_.__value_.__s + 23))
    {
      size_t v5 = this;
      goto LABEL_6;
    }
LABEL_11:
    if (std::string::find(this, 39, 0) == -1)
    {
      MEMORY[0x23ECF27D0](a1, "'");
      int v18 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v18 >= 0) {
        unint64_t v19 = this;
      }
      else {
        unint64_t v19 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (v18 >= 0) {
        std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = this->__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v19, size);
      uint64_t v10 = "'";
    }
    else
    {
      MEMORY[0x23ECF27D0](a1, "\"");
      BOOL v7 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v8 & 0x80u) != 0) {
        std::string::size_type v8 = this->__r_.__value_.__l.__size_;
      }
      if (v8)
      {
        std::string::size_type v9 = 0;
        uint64_t v10 = "\"";
        do
        {
          if (v7) {
            uint64_t v11 = (std::string *)this->__r_.__value_.__r.__words[0];
          }
          else {
            uint64_t v11 = this;
          }
          unsigned int v12 = v11->__r_.__value_.__s.__data_[v9] - 34;
          BOOL v13 = v12 > 0x3E;
          uint64_t v14 = (1 << v12) & 0x4400000000000005;
          if (!v13 && v14 != 0) {
            std::string::append(a1, "\\"");
          }
          std::string::append(a1, this, v9++, 1uLL);
          BOOL v7 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          std::string::size_type v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          if ((v16 & 0x80u) != 0) {
            std::string::size_type v16 = this->__r_.__value_.__l.__size_;
          }
        }
        while (v9 < v16);
      }
      else
      {
        uint64_t v10 = "\"";
      }
    }
    return std::string::append(a1, v10);
  }
  std::string::size_type v4 = this->__r_.__value_.__l.__size_;
  if (!v4) {
    goto LABEL_11;
  }
  size_t v5 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_6:
  uint64_t v6 = 0;
  while (memchr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-_.=/:,@", v5->__r_.__value_.__s.__data_[v6], 0x47uLL))
  {
    if (v4 == ++v6) {
      return std::string::operator=(a1, this);
    }
  }
  if (v6 != -1) {
    goto LABEL_11;
  }
  return std::string::operator=(a1, this);
}

void sub_23CB5D308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  size_t v3 = *a1;
  std::string::size_type v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v9 = (char *)operator new(24 * v8);
  }
  else
  {
    std::string::size_type v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v20 = &v9[24 * v8];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    unint64_t v19 = v10 + 1;
    if (v4 != v3) {
      goto LABEL_13;
    }
LABEL_20:
    std::string::size_type v16 = v3;
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  size_t v3 = *a1;
  std::string::size_type v4 = a1[1];
  uint64_t v11 = v10 + 1;
  unint64_t v19 = v10 + 1;
  if (v4 == *a1) {
    goto LABEL_20;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v14 = &v10[v12 / 0x18 - 1];
    int v15 = (const std::string::value_type **)&v4[v12 - 24];
    if (v4[v12 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v15, *(void *)&v4[v12 - 16]);
    }
    else
    {
      long long v13 = *(_OWORD *)v15;
      v10[v12 / 0x18 - 1].__r_.__value_.__r.__words[2] = *(void *)&v4[v12 - 8];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v13;
    }
    v12 -= 24;
  }
  while (&v4[v12] != v3);
  std::string::size_type v16 = *a1;
  size_t v3 = a1[1];
  uint64_t v10 = (std::string *)((char *)v10 + v12);
  uint64_t v11 = v19;
LABEL_21:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v20;
  if (v3 != v16)
  {
    int v17 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v17 + 23) < 0) {
        operator delete(*v17);
      }
      v17 -= 3;
    }
    while (v17 + 3 != (void **)v16);
    size_t v3 = v16;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_23CB5D51C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string>(char **a1, uint64_t a2)
{
  size_t v3 = *a1;
  std::__split_buffer<std::string>::pointer v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v9 = (char *)operator new(24 * v8);
  }
  else
  {
    std::string::size_type v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v20 = &v9[24 * v8];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    unint64_t v19 = v10 + 1;
    if (v4 != v3) {
      goto LABEL_13;
    }
LABEL_20:
    std::string::size_type v16 = v3;
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  size_t v3 = *a1;
  std::__split_buffer<std::string>::pointer v4 = a1[1];
  uint64_t v11 = v10 + 1;
  unint64_t v19 = v10 + 1;
  if (v4 == *a1) {
    goto LABEL_20;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v14 = &v10[v12 / 0x18 - 1];
    int v15 = (const std::string::value_type **)&v4[v12 - 24];
    if (v4[v12 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v15, *(void *)&v4[v12 - 16]);
    }
    else
    {
      long long v13 = *(_OWORD *)v15;
      v10[v12 / 0x18 - 1].__r_.__value_.__r.__words[2] = *(void *)&v4[v12 - 8];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v13;
    }
    v12 -= 24;
  }
  while (&v4[v12] != v3);
  std::string::size_type v16 = *a1;
  size_t v3 = a1[1];
  uint64_t v10 = (std::string *)((char *)v10 + v12);
  uint64_t v11 = v19;
LABEL_21:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v20;
  if (v3 != v16)
  {
    int v17 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v17 + 23) < 0) {
        operator delete(*v17);
      }
      v17 -= 3;
    }
    while (v17 + 3 != (void **)v16);
    size_t v3 = v16;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_23CB5D7BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t _GLOBAL__sub_I_logging_cc()
{
  uint64_t v0 = getenv("GLOG_logtostderr");
  if (v0 || (uint64_t v0 = getenv("GOOGLE_LOGTOSTDERR")) != 0)
  {
    fLB::FLAGS_logtostderr = memchr("tTyY1", *v0, 6uLL) != 0;
    uint64_t v1 = getenv("GLOG_alsologtostderr");
    if (v1) {
      goto LABEL_8;
    }
  }
  else
  {
    fLB::FLAGS_logtostderr = 0;
    uint64_t v1 = getenv("GLOG_alsologtostderr");
    if (v1)
    {
LABEL_8:
      fLB::FLAGS_alsologtostderr = memchr("tTyY1", *v1, 6uLL) != 0;
      int v2 = getenv("GLOG_colorlogtostderr");
      if (!v2) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  uint64_t v1 = getenv("GOOGLE_ALSOLOGTOSTDERR");
  if (v1) {
    goto LABEL_8;
  }
  fLB::FLAGS_alsologtostderr = 0;
  int v2 = getenv("GLOG_colorlogtostderr");
  if (!v2)
  {
LABEL_6:
    BOOL v3 = 0;
    goto LABEL_10;
  }
LABEL_9:
  BOOL v3 = memchr("tTyY1", *v2, 6uLL) != 0;
LABEL_10:
  fLB::FLAGS_colorlogtostderr = v3;
  std::__split_buffer<std::string>::pointer v4 = getenv("GLOG_alsologtoemail");
  if (v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = "";
  }
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = fLS::FLAGS_alsologtoemail_buf;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = (char *)operator new(v9 + 1);
    *(void *)&fLS::FLAGS_alsologtoemail_buf[8] = v7;
    *(void *)&fLS::FLAGS_alsologtoemail_buf[16] = v10 | 0x8000000000000000;
    *(void *)fLS::FLAGS_alsologtoemail_buf = v11;
    unint64_t v8 = v11;
    goto LABEL_20;
  }
  fLS::FLAGS_alsologtoemail_buf[23] = v6;
  if (v6) {
LABEL_20:
  }
    memmove(v8, v5, v7);
  v8[v7] = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], fLS::FLAGS_alsologtoemail_buf, &dword_23CB1E000);
  unint64_t v12 = getenv("GLOG_log_prefix");
  if (v12)
  {
    fLB::FLAGS_log_prefix = memchr("tTyY1", *v12, 6uLL) != 0;
    long long v13 = getenv("GLOG_minloglevel");
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  fLB::FLAGS_log_prefix = 1;
  long long v13 = getenv("GLOG_minloglevel");
  if (v13) {
LABEL_23:
  }
    LODWORD(v13) = strtol(v13, 0, 10);
LABEL_24:
  fLI::FLAGS_minloglevel = (int)v13;
  uint64_t v14 = getenv("GLOG_logbuflevel");
  if (v14) {
    LODWORD(v14) = strtol(v14, 0, 10);
  }
  fLI::FLAGS_logbuflevel = (int)v14;
  int v15 = getenv("GLOG_logbufsecs");
  if (v15)
  {
    fLI::FLAGS_logbufsecs = strtol(v15, 0, 10);
    std::string::size_type v16 = getenv("GLOG_logemaillevel");
    if (v16)
    {
LABEL_28:
      int v17 = strtol(v16, 0, 10);
      goto LABEL_33;
    }
  }
  else
  {
    fLI::FLAGS_logbufsecs = 30;
    std::string::size_type v16 = getenv("GLOG_logemaillevel");
    if (v16) {
      goto LABEL_28;
    }
  }
  int v17 = 999;
LABEL_33:
  fLI::FLAGS_logemaillevel = v17;
  int v18 = getenv("GLOG_logmailer");
  if (v18) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = "/bin/mail";
  }
  size_t v20 = strlen(v19);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    size_t v22 = (uint64_t *)operator new(v23 + 1);
    qword_26AEE2018 = v21;
    unk_26AEE2020 = v24 | 0x8000000000000000;
    fLS::FLAGS_logmailer_buf = (uint64_t)v22;
    goto LABEL_43;
  }
  size_t v22 = &fLS::FLAGS_logmailer_buf;
  byte_26AEE2027 = v20;
  if (v20) {
LABEL_43:
  }
    memmove(v22, v19, v21);
  *((unsigned char *)v22 + v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &fLS::FLAGS_logmailer_buf, &dword_23CB1E000);
  int v25 = getenv("GLOG_logfile_mode");
  if (v25) {
    int v26 = strtol(v25, 0, 10);
  }
  else {
    int v26 = 436;
  }
  fLI::FLAGS_logfile_mode = v26;
  size_t v27 = getenv("GLOG_log_dir");
  if (!v27)
  {
    unint64_t v44 = getenv("GOOGLE_LOG_DIR");
    if (!v44 || (size_t v27 = v44, !*v44))
    {
      size_t v45 = getenv("TEST_TMPDIR");
      if (!v45 || (size_t v27 = v45, !*v45)) {
        size_t v27 = "";
      }
    }
  }
  size_t v28 = strlen(v27);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  uint64_t v30 = &fLS::FLAGS_log_dir_buf;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    size_t v33 = (uint64_t *)operator new(v31 + 1);
    qword_268BCCA60 = v29;
    unk_268BCCA68 = v32 | 0x8000000000000000;
    fLS::FLAGS_log_dir_buf = (uint64_t)v33;
    uint64_t v30 = v33;
    goto LABEL_55;
  }
  byte_268BCCA6F = v28;
  if (v28) {
LABEL_55:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &fLS::FLAGS_log_dir_buf, &dword_23CB1E000);
  unint64_t v34 = getenv("GLOG_log_link");
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = "";
  }
  size_t v36 = strlen(v35);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = (uint64_t *)operator new(v39 + 1);
    qword_268BCCA78 = v37;
    unk_268BCCA80 = v40 | 0x8000000000000000;
    fLS::FLAGS_log_link_buf = (uint64_t)v38;
    goto LABEL_66;
  }
  uint64_t v38 = &fLS::FLAGS_log_link_buf;
  byte_268BCCA87 = v36;
  if (v36) {
LABEL_66:
  }
    memmove(v38, v35, v37);
  *((unsigned char *)v38 + v37) = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &fLS::FLAGS_log_link_buf, &dword_23CB1E000);
  int v41 = getenv("GLOG_max_log_size");
  if (v41)
  {
    fLI::FLAGS_max_log_std::string::size_type size = strtol(v41, 0, 10);
    uint64_t v42 = getenv("GLOG_stop_logging_if_full_disk");
    if (v42)
    {
LABEL_69:
      BOOL v43 = memchr("tTyY1", *v42, 6uLL) != 0;
      goto LABEL_77;
    }
  }
  else
  {
    fLI::FLAGS_max_log_std::string::size_type size = 1800;
    uint64_t v42 = getenv("GLOG_stop_logging_if_full_disk");
    if (v42) {
      goto LABEL_69;
    }
  }
  BOOL v43 = 0;
LABEL_77:
  fLB::FLAGS_stop_logging_if_full_disk = v43;
  size_t v46 = getenv("GLOG_log_backtrace_at");
  if (v46) {
    unint64_t v47 = v46;
  }
  else {
    unint64_t v47 = "";
  }
  size_t v48 = strlen(v47);
  if (v48 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v49 = v48;
  if (v48 >= 0x17)
  {
    uint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17) {
      uint64_t v51 = v48 | 7;
    }
    uint64_t v52 = v51 + 1;
    uint64_t v50 = (uint64_t *)operator new(v51 + 1);
    qword_268BCCA98 = v49;
    unk_268BCCAA0 = v52 | 0x8000000000000000;
    fLS::FLAGS_log_backtrace_at_buf = (uint64_t)v50;
    goto LABEL_87;
  }
  uint64_t v50 = &fLS::FLAGS_log_backtrace_at_buf;
  byte_268BCCAA7 = v48;
  if (v48) {
LABEL_87:
  }
    memmove(v50, v47, v49);
  *((unsigned char *)v50 + v49) = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &fLS::FLAGS_log_backtrace_at_buf, &dword_23CB1E000);
  byte_26AED2170 = 1;
  if (pthread_rwlock_init(&stru_26AED20A8, 0)) {
    goto LABEL_108;
  }
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_26AED20A8, &dword_23CB1E000);
  qword_268BCCAD0 = 0;
  unk_268BCCAD8 = 0;
  google::LogDestination::addresses_ = 0;
  uint64_t v53 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &google::LogDestination::addresses_, &dword_23CB1E000);
  *(void *)&google::LogDestination::hostname_[8] = 0;
  *(void *)&google::LogDestination::hostname_[16] = 0;
  *(void *)google::LogDestination::hostname_ = 0;
  __cxa_atexit(v53, google::LogDestination::hostname_, &dword_23CB1E000);
  byte_26AEE20F0 = 1;
  if (pthread_rwlock_init(&google::LogDestination::sink_mutex_, 0)) {
    goto LABEL_108;
  }
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &google::LogDestination::sink_mutex_, &dword_23CB1E000);
  uint64_t v54 = getenv("TERM");
  if (v54)
  {
    char v55 = v54;
    char v56 = *v54;
    if (*v54) {
      char v56 = !strcmp(v54, "xterm")
    }
         || !strcmp(v55, "xterm-color")
         || !strcmp(v55, "xterm-256color")
         || !strcmp(v55, "screen-256color")
         || !strcmp(v55, "konsole")
         || !strcmp(v55, "konsole-16color")
         || !strcmp(v55, "konsole-256color")
         || !strcmp(v55, "screen")
         || !strcmp(v55, "linux")
         || strcmp(v55, "cygwin") == 0;
  }
  else
  {
    char v56 = 0;
  }
  google::LogDestination::terminal_supports_color_ = v56;
  byte_26AED2240 = 1;
  if (pthread_rwlock_init(&stru_26AED2178, 0)) {
LABEL_108:
  }
    abort();
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_26AED2178, &dword_23CB1E000);
  qword_26AED2348 = 0;
  dword_26AED2350 = 0;
  qword_26AED2358 = 0;
  dword_26AED2460 = 0;
  uint64_t v57 = 0x7538u;
  google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)((char *)&google::fatal_msg_data_exclusive + v57), byte_26AED9B24, 30000, 0);
  __cxa_atexit((void (*)(void *))google::LogMessage::LogMessageData::~LogMessageData, &google::fatal_msg_data_exclusive, &dword_23CB1E000);
  google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)((char *)&google::fatal_msg_data_shared + v57), byte_26AED246C, 30000, 0);

  return __cxa_atexit((void (*)(void *))google::LogMessage::LogMessageData::~LogMessageData, &google::fatal_msg_data_shared, &dword_23CB1E000);
}

google::glog_internal_namespace_ *google::RawLog__(google::glog_internal_namespace_ *this, google::glog_internal_namespace_ *a2, const char *a3, const char *a4, const char *a5, ...)
{
  va_start(va, a5);
  int v8 = (int)this;
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (fLB::FLAGS_logtostderr) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = fLI::FLAGS_stderrthreshold <= (int)this;
  }
  BOOL v10 = !v9 && fLB::FLAGS_alsologtostderr == 0;
  if (!v10
    || (this = (google::glog_internal_namespace_ *)google::glog_internal_namespace_::IsGoogleLoggingInitialized(this),
        (this & 1) == 0))
  {
    *(void *)&v24[4] = __s;
    *(_DWORD *)uint64_t v24 = 3000;
    uint64_t v11 = *google::LogSeverityNames[v8];
    pthread_t TID = google::glog_internal_namespace_::GetTID(this);
    uint64_t v14 = google::glog_internal_namespace_::const_basename(a2, v13);
    std::string::size_type v16 = *(char **)&v24[4];
    int v17 = *(_DWORD *)v24;
    size_t v18 = *(int *)v24;
    int v19 = vsnprintf(*(char **)&v24[4], *(int *)v24, a4, va);
    size_t v21 = "RAW_LOG ERROR: The Message was too long!\n";
    if ((v19 & 0x80000000) == 0 && v19 <= v17)
    {
      *(_DWORD *)uint64_t v24 = v18 - v19;
      *(void *)&v24[4] = &v16[v19];
      size_t v21 = "\n";
    }
    size_t v22 = strlen(__s);
    this = (google::glog_internal_namespace_ *)syscall(4, 2, __s, v22);
    if (v8 == 3)
    {
      char v23 = 0;
      atomic_compare_exchange_strong(_MergedGlobals_27, (unsigned __int8 *)&v23, 1u);
      if ((v23 & 1) == 0)
      {
        qword_26AED1080 = (uint64_t)a2;
        dword_26AED1088 = (int)a3;
        memcpy(&unk_26AED11A0, v16, v18);
        qword_26AED1090 = (uint64_t)&unk_26AED11A0;
        dword_26AED1198 = google::GetStackTrace((google *)&unk_26AED1098, (void **)0x20, 1);
        google::glog_internal_namespace_::SetCrashReason((unint64_t)&qword_26AED1080);
      }
      google::LogMessage::Fail(this);
    }
  }
  return this;
}

uint64_t google::Symbolize(google *this, char *a2, char *a3)
{
  if ((a3 & 0x80000000) != 0) {
    abort();
  }
  return google::SymbolizeAndDemangle(this, a2, a3);
}

uint64_t google::SymbolizeAndDemangle(google *this, char *a2, char *a3)
{
  uint64_t result = dladdr(this, &v7);
  if (result)
  {
    if ((int)strlen(v7.dli_sname) >= (int)a3)
    {
      return 0;
    }
    else
    {
      size_t v6 = strcpy(a2, v7.dli_sname);
      google::DemangleInplace((google *)v6, a3);
      return 1;
    }
  }
  return result;
}

void *google::DemangleInplace(google *this, char *a2)
{
  int v2 = (int)a2;
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)google::Demangle(this, __s, (char *)0x100);
  if (result)
  {
    uint64_t result = (void *)strlen(__s);
    if ((unint64_t)result + 1 <= v2)
    {
      if ((unint64_t)result >= 0x100) {
        abort();
      }
      return memcpy(this, __s, (size_t)result + 1);
    }
  }
  return result;
}

const char *google::glog_internal_namespace_::ProgramInvocationShortName(google::glog_internal_namespace_ *this)
{
  if (qword_26AED1D68) {
    return (const char *)qword_26AED1D68;
  }
  else {
    return "UNKNOWN";
  }
}

BOOL google::glog_internal_namespace_::IsGoogleLoggingInitialized(google::glog_internal_namespace_ *this)
{
  return qword_26AED1D68 != 0;
}

__darwin_time_t google::glog_internal_namespace_::CycleClock_Now(google::glog_internal_namespace_ *this)
{
  gettimeofday(&v2, 0);
  return v2.tv_usec + 1000000 * v2.tv_sec;
}

double google::glog_internal_namespace_::WallTime_Now(google::glog_internal_namespace_ *this)
{
  gettimeofday(&v2, 0);
  return (double)(v2.tv_usec + 1000000 * v2.tv_sec) * 0.000001;
}

uint64_t google::glog_internal_namespace_::GetMainThreadPid(google::glog_internal_namespace_ *this)
{
  return _MergedGlobals_28;
}

BOOL google::glog_internal_namespace_::PidHasChanged(google::glog_internal_namespace_ *this)
{
  pid_t v1 = getpid();
  int v2 = _MergedGlobals_28;
  if (_MergedGlobals_28 != v1) {
    _MergedGlobals_28 = v1;
  }
  return v2 != v1;
}

pthread_t google::glog_internal_namespace_::GetTID(google::glog_internal_namespace_ *this)
{
  if ((google::glog_internal_namespace_::GetTID(void)::lacks_gettid & 1) == 0)
  {
    pthread_t result = (pthread_t)syscall(286);
    if (result != -1) {
      return result;
    }
    google::glog_internal_namespace_::GetTID(void)::lacks_gettid = 1;
  }
  return pthread_self();
}

google::glog_internal_namespace_ *google::glog_internal_namespace_::const_basename(google::glog_internal_namespace_ *this, const char *a2)
{
  uint64_t v3 = strrchr((char *)this, 47);
  if (v3) {
    return (google::glog_internal_namespace_ *)(v3 + 1);
  }
  else {
    return this;
  }
}

void *google::glog_internal_namespace_::MyUserName(google::glog_internal_namespace_ *this)
{
  return &unk_26AED1D78;
}

uint64_t google::glog_internal_namespace_::DumpStackTraceToString(uint64_t a1, uint64_t a2, void (*a3)(const char *, void *), void *a4)
{
  return google::DumpStackTrace((google *)google::DebugWriteToString, a1, a3, a4);
}

uint64_t google::DumpStackTrace(google *this, uint64_t a2, void (*a3)(const char *, void *), void *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  memset(v16, 0, 496);
  *(_OWORD *)int v15 = 0u;
  uint64_t result = backtrace(v15, 64);
  if ((int)result <= 3) {
    int v7 = 3;
  }
  else {
    int v7 = result;
  }
  if (v7 >= 35) {
    int v7 = 35;
  }
  uint64_t v8 = (v7 - 3);
  if (v7 != 3)
  {
    memset(__dst, 0, sizeof(__dst));
    BOOL v9 = (const void **)__dst;
    memcpy(__dst, (char *)v16 + 8, 8 * (v7 - 3));
    do
    {
      while (1)
      {
        BOOL v10 = (char *)*v9;
        if (fLB::FLAGS_symbolize_stacktrace) {
          break;
        }
        snprintf((char *)v15, 0x64uLL, "%s@ %*p\n", "    ", 18, v10);
        uint64_t result = ((uint64_t (*)(void **, uint64_t))this)(v15, a2);
        ++v9;
        if (!--v8) {
          return result;
        }
      }
      int v11 = google::Symbolize((google *)(v10 - 1), (char *)v15, (char *)0x400);
      unint64_t v12 = (const char *)v15;
      if (!v11) {
        unint64_t v12 = "(unknown)";
      }
      snprintf(__str, 0x400uLL, "%s@ %*p  %s\n", "    ", 18, v10, v12);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))this)(__str, a2);
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

std::string *google::DebugWriteToString(std::string::value_type *__s, std::string *this, void *a3)
{
  return std::string::append(this, __s);
}

void google::glog_internal_namespace_::SetCrashReason(unint64_t a1)
{
  uint64_t v1 = 0;
  atomic_compare_exchange_strong(&google::glog_internal_namespace_::g_reason, (unint64_t *)&v1, a1);
}

uint64_t google::GetStackTrace(google *this, void **a2, int a3)
{
  int v4 = (int)a2;
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(v20, 0, sizeof(v20));
  int v6 = backtrace((void **)v20, 64);
  int v7 = a3 + 1;
  int v8 = (v6 - v7) & ~((v6 - v7) >> 31);
  if (v8 >= v4) {
    uint64_t result = v4;
  }
  else {
    uint64_t result = v8;
  }
  if ((int)result >= 1)
  {
    if (result < 4)
    {
      uint64_t v10 = 0;
LABEL_10:
      int v15 = (uint64_t *)v20 + v10 + v7;
      std::string::size_type v16 = (void *)((char *)this + 8 * v10);
      uint64_t v17 = v10 - result;
      do
      {
        uint64_t v18 = *v15++;
        *v16++ = v18;
      }
      while (!__CFADD__(v17++, 1));
      return result;
    }
    uint64_t v10 = result & 0x7FFFFFFC;
    int v11 = (_OWORD *)((char *)&v20[1] + 8 * v7);
    unint64_t v12 = (_OWORD *)((char *)this + 16);
    uint64_t v13 = result & 0xFFFFFFFC;
    do
    {
      long long v14 = *v11;
      *(v12 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v11 - 1);
      _OWORD *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != result) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_utilities_cc()
{
  uint64_t v0 = getenv("GLOG_symbolize_stacktrace");
  if (v0) {
    BOOL v1 = memchr("tTyY1", *v0, 6uLL) != 0;
  }
  else {
    BOOL v1 = 1;
  }
  fLB::FLAGS_symbolize_stacktrace = v1;
  _MergedGlobals_28 = getpid();
  byte_26AED1D8F = 16;
  strcpy(byte_26AED1D78, "unavailable-name");
  int v2 = (void (*)(void *))MEMORY[0x263F8C0B8];

  return __cxa_atexit(v2, byte_26AED1D78, &dword_23CB1E000);
}

uint64_t google::glog_internal_namespace_::SafeFNMatch_(google::glog_internal_namespace_ *this, const char *a2, uint64_t a3, const char *a4, unint64_t a5)
{
  uint64_t result = a4 == 0;
  if (!a2) {
    return result;
  }
  int v7 = 0;
  while (1)
  {
    if (result)
    {
      if (a2 - 1 == v7) {
        return v7[(void)this] == 42;
      }
      return 0;
    }
    int v8 = v7[(void)this];
    if (v8 != 63 && v8 != v7[a3]) {
      break;
    }
    uint64_t result = a4 - 1 == v7++;
    if (a2 == v7) {
      return result;
    }
  }
  if (v8 != 42) {
    return 0;
  }
  if (a2 - 1 == v7) {
    return 1;
  }
  unint64_t v10 = (unint64_t)&v7[a3];
  int v11 = (const char *)(a4 - v7);
  unint64_t v12 = (google::glog_internal_namespace_ *)&v7[(void)this + 1];
  uint64_t v13 = &a2[~(unint64_t)v7];
  do
  {
    uint64_t result = google::glog_internal_namespace_::SafeFNMatch_(v12, v13, v10, v11, a5);
    if (result) {
      break;
    }
    ++v10;
    --v11;
  }
  while (v11);
  return result;
}

BOOL google::InitVLOG3__(google *this, int **a2, char *a3, const char *a4)
{
  int v4 = (int)a4;
  if (byte_26AED1E68 && pthread_rwlock_wrlock(&stru_26AED1DA0)) {
    goto LABEL_44;
  }
  int v8 = (void *)&unk_26AED1000;
  int v29 = _MergedGlobals_29;
  if (_MergedGlobals_29) {
    goto LABEL_22;
  }
  size_t v27 = this;
  size_t v28 = a2;
  _MergedGlobals_29 = 0;
  BOOL v9 = byte_26AEE1247 >= 0 ? (char *)&fLS::FLAGS_vmodule_buf : (char *)fLS::FLAGS_vmodule_buf;
  while (1)
  {
    unint64_t v12 = strchr(v9, 61);
    if (!v12) {
      break;
    }
    uint64_t v13 = v12;
    size_t v14 = v12 - v9;
    if ((unint64_t)(v12 - v9) >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v16 = v14 | 7;
      }
      uint64_t v17 = v16 + 1;
      int v15 = (void **)operator new(v16 + 1);
      __dst[1] = (void *)v14;
      unint64_t v32 = v17 | 0x8000000000000000;
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(v32) = (_BYTE)v12 - (_BYTE)v9;
      int v15 = __dst;
      if (v12 == v9) {
        goto LABEL_18;
      }
    }
    memmove(v15, v9, v14);
LABEL_18:
    *((unsigned char *)v15 + v14) = 0;
    int v30 = 0;
    if (sscanf(v13, "=%d", &v30) == 1) {
      operator new();
    }
    unint64_t v10 = strchr(v13, 44);
    int v11 = v10;
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__dst[0]);
      BOOL v9 = v11 + 1;
      if (!v11) {
        break;
      }
    }
    else
    {
      BOOL v9 = v10 + 1;
      if (!v10) {
        break;
      }
    }
  }
  _MergedGlobals_29 = 1;
  this = v27;
  a2 = v28;
  int v8 = &unk_26AED1000;
LABEL_22:
  int v18 = *__error();
  int v19 = strrchr(a3, 47);
  if (v19) {
    a3 = v19 + 1;
  }
  size_t v20 = strchr(a3, 46);
  if (v20)
  {
    size_t v22 = (const char *)(v20 - a3);
    uint64_t v23 = v20 - a3 - 4;
    if ((unint64_t)(v20 - a3) >= 4)
    {
LABEL_26:
      if (*(_DWORD *)&v22[(void)a3 - 4] == 1819175213) {
        size_t v22 = (const char *)v23;
      }
    }
  }
  else
  {
    size_t v22 = (const char *)strlen(a3);
    uint64_t v23 = (uint64_t)(v22 - 4);
    if ((unint64_t)v22 >= 4) {
      goto LABEL_26;
    }
  }
  uint64_t v24 = v8[435];
  if (!v24)
  {
LABEL_34:
    if (v29) {
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  while (2)
  {
    if ((*(char *)(v24 + 23) & 0x80000000) == 0)
    {
      if (google::glog_internal_namespace_::SafeFNMatch_((google::glog_internal_namespace_ *)v24, (const char *)*(unsigned __int8 *)(v24 + 23), (uint64_t)a3, v22, v21))break; {
      goto LABEL_33;
      }
    }
    if (!google::glog_internal_namespace_::SafeFNMatch_(*(google::glog_internal_namespace_ **)v24, *(const char **)(v24 + 8), (uint64_t)a3, v22, v21))
    {
LABEL_33:
      uint64_t v24 = *(void *)(v24 + 32);
      if (!v24) {
        goto LABEL_34;
      }
      continue;
    }
    break;
  }
  a2 = (int **)(v24 + 24);
  if (!v29) {
    goto LABEL_36;
  }
LABEL_35:
  *(void *)this = a2;
LABEL_36:
  *__error() = v18;
  int v25 = *(_DWORD *)a2;
  if (byte_26AED1E68)
  {
    if (pthread_rwlock_unlock(&stru_26AED1DA0)) {
LABEL_44:
    }
      abort();
  }
  return v25 >= v4;
}

void sub_23CB5EEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t _GLOBAL__sub_I_vlog_is_on_cc()
{
  uint64_t v0 = getenv("GLOG_v");
  if (v0) {
    LODWORD(v0) = strtol(v0, 0, 10);
  }
  fLI::FLAGS_v = (int)v0;
  BOOL v1 = getenv("GLOG_vmodule");
  if (v1) {
    int v2 = v1;
  }
  else {
    int v2 = "";
  }
  size_t v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v5 = (uint64_t *)operator new(v6 + 1);
    qword_26AEE1238 = v4;
    unk_26AEE1240 = v7 | 0x8000000000000000;
    fLS::FLAGS_vmodule_buf = (uint64_t)v5;
    goto LABEL_13;
  }
  unint64_t v5 = &fLS::FLAGS_vmodule_buf;
  byte_26AEE1247 = v3;
  if (v3) {
LABEL_13:
  }
    memmove(v5, v2, v4);
  *((unsigned char *)v5 + v4) = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &fLS::FLAGS_vmodule_buf, &dword_23CB1E000);
  byte_26AED1E68 = 1;
  if (pthread_rwlock_init(&stru_26AED1DA0, 0)) {
    abort();
  }

  return __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_26AED1DA0, &dword_23CB1E000);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  int v8 = begin;
  if (__n > (value - (uint64_t)begin) >> 2)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62) {
      goto LABEL_38;
    }
    std::vector<int>::size_type v9 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<int>::size_type v9 = __n;
    }
    BOOL v10 = (unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v9;
    }
    if (v11 >> 62) {
LABEL_38:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = v11;
    uint64_t v13 = (int *)operator new(4 * v11);
    this->__begin_ = v13;
    this->__end_cap_.__value_ = &v13[v12];
    size_t v14 = &v13[__n];
    std::vector<int>::value_type v15 = *__u;
    std::vector<int>::size_type v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v17 = v13;
    if (v16 < 7) {
      goto LABEL_41;
    }
    std::vector<int>::size_type v18 = v16 + 1;
    uint64_t v17 = &v13[v18 & 0x7FFFFFFFFFFFFFF8];
    int32x4_t v19 = vdupq_n_s32(v15);
    size_t v20 = (int32x4_t *)(v13 + 4);
    uint64_t v21 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20[-1] = v19;
      int32x4_t *v20 = v19;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v17++ = v15;
      while (v17 != v14);
    }
    goto LABEL_37;
  }
  std::vector<int>::pointer end = this->__end_;
  int64_t v23 = (char *)end - (char *)begin;
  unint64_t v24 = end - begin;
  if (v24 >= __n) {
    std::vector<int>::size_type v25 = __n;
  }
  else {
    std::vector<int>::size_type v25 = end - begin;
  }
  if (v25)
  {
    if (v25 < 8 || begin < __u + 1 && &begin[v25] > __u) {
      goto LABEL_42;
    }
    int v8 = &begin[v25 & 0xFFFFFFFFFFFFFFF8];
    float32x4_t v26 = vld1q_dup_f32((const float *)__u);
    size_t v27 = (float32x4_t *)(begin + 4);
    unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *size_t v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    BOOL v29 = v25 == (v25 & 0xFFFFFFFFFFFFFFF8);
    v25 &= 7u;
    if (!v29)
    {
LABEL_42:
      do
      {
        *v8++ = *__u;
        --v25;
      }
      while (v25);
    }
  }
  BOOL v10 = __n >= v24;
  std::vector<int>::size_type v30 = __n - v24;
  if (v30 == 0 || !v10)
  {
    size_t v14 = &begin[__n];
LABEL_37:
    this->__end_ = v14;
    return;
  }
  uint64_t v31 = &end[v30];
  std::vector<int>::size_type v32 = 4 * __n - (v23 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v32 < 0x4C || end < __u + 1 && (std::vector<int>::pointer)((char *)end + v32 + 4) > __u) {
    goto LABEL_43;
  }
  uint64_t v33 = (v32 >> 2) + 1;
  unint64_t v34 = &end[v33 & 0x7FFFFFFFFFFFFFF8];
  float32x4_t v35 = vld1q_dup_f32((const float *)__u);
  size_t v36 = (float32x4_t *)(end + 4);
  uint64_t v37 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36[-1] = v35;
    float32x4_t *v36 = v35;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  std::vector<int>::pointer end = v34;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
      *end++ = *__u;
    while (end != v31);
  }
  this->__end_ = v31;
}

void **std::vector<std::vector<int>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    size_t v3 = (char *)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        size_t v3 = v5;
      }
      while (v5 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::MergingPartition::Reset(operations_research::MergingPartition *this, int a2)
{
  std::vector<int>::size_type v4 = a2;
  std::vector<int>::value_type __u = 1;
  std::vector<int>::assign((std::vector<int> *)this + 1, a2, &__u);
  std::vector<int>::value_type v13 = -1;
  std::vector<int>::assign((std::vector<int> *)this, v4, &v13);
  if (a2 >= 1)
  {
    unint64_t v5 = *(int32x4_t **)this;
    if (a2 < 8)
    {
      uint64_t v6 = 0;
      do
      {
LABEL_7:
        v5->i32[v6] = v6;
        ++v6;
      }
      while (a2 != v6);
      goto LABEL_8;
    }
    uint64_t v6 = a2 & 0x7FFFFFF8;
    int32x4_t v7 = (int32x4_t)xmmword_23CE7EC40;
    int v8 = v5 + 1;
    v9.i64[0] = 0x400000004;
    v9.i64[1] = 0x400000004;
    v10.i64[0] = 0x800000008;
    v10.i64[1] = 0x800000008;
    uint64_t v11 = a2 & 0xFFFFFFF8;
    do
    {
      v8[-1] = v7;
      *int v8 = vaddq_s32(v7, v9);
      int32x4_t v7 = vaddq_s32(v7, v10);
      v8 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v6 != a2) {
      goto LABEL_7;
    }
  }
LABEL_8:
  char v12 = 0;
  std::vector<BOOL>::assign((char **)this + 6, v4, &v12);
}

void std::vector<BOOL>::assign(char **a1, unint64_t a2, unsigned char *a3)
{
  a1[1] = 0;
  if (!a2) {
    return;
  }
  uint64_t v6 = a1[2];
  unint64_t v7 = (void)v6 << 6;
  if ((void)v6 << 6 >= a2)
  {
    a1[1] = (char *)a2;
    size_t v14 = *a1;
    unint64_t v16 = a2 >> 6;
    if (*a3)
    {
LABEL_12:
      size_t v17 = 8 * v16;
      if (a2 >= 0x40) {
        memset(v14, 255, v17);
      }
      if ((a2 & 0x3F) != 0) {
        *(void *)&v14[v17] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
      }
      return;
    }
  }
  else
  {
    std::vector<int>::size_type v18 = 0;
    long long v19 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (void)v6 << 7;
    if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)&v18, v9);
    uint64_t v11 = v18;
    char v12 = (char *)*((void *)&v19 + 1);
    std::vector<int>::size_type v18 = *a1;
    int32x4_t v10 = v18;
    long long v13 = *(_OWORD *)(a1 + 1);
    *a1 = v11;
    a1[1] = (char *)a2;
    a1[2] = v12;
    long long v19 = v13;
    if (v10) {
      operator delete(v10);
    }
    size_t v14 = *a1;
    int v15 = *a3;
    unint64_t v16 = a2 >> 6;
    if (v15) {
      goto LABEL_12;
    }
  }
  if (a2 >= 0x40) {
    bzero(v14, 8 * v16);
  }
  if ((a2 & 0x3F) != 0) {
    *(void *)&v14[8 * v16] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
  }
}

void sub_23CB5F554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::MergingPartition::MergePartsOf(operations_research::MergingPartition *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = a2;
  do
  {
    uint64_t result = v5;
    uint64_t v5 = *(unsigned int *)(v4 + 4 * (int)v5);
  }
  while (v5 != result);
  uint64_t v7 = a3;
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(unsigned int *)(v4 + 4 * (int)v7);
  }
  while (v7 != v8);
  if (result == v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = (int)v8;
  uint64_t v10 = *((void *)this + 3);
  int v11 = *(_DWORD *)(v10 + 4 * (int)result);
  int v12 = *(_DWORD *)(v10 + 4 * (int)v8);
  if (v11 < v12 || (int)result > (int)v8 && v11 == v12)
  {
    int v13 = *(_DWORD *)(v10 + 4 * (int)v8);
    int v14 = v8;
  }
  else
  {
    int v13 = *(_DWORD *)(v10 + 4 * (int)result);
    uint64_t v9 = (int)result;
    int v11 = *(_DWORD *)(v10 + 4 * (int)v8);
    int v14 = result;
    uint64_t result = v8;
  }
  *(_DWORD *)(v10 + 4 * v9) = v13 + v11;
  do
  {
    uint64_t v15 = 4 * (int)a2;
    int v16 = *(_DWORD *)(v4 + v15);
    *(_DWORD *)(v4 + v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v14;
    BOOL v17 = v16 == a2;
    LODWORD(a2) = v16;
  }
  while (!v17);
  do
  {
    uint64_t v18 = 4 * (int)a3;
    int v19 = *(_DWORD *)(v4 + v18);
    *(_DWORD *)(v4 + v18) = v14;
    BOOL v17 = v19 == a3;
    LODWORD(a3) = v19;
  }
  while (!v17);
  return result;
}

uint64_t operations_research::MergingPartition::GetRootAndCompressPath(operations_research::MergingPartition *this, uint64_t a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = a2;
  do
  {
    uint64_t result = v3;
    uint64_t v3 = *(unsigned int *)(v2 + 4 * (int)v3);
  }
  while (v3 != result);
  do
  {
    uint64_t v5 = 4 * (int)a2;
    int v6 = *(_DWORD *)(v2 + v5);
    *(_DWORD *)(v2 + vstd::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = result;
    BOOL v7 = v6 == a2;
    LODWORD(a2) = v6;
  }
  while (!v7);
  return result;
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23CB5F714(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::vector<int>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  BOOL v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    BOOL v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    int v19 = v9;
    std::string __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  uint64_t *v15 = &v9[v14];
  return result;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer end = this->__end_;
  uint64_t value = this->__end_cap_.__value_;
  uint64_t v8 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || end < __x + 1 && &end[__n] > __x) {
        goto LABEL_45;
      }
      std::vector<int>::size_type v17 = v16 + 1;
      uint64_t v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
      float32x4_t v18 = vld1q_dup_f32((const float *)__x);
      int v19 = (float32x4_t *)(end + 4);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *int v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *__x;
        while (v8 != &end[__n]);
      }
      uint64_t v8 = &end[__n];
    }
    this->__end_ = v8;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v10 = (char *)end - (char *)this->__begin_;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + __n;
    if (v12 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)value - (char *)begin;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v21 = (int *)&v15[4 * v11];
    size_t v22 = &v21[__n];
    std::vector<int>::size_type v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v24 = v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < __x + 1)
    {
      unint64_t v24 = (int *)&v15[4 * v11];
      if (&v15[4 * __n + v10] > (unsigned char *)__x) {
        goto LABEL_46;
      }
    }
    std::vector<int>::size_type v25 = v23 + 1;
    unint64_t v24 = &v21[v25 & 0x7FFFFFFFFFFFFFF8];
    float32x4_t v26 = vld1q_dup_f32((const float *)__x);
    size_t v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *size_t v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
        *v24++ = *__x;
      while (v24 != v22);
    }
    if (end != begin)
    {
      unint64_t v29 = (char *)end - (char *)begin - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if ((unint64_t)((char *)end - &v15[v10]) < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v8 = &end[v31 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v21 = (int *)((char *)v21 - v31);
      std::vector<int>::size_type v32 = &v15[4 * v11 - 16];
      uint64_t v33 = (long long *)(end - 4);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *(v32 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v33 - 1);
        *std::vector<int>::size_type v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *--uint64_t v21 = v36;
        }
        while (v8 != begin);
      }
    }
    this->__begin_ = v21;
    this->__end_ = v22;
    this->__end_cap_.__value_ = (int *)&v15[4 * v14];
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    uint64_t v4 = (uint64_t *)operator new(8 * v3);
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      uint64_t v11 = &v5[v6 >> 6];
      unint64_t v12 = v4;
      uint64_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        uint64_t *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  uint64_t value = this->__end_cap_.__value_;
  unint64_t v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      unint64_t v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    std::vector<int>::size_type v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    std::vector<int>::size_type v17 = (int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      size_t v22 = (long long *)(end - 4);
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v14 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<BOOL>::__construct_at_end[abi:ne180100](void *a1, unint64_t a2, int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    int v7 = (void *)(*a1 + 8 * (v4 >> 6));
    int v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v9 = (64 - v8);
        if (v9 >= a2) {
          unint64_t v10 = a2;
        }
        else {
          unint64_t v10 = v9;
        }
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        unint64_t v3 = a2 - v10;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        memset(v7, 255, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v13 = (64 - v8);
        if (v13 >= a2) {
          unint64_t v14 = a2;
        }
        else {
          unint64_t v14 = v13;
        }
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        unint64_t v3 = a2 - v14;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        bzero(v7, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      unint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    unint64_t v6 = (uint64_t **)v3[2];
    int v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  unint64_t v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  int *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    int v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  int v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    unint64_t v14 = (uint64_t **)v7[2];
    if (*v14 == v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      size_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      std::vector<int>::size_type v17 = v14[1];
      unint64_t v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18) {
        void v18[2] = (uint64_t)v14;
      }
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
      *std::vector<int>::size_type v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
      size_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    if (!*((unsigned char *)v15 + 24))
    {
      uint64_t v19 = (uint64_t *)v7[1];
      if (!v19) {
        goto LABEL_64;
      }
LABEL_63:
      if (*((unsigned char *)v19 + 24))
      {
LABEL_64:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v23 = v15[1];
        uint64_t *v7 = v23;
        if (v23) {
          *(void *)(v23 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        BOOL v7[2] = (uint64_t)v15;
        uint64_t v19 = v7;
      }
      else
      {
        size_t v15 = v7;
      }
      uint64_t v27 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v27 + 24);
      *(unsigned char *)(v27 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v28 = *(uint64_t **)(v27 + 8);
      uint64_t v29 = *v28;
      *(void *)(v27 + 8) = *v28;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      v28[2] = *(void *)(v27 + 16);
      *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
      *uint64_t v28 = v27;
      *(void *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    uint64_t v19 = (uint64_t *)v7[1];
    if (v19 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_63;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      unint64_t v12 = result;
LABEL_61:
      *((unsigned char *)v12 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v12 + 24)) {
      goto LABEL_61;
    }
LABEL_24:
    int v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    std::vector<int>::size_type v16 = (void *)*v7;
    if (!*v7) {
      goto LABEL_49;
    }
LABEL_48:
    if (!*((unsigned char *)v16 + 24)) {
      goto LABEL_67;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    uint64_t v20 = (uint64_t *)v7[1];
    char *v14 = v20;
    if (v20) {
      v20[2] = (uint64_t)v14;
    }
    BOOL v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14) {
      uint64_t result = v7;
    }
    int v7 = *v14;
    std::vector<int>::size_type v16 = (void *)**v14;
    if (v16) {
      goto LABEL_48;
    }
  }
LABEL_49:
  uint64_t v21 = (uint64_t *)v7[1];
  if (!v21 || *((unsigned char *)v21 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
    goto LABEL_24;
  }
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_67:
    uint64_t v21 = v7;
  }
  else
  {
    *((unsigned char *)v21 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = *v21;
    v7[1] = *v21;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v21[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
    uint64_t *v21 = (uint64_t)v7;
    BOOL v7[2] = (uint64_t)v21;
    std::vector<int>::size_type v16 = v7;
  }
  long long v24 = (uint64_t *)v21[2];
  *((unsigned char *)v21 + 24) = *((unsigned char *)v24 + 24);
  *((unsigned char *)v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 8);
  *long long v24 = v26;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  *(void *)(v25 + 16) = v24[2];
  *(void *)(v24[2] + 8 * (*(void *)v24[2] != (void)v24)) = v25;
  *(void *)(v25 + 8) = v24;
  void v24[2] = v25;
  return result;
}

void operations_research::TimeLimit::Infinite(operations_research::TimeLimit *this)
{
}

void sub_23CB60428(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  MEMORY[0x23ECF2BC0](v1, 0x1030C40021678CBLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<operations_research::TimeLimit>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1030C40021678CBLL);
  }
  return a1;
}

void operations_research::MergingPartition::~MergingPartition(operations_research::MergingPartition *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v4;
    operator delete(v4);
  }
}

uint64_t operations_research::Stat::Priority(operations_research::Stat *this)
{
  return 0;
}

double operations_research::Stat::Sum(operations_research::Stat *this)
{
  return 0.0;
}

void operations_research::RunningMax<long long>::Add(int *a1, uint64_t a2)
{
  unint64_t v4 = (char *)*((void *)a1 + 1);
  int v5 = (char *)*((void *)a1 + 2);
  unint64_t v6 = v5 - v4;
  unint64_t v7 = (v5 - v4) >> 3;
  unint64_t v8 = *a1;
  if (v7 < v8)
  {
    if (v4 == v5 || *(void *)&v4[8 * a1[9]] <= a2) {
      a1[9] = v6 >> 3;
    }
    unint64_t v9 = *((void *)a1 + 3);
    if ((unint64_t)v5 < v9)
    {
      *(void *)int v5 = a2;
      *((void *)a1 + 2) = v5 + 8;
      return;
    }
    unint64_t v16 = v7 + 1;
    if ((v7 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v9 - (void)v4;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v7];
      uint64_t v21 = &v19[8 * v18];
      void *v20 = a2;
      uint64_t v22 = (uint64_t)(v20 + 1);
      if (v4 == v5) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (void *)(8 * v7);
      uint64_t v21 = 0;
      *(void *)(8 * v7) = a2;
      uint64_t v22 = 8 * v7 + 8;
      if (v4 == v5)
      {
LABEL_39:
        *((void *)a1 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v20;
        *((void *)a1 + 2) = v22;
        *((void *)a1 + 3) = v21;
        if (v4) {
          operator delete(v4);
        }
        *((void *)a1 + 2) = v22;
        return;
      }
    }
    if (v6 - 8 < 0x58) {
      goto LABEL_46;
    }
    if ((unint64_t)(v4 - v19) < 0x20) {
      goto LABEL_46;
    }
    unint64_t v24 = ((v6 - 8) >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v26 = &v5[-v25];
    uint64_t v20 = (void *)((char *)v20 - v25);
    uint64_t v27 = &v19[8 * v7 - 16];
    uint64_t v28 = v5 - 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v28 - 1);
      *uint64_t v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    int v5 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
      {
        uint64_t v31 = *((void *)v5 - 1);
        v5 -= 8;
        *--uint64_t v20 = v31;
      }
      while (v5 != v4);
    }
    goto LABEL_39;
  }
  int v10 = a1[8];
  uint64_t v11 = a1[9];
  if (*(void *)&v4[8 * v11] <= a2)
  {
    a1[9] = v10;
    *(void *)&v4[8 * v10] = a2;
  }
  else
  {
    *(void *)&v4[8 * v10] = a2;
    if (v10 == v11)
    {
      a1[9] = 0;
      if (v6 >= 9)
      {
        uint64_t v12 = *(void *)v4;
        uint64_t v13 = 2;
        if (v7 > 2) {
          uint64_t v13 = (v5 - v4) >> 3;
        }
        uint64_t v14 = 1;
        do
        {
          uint64_t v15 = *(void *)&v4[8 * v14];
          if (v15 > v12)
          {
            a1[9] = v14;
            uint64_t v12 = v15;
          }
          ++v14;
        }
        while (v13 != v14);
      }
      int v10 = v11;
    }
  }
  if (v10 + 1 == v8) {
    int v23 = 0;
  }
  else {
    int v23 = v10 + 1;
  }
  a1[8] = v23;
}

void operations_research::KnapsackPropagatorForCuts::~KnapsackPropagatorForCuts(operations_research::KnapsackPropagatorForCuts *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 8);
    unint64_t v4 = (void *)*((void *)this + 7);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *unint64_t v3 = 0;
        if (v6) {
          MEMORY[0x23ECF2BC0](v5, 0x1000C40D315E998);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    unint64_t v8 = (void *)*((void *)this + 4);
    unint64_t v9 = (void *)*((void *)this + 3);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *unint64_t v8 = 0;
        if (v11) {
          MEMORY[0x23ECF2BC0](v10, 0x1000C40D315E998);
        }
      }
      while (v8 != v7);
      unint64_t v9 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v7;
    operator delete(v9);
  }
}

uint64_t operations_research::KnapsackPropagatorForCuts::Init(operations_research::KnapsackPropagatorForCuts *this, void *a2, double a3)
{
  uint64_t v5 = (a2[1] - *a2) >> 3;
  uint64_t v6 = (void *)*((void *)this + 7);
  unint64_t v7 = (void *)*((void *)this + 8);
  while (v7 != v6)
  {
    uint64_t v9 = *--v7;
    uint64_t v8 = v9;
    void *v7 = 0;
    if (v9) {
      MEMORY[0x23ECF2BC0](v8, 0x1000C40D315E998);
    }
  }
  *((void *)this + 8) = v6;
  if ((int)v5 >= 1) {
    operator new();
  }
  *(double *)this = a3;
  *((_OWORD *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = xmmword_23CE7ED10;
  *((void *)this + 12) = 0x7FF0000000000000;
  return operations_research::KnapsackPropagatorForCuts::InitPropagator(this);
}

void sub_23CB609AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x23ECF2BC0](a10, 0x1000C40D315E998);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackPropagatorForCuts::InitPropagator(operations_research::KnapsackPropagatorForCuts *this)
{
  uint64_t v2 = (char *)this + 24;
  unint64_t v3 = (void *)*((void *)this + 3);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  *((_DWORD *)this + 4) = -1;
  unint64_t v4 = (void *)*((void *)this + 4);
  while (v4 != v3)
  {
    uint64_t v6 = *--v4;
    uint64_t v5 = v6;
    *unint64_t v4 = 0;
    if (v6) {
      MEMORY[0x23ECF2BC0](v5, 0x1000C40D315E998);
    }
  }
  *((void *)this + 4) = v3;
  std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::reserve((uint64_t)v2, (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
  if (*((void *)this + 8) != *((void *)this + 7)) {
    operator new();
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = (uint64_t *)*((void *)this + 4);
  if ((uint64_t *)v7 == v8)
  {
    double v13 = 1.0;
  }
  else
  {
    double v9 = 0.0;
    uint64_t v10 = (uint64_t *)*((void *)this + 3);
    do
    {
      uint64_t v11 = *v10++;
      double v12 = *(double *)(v11 + 16);
      if (v9 < v12) {
        double v9 = v12;
      }
      *((double *)this + 6) = v9;
    }
    while (v10 != v8);
    double v13 = v9 + 1.0;
  }
  unint64_t v14 = 126 - 2 * __clz(((uint64_t)v8 - v7) >> 3);
  *((double *)this + 6) = v13;
  double v17 = v13;
  if (v8 == (uint64_t *)v7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
}

void sub_23CB60B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x23ECF2BC0](a10, 0x1000C40D315E998);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackPropagatorForCuts::CopyCurrentStateToSolution(uint64_t result, void *a2)
{
  uint64_t v2 = *(int ***)(result + 56);
  uint64_t v3 = *(void *)(result + 64) - (void)v2;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    uint64_t v5 = *(void **)(result + 104);
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (1)
    {
      unint64_t v6 = **v2;
      if (v5[1] <= v6) {
        break;
      }
      unint64_t v7 = v6 >> 6;
      uint64_t v8 = 1 << v6;
      if ((*(void *)(*v5 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
      {
        if (v5[4] <= v6) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v9 = 8 * v7;
        uint64_t v10 = *(void *)(v5[3] + v9);
        uint64_t v11 = (void *)(*a2 + v9);
        if ((v10 & v8) != 0)
        {
          *v11 |= v8;
          ++v2;
          if (!--v4) {
            goto LABEL_13;
          }
        }
        else
        {
          *v11 &= ~v8;
          ++v2;
          if (!--v4) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        *(void *)(*a2 + 8 * v7) &= ~v8;
        ++v2;
        if (!--v4) {
          goto LABEL_13;
        }
      }
    }
LABEL_21:
    std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_13:
  double v12 = *(int ***)(result + 24);
  double v13 = *(int ***)(result + 32);
  if (v12 != v13)
  {
    double v14 = *(double *)result - *(double *)(result + 8);
    uint64_t result = *(void *)(result + 104);
    while (1)
    {
      unint64_t v15 = **v12;
      if (*(void *)(result + 8) <= v15) {
        break;
      }
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = 1 << v15;
      if ((*(void *)(*(void *)result + 8 * v16) & v17) == 0)
      {
        double v18 = *((double *)*v12 + 1);
        if (v14 < v18) {
          return result;
        }
        double v14 = v14 - v18;
        *(void *)(*a2 + 8 * v16) |= v17;
      }
      if (++v12 == v13) {
        return result;
      }
    }
    goto LABEL_21;
  }
  return result;
}

uint64_t operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds(uint64_t this)
{
  double v1 = *(double *)(this + 80);
  *(double *)(this + 88) = v1;
  *(_DWORD *)(this + 16) = -1;
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = *(void *)(this + 32) - v2;
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v4 = 0;
  unint64_t v5 = v3 >> 3;
  double v6 = *(double *)this - *(double *)(this + 8);
  unint64_t v7 = *(void **)(this + 104);
  unint64_t v8 = v7[1];
  if (v5 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v5;
  }
  while (1)
  {
    uint64_t v10 = *(double **)(v2 + 8 * v4);
    int v11 = *(_DWORD *)v10;
    if (v8 <= *(int *)v10) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    if ((*(void *)(*v7 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
      goto LABEL_6;
    }
    *(_DWORD *)(this + 16) = v11;
    double v12 = v10[1];
    if (v6 < v12) {
      break;
    }
    double v6 = v6 - v12;
    double v1 = v1 + v10[2];
    *(double *)(this + 88) = v1;
LABEL_6:
    if (v9 == ++v4) {
      goto LABEL_21;
    }
  }
  unint64_t v13 = (v4 + 1);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v5 > v13)
  {
    double v15 = v6 * *(double *)(*(void *)(v2 + 8 * v13) + 16) / *(double *)(*(void *)(v2 + 8 * v13) + 8);
    if (v15 < 0.0) {
      double v15 = 0.0;
    }
  }
  uint64_t v16 = v4;
  if (v4)
  {
    uint64_t v17 = *(void *)(v2 + 8 * (v4 - 1));
    double v18 = *(double *)(v17 + 8);
    if (v18 != 0.0)
    {
      double v19 = *(double *)(*(void *)(v2 + 8 * v16) + 16)
          - *(double *)(v17 + 16) * (*(double *)(*(void *)(v2 + 8 * v16) + 8) - v6) / v18;
      double v14 = 0.0;
      if (v19 >= 0.0) {
        double v14 = v19;
      }
    }
  }
  if (v15 >= v14) {
    double v20 = v15;
  }
  else {
    double v20 = v14;
  }
  double v1 = v1 + v20;
LABEL_21:
  *(double *)(this + 96) = v1;
  return this;
}

void std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  double v6 = (char *)operator new(8 * a2);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  unint64_t v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) < 0x78)
  {
    int v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_16:
      uint64_t v22 = *((void *)v4 - 1);
      v4 -= 8;
      *(void *)uint64_t v4 = 0;
      *((void *)v11 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  BOOL v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
     || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
  int v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v13 = v8 >> 3;
  uint64_t v14 = (v10 >> 3) + 1;
  uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
  int v11 = (char *)(v9 - v15);
  uint64_t v16 = &v4[-v15];
  uint64_t v17 = v4 - 16;
  double v18 = &v6[8 * v13 - 16];
  uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v21 = *((_OWORD *)v17 - 1);
    long long v20 = *(_OWORD *)v17;
    *((_OWORD *)v17 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0uLL;
    *(_OWORD *)uint64_t v17 = 0uLL;
    *((_OWORD *)v18 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v21;
    *(_OWORD *)double v18 = v20;
    v17 -= 32;
    v18 -= 32;
    v19 -= 4;
  }
  while (v19);
  uint64_t v4 = v16;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_16;
  }
LABEL_17:
  int v23 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  if (v2 == v23)
  {
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    uint64_t v25 = *((void *)v2 - 1);
    v2 -= 8;
    uint64_t v24 = v25;
    *(void *)uint64_t v2 = 0;
    if (v25) {
      MEMORY[0x23ECF2BC0](v24, 0x1000C40D315E998);
    }
  }
  while (v2 != v23);
  uint64_t v2 = v23;
  if (v23)
  {
LABEL_19:
    operator delete(v2);
  }
}

double operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x7FF0000000000000;
  *(void *)(a1 + 104) = a1 + 136;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  long long v2 = *a2;
  *(void *)(a1 + 232) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 216) = v2;
  *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  double result = INFINITY;
  *(_OWORD *)(a1 + 240) = xmmword_23CE7ED20;
  *(void *)(a1 + 256) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t operations_research::KnapsackSolverForCuts::Init(char **a1, void *a2, void *a3, double a4)
{
  uint64_t v8 = a2[1] - *a2;
  unint64_t v9 = (unint64_t)v8 >> 3;
  unint64_t v10 = (int)(v8 >> 3);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 17, v10, v12);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 20, v10, v12);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 24, v10, v12);
  int v13 = v9;
  v12[0] = (uint64_t)(a3[1] - *a3) >> 3;
  if (v12[0] != v10) {
    google::MakeCheckOpString<int,unsigned long>((int)&v13, (int)v12, "number_of_items == weights.size()");
  }
  return operations_research::KnapsackPropagatorForCuts::Init((operations_research::KnapsackPropagatorForCuts *)a1, a2, a4);
}

void sub_23CB6115C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double operations_research::KnapsackSolverForCuts::GetAggregatedProfitUpperBound(operations_research::KnapsackSolverForCuts *this)
{
  return fmin(*((double *)this + 12), INFINITY);
}

void operations_research::KnapsackSolverForCuts::Solve(operations_research::KnapsackSolverForCuts *this, operations_research::TimeLimit *a2, BOOL *a3)
{
  *((void *)this + 23) = 0;
  *a3 = 1;
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  operator new();
}

void sub_23CB6174C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB61754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16)
  {
    MEMORY[0x23ECF2BC0](a16, 0x1060C40B86F7F5DLL);
    uint64_t v19 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v19 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackSolverForCuts::MakeNewNode(uint64_t a1, int *a2, int a3)
{
  uint64_t v3 = a2[10];
  if (v3 != -1)
  {
    uint64_t v4 = a2;
    double v6 = (int **)v30;
    int v7 = *a2;
    int v29 = *a2 + 1;
    uint64_t v8 = 0x100000000;
    if (!a3) {
      uint64_t v8 = 0;
    }
    v30[0] = a2;
    v30[1] = v8 | v3;
    long long v31 = xmmword_23CE7ED00;
    int v32 = -1;
    v28[0] = (uint64_t)a2;
    v28[2] = (uint64_t)&v29;
    unint64_t v9 = (int **)v30;
    do
    {
      unint64_t v10 = *v9;
      int v11 = *v9;
      int v12 = *v11;
      unint64_t v9 = (int **)(v11 + 2);
    }
    while (v12 > v7);
    uint64_t v13 = (uint64_t)a2;
    if (v10 != a2)
    {
      uint64_t v13 = (uint64_t)a2;
      do
      {
        uint64_t v13 = *(void *)(v13 + 8);
        unint64_t v10 = (int *)*((void *)v10 + 1);
      }
      while ((int *)v13 != v10);
    }
    v28[1] = v13;
    if (operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, v28))
    {
      *(void *)&long long v31 = *(void *)(a1 + 80);
      operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds(a1);
      double v14 = *(double *)(a1 + 88);
      *((void *)&v31 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = fmin(*(double *)(a1 + 96), INFINITY);
      int v32 = *(_DWORD *)(a1 + 16);
      if (*(double *)(a1 + 184) < v14)
      {
        *(double *)(a1 + 184) = v14;
        operations_research::KnapsackPropagatorForCuts::CopyCurrentStateToSolution(a1, (void *)(a1 + 192));
      }
      uint64_t v15 = &v29;
      uint64_t v25 = &v29;
      uint64_t v27 = v4;
      int v16 = *v4;
      if (v29 > *v4)
      {
        do
        {
          uint64_t v15 = *v6;
          uint64_t v17 = *v6;
          int v18 = *v17;
          double v6 = (int **)(v17 + 2);
        }
        while (v18 > v16);
      }
      uint64_t v19 = v4;
      if (v16 > v29)
      {
        uint64_t v19 = v4;
        do
          uint64_t v19 = (int *)*((void *)v19 + 1);
        while (*v19 > v29);
      }
      while (v15 != v19)
      {
        uint64_t v15 = (int *)*((void *)v15 + 1);
        uint64_t v19 = (int *)*((void *)v19 + 1);
      }
      uint64_t v26 = v15;
      operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, (uint64_t *)&v25);
      if (*((double *)&v31 + 1) >= *(double *)(a1 + 184)) {
        operator new();
      }
    }
    else
    {
      long long v20 = &v29;
      uint64_t v25 = &v29;
      uint64_t v27 = v4;
      int v21 = *v4;
      if (v29 > *v4)
      {
        do
        {
          long long v20 = *v6;
          uint64_t v22 = *v6;
          int v23 = *v22;
          double v6 = (int **)(v22 + 2);
        }
        while (v23 > v21);
      }
      while (v21 > v29)
      {
        uint64_t v4 = (int *)*((void *)v4 + 1);
        int v21 = *v4;
      }
      while (v20 != v4)
      {
        long long v20 = (int *)*((void *)v20 + 1);
        uint64_t v4 = (int *)*((void *)v4 + 1);
      }
      uint64_t v26 = v20;
      operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, (uint64_t *)&v25);
    }
  }
  return 0;
}

void sub_23CB61A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x23ECF2BC0](a10, 0x1060C40B86F7F5DLL);
  }
  _Unwind_Resume(exception_object);
}

void std::priority_queue<operations_research::KnapsackSearchNodeForCuts *,std::vector<operations_research::KnapsackSearchNodeForCuts *>,operations_research::anonymous namespace'::CompareKnapsackSearchNodePtrInDecreasingUpperBoundOrder>::push(char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  double v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = v5 - *a1;
  uint64_t v10 = v9 >> 3;
  unint64_t v11 = (v9 >> 3) + 1;
  if (v11 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v4 - (void)v8;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v14 = operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  double v14 = 0;
  uint64_t v15 = (char *)(8 * v10);
  int v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_41;
    }
    if ((unint64_t)(v5 - v14 - v9) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    double v6 = &v5[-v20];
    v15 -= v20;
    int v21 = &v14[8 * v10 - 16];
    uint64_t v22 = v5 - 16;
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v22 - 1);
      _OWORD *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v25 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    double v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  a1[1] = (char *)v7;
  uint64_t v26 = *a1;
  uint64_t v27 = v7 - (void)*a1;
  if (v27 >= 9)
  {
    unint64_t v28 = ((unint64_t)v27 >> 3) - 2;
    unint64_t v29 = v28 >> 1;
    long long v30 = &v26[8 * (v28 >> 1)];
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = *(void *)(v7 - 8);
    double v33 = *(double *)(*(void *)v30 + 32);
    double v34 = *(double *)(v32 + 32);
    BOOL v35 = v33 < v34;
    if (v33 == v34) {
      BOOL v35 = *(double *)(v31 + 24) < *(double *)(v32 + 24);
    }
    if (v35)
    {
      *(void *)(v7 - 8) = v31;
      if (v28 >= 2)
      {
        while (1)
        {
          unint64_t v36 = v29 - 1;
          unint64_t v29 = (v29 - 1) >> 1;
          uint64_t v37 = &v26[8 * v29];
          uint64_t v38 = *(void *)v37;
          double v39 = *(double *)(*(void *)v37 + 32);
          if (v39 == v34)
          {
            if (*(double *)(v38 + 24) >= *(double *)(v32 + 24)) {
              break;
            }
          }
          else if (v39 >= v34)
          {
            break;
          }
          *(void *)long long v30 = v38;
          long long v30 = &v26[8 * v29];
          if (v36 <= 1) {
            goto LABEL_35;
          }
        }
      }
      uint64_t v37 = v30;
LABEL_35:
      *(void *)uint64_t v37 = v32;
    }
  }
}

uint64_t operations_research::KnapsackSolverForCuts::UpdatePropagators(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    do
    {
      unint64_t v5 = *(int *)(v2 + 16);
      *(void *)(v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
      if (*(unsigned char *)(v2 + 20))
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8 * v5);
        double v7 = *(double *)(v6 + 8);
        *(double *)(a1 + 80) = *(double *)(a1 + 80) - *(double *)(v6 + 16);
        *(double *)(a1 + 8) = *(double *)(a1 + 8) - v7;
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v3);
  }
  uint64_t v8 = a2[2];
  if (v8 != v3)
  {
    uint64_t v9 = *(void *)(a1 + 136);
    LOBYTE(v10) = 1;
    while (1)
    {
      while (1)
      {
        unint64_t v12 = *(int *)(v8 + 16);
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = 1 << v12;
        uint64_t v15 = *(void *)(v9 + 8 * (v12 >> 6));
        if (((1 << v12) & v15) != 0) {
          break;
        }
        int v17 = *(unsigned __int8 *)(v8 + 20);
        uint64_t v16 = *(void *)(a1 + 160);
LABEL_15:
        *(void *)(v9 + 8 * v13) = v14 | v15;
        if (v17)
        {
          *(void *)(v16 + 8 * v13) |= v14;
          char v11 = 1;
          goto LABEL_17;
        }
        *(void *)(v16 + 8 * v13) &= ~v14;
        char v11 = 1;
LABEL_9:
        uint64_t v10 = v11 & 1u & v10;
        uint64_t v8 = *(void *)(v8 + 8);
        if (v8 == v3) {
          return v10;
        }
      }
      uint64_t v16 = *(void *)(a1 + 160);
      int v17 = *(unsigned __int8 *)(v8 + 20);
      if (v17 == ((*(void *)(v16 + 8 * v13) & v14) != 0)) {
        goto LABEL_15;
      }
      char v11 = 0;
      if (!*(unsigned char *)(v8 + 20)) {
        goto LABEL_9;
      }
LABEL_17:
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
      double v19 = *(double *)(v18 + 8);
      *(double *)(a1 + 80) = *(double *)(a1 + 80) + *(double *)(v18 + 16);
      double v20 = *(double *)a1;
      double v21 = v19 + *(double *)(a1 + 8);
      *(double *)(a1 + 8) = v21;
      if (v21 <= v20) {
        goto LABEL_9;
      }
      uint64_t v10 = 0;
      uint64_t v8 = *(void *)(v8 + 8);
      if (v8 == v3) {
        return v10;
      }
    }
  }
  return 1;
}

void std::vector<BOOL>::__throw_out_of_range[abi:ne180100]()
{
}

void *std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::__emplace_back_slow_path<std::unique_ptr<operations_research::KnapsackItemForCuts>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  char v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  unint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  double v19 = &v15[-v18];
  double v20 = v15 - 16;
  double v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0uLL;
    *(_OWORD *)double v20 = 0uLL;
    *((_OWORD *)v21 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v24;
    *(_OWORD *)double v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  uint64_t v26 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v15 = 0;
      if (v28) {
        MEMORY[0x23ECF2BC0](v27, 0x1000C40D315E998);
      }
    }
    while (v15 != v26);
    uint64_t v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *,false>(uint64_t result, uint64_t *a2, double *a3, uint64_t a4, char a5)
{
  char v11 = (uint64_t *)result;
LABEL_2:
  std::string::size_type v226 = a2 - 1;
  uint64_t v12 = v11;
  while (1)
  {
    char v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    uint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v110 = *(a2 - 1);
          uint64_t v111 = *v11;
          double v112 = *(double *)(v110 + 8);
          double v113 = *a3;
          if (v112 > 0.0)
          {
            double v113 = *(double *)(v110 + 16) / v112;
            double v114 = *(double *)(v111 + 8);
            if (v114 <= 0.0)
            {
LABEL_133:
              if (v113 <= *a3) {
                return result;
              }
              goto LABEL_257;
            }
          }
          else
          {
            double v114 = *(double *)(v111 + 8);
            if (v114 <= 0.0) {
              goto LABEL_133;
            }
          }
          if (v113 <= *(double *)(v111 + 16) / v114) {
            return result;
          }
LABEL_257:
          *char v11 = v110;
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v111;
          return result;
        case 3:
          double v115 = *a3;
        case 4:
          uint64_t v116 = v11 + 2;
          double v117 = *a3;
          uint64_t v118 = *(a2 - 1);
          uint64_t v119 = v11[2];
          double v120 = *(double *)(v118 + 8);
          double v121 = *a3;
          if (v120 > 0.0)
          {
            double v121 = *(double *)(v118 + 16) / v120;
            double v122 = *(double *)(v119 + 8);
            double v123 = *a3;
            if (v122 <= 0.0)
            {
LABEL_140:
              if (v121 <= v123) {
                return result;
              }
              goto LABEL_260;
            }
          }
          else
          {
            double v122 = *(double *)(v119 + 8);
            double v123 = *a3;
            if (v122 <= 0.0) {
              goto LABEL_140;
            }
          }
          if (v121 <= *(double *)(v119 + 16) / v122) {
            return result;
          }
LABEL_260:
          *uint64_t v116 = v118;
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v119;
          uint64_t v204 = *v116;
          uint64_t v205 = v11[1];
          double v206 = *(double *)(*v116 + 8);
          double v207 = v117;
          if (v206 > 0.0)
          {
            double v207 = *(double *)(v204 + 16) / v206;
            double v208 = *(double *)(v205 + 8);
            double v209 = v117;
            if (v208 <= 0.0)
            {
LABEL_262:
              if (v207 <= v209) {
                return result;
              }
              goto LABEL_286;
            }
          }
          else
          {
            double v208 = *(double *)(v205 + 8);
            double v209 = v117;
            if (v208 <= 0.0) {
              goto LABEL_262;
            }
          }
          if (v207 <= *(double *)(v205 + 16) / v208) {
            return result;
          }
LABEL_286:
          v11[1] = v204;
          v11[2] = v205;
          double v223 = v117;
          uint64_t v224 = *v11;
          if (v206 > 0.0)
          {
            double v223 = *(double *)(v204 + 16) / v206;
            double v225 = *(double *)(v224 + 8);
            if (v225 <= 0.0)
            {
LABEL_288:
              if (v223 > v117) {
                goto LABEL_292;
              }
              return result;
            }
          }
          else
          {
            double v225 = *(double *)(v224 + 8);
            if (v225 <= 0.0) {
              goto LABEL_288;
            }
          }
          if (v223 > *(double *)(v224 + 16) / v225)
          {
LABEL_292:
            *char v11 = v204;
            v11[1] = v224;
            return result;
          }
          break;
        case 5:
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v142 = (unint64_t)(v14 - 2) >> 1;
      int64_t v143 = v142;
      while (2)
      {
        int64_t v144 = v143;
        if (v142 < v143) {
          goto LABEL_178;
        }
        uint64_t v145 = (2 * v143) | 1;
        uint64_t v146 = &v11[v145];
        if (2 * v144 + 2 < v14)
        {
          double v153 = *(double *)(*v146 + 8);
          double v154 = *a3;
          if (v153 > 0.0) {
            double v154 = *(double *)(*v146 + 16) / v153;
          }
          uint64_t v156 = v146[1];
          ++v146;
          uint64_t v155 = v156;
          double v157 = *(double *)(v156 + 8);
          double v158 = *a3;
          if (v157 > 0.0) {
            double v158 = *(double *)(v155 + 16) / v157;
          }
          if (v154 > v158) {
            uint64_t v145 = 2 * v144 + 2;
          }
          else {
            uint64_t v146 = &v11[v145];
          }
          uint64_t v147 = *v146;
          double v148 = *(double *)(*v146 + 8);
          double v149 = *a3;
          if (v148 > 0.0) {
            goto LABEL_193;
          }
LABEL_182:
          uint64_t v150 = &v11[v144];
          uint64_t v151 = *v150;
          double v152 = *(double *)(*v150 + 8);
          if (v152 <= 0.0) {
            goto LABEL_183;
          }
LABEL_194:
          if (v149 > *(double *)(v151 + 16) / v152) {
            goto LABEL_178;
          }
        }
        else
        {
          uint64_t v147 = *v146;
          double v148 = *(double *)(*v146 + 8);
          double v149 = *a3;
          if (v148 <= 0.0) {
            goto LABEL_182;
          }
LABEL_193:
          double v149 = *(double *)(v147 + 16) / v148;
          uint64_t v150 = &v11[v144];
          uint64_t v151 = *v150;
          double v152 = *(double *)(*v150 + 8);
          if (v152 > 0.0) {
            goto LABEL_194;
          }
LABEL_183:
          if (v149 > *a3) {
            goto LABEL_178;
          }
        }
        *uint64_t v150 = 0;
        uint64_t v159 = *v146;
LABEL_197:
        uint64_t v160 = v146;
        *uint64_t v146 = 0;
        uint64_t v161 = *v150;
        *uint64_t v150 = v159;
        if (v161) {
          MEMORY[0x23ECF2BC0](v161, 0x1000C40D315E998);
        }
        if (v142 < v145)
        {
LABEL_214:
          uint64_t v173 = *v160;
          uint64_t *v160 = v151;
          if (v173) {
            MEMORY[0x23ECF2BC0](v173, 0x1000C40D315E998);
          }
LABEL_178:
          int64_t v143 = v144 - 1;
          if (!v144)
          {
            uint64_t v174 = (unint64_t)v13 >> 3;
            while (1)
            {
              uint64_t v176 = 0;
              uint64_t v177 = *v11;
              *char v11 = 0;
              long long v178 = v11;
              do
              {
                size_t v179 = &v178[v176 + 1];
                uint64_t v180 = 2 * v176;
                uint64_t v176 = (2 * v176) | 1;
                if (v180 + 2 < v174)
                {
                  double v181 = *a3;
                  double v182 = *(double *)(*v179 + 8);
                  double v183 = *a3;
                  if (v182 > 0.0) {
                    double v183 = *(double *)(*v179 + 16) / v182;
                  }
                  uint64_t v184 = v179[1];
                  double v185 = *(double *)(v184 + 8);
                  if (v185 > 0.0) {
                    double v181 = *(double *)(v184 + 16) / v185;
                  }
                  if (v183 > v181)
                  {
                    ++v179;
                    uint64_t v176 = v180 + 2;
                  }
                }
                uint64_t v186 = *v179;
                *size_t v179 = 0;
                uint64_t v187 = *v178;
                uint64_t *v178 = v186;
                if (v187) {
                  MEMORY[0x23ECF2BC0](v187, 0x1000C40D315E998);
                }
                long long v178 = v179;
              }
              while (v176 <= (uint64_t)((unint64_t)(v174 - 2) >> 1));
              if (v179 == --a2)
              {
                double result = *v179;
                *size_t v179 = v177;
                if (!result) {
                  goto LABEL_219;
                }
                goto LABEL_218;
              }
              uint64_t v188 = *a2;
              *a2 = 0;
              uint64_t v189 = *v179;
              *size_t v179 = v188;
              if (v189) {
                MEMORY[0x23ECF2BC0](v189, 0x1000C40D315E998);
              }
              double result = *a2;
              *a2 = v177;
              if (result) {
                double result = MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
              }
              uint64_t v190 = (char *)(v179 + 1) - (char *)v11;
              if (v190 >= 9) {
                break;
              }
LABEL_219:
              if (v174-- <= 2) {
                return result;
              }
            }
            unint64_t v191 = (((unint64_t)v190 >> 3) - 2) >> 1;
            std::string::size_type v192 = &v11[v191];
            double v193 = *(double *)(*v192 + 8);
            double v194 = *a3;
            if (v193 > 0.0)
            {
              double v194 = *(double *)(*v192 + 16) / v193;
              uint64_t v195 = *v179;
              double v196 = *(double *)(*v179 + 8);
              if (v196 <= 0.0) {
                goto LABEL_239;
              }
            }
            else
            {
              uint64_t v195 = *v179;
              double v196 = *(double *)(*v179 + 8);
              if (v196 <= 0.0)
              {
LABEL_239:
                if (v194 <= *a3) {
                  goto LABEL_219;
                }
                goto LABEL_243;
              }
            }
            if (v194 <= *(double *)(v195 + 16) / v196) {
              goto LABEL_219;
            }
LABEL_243:
            *size_t v179 = 0;
            uint64_t v197 = *v192;
            while (2)
            {
              uint64_t v198 = v192;
              uint64_t *v192 = 0;
              uint64_t v199 = *v179;
              *size_t v179 = v197;
              if (v199) {
                MEMORY[0x23ECF2BC0](v199, 0x1000C40D315E998);
              }
              if (!v191)
              {
LABEL_253:
                double result = *v198;
                uint64_t *v198 = v195;
                if (!result) {
                  goto LABEL_219;
                }
LABEL_218:
                double result = MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
                goto LABEL_219;
              }
              unint64_t v191 = (v191 - 1) >> 1;
              std::string::size_type v192 = &v11[v191];
              double v200 = *a3;
              uint64_t v197 = *v192;
              double v201 = *(double *)(*v192 + 8);
              double v202 = *a3;
              if (v201 > 0.0)
              {
                double v202 = *(double *)(v197 + 16) / v201;
                double v203 = *(double *)(v195 + 8);
                if (v203 > 0.0) {
                  goto LABEL_252;
                }
              }
              else
              {
                double v203 = *(double *)(v195 + 8);
                if (v203 > 0.0) {
LABEL_252:
                }
                  double v200 = *(double *)(v195 + 16) / v203;
              }
              size_t v179 = v198;
              if (v202 <= v200) {
                goto LABEL_253;
              }
              continue;
            }
          }
          continue;
        }
        break;
      }
      uint64_t v162 = (2 * v145) | 1;
      uint64_t v146 = &v11[v162];
      double v163 = *a3;
      if (2 * v145 + 2 >= v14)
      {
        uint64_t v145 = (2 * v145) | 1;
        uint64_t v159 = *v146;
        double v170 = *(double *)(*v146 + 8);
        double v171 = *a3;
        if (v170 <= 0.0) {
          goto LABEL_212;
        }
      }
      else
      {
        double v164 = *(double *)(*v146 + 8);
        double v165 = *a3;
        if (v164 > 0.0) {
          double v165 = *(double *)(*v146 + 16) / v164;
        }
        uint64_t v167 = v146[1];
        ++v146;
        uint64_t v166 = v167;
        double v168 = *(double *)(v167 + 8);
        double v169 = *a3;
        if (v168 > 0.0) {
          double v169 = *(double *)(v166 + 16) / v168;
        }
        if (v165 > v169)
        {
          uint64_t v145 = 2 * v145 + 2;
        }
        else
        {
          uint64_t v146 = &v11[v162];
          uint64_t v145 = (2 * v145) | 1;
        }
        uint64_t v159 = *v146;
        double v170 = *(double *)(*v146 + 8);
        double v171 = *a3;
        if (v170 <= 0.0)
        {
LABEL_212:
          double v172 = *(double *)(v151 + 8);
          if (v172 > 0.0) {
            double v163 = *(double *)(v151 + 16) / v172;
          }
          uint64_t v150 = v160;
          if (v171 > v163) {
            goto LABEL_214;
          }
          goto LABEL_197;
        }
      }
      double v171 = *(double *)(v159 + 16) / v170;
      goto LABEL_212;
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    unint64_t v16 = &v11[(unint64_t)v14 >> 1];
    double v17 = *a3;
    if ((unint64_t)v13 < 0x401)
    {
      --a4;
      double v21 = *a3;
      uint64_t v22 = *v11;
      if (a5)
      {
LABEL_15:
        double v26 = *(double *)(v22 + 8);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v18 = v15;
      double v19 = &v11[v15];
      uint64_t v20 = *v11;
      *char v11 = *v19;
      *double v19 = v20;
      --a4;
      double v21 = *a3;
      uint64_t v22 = *v11;
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v23 = *(v11 - 1);
    double v24 = *(double *)(v23 + 8);
    double v25 = v21;
    if (v24 > 0.0) {
      double v25 = *(double *)(v23 + 16) / v24;
    }
    double v26 = *(double *)(v22 + 8);
    if (v26 <= 0.0)
    {
      if (v25 <= v21)
      {
        double v27 = v21;
        goto LABEL_73;
      }
LABEL_17:
      *char v11 = 0;
      if (v26 <= 0.0)
      {
        double v33 = v11 + 1;
        do
        {
          uint64_t v28 = v33;
          uint64_t v29 = *v33;
          double v34 = *(double *)(*v33 + 8);
          if (v34 <= 0.0) {
            break;
          }
          ++v33;
        }
        while (*(double *)(v29 + 16) / v34 > v21);
      }
      else
      {
        uint64_t v28 = v11;
        do
        {
          uint64_t v30 = v28[1];
          ++v28;
          uint64_t v29 = v30;
          double v31 = *(double *)(v30 + 8);
          double v32 = v21;
          if (v31 > 0.0) {
            double v32 = *(double *)(v29 + 16) / v31;
          }
        }
        while (v32 > *(double *)(v22 + 16) / v26);
      }
      if (v28 - 1 == v11)
      {
        BOOL v35 = a2;
        if (v26 <= 0.0)
        {
          do
          {
            if (v28 >= v35) {
              break;
            }
            uint64_t v45 = *--v35;
            uint64_t v44 = v45;
            double v46 = *(double *)(v45 + 8);
            double v47 = v21;
            if (v46 > 0.0) {
              double v47 = *(double *)(v44 + 16) / v46;
            }
          }
          while (v47 <= v21);
        }
        else
        {
          BOOL v35 = a2;
          do
          {
            if (v28 >= v35) {
              break;
            }
            uint64_t v49 = *--v35;
            uint64_t v48 = v49;
            double v50 = *(double *)(v49 + 8);
            double v51 = v21;
            if (v50 > 0.0) {
              double v51 = *(double *)(v48 + 16) / v50;
            }
          }
          while (v51 <= *(double *)(v22 + 16) / v26);
        }
      }
      else
      {
        BOOL v35 = a2;
        if (v26 <= 0.0)
        {
          do
          {
            uint64_t v37 = *--v35;
            uint64_t v36 = v37;
            double v38 = *(double *)(v37 + 8);
            double v39 = v21;
            if (v38 > 0.0) {
              double v39 = *(double *)(v36 + 16) / v38;
            }
          }
          while (v39 <= v21);
        }
        else
        {
          BOOL v35 = a2;
          do
          {
            uint64_t v41 = *--v35;
            uint64_t v40 = v41;
            double v42 = *(double *)(v41 + 8);
            double v43 = v21;
            if (v42 > 0.0) {
              double v43 = *(double *)(v40 + 16) / v42;
            }
          }
          while (v43 <= *(double *)(v22 + 16) / v26);
        }
      }
      uint64_t v12 = v28;
      if (v28 < v35)
      {
        uint64_t v52 = *v35;
        uint64_t v12 = v28;
        uint64_t v53 = v35;
        do
        {
          uint64_t *v12 = v52;
          *uint64_t v53 = v29;
          if (v26 <= 0.0)
          {
            uint64_t v57 = v12 + 1;
            do
            {
              uint64_t v12 = v57;
              uint64_t v29 = *v57;
              double v58 = *(double *)(*v57 + 8);
              if (v58 <= 0.0) {
                break;
              }
              ++v57;
            }
            while (*(double *)(v29 + 16) / v58 > v21);
          }
          else
          {
            do
            {
              uint64_t v54 = v12[1];
              ++v12;
              uint64_t v29 = v54;
              double v55 = *(double *)(v54 + 8);
              double v56 = v21;
              if (v55 > 0.0) {
                double v56 = *(double *)(v29 + 16) / v55;
              }
            }
            while (v56 > *(double *)(v22 + 16) / v26);
          }
          if (v26 <= 0.0)
          {
            do
            {
              uint64_t v59 = *--v53;
              uint64_t v52 = v59;
              double v60 = *(double *)(v59 + 8);
              double v61 = v21;
              if (v60 > 0.0) {
                double v61 = *(double *)(v52 + 16) / v60;
              }
            }
            while (v61 <= v21);
          }
          else
          {
            do
            {
              uint64_t v62 = *--v53;
              uint64_t v52 = v62;
              double v63 = *(double *)(v62 + 8);
              double v64 = v21;
              if (v63 > 0.0) {
                double v64 = *(double *)(v52 + 16) / v63;
              }
            }
            while (v64 <= *(double *)(v22 + 16) / v26);
          }
        }
        while (v12 < v53);
      }
      uint64_t v65 = v12 - 1;
      if (v12 - 1 != v11)
      {
        uint64_t v66 = *v65;
        uint64_t *v65 = 0;
        uint64_t v67 = *v11;
        *char v11 = v66;
        if (v67) {
          MEMORY[0x23ECF2BC0](v67, 0x1000C40D315E998);
        }
      }
      uint64_t v68 = *v65;
      uint64_t *v65 = v22;
      if (v68) {
        MEMORY[0x23ECF2BC0](v68, 0x1000C40D315E998);
      }
      if (v28 < v35) {
        goto LABEL_71;
      }
      if (result)
      {
        a2 = v12 - 1;
        if (v69) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v69)
      {
LABEL_71:
        a5 = 0;
      }
    }
    else
    {
      double v27 = *(double *)(v22 + 16) / v26;
      if (v25 > v27) {
        goto LABEL_17;
      }
LABEL_73:
      *char v11 = 0;
      double v70 = *(double *)(*v226 + 8);
      double v71 = v21;
      if (v70 > 0.0) {
        double v71 = *(double *)(*v226 + 16) / v70;
      }
      if (v27 <= v71)
      {
        uint64_t v80 = v11 + 1;
        if (v26 > 0.0)
        {
          do
          {
            uint64_t v12 = v80;
            if (v80 >= a2) {
              break;
            }
            double v81 = *(double *)(*v80 + 8);
            double v82 = v21;
            if (v81 > 0.0) {
              double v82 = *(double *)(*v80 + 16) / v81;
            }
            ++v80;
          }
          while (*(double *)(v22 + 16) / v26 <= v82);
        }
        else
        {
          do
          {
            uint64_t v12 = v80;
            if (v80 >= a2) {
              break;
            }
            double v83 = *(double *)(*v80 + 8);
            double v84 = v21;
            if (v83 > 0.0) {
              double v84 = *(double *)(*v80 + 16) / v83;
            }
            ++v80;
          }
          while (v84 >= v21);
        }
      }
      else
      {
        uint64_t v12 = v11;
        if (v26 <= 0.0)
        {
          do
          {
            uint64_t v73 = v12[1];
            ++v12;
            uint64_t v72 = v73;
            double v74 = *(double *)(v73 + 8);
            double v75 = v21;
            if (v74 > 0.0) {
              double v75 = *(double *)(v72 + 16) / v74;
            }
          }
          while (v75 >= v21);
        }
        else
        {
          uint64_t v12 = v11;
          do
          {
            uint64_t v77 = v12[1];
            ++v12;
            uint64_t v76 = v77;
            double v78 = *(double *)(v77 + 8);
            double v79 = v21;
            if (v78 > 0.0) {
              double v79 = *(double *)(v76 + 16) / v78;
            }
          }
          while (*(double *)(v22 + 16) / v26 <= v79);
        }
      }
      std::string v85 = a2;
      if (v12 < a2)
      {
        unint64_t v86 = a2 - 1;
        if (v26 <= 0.0)
        {
          do
          {
            std::string v85 = v86;
            uint64_t v91 = *v86;
            double v92 = *(double *)(v91 + 8);
            if (v92 <= 0.0) {
              break;
            }
            double v93 = *(double *)(v91 + 16) / v92;
            unint64_t v86 = v85 - 1;
          }
          while (v93 < v21);
        }
        else
        {
          std::string v85 = a2;
          do
          {
            uint64_t v88 = *--v85;
            uint64_t v87 = v88;
            double v89 = *(double *)(v88 + 8);
            double v90 = v21;
            if (v89 > 0.0) {
              double v90 = *(double *)(v87 + 16) / v89;
            }
          }
          while (*(double *)(v22 + 16) / v26 > v90);
        }
      }
      if (v12 < v85)
      {
        uint64_t v94 = *v12;
        uint64_t v95 = *v85;
        do
        {
          uint64_t *v12 = v95;
          *std::string v85 = v94;
          if (v26 <= 0.0)
          {
            do
            {
              uint64_t v96 = v12[1];
              ++v12;
              uint64_t v94 = v96;
              double v97 = *(double *)(v96 + 8);
              double v98 = v21;
              if (v97 > 0.0) {
                double v98 = *(double *)(v94 + 16) / v97;
              }
            }
            while (v98 >= v21);
          }
          else
          {
            do
            {
              uint64_t v99 = v12[1];
              ++v12;
              uint64_t v94 = v99;
              double v100 = *(double *)(v99 + 8);
              double v101 = v21;
              if (v100 > 0.0) {
                double v101 = *(double *)(v94 + 16) / v100;
              }
            }
            while (*(double *)(v22 + 16) / v26 <= v101);
          }
          if (v26 <= 0.0)
          {
            uint64_t v105 = v85 - 1;
            do
            {
              std::string v85 = v105;
              uint64_t v95 = *v105;
              double v106 = *(double *)(*v105 + 8);
              if (v106 <= 0.0) {
                break;
              }
              --v105;
            }
            while (*(double *)(v95 + 16) / v106 < v21);
          }
          else
          {
            do
            {
              uint64_t v102 = *--v85;
              uint64_t v95 = v102;
              double v103 = *(double *)(v102 + 8);
              double v104 = v21;
              if (v103 > 0.0) {
                double v104 = *(double *)(v95 + 16) / v103;
              }
            }
            while (*(double *)(v22 + 16) / v26 > v104);
          }
        }
        while (v12 < v85);
      }
      int v107 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11)
      {
        uint64_t v108 = *v107;
        *int v107 = 0;
        uint64_t v109 = *v11;
        *char v11 = v108;
        if (v109) {
          MEMORY[0x23ECF2BC0](v109, 0x1000C40D315E998);
        }
      }
      a5 = 0;
      double result = *v107;
      *int v107 = v22;
      if (result)
      {
        double result = MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
        a5 = 0;
      }
    }
  }
  __darwin_time_t v124 = v11 + 1;
  BOOL v126 = v11 == a2 || v124 == a2;
  if (a5)
  {
    if (v126) {
      return result;
    }
    uint64_t v127 = 0;
    uint64_t v128 = v11;
    while (2)
    {
      int64_t v129 = v128;
      uint64_t v128 = v124;
      uint64_t v130 = v129[1];
      double v131 = *(double *)(v130 + 8);
      double v132 = *a3;
      if (v131 > 0.0)
      {
        double v132 = *(double *)(v130 + 16) / v131;
        uint64_t v133 = *v129;
        double v134 = *(double *)(*v129 + 8);
        if (v134 <= 0.0) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v133 = *v129;
        double v134 = *(double *)(*v129 + 8);
        if (v134 <= 0.0)
        {
LABEL_157:
          if (v132 <= *a3) {
            goto LABEL_154;
          }
          goto LABEL_161;
        }
      }
      if (v132 <= *(double *)(v133 + 16) / v134) {
        goto LABEL_154;
      }
LABEL_161:
      uint64_t *v128 = 0;
      uint64_t v135 = v127 * 8;
      uint64_t v136 = &v11[v127];
      *uint64_t v136 = 0;
      v136[1] = v133;
      while (2)
      {
        if (!v135)
        {
          double result = *v11;
          *char v11 = v130;
          if (!result) {
            goto LABEL_154;
          }
          goto LABEL_175;
        }
        double v137 = *(double *)(v130 + 8);
        double v138 = *a3;
        if (v137 > 0.0)
        {
          double v138 = *(double *)(v130 + 16) / v137;
          uint64_t v139 = *(uint64_t *)((char *)v11 + v135 - 8);
          double v140 = *(double *)(v139 + 8);
          if (v140 <= 0.0) {
            goto LABEL_166;
          }
        }
        else
        {
          uint64_t v139 = *(uint64_t *)((char *)v11 + v135 - 8);
          double v140 = *(double *)(v139 + 8);
          if (v140 <= 0.0)
          {
LABEL_166:
            if (v138 <= *a3) {
              goto LABEL_174;
            }
LABEL_170:
            uint64_t v141 = *v136;
            v135 -= 8;
            uint64_t v136 = (uint64_t *)((char *)v11 + v135);
            *uint64_t v136 = 0;
            v136[1] = v139;
            if (v141) {
              MEMORY[0x23ECF2BC0](v141, 0x1000C40D315E998);
            }
            continue;
          }
        }
        break;
      }
      if (v138 <= *(double *)(v139 + 16) / v140)
      {
LABEL_174:
        double result = *(uint64_t *)((char *)v11 + v135);
        *(uint64_t *)((char *)v11 + v13std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v130;
        if (!result) {
          goto LABEL_154;
        }
LABEL_175:
        double result = MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
LABEL_154:
        __darwin_time_t v124 = v128 + 1;
        ++v127;
        if (v128 + 1 == a2) {
          return result;
        }
        continue;
      }
      goto LABEL_170;
    }
  }
  if (!v126)
  {
LABEL_267:
    unint64_t v210 = v11;
    char v11 = v124;
    double v211 = *a3;
    uint64_t v212 = v210[1];
    double v213 = *(double *)(v212 + 8);
    double v214 = *a3;
    if (v213 > 0.0)
    {
      double v214 = *(double *)(v212 + 16) / v213;
      uint64_t v215 = *v210;
      double v216 = *(double *)(*v210 + 8);
      double v217 = *a3;
      if (v216 <= 0.0)
      {
LABEL_269:
        if (v214 <= v217) {
          goto LABEL_266;
        }
LABEL_273:
        double result = 0;
        *char v11 = 0;
        std::string::size_type v218 = v11;
        while (1)
        {
          *(v218 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
          *std::string::size_type v218 = v215;
          if (result)
          {
            MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
            double v211 = *a3;
            double v213 = *(double *)(v212 + 8);
          }
          uint64_t v215 = *(v218 - 2);
          double v220 = v211;
          if (v213 > 0.0)
          {
            double v220 = *(double *)(v212 + 16) / v213;
            double v221 = *(double *)(v215 + 8);
            double v222 = v211;
            if (v221 > 0.0) {
LABEL_281:
            }
              double v222 = *(double *)(v215 + 16) / v221;
          }
          else
          {
            double v221 = *(double *)(v215 + 8);
            double v222 = v211;
            if (v221 > 0.0) {
              goto LABEL_281;
            }
          }
          uint64_t v219 = *--v218;
          double result = v219;
          if (v220 <= v222)
          {
            *std::string::size_type v218 = v212;
            if (result) {
              double result = MEMORY[0x23ECF2BC0](result, 0x1000C40D315E998);
            }
LABEL_266:
            __darwin_time_t v124 = v11 + 1;
            if (v11 + 1 == a2) {
              return result;
            }
            goto LABEL_267;
          }
        }
      }
    }
    else
    {
      uint64_t v215 = *v210;
      double v216 = *(double *)(*v210 + 8);
      double v217 = *a3;
      if (v216 <= 0.0) {
        goto LABEL_269;
      }
    }
    if (v214 <= *(double *)(v215 + 16) / v216) {
      goto LABEL_266;
    }
    goto LABEL_273;
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  double v13 = *a6;
  uint64_t v14 = *a4;
  uint64_t v15 = *a3;
  double v16 = *(double *)(*a4 + 8);
  double v17 = *a6;
  if (v16 <= 0.0)
  {
    double v18 = *(double *)(v15 + 8);
    double v19 = *a6;
    if (v18 <= 0.0) {
      goto LABEL_3;
    }
LABEL_6:
    if (v17 <= *(double *)(v15 + 16) / v18) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  double v17 = *(double *)(v14 + 16) / v16;
  double v18 = *(double *)(v15 + 8);
  double v19 = *a6;
  if (v18 > 0.0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v17 <= v19) {
    goto LABEL_17;
  }
LABEL_7:
  *a3 = v14;
  *a4 = v15;
  uint64_t v20 = *a3;
  uint64_t v21 = *a2;
  double v22 = *(double *)(*a3 + 8);
  double v23 = v13;
  if (v22 <= 0.0)
  {
    double v24 = *(double *)(v21 + 8);
    double v25 = v13;
    if (v24 <= 0.0) {
      goto LABEL_9;
    }
LABEL_12:
    if (v23 <= *(double *)(v21 + 16) / v24) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  double v23 = *(double *)(v20 + 16) / v22;
  double v24 = *(double *)(v21 + 8);
  double v25 = v13;
  if (v24 > 0.0) {
    goto LABEL_12;
  }
LABEL_9:
  if (v23 <= v25) {
    goto LABEL_17;
  }
LABEL_13:
  *a2 = v20;
  *a3 = v21;
  uint64_t v26 = *a2;
  uint64_t v27 = *a1;
  double v28 = *(double *)(*a2 + 8);
  double v29 = v13;
  if (v28 > 0.0)
  {
    double v29 = *(double *)(v26 + 16) / v28;
    double v30 = *(double *)(v27 + 8);
    double v31 = v13;
    if (v30 <= 0.0)
    {
LABEL_15:
      if (v29 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else
  {
    double v30 = *(double *)(v27 + 8);
    double v31 = v13;
    if (v30 <= 0.0) {
      goto LABEL_15;
    }
  }
  if (v29 > *(double *)(v27 + 16) / v30)
  {
LABEL_16:
    *a1 = v26;
    *a2 = v27;
  }
LABEL_17:
  uint64_t v32 = *a5;
  uint64_t v33 = *a4;
  double v34 = *(double *)(*a5 + 8);
  double v35 = v13;
  if (v34 > 0.0)
  {
    double v35 = *(double *)(v32 + 16) / v34;
    double v36 = *(double *)(v33 + 8);
    double v37 = v13;
    if (v36 <= 0.0)
    {
LABEL_19:
      if (v35 <= v37) {
        return result;
      }
      goto LABEL_23;
    }
  }
  else
  {
    double v36 = *(double *)(v33 + 8);
    double v37 = v13;
    if (v36 <= 0.0) {
      goto LABEL_19;
    }
  }
  if (v35 <= *(double *)(v33 + 16) / v36) {
    return result;
  }
LABEL_23:
  *a4 = v32;
  *a5 = v33;
  uint64_t v38 = *a4;
  uint64_t v39 = *a3;
  double v40 = *(double *)(*a4 + 8);
  double v41 = v13;
  if (v40 > 0.0)
  {
    double v41 = *(double *)(v38 + 16) / v40;
    double v42 = *(double *)(v39 + 8);
    double v43 = v13;
    if (v42 <= 0.0)
    {
LABEL_25:
      if (v41 <= v43) {
        return result;
      }
      goto LABEL_29;
    }
  }
  else
  {
    double v42 = *(double *)(v39 + 8);
    double v43 = v13;
    if (v42 <= 0.0) {
      goto LABEL_25;
    }
  }
  if (v41 <= *(double *)(v39 + 16) / v42) {
    return result;
  }
LABEL_29:
  *a3 = v38;
  *a4 = v39;
  uint64_t v44 = *a3;
  uint64_t v45 = *a2;
  double v46 = *(double *)(*a3 + 8);
  double v47 = v13;
  if (v46 > 0.0)
  {
    double v47 = *(double *)(v44 + 16) / v46;
    double v48 = *(double *)(v45 + 8);
    double v49 = v13;
    if (v48 <= 0.0)
    {
LABEL_31:
      if (v47 <= v49) {
        return result;
      }
      goto LABEL_38;
    }
  }
  else
  {
    double v48 = *(double *)(v45 + 8);
    double v49 = v13;
    if (v48 <= 0.0) {
      goto LABEL_31;
    }
  }
  if (v47 <= *(double *)(v45 + 16) / v48) {
    return result;
  }
LABEL_38:
  *a2 = v44;
  *a3 = v45;
  uint64_t v50 = *a2;
  uint64_t v51 = *a1;
  double v52 = *(double *)(*a2 + 8);
  double v53 = v13;
  if (v52 > 0.0)
  {
    double v53 = *(double *)(v50 + 16) / v52;
    double v54 = *(double *)(v51 + 8);
    if (v54 <= 0.0)
    {
LABEL_40:
      if (v53 > v13) {
        goto LABEL_44;
      }
      return result;
    }
  }
  else
  {
    double v54 = *(double *)(v51 + 8);
    if (v54 <= 0.0) {
      goto LABEL_40;
    }
  }
  if (v53 > *(double *)(v51 + 16) / v54)
  {
LABEL_44:
    *a1 = v50;
    *a2 = v51;
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *>(uint64_t *result, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  double v6 = *(double *)(*a2 + 8);
  double v7 = a4;
  if (v6 > 0.0)
  {
    double v7 = *(double *)(v4 + 16) / v6;
    double v8 = *(double *)(v5 + 8);
    double v9 = a4;
    if (v8 <= 0.0)
    {
LABEL_3:
      uint64_t v10 = *a3;
      double v11 = *(double *)(*a3 + 8);
      if (v7 > v9) {
        goto LABEL_4;
      }
LABEL_10:
      double v14 = a4;
      if (v11 > 0.0)
      {
        double v14 = *(double *)(v10 + 16) / v11;
        double v15 = a4;
        if (v6 <= 0.0)
        {
LABEL_12:
          if (v14 <= v15) {
            return result;
          }
          goto LABEL_22;
        }
      }
      else
      {
        double v15 = a4;
        if (v6 <= 0.0) {
          goto LABEL_12;
        }
      }
      if (v14 <= *(double *)(v4 + 16) / v6) {
        return result;
      }
LABEL_22:
      *a2 = v10;
      *a3 = v4;
      uint64_t v19 = *a2;
      uint64_t v20 = *result;
      double v21 = *(double *)(*a2 + 8);
      double v22 = a4;
      if (v21 > 0.0)
      {
        double v22 = *(double *)(v19 + 16) / v21;
        double v23 = *(double *)(v20 + 8);
        if (v23 <= 0.0)
        {
LABEL_24:
          if (v22 <= a4) {
            return result;
          }
          goto LABEL_31;
        }
      }
      else
      {
        double v23 = *(double *)(v20 + 8);
        if (v23 <= 0.0) {
          goto LABEL_24;
        }
      }
      if (v22 <= *(double *)(v20 + 16) / v23) {
        return result;
      }
LABEL_31:
      uint64_t *result = v19;
      *a2 = v20;
      return result;
    }
  }
  else
  {
    double v8 = *(double *)(v5 + 8);
    double v9 = a4;
    if (v8 <= 0.0) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = *a3;
  double v11 = *(double *)(*a3 + 8);
  if (v7 <= *(double *)(v5 + 16) / v8) {
    goto LABEL_10;
  }
LABEL_4:
  double v12 = a4;
  if (v11 <= 0.0)
  {
    double v13 = a4;
    if (v6 <= 0.0) {
      goto LABEL_6;
    }
LABEL_15:
    if (v12 > *(double *)(v4 + 16) / v6) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
  double v12 = *(double *)(v10 + 16) / v11;
  double v13 = a4;
  if (v6 > 0.0) {
    goto LABEL_15;
  }
LABEL_6:
  if (v12 > v13)
  {
LABEL_7:
    uint64_t *result = v10;
    *a3 = v5;
    return result;
  }
LABEL_16:
  uint64_t *result = v4;
  *a2 = v5;
  uint64_t v16 = *a3;
  double v17 = *(double *)(*a3 + 8);
  double v18 = a4;
  if (v17 > 0.0)
  {
    double v18 = *(double *)(v16 + 16) / v17;
    if (v8 <= 0.0)
    {
LABEL_18:
      if (v18 > a4) {
        goto LABEL_28;
      }
      return result;
    }
  }
  else if (v8 <= 0.0)
  {
    goto LABEL_18;
  }
  if (v18 > *(double *)(v5 + 16) / v8)
  {
LABEL_28:
    *a2 = v16;
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *>(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      double v10 = *(double *)(v8 + 8);
      double v11 = *a3;
      if (v10 > 0.0)
      {
        double v11 = *(double *)(v8 + 16) / v10;
        double v12 = *(double *)(v9 + 8);
        if (v12 <= 0.0)
        {
LABEL_4:
          if (v11 <= *a3) {
            return result;
          }
          goto LABEL_39;
        }
      }
      else
      {
        double v12 = *(double *)(v9 + 8);
        if (v12 <= 0.0) {
          goto LABEL_4;
        }
      }
      if (v11 <= *(double *)(v9 + 16) / v12) {
        return result;
      }
LABEL_39:
      *a1 = v8;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v9;
      return result;
    case 3:
      return 1;
    case 4:
      double v30 = a1 + 2;
      double v31 = *a3;
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = a1[2];
      double v34 = *(double *)(v32 + 8);
      double v35 = *a3;
      if (v34 > 0.0)
      {
        double v35 = *(double *)(v32 + 16) / v34;
        double v36 = *(double *)(v33 + 8);
        double v37 = *a3;
        if (v36 <= 0.0)
        {
LABEL_35:
          if (v35 <= v37) {
            return 1;
          }
          goto LABEL_42;
        }
      }
      else
      {
        double v36 = *(double *)(v33 + 8);
        double v37 = *a3;
        if (v36 <= 0.0) {
          goto LABEL_35;
        }
      }
      if (v35 <= *(double *)(v33 + 16) / v36) {
        return 1;
      }
LABEL_42:
      uint64_t *v30 = v32;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v33;
      uint64_t v38 = *v30;
      uint64_t v39 = a1[1];
      double v40 = *(double *)(*v30 + 8);
      double v41 = v31;
      if (v40 > 0.0)
      {
        double v41 = *(double *)(v38 + 16) / v40;
        double v42 = *(double *)(v39 + 8);
        double v43 = v31;
        if (v42 <= 0.0)
        {
LABEL_44:
          if (v41 <= v43) {
            return 1;
          }
LABEL_48:
          a1[1] = v38;
          a1[2] = v39;
          double v44 = v31;
          uint64_t v45 = *a1;
          if (v40 > 0.0)
          {
            double v44 = *(double *)(v38 + 16) / v40;
            double v46 = *(double *)(v45 + 8);
            if (v46 <= 0.0)
            {
LABEL_50:
              if (v44 <= v31) {
                return 1;
              }
              goto LABEL_51;
            }
          }
          else
          {
            double v46 = *(double *)(v45 + 8);
            if (v46 <= 0.0) {
              goto LABEL_50;
            }
          }
          if (v44 <= *(double *)(v45 + 16) / v46) {
            return 1;
          }
LABEL_51:
          *a1 = v38;
          a1[1] = v45;
          return 1;
        }
      }
      else
      {
        double v42 = *(double *)(v39 + 8);
        double v43 = v31;
        if (v42 <= 0.0) {
          goto LABEL_44;
        }
      }
      if (v41 <= *(double *)(v39 + 16) / v42) {
        return 1;
      }
      goto LABEL_48;
    case 5:
      return 1;
    default:
      double v13 = a1 + 2;
      double v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v15 = 0;
      uint64_t v16 = 2;
LABEL_10:
      uint64_t v17 = *v14;
      double v18 = *(double *)(*v14 + 8);
      double v19 = *a3;
      if (v18 > 0.0)
      {
        double v19 = *(double *)(v17 + 16) / v18;
        uint64_t v20 = *v13;
        double v21 = *(double *)(*v13 + 8);
        if (v21 <= 0.0)
        {
LABEL_12:
          if (v19 <= *a3) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v20 = *v13;
        double v21 = *(double *)(*v13 + 8);
        if (v21 <= 0.0) {
          goto LABEL_12;
        }
      }
      if (v19 <= *(double *)(v20 + 16) / v21) {
        goto LABEL_9;
      }
LABEL_16:
      uint64_t *v14 = 0;
      uint64_t v22 = v16 * 8;
      double v23 = &a1[v16];
      *double v23 = 0;
      v23[1] = v20;
      break;
  }
  while (1)
  {
    if (!v22)
    {
      uint64_t v29 = *a1;
      *a1 = v17;
      if (!v29) {
        goto LABEL_8;
      }
      goto LABEL_30;
    }
    double v24 = *(double *)(v17 + 8);
    double v25 = *a3;
    if (v24 > 0.0) {
      break;
    }
    uint64_t v26 = *(uint64_t *)((char *)a1 + v22 - 8);
    double v27 = *(double *)(v26 + 8);
    if (v27 > 0.0) {
      goto LABEL_24;
    }
LABEL_21:
    if (v25 <= *a3) {
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v28 = *v23;
    v22 -= 8;
    double v23 = (uint64_t *)((char *)a1 + v22);
    *double v23 = 0;
    v23[1] = v26;
    if (v28) {
      MEMORY[0x23ECF2BC0](v28, 0x1000C40D315E998);
    }
  }
  double v25 = *(double *)(v17 + 16) / v24;
  uint64_t v26 = *(uint64_t *)((char *)a1 + v22 - 8);
  double v27 = *(double *)(v26 + 8);
  if (v27 <= 0.0) {
    goto LABEL_21;
  }
LABEL_24:
  if (v25 > *(double *)(v26 + 16) / v27) {
    goto LABEL_25;
  }
LABEL_29:
  uint64_t v29 = *(uint64_t *)((char *)a1 + v22);
  *(uint64_t *)((char *)a1 + v22) = v17;
  if (!v29) {
    goto LABEL_8;
  }
LABEL_30:
  MEMORY[0x23ECF2BC0](v29, 0x1000C40D315E998);
LABEL_8:
  if (++v15 == 8) {
    return v14 + 1 == a2;
  }
LABEL_9:
  double v13 = v14;
  ++v16;
  if (++v14 != a2) {
    goto LABEL_10;
  }
  return 1;
}

void google::MakeCheckOpString<int,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CB63AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>::__push_back_slow_path<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  double v10 = &v9[8 * v4];
  double v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)double v10 = v12;
  double v13 = v10 + 8;
  double v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  double v19 = &v15[-v18];
  uint64_t v20 = v15 - 16;
  double v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0uLL;
    *(_OWORD *)uint64_t v20 = 0uLL;
    *((_OWORD *)v21 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v24;
    *(_OWORD *)double v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  int v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)int v15 = 0;
      *((void *)v10 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  uint64_t v26 = (char *)*a1;
  int v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)int v15 = 0;
      if (v28) {
        MEMORY[0x23ECF2BC0](v27, 0x1060C40B86F7F5DLL);
      }
    }
    while (v15 != v26);
    int v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

void google::MakeCheckOpString<BOOL,BOOL>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CB63CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void File::Close(File *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  v10[6] = *MEMORY[0x263EF8340];
  if (a2 == 47802)
  {
    if (fclose(*(FILE **)this))
    {
      v10[0] = "Could not close file '";
      v10[1] = 22;
      v9[0] = *(_OWORD *)((char *)this + 8);
      v8[0] = "'";
      v8[1] = 1;
      absl::lts_2020_02_25::StrCat((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(void *)this = 0;
      *a3 = 0;
    }
  }
  else
  {
    absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)"Wrong flags", 11);
  }
}

void sub_23CB63E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t File::ReadToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 103);
    size_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: output != nullptr ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
    if (a3) {
LABEL_4:
    }
      operator new[]();
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  return 0;
}

void sub_23CB63FF4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BA0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_23CB64018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void file::Open(const char **a1@<X0>, const char **a2@<X1>, void *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  v13[6] = *MEMORY[0x263EF8340];
  if (a4 == 47802)
  {
    if (fopen(*a1, *a2)) {
      operator new();
    }
    *a3 = 0;
  }
  v13[0] = "Could not open '";
  v13[1] = 16;
  v12[0] = *(_OWORD *)a1;
  v11[0] = "'";
  v11[1] = 1;
  absl::lts_2020_02_25::StrCat((uint64_t)v13, (uint64_t)v12, (uint64_t)v11, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  absl::lts_2020_02_25::Status::Status(a5, 3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CB64160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::GetContents(const char **a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2 == 47802 && fopen(*a1, "r")) {
    operator new();
  }
  *(void *)&v10.st_dev = "Could not read '";
  v10.st_ino = 16;
  v9[0] = *(_OWORD *)a1;
  v8[0] = "'";
  v8[1] = 1;
  absl::lts_2020_02_25::StrCat((uint64_t)&v10, (uint64_t)v9, (uint64_t)v8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CB642F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::WriteString(FILE **a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  v14[6] = *MEMORY[0x263EF8340];
  if (a1
    && a3 == 47802
    && fwrite(*(const void **)a2, 1uLL, *(void *)(a2 + 8), *a1) == *(void *)(a2 + 8)
    && !fclose(*a1))
  {
    *a1 = 0;
    *a4 = 0;
  }
  else
  {
    v14[0] = "Could not write ";
    v14[1] = 16;
    uint64_t v7 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(absl::lts_2020_02_25::numbers_internal **)(a2 + 8), v13, a3);
    v12[0] = v13;
    v12[1] = v7 - v13;
    v11[0] = " bytes";
    v11[1] = 6;
    absl::lts_2020_02_25::StrCat((uint64_t)v14, (uint64_t)v12, (uint64_t)v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB64460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL file::WriteStringToFile(uint64_t *a1, const char **a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a1[1];
  }
  v6[0] = v3;
  v6[1] = v2;
  if (fopen(*a2, "w")) {
    operator new();
  }
  file::WriteString(0, (uint64_t)v6, (char *)0xBABA, &v7);
  size_t v4 = v7;
  if (v7) {
    absl::lts_2020_02_25::Status::UnrefNonInlined((uint64_t)v7);
  }
  return v4 == 0;
}

uint64_t file::ReadFileToProto(uint64_t a1, google::protobuf::Message *a2)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  file::GetContents((const char **)a1, 47802, v12);
  if ((uint64_t)v12[0])
  {
    absl::lts_2020_02_25::Status::UnrefNonInlined((uint64_t)v12[0]);
LABEL_8:
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 213);
    uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Could not read ", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)a1, *(void *)(a1 + 8));
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
    uint64_t v5 = 0;
    if (SHIBYTE(v15) < 0) {
      goto LABEL_6;
    }
    return v5;
  }
  if (v12[0]) {
    goto LABEL_8;
  }
  double v13 = &unk_26F0BCE30;
  google::protobuf::TextFormat::Parser::Parser((google::protobuf::TextFormat::Parser *)v12);
  v12[0] = (absl::lts_2020_02_25::Status *)&v13;
  if ((google::protobuf::TextFormat::Parser::ParseFromString((char **)v12, (uint64_t)v14, (char *)a2) & 1) != 0
    || (google::protobuf::MessageLite::ParseFromString(a2, v14) & 1) != 0)
  {
    uint64_t v5 = 1;
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v12);
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v13);
    if (SHIBYTE(v15) < 0)
    {
LABEL_6:
      operator delete(v14[0]);
      return v5;
    }
  }
  else
  {
    google::protobuf::TextFormat::ParseFromString((uint64_t)v14, a2, v4);
    google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 234);
    uint64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
    stat v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not parse contents of ", 28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)a1, *(void *)(a1 + 8));
    google::LogMessage::~LogMessage((google::LogMessage *)v11);
    uint64_t v5 = 0;
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v12);
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v13);
    if (SHIBYTE(v15) < 0) {
      goto LABEL_6;
    }
  }
  return v5;
}

void sub_23CB646EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)va);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)va1);
  if (*(char *)(v4 - 33) < 0) {
    operator delete(*(void **)(v4 - 56));
  }
  _Unwind_Resume(a1);
}

void file::GetTextProto(_OWORD *a1@<X0>, google::protobuf::Message *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  void v11[6] = *MEMORY[0x263EF8340];
  if (a3 == 47802 && file::ReadFileToProto((uint64_t)a1, a2))
  {
    *a4 = 0;
  }
  else
  {
    v11[0] = "Could not read proto from '";
    v11[1] = 27;
    v10[0] = *a1;
    v9[0] = "'.";
    v9[1] = 2;
    absl::lts_2020_02_25::StrCat((uint64_t)v11, (uint64_t)v10, (uint64_t)v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23CB64844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::SetTextProto(_OWORD *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2 == 47802)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    google::protobuf::TextFormat::PrintToString();
  }
  uint64_t v9 = "Could not write proto to '";
  uint64_t v10 = 26;
  v8[0] = *a1;
  v7[0] = "'.";
  v7[1] = 2;
  absl::lts_2020_02_25::StrCat((uint64_t)&v9, (uint64_t)v8, (uint64_t)v7, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CB649B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::MakeCheckOpString<int,int>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CB64A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void file::anonymous namespace'::NoOpErrorCollector::~NoOpErrorCollector(file::_anonymous_namespace_::NoOpErrorCollector *this)
{
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(this);

  JUMPOUT(0x23ECF2BC0);
}

void google::MakeCheckOpString<unsigned long,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CB64B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::GetProcessMemoryUsage(operations_research *this)
{
  mach_msg_type_number_t task_info_outCnt = 10;
  if (task_info(*MEMORY[0x263EF8960], 0x12u, task_info_out, &task_info_outCnt)) {
    return -1;
  }
  else {
    return v4;
  }
}

uint64_t operations_research::RunWorker(std::condition_variable *this, void *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  operations_research::ThreadPool::GetNextTask(this, (uint64_t)v9);
  uint64_t result = v10[0];
  while (v10[0])
  {
    (*(void (**)(uint64_t))(*(void *)result + 48))(result);
    operations_research::ThreadPool::GetNextTask(this, (uint64_t)v7);
    uint64_t v4 = (void *)v10[0];
    v10[0] = 0;
    if (v4 == v9)
    {
      (*(void (**)(void *))(v9[0] + 32))(v9);
      uint64_t v5 = v8;
      uint64_t v6 = v10;
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v4) {
        (*(void (**)(void *))(*v4 + 40))(v4);
      }
      uint64_t v5 = v8;
      uint64_t v6 = v10;
      if (!v8) {
        goto LABEL_13;
      }
    }
    if (v5 == v7)
    {
      v10[0] = v9;
      (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
      goto LABEL_15;
    }
    v10[0] = v5;
    uint64_t v6 = &v8;
LABEL_13:
    void *v6 = 0;
LABEL_15:
    if (v8 == v7)
    {
      (*(void (**)(void *))(v7[0] + 32))(v7);
    }
    else if (v8)
    {
      (*(void (**)(void))(*v8 + 40))();
    }
    uint64_t result = v10[0];
  }
  return result;
}

void sub_23CB64D6C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_23CB64D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CB64D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void operations_research::ThreadPool::GetNextTask(std::condition_variable *this@<X0>, uint64_t a2@<X8>)
{
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&this->__cv_.__opaque[24];
  v9.__owns_ = 1;
  std::mutex::lock((std::mutex *)&this->__cv_.__opaque[24]);
  if (*(void *)&this->__cv_.__opaque[16])
  {
LABEL_4:
    uint64_t v4 = *(void *)&this->__cv_.__opaque[8];
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      if (v5 == v4 + 16)
      {
        *(void *)(a2 + 24) = a2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
LABEL_10:
        uint64_t v6 = *(uint64_t **)&this->__cv_.__opaque[8];
        uint64_t v7 = *v6;
        *(void *)(v7 + 8) = v6[1];
        *(void *)v6[1] = v7;
        --*(void *)&this->__cv_.__opaque[16];
        uint64_t v8 = (uint64_t *)v6[5];
        if (v8 == v6 + 2)
        {
          (*(void (**)(uint64_t *))(v6[2] + 32))(v6 + 2);
          operator delete(v6);
          if (*(void *)&this->__cv_.__opaque[16] >= (unint64_t)SHIDWORD(this[4].__cv_.__sig)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v8) {
            (*(void (**)(uint64_t *))(*v8 + 40))(v8);
          }
          operator delete(v6);
          if (*(void *)&this->__cv_.__opaque[16] >= (unint64_t)SHIDWORD(this[4].__cv_.__sig)) {
            goto LABEL_18;
          }
        }
        if (BYTE1(this[4].__cv_.__sig))
        {
          BYTE1(this[4].__cv_.__sig) = 0;
          std::condition_variable::notify_all(this + 3);
        }
        goto LABEL_18;
      }
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    *(void *)(a2 + 24) = v5;
    goto LABEL_10;
  }
  while (!LOBYTE(this[4].__cv_.__sig))
  {
    std::condition_variable::wait(this + 2, &v9);
    if (*(void *)&this->__cv_.__opaque[16]) {
      goto LABEL_4;
    }
  }
  *(void *)(a2 + 24) = 0;
LABEL_18:
  if (v9.__owns_) {
    std::mutex::unlock(v9.__m_);
  }
}

void sub_23CB64F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double operations_research::ThreadPool::ThreadPool(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_23CE7ED60;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 1018212795;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 179) = 0u;
  *(_DWORD *)(a1 + 196) = 2000000000;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  return result;
}

void operations_research::ThreadPool::~ThreadPool(operations_research::ThreadPool *this)
{
  if (*((unsigned char *)this + 194))
  {
    std::mutex::lock((std::mutex *)((char *)this + 32));
    *((unsigned char *)this + 192) = 1;
    std::mutex::unlock((std::mutex *)((char *)this + 32));
    std::condition_variable::notify_all((std::condition_variable *)this + 2);
    if (*(int *)this >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      do
      {
        std::thread::join((std::thread *)(*((void *)this + 25) + v2));
        ++v3;
        v2 += 8;
      }
      while (v3 < *(int *)this);
    }
  }
  uint64_t v4 = *((void *)this + 25);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 26);
    uint64_t v6 = (void *)*((void *)this + 25);
    if (v5 != v4)
    {
      do
        std::thread::~thread((std::thread *)(v5 - 8));
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 25);
    }
    *((void *)this + 26) = v4;
    operator delete(v6);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 2);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  if (*((void *)this + 3))
  {
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = (operations_research::ThreadPool *)*((void *)this + 2);
    uint64_t v9 = *(void *)v8;
    *(void *)(v9 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v9;
    *((void *)this + 3) = 0;
    if (v8 != (operations_research::ThreadPool *)((char *)this + 8))
    {
      do
      {
        uint64_t v10 = (operations_research::ThreadPool *)*((void *)v8 + 1);
        uint64_t v11 = (void *)*((void *)v8 + 5);
        if (v11 == (void *)((char *)v8 + 16))
        {
          (*(void (**)(void *))(*((void *)v8 + 2) + 32))((void *)v8 + 2);
        }
        else if (v11)
        {
          (*(void (**)(void *))(*v11 + 40))(v11);
        }
        operator delete(v8);
        uint64_t v8 = v10;
      }
      while (v10 != (operations_research::ThreadPool *)((char *)this + 8));
    }
  }
}

uint64_t operations_research::ThreadPool::StartWorkers(uint64_t this)
{
  *(unsigned char *)(this + 194) = 1;
  if (*(int *)this >= 1) {
    std::thread::thread<void (*)(void *),operations_research::ThreadPool *,void>();
  }
  return this;
}

void sub_23CB6543C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
}

void sub_23CB65450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
}

void operations_research::ThreadPool::Schedule(uint64_t a1, void *a2)
{
  v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v8.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  while (*(void *)(a1 + 24) >= (unint64_t)*(int *)(a1 + 196))
  {
    *(unsigned char *)(a1 + 193) = 1;
    std::condition_variable::wait((std::condition_variable *)(a1 + 144), &v8);
  }
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = a2[3];
  if (!v5) {
    goto LABEL_6;
  }
  if ((void *)v5 != a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
LABEL_6:
    v4[5] = v5;
    goto LABEL_8;
  }
  v4[5] = v4 + 2;
  (*(void (**)(void *))(*a2 + 24))(a2);
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  *uint64_t v4 = v6;
  v4[1] = a1 + 8;
  *(void *)(v6 + 8) = v4;
  *(void *)(a1 + 8) = v4;
  ++*(void *)(a1 + 24);
  BOOL owns = v8.__owns_;
  if (*(unsigned char *)(a1 + 194))
  {
    if (!v8.__owns_)
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    std::mutex::unlock(v8.__m_);
    v8.__owns_ = 0;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 96));
    BOOL owns = v8.__owns_;
  }
  if (owns) {
    std::mutex::unlock(v8.__m_);
  }
}

void sub_23CB655C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  operator delete(v10);
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(a1);
}

void std::thread::thread<void (*)(void *),operations_research::ThreadPool *,void>()
{
}

void sub_23CB656B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CB656C4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_23CB656E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(void))(a1 + 8))(*(void *)(a1 + 16));
  uint64_t v4 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    uint64_t v5 = MEMORY[0x23ECF2990]();
    MEMORY[0x23ECF2BC0](v5, 0x20C4093837F09);
  }
  MEMORY[0x23ECF2BC0](a1, 0xA0C40A8488062);
  return 0;
}

void sub_23CB6578C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x23ECF2990]();
      MEMORY[0x23ECF2BC0](v4, 0x20C4093837F09);
    }
    MEMORY[0x23ECF2BC0](v2, 0xA0C40A8488062);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = MEMORY[0x23ECF2990]();
    MEMORY[0x23ECF2BC0](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t operations_research::glop::EtaMatrix::EtaMatrix(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_26F0BCE78;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(*(void *)a3 + 8 * a2);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 24), *(char **)a3, *(char **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(v6 + 8 * *(int *)(a1 + 8)) = 0;
  uint64_t v9 = *(int **)(a3 + 32);
  std::unique_lock<std::mutex> v8 = *(int **)(a3 + 40);
  if ((double)(int)((unint64_t)(v7 - v6) >> 3) * 0.5 > (double)(unint64_t)(v8 - v9) && v9 != v8)
  {
    do
    {
      int v13 = *v9;
      if (*v9 != a2)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 24) + 8 * v13);
        uint64_t v15 = *(void *)(a1 + 56);
        if (v15 == *(void *)(a1 + 64) && (!v15 || v15 < 2 * v15)) {
          operator new[]();
        }
        *(void *)(a1 + 56) = v15 + 1;
        uint64_t v12 = *(void *)(a1 + 80);
        *(_DWORD *)(*(void *)(a1 + 72) + 4 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v13;
        *(void *)(v12 + 8 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v14;
        *(unsigned char *)(a1 + 88) = 1;
      }
      ++v9;
    }
    while (v9 != v8);
  }
  return a1;
}

void sub_23CB65A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = 0;
  if (v12)
  {
    MEMORY[0x23ECF2BA0](v12, 0x1000C8077774924);
    int v13 = *a10;
    if (!*a10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v13 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 32) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::EtaMatrix::~EtaMatrix(operations_research::glop::EtaMatrix *this)
{
  *(void *)this = &unk_26F0BCE78;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    MEMORY[0x23ECF2BA0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0BCE78;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    MEMORY[0x23ECF2BA0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

double operations_research::glop::EtaMatrix::SparseLeftSolve(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 76, 2);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v36);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return *(double *)&v17;
  }
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *a2;
  double v6 = *(double *)(*a2 + 8 * v4);
  uint64_t v7 = *(char **)a3;
  std::unique_lock<std::mutex> v8 = *(char **)(a3 + 8);
  uint64_t v9 = (uint64_t)&v8[-*(void *)a3];
  uint64_t v10 = v9 >> 2;
  if ((int)(v9 >> 2) < 1)
  {
    *(double *)&long long v17 = v6 / *(double *)(a1 + 16);
    *(void *)(v5 + 8 * v4) = v17;
LABEL_12:
    unint64_t v18 = *(void *)(a3 + 16);
    if ((unint64_t)v8 < v18)
    {
      *(_DWORD *)std::unique_lock<std::mutex> v8 = v4;
      uint64_t v19 = (uint64_t)(v8 + 4);
LABEL_33:
      *(void *)(a3 + 8) = v19;
      return *(double *)&v17;
    }
    unint64_t v20 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v18 - (void)v7;
    if (v21 >> 1 > v20) {
      unint64_t v20 = v21 >> 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v23 = operator new(4 * v22);
      long long v24 = &v23[4 * v10];
      uint64_t v25 = &v23[4 * v22];
      *long long v24 = v4;
      uint64_t v19 = (uint64_t)(v24 + 1);
      int64_t v26 = v8 - v7;
      if (v8 == v7) {
        goto LABEL_31;
      }
    }
    else
    {
      long long v23 = 0;
      long long v24 = (_DWORD *)(4 * v10);
      uint64_t v25 = 0;
      *(_DWORD *)(4 * v10) = v4;
      uint64_t v19 = 4 * v10 + 4;
      int64_t v26 = v8 - v7;
      if (v8 == v7)
      {
LABEL_31:
        *(void *)a3 = v24;
        *(void *)(a3 + 8) = v19;
        *(void *)(a3 + 16) = v25;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_33;
      }
    }
    unint64_t v27 = v26 - 4;
    if (v27 < 0x2C) {
      goto LABEL_42;
    }
    if ((unint64_t)(v8 - v23 - v9) < 0x20) {
      goto LABEL_42;
    }
    uint64_t v28 = (v27 >> 2) + 1;
    uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    double v30 = &v8[-v29];
    long long v24 = (_DWORD *)((char *)v24 - v29);
    double v31 = &v23[4 * v10 - 16];
    uint64_t v32 = v8 - 16;
    uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v17 = *(_OWORD *)v32;
      *(v31 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v17;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    std::unique_lock<std::mutex> v8 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        int v34 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--long long v24 = v34;
      }
      while (v8 != v7);
    }
    goto LABEL_31;
  }
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = ((unint64_t)v9 >> 2);
  do
  {
    int v14 = *(_DWORD *)&v7[4 * v11];
    if (v14 == v4)
    {
      while (v13 - 1 != v11)
      {
        int v14 = *(_DWORD *)&v7[4 * v11++ + 4];
        if (v14 != v4)
        {
          char v12 = 1;
          goto LABEL_4;
        }
      }
      *(double *)&long long v17 = v6 / *(double *)(a1 + 16);
      *(void *)(v5 + 8 * v4) = v17;
      return *(double *)&v17;
    }
LABEL_4:
    double v6 = v6 - *(double *)(v5 + 8 * v14) * *(double *)(*(void *)(a1 + 24) + 8 * v14);
    ++v11;
  }
  while (v11 != v13);
  *(double *)&long long v17 = v6 / *(double *)(a1 + 16);
  *(void *)(v5 + 8 * v4) = v17;
  if ((v12 & 1) == 0) {
    goto LABEL_12;
  }
  return *(double *)&v17;
}

void sub_23CB65E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::EtaFactorization::~EtaFactorization(operations_research::glop::EtaFactorization *this)
{
  *(void *)this = &unk_26F0BCE98;
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 == v3)
  {
    *((void *)this + 2) = v2;
    if (!v2) {
      return;
    }
    goto LABEL_3;
  }
  do
  {
    uint64_t v5 = *v2++;
    uint64_t v4 = v5;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  while (v2 != v3);
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  *((void *)this + 2) = v2;
  if (v2) {
LABEL_3:
  }
    operator delete(v2);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F0BCE98;
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 == v3)
  {
    *((void *)this + 2) = v2;
    if (!v2) {
      goto LABEL_4;
    }
  }
  else
  {
    do
    {
      uint64_t v5 = *v2++;
      uint64_t v4 = v5;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*((void *)this + 1);
    *((void *)this + 2) = v2;
    if (!v2)
    {
LABEL_4:
      JUMPOUT(0x23ECF2BC0);
    }
  }
  operator delete(v2);
  goto LABEL_4;
}

void operations_research::glop::EtaFactorization::Update()
{
}

void sub_23CB66138(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C40E95B3851);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::BasisFactorization::BasisFactorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26F0BCEB8;
  double v6 = (operations_research::glop::GlopParameters *)(a1 + 168);
  operations_research::glop::BasisFactorization::Stats::Stats((operations_research::glop::BasisFactorization::Stats *)(a1 + 8));
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v6, 0);
  *(void *)(a1 + 464) = a2;
  *(void *)(a1 + 472) = a3;
  *(void *)(a1 + 480) = 0x3FA999999999999ALL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(unsigned char *)(a1 + 649) = 0;
  *(void *)(a1 + 868) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 577) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(void *)(a1 + 880) = &unk_26F0BCE98;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  operations_research::glop::LuFactorization::LuFactorization((operations_research::glop::LuFactorization *)(a1 + 912));
  *(void *)(a1 + 4632) = 0;
  *(_DWORD *)(a1 + 868) = *(_DWORD *)(a1 + 296);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a1 + 365);
  operations_research::glop::GlopParameters::CopyFrom(v6, v6);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::GlopParameters *)(a1 + 2496), v6);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::GlopParameters *)(a1 + 4336), v6);
  return a1;
}

void sub_23CB662B8(_Unwind_Exception *a1)
{
  operations_research::glop::EtaFactorization::~EtaFactorization(v5);
  uint64_t v7 = (void *)v3[105];
  if (v7)
  {
    v3[106] = v7;
    operator delete(v7);
  }
  std::unique_lock<std::mutex> v8 = (void *)v3[102];
  if (v8)
  {
    v3[103] = v8;
    operator delete(v8);
  }
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)(v3 + 92));
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)(v3 + 82));
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v4);
  uint64_t v9 = (void *)v3[68];
  if (v9)
  {
    v3[69] = v9;
    operator delete(v9);
    uint64_t v10 = (void *)v3[65];
    if (!v10)
    {
LABEL_7:
      uint64_t v11 = (void *)v3[62];
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = (void *)v3[65];
    if (!v10) {
      goto LABEL_7;
    }
  }
  v3[66] = v10;
  operator delete(v10);
  uint64_t v11 = (void *)v3[62];
  if (!v11)
  {
LABEL_9:
    operations_research::glop::GlopParameters::~GlopParameters(v2);
    operations_research::glop::BasisFactorization::Stats::~Stats(v1);
    _Unwind_Resume(a1);
  }
LABEL_8:
  v3[63] = v11;
  operator delete(v11);
  goto LABEL_9;
}

void operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(operations_research::glop::CompactSparseMatrix *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void operations_research::glop::ScatteredColumn::~ScatteredColumn(operations_research::glop::ScatteredColumn *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v4;
    operator delete(v4);
  }
}

void operations_research::glop::BasisFactorization::Stats::~Stats(void **this)
{
  uint64_t v1 = (operations_research::glop::BasisFactorization::Stats *)this;
  this[10] = &unk_26F0BCDD8;
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)this);
}

void operations_research::glop::BasisFactorization::~BasisFactorization(operations_research::glop::BasisFactorization *this)
{
  *(void *)this = &unk_26F0BCEB8;
  operations_research::glop::LuFactorization::~LuFactorization((operations_research::glop::BasisFactorization *)((char *)this + 912));
  *((void *)this + 110) = &unk_26F0BCE98;
  uint64_t v2 = (uint64_t *)*((void *)this + 111);
  uint64_t v3 = (uint64_t *)*((void *)this + 112);
  if (v2 == v3)
  {
    *((void *)this + 112) = v2;
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  do
  {
    uint64_t v19 = *v2++;
    uint64_t v18 = v19;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  while (v2 != v3);
  uint64_t v2 = (uint64_t *)*((void *)this + 111);
  *((void *)this + 112) = v2;
  if (v2) {
LABEL_3:
  }
    operator delete(v2);
LABEL_4:
  uint64_t v4 = (void *)*((void *)this + 105);
  if (v4)
  {
    *((void *)this + 106) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 102);
  if (v5)
  {
    *((void *)this + 103) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 99);
  if (v6)
  {
    *((void *)this + 100) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 96);
  if (v7)
  {
    *((void *)this + 97) = v7;
    operator delete(v7);
  }
  std::unique_lock<std::mutex> v8 = (void *)*((void *)this + 93);
  if (v8)
  {
    *((void *)this + 94) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 89);
  if (v9)
  {
    *((void *)this + 90) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 86);
  if (v10)
  {
    *((void *)this + 87) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 83);
  if (v11)
  {
    *((void *)this + 84) = v11;
    operator delete(v11);
  }
  char v12 = (void *)*((void *)this + 78);
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 75);
  if (v13)
  {
    *((void *)this + 76) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)this + 71);
  if (v14)
  {
    *((void *)this + 72) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 68);
  if (v15)
  {
    *((void *)this + 69) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 65);
  if (v16)
  {
    *((void *)this + 66) = v16;
    operator delete(v16);
  }
  long long v17 = (void *)*((void *)this + 62);
  if (v17)
  {
    *((void *)this + 63) = v17;
    operator delete(v17);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::BasisFactorization *)((char *)this + 168));
  *((void *)this + 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = &unk_26F0BCDD8;
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::BasisFactorization *)((char *)this + 8));
}

{
  uint64_t vars8;

  operations_research::glop::BasisFactorization::~BasisFactorization(this);

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::glop::BasisFactorization::Clear(operations_research::glop::BasisFactorization *this)
{
  *((_DWORD *)this + 218) = 0;
  *((unsigned char *)this + 648) = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 111);
  uint64_t v3 = (uint64_t *)*((void *)this + 112);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = *v2++;
      uint64_t v4 = v5;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*((void *)this + 111);
  }
  *((void *)this + 112) = v2;
  operations_research::glop::LuFactorization::Clear((operations_research::glop::BasisFactorization *)((char *)this + 912));
  *((void *)this + 63) = *((void *)this + 62);
  *((void *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  operations_research::glop::CompactSparseMatrix::Reset((uint64_t)this + 656, **((_DWORD **)this + 58));
  operations_research::glop::CompactSparseMatrix::Reset((uint64_t)this + 736, **((_DWORD **)this + 58));
  std::vector<int>::assign((std::vector<int> *)this + 34, *(int *)(*((void *)this + 58) + 4), &operations_research::glop::kInvalidCol);
  std::vector<int>::size_type v6 = *(int *)(*((void *)this + 58) + 4);

  std::vector<int>::assign((std::vector<int> *)this + 35, v6, &operations_research::glop::kInvalidCol);
}

void operations_research::glop::BasisFactorization::Initialize(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
  std::vector<int>::pointer end = this[19].__end_;
  unint64_t v5 = *(unsigned int *)end;
  if ((int)v5 < 1) {
    goto LABEL_17;
  }
  uint64_t value = this[19].__end_cap_.__value_;
  uint64_t v7 = end[7];
  uint64_t v8 = **(int **)value;
  uint64_t v9 = *(void *)(v7 + 8 * v8);
  if (*(void *)(v7 + (((v8 << 32) + 0x100000000) >> 29)) - v9 != 1) {
    goto LABEL_16;
  }
  uint64_t v10 = end[1];
  uint64_t v11 = end[4];
  if (*(_DWORD *)(v11 + 4 * v9) || *(double *)(v10 + 8 * v9) != 1.0) {
    goto LABEL_16;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v5 == v13) {
      break;
    }
    uint64_t v15 = *(int *)(*(void *)value + 4 * v13);
    uint64_t v16 = *(void *)(v7 + 8 * v15);
    if (*(void *)(v7 + (((v15 << 32) + 0x100000000) >> 29)) - v16 != 1) {
      break;
    }
    double v17 = *(double *)(v10 + 8 * v16);
    uint64_t v18 = *(unsigned int *)(v11 + 4 * v16);
    uint64_t v13 = v14 + 1;
  }
  while (v14 == v18 && v17 == 1.0);
  if (v14 >= v5)
  {
LABEL_17:
    operations_research::glop::Status::Status(a2);
  }
  else
  {
LABEL_16:
    v20[0] = this[19].__end_;
    v20[1] = value;
    operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)v20, a2);
  }
}

BOOL operations_research::glop::BasisFactorization::IsRefactorized(operations_research::glop::BasisFactorization *this)
{
  return *((_DWORD *)this + 218) == 0;
}

uint64_t operations_research::glop::BasisFactorization::Refactorize@<X0>(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t end_low = SLODWORD(this[36].__end_);
  if (end_low)
  {
    operations_research::IntegerDistribution::Add((uint64_t)&this[3].__end_cap_, end_low);
    operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
    long long v6 = *(_OWORD *)&this[19].__end_;
    operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)&v6, a2);
    uint64_t result = operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)&this[38]);
    *(double *)&this[193].__begin_ = *(double *)&this[193].__begin_ + (double)result * 0.000000002 * 10.0;
  }
  else
  {
    return operations_research::glop::Status::Status(a2);
  }
  return result;
}

void sub_23CB669BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double operations_research::glop::BasisFactorization::ForceRefactorization@<D0>(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  operations_research::IntegerDistribution::Add((uint64_t)&this[3].__end_cap_, SLODWORD(this[36].__end_));
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
  long long v5 = *(_OWORD *)&this[19].__end_;
  operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)&v5, a2);
  double result = *(double *)&this[193].__begin_
         + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)&this[38])
         * 0.000000002
         * 10.0;
  *(double *)&this[193].__begin_ = result;
  return result;
}

void sub_23CB66A64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::BasisFactorization::MiddleProductFormUpdate(uint64_t a1@<X0>, int a2@<W1>, signed int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 840) + 4 * a2);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 816) + 4 * a3);
  if (v7 != -1 && v8 != -1)
  {
    uint64_t v11 = a1 + 520;
    unint64_t v12 = *(int *)(a1 + 736);
    *(void *)&long long v100 = 0;
    uint64_t v13 = *(void *)(a1 + 520);
    unint64_t v14 = (*(void *)(a1 + 528) - v13) >> 3;
    uint64_t v89 = v8;
    uint64_t v90 = a4;
    if (v12 <= v14)
    {
      if (v12 < v14) {
        *(void *)(a1 + 528) = v13 + 8 * v12;
      }
    }
    else
    {
      std::vector<double>::__append(v11, v12 - v14, (uint64_t *)&v100);
    }
    uint64_t v15 = *(void *)(a1 + 792);
    uint64_t v16 = *(void *)(v15 + 8 * (int)v7);
    uint64_t v17 = *(void *)(v15 + (((v7 << 32) + 0x100000000) >> 29));
    if (v16 < v17)
    {
      uint64_t v94 = (void **)(a1 + 544);
      uint64_t v18 = *(char **)(a1 + 552);
      while (1)
      {
        uint64_t v20 = *(int *)(*(void *)(a1 + 768) + 4 * v16);
        a5.n128_u64[0] = *(void *)(*(void *)(a1 + 744) + 8 * v16);
        *(void *)(*(void *)(a1 + 520) + 8 * v20) = a5.n128_u64[0];
        unint64_t v21 = *(void *)(a1 + 560);
        if ((unint64_t)v18 >= v21) {
          break;
        }
        *(_DWORD *)uint64_t v18 = v20;
        uint64_t v19 = (uint64_t)(v18 + 4);
LABEL_18:
        *(void *)(a1 + 552) = v19;
        ++v16;
        uint64_t v18 = (char *)v19;
        if (v16 == v17) {
          goto LABEL_45;
        }
      }
      unint64_t v22 = (char *)*v94;
      uint64_t v23 = v18 - (unsigned char *)*v94;
      uint64_t v24 = v23 >> 2;
      unint64_t v25 = (v23 >> 2) + 1;
      if (v25 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v21 - (void)v22;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 62) {
LABEL_95:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v28 = operator new(4 * v27);
        uint64_t v29 = &v28[4 * v24];
        *uint64_t v29 = v20;
        uint64_t v19 = (uint64_t)(v29 + 1);
        if (v18 == v22) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v20;
        uint64_t v19 = 4 * v24 + 4;
        if (v18 == v22) {
          goto LABEL_43;
        }
      }
      unint64_t v30 = v18 - 4 - v22;
      if (v30 >= 0xBC)
      {
        if (&v28[v23 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[v23 - 4])
        {
          double v31 = v18;
        }
        else if (&v18[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4)
        {
          double v31 = v18;
        }
        else if ((unint64_t)(v18 - v28 - v23) >= 0x20)
        {
          uint64_t v32 = (v30 >> 2) + 1;
          uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          double v31 = &v18[-v33];
          uint64_t v29 = (_DWORD *)((char *)v29 - v33);
          int v34 = (__n128 *)&v28[4 * v24 - 16];
          double v35 = (__n128 *)(v18 - 16);
          uint64_t v36 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            a5 = *v35;
            v34[-1] = v35[-1];
            *int v34 = a5;
            v34 -= 2;
            v35 -= 2;
            v36 -= 8;
          }
          while (v36);
          if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_43:
            *(void *)(a1 + 544) = v29;
            *(void *)(a1 + 552) = v19;
            *(void *)(a1 + 560) = &v28[4 * v27];
            if (v22) {
              operator delete(v22);
            }
            goto LABEL_18;
          }
        }
        else
        {
          double v31 = v18;
        }
      }
      else
      {
        double v31 = v18;
      }
      do
      {
        int v37 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--uint64_t v29 = v37;
      }
      while (v31 != v22);
      goto LABEL_43;
    }
LABEL_45:
    ColumnOfU = (void *)operations_research::glop::LuFactorization::GetColumnOfU(a1 + 912, a3, a5);
    uint64_t v39 = ColumnOfU[1];
    if (v39 >= 1)
    {
      uint64_t v40 = 0;
      uint64_t v42 = ColumnOfU[3];
      uint64_t v41 = ColumnOfU[4];
      uint64_t v91 = v41;
      double v93 = (void **)(a1 + 544);
      double v43 = *(char **)(a1 + 552);
      while (1)
      {
        while (1)
        {
          uint64_t v44 = *(int *)(v42 + 4 * v40);
          *(double *)(*(void *)(a1 + 520) + 8 * v44) = *(double *)(*(void *)(a1 + 520) + 8 * v44)
                                                       - *(double *)(v41 + 8 * v40);
          unint64_t v45 = *(void *)(a1 + 560);
          if ((unint64_t)v43 >= v45) {
            break;
          }
          *(_DWORD *)double v43 = v44;
          v43 += 4;
          *(void *)(a1 + 552) = v43;
          if (++v40 == v39) {
            goto LABEL_74;
          }
        }
        double v46 = (char *)*v93;
        uint64_t v47 = v43 - (unsigned char *)*v93;
        uint64_t v48 = v47 >> 2;
        unint64_t v49 = (v47 >> 2) + 1;
        if (v49 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v45 - (void)v46;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v95 = v49;
        if (v49)
        {
          if (v49 >> 62) {
            goto LABEL_95;
          }
          uint64_t v51 = operator new(4 * v49);
          double v52 = &v51[4 * v48];
          *double v52 = v44;
          uint64_t v53 = (uint64_t)(v52 + 1);
          if (v43 == v46)
          {
LABEL_65:
            *(void *)(a1 + 544) = v52;
            *(void *)(a1 + 552) = v53;
            *(void *)(a1 + 560) = &v51[4 * v95];
            if (!v46) {
              goto LABEL_62;
            }
LABEL_61:
            operator delete(v46);
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v51 = 0;
          double v52 = (_DWORD *)(4 * v48);
          *(_DWORD *)(4 * v48) = v44;
          uint64_t v53 = 4 * v48 + 4;
          if (v43 == v46) {
            goto LABEL_65;
          }
        }
        unint64_t v54 = v43 - 4 - v46;
        if (v54 < 0xBC
          || &v51[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v47 - 4]
          || &v43[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v43 - 4
          || (unint64_t)(v43 - &v51[v47]) < 0x20)
        {
          break;
        }
        uint64_t v58 = (v54 >> 2) + 1;
        uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
        double v55 = &v43[-v59];
        double v52 = (_DWORD *)((char *)v52 - v59);
        double v60 = &v51[4 * v48 - 16];
        double v61 = v43 - 16;
        uint64_t v62 = v58 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v63 = *(_OWORD *)v61;
          *(v60 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v61 - 1);
          _OWORD *v60 = v63;
          v60 -= 2;
          v61 -= 32;
          v62 -= 8;
        }
        while (v62);
        unint64_t v56 = v95;
        if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_59;
        }
LABEL_60:
        *(void *)(a1 + 544) = v52;
        *(void *)(a1 + 552) = v53;
        *(void *)(a1 + 560) = &v51[4 * v56];
        if (v46) {
          goto LABEL_61;
        }
LABEL_62:
        uint64_t v41 = v91;
        *(void *)(a1 + 552) = v53;
        ++v40;
        double v43 = (char *)v53;
        if (v40 == v39) {
          goto LABEL_74;
        }
      }
      double v55 = v43;
      unint64_t v56 = v95;
      do
      {
LABEL_59:
        int v57 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *--double v52 = v57;
      }
      while (v55 != v46);
      goto LABEL_60;
    }
LABEL_74:
    uint64_t v64 = *(void *)(a1 + 712);
    uint64_t v65 = *(void *)(v64 + 8 * (int)v89);
    uint64_t v66 = *(void *)(v64 + (((v89 << 32) + 0x100000000) >> 29));
    double v67 = 0.0;
    unint64_t v68 = v66 - v65;
    if (v66 <= v65) {
      goto LABEL_82;
    }
    uint64_t v69 = *(void *)(a1 + 664);
    uint64_t v70 = *(void *)(a1 + 688);
    uint64_t v71 = *(void *)(a1 + 520);
    if (v68 >= 2)
    {
      uint64_t v72 = v65 + (v68 & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v73 = (double *)(v69 + 8 * v65 + 8);
      double v74 = (int *)(v70 + 4 * v65 + 4);
      unint64_t v75 = v68 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        double v67 = v67 + *(v73 - 1) * *(double *)(v71 + 8 * *(v74 - 1)) + *v73 * *(double *)(v71 + 8 * *v74);
        v73 += 2;
        v74 += 2;
        v75 -= 2;
      }
      while (v75);
      if (v68 == (v68 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_82:
        unsigned int v82 = operations_research::glop::CompactSparseMatrix::AddAndClearColumnWithNonZeros(a1 + 656, (uint64_t *)(a1 + 520), (int **)(a1 + 544));
        *(void *)&long long v100 = a1 + 656;
        *((void *)&v100 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = __PAIR64__(v89, v82);
        double v101 = v67 + 1.0;
        if (v67 + 1.0 == 0.0)
        {
          double v83 = (char *)operator new(0x20uLL);
          strcpy(v83, "Degenerate rank-one update.");
          google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 278, 2);
          double v84 = (void *)google::LogMessage::stream((google::LogMessage *)v99);
          operations_research::glop::GetErrorCodeString((char *)1, (uint64_t)__p);
          if ((v98 & 0x80u) == 0) {
            std::string v85 = __p;
          }
          else {
            std::string v85 = (void **)__p[0];
          }
          if ((v98 & 0x80u) == 0) {
            uint64_t v86 = v98;
          }
          else {
            uint64_t v86 = (uint64_t)__p[1];
          }
          uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
          uint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v83, 27);
          if ((char)v98 < 0) {
            operator delete(__p[0]);
          }
          google::LogMessage::~LogMessage((google::LogMessage *)v99);
          std::string::__init_copy_ctor_external(&v96, v83, 0x1BuLL);
          operations_research::glop::Status::Status(v90, 1, (long long *)&v96);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          operator delete(v83);
        }
        else
        {
          operations_research::glop::RankOneUpdateFactorization::Update((void *)(a1 + 480), &v100);
          operations_research::glop::Status::Status(v90);
        }
        return;
      }
    }
    else
    {
      uint64_t v72 = v65;
    }
    uint64_t v76 = v66 - v72;
    uint64_t v77 = (int *)(v70 + 4 * v72);
    double v78 = (double *)(v69 + 8 * v72);
    do
    {
      double v79 = *v78++;
      double v80 = v79;
      uint64_t v81 = *v77++;
      double v67 = v67 + v80 * *(double *)(v71 + 8 * v81);
      --v76;
    }
    while (v76);
    goto LABEL_82;
  }
  if ((*operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__[0] & 0x80000000) == 0
    && (operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/basis_representation.cc", 0)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v100, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 249);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)&v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"One update vector is missing!!!", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)&v100);
  }
  operations_research::IntegerDistribution::Add(a1 + 88, *(int *)(a1 + 872));
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)a1);
  long long v100 = *(_OWORD *)(a1 + 464);
  operations_research::glop::LuFactorization::ComputeFactorization((std::vector<int> *)(a1 + 912), (const operations_research::glop::CompactSparseMatrixView *)&v100, a4);
  *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                         + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                         * 0.000000002
                         * 10.0;
}

void sub_23CB671E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void operations_research::glop::RankOneUpdateFactorization::Update(void *a1, long long *a2)
{
  long long v5 = (void *)a1[3];
  unint64_t v4 = a1[4];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (void **)(a1 + 2);
    uint64_t v9 = (void *)a1[2];
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - v9) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v9) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(24 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * (v5 - v9)];
    *(_OWORD *)unint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    uint64_t v7 = v14 + 24;
    if (v5 != v9)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 3);
        *((void *)v14 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 3;
      }
      while (v5 != v9);
      long long v5 = *v8;
    }
    a1[2] = v14;
    a1[3] = v7;
    a1[4] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    v5[2] = *((void *)a2 + 2);
    *(_OWORD *)long long v5 = v6;
    uint64_t v7 = v5 + 3;
  }
  uint64_t v16 = *(void *)(*(void *)a2 + 56);
  uint64_t v17 = *((int *)a2 + 2);
  uint64_t v18 = *((int *)a2 + 3);
  uint64_t v19 = *(void *)(v16 + 8 * v17);
  a1[3] = v7;
  a1[1] += *(void *)(v16 + (((v17 << 32) + 0x100000000) >> 29))
         - (v19
          + *(void *)(v16 + 8 * v18))
         + *(void *)(v16 + (((v18 << 32) + 0x100000000) >> 29));
}

void operations_research::glop::BasisFactorization::Update(uint64_t a1@<X0>, int a2@<W1>, signed int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7 = *(int *)(a1 + 872);
  if ((int)v7 >= *(_DWORD *)(a1 + 868))
  {
    operations_research::IntegerDistribution::Add(a1 + 88, v7);
    operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)a1);
    long long v8 = *(_OWORD *)(a1 + 464);
    operations_research::glop::LuFactorization::ComputeFactorization((std::vector<int> *)(a1 + 912), (const operations_research::glop::CompactSparseMatrixView *)&v8, a4);
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                           * 0.000000002
                           * 10.0;
  }
  else
  {
    *(_DWORD *)(a1 + 872) = v7 + 1;
    if (!*(unsigned char *)(a1 + 864)) {
      operations_research::glop::EtaFactorization::Update();
    }
    operations_research::glop::BasisFactorization::MiddleProductFormUpdate(a1, a2, a3, a4, a5);
    if (!*(_DWORD *)a4)
    {
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*(void **)(a4 + 8));
      }
      *(unsigned char *)(a1 + 648) = 0;
      operations_research::glop::Status::Status(a4);
    }
  }
}

void sub_23CB67528(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::BasisFactorization::LeftSolve(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v43, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 308, 2);
    long long v5 = (void *)google::LogMessage::stream((google::LogMessage *)v43);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v43);
    return;
  }
  int v4 = **(_DWORD **)(a1 + 464);
  if (v4) {
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
  }
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + ((double)v4 / (double)v4 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
  if (*(unsigned char *)(a1 + 864))
  {
    operations_research::glop::LuFactorization::LeftSolveUWithNonZeros(a1 + 912, a2);
    operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a2);
    operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((unsigned char *)(a1 + 912), a2);
    if (!*(unsigned char *)(a2 + 24))
    {
      uint64_t v39 = *(int **)(a2 + 32);
      uint64_t v40 = *(char **)(a2 + 40);
      unint64_t v41 = 126 - 2 * __clz((v40 - (char *)v39) >> 2);
      if (v40 == (char *)v39) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v41;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v39, v40, (uint64_t)v43, v42, 1);
      *(unsigned char *)(a2 + 24) = 1;
    }
    return;
  }
  *(void *)(a2 + 40) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 888);
  uint64_t v8 = ((unint64_t)(*(void *)(a1 + 896) - v7) >> 3) - 1;
  if ((int)v8 >= 0)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *(void *)a2 + 16;
    do
    {
      uint64_t v12 = *(void *)(v7 + 8 * v8);
      uint64_t v13 = *(void *)(v12 + 56);
      uint64_t v14 = *(int *)(v12 + 8);
      double v15 = *(double *)(v9 + 8 * v14);
      if (v13)
      {
        if (v13 >= 1)
        {
          uint64_t v16 = *(int **)(v12 + 72);
          uint64_t v17 = *(double **)(v12 + 80);
          do
          {
            uint64_t v18 = *v16++;
            double v19 = *(double *)(v9 + 8 * v18);
            double v20 = *v17++;
            double v15 = v15 - v19 * v20;
            --v13;
          }
          while (v13);
        }
        goto LABEL_10;
      }
      unint64_t v21 = *(float64x2_t **)(v12 + 24);
      unint64_t v22 = *(void *)(v12 + 32) - (void)v21;
      if ((int)(v22 >> 3) >= 1)
      {
        unint64_t v23 = (v22 >> 3);
        if (v23 >= 4)
        {
          uint64_t v25 = (v22 >> 3) & 3;
          unint64_t v24 = v23 - v25;
          uint64_t v26 = v21 + 1;
          unint64_t v27 = v23 - v25;
          uint64_t v28 = (float64x2_t *)v10;
          do
          {
            float64x2_t v29 = vmulq_f64(v26[-1], vnegq_f64(v28[-1]));
            float64x2_t v30 = vmulq_f64(*v26, vnegq_f64(*v28));
            double v15 = v15 + v29.f64[0] + v29.f64[1] + v30.f64[0] + v30.f64[1];
            v28 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (!v25) {
            goto LABEL_10;
          }
        }
        else
        {
          unint64_t v24 = 0;
        }
        unint64_t v31 = v24 - v23;
        uint64_t v32 = v24;
        uint64_t v33 = &v21->f64[v32];
        int v34 = (double *)(v9 + v32 * 8);
        do
        {
          double v35 = *v34++;
          double v36 = v35;
          double v37 = *v33++;
          double v15 = v15 - v36 * v37;
        }
        while (!__CFADD__(v31++, 1));
      }
LABEL_10:
      *(double *)(v9 + 8 * v14) = v15 / *(double *)(v12 + 16);
    }
    while (v8-- > 0);
  }

  operations_research::glop::LuFactorization::LeftSolve(a1 + 912, (void *)a2);
}

void sub_23CB67814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (a2[4] == a2[5])
    {
      operations_research::glop::RankOneUpdateFactorization::LeftSolve(a1, a2);
    }
    else
    {
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
      uint64_t v5 = a2[4];
      int v4 = (int *)a2[5];
      if ((int *)v5 == v4)
      {
        BOOL v9 = 1;
      }
      else
      {
        uint64_t v6 = a2[7];
        uint64_t v7 = (int *)a2[4];
        do
        {
          int v8 = *v7++;
          *(void *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        }
        while (v7 != v4);
        BOOL v9 = *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)(((uint64_t)v4 - v5) >> 2);
      }
      unsigned int v12 = -1431655765 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1;
      if ((v12 & 0x80000000) == 0)
      {
        do
        {
          unsigned int v14 = v12;
          uint64_t v15 = *(void *)(a1 + 16);
          uint64_t v16 = (int *)(v15 + 24 * v12);
          uint64_t v17 = *(void *)v16;
          uint64_t v18 = v16[2];
          uint64_t v19 = *(void *)(*(void *)v16 + 56);
          uint64_t v20 = *(void *)(v19 + 8 * v18);
          uint64_t v21 = *(void *)(v19 + (((v18 << 32) + 0x100000000) >> 29));
          double v22 = 0.0;
          if (v9)
          {
            uint64_t v23 = v21 - v20;
            if (v21 > v20)
            {
              unint64_t v24 = (int *)(*(void *)(v17 + 32) + 4 * v20);
              uint64_t v25 = (double *)(*(void *)(v17 + 8) + 8 * v20);
              do
              {
                double v26 = *v25++;
                double v27 = v26;
                uint64_t v28 = *v24++;
                double v22 = v22 + v27 * *(double *)(*a2 + 8 * v28);
                --v23;
              }
              while (v23);
            }
            double v13 = -v22 / *(double *)(v15 + 24 * v14 + 16);
            if (v13 != 0.0)
            {
              uint64_t v39 = *(int *)(v15 + 24 * v14 + 12);
              uint64_t v40 = *(void *)(v19 + 8 * v39);
              uint64_t v41 = *(void *)(v19 + (((v39 << 32) + 0x100000000) >> 29));
              BOOL v42 = v41 <= v40;
              uint64_t v43 = v41 - v40;
              if (!v42)
              {
                uint64_t v44 = *a2;
                unint64_t v45 = (int *)(*(void *)(v17 + 32) + 4 * v40);
                double v46 = (double *)(*(void *)(v17 + 8) + 8 * v40);
                do
                {
                  double v47 = *v46++;
                  double v48 = v47;
                  uint64_t v49 = *v45++;
                  *(double *)(v44 + 8 * v49) = *(double *)(v44 + 8 * v49) + v13 * v48;
                  --v43;
                }
                while (v43);
              }
            }
            BOOL v9 = 1;
          }
          else
          {
            uint64_t v29 = v21 - v20;
            if (v21 > v20)
            {
              float64x2_t v30 = (int *)(*(void *)(v17 + 32) + 4 * v20);
              unint64_t v31 = (double *)(*(void *)(v17 + 8) + 8 * v20);
              do
              {
                double v32 = *v31++;
                double v33 = v32;
                uint64_t v34 = *v30++;
                double v22 = v22 + v33 * *(double *)(*a2 + 8 * v34);
                --v29;
              }
              while (v29);
            }
            double v35 = -v22 / *(double *)(v15 + 24 * v14 + 16);
            if (v35 != 0.0)
            {
              uint64_t v36 = *(int *)(v15 + 24 * v14 + 12);
              uint64_t v37 = *(void *)(v19 + 8 * v36);
              uint64_t v38 = *(void *)(v19 + (((v36 << 32) + 0x100000000) >> 29));
              if (v37 < v38)
              {
                do
                {
                  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add((uint64_t)a2, *(_DWORD *)(*(void *)(v17 + 32) + 4 * v37), v35 * *(double *)(*(void *)(v17 + 8) + 8 * v37));
                  ++v37;
                }
                while (v38 != v37);
                uint64_t v5 = a2[4];
                int v4 = (int *)a2[5];
              }
            }
            if ((int *)v5 == v4)
            {
              BOOL v9 = 1;
              uint64_t v5 = (uint64_t)v4;
            }
            else
            {
              BOOL v9 = *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)(((uint64_t)v4 - v5) >> 2);
            }
          }
          unsigned int v12 = v14 - 1;
        }
        while ((int)v14 > 0);
      }
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
      uint64_t v50 = a2[4];
      uint64_t v51 = a2[5];
      if (v50 == v51
        || *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)((v51 - v50) >> 2))
      {
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
        a2[5] = a2[4];
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 165, 2);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v52);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v52);
  }
}

void sub_23CB67BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::BasisFactorization::RightSolve(operations_research::glop::BasisFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v44, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 324, 2);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v44);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v44);
    return;
  }
  int v4 = **((_DWORD **)this + 58);
  if (v4)
  {
    double v5 = (double)(int)((*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2) / (double)v4 + 1.0;
    *((double *)this + 579) = *((double *)this + 579)
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + v5
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
  }
  if (!*((unsigned char *)this + 864))
  {
    *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)a2 + 4);
    operations_research::glop::LuFactorization::RightSolve((uint64_t)this + 912, (uint64_t **)a2);
    uint64_t v12 = *((void *)this + 112);
    uint64_t v13 = *((void *)this + 111);
    uint64_t v14 = v12 - v13;
    if (v12 == v13) {
      return;
    }
    uint64_t v15 = 0;
    unint64_t v16 = v14 >> 3;
    unint64_t v17 = *(void *)a2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    while (1)
    {
      uint64_t v18 = *(void *)(v13 + 8 * v15);
      uint64_t v19 = *(int *)(v18 + 8);
      double v20 = *(double *)(v17 + 8 * v19);
      if (v20 == 0.0) {
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v18 + 56);
      double v22 = v20 / *(double *)(v18 + 16);
      if (v21)
      {
        if (v21 >= 1)
        {
          uint64_t v23 = *(int **)(v18 + 72);
          unint64_t v24 = *(double **)(v18 + 80);
          do
          {
            double v25 = *v24++;
            double v26 = v25;
            uint64_t v27 = *v23++;
            *(double *)(v17 + 8 * v27) = *(double *)(v17 + 8 * v27) - v26 * v22;
            --v21;
          }
          while (v21);
        }
        goto LABEL_15;
      }
      unint64_t v28 = *(void *)(v18 + 24);
      unint64_t v29 = *(void *)(v18 + 32) - v28;
      if ((int)(v29 >> 3) >= 1)
      {
        unint64_t v30 = (v29 >> 3);
        if (v30 >= 4 && (v17 < v28 + 8 * v30 ? (BOOL v31 = v28 >= v17 + 8 * v30) : (BOOL v31 = 1), v31))
        {
          uint64_t v32 = (v29 >> 3) & 3;
          unint64_t v33 = v30 - v32;
          float64x2_t v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
          double v35 = (float64x2_t *)(v28 + 16);
          unint64_t v36 = v30 - v32;
          uint64_t v37 = (float64x2_t *)(v17 + 16);
          do
          {
            float64x2_t v38 = vmlsq_f64(*v37, v34, *v35);
            v37[-1] = vmlsq_f64(v37[-1], v34, v35[-1]);
            *uint64_t v37 = v38;
            v35 += 2;
            v37 += 2;
            v36 -= 4;
          }
          while (v36);
          if (!v32) {
            goto LABEL_15;
          }
        }
        else
        {
          unint64_t v33 = 0;
        }
        unint64_t v39 = v33 - v30;
        uint64_t v40 = 8 * v33;
        uint64_t v41 = (double *)(v17 + 8 * v33);
        BOOL v42 = (double *)(v28 + v40);
        do
        {
          double v43 = *v42++;
          double *v41 = *v41 - v43 * v22;
          ++v41;
          BOOL v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
      }
LABEL_15:
      *(double *)(v17 + 8 * v19) = v22;
LABEL_16:
      if (++v15 == v16) {
        return;
      }
    }
  }
  operations_research::glop::LuFactorization::RightSolveLWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), a2);
  operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 480), a2);
  operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), (int **)a2);
  if (!*((unsigned char *)a2 + 24))
  {
    uint64_t v6 = (int *)*((void *)a2 + 4);
    uint64_t v7 = (char *)*((void *)a2 + 5);
    unint64_t v8 = 126 - 2 * __clz((v7 - (char *)v6) >> 2);
    if (v7 == (char *)v6) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v6, v7, (uint64_t)v44, v9, 1);
    *((unsigned char *)a2 + 24) = 1;
  }
}

void sub_23CB67EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros(operations_research::glop::RankOneUpdateFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v54, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 199, 2);
    unint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v54);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v54);
    return;
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
    double v5 = (int *)*((void *)a2 + 4);
    int v4 = (int *)*((void *)a2 + 5);
    if (v5 == v4)
    {
      BOOL v9 = 1;
      uint64_t v10 = *((void *)this + 3) - *((void *)this + 2);
      if (!v10) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 7);
      uint64_t v7 = (int *)*((void *)a2 + 4);
      do
      {
        int v8 = *v7++;
        *(void *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      }
      while (v7 != v4);
      BOOL v9 = *(double *)this * (double)(int)((*((void *)a2 + 1) - *(void *)a2) >> 3) < (double)(unint64_t)(v4 - v5);
      uint64_t v10 = *((void *)this + 3) - *((void *)this + 2);
      if (!v10)
      {
LABEL_38:
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
        uint64_t v52 = *((void *)a2 + 4);
        uint64_t v53 = *((void *)a2 + 5);
        if (v52 == v53
          || *(double *)this * (double)(int)((*((void *)a2 + 1) - *(void *)a2) >> 3) < (double)(unint64_t)((v53 - v52) >> 2))
        {
          operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
          *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)a2 + 4);
        }
        return;
      }
    }
    uint64_t v13 = 0;
    unint64_t v14 = v10 / 24;
    if (v14 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v14;
    }
    do
    {
      uint64_t v17 = *((void *)this + 2);
      uint64_t v18 = (int *)(v17 + 24 * v13);
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = v18[3];
      uint64_t v21 = *(void *)(*(void *)v18 + 56);
      uint64_t v22 = *(void *)(v21 + 8 * v20);
      uint64_t v23 = *(void *)(v21 + (((v20 << 32) + 0x100000000) >> 29));
      double v24 = 0.0;
      if (v9)
      {
        uint64_t v25 = v23 - v22;
        if (v23 > v22)
        {
          double v26 = (int *)(*(void *)(v19 + 32) + 4 * v22);
          uint64_t v27 = (double *)(*(void *)(v19 + 8) + 8 * v22);
          do
          {
            double v28 = *v27++;
            double v29 = v28;
            uint64_t v30 = *v26++;
            double v24 = v24 + v29 * *(double *)(*(void *)a2 + 8 * v30);
            --v25;
          }
          while (v25);
        }
        double v16 = -v24 / *(double *)(v17 + 24 * v13 + 16);
        if (v16 != 0.0)
        {
          uint64_t v41 = *(int *)(v17 + 24 * v13 + 8);
          uint64_t v42 = *(void *)(v21 + 8 * v41);
          uint64_t v43 = *(void *)(v21 + (((v41 << 32) + 0x100000000) >> 29));
          BOOL v44 = v43 <= v42;
          uint64_t v45 = v43 - v42;
          if (!v44)
          {
            uint64_t v46 = *(void *)a2;
            double v47 = (int *)(*(void *)(v19 + 32) + 4 * v42);
            double v48 = (double *)(*(void *)(v19 + 8) + 8 * v42);
            do
            {
              double v49 = *v48++;
              double v50 = v49;
              uint64_t v51 = *v47++;
              *(double *)(v46 + 8 * v5std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(double *)(v46 + 8 * v51) + v16 * v50;
              --v45;
            }
            while (v45);
          }
        }
        BOOL v9 = 1;
      }
      else
      {
        uint64_t v31 = v23 - v22;
        if (v23 > v22)
        {
          uint64_t v32 = (int *)(*(void *)(v19 + 32) + 4 * v22);
          unint64_t v33 = (double *)(*(void *)(v19 + 8) + 8 * v22);
          do
          {
            double v34 = *v33++;
            double v35 = v34;
            uint64_t v36 = *v32++;
            double v24 = v24 + v35 * *(double *)(*(void *)a2 + 8 * v36);
            --v31;
          }
          while (v31);
        }
        double v37 = -v24 / *(double *)(v17 + 24 * v13 + 16);
        if (v37 != 0.0)
        {
          uint64_t v38 = *(int *)(v17 + 24 * v13 + 8);
          uint64_t v39 = *(void *)(v21 + 8 * v38);
          uint64_t v40 = *(void *)(v21 + (((v38 << 32) + 0x100000000) >> 29));
          if (v39 < v40)
          {
            do
            {
              operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add((uint64_t)a2, *(_DWORD *)(*(void *)(v19 + 32) + 4 * v39), v37 * *(double *)(*(void *)(v19 + 8) + 8 * v39));
              ++v39;
            }
            while (v40 != v39);
            double v5 = (int *)*((void *)a2 + 4);
            int v4 = (int *)*((void *)a2 + 5);
          }
        }
        if (v5 == v4)
        {
          BOOL v9 = 1;
          double v5 = v4;
        }
        else
        {
          BOOL v9 = *(double *)this * (double)(int)((*((void *)a2 + 1) - *(void *)a2) >> 3) < (double)(unint64_t)(v4 - v5);
        }
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_38;
  }

  operations_research::glop::RankOneUpdateFactorization::RightSolve((uint64_t)this, (uint64_t *)a2);
}

void sub_23CB68280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::BasisFactorization::RightSolveForTau(operations_research::glop::BasisFactorization *this, char **a2)
{
  int v4 = **((_DWORD **)this + 58);
  if (v4) {
    *((double *)this + 579) = *((double *)this + 579)
  }
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + ((double)v4 / (double)v4 + 1.0)
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
  if (*((unsigned char *)this + 864))
  {
    double v5 = (void **)((char *)this + 568);
    if (*((unsigned char *)this + 648))
    {
      *((unsigned char *)this + 648) = 0;
      operations_research::glop::LuFactorization::RightSolveLWithPermutedInput((unsigned char *)this + 912, (uint64_t)a2, (uint64_t *)this + 71);
    }
    else
    {
      uint64_t v38 = **((unsigned int **)this + 58);
      unint64_t v39 = (int)v38;
      uint64_t v40 = (int *)*((void *)this + 75);
      uint64_t v41 = (int *)*((void *)this + 76);
      if (v40 == v41 || (double)(int)v38 * 0.05 <= (double)(unint64_t)(v41 - v40))
      {
        uint64_t v55 = 0;
        uint64_t v51 = v38 << 32;
        uint64_t v52 = (char *)*((void *)this + 71);
        unint64_t v53 = (uint64_t)(*((void *)this + 72) - (void)v52) >> 3;
        if ((int)v38 <= v53)
        {
          if ((int)v38 < v53) {
            *((void *)this + 72) = &v52[8 * (int)v38];
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)this + 568, (int)v38 - v53, &v55);
          uint64_t v52 = (char *)*v5;
        }
        bzero(v52, v51 >> 29);
      }
      else
      {
        uint64_t v42 = *v5;
        unint64_t v43 = (char *)v41 - (char *)v40 - 4;
        BOOL v44 = (int *)*((void *)this + 75);
        if (v43 < 4) {
          goto LABEL_57;
        }
        uint64_t v45 = (v43 >> 2) + 1;
        BOOL v44 = &v40[v45 & 0x7FFFFFFFFFFFFFFELL];
        uint64_t v46 = v40 + 1;
        uint64_t v47 = v45 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v48 = *v46;
          v42[*(v46 - 1)] = 0;
          v42[v48] = 0;
          v46 += 2;
          v47 -= 2;
        }
        while (v47);
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFFELL))
        {
LABEL_57:
          do
          {
            uint64_t v49 = *v44++;
            v42[v49] = 0;
          }
          while (v44 != v41);
        }
        uint64_t v55 = 0;
        unint64_t v50 = (uint64_t)(*((void *)this + 72) - (void)v42) >> 3;
        if (v39 <= v50)
        {
          if (v39 < v50) {
            *((void *)this + 72) = &v42[v39];
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)this + 568, v39 - v50, &v55);
        }
      }
      *((void *)this + 76) = *((void *)this + 75);
      operations_research::glop::LuFactorization::RightSolveLForScatteredColumn((operations_research::glop::BasisFactorization *)((char *)this + 912), (const operations_research::glop::ScatteredColumn *)a2, (operations_research::glop::BasisFactorization *)((char *)this + 568));
    }
    operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 480), (operations_research::glop::BasisFactorization *)((char *)this + 568));
    operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), (int **)this + 71);
    goto LABEL_52;
  }
  *((void *)this + 76) = *((void *)this + 75);
  if ((char **)((char *)this + 568) != a2) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)this + 71, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  operations_research::glop::LuFactorization::RightSolve((uint64_t)this + 912, (uint64_t **)this + 71);
  uint64_t v6 = *((void *)this + 112);
  uint64_t v7 = *((void *)this + 111);
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v8 >> 3;
    unint64_t v11 = *((void *)this + 71);
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      uint64_t v12 = *(void *)(v7 + 8 * v9);
      uint64_t v13 = *(int *)(v12 + 8);
      double v14 = *(double *)(v11 + 8 * v13);
      if (v14 == 0.0) {
        goto LABEL_13;
      }
      uint64_t v15 = *(void *)(v12 + 56);
      double v16 = v14 / *(double *)(v12 + 16);
      if (v15)
      {
        if (v15 >= 1)
        {
          uint64_t v17 = *(int **)(v12 + 72);
          uint64_t v18 = *(double **)(v12 + 80);
          do
          {
            double v19 = *v18++;
            double v20 = v19;
            uint64_t v21 = *v17++;
            *(double *)(v11 + 8 * v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(double *)(v11 + 8 * v21) - v20 * v16;
            --v15;
          }
          while (v15);
        }
        goto LABEL_12;
      }
      unint64_t v22 = *(void *)(v12 + 24);
      unint64_t v23 = *(void *)(v12 + 32) - v22;
      if ((int)(v23 >> 3) >= 1)
      {
        unint64_t v24 = (v23 >> 3);
        if (v24 >= 4 && (v11 < v22 + 8 * v24 ? (BOOL v25 = v22 >= v11 + 8 * v24) : (BOOL v25 = 1), v25))
        {
          uint64_t v26 = (v23 >> 3) & 3;
          unint64_t v27 = v24 - v26;
          float64x2_t v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
          double v29 = (float64x2_t *)(v22 + 16);
          unint64_t v30 = v24 - v26;
          uint64_t v31 = (float64x2_t *)(v11 + 16);
          do
          {
            float64x2_t v32 = vmlsq_f64(*v31, v28, *v29);
            v31[-1] = vmlsq_f64(v31[-1], v28, v29[-1]);
            float64x2_t *v31 = v32;
            v29 += 2;
            v31 += 2;
            v30 -= 4;
          }
          while (v30);
          if (!v26) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v27 = 0;
        }
        unint64_t v33 = v27 - v24;
        uint64_t v34 = 8 * v27;
        double v35 = (double *)(v11 + 8 * v27);
        uint64_t v36 = (double *)(v22 + v34);
        do
        {
          double v37 = *v36++;
          double *v35 = *v35 - v37 * v16;
          ++v35;
          BOOL v25 = __CFADD__(v33++, 1);
        }
        while (!v25);
      }
LABEL_12:
      *(double *)(v11 + 8 * v13) = v16;
LABEL_13:
      ++v9;
    }
    while (v9 != v10);
  }
LABEL_52:
  *((unsigned char *)this + 649) = 1;
  return (uint64_t)this + 568;
}

void operations_research::glop::BasisFactorization::LeftSolveForUnitRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v42, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 367, 2);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v42);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v42);
    return;
  }
  int v6 = **(_DWORD **)(a1 + 464);
  if (v6)
  {
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + (1.0 / (double)v6 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
    int v6 = **(_DWORD **)(a1 + 464);
  }
  uint64_t v8 = *(int **)(a3 + 32);
  uint64_t v7 = *(int **)(a3 + 40);
  if (v8 == v7 || (double)v6 * 0.05 <= (double)(unint64_t)(v7 - v8))
  {
    v42[0] = 0;
    int64_t v18 = (unint64_t)v6 << 32;
    double v19 = *(char **)a3;
    unint64_t v20 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
    if (v6 <= v20)
    {
      if (v6 < v20) {
        *(void *)(a3 + 8) = &v19[8 * v6];
      }
    }
    else
    {
      std::vector<double>::__append(a3, v6 - v20, v42);
      double v19 = *(char **)a3;
    }
    bzero(v19, v18 >> 29);
  }
  else
  {
    uint64_t v9 = *(char **)a3;
    unint64_t v10 = (char *)v7 - (char *)v8 - 4;
    unint64_t v11 = *(int **)(a3 + 32);
    if (v10 < 4) {
      goto LABEL_52;
    }
    uint64_t v12 = (v10 >> 2) + 1;
    unint64_t v11 = &v8[v12 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v13 = v8 + 1;
    uint64_t v14 = v12 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v15 = *v13;
      *(void *)&v9[8 * *(v13 - 1)] = 0;
      *(void *)&v9[8 * v15] = 0;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_52:
      do
      {
        uint64_t v16 = *v11++;
        *(void *)&v9[8 * v16] = 0;
      }
      while (v11 != v7);
    }
    v42[0] = 0;
    unint64_t v17 = (uint64_t)(*(void *)(a3 + 8) - (void)v9) >> 3;
    if (v6 <= v17)
    {
      if (v6 < v17) {
        *(void *)(a3 + 8) = &v9[8 * v6];
      }
    }
    else
    {
      std::vector<double>::__append(a3, v6 - v17, v42);
    }
  }
  unint64_t v23 = *(unsigned int **)(a3 + 32);
  *(void *)(a3 + 40) = v23;
  if (*(unsigned char *)(a1 + 864))
  {
    uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 816) + 4 * (int)a2);
    if (v24 == -1)
    {
      int v27 = operations_research::glop::LuFactorization::LeftSolveUForUnitRow(a1 + 912, a2, a3);
      uint64_t v28 = a1 + 656;
      if (*(void *)(a3 + 32) == *(void *)(a3 + 40)) {
        int v29 = operations_research::glop::CompactSparseMatrix::AddDenseColumnPrefix(v28, (void *)a3, v27);
      }
      else {
        int v29 = operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(v28, (void *)a3, (int **)(a3 + 32));
      }
      *(_DWORD *)(*(void *)(a1 + 816) + 4 * (int)a2) = v29;
      operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a3);
      if (*(unsigned char *)(a1 + 649))
      {
LABEL_22:
        *(_WORD *)(a1 + 648) = operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((unsigned char *)(a1 + 912), a3, (uint64_t *)(a1 + 568));
        if (*(unsigned char *)(a3 + 24)) {
          return;
        }
LABEL_44:
        uint64_t v38 = *(int **)(a3 + 32);
        unint64_t v39 = *(char **)(a3 + 40);
        unint64_t v40 = 126 - 2 * __clz((v39 - (char *)v38) >> 2);
        if (v39 == (char *)v38) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v38, v39, (uint64_t)v42, v41, 1);
        *(unsigned char *)(a3 + 24) = 1;
        return;
      }
    }
    else
    {
      operations_research::glop::CompactSparseMatrix::ColumnCopyToClearedDenseColumnWithNonZeros((void *)(a1 + 656), v24, (void *)a3, a3 + 32);
      operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a3);
      if (*(unsigned char *)(a1 + 649)) {
        goto LABEL_22;
      }
    }
    *(unsigned char *)(a1 + 648) = 0;
    operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((unsigned char *)(a1 + 912), a3);
    *(unsigned char *)(a1 + 649) = 0;
    if (*(unsigned char *)(a3 + 24)) {
      return;
    }
    goto LABEL_44;
  }
  *(void *)(*(void *)a3 + 8 * (int)a2) = 0x3FF0000000000000;
  unint64_t v25 = *(void *)(a3 + 48);
  if ((unint64_t)v23 >= v25)
  {
    uint64_t v30 = v25 - (void)v23;
    uint64_t v31 = v30 >> 1;
    if ((unint64_t)(v30 >> 1) <= 1) {
      uint64_t v31 = 1;
    }
    BOOL v32 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v32) {
      unint64_t v33 = v31;
    }
    if (v33 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v34 = v33;
    double v35 = operator new(4 * v33);
    uint64_t v36 = &v35[v34];
    _DWORD *v35 = a2;
    uint64_t v26 = v35 + 1;
    *(void *)(a3 + 32) = v35;
    *(void *)(a3 + 40) = v35 + 1;
    *(void *)(a3 + 48) = v36;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *unint64_t v23 = a2;
    uint64_t v26 = v23 + 1;
  }
  *(void *)(a3 + 40) = v26;
  if ((int)(((*(void *)(a1 + 896) - *(void *)(a1 + 888)) >> 3) - 1) >= 0)
  {
    uint64_t v37 = 8 * (((*(void *)(a1 + 896) - *(void *)(a1 + 888)) >> 3) - 1);
    do
    {
      operations_research::glop::EtaMatrix::SparseLeftSolve(*(void *)(*(void *)(a1 + 888) + v37), (uint64_t *)a3, a3 + 32);
      v37 -= 8;
    }
    while (v37 != -8);
  }
  operations_research::glop::LuFactorization::LeftSolve(a1 + 912, (void *)a3);
}

void sub_23CB68A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::CompactSparseMatrix::ColumnCopyToClearedDenseColumnWithNonZeros(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    double v5 = a3;
    unint64_t v8 = *(int *)a1;
    v39[0] = 0;
    unint64_t v9 = (uint64_t)(a3[1] - *a3) >> 3;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        a3[1] = *a3 + 8 * v8;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, v8 - v9, v39);
    }
    uint64_t v12 = *(char **)a4;
    *(void *)(a4 + 8) = *(void *)a4;
    uint64_t v13 = a1[7];
    uint64_t v14 = *(void *)(v13 + 8 * (int)a2);
    uint64_t v15 = *(void *)(v13 + (((a2 << 32) + 0x100000000) >> 29));
    if (v14 < v15)
    {
      uint64_t v37 = v15;
      while (1)
      {
        while (1)
        {
          uint64_t v16 = *(int *)(a1[4] + 4 * v14);
          *(void *)(*v5 + 8 * v16) = *(void *)(a1[1] + 8 * v14);
          unint64_t v17 = *(void *)(a4 + 16);
          if ((unint64_t)v12 >= v17) {
            break;
          }
          *(_DWORD *)uint64_t v12 = v16;
          v12 += 4;
          *(void *)(a4 + 8) = v12;
          if (++v14 == v15) {
            return;
          }
        }
        int64_t v18 = v5;
        double v19 = *(char **)a4;
        uint64_t v20 = (uint64_t)&v12[-*(void *)a4];
        uint64_t v21 = v20 >> 2;
        unint64_t v22 = (v20 >> 2) + 1;
        if (v22 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - (void)v19;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v38 = v22;
        if (v22)
        {
          if (v22 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(4 * v22);
          unint64_t v25 = &v24[4 * v21];
          _DWORD *v25 = v16;
          uint64_t v26 = (uint64_t)(v25 + 1);
          if (v12 == v19)
          {
LABEL_30:
            double v5 = v18;
            *(void *)a4 = v25;
            *(void *)(a4 + 8) = v26;
            *(void *)(a4 + 16) = &v24[4 * v38];
            if (!v19) {
              goto LABEL_27;
            }
LABEL_26:
            operator delete(v19);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v24 = 0;
          unint64_t v25 = (_DWORD *)(4 * v21);
          *(_DWORD *)(4 * v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v16;
          uint64_t v26 = 4 * v21 + 4;
          if (v12 == v19) {
            goto LABEL_30;
          }
        }
        unint64_t v27 = v12 - 4 - v19;
        if (v27 < 0xBC
          || &v24[v20 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v20 - 4]
          || &v12[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4
          || (unint64_t)(v12 - v24 - v20) < 0x20)
        {
          break;
        }
        uint64_t v31 = (v27 >> 2) + 1;
        uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v28 = &v12[-v32];
        unint64_t v25 = (_DWORD *)((char *)v25 - v32);
        unint64_t v33 = &v24[4 * v21 - 16];
        uint64_t v34 = v12 - 16;
        uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
        double v5 = v18;
        do
        {
          long long v36 = *(_OWORD *)v34;
          *(v33 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v34 - 1);
          *unint64_t v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        unint64_t v29 = v38;
        if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_24;
        }
LABEL_25:
        *(void *)a4 = v25;
        *(void *)(a4 + 8) = v26;
        *(void *)(a4 + 16) = &v24[4 * v29];
        if (v19) {
          goto LABEL_26;
        }
LABEL_27:
        uint64_t v15 = v37;
        *(void *)(a4 + 8) = v26;
        ++v14;
        uint64_t v12 = (char *)v26;
        if (v14 == v37) {
          return;
        }
      }
      uint64_t v28 = v12;
      double v5 = v18;
      unint64_t v29 = v38;
      do
      {
LABEL_24:
        int v30 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--unint64_t v25 = v30;
      }
      while (v28 != v19);
      goto LABEL_25;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v39, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.h", 439, 2);
    unint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v39);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"dense_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v39);
  }
}

void sub_23CB68D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::BasisFactorization::TemporaryLeftSolveForUnitRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 872))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 417);
    uint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: IsRefactorized() ", 31);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v29);
  }
  if (a3)
  {
    int v6 = **(_DWORD **)(a1 + 464);
    if (v6)
    {
      *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                             + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                             + (1.0 / (double)v6 + 1.0)
                             * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                              * 0.000000002);
      int v6 = **(_DWORD **)(a1 + 464);
    }
    unint64_t v8 = *(int **)(a3 + 32);
    uint64_t v7 = *(int **)(a3 + 40);
    if (v8 == v7 || (double)v6 * 0.05 <= (double)(unint64_t)(v7 - v8))
    {
      v29[0] = 0;
      int64_t v18 = (unint64_t)v6 << 32;
      double v19 = *(char **)a3;
      unint64_t v20 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
      if (v6 <= v20)
      {
        if (v6 < v20) {
          *(void *)(a3 + 8) = &v19[8 * v6];
        }
      }
      else
      {
        std::vector<double>::__append(a3, v6 - v20, v29);
        double v19 = *(char **)a3;
      }
      bzero(v19, v18 >> 29);
    }
    else
    {
      unint64_t v9 = *(char **)a3;
      unint64_t v10 = (char *)v7 - (char *)v8 - 4;
      unint64_t v11 = *(int **)(a3 + 32);
      if (v10 < 4) {
        goto LABEL_31;
      }
      uint64_t v12 = (v10 >> 2) + 1;
      unint64_t v11 = &v8[v12 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v13 = v8 + 1;
      uint64_t v14 = v12 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v15 = *v13;
        *(void *)&v9[8 * *(v13 - 1)] = 0;
        *(void *)&v9[8 * v15] = 0;
        v13 += 2;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_31:
        do
        {
          uint64_t v16 = *v11++;
          *(void *)&v9[8 * v16] = 0;
        }
        while (v11 != v7);
      }
      v29[0] = 0;
      unint64_t v17 = (uint64_t)(*(void *)(a3 + 8) - (void)v9) >> 3;
      if (v6 <= v17)
      {
        if (v6 < v17) {
          *(void *)(a3 + 8) = &v9[8 * v6];
        }
      }
      else
      {
        std::vector<double>::__append(a3, v6 - v17, v29);
      }
    }
    *(void *)(a3 + 40) = *(void *)(a3 + 32);
    uint64_t v23 = (unsigned char *)(a1 + 912);
    operations_research::glop::LuFactorization::LeftSolveUForUnitRow((uint64_t)v23, a2, a3);
    operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(v23, a3);
    if (!*(unsigned char *)(a3 + 24))
    {
      uint64_t v24 = *(int **)(a3 + 32);
      unint64_t v25 = *(char **)(a3 + 40);
      unint64_t v26 = 126 - 2 * __clz((v25 - (char *)v24) >> 2);
      if (v25 == (char *)v24) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v24, v25, (uint64_t)v29, v27, 1);
      *(unsigned char *)(a3 + 24) = 1;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 419, 2);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v29);
  }
}

void sub_23CB68FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CB68FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::BasisFactorization::RightSolveForProblemColumn(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v88, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 431, 2);
    uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v88);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v88);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 464);
  uint64_t v6 = a2;
  unint64_t v7 = a2 + 1;
  if (*(_DWORD *)v5)
  {
    double v8 = (double)(int)(*(void *)(*(void *)(v5 + 56) + 8 * v7) - *(void *)(*(void *)(v5 + 56) + 8 * a2))
       / (double)*(int *)v5
       + 1.0;
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + v8
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
    uint64_t v9 = **(unsigned int **)(a1 + 464);
    unint64_t v11 = *(int **)(a3 + 32);
    unint64_t v10 = *(int **)(a3 + 40);
    uint64_t v12 = (int **)(a3 + 32);
    if (v11 == v10) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v11 = *(int **)(a3 + 32);
    unint64_t v10 = *(int **)(a3 + 40);
    uint64_t v12 = (int **)(a3 + 32);
    if (v11 == v10)
    {
LABEL_15:
      v88[0] = 0;
      uint64_t v24 = v9 << 32;
      unint64_t v25 = *(char **)a3;
      unint64_t v26 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
      if ((int)v9 <= v26)
      {
        if ((int)v9 < v26) {
          *(void *)(a3 + 8) = &v25[8 * (int)v9];
        }
      }
      else
      {
        std::vector<double>::__append(a3, (int)v9 - v26, v88);
        unint64_t v25 = *(char **)a3;
      }
      bzero(v25, v24 >> 29);
      goto LABEL_20;
    }
  }
  if ((double)(int)v9 * 0.05 <= (double)(unint64_t)(v10 - v11)) {
    goto LABEL_15;
  }
  uint64_t v15 = *(char **)a3;
  unint64_t v16 = (char *)v10 - (char *)v11 - 4;
  unint64_t v17 = v11;
  if (v16 < 4) {
    goto LABEL_73;
  }
  uint64_t v18 = (v16 >> 2) + 1;
  unint64_t v17 = &v11[v18 & 0x7FFFFFFFFFFFFFFELL];
  double v19 = v11 + 1;
  uint64_t v20 = v18 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v21 = *v19;
    *(void *)&v15[8 * *(v19 - 1)] = 0;
    *(void *)&v15[8 * v21] = 0;
    v19 += 2;
    v20 -= 2;
  }
  while (v20);
  if (v18 != (v18 & 0x7FFFFFFFFFFFFFFELL))
  {
LABEL_73:
    do
    {
      uint64_t v22 = *v17++;
      *(void *)&v15[8 * v22] = 0;
    }
    while (v17 != v10);
  }
  v88[0] = 0;
  unint64_t v23 = (uint64_t)(*(void *)(a3 + 8) - (void)v15) >> 3;
  if ((int)v9 <= v23)
  {
    if ((int)v9 < v23) {
      *(void *)(a3 + 8) = &v15[8 * (int)v9];
    }
  }
  else
  {
    std::vector<double>::__append(a3, (int)v9 - v23, v88);
  }
LABEL_20:
  *(void *)(a3 + 40) = *(void *)(a3 + 32);
  if (*(unsigned char *)(a1 + 864))
  {
    uint64_t v27 = *(void **)(a1 + 464);
    uint64_t v28 = v27[7];
    uint64_t v29 = *(void *)(v28 + 8 * v6);
    uint64_t v30 = v27[4] + 4 * v29;
    uint64_t v31 = v27[1] + 8 * v29;
    v88[0] = *(void *)(v28 + 8 * v7) - v29;
    v88[1] = v30;
    v88[2] = v31;
    operations_research::glop::LuFactorization::RightSolveLForColumnView((unsigned char *)(a1 + 912), v88, (void *)a3);
    operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::RankOneUpdateFactorization *)(a1 + 480), (operations_research::glop::ScatteredColumn *)a3);
    uint64_t v32 = *(void *)(a1 + 840);
    uint64_t v33 = *(void *)(a1 + 848) - v32;
    if ((int)v6 >= (int)((unint64_t)v33 >> 2))
    {
      unint64_t v34 = v33 >> 2;
      if (v7 <= v34)
      {
        if (v7 < v34) {
          *(void *)(a1 + 848) = v32 + 4 * v7;
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 840), v7 - v34, &operations_research::glop::kInvalidCol);
      }
    }
    uint64_t v81 = *(int **)(a3 + 32);
    unsigned int v82 = *(char **)(a3 + 40);
    if (v81 == (int *)v82)
    {
      int v83 = operations_research::glop::CompactSparseMatrix::AddDenseColumn(a1 + 736, (void *)a3);
    }
    else
    {
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v81, v82, (uint64_t)v88, 126 - 2 * __clz((v82 - (char *)v81) >> 2), 1);
      int v83 = operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(a1 + 736, (void *)a3, v12);
    }
    *(_DWORD *)(*(void *)(a1 + 840) + 4 * v6) = v83;
    operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::LuFactorization *)(a1 + 912), (int **)a3);
    if (!*(unsigned char *)(a3 + 24))
    {
      double v84 = *(int **)(a3 + 32);
      std::string v85 = *(char **)(a3 + 40);
      unint64_t v86 = 126 - 2 * __clz((v85 - (char *)v84) >> 2);
      if (v85 == (char *)v84) {
        uint64_t v87 = 0;
      }
      else {
        uint64_t v87 = v86;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v84, v85, (uint64_t)v88, v87, 1);
      *(unsigned char *)(a3 + 24) = 1;
    }
    return;
  }
  uint64_t v35 = *(void **)(a1 + 464);
  unint64_t v36 = *(int *)v35;
  v88[0] = 0;
  unint64_t v37 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
  if (v36 <= v37)
  {
    if (v36 < v37) {
      *(void *)(a3 + 8) = *(void *)a3 + 8 * v36;
    }
  }
  else
  {
    std::vector<double>::__append(a3, v36 - v37, v88);
  }
  uint64_t v38 = v35[7];
  uint64_t v39 = *(void *)(v38 + 8 * v6);
  uint64_t v40 = *(void *)(v38 + 8 * v7);
  BOOL v41 = v40 <= v39;
  uint64_t v42 = v40 - v39;
  if (!v41)
  {
    unint64_t v43 = *(char **)a3;
    BOOL v44 = (int *)(v35[4] + 4 * v39);
    uint64_t v45 = (uint64_t *)(v35[1] + 8 * v39);
    do
    {
      uint64_t v46 = *v45++;
      uint64_t v47 = v46;
      uint64_t v48 = *v44++;
      *(void *)&v43[8 * v48] = v47;
      --v42;
    }
    while (v42);
  }
  operations_research::glop::LuFactorization::RightSolve(a1 + 912, (uint64_t **)a3);
  uint64_t v49 = *(void *)(a1 + 896);
  uint64_t v50 = *(void *)(a1 + 888);
  uint64_t v51 = v49 - v50;
  if (v49 != v50)
  {
    uint64_t v52 = 0;
    unint64_t v53 = v51 >> 3;
    unint64_t v54 = *(void *)a3;
    if (v53 <= 1) {
      unint64_t v53 = 1;
    }
    do
    {
      uint64_t v55 = *(void *)(v50 + 8 * v52);
      uint64_t v56 = *(int *)(v55 + 8);
      double v57 = *(double *)(v54 + 8 * v56);
      if (v57 == 0.0) {
        goto LABEL_36;
      }
      uint64_t v58 = *(void *)(v55 + 56);
      double v59 = v57 / *(double *)(v55 + 16);
      if (v58)
      {
        if (v58 >= 1)
        {
          double v60 = *(int **)(v55 + 72);
          double v61 = *(double **)(v55 + 80);
          do
          {
            double v62 = *v61++;
            double v63 = v62;
            uint64_t v64 = *v60++;
            *(double *)(v54 + 8 * v64) = *(double *)(v54 + 8 * v64) - v63 * v59;
            --v58;
          }
          while (v58);
        }
        goto LABEL_35;
      }
      unint64_t v65 = *(void *)(v55 + 24);
      unint64_t v66 = *(void *)(v55 + 32) - v65;
      if ((int)(v66 >> 3) >= 1)
      {
        unint64_t v67 = (v66 >> 3);
        if (v67 >= 4 && (v54 < v65 + 8 * v67 ? (BOOL v68 = v65 >= v54 + 8 * v67) : (BOOL v68 = 1), v68))
        {
          uint64_t v69 = (v66 >> 3) & 3;
          unint64_t v70 = v67 - v69;
          float64x2_t v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0);
          uint64_t v72 = (float64x2_t *)(v65 + 16);
          unint64_t v73 = v67 - v69;
          double v74 = (float64x2_t *)(v54 + 16);
          do
          {
            float64x2_t v75 = vmlsq_f64(*v74, v71, *v72);
            v74[-1] = vmlsq_f64(v74[-1], v71, v72[-1]);
            *double v74 = v75;
            v72 += 2;
            v74 += 2;
            v73 -= 4;
          }
          while (v73);
          if (!v69) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v70 = 0;
        }
        unint64_t v76 = v70 - v67;
        uint64_t v77 = 8 * v70;
        double v78 = (double *)(v54 + 8 * v70);
        double v79 = (double *)(v65 + v77);
        do
        {
          double v80 = *v79++;
          double *v78 = *v78 - v80 * v59;
          ++v78;
          BOOL v68 = __CFADD__(v76++, 1);
        }
        while (!v68);
      }
LABEL_35:
      *(double *)(v54 + 8 * v56) = v59;
LABEL_36:
      ++v52;
    }
    while (v52 != v53);
  }
}

void sub_23CB69528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::BasisFactorization::RightSolveSquaredNorm(uint64_t a1, unint64_t *a2)
{
  int v4 = **(_DWORD **)(a1 + 464);
  if (v4)
  {
    double v5 = (double)*(int *)a2 / (double)v4 + 1.0;
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + v5
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
  }

  operations_research::glop::LuFactorization::RightSolveSquaredNorm(a1 + 912, a2);
}

void operations_research::glop::BasisFactorization::DualEdgeSquaredNorm(uint64_t a1, int a2)
{
  int v4 = **(_DWORD **)(a1 + 464);
  if (v4) {
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
  }
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + (1.0 / (double)v4 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);

  operations_research::glop::LuFactorization::DualEdgeSquaredNorm(a1 + 912, a2);
}

double operations_research::glop::BasisFactorization::ComputeInfinityNormConditionNumberUpperBound(operations_research::glop::BasisFactorization *this)
{
  uint64_t v1 = (void *)*((void *)this + 58);
  unint64_t v2 = *(unsigned int *)v1;
  if ((int)v2 < 1) {
    return 1.0;
  }
  int v4 = (int *)**((void **)this + 59);
  uint64_t v5 = v1[7];
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(v5 + 8 * v6);
  if (*(void *)(v5 + (((v6 << 32) + 0x100000000) >> 29)) - v7 != 1) {
    goto LABEL_16;
  }
  uint64_t v8 = v1[1];
  uint64_t v9 = v1[4];
  if (*(_DWORD *)(v9 + 4 * v7) || *(double *)(v8 + 8 * v7) != 1.0) {
    goto LABEL_16;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v2 == v11) {
      break;
    }
    uint64_t v13 = v4[v11];
    uint64_t v14 = *(void *)(v5 + 8 * v13);
    if (*(void *)(v5 + (((v13 << 32) + 0x100000000) >> 29)) - v14 != 1) {
      break;
    }
    double v15 = *(double *)(v8 + 8 * v14);
    uint64_t v16 = *(unsigned int *)(v9 + 4 * v14);
    uint64_t v11 = v12 + 1;
  }
  while (v12 == v16 && v15 == 1.0);
  double result = 1.0;
  if (v12 < v2)
  {
LABEL_16:
    double v19 = 1.0;
    *((double *)this + 579) = *((double *)this + 579)
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + ((double)(int)v2 / (double)(int)v2 + 1.0)
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
    uint64_t v20 = (void *)*((void *)this + 58);
    unint64_t v21 = *(unsigned int *)v20;
    if ((int)v21 >= 1)
    {
      uint64_t v22 = (void *)*((void *)this + 59);
      uint64_t v23 = v20[7];
      uint64_t v24 = *(int *)*v22;
      uint64_t v25 = *(void *)(v23 + 8 * v24);
      if (*(void *)(v23 + (((v24 << 32) + 0x100000000) >> 29)) - v25 != 1) {
        goto LABEL_31;
      }
      uint64_t v26 = v20[1];
      uint64_t v27 = v20[4];
      if (*(_DWORD *)(v27 + 4 * v25) || *(double *)(v26 + 8 * v25) != 1.0) {
        goto LABEL_31;
      }
      uint64_t v29 = 1;
      do
      {
        unint64_t v30 = v29;
        if (v21 == v29) {
          break;
        }
        uint64_t v31 = *(int *)(*v22 + 4 * v29);
        uint64_t v32 = *(void *)(v23 + 8 * v31);
        if (*(void *)(v23 + (((v31 << 32) + 0x100000000) >> 29)) - v32 != 1) {
          break;
        }
        double v33 = *(double *)(v26 + 8 * v32);
        uint64_t v34 = *(unsigned int *)(v27 + 4 * v32);
        uint64_t v29 = v30 + 1;
      }
      while (v30 == v34 && v33 == 1.0);
      double v19 = 1.0;
      if (v30 < v21)
      {
LABEL_31:
        v36[0] = *((void *)this + 58);
        v36[1] = v22;
        double v19 = operations_research::glop::CompactSparseMatrixView::ComputeInfinityNorm((operations_research::glop::CompactSparseMatrixView *)v36);
      }
    }
    return v19
         * operations_research::glop::LuFactorization::ComputeInverseInfinityNormUpperBound((operations_research::glop::BasisFactorization *)((char *)this + 912));
  }
  return result;
}

double operations_research::glop::BasisFactorization::DeterministicTime(operations_research::glop::BasisFactorization *this)
{
  return *((double *)this + 579);
}

void *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = v12;
    double result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    BOOL v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14);
    }
    double v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  double v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    double v19 = (void *)*result;
LABEL_20:
    double result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    double v19 = v9;
    std::string __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  char *v15 = &v9[v14];
  return result;
}

operations_research::glop::BasisFactorization::Stats *operations_research::glop::BasisFactorization::Stats::Stats(operations_research::glop::BasisFactorization::Stats *this)
{
  strcpy((char *)this, "BasisFactorization");
  *((unsigned char *)this + 23) = 18;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_23CE7ED90;
  strcpy((char *)__p, "refactorization_interval");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::BasisFactorization::Stats *)((char *)this + 80), (long long *)&__p, this) = &unk_26F0C4A58;
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_23CB69AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    operations_research::StatsGroup::~StatsGroup(v15);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup(v15);
  _Unwind_Resume(a1);
}

void operations_research::glop::LuFactorization::~LuFactorization(operations_research::glop::LuFactorization *this)
{
  operations_research::glop::Markowitz::~Markowitz((operations_research::glop::LuFactorization *)((char *)this + 1880));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::LuFactorization *)((char *)this + 1584));
  *((void *)this + 188) = &unk_26F0BCDD8;
  if (*((char *)this + 1535) < 0)
  {
    operator delete(*((void **)this + 189));
    *((void *)this + 178) = &unk_26F0BCDD8;
    if ((*((char *)this + 1455) & 0x80000000) == 0)
    {
LABEL_3:
      operations_research::StatsGroup::~StatsGroup((operations_research::glop::LuFactorization *)((char *)this + 1344));
      unint64_t v2 = (void *)*((void *)this + 165);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    *((void *)this + 178) = &unk_26F0BCDD8;
    if ((*((char *)this + 1455) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 179));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::LuFactorization *)((char *)this + 1344));
  unint64_t v2 = (void *)*((void *)this + 165);
  if (v2)
  {
LABEL_4:
    *((void *)this + 166) = v2;
    operator delete(v2);
  }
LABEL_5:
  uint64_t v3 = (void *)*((void *)this + 162);
  if (v3)
  {
    *((void *)this + 163) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v4) {
    MEMORY[0x23ECF2BA0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = (void *)*((void *)this + 153);
  if (v5)
  {
    *((void *)this + 154) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 150);
  if (v6)
  {
    *((void *)this + 15std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 147);
  if (v7)
  {
    *((void *)this + 148) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 144);
  if (v8)
  {
    *((void *)this + 14std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 141);
  if (v9)
  {
    *((void *)this + 142) = v9;
    operator delete(v9);
  }
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 848));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 568));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 288));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 8));
}

void operations_research::glop::Markowitz::~Markowitz(operations_research::glop::Markowitz *this)
{
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::Markowitz *)((char *)this + 1544));
  unint64_t v2 = (void *)*((void *)this + 190);
  if (v2)
  {
    *((void *)this + 19std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 187);
  if (v3)
  {
    *((void *)this + 188) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 184);
  if (v4)
  {
    *((void *)this + 18std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 179);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 180);
    uint64_t v7 = (void *)*((void *)this + 179);
    if (v6 != v5)
    {
      uint64_t v8 = *((void *)this + 180);
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      uint64_t v7 = (void *)*((void *)this + 179);
    }
    *((void *)this + 180) = v5;
    operator delete(v7);
  }
  BOOL v11 = (void *)*((void *)this + 176);
  if (v11)
  {
    *((void *)this + 177) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 173);
  if (v12)
  {
    *((void *)this + 174) = v12;
    operator delete(v12);
  }
  operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern((operations_research::glop::Markowitz *)((char *)this + 1232));
  uint64_t v13 = (void *)*((void *)this + 151);
  if (v13) {
    operator delete(v13);
  }
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::Markowitz *)((char *)this + 928));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::Markowitz *)((char *)this + 648));
  size_t v14 = (void *)*((void *)this + 78);
  if (v14)
  {
    double v15 = (void *)*((void *)this + 79);
    uint64_t v16 = (void *)*((void *)this + 78);
    if (v15 != v14)
    {
      do
      {
        uint64_t v18 = *(v15 - 6);
        v15 -= 6;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          MEMORY[0x23ECF2BA0](v17, 0x1000C8077774924);
        }
      }
      while (v15 != v14);
      uint64_t v16 = (void *)*((void *)this + 78);
    }
    *((void *)this + 79) = v14;
    operator delete(v16);
  }
  double v19 = (void *)*((void *)this + 75);
  if (v19)
  {
    *((void *)this + 76) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 72);
  if (v20)
  {
    *((void *)this + 73) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v21) {
    MEMORY[0x23ECF2BA0](v21, 0x1000C8077774924);
  }
  uint64_t v22 = (void *)*((void *)this + 63);
  if (v22)
  {
    uint64_t v23 = (void *)*((void *)this + 64);
    uint64_t v24 = (void *)*((void *)this + 63);
    if (v23 != v22)
    {
      do
      {
        uint64_t v26 = *(v23 - 6);
        v23 -= 6;
        uint64_t v25 = v26;
        *uint64_t v23 = 0;
        if (v26) {
          MEMORY[0x23ECF2BA0](v25, 0x1000C8077774924);
        }
      }
      while (v23 != v22);
      uint64_t v24 = (void *)*((void *)this + 63);
    }
    *((void *)this + 64) = v22;
    operator delete(v24);
  }
  uint64_t v27 = (void *)*((void *)this + 60);
  if (v27)
  {
    *((void *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v27;
    operator delete(v27);
  }
  uint64_t v28 = (void *)*((void *)this + 57);
  if (v28)
  {
    *((void *)this + 58) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *((void *)this + 51);
  *((void *)this + 5std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  if (v29) {
    MEMORY[0x23ECF2BA0](v29, 0x1000C8077774924);
  }
  *((void *)this + 40) = &unk_26F0BCDD8;
  if (*((char *)this + 351) < 0)
  {
    operator delete(*((void **)this + 41));
    *((void *)this + 30) = &unk_26F0BCDD8;
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_51:
      *((void *)this + 20) = &unk_26F0BCDD8;
      if ((*((char *)this + 191) & 0x80000000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_58;
    }
  }
  else
  {
    *((void *)this + 30) = &unk_26F0BCDD8;
    if ((*((char *)this + 271) & 0x80000000) == 0) {
      goto LABEL_51;
    }
  }
  operator delete(*((void **)this + 31));
  *((void *)this + 20) = &unk_26F0BCDD8;
  if ((*((char *)this + 191) & 0x80000000) == 0)
  {
LABEL_52:
    *((void *)this + 10) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(*((void **)this + 21));
  *((void *)this + 10) = &unk_26F0BCDD8;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_53:
    unint64_t v30 = this;
    goto LABEL_55;
  }
LABEL_59:
  operator delete(*((void **)this + 11));
  unint64_t v30 = this;

LABEL_55:
  operations_research::StatsGroup::~StatsGroup(v30);
}

void operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(operations_research::glop::MatrixNonZeroPattern *this)
{
  unint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(void **)this;
    if (v8 != v7)
    {
      uint64_t v10 = *((void *)this + 1);
      do
      {
        char v11 = *(unsigned char *)(v10 - 32);
        v10 -= 32;
        if (v11) {
          operator delete(*(void **)(v8 - 24));
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)this;
    }
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v7;
    operator delete(v9);
  }
}

void operations_research::glop::TriangularMatrix::~TriangularMatrix(operations_research::glop::TriangularMatrix *this)
{
  unint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 29);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 26);
  if (v4)
  {
    *((void *)this + 27) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    *((void *)this + 24) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 17);
  if (v7)
  {
    *((void *)this + 18) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 14);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 10);
  if (v9)
  {
    *((void *)this + 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 7);
  if (v10)
  {
    *((void *)this + 8) = v10;
    operator delete(v10);
  }
  char v11 = (void *)*((void *)this + 4);
  if (v11)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 1);
  if (v12)
  {
    *((void *)this + 2) = v12;
    operator delete(v12);
  }
}

void operations_research::glop::RankOneUpdateFactorization::LeftSolve(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    unsigned int v3 = -1431655765 * ((unint64_t)(*(void *)(a1 + 24) - v2) >> 3) - 1;
    if ((v3 & 0x80000000) == 0)
    {
      do
      {
        uint64_t v6 = (int *)(v2 + 24 * v3);
        uint64_t v7 = *(void *)v6;
        uint64_t v8 = v6[2];
        uint64_t v9 = *(void *)(*(void *)v6 + 56);
        uint64_t v10 = *(void *)(v9 + 8 * v8);
        uint64_t v11 = *(void *)(v9 + (((v8 << 32) + 0x100000000) >> 29));
        double v12 = 0.0;
        BOOL v13 = v11 <= v10;
        uint64_t v14 = v11 - v10;
        if (!v13)
        {
          double v15 = (int *)(*(void *)(v7 + 32) + 4 * v10);
          uint64_t v16 = (double *)(*(void *)(v7 + 8) + 8 * v10);
          do
          {
            double v17 = *v16++;
            double v18 = v17;
            uint64_t v19 = *v15++;
            double v12 = v12 + v18 * *(double *)(*a2 + 8 * v19);
            --v14;
          }
          while (v14);
        }
        int v4 = v3;
        double v5 = -v12 / *(double *)(v2 + 24 * v3 + 16);
        if (v5 != 0.0)
        {
          uint64_t v20 = *(int *)(v2 + 24 * v3 + 12);
          uint64_t v21 = *(void *)(v9 + 8 * v20);
          uint64_t v22 = *(void *)(v9 + (((v20 << 32) + 0x100000000) >> 29));
          BOOL v13 = v22 <= v21;
          uint64_t v23 = v22 - v21;
          if (!v13)
          {
            uint64_t v24 = *(void *)(v7 + 8);
            uint64_t v25 = *(void *)(v7 + 32);
            uint64_t v26 = *a2;
            uint64_t v27 = (int *)(v25 + 4 * v21);
            uint64_t v28 = (double *)(v24 + 8 * v21);
            do
            {
              double v29 = *v28++;
              double v30 = v29;
              uint64_t v31 = *v27++;
              *(double *)(v26 + 8 * v3std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(double *)(v26 + 8 * v31) + v5 * v30;
              --v23;
            }
            while (v23);
          }
        }
        unsigned int v3 = v4 - 1;
      }
      while (v4 > 0);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 156, 2);
    uint64_t v32 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    double v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v34);
  }
}

void sub_23CB6A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2 == v3)
  {
    uint64_t v5 = *(void *)(a1 + 8) - *(void *)a1;
    goto LABEL_8;
  }
  double v4 = (double)(unint64_t)((v3 - v2) >> 2);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)a1;
  if ((double)(int)((unint64_t)v5 >> 3) * 0.8 < v4)
  {
LABEL_8:
    char v10 = 0;
    std::vector<BOOL>::assign((char **)(a1 + 56), (int)(v5 >> 3), &v10);
    return;
  }
  std::vector<BOOL>::resize(a1 + 56, (int)(v5 >> 3), 0);
  uint64_t v6 = *(int **)(a1 + 32);
  uint64_t v7 = *(int **)(a1 + 40);
  if (v6 != v7)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    do
    {
      int v9 = *v6++;
      *(void *)(v8 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
    }
    while (v6 != v7);
  }
}

void operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add(uint64_t a1, int a2, double a3)
{
  *(double *)(*(void *)a1 + 8 * a2) = *(double *)(*(void *)a1 + 8 * a2) + a3;
  uint64_t v3 = *(void *)(a1 + 56);
  unint64_t v4 = (unint64_t)a2 >> 6;
  uint64_t v5 = *(void *)(v3 + 8 * v4);
  if (a3 != 0.0 && (v5 & (1 << a2)) == 0)
  {
    *(void *)(v3 + 8 * v4) = v5 | (1 << a2);
    char v10 = *(char **)(a1 + 40);
    unint64_t v9 = *(void *)(a1 + 48);
    if ((unint64_t)v10 < v9)
    {
      *(_DWORD *)char v10 = a2;
      uint64_t v11 = (uint64_t)(v10 + 4);
LABEL_27:
      *(void *)(a1 + 40) = v11;
      *(unsigned char *)(a1 + 24) = 0;
      return;
    }
    double v12 = *(char **)(a1 + 32);
    uint64_t v13 = (v10 - v12) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v17 = operator new(4 * v16);
      double v18 = &v17[4 * v13];
      uint64_t v19 = &v17[4 * v16];
      *double v18 = a2;
      uint64_t v11 = (uint64_t)(v18 + 1);
      int64_t v20 = v10 - v12;
      if (v10 == v12) {
        goto LABEL_25;
      }
    }
    else
    {
      double v17 = 0;
      double v18 = (_DWORD *)(4 * v13);
      uint64_t v19 = 0;
      *(_DWORD *)(4 * v13) = a2;
      uint64_t v11 = 4 * v13 + 4;
      int64_t v20 = v10 - v12;
      if (v10 == v12)
      {
LABEL_25:
        *(void *)(a1 + 32) = v18;
        *(void *)(a1 + 40) = v11;
        *(void *)(a1 + 48) = v19;
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_27;
      }
    }
    unint64_t v21 = v20 - 4;
    if (v21 < 0x2C) {
      goto LABEL_32;
    }
    if ((unint64_t)(v12 - v17) < 0x20) {
      goto LABEL_32;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v24 = &v10[-v23];
    double v18 = (_DWORD *)((char *)v18 - v23);
    uint64_t v25 = &v17[4 * v13 - 16];
    uint64_t v26 = v10 - 16;
    uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v26 - 1);
      _OWORD *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    char v10 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        int v29 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--double v18 = v29;
      }
      while (v10 != v12);
    }
    goto LABEL_25;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
    return;
  }
  int v6 = __len;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    std::string __dst = 0;
    long long v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)&__dst, v11);
    double v12 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)&long long v23 = v13 + v5;
    uint64_t v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      unint64_t v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40) {
        memmove(__dst, v12, 8 * v14);
      }
      v15 += v14;
      uint64_t v16 = v13 & 0x3F;
      if (v16) {
        void *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((void *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      }
      double v12 = *(void **)a1;
    }
    *(void *)a1 = __dst;
    std::string __dst = v12;
    long long v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    long long v23 = v17;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    uint64_t v15 = (void *)(*(void *)a1 + 8 * (v4 >> 6));
    uint64_t v16 = *(void *)(a1 + 8) & 0x3FLL;
    *(void *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v18 = v5;
        }
        else {
          unint64_t v18 = (64 - v16);
        }
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        memset(v15, 255, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v21 = v5;
        }
        else {
          unint64_t v21 = (64 - v16);
        }
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        bzero(v15, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_23CB6A82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RankOneUpdateFactorization::RightSolve(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = v3 - v2;
    if (v3 != v2)
    {
      uint64_t v5 = 0;
      unint64_t v6 = v4 / 24;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      do
      {
        unint64_t v8 = (int *)(v2 + 24 * v5);
        uint64_t v9 = *(void *)v8;
        uint64_t v10 = v8[3];
        uint64_t v11 = *(void *)(*(void *)v8 + 56);
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        uint64_t v13 = *(void *)(v11 + (((v10 << 32) + 0x100000000) >> 29));
        double v14 = 0.0;
        BOOL v15 = v13 <= v12;
        uint64_t v16 = v13 - v12;
        if (!v15)
        {
          long long v17 = (int *)(*(void *)(v9 + 32) + 4 * v12);
          unint64_t v18 = (double *)(*(void *)(v9 + 8) + 8 * v12);
          do
          {
            double v19 = *v18++;
            double v20 = v19;
            uint64_t v21 = *v17++;
            double v14 = v14 + v20 * *(double *)(*a2 + 8 * v21);
            --v16;
          }
          while (v16);
        }
        double v7 = -v14 / *(double *)(v2 + 24 * v5 + 16);
        if (v7 != 0.0)
        {
          uint64_t v22 = *(int *)(v2 + 24 * v5 + 8);
          uint64_t v23 = *(void *)(v11 + 8 * v22);
          uint64_t v24 = *(void *)(v11 + (((v22 << 32) + 0x100000000) >> 29));
          BOOL v15 = v24 <= v23;
          uint64_t v25 = v24 - v23;
          if (!v15)
          {
            uint64_t v26 = *(void *)(v9 + 8);
            uint64_t v27 = *(void *)(v9 + 32);
            uint64_t v28 = *a2;
            int v29 = (int *)(v27 + 4 * v23);
            double v30 = (double *)(v26 + 8 * v23);
            do
            {
              double v31 = *v30++;
              double v32 = v31;
              uint64_t v33 = *v29++;
              *(double *)(v28 + 8 * v33) = *(double *)(v28 + 8 * v33) + v7 * v32;
              --v25;
            }
            while (v25);
          }
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 189, 2);
    uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)v36);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
  }
}

void sub_23CB6A9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int64x2_t v18 = vdupq_lane_s64(*a3, 0);
      double v19 = (int64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *double v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      unint64_t v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v15 = (char *)operator new(8 * v14);
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    uint64_t v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    uint64_t v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      double v32 = &v15[8 * v11 - 16];
      uint64_t v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v33 - 1);
        *(_OWORD *)double v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            int *v12 = v71;
            *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                int *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              int *v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              int *v12 = v75;
            }
            *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v73;
          }
          return result;
        case 4uLL:
          unint64_t v76 = v12 + 1;
          uint64_t v77 = (int *)v12[1];
          double v78 = v12 + 2;
          int v79 = v12[2];
          double v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              int *v78 = v94;
              *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                void v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  int *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            int *v78 = (int)v77;
            uint64_t v81 = v12;
            unsigned int v82 = v12 + 1;
            double result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v81 = v12;
            unsigned int v82 = v12 + 2;
            double result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              int *v12 = (int)v77;
              v12[1] = (int)v80;
              uint64_t v81 = v12 + 1;
              unsigned int v82 = v12 + 2;
              double result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *uint64_t v81 = v79;
          _DWORD *v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *unint64_t v16 = v17;
          goto LABEL_32;
        }
        *unint64_t v16 = v20;
        int *v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          int *v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      int *v12 = v17;
      *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unint64_t v16 = *v12;
      int *v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        double v63 = v12 + 1;
        do
        {
          unint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        uint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          int *v12 = v67;
          *uint64_t v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      unint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      int *v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *unint64_t v16 = v17;
          *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            int *v12 = *v16;
            *unint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          int *v12 = v18;
          *unint64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *unint64_t v16 = v25;
        }
        else
        {
          int *v12 = v17;
        }
        *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v19;
      }
LABEL_24:
      int64x2_t v26 = &v12[v15];
      int v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *uint64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *uint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *uint64_t v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *uint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      long long v35 = &v12[v15];
      int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          int *v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            void v12[2] = *v36;
            int *v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          void v12[2] = v37;
          int *v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          int *v36 = v42;
        }
        else
        {
          void v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *unint64_t v16 = v45;
        int *v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          *uint64_t v27 = v45;
          int *v36 = v44;
LABEL_55:
          int v47 = *v12;
          int *v12 = v43;
          *unint64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        int *v12 = v45;
        *unint64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      *uint64_t v27 = v43;
      *unint64_t v16 = v44;
      uint64_t v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      int *v12 = v44;
      *unint64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      uint64_t v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        double v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        int *v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      uint64_t v55 = &v12[v48];
      uint64_t v56 = (int *)v51;
      do
      {
        int *v55 = v54;
        int *v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      double v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *double v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v12, v59);
      unint64_t v12 = v59 + 1;
      double result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        double result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v59 + 1;
      }
    }
  }
  int v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        uint64_t v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              uint64_t v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          uint64_t v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          int *v88 = v89;
        }
        int v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      uint64_t v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)int v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)int v83 = v95;
      }
      int v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        int *v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        int *v14 = v17;
        *unint64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unint64_t v16 = v31;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *uint64_t v4 = v5;
        unint64_t v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        unint64_t v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unint64_t v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      int *v7 = v3;
      *unint64_t v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = *a2;
  int v6 = *result;
  int v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    int v8 = *result;
    if (*a2 < *result)
    {
      uint64_t *result = *a2;
      *a2 = v8;
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      uint64_t *result = v5;
      *a2 = v6;
      int v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      uint64_t *result = v7;
    }
    *a3 = v6;
    int v5 = v6;
  }
LABEL_11:
  int v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  int v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    int v11 = *result;
    if (*a2 < *result)
    {
      uint64_t *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  int v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    int v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      int v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        int v15 = *result;
        if (*a2 < *result)
        {
          uint64_t *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        int v37 = &a1[4 * v36];
        if (2 * v35 + 2 >= v4)
        {
          int v38 = *(_DWORD *)v37;
          int v40 = &a1[4 * v35];
          int v41 = *(_DWORD *)v40;
          if (*(_DWORD *)v37 >= *(_DWORD *)v40) {
            goto LABEL_78;
          }
        }
        else
        {
          int v38 = *((_DWORD *)v37 + 1);
          BOOL v39 = *(_DWORD *)v37 < v38;
          if (*(_DWORD *)v37 > v38) {
            int v38 = *(_DWORD *)v37;
          }
          if (v39)
          {
            v37 += 4;
            uint64_t v36 = 2 * v35 + 2;
          }
          int v40 = &a1[4 * v35];
          int v41 = *(_DWORD *)v40;
          if (v38 >= *(_DWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)int v40 = v38;
              int v40 = v37;
              if (v34 < v36) {
                break;
              }
              uint64_t v43 = (2 * v36) | 1;
              int v37 = &a1[4 * v43];
              uint64_t v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                int v38 = *(_DWORD *)v37;
                int v42 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 <= v42) {
                  int v38 = *((_DWORD *)v37 + 1);
                }
                if (*(_DWORD *)v37 >= v42) {
                  uint64_t v36 = v43;
                }
                else {
                  v37 += 4;
                }
                if (v38 < v41) {
                  break;
                }
              }
              else
              {
                int v38 = *(_DWORD *)v37;
                uint64_t v36 = v43;
                if (*(_DWORD *)v37 < v41) {
                  break;
                }
              }
            }
            *(_DWORD *)int v40 = v41;
          }
        }
      }
      BOOL v15 = v35-- <= 0;
    }
    while (!v15);
  }
  int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      int v6 = *(_DWORD *)a1;
      int v7 = a2;
      do
      {
        int v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)int v7 = v6;
          *(_DWORD *)a1 = v8;
          int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      int v5 = a3;
      goto LABEL_38;
    }
    int v9 = a2;
    while (1)
    {
      int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        int v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          int v12 = a1 + 4;
          uint64_t v13 = 1;
          if (v11 >= v10) {
            goto LABEL_26;
          }
        }
        else
        {
          int v14 = *((_DWORD *)a1 + 2);
          BOOL v15 = v11 < v14;
          if (v11 <= v14) {
            int v11 = *((_DWORD *)a1 + 2);
          }
          if (v15) {
            int v12 = a1 + 8;
          }
          else {
            int v12 = a1 + 4;
          }
          if (v15) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v11 >= v10)
          {
LABEL_26:
            unint64_t v16 = a1;
            while (1)
            {
              *(_DWORD *)unint64_t v16 = v11;
              unint64_t v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v18 = (2 * v13) | 1;
              int v12 = &a1[4 * v18];
              uint64_t v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                int v11 = *(_DWORD *)v12;
                int v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17) {
                  int v11 = *((_DWORD *)v12 + 1);
                }
                if (*(_DWORD *)v12 >= v17) {
                  uint64_t v13 = v18;
                }
                else {
                  v12 += 4;
                }
                if (v11 < v10) {
                  break;
                }
              }
              else
              {
                int v11 = *(_DWORD *)v12;
                uint64_t v13 = v18;
                if (*(_DWORD *)v12 < v10) {
                  break;
                }
              }
            }
            *(_DWORD *)unint64_t v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    uint64_t v19 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v20 = 0;
      int v21 = *(_DWORD *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          int v26 = &v23[4 * v20 + 4];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(_DWORD *)int v23 = *(_DWORD *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        int v24 = *(_DWORD *)v26;
        int v25 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 <= v25) {
          int v24 = *((_DWORD *)v26 + 1);
        }
        if (*(_DWORD *)v26 >= v25) {
          uint64_t v20 = v27;
        }
        else {
          v26 += 4;
        }
        *(_DWORD *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 4;
      if (v26 == a2)
      {
        *(_DWORD *)int v26 = v21;
      }
      else
      {
        *(_DWORD *)int v26 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        uint64_t v28 = v26 - a1 + 4;
        if (v28 >= 5)
        {
          unint64_t v29 = (((unint64_t)v28 >> 2) - 2) >> 1;
          int v30 = &a1[4 * v29];
          int v31 = *(_DWORD *)v30;
          int v32 = *(_DWORD *)v26;
          if (*(_DWORD *)v30 < *(_DWORD *)v26)
          {
            do
            {
              *(_DWORD *)int v26 = v31;
              int v26 = v30;
              if (!v29) {
                break;
              }
              unint64_t v29 = (v29 - 1) >> 1;
              int v30 = &a1[4 * v29];
              int v31 = *(_DWORD *)v30;
            }
            while (*(_DWORD *)v30 < v32);
            *(_DWORD *)int v26 = v32;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v11 = result;
LABEL_2:
  int v12 = v11;
  while (1)
  {
    int v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            int *v12 = v71;
            *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                int *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              int *v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              int *v12 = v75;
            }
            *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v73;
          }
          return result;
        case 4uLL:
          unint64_t v76 = v12 + 1;
          uint64_t v77 = (int *)v12[1];
          double v78 = v12 + 2;
          int v79 = v12[2];
          double v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              int *v78 = v94;
              *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                void v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  int *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            int *v78 = (int)v77;
            uint64_t v81 = v12;
            unsigned int v82 = v12 + 1;
            double result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v81 = v12;
            unsigned int v82 = v12 + 2;
            double result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              int *v12 = (int)v77;
              v12[1] = (int)v80;
              uint64_t v81 = v12 + 1;
              unsigned int v82 = v12 + 2;
              double result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *uint64_t v81 = v79;
          _DWORD *v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *unint64_t v16 = v17;
          goto LABEL_32;
        }
        *unint64_t v16 = v20;
        int *v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          int *v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      int *v12 = v17;
      *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unint64_t v16 = *v12;
      int *v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        double v63 = v12 + 1;
        do
        {
          int v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        uint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          int *v12 = v67;
          *uint64_t v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      unint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *int v11 = *v70;
      }
      a5 = 0;
      int *v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *unint64_t v16 = v17;
          *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            int *v12 = *v16;
            *unint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          int *v12 = v18;
          *unint64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *unint64_t v16 = v25;
        }
        else
        {
          int *v12 = v17;
        }
        *((_DWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v19;
      }
LABEL_24:
      int v26 = &v12[v15];
      int v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *uint64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *uint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *uint64_t v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *uint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      int64_t v35 = &v12[v15];
      int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          int *v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            void v12[2] = *v36;
            int *v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          void v12[2] = v37;
          int *v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          int *v36 = v42;
        }
        else
        {
          void v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *unint64_t v16 = v45;
        int *v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          *uint64_t v27 = v45;
          int *v36 = v44;
LABEL_55:
          int v47 = *v12;
          int *v12 = v43;
          *unint64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        int *v12 = v45;
        *unint64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      *uint64_t v27 = v43;
      *unint64_t v16 = v44;
      uint64_t v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      int *v12 = v44;
      *unint64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      uint64_t v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        double v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        int *v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      uint64_t v55 = &v12[v48];
      uint64_t v56 = (int *)v51;
      do
      {
        int *v55 = v54;
        int *v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      double v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *double v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(v12, v59);
      int v12 = v59 + 1;
      double result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        double result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v59 + 1;
      }
    }
  }
  int v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        uint64_t v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              uint64_t v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          uint64_t v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          int *v88 = v89;
        }
        int v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      int v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)int v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)int v83 = v95;
      }
      int v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        int *v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        int *v14 = v17;
        *unint64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unint64_t v16 = v31;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *uint64_t v4 = v5;
        int v7 = a1;
        int v8 = a1 + 1;
      }
      else
      {
        int v7 = a1;
        int v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        int v7 = a1 + 1;
        int v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      int *v7 = v3;
      *int v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

operations_research::glop::DualEdgeNorms *operations_research::glop::DualEdgeNorms::DualEdgeNorms(operations_research::glop::DualEdgeNorms *this, const operations_research::glop::BasisFactorization *a2)
{
  uint64_t v4 = operations_research::glop::DualEdgeNorms::Stats::Stats(this);
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v4 + 320, 0);
  *((void *)this + 77) = a2;
  *((void *)this + 78) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((unsigned char *)this + 648) = 1;
  return this;
}

void sub_23CB6C778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 240) = &unk_26F0BCDD8;
  if (*(char *)(v1 + 271) < 0) {
    operator delete(*(void **)(v1 + 248));
  }
  operations_research::glop::DualEdgeNorms::DualEdgeNorms(v1);
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::DualEdgeNorms::NeedsBasisRefactorization(operations_research::glop::DualEdgeNorms *this)
{
  return *((unsigned __int8 *)this + 648);
}

uint64_t operations_research::glop::DualEdgeNorms::Clear(uint64_t this)
{
  *(unsigned char *)(this + 648) = 1;
  return this;
}

void operations_research::glop::DualEdgeNorms::ResizeOnNewRows(uint64_t a1, int a2)
{
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 624);
  unint64_t v4 = (*(void *)(a1 + 632) - v3) >> 3;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<double>::__append(a1 + 624, v6, &v7);
  }
  else if (!v5)
  {
    *(void *)(a1 + 632) = v3 + 8 * v2;
  }
}

uint64_t operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms(operations_research::glop::DualEdgeNorms *this)
{
  if (*((unsigned char *)this + 648))
  {
    unint64_t v2 = **(int **)(*((void *)this + 77) + 464);
    uint64_t v8 = 0;
    uint64_t v3 = *((void *)this + 78);
    unint64_t v4 = (*((void *)this + 79) - v3) >> 3;
    if (v2 <= v4)
    {
      if (v2 < v4) {
        *((void *)this + 79) = v3 + 8 * v2;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 624, v2 - v4, &v8);
    }
    if ((int)v2 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        operations_research::glop::BasisFactorization::DualEdgeSquaredNorm(*((void *)this + 77), v5);
        *(void *)(*((void *)this + 78) + 8 * v5++) = v6;
      }
      while (v2 != v5);
    }
    *((unsigned char *)this + 648) = 0;
  }
  return (uint64_t)this + 624;
}

void operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 648)) {
    operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(a2, (char **)(a1 + 624));
  }
}

void operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(uint64_t *a1, char **a2)
{
  std::string __p = 0;
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  int64_t v6 = v4 - *a2;
  unint64_t v7 = v6 >> 3;
  if (v4 == *a2)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v4 - *a2);
    int v9 = (uint64_t *)&v8[8 * v7];
    std::string __p = v8;
    memcpy(v8, v5, v6);
    unint64_t v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
    {
LABEL_14:
      if (!v8) {
        return;
      }
      goto LABEL_15;
    }
  }
  unint64_t v11 = (int)(((char *)v9 - v8) >> 3);
  if (v11 <= v7)
  {
    if (v11 < v7) {
      a2[1] = &v5[8 * v11];
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)a2, v11 - v7, v9 - 1);
    uint64_t v8 = __p;
  }
  if ((int)(v10 >> 2) < 1) {
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  unint64_t v14 = *a2;
  do
  {
    *(void *)&v14[8 * *(int *)(v13 + 4 * v12)] = *(void *)&v8[8 * v12];
    ++v12;
  }
  while ((v10 >> 2) != v12);
LABEL_15:

  operator delete(v8);
}

void sub_23CB6CA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(uint64_t a1, int a2, int a3, uint64_t *a4, char **a5)
{
  if (!*(unsigned char *)(a1 + 648))
  {
    int v9 = (uint64_t *)operations_research::glop::BasisFactorization::RightSolveForTau(*(operations_research::glop::BasisFactorization **)(a1 + 616), a5);
    double v11 = operations_research::glop::PreciseSquaredNorm((operations_research::glop *)a5, v10);
    double v12 = sqrt(v11);
    double v13 = sqrt(*(double *)(*(void *)(a1 + 624) + 8 * a3));
    operations_research::RatioDistribution::Add(a1 + 160, (v12 - v13) / v12);
    if (fabs((v12 - v13) / v12) <= *(double *)(a1 + 384))
    {
      uint64_t v16 = *a4;
      double v17 = *(double *)(*a4 + 8 * a3);
      double v18 = v11 / (v17 * v17);
      int v19 = (int *)a4[4];
      uint64_t v20 = a4[5] - (void)v19;
      uint64_t v21 = *(void *)(a1 + 624);
      if (v20 >= 1)
      {
        uint64_t v22 = (unint64_t)v20 >> 2;
        uint64_t v23 = *v9;
        if (v22 <= 1) {
          uint64_t v22 = 1;
        }
        double v24 = -2.0 / v17;
        do
        {
          uint64_t v26 = *v19++;
          int v25 = v26;
          uint64_t v27 = 8 * v26;
          double v28 = *(double *)(v21 + 8 * v26)
              + *(double *)(v16 + 8 * v26) * (v24 * *(double *)(v23 + 8 * v26) + *(double *)(v16 + 8 * v26) * v18);
          if (v28 < 0.0001 && v25 != a3) {
            double v28 = 0.0001;
          }
          *(double *)(v21 + v27) = v28;
          --v22;
        }
        while (v22);
      }
      *(double *)(v21 + 8 * a3) = v18;
    }
    else
    {
      if (*operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__[0] >= 1
        && (operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/dual_edge_norms.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v30, (google::glog_internal_namespace_ *)"./ortools/glop/dual_edge_norms.cc", 70);
        unint64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Recomputing edge norms: ", 24);
        int v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v30);
      }
      *(unsigned char *)(a1 + 648) = 1;
    }
  }
}

void sub_23CB6CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

operations_research::glop::DualEdgeNorms::Stats *operations_research::glop::DualEdgeNorms::Stats::Stats(operations_research::glop::DualEdgeNorms::Stats *this)
{
  strcpy((char *)this, "DualEdgeNorms");
  *((unsigned char *)this + 23) = 13;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  unint64_t v2 = (void *)((char *)this + 80);
  BYTE7(v4[1]) = 11;
  strcpy((char *)v4, "tau_density");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 80), v4, this);
  *unint64_t v2 = &unk_26F0C4998;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 19;
  strcpy((char *)v4, "edge_norms_accuracy");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 160), v4, this);
  *((void *)this + 20) = &unk_26F0C49F8;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  BYTE7(v4[1]) = 19;
  strcpy((char *)v4, "lower_bounded_norms");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 240), v4, this) = &unk_26F0C4A58;
  if (SBYTE7(v4[1]) < 0) {
    operator delete(*(void **)&v4[0]);
  }
  return this;
}

void sub_23CB6CE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 160) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*(void **)(v14 + 168));
  }
  *(void *)(v14 + 80) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*(void **)(v14 + 88));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::EnteringVariable::EnteringVariable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 32, 0);
  *(_DWORD *)(a1 + 328) = 0;
  strcpy((char *)(a1 + 336), "EnteringVariable");
  *(unsigned char *)(a1 + 359) = 16;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 400;
  char v8 = 16;
  strcpy(__p, "num_perfect_ties");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::Stat *)(a1 + 416), (long long *)__p, (operations_research::StatsGroup *)(a1 + 336)) = &unk_26F0C4A58;
  if (v8 < 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = a1 + 496;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

void sub_23CB6D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operations_research::StatsGroup::~StatsGroup(v15);
  operations_research::glop::GlopParameters::~GlopParameters(v14);
  _Unwind_Resume(a1);
}

void operations_research::glop::EnteringVariable::PrimalChooseEnteringColumn(operations_research::glop::EnteringVariable *this@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_23CE7E3F0;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 39, 2);
    char v8 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v16 = __p;
    }
    operations_research::glop::Status::Status(a3, 3, (long long *)&v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  int v6 = *((_DWORD *)this + 82);
  switch(v6)
  {
    case 2:
      operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<false>((uint64_t)this, a2);
      goto LABEL_21;
    case 1:
      operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>((uint64_t)this, a2);
      goto LABEL_21;
    case 0:
      if (*((unsigned char *)this + 129))
      {
        if (*((_DWORD *)this + 124) != *(_DWORD *)(**(void **)this + 4)) {
          operations_research::glop::EnteringVariable::ResetUnusedColumns((operations_research::glop::VariablesInfo **)this);
        }
        if (*((unsigned char *)this + 128))
        {
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>((uint64_t)this, a2);
          unint64_t v7 = *a2;
          if (v7 != -1)
          {
LABEL_10:
            *(void *)(*((void *)this + 63) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v7);
            goto LABEL_21;
          }
        }
        else
        {
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>((uint64_t)this, a2);
          unint64_t v7 = *a2;
          if (v7 != -1) {
            goto LABEL_10;
          }
        }
        operations_research::glop::EnteringVariable::ResetUnusedColumns((operations_research::glop::VariablesInfo **)this);
        if (*((unsigned char *)this + 128)) {
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>((uint64_t)this, a2);
        }
        else {
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>((uint64_t)this, a2);
        }
      }
      else if (*((unsigned char *)this + 128))
      {
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,false>((uint64_t)this, a2);
      }
      else
      {
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,false>((uint64_t)this, a2);
      }
LABEL_21:
      operations_research::glop::Status::Status(a3);
      return;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 82, 2);
  double v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
  double v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown pricing rule: ", 22);
  operations_research::ProtoEnumToString<operations_research::glop::GlopParameters_PricingRule>((operations_research::glop *)*((unsigned int *)this + 82), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v13 = &__p;
  }
  else {
    double v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)". Using steepest edge.", 22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)v17);
  operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>((uint64_t)this, a2);
  operations_research::glop::Status::Status(a3);
}

void sub_23CB6D38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

operations_research::glop::VariablesInfo **operations_research::glop::EnteringVariable::ResetUnusedColumns(operations_research::glop::VariablesInfo **this)
{
  unint64_t v2 = *this;
  uint64_t v3 = *(unsigned int *)(*(void *)v2 + 4);
  if (*((_DWORD *)this + 124) != v3)
  {
    int v4 = v3 & ~((int)v3 >> 31);
    *((_DWORD *)this + 124) = v4;
    unint64_t v5 = (v4 + 63) >> 6;
    int v6 = this[63];
    uint64_t v7 = this[64] - v6;
    unint64_t v8 = v7 >> 3;
    uint64_t v19 = 0;
    if (v5 <= v7 >> 3)
    {
      if (v5 < v7 >> 3) {
        this[64] = (operations_research::glop::VariablesInfo *)((char *)v6 + 8 * v5);
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(this + 63), v5 - (v7 >> 3), &v19);
      int v6 = this[63];
    }
    if (v5 >= v8) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v5;
    }
    bzero(v6, 8 * v9);
    unint64_t v2 = *this;
  }
  uint64_t IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow(v2);
  if ((int)v3 >= 1)
  {
    unint64_t v11 = 0;
    double v12 = this[63];
    uint64_t v13 = *(void *)(IsBasicBitRow + 8);
    do
    {
      unint64_t v15 = v11 >> 6;
      uint64_t v16 = *((void *)v12 + (v11 >> 6));
      uint64_t v17 = 1 << v11;
      if ((v16 & (1 << v11)) != 0)
      {
        uint64_t v14 = v16 & ~v17;
      }
      else
      {
        if ((*(void *)(v13 + 8 * v15) & v17) != 0) {
          goto LABEL_14;
        }
        uint64_t v14 = v16 | v17;
      }
      *((void *)v12 + v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v14;
LABEL_14:
      ++v11;
    }
    while (v3 != v11);
  }
  return this + 62;
}

uint64_t operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>(uint64_t a1, int *a2)
{
  MatrixColumnNorms = operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  uint64_t result = operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  int v6 = -1;
  *a2 = -1;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(unint64_t **)(v7 + 840);
  unint64_t v9 = *(unint64_t **)(v7 + 848);
  if (v8 == v9)
  {
    unint64_t v12 = 0;
    int v11 = 0;
    goto LABEL_18;
  }
  unint64_t v10 = *v8;
  if (*v8)
  {
    int v11 = 0;
  }
  else
  {
    unint64_t v13 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    uint64_t v14 = (int)(v9 - v8);
    if ((int)v13 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    }
    if (v14 <= 1) {
      uint64_t v14 = 1;
    }
    uint64_t v16 = v14 - 1;
    while (v16 != v10)
    {
      int v17 = v10 + 1;
      if (v8[++v10])
      {
        int v15 = v17;
        break;
      }
    }
    if (v15 == v13)
    {
      unint64_t v12 = 0;
      int v11 = 0;
      int v6 = -1;
      goto LABEL_18;
    }
    unint64_t v10 = v8[v15];
    int v11 = v15 << 6;
  }
  int v6 = __clz(__rbit64(v10)) & 0x3F | v11;
  unint64_t v12 = (v10 - 1) & v10;
LABEL_18:
  int v19 = *(_DWORD *)(v7 + 872);
  if (v6 != v19)
  {
    uint64_t v20 = *(void *)(a1 + 504);
    uint64_t v21 = *(void *)result;
    uint64_t v22 = *(void *)MatrixColumnNorms;
    uint64_t v23 = (char *)v9 - (char *)v8;
    unint64_t v24 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    uint64_t v25 = (int)(v23 >> 3);
    double v26 = 0.0;
    while (1)
    {
      if ((*(void *)(v20 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6))
      {
        uint64_t v27 = 8 * v6;
        double v28 = fabs(*(double *)(v21 + v27));
        double v29 = *(double *)(v22 + v27);
        if (v28 > v26 * v29)
        {
          *a2 = v6;
          double v26 = v28 / v29;
        }
      }
      if (v12) {
        goto LABEL_22;
      }
      uint64_t result = (uint64_t)v11 >> 6;
      if ((v11 >> 6) + 1 > (int)v24) {
        int v30 = (v11 >> 6) + 1;
      }
      else {
        int v30 = v24;
      }
      uint64_t v31 = result + 1;
      while (v31 < v25)
      {
        uint64_t result = v8[v31++];
        if (result)
        {
          int v30 = v31 - 1;
          break;
        }
      }
      if (v30 == v24)
      {
        unint64_t v12 = 0;
        int v6 = -1;
        if (v19 == -1) {
          return result;
        }
      }
      else
      {
        unint64_t v12 = v8[v30];
        int v11 = v30 << 6;
LABEL_22:
        int v6 = (__clz(__rbit64(v12)) & 0x3F) + v11;
        uint64_t result = v12 - 1;
        v12 &= v12 - 1;
        if (v6 == v19) {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>(uint64_t a1, int *a2)
{
  uint64_t result = operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  int v5 = -1;
  *a2 = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unint64_t **)(v6 + 840);
  unint64_t v8 = *(unint64_t **)(v6 + 848);
  if (v7 == v8)
  {
    unint64_t v11 = 0;
    int v10 = 0;
    goto LABEL_18;
  }
  unint64_t v9 = *v7;
  if (*v7)
  {
    int v10 = 0;
  }
  else
  {
    unint64_t v12 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v13 = (int)(v8 - v7);
    if ((int)v12 <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    }
    if (v13 <= 1) {
      uint64_t v13 = 1;
    }
    uint64_t v15 = v13 - 1;
    while (v15 != v9)
    {
      int v16 = v9 + 1;
      if (v7[++v9])
      {
        int v14 = v16;
        break;
      }
    }
    if (v14 == v12)
    {
      unint64_t v11 = 0;
      int v10 = 0;
      int v5 = -1;
      goto LABEL_18;
    }
    unint64_t v9 = v7[v14];
    int v10 = v14 << 6;
  }
  int v5 = __clz(__rbit64(v9)) & 0x3F | v10;
  unint64_t v11 = (v9 - 1) & v9;
LABEL_18:
  int v18 = *(_DWORD *)(v6 + 872);
  if (v5 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 504);
    uint64_t v20 = *(void *)result;
    uint64_t v21 = (char *)v8 - (char *)v7;
    unint64_t v22 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v23 = (int)(v21 >> 3);
    double v24 = 0.0;
    while (1)
    {
      uint64_t result = *(void *)(v19 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5;
      if (result)
      {
        double v25 = fabs(*(double *)(v20 + 8 * v5));
        if (v25 > v24)
        {
          *a2 = v5;
          double v24 = v25;
        }
      }
      if (v11) {
        goto LABEL_22;
      }
      if ((v10 >> 6) + 1 > (int)v22) {
        int v26 = (v10 >> 6) + 1;
      }
      else {
        int v26 = v22;
      }
      uint64_t v27 = ((uint64_t)v10 >> 6) + 1;
      while (v27 < v23)
      {
        if (v7[v27++])
        {
          int v26 = v27 - 1;
          break;
        }
      }
      if (v26 == v22)
      {
        unint64_t v11 = 0;
        int v5 = -1;
        if (v18 == -1) {
          return result;
        }
      }
      else
      {
        unint64_t v11 = v7[v26];
        int v10 = v26 << 6;
LABEL_22:
        int v5 = (__clz(__rbit64(v11)) & 0x3F) + v10;
        v11 &= v11 - 1;
        if (v5 == v18) {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t *operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,false>(uint64_t a1, int *a2)
{
  MatrixColumnNorms = operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  uint64_t result = (uint64_t *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  int v6 = -1;
  *a2 = -1;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(unint64_t **)(v7 + 840);
  unint64_t v9 = *(unint64_t **)(v7 + 848);
  if (v8 == v9)
  {
    unint64_t v12 = 0;
    int v11 = 0;
    goto LABEL_18;
  }
  unint64_t v10 = *v8;
  if (*v8)
  {
    int v11 = 0;
  }
  else
  {
    unint64_t v13 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    uint64_t v14 = (int)(v9 - v8);
    if ((int)v13 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    }
    if (v14 <= 1) {
      uint64_t v14 = 1;
    }
    uint64_t v16 = v14 - 1;
    while (v16 != v10)
    {
      int v17 = v10 + 1;
      if (v8[++v10])
      {
        int v15 = v17;
        break;
      }
    }
    if (v15 == v13)
    {
      unint64_t v12 = 0;
      int v11 = 0;
      int v6 = -1;
      goto LABEL_18;
    }
    unint64_t v10 = v8[v15];
    int v11 = v15 << 6;
  }
  int v6 = __clz(__rbit64(v10)) & 0x3F | v11;
  unint64_t v12 = (v10 - 1) & v10;
LABEL_18:
  int v19 = *(_DWORD *)(v7 + 872);
  if (v6 != v19)
  {
    uint64_t v20 = *result;
    uint64_t v21 = *(void *)MatrixColumnNorms;
    uint64_t v22 = (char *)v9 - (char *)v8;
    unint64_t v23 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    uint64_t v24 = (int)(v22 >> 3);
    double v25 = 0.0;
    while (1)
    {
      uint64_t v26 = 8 * v6;
      double v27 = fabs(*(double *)(v20 + v26));
      double v28 = *(double *)(v21 + v26);
      if (v27 > v25 * v28)
      {
        *a2 = v6;
        double v25 = v27 / v28;
      }
      if (v12) {
        goto LABEL_22;
      }
      if ((v11 >> 6) + 1 > (int)v23) {
        int v29 = (v11 >> 6) + 1;
      }
      else {
        int v29 = v23;
      }
      uint64_t v30 = ((uint64_t)v11 >> 6) + 1;
      while (v30 < v24)
      {
        if (v8[v30++])
        {
          int v29 = v30 - 1;
          break;
        }
      }
      if (v29 == v23)
      {
        unint64_t v12 = 0;
        int v6 = -1;
        if (v19 == -1) {
          return result;
        }
      }
      else
      {
        unint64_t v12 = v8[v29];
        int v11 = v29 << 6;
LABEL_22:
        int v6 = (__clz(__rbit64(v12)) & 0x3F) + v11;
        v12 &= v12 - 1;
        if (v6 == v19) {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t *operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,false>(uint64_t a1, int *a2)
{
  uint64_t result = (uint64_t *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  int v5 = -1;
  *a2 = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unint64_t **)(v6 + 840);
  unint64_t v8 = *(unint64_t **)(v6 + 848);
  if (v7 == v8)
  {
    unint64_t v11 = 0;
    int v10 = 0;
    goto LABEL_18;
  }
  unint64_t v9 = *v7;
  if (*v7)
  {
    int v10 = 0;
  }
  else
  {
    unint64_t v12 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v13 = (int)(v8 - v7);
    if ((int)v12 <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    }
    if (v13 <= 1) {
      uint64_t v13 = 1;
    }
    uint64_t v15 = v13 - 1;
    while (v15 != v9)
    {
      int v16 = v9 + 1;
      if (v7[++v9])
      {
        int v14 = v16;
        break;
      }
    }
    if (v14 == v12)
    {
      unint64_t v11 = 0;
      int v10 = 0;
      int v5 = -1;
      goto LABEL_18;
    }
    unint64_t v9 = v7[v14];
    int v10 = v14 << 6;
  }
  int v5 = __clz(__rbit64(v9)) & 0x3F | v10;
  unint64_t v11 = (v9 - 1) & v9;
LABEL_18:
  int v18 = *(_DWORD *)(v6 + 872);
  if (v5 != v18)
  {
    uint64_t v19 = *result;
    uint64_t v20 = (char *)v8 - (char *)v7;
    unint64_t v21 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    uint64_t v22 = (int)(v20 >> 3);
    double v23 = 0.0;
    while (1)
    {
      double v24 = fabs(*(double *)(v19 + 8 * v5));
      if (v24 > v23)
      {
        *a2 = v5;
        double v23 = v24;
      }
      if (v11) {
        goto LABEL_22;
      }
      if ((v10 >> 6) + 1 > (int)v21) {
        int v25 = (v10 >> 6) + 1;
      }
      else {
        int v25 = v21;
      }
      uint64_t v26 = ((uint64_t)v10 >> 6) + 1;
      while (v26 < v22)
      {
        if (v7[v26++])
        {
          int v25 = v26 - 1;
          break;
        }
      }
      if (v25 == v21)
      {
        unint64_t v11 = 0;
        int v5 = -1;
        if (v18 == -1) {
          return result;
        }
      }
      else
      {
        unint64_t v11 = v7[v25];
        int v10 = v25 << 6;
LABEL_22:
        int v5 = (__clz(__rbit64(v11)) & 0x3F) + v10;
        v11 &= v11 - 1;
        if (v5 == v18) {
          return result;
        }
      }
    }
  }
  return result;
}

void *operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>(uint64_t a1, int *a2)
{
  uint64_t v3 = a1;
  EdgeSquaredNorms = (void *)operations_research::glop::PrimalEdgeNorms::GetEdgeSquaredNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  uint64_t result = (void *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(v3 + 16));
  int v6 = -1;
  *a2 = -1;
  uint64_t v7 = *(char **)(v3 + 552);
  *(void *)(v3 + 560) = v7;
  uint64_t v8 = *(void *)(v3 + 16);
  unint64_t v9 = *(unint64_t **)(v8 + 840);
  int v10 = *(unint64_t **)(v8 + 848);
  if (v9 == v10)
  {
    unint64_t v13 = 0;
    int v12 = 0;
    int v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *v9;
    if (*v9)
    {
      int v12 = 0;
      goto LABEL_19;
    }
    uint64_t v15 = 0;
    unint64_t v16 = (char *)v10 - (char *)v9;
    unint64_t v17 = v16 >> 3;
    uint64_t v18 = (int)((uint64_t)v16 >> 3);
    if ((int)(v16 >> 3) <= 1) {
      int v19 = 1;
    }
    else {
      int v19 = v16 >> 3;
    }
    if (v18 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v20 = v18 - 1;
    while (v20 != v15)
    {
      int v21 = v15 + 1;
      if (v9[++v15])
      {
        int v19 = v21;
        break;
      }
    }
    if (v19 != v17)
    {
      unint64_t v11 = v9[v19];
      int v12 = v19 << 6;
LABEL_19:
      int v6 = __clz(__rbit64(v11)) & 0x3F | v12;
      unint64_t v13 = (v11 - 1) & v11;
      int v14 = *(_DWORD *)(v8 + 872);
      if (v6 == v14) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v13 = 0;
    int v12 = 0;
    int v6 = -1;
    int v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1) {
      return result;
    }
  }
LABEL_20:
  int v79 = (void **)(v3 + 552);
  double v23 = 0.0;
  unint64_t v76 = result;
  uint64_t v77 = a2;
  uint64_t v75 = *(void *)(v3 + 16);
  int v78 = v14;
  do
  {
    while (1)
    {
      uint64_t v24 = 8 * v6;
      double v25 = *(double *)(*result + v24) * *(double *)(*result + v24);
      double v26 = *(double *)(*EdgeSquaredNorms + v24);
      if (v25 < v23 * v26) {
        goto LABEL_21;
      }
      if (v25 != v23 * v26)
      {
        uint64_t v7 = *(char **)(v3 + 552);
        *(void *)(v3 + 560) = v7;
        *a2 = v6;
        double v23 = v25 / v26;
        goto LABEL_21;
      }
      unint64_t v27 = *(void *)(v3 + 568);
      if ((unint64_t)v7 >= v27)
      {
        uint64_t v36 = EdgeSquaredNorms;
        uint64_t v37 = v3;
        int v38 = (char *)*v79;
        uint64_t v39 = v7 - (unsigned char *)*v79;
        uint64_t v40 = v39 >> 2;
        unint64_t v41 = (v39 >> 2) + 1;
        if (v41 >> 62) {
          goto LABEL_90;
        }
        uint64_t v42 = v27 - (void)v38;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v80 = v41;
        if (v41)
        {
          if (v41 >> 62) {
            goto LABEL_91;
          }
          int v43 = operator new(4 * v41);
          int v44 = (int *)&v43[4 * v40];
          *int v44 = v6;
          uint64_t v28 = (uint64_t)(v44 + 1);
          if (v7 != v38) {
            goto LABEL_47;
          }
        }
        else
        {
          int v43 = 0;
          int v44 = (int *)(4 * v40);
          *(_DWORD *)(4 * v40) = v6;
          uint64_t v28 = 4 * v40 + 4;
          if (v7 != v38)
          {
LABEL_47:
            unint64_t v45 = v7 - 4 - v38;
            if (v45 < 0xBC
              || &v43[v39 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v43[v39 - 4]
              || &v7[-(v45 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
              || (unint64_t)(v7 - v43 - v39) < 0x20)
            {
              int v46 = v7;
              uint64_t v3 = v37;
              EdgeSquaredNorms = v36;
              int v14 = v78;
            }
            else
            {
              uint64_t v48 = (v45 >> 2) + 1;
              uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
              int v46 = &v7[-v49];
              int v44 = (int *)((char *)v44 - v49);
              uint64_t v50 = &v43[4 * v40 - 16];
              uint64_t v51 = v7 - 16;
              uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v3 = v37;
              do
              {
                long long v53 = *(_OWORD *)v51;
                *(v50 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v51 - 1);
                _OWORD *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              EdgeSquaredNorms = v36;
              int v14 = v78;
              if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_53;
              }
            }
            do
            {
              int v47 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--int v44 = v47;
            }
            while (v46 != v38);
LABEL_53:
            *(void *)(v3 + 552) = v44;
            *(void *)(v3 + 560) = v28;
            *(void *)(v3 + 568) = &v43[4 * v80];
            uint64_t v8 = v75;
            if (v38) {
              operator delete(v38);
            }
            uint64_t result = v76;
            a2 = v77;
            goto LABEL_56;
          }
        }
        uint64_t v3 = v37;
        EdgeSquaredNorms = v36;
        int v14 = v78;
        goto LABEL_53;
      }
      *(_DWORD *)uint64_t v7 = v6;
      uint64_t v28 = (uint64_t)(v7 + 4);
LABEL_56:
      *(void *)(v3 + 560) = v28;
      uint64_t v7 = (char *)v28;
LABEL_21:
      if (!v13) {
        break;
      }
LABEL_22:
      int v6 = (__clz(__rbit64(v13)) & 0x3F) + v12;
      v13 &= v13 - 1;
      if (v6 == v14) {
        goto LABEL_64;
      }
    }
    uint64_t v29 = *(void *)(v8 + 840);
    uint64_t v30 = *(void *)(v8 + 848) - v29;
    unint64_t v31 = (unint64_t)v30 >> 3;
    uint64_t v32 = (int)(v30 >> 3);
    if ((v12 >> 6) + 1 > (int)v31) {
      int v33 = (v12 >> 6) + 1;
    }
    else {
      int v33 = v31;
    }
    uint64_t v34 = ((uint64_t)v12 >> 6) + 1;
    while (v34 < v32)
    {
      if (*(void *)(v29 + 8 * v34++))
      {
        int v33 = v34 - 1;
        break;
      }
    }
    if (v33 != v31)
    {
      unint64_t v13 = *(void *)(v29 + 8 * v33);
      int v12 = v33 << 6;
      goto LABEL_22;
    }
    unint64_t v13 = 0;
    int v6 = -1;
  }
  while (v14 != -1);
LABEL_64:
  int v54 = *v79;
  if (*v79 != v7)
  {
    unint64_t v55 = *(void *)(v3 + 568);
    if ((unint64_t)v7 < v55)
    {
      *(_DWORD *)uint64_t v7 = *a2;
      uint64_t v56 = v7 + 4;
      goto LABEL_84;
    }
    uint64_t v57 = v3;
    int64_t v58 = v7 - v54;
    uint64_t v59 = (v7 - v54) >> 2;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62) {
LABEL_90:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v61 = v55 - (void)v54;
    if (v61 >> 1 > v60) {
      unint64_t v60 = v61 >> 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      if (v62 >> 62) {
LABEL_91:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      double v63 = operator new(4 * v62);
      uint64_t v64 = (int *)&v63[4 * v59];
      *uint64_t v64 = *a2;
      unint64_t v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
      {
LABEL_79:
        int v66 = v7;
        int v67 = v64;
        uint64_t v3 = v57;
        goto LABEL_80;
      }
    }
    else
    {
      double v63 = 0;
      uint64_t v64 = (int *)(4 * v59);
      *(_DWORD *)(4 * v59) = *a2;
      unint64_t v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C) {
        goto LABEL_79;
      }
    }
    if ((unint64_t)(v54 - v63) < 0x20) {
      goto LABEL_79;
    }
    uint64_t v69 = (v65 >> 2) + 1;
    uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    int v66 = &v7[-v70];
    int v67 = &v64[v70 / 0xFFFFFFFFFFFFFFFCLL];
    int v71 = &v63[4 * v59 - 16];
    int v72 = v7 - 16;
    uint64_t v73 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v74 = *(_OWORD *)v72;
      *(v71 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v72 - 1);
      _OWORD *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    uint64_t v3 = v57;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_80:
        int v68 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--int v67 = v68;
      }
      while (v66 != v54);
    }
    *(void *)(v3 + 552) = v67;
    uint64_t v56 = (char *)(v64 + 1);
    *(void *)(v3 + 560) = v64 + 1;
    *(void *)(v3 + 568) = &v63[4 * v62];
    if (v54)
    {
      operator delete(v54);
      int v54 = *v79;
    }
    else
    {
      int v54 = v67;
    }
LABEL_84:
    *(void *)(v3 + 560) = v56;
    v81[0] = 0;
    v81[1] = ((unint64_t)(v56 - v54) >> 2) - 1;
    uint64_t result = (void *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v81, *(void *)(v3 + 8), v81);
    *a2 = *(_DWORD *)(*(void *)(v3 + 552) + 4 * (int)result);
  }
  return result;
}

void *operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<false>(uint64_t a1, int *a2)
{
  uint64_t v3 = a1;
  DevexWeights = (void *)operations_research::glop::PrimalEdgeNorms::GetDevexWeights(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  uint64_t result = (void *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(v3 + 16));
  int v6 = -1;
  *a2 = -1;
  uint64_t v7 = *(char **)(v3 + 552);
  *(void *)(v3 + 560) = v7;
  uint64_t v8 = *(void *)(v3 + 16);
  unint64_t v9 = *(unint64_t **)(v8 + 840);
  int v10 = *(unint64_t **)(v8 + 848);
  if (v9 == v10)
  {
    unint64_t v13 = 0;
    int v12 = 0;
    int v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *v9;
    if (*v9)
    {
      int v12 = 0;
      goto LABEL_19;
    }
    uint64_t v15 = 0;
    unint64_t v16 = (char *)v10 - (char *)v9;
    unint64_t v17 = v16 >> 3;
    uint64_t v18 = (int)((uint64_t)v16 >> 3);
    if ((int)(v16 >> 3) <= 1) {
      int v19 = 1;
    }
    else {
      int v19 = v16 >> 3;
    }
    if (v18 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v20 = v18 - 1;
    while (v20 != v15)
    {
      int v21 = v15 + 1;
      if (v9[++v15])
      {
        int v19 = v21;
        break;
      }
    }
    if (v19 != v17)
    {
      unint64_t v11 = v9[v19];
      int v12 = v19 << 6;
LABEL_19:
      int v6 = __clz(__rbit64(v11)) & 0x3F | v12;
      unint64_t v13 = (v11 - 1) & v11;
      int v14 = *(_DWORD *)(v8 + 872);
      if (v6 == v14) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v13 = 0;
    int v12 = 0;
    int v6 = -1;
    int v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1) {
      return result;
    }
  }
LABEL_20:
  int v79 = (void **)(v3 + 552);
  double v23 = 0.0;
  unint64_t v76 = result;
  uint64_t v77 = a2;
  uint64_t v75 = *(void *)(v3 + 16);
  int v78 = v14;
  do
  {
    while (1)
    {
      uint64_t v24 = 8 * v6;
      double v25 = fabs(*(double *)(*result + v24));
      double v26 = *(double *)(*DevexWeights + v24);
      if (v25 < v23 * v26) {
        goto LABEL_21;
      }
      if (v25 != v23 * v26)
      {
        uint64_t v7 = *(char **)(v3 + 552);
        *(void *)(v3 + 560) = v7;
        *a2 = v6;
        double v23 = v25 / v26;
        goto LABEL_21;
      }
      unint64_t v27 = *(void *)(v3 + 568);
      if ((unint64_t)v7 >= v27)
      {
        uint64_t v36 = DevexWeights;
        uint64_t v37 = v3;
        int v38 = (char *)*v79;
        uint64_t v39 = v7 - (unsigned char *)*v79;
        uint64_t v40 = v39 >> 2;
        unint64_t v41 = (v39 >> 2) + 1;
        if (v41 >> 62) {
          goto LABEL_90;
        }
        uint64_t v42 = v27 - (void)v38;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v80 = v41;
        if (v41)
        {
          if (v41 >> 62) {
            goto LABEL_91;
          }
          int v43 = operator new(4 * v41);
          int v44 = (int *)&v43[4 * v40];
          *int v44 = v6;
          uint64_t v28 = (uint64_t)(v44 + 1);
          if (v7 != v38) {
            goto LABEL_47;
          }
        }
        else
        {
          int v43 = 0;
          int v44 = (int *)(4 * v40);
          *(_DWORD *)(4 * v40) = v6;
          uint64_t v28 = 4 * v40 + 4;
          if (v7 != v38)
          {
LABEL_47:
            unint64_t v45 = v7 - 4 - v38;
            if (v45 < 0xBC
              || &v43[v39 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v43[v39 - 4]
              || &v7[-(v45 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
              || (unint64_t)(v7 - v43 - v39) < 0x20)
            {
              int v46 = v7;
              uint64_t v3 = v37;
              DevexWeights = v36;
              int v14 = v78;
            }
            else
            {
              uint64_t v48 = (v45 >> 2) + 1;
              uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
              int v46 = &v7[-v49];
              int v44 = (int *)((char *)v44 - v49);
              uint64_t v50 = &v43[4 * v40 - 16];
              uint64_t v51 = v7 - 16;
              uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v3 = v37;
              do
              {
                long long v53 = *(_OWORD *)v51;
                *(v50 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v51 - 1);
                _OWORD *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              DevexWeights = v36;
              int v14 = v78;
              if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_53;
              }
            }
            do
            {
              int v47 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--int v44 = v47;
            }
            while (v46 != v38);
LABEL_53:
            *(void *)(v3 + 552) = v44;
            *(void *)(v3 + 560) = v28;
            *(void *)(v3 + 568) = &v43[4 * v80];
            uint64_t v8 = v75;
            if (v38) {
              operator delete(v38);
            }
            uint64_t result = v76;
            a2 = v77;
            goto LABEL_56;
          }
        }
        uint64_t v3 = v37;
        DevexWeights = v36;
        int v14 = v78;
        goto LABEL_53;
      }
      *(_DWORD *)uint64_t v7 = v6;
      uint64_t v28 = (uint64_t)(v7 + 4);
LABEL_56:
      *(void *)(v3 + 560) = v28;
      uint64_t v7 = (char *)v28;
LABEL_21:
      if (!v13) {
        break;
      }
LABEL_22:
      int v6 = (__clz(__rbit64(v13)) & 0x3F) + v12;
      v13 &= v13 - 1;
      if (v6 == v14) {
        goto LABEL_64;
      }
    }
    uint64_t v29 = *(void *)(v8 + 840);
    uint64_t v30 = *(void *)(v8 + 848) - v29;
    unint64_t v31 = (unint64_t)v30 >> 3;
    uint64_t v32 = (int)(v30 >> 3);
    if ((v12 >> 6) + 1 > (int)v31) {
      int v33 = (v12 >> 6) + 1;
    }
    else {
      int v33 = v31;
    }
    uint64_t v34 = ((uint64_t)v12 >> 6) + 1;
    while (v34 < v32)
    {
      if (*(void *)(v29 + 8 * v34++))
      {
        int v33 = v34 - 1;
        break;
      }
    }
    if (v33 != v31)
    {
      unint64_t v13 = *(void *)(v29 + 8 * v33);
      int v12 = v33 << 6;
      goto LABEL_22;
    }
    unint64_t v13 = 0;
    int v6 = -1;
  }
  while (v14 != -1);
LABEL_64:
  int v54 = *v79;
  if (*v79 != v7)
  {
    unint64_t v55 = *(void *)(v3 + 568);
    if ((unint64_t)v7 < v55)
    {
      *(_DWORD *)uint64_t v7 = *a2;
      uint64_t v56 = v7 + 4;
      goto LABEL_84;
    }
    uint64_t v57 = v3;
    int64_t v58 = v7 - v54;
    uint64_t v59 = (v7 - v54) >> 2;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62) {
LABEL_90:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v61 = v55 - (void)v54;
    if (v61 >> 1 > v60) {
      unint64_t v60 = v61 >> 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      if (v62 >> 62) {
LABEL_91:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      double v63 = operator new(4 * v62);
      uint64_t v64 = (int *)&v63[4 * v59];
      *uint64_t v64 = *a2;
      unint64_t v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
      {
LABEL_79:
        int v66 = v7;
        int v67 = v64;
        uint64_t v3 = v57;
        goto LABEL_80;
      }
    }
    else
    {
      double v63 = 0;
      uint64_t v64 = (int *)(4 * v59);
      *(_DWORD *)(4 * v59) = *a2;
      unint64_t v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C) {
        goto LABEL_79;
      }
    }
    if ((unint64_t)(v54 - v63) < 0x20) {
      goto LABEL_79;
    }
    uint64_t v69 = (v65 >> 2) + 1;
    uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    int v66 = &v7[-v70];
    int v67 = &v64[v70 / 0xFFFFFFFFFFFFFFFCLL];
    int v71 = &v63[4 * v59 - 16];
    int v72 = v7 - 16;
    uint64_t v73 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v74 = *(_OWORD *)v72;
      *(v71 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v72 - 1);
      _OWORD *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    uint64_t v3 = v57;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_80:
        int v68 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--int v67 = v68;
      }
      while (v66 != v54);
    }
    *(void *)(v3 + 552) = v67;
    uint64_t v56 = (char *)(v64 + 1);
    *(void *)(v3 + 560) = v64 + 1;
    *(void *)(v3 + 568) = &v63[4 * v62];
    if (v54)
    {
      operator delete(v54);
      int v54 = *v79;
    }
    else
    {
      int v54 = v67;
    }
LABEL_84:
    *(void *)(v3 + 560) = v56;
    v81[0] = 0;
    v81[1] = ((unint64_t)(v56 - v54) >> 2) - 1;
    uint64_t result = (void *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v81, *(void *)(v3 + 8), v81);
    *a2 = *(_DWORD *)(*(void *)(v3 + 552) + 4 * (int)result);
  }
  return result;
}

void operations_research::ProtoEnumToString<operations_research::glop::GlopParameters_PricingRule>(operations_research::glop *a1@<X0>, std::string *a2@<X8>)
{
  v19[6] = *MEMORY[0x263EF8340];
  int v4 = (google::protobuf::EnumDescriptor *)operations_research::glop::GlopParameters_PricingRule_descriptor(a1);
  uint64_t ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    uint64_t v7 = *(long long **)ValueByNumber;
    if (*(char *)(*(void *)ValueByNumber + 23) < 0)
    {
      unint64_t v13 = *(const std::string::value_type **)v7;
      std::string::size_type v14 = *((void *)v7 + 1);
      std::string::__init_copy_ctor_external(a2, v13, v14);
    }
    else
    {
      long long v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v19[0] = "Invalid enum value of: ";
    v19[1] = 23;
    unint64_t v9 = (operations_research::glop *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(a1, v18, v6);
    v17[0] = v18;
    v17[1] = v9 - (operations_research::glop *)v18;
    v16[0] = " for enum type: ";
    v16[1] = 16;
    int v10 = (void **)operations_research::glop::GlopParameters_PricingRule_descriptor(v9);
    unint64_t v11 = *v10;
    uint64_t v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      unint64_t v11 = (void *)**v10;
      uint64_t v12 = (*v10)[1];
    }
    v15[0] = v11;
    v15[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v19, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a2);
  }
}

void operations_research::glop::EnteringVariable::DualChooseEnteringColumn(operations_research::glop::UpdateRow *this@<X1>, uint64_t a2@<X0>, int **a3@<X2>, int *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  if (!a4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_23CE7E3F0;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v167, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 93, 2);
    uint64_t v73 = (void *)google::LogMessage::stream((google::LogMessage *)v167);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v167);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v166, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v166 = __p;
    }
    operations_research::glop::Status::Status(a6, 3, (long long *)&v166);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v139 = (void *)v166.__r_.__value_.__r.__words[0];
LABEL_171:
      operator delete(v139);
    }
LABEL_172:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (!a5)
  {
    strcpy((char *)&__p, "step must not be null.");
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 22;
    google::LogMessage::LogMessage((google::LogMessage *)v167, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 94, 2);
    unint64_t v76 = (void *)google::LogMessage::stream((google::LogMessage *)v167);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v77 = &__p;
    }
    else {
      uint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v78 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
    google::LogMessage::~LogMessage((google::LogMessage *)v167);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v165, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v165 = __p;
    }
    operations_research::glop::Status::Status(a6, 3, (long long *)&v165);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v139 = (void *)v165.__r_.__value_.__r.__words[0];
      goto LABEL_171;
    }
    goto LABEL_172;
  }
  Coefficients = (void *)operations_research::glop::UpdateRow::GetCoefficients(this);
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a2 + 16));
  uint64_t v162 = (double **)(a2 + 576);
  *(void *)(a2 + 584) = *(void *)(a2 + 576);
  NonZeroPositions = (void *)operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  uint64_t v15 = NonZeroPositions[1] - *NonZeroPositions;
  uint64_t v16 = v15 >> 2;
  unint64_t v17 = *(unsigned char **)(a2 + 576);
  uint64_t v160 = ReducedCosts;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 592) - (void)v17) >> 3) < v15 >> 2)
  {
    if ((unint64_t)v15 >= 0x2AAAAAAAAAAAAAA9) {
LABEL_200:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v18 = *(unsigned char **)(a2 + 584);
    uint64_t v19 = 24 * v16;
    uint64_t v20 = (char *)operator new(24 * v16);
    int v21 = &v20[24 * ((v18 - v17) / 24)];
    uint64_t v22 = v21;
    if (v18 != v17)
    {
      double v23 = &v20[24 * ((v18 - v17) / 24)];
      do
      {
        long long v24 = *(_OWORD *)(v18 - 24);
        uint64_t v22 = v23 - 24;
        *((void *)v23 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((void *)v18 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v18 -= 24;
        v23 -= 24;
      }
      while (v18 != v17);
    }
    *(void *)(a2 + 576) = v22;
    *(void *)(a2 + 584) = v21;
    *(void *)(a2 + 592) = &v20[v19];
    ReducedCosts = v160;
    if (v17) {
      operator delete(v17);
    }
  }
  double v158 = a5;
  uint64_t v156 = (operations_research::glop::Status *)a6;
  double v25 = *(double *)(a2 + 120);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  uint64_t NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(*(operations_research::glop::VariablesInfo **)a2);
  double v28 = *(double *)(a2 + 136) * *(double *)(*(void *)(a2 + 16) + 824);
  uint64_t v29 = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  uint64_t v30 = *(int **)v29;
  unint64_t v31 = *(int **)(v29 + 8);
  uint64_t v161 = NonBasicBoxedVariables;
  if (*(int **)v29 != v31)
  {
    double v32 = 1.79769313e308;
    do
    {
      int v34 = *v30;
      if (a7 <= 0.0) {
        double v35 = -*(double *)(*Coefficients + 8 * *v30);
      }
      else {
        double v35 = *(double *)(*Coefficients + 8 * v34);
      }
      unint64_t v36 = (unint64_t)v34 >> 6;
      uint64_t v37 = 1 << v34;
      if ((*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v36) & (1 << v34)) == 0 || v35 <= v25)
      {
        if ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v36) & v37) == 0 || v35 >= -v25) {
          goto LABEL_14;
        }
        double v40 = *(double *)(*ReducedCosts + 8 * v34);
        double v35 = -v35;
        if ((*(void *)(*(void *)(NonBasicBoxedVariables + 8) + 8 * v36) & v37) != 0)
        {
          unint64_t v41 = *(double **)(a2 + 584);
          unint64_t v42 = *(void *)(a2 + 592);
          double v43 = v40 / v35;
          if ((unint64_t)v41 >= v42) {
            goto LABEL_30;
          }
        }
        else
        {
          if (v40 > v32 * v35) {
            goto LABEL_14;
          }
          double v58 = (v28 + v40) / v35;
          if (v58 >= v32) {
            double v58 = v32;
          }
          double v32 = fmax(v58, 0.0);
          unint64_t v41 = *(double **)(a2 + 584);
          unint64_t v42 = *(void *)(a2 + 592);
          double v43 = v40 / v35;
          if ((unint64_t)v41 >= v42)
          {
LABEL_30:
            int v44 = *v162;
            unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v41 - *v162);
            unint64_t v46 = v45 + 1;
            if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_200;
            }
            unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)v44) >> 3);
            if (2 * v47 > v46) {
              unint64_t v46 = 2 * v47;
            }
            if (v47 >= 0x555555555555555) {
              unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              if (v48 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_201;
              }
              uint64_t v49 = (char *)operator new(24 * v48);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v59 = (double *)&v49[24 * v45];
            *(_DWORD *)uint64_t v59 = v34;
            v59[1] = v43;
            v59[2] = v35;
            unint64_t v60 = v59;
            if (v41 == v44) {
              goto LABEL_70;
            }
            uint64_t NonBasicBoxedVariables = v161;
            do
            {
              long long v62 = *(_OWORD *)(v41 - 3);
              *(v60 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v41 - 1);
              *(_OWORD *)(v60 - 3) = v62;
              v60 -= 3;
              v41 -= 3;
            }
            while (v41 != v44);
LABEL_69:
            unint64_t v41 = *v162;
LABEL_71:
            *(void *)(a2 + 576) = v60;
            int v33 = v59 + 3;
            *(void *)(a2 + 584) = v59 + 3;
            *(void *)(a2 + 592) = &v49[24 * v48];
            if (v41) {
              operator delete(v41);
            }
            ReducedCosts = v160;
            goto LABEL_13;
          }
        }
      }
      else
      {
        double v50 = *(double *)(*ReducedCosts + 8 * v34);
        double v51 = -v50;
        if ((*(void *)(*(void *)(NonBasicBoxedVariables + 8) + 8 * v36) & v37) != 0)
        {
          unint64_t v41 = *(double **)(a2 + 584);
          unint64_t v52 = *(void *)(a2 + 592);
          double v43 = v51 / v35;
          if ((unint64_t)v41 >= v52) {
            goto LABEL_41;
          }
        }
        else
        {
          if (v32 * v35 < v51) {
            goto LABEL_14;
          }
          double v57 = (v28 - v50) / v35;
          if (v57 >= v32) {
            double v57 = v32;
          }
          double v32 = fmax(v57, 0.0);
          unint64_t v41 = *(double **)(a2 + 584);
          unint64_t v52 = *(void *)(a2 + 592);
          double v43 = v51 / v35;
          if ((unint64_t)v41 >= v52)
          {
LABEL_41:
            long long v53 = *v162;
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v41 - *v162);
            unint64_t v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_200;
            }
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (void)v53) >> 3);
            if (2 * v56 > v55) {
              unint64_t v55 = 2 * v56;
            }
            if (v56 >= 0x555555555555555) {
              unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v48 = v55;
            }
            if (v48)
            {
              if (v48 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_201;
              }
              uint64_t v49 = (char *)operator new(24 * v48);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v59 = (double *)&v49[24 * v54];
            *(_DWORD *)uint64_t v59 = v34;
            v59[1] = v43;
            v59[2] = v35;
            unint64_t v60 = v59;
            if (v41 != v53)
            {
              uint64_t NonBasicBoxedVariables = v161;
              do
              {
                long long v61 = *(_OWORD *)(v41 - 3);
                *(v60 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v41 - 1);
                *(_OWORD *)(v60 - 3) = v61;
                v60 -= 3;
                v41 -= 3;
              }
              while (v41 != v53);
              goto LABEL_69;
            }
LABEL_70:
            uint64_t NonBasicBoxedVariables = v161;
            goto LABEL_71;
          }
        }
      }
      *(_DWORD *)unint64_t v41 = v34;
      int v33 = v41 + 3;
      v41[1] = v43;
      v41[2] = v35;
LABEL_13:
      *(void *)(a2 + 584) = v33;
LABEL_14:
      ++v30;
    }
    while (v30 != v31);
  }
  uint64_t v63 = *(void *)(a2 + 576);
  uint64_t v64 = *(void *)(a2 + 584);
  uint64_t v65 = v64 - v63;
  if (v64 - v63 < 25)
  {
    uint64_t v70 = a4;
    int v71 = v158;
    int v72 = a3;
  }
  else
  {
    uint64_t v66 = v65 / 24;
    unint64_t v67 = (unint64_t)(v65 / 24 - 2) >> 1;
    unint64_t v68 = v67 + 1;
    uint64_t v69 = (double *)(v63 + 24 * v67);
    uint64_t v70 = a4;
    int v71 = v158;
    int v72 = a3;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v63, (uint64_t)&__p, v66, v69);
      v69 -= 3;
      --v68;
    }
    while (v68);
    uint64_t v63 = *(void *)(a2 + 576);
    uint64_t v64 = *(void *)(a2 + 584);
  }
  int *v70 = -1;
  v72[1] = *v72;
  *(void *)(a2 + 560) = *(void *)(a2 + 552);
  if (v63 == v64) {
    goto LABEL_163;
  }
  double v164 = (void **)(a2 + 552);
  double v79 = fabs(a7);
  double v80 = -1.0;
  double v81 = 1.79769313e308;
  do
  {
    double v85 = *(double *)(v63 + 8);
    if (v85 > v81) {
      break;
    }
    int v86 = *(_DWORD *)v63;
    double v87 = *(double *)(v63 + 16);
    if (v79 > v25
      && ((*(void *)(*(void *)(NonBasicBoxedVariables + 8) + (((unint64_t)v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
    {
      double v79 = v79
          - (*(double *)(**(void **)(*(void *)a2 + 16) + 8 * v86)
           - *(double *)(**(void **)(*(void *)a2 + 8) + 8 * v86))
          * v87;
      if (v79 > v25)
      {
        int v89 = (char *)v72[1];
        unint64_t v88 = v72[2];
        if ((unint64_t)v89 < v88)
        {
          *(_DWORD *)int v89 = v86;
          uint64_t v90 = (uint64_t)(v89 + 4);
LABEL_159:
          v72[1] = v90;
          int v83 = *(long long **)(a2 + 576);
          uint64_t v84 = *(void *)(a2 + 584);
          uint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((v84 - (uint64_t)v83) >> 3);
          goto LABEL_99;
        }
        double v104 = (char *)*v72;
        uint64_t v105 = (uint64_t)&v89[-*v72];
        uint64_t v106 = v105 >> 2;
        unint64_t v107 = (v105 >> 2) + 1;
        if (v107 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v108 = v88 - (void)v104;
        if (v108 >> 1 > v107) {
          unint64_t v107 = v108 >> 1;
        }
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v107;
        }
        if (v109)
        {
          if (v109 >> 62) {
            goto LABEL_201;
          }
          uint64_t v110 = operator new(4 * v109);
          uint64_t v111 = (int *)&v110[4 * v106];
          *uint64_t v111 = v86;
          uint64_t v90 = (uint64_t)(v111 + 1);
          if (v89 != v104)
          {
LABEL_136:
            unint64_t v112 = v89 - 4 - v104;
            if (v112 < 0x2C)
            {
              int v71 = v158;
              goto LABEL_155;
            }
            unint64_t v122 = v89 - &v110[v105];
            int v71 = v158;
            if (v122 < 0x20) {
              goto LABEL_206;
            }
            uint64_t v123 = (v112 >> 2) + 1;
            uint64_t v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v125 = &v89[-v124];
            uint64_t v111 = (int *)((char *)v111 - v124);
            BOOL v126 = &v110[4 * v106 - 16];
            uint64_t v127 = v89 - 16;
            uint64_t v128 = v123 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v129 = *(_OWORD *)v127;
              *(v126 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v127 - 1);
              *BOOL v126 = v129;
              v126 -= 2;
              v127 -= 32;
              v128 -= 8;
            }
            while (v128);
            int v89 = v125;
            if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_206:
              do
              {
LABEL_155:
                int v130 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--uint64_t v111 = v130;
              }
              while (v89 != v104);
            }
LABEL_156:
            double v131 = &v110[4 * v109];
            int v72 = a3;
            *a3 = v111;
            a3[1] = (int *)v90;
            a3[2] = (int *)v131;
            if (v104) {
              operator delete(v104);
            }
            uint64_t NonBasicBoxedVariables = v161;
            goto LABEL_159;
          }
        }
        else
        {
          uint64_t v110 = 0;
          uint64_t v111 = (int *)(4 * v106);
          *(_DWORD *)(4 * v106) = v86;
          uint64_t v90 = 4 * v106 + 4;
          if (v89 != v104) {
            goto LABEL_136;
          }
        }
        int v71 = v158;
        goto LABEL_156;
      }
    }
    if (v87 >= v80)
    {
      double v91 = v85 + v28 / v87;
      if (v91 >= v81) {
        double v91 = v81;
      }
      if (v91 >= 0.0) {
        double v81 = v91;
      }
      else {
        double v81 = 0.0;
      }
      if (v87 == v80 && v85 == *v71)
      {
        int v92 = *(char **)(a2 + 560);
        unint64_t v93 = *(void *)(a2 + 568);
        if ((unint64_t)v92 < v93)
        {
          *(_DWORD *)int v92 = v86;
          uint64_t v94 = (uint64_t)(v92 + 4);
LABEL_150:
          *(void *)(a2 + 560) = v94;
          uint64_t v63 = *(void *)(a2 + 576);
          uint64_t NonBasicBoxedVariables = v161;
          goto LABEL_98;
        }
        int v95 = (char *)*v164;
        uint64_t v96 = v92 - (unsigned char *)*v164;
        uint64_t v97 = v96 >> 2;
        unint64_t v98 = (v96 >> 2) + 1;
        if (v98 >> 62) {
          goto LABEL_202;
        }
        uint64_t v99 = v93 - (void)v95;
        if (v99 >> 1 > v98) {
          unint64_t v98 = v99 >> 1;
        }
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v100 = v98;
        }
        if (v100)
        {
          if (v100 >> 62) {
            goto LABEL_201;
          }
          double v101 = operator new(4 * v100);
          uint64_t v102 = (int *)&v101[4 * v97];
          int *v102 = v86;
          uint64_t v94 = (uint64_t)(v102 + 1);
          if (v92 != v95)
          {
LABEL_125:
            unint64_t v103 = v92 - 4 - v95;
            if (v103 < 0x2C)
            {
              uint64_t v70 = a4;
              goto LABEL_146;
            }
            unint64_t v113 = v92 - &v101[v96];
            uint64_t v70 = a4;
            if (v113 < 0x20) {
              goto LABEL_207;
            }
            uint64_t v114 = (v103 >> 2) + 1;
            uint64_t v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v116 = &v92[-v115];
            uint64_t v102 = (int *)((char *)v102 - v115);
            double v117 = &v101[4 * v97 - 16];
            uint64_t v118 = v92 - 16;
            uint64_t v119 = v114 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v120 = *(_OWORD *)v118;
              *(v117 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v118 - 1);
              *double v117 = v120;
              v117 -= 2;
              v118 -= 32;
              v119 -= 8;
            }
            while (v119);
            int v92 = v116;
            if (v114 != (v114 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_207:
              do
              {
LABEL_146:
                int v121 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *--uint64_t v102 = v121;
              }
              while (v92 != v95);
            }
LABEL_147:
            *(void *)(a2 + 552) = v102;
            *(void *)(a2 + 560) = v94;
            *(void *)(a2 + 568) = &v101[4 * v100];
            if (v95)
            {
              operator delete(v95);
              uint64_t v64 = *(void *)(a2 + 584);
            }
            int v71 = v158;
            int v72 = a3;
            goto LABEL_150;
          }
        }
        else
        {
          double v101 = 0;
          uint64_t v102 = (int *)(4 * v97);
          *(_DWORD *)(4 * v97) = v86;
          uint64_t v94 = 4 * v97 + 4;
          if (v92 != v95) {
            goto LABEL_125;
          }
        }
        uint64_t v70 = a4;
        goto LABEL_147;
      }
      *(void *)(a2 + 560) = *(void *)(a2 + 552);
      int *v70 = v86;
      double *v71 = v85;
      double v80 = v87;
    }
LABEL_98:
    uint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 3);
    int v83 = (long long *)v63;
    uint64_t v84 = v64;
LABEL_99:
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v83, v84, (uint64_t)&__p, v82);
    uint64_t v64 = *(void *)(a2 + 584) - 24;
    *(void *)(a2 + 584) = v64;
    uint64_t v63 = *(void *)(a2 + 576);
  }
  while (v63 != v64);
  double v132 = *(char **)(a2 + 552);
  uint64_t v133 = *(char **)(a2 + 560);
  if (v132 == v133)
  {
LABEL_163:
    int v138 = *v70;
    uint64_t v137 = (uint64_t)v156;
    if (v138 != -1) {
      goto LABEL_196;
    }
    goto LABEL_198;
  }
  unint64_t v134 = *(void *)(a2 + 568);
  if ((unint64_t)v133 < v134)
  {
    *(_DWORD *)uint64_t v133 = *v70;
    uint64_t v135 = v133 + 4;
    uint64_t v136 = v70;
    uint64_t v137 = (uint64_t)v156;
    goto LABEL_195;
  }
  int64_t v140 = v133 - v132;
  uint64_t v141 = (v133 - v132) >> 2;
  unint64_t v142 = v141 + 1;
  if ((unint64_t)(v141 + 1) >> 62) {
LABEL_202:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v143 = v134 - (void)v132;
  if (v143 >> 1 > v142) {
    unint64_t v142 = v143 >> 1;
  }
  if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v144 = v142;
  }
  uint64_t v137 = (uint64_t)v156;
  if (v144)
  {
    if (!(v144 >> 62))
    {
      uint64_t v145 = operator new(4 * v144);
      goto LABEL_184;
    }
LABEL_201:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v145 = 0;
LABEL_184:
  uint64_t v146 = (int *)&v145[4 * v141];
  *uint64_t v146 = *a4;
  if ((unint64_t)(v140 - 4) < 0x2C)
  {
    uint64_t v147 = &v145[4 * v141];
    goto LABEL_190;
  }
  uint64_t v147 = &v145[4 * v141];
  if ((unint64_t)(v132 - v145) < 0x20) {
    goto LABEL_208;
  }
  unint64_t v148 = ((unint64_t)(v140 - 4) >> 2) + 1;
  uint64_t v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v150 = &v133[-v149];
  uint64_t v147 = (char *)&v146[v149 / 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v151 = &v145[4 * v141 - 16];
  double v152 = v133 - 16;
  uint64_t v153 = v148 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v154 = *(_OWORD *)v152;
    *(v151 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v152 - 1);
    *uint64_t v151 = v154;
    v151 -= 2;
    v152 -= 32;
    v153 -= 8;
  }
  while (v153);
  uint64_t v133 = v150;
  if (v148 != (v148 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_208:
    do
    {
LABEL_190:
      int v155 = *((_DWORD *)v133 - 1);
      v133 -= 4;
      *((_DWORD *)v147 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v155;
      v147 -= 4;
    }
    while (v133 != v132);
  }
  *(void *)(a2 + 552) = v147;
  uint64_t v135 = (char *)(v146 + 1);
  *(void *)(a2 + 560) = v146 + 1;
  *(void *)(a2 + 568) = &v145[4 * v144];
  if (v132)
  {
    operator delete(v132);
    double v132 = (char *)*v164;
  }
  else
  {
    double v132 = v147;
  }
  uint64_t v136 = a4;
LABEL_195:
  *(void *)(a2 + 560) = v135;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = ((unint64_t)(v135 - v132) >> 2) - 1;
  int v138 = *(_DWORD *)(*(void *)(a2 + 552)
                   + 4
                   * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, *(void *)(a2 + 8), &__p));
  *uint64_t v136 = v138;
  if (v138 != -1)
  {
LABEL_196:
    if (*v71 <= 0.0) {
      operations_research::glop::ReducedCosts::ShiftCost(*(void *)(a2 + 16), v138);
    }
  }
LABEL_198:
  operations_research::glop::Status::Status(v137);
}

void sub_23CB6F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::EnteringVariable::DualPhaseIChooseEnteringColumn(operations_research::glop::UpdateRow *this@<X1>, uint64_t a2@<X0>, _DWORD *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (!a3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_23CE7E3F0;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v80, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 271, 2);
    uint64_t v65 = (void *)google::LogMessage::stream((google::LogMessage *)v80);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v79, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v79 = __p;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      int v71 = (void *)v79.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(v71);
    }
LABEL_83:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (!a4)
  {
    strcpy((char *)&__p, "step must not be null.");
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 22;
    google::LogMessage::LogMessage((google::LogMessage *)v80, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 272, 2);
    unint64_t v68 = (void *)google::LogMessage::stream((google::LogMessage *)v80);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v69 = &__p;
    }
    else {
      uint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v70 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
    google::LogMessage::~LogMessage((google::LogMessage *)v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v78 = __p;
    }
    operations_research::glop::Status::Status(a5, 3, (long long *)&v78);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      int v71 = (void *)v78.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  Coefficients = (void *)operations_research::glop::UpdateRow::GetCoefficients(this);
  ReducedCosts = (void *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a2 + 16));
  uint64_t v77 = (void **)(a2 + 576);
  *(void *)(a2 + 584) = *(void *)(a2 + 576);
  NonZeroPositions = (void *)operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  uint64_t v15 = NonZeroPositions[1] - *NonZeroPositions;
  uint64_t v16 = v15 >> 2;
  unint64_t v17 = *(unsigned char **)(a2 + 576);
  uint64_t v75 = ReducedCosts;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 592) - (void)v17) >> 3) < v15 >> 2)
  {
    if ((unint64_t)v15 >= 0x2AAAAAAAAAAAAAA9) {
LABEL_86:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v18 = *(unsigned char **)(a2 + 584);
    uint64_t v19 = 24 * v16;
    uint64_t v20 = (char *)operator new(24 * v16);
    int v21 = &v20[24 * ((v18 - v17) / 24)];
    uint64_t v22 = v21;
    if (v18 != v17)
    {
      double v23 = &v20[24 * ((v18 - v17) / 24)];
      do
      {
        long long v24 = *(_OWORD *)(v18 - 24);
        uint64_t v22 = v23 - 24;
        *((void *)v23 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((void *)v18 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v18 -= 24;
        v23 -= 24;
      }
      while (v18 != v17);
    }
    *(void *)(a2 + 576) = v22;
    *(void *)(a2 + 584) = v21;
    *(void *)(a2 + 592) = &v20[v19];
    ReducedCosts = v75;
    if (v17) {
      operator delete(v17);
    }
  }
  int v72 = a3;
  uint64_t v73 = a5;
  double v25 = *(double *)(a2 + 120);
  double v26 = *(double *)(*(void *)(a2 + 16) + 824);
  uint64_t CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  uint64_t CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  operations_research::glop::VariablesInfo::GetTypeRow(*(operations_research::glop::VariablesInfo **)a2);
  uint64_t v27 = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  double v28 = *(int **)v27;
  uint64_t v29 = *(int **)(v27 + 8);
  if (*(int **)v27 != v29)
  {
    do
    {
      int v31 = *v28;
      double v32 = *(double *)(*Coefficients + 8 * *v28);
      double v33 = fabs(v32);
      if (v33 >= v25)
      {
        double v34 = -v32;
        if (a6 > 0.0) {
          double v34 = *(double *)(*Coefficients + 8 * v31);
        }
        double v35 = *(double *)(*ReducedCosts + 8 * v31);
        double v36 = fabs(v35);
        if (v36 <= v26)
        {
          if (v34 > 0.0
            && ((*(void *)(*(void *)(CanDecreaseBitRow + 8) + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0
            || v34 < 0.0
            && ((*(void *)(*(void *)(CanIncreaseBitRow + 8) + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          {
            goto LABEL_14;
          }
        }
        else if (v34 * v35 > 0.0)
        {
          goto LABEL_14;
        }
        uint64_t v37 = *(double **)(a2 + 584);
        unint64_t v38 = *(void *)(a2 + 592);
        double v39 = v36 / v33;
        if ((unint64_t)v37 < v38)
        {
          *(_DWORD *)uint64_t v37 = v31;
          uint64_t v30 = (char *)(v37 + 3);
          v37[1] = v39;
          v37[2] = v33;
        }
        else
        {
          double v40 = (double *)*v77;
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (unsigned char *)*v77) >> 3);
          unint64_t v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_86;
          }
          unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v40) >> 3);
          if (2 * v43 > v42) {
            unint64_t v42 = 2 * v43;
          }
          if (v43 >= 0x555555555555555) {
            unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v45 = (char *)operator new(24 * v44);
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v46 = &v45[24 * v41];
          *(_DWORD *)unint64_t v46 = v31;
          *((double *)v46 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v39;
          *((double *)v46 + 2) = v33;
          unint64_t v47 = (double *)v46;
          if (v37 != v40)
          {
            do
            {
              long long v48 = *(_OWORD *)(v37 - 3);
              *(v47 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v37 - 1);
              *(_OWORD *)(v47 - 3) = v48;
              v47 -= 3;
              v37 -= 3;
            }
            while (v37 != v40);
            uint64_t v37 = (double *)*v77;
          }
          *(void *)(a2 + 576) = v47;
          uint64_t v30 = v46 + 24;
          *(void *)(a2 + 584) = v46 + 24;
          *(void *)(a2 + 592) = &v45[24 * v44];
          ReducedCosts = v75;
          if (v37) {
            operator delete(v37);
          }
        }
        *(void *)(a2 + 584) = v30;
      }
LABEL_14:
      ++v28;
    }
    while (v28 != v29);
  }
  uint64_t v49 = *(void *)(a2 + 576);
  uint64_t v50 = *(void *)(a2 + 584);
  uint64_t v51 = v50 - v49;
  if (v50 - v49 >= 25)
  {
    uint64_t v52 = v51 / 24;
    unint64_t v53 = (unint64_t)(v51 / 24 - 2) >> 1;
    unint64_t v54 = v53 + 1;
    unint64_t v55 = (double *)(v49 + 24 * v53);
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v49, (uint64_t)&__p, v52, v55);
      v55 -= 3;
      --v54;
    }
    while (v54);
    uint64_t v49 = *(void *)(a2 + 576);
    uint64_t v50 = *(void *)(a2 + 584);
  }
  *int v72 = -1;
  *a4 = -1.0;
  if (v49 != v50)
  {
    double v56 = fabs(a6);
    double v57 = 0.0;
    do
    {
      int v58 = *(_DWORD *)v49;
      double v60 = *(double *)(v49 + 8);
      double v59 = *(double *)(v49 + 16);
      if (v60 > *a4 && v59 >= v57)
      {
        *int v72 = v58;
        *a4 = v60;
        double v57 = v59;
      }
      uint64_t v62 = v58;
      double v56 = v56 - v59;
      unint64_t v63 = (unint64_t)v58 >> 6;
      uint64_t v64 = 1 << v58;
      if ((*(void *)(*(void *)(CanDecreaseBitRow + 8) + 8 * v63) & v64) != 0
        && (*(void *)(*(void *)(CanIncreaseBitRow + 8) + 8 * v63) & v64) != 0
        && fabs(*(double *)(*ReducedCosts + 8 * v62)) > v25)
      {
        double v56 = v56 - v59;
      }
      if (v56 <= 0.0) {
        break;
      }
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>((long long *)v49, v50, (uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 3));
      uint64_t v50 = *(void *)(a2 + 584) - 24;
      *(void *)(a2 + 584) = v50;
      uint64_t v49 = *(void *)(a2 + 576);
    }
    while (v49 != v50);
  }
  operations_research::glop::Status::Status(v73);
}

void sub_23CB6FC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double operations_research::glop::EnteringVariable::SetParameters(operations_research::glop::EnteringVariable *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::EnteringVariable *)((char *)this + 32), a2);
}

uint64_t operations_research::glop::EnteringVariable::SetPricingRule(uint64_t result, int a2)
{
  *(_DWORD *)(result + 328) = a2;
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      int v6 = (long long *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        double v7 = *(double *)(result + 24 * v5 + 8);
        double v8 = *((double *)v6 + 4);
        if (v7 != v8)
        {
          if (v7 <= v8) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        double v9 = *(double *)(result + 24 * v5 + 16);
        double v10 = *((double *)v6 + 5);
        if (v9 != v10)
        {
          if (v9 >= v10) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (*(_DWORD *)v6 > *((_DWORD *)v6 + 6))
        {
LABEL_8:
          int v6 = (long long *)((char *)v6 + 24);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
LABEL_9:
      double v11 = *((double *)v6 + 1);
      double v12 = a4[1];
      if (v11 == v12)
      {
        double v13 = *((double *)v6 + 2);
        double v14 = a4[2];
        if (v13 == v14)
        {
          if (*(_DWORD *)v6 > *(_DWORD *)a4) {
            return result;
          }
        }
        else if (v13 < v14)
        {
          return result;
        }
      }
      else
      {
        if (v11 > v12) {
          return result;
        }
        double v14 = a4[2];
      }
      double v15 = *a4;
      long long v16 = *v6;
      a4[2] = *((double *)v6 + 2);
      *(_OWORD *)a4 = v16;
      if (v4 < v5)
      {
LABEL_17:
        *(double *)int v6 = v15;
        *((double *)v6 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v12;
        *((double *)v6 + 2) = v14;
        return result;
      }
      while (1)
      {
        uint64_t v18 = (double *)v6;
        uint64_t v19 = 2 * v5;
        uint64_t v5 = (2 * v5) | 1;
        int v6 = (long long *)(result + 24 * v5);
        uint64_t v20 = v19 + 2;
        if (v20 >= a3) {
          goto LABEL_26;
        }
        double v21 = *(double *)(result + 24 * v5 + 8);
        double v22 = *((double *)v6 + 4);
        if (v21 == v22)
        {
          double v23 = *(double *)(result + 24 * v5 + 16);
          double v24 = *((double *)v6 + 5);
          if (v23 == v24)
          {
            if (*(_DWORD *)v6 <= *((_DWORD *)v6 + 6)) {
              goto LABEL_26;
            }
LABEL_25:
            int v6 = (long long *)((char *)v6 + 24);
            uint64_t v5 = v20;
            goto LABEL_26;
          }
          if (v23 < v24) {
            goto LABEL_25;
          }
        }
        else if (v21 > v22)
        {
          goto LABEL_25;
        }
LABEL_26:
        double v25 = *((double *)v6 + 1);
        if (v25 == v12)
        {
          double v26 = *((double *)v6 + 2);
          if (v26 == v14)
          {
            if (*(_DWORD *)v6 > SLODWORD(v15)) {
              goto LABEL_38;
            }
          }
          else if (v26 < v14)
          {
LABEL_38:
            *uint64_t v18 = v15;
            v18[1] = v12;
            void v18[2] = v14;
            return result;
          }
        }
        else if (v25 > v12)
        {
          goto LABEL_38;
        }
        long long v17 = *v6;
        void v18[2] = *((double *)v6 + 2);
        *(_OWORD *)uint64_t v18 = v17;
        if (v4 < v5) {
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

long long *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(long long *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v4 = 0;
  long long v33 = *result;
  uint64_t v34 = *((void *)result + 2);
  uint64_t v5 = result;
  do
  {
    double v7 = (double *)v5;
    uint64_t v8 = v4 + 1;
    uint64_t v5 = (long long *)((char *)v5 + 24 * v4 + 24);
    uint64_t v9 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v10 = v9 + 2;
    if (v10 >= a4) {
      goto LABEL_4;
    }
    double v11 = v7[3 * v8 + 1];
    double v12 = *((double *)v5 + 4);
    BOOL v13 = v11 <= v12;
    if (v11 != v12) {
      goto LABEL_9;
    }
    double v14 = v7[3 * v8 + 2];
    double v15 = *((double *)v5 + 5);
    if (v14 == v15)
    {
      BOOL v13 = *(_DWORD *)v5 <= *((_DWORD *)v5 + 6);
LABEL_9:
      if (!v13) {
        goto LABEL_3;
      }
      goto LABEL_4;
    }
    if (v14 < v15)
    {
LABEL_3:
      uint64_t v5 = (long long *)((char *)v5 + 24);
      uint64_t v4 = v10;
    }
LABEL_4:
    long long v6 = *v5;
    BOOL v7[2] = *((double *)v5 + 2);
    *(_OWORD *)double v7 = v6;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  long long v16 = (long long *)(a2 - 24);
  if (v5 == (long long *)(a2 - 24))
  {
    *((void *)v5 + 2) = v34;
    long long *v5 = v33;
    return result;
  }
  long long v17 = *v16;
  *((void *)v5 + 2) = *(void *)(a2 - 8);
  long long *v5 = v17;
  *long long v16 = v33;
  *(void *)(a2 - 8) = v34;
  uint64_t v18 = (char *)v5 - (char *)result + 24;
  if (v18 < 25) {
    return result;
  }
  unint64_t v19 = v18 / 0x18uLL - 2;
  unint64_t v20 = v19 >> 1;
  double v21 = (double *)result + 3 * (v19 >> 1);
  double v22 = v21[1];
  double v23 = *((double *)v5 + 1);
  if (v22 == v23)
  {
    double v24 = *((double *)result + 3 * v20 + 2);
    double v25 = *((double *)v5 + 2);
    if (v24 == v25)
    {
      if (*(_DWORD *)v21 <= *(_DWORD *)v5) {
        return result;
      }
    }
    else if (v24 >= v25)
    {
      return result;
    }
  }
  else
  {
    if (v22 <= v23) {
      return result;
    }
    double v25 = *((double *)v5 + 2);
  }
  uint64_t v26 = *(void *)v5;
  long long v27 = *(_OWORD *)v21;
  *((double *)v5 + 2) = v21[2];
  long long *v5 = v27;
  if (v19 < 2) {
    goto LABEL_34;
  }
  while (2)
  {
    uint64_t v29 = v21;
    unint64_t v30 = v20 - 1;
    unint64_t v20 = (v20 - 1) >> 1;
    double v21 = (double *)result + 3 * v20;
    double v31 = v21[1];
    if (v31 != v23)
    {
      if (v31 <= v23) {
        break;
      }
      goto LABEL_27;
    }
    double v32 = *((double *)result + 3 * v20 + 2);
    if (v32 == v25)
    {
      if (*(_DWORD *)v21 <= (int)v26) {
        break;
      }
      goto LABEL_27;
    }
    if (v32 < v25)
    {
LABEL_27:
      long long v28 = *(_OWORD *)v21;
      uint64_t v29[2] = v21[2];
      *(_OWORD *)uint64_t v29 = v28;
      if (v30 <= 1) {
        goto LABEL_34;
      }
      continue;
    }
    break;
  }
  double v21 = v29;
LABEL_34:
  *(void *)double v21 = v26;
  v21[1] = v23;
  v21[2] = v25;
  return result;
}

uint64_t std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  if (result != *a3)
  {
    unsigned int v4 = result - *a3 + 1;
    if (result - *a3 == -1)
    {
      uint64_t v16 = *(void *)(a2 + 2496);
      unint64_t v17 = (v16 + 1) % 0x270uLL;
      unsigned int v18 = *(_DWORD *)(a2 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v16) = v18;
      *(void *)(a2 + 2496) = v17;
      unsigned int v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      return (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
    }
    else
    {
      uint64_t v5 = __clz(v4);
      uint64_t v6 = 31;
      if (((v4 << v5) & 0x7FFFFFFF) != 0) {
        uint64_t v6 = 32;
      }
      unint64_t v7 = v6 - v5;
      unint64_t v8 = v7 >> 5;
      if ((v7 & 0x1F) != 0) {
        ++v8;
      }
      if (v8 <= v7) {
        unsigned int v9 = 0xFFFFFFFF >> -(v7 / v8);
      }
      else {
        unsigned int v9 = 0;
      }
      unint64_t v10 = *(void *)(a2 + 2496);
      do
      {
        uint64_t v11 = 4 * v10;
        unint64_t v12 = v10 + 397;
        unint64_t v10 = (v10 + 1) % 0x270;
        unsigned int v13 = *(_DWORD *)(a2 + 4 * (v12 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(a2 + v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a2 + v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v13;
        unsigned int v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
        unsigned int v15 = ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) & v9;
      }
      while (v15 >= v4);
      *(void *)(a2 + 2496) = v10;
      return *a3 + v15;
    }
  }
  return result;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int64x2_t v18 = vdupq_lane_s64(*a3, 0);
      unsigned int v19 = (int64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *unsigned int v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      unint64_t v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    unsigned int v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v15 = (char *)operator new(8 * v14);
    }
    else
    {
      unsigned int v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    double v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    double v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      double v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    double v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    long long v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *long long v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      double v32 = &v15[8 * v11 - 16];
      long long v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v33 - 1);
        *(_OWORD *)double v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void *operations_research::glop::InitialBasis::InitialBasis(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *result = 0;
  result[1] = result;
  result[2] = result;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

void operations_research::glop::InitialBasis::CompleteBixbyBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
  unint64_t v6 = **(int **)(a1 + 24);
  unint64_t v43 = 0;
  unint64_t v44 = 0;
  unint64_t v45 = 0;
  if (v6)
  {
    if ((v6 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = ((v6 - 1) >> 6) + 1;
    unint64_t v8 = operator new(8 * v7);
    unsigned int v9 = v8;
    unint64_t v44 = v6;
    unint64_t v45 = v7;
    unint64_t v43 = v8;
    if (v6 >= 0x41) {
      unint64_t v10 = (v6 - 1) >> 6;
    }
    else {
      unint64_t v10 = 0;
    }
    v8[v10] = 0;
    if (v6 >= 0x40) {
      bzero(v8, 8 * (v6 >> 6));
    }
    if ((v6 & 0x3F) != 0) {
      v9[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    }
    double v40 = operator new(8 * v7);
    uint64_t v41 = 0;
    unint64_t v42 = ((v6 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&v40, v6, 0);
    std::vector<int>::pointer begin = a3->__begin_;
    unint64_t v12 = a3->__end_ - a3->__begin_;
    BOOL v13 = v6 >= v12;
    std::vector<int>::size_type v14 = v6 - v12;
    if (v6 > v12) {
      goto LABEL_11;
    }
  }
  else
  {
    double v40 = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    std::vector<int>::pointer begin = a3->__begin_;
    unint64_t v15 = a3->__end_ - a3->__begin_;
    BOOL v13 = v6 >= v15;
    std::vector<int>::size_type v14 = v6 - v15;
    if (v6 > v15)
    {
LABEL_11:
      std::vector<int>::__append(a3, v14, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v13) {
    a3->__end_ = &begin[v6];
  }
LABEL_15:
  if (v6)
  {
    unint64_t v16 = 0;
    std::vector<int>::pointer v17 = a3->__begin_;
    int64x2_t v18 = (char *)v43;
    unsigned int v19 = (char *)v40;
    do
    {
      if (v17[v16] == -1)
      {
        uint64_t v20 = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)&v18[v20] |= 1 << v16;
        *(void *)&v19[v20] |= 1 << v16;
      }
      ++v16;
    }
    while (v6 != v16);
  }
  uint64_t v21 = **(int **)(a1 + 24);
  unint64_t v38 = 0;
  double v39 = 0;
  std::string __p = 0;
  if (v21)
  {
    if ((v21 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(8 * v21);
    double v39 = (char *)__p + 8 * v21;
    memset_pattern16(__p, &unk_23CE7EE40, 8 * v21);
    unint64_t v38 = v39;
  }
  uint64_t v34 = 0;
  long long v35 = 0;
  uint64_t v36 = 0;
  operations_research::glop::InitialBasis::ComputeCandidates(a1, a2, (uint64_t)&v34);
  double v22 = v35;
  if (v35 != v34)
  {
    unint64_t v23 = 0;
    double v22 = v34;
    do
    {
      uint64_t v25 = v22[v23];
      int64x2_t v26 = *(void **)(a1 + 24);
      uint64_t v27 = v26[7];
      uint64_t v28 = *(void *)(v27 + 8 * v25);
      uint64_t v29 = v26[4] + 4 * v28;
      uint64_t v30 = v26[1] + 8 * v28;
      v33[0] = *(void *)(v27 + (((v25 << 32) + 0x100000000) >> 29)) - v28;
      v33[1] = v29;
      void v33[2] = v30;
      if (operations_research::glop::InfinityNorm(v33) == 1.0)
      {
        int v32 = 0;
        double v31 = operations_research::glop::RestrictedInfinityNorm(v33, (uint64_t *)&v40, &v32);
        if (v31 > 0.99
          || operations_research::glop::IsDominated(v33, &__p)
          && (double v31 = operations_research::glop::RestrictedInfinityNorm(v33, (uint64_t *)&v43, &v32), v31 != 0.0))
        {
          *(void *)((char *)v43 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
          operations_research::glop::SetSupportToFalse(v33, &v40);
          uint64_t v24 = v32;
          *((double *)__p + v32) = fabs(v31) * 0.01;
          a3->__begin_[v24] = v25;
        }
      }
      ++v23;
      double v22 = v34;
    }
    while (v23 < v35 - v34);
  }
  if (v22)
  {
    long long v35 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    unint64_t v38 = __p;
    operator delete(__p);
  }
  if (v40) {
    operator delete(v40);
  }
  if (v43) {
    operator delete(v43);
  }
}

void sub_23CB70830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v23 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v23 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

int *operations_research::glop::InitialBasis::ComputeCandidates(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(int **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  *(void *)a1 = 0;
  if (a2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    double v8 = 0.0;
    while (*(unsigned char *)(**(void **)(a1 + 56) + v6) == 4
         || *(void *)(*(void *)(*(void *)(a1 + 24) + 56) + 8 * (v6 + 1)) <= *(void *)(*(void *)(*(void *)(a1 + 24) + 56) + 8 * v6))
    {
LABEL_7:
      if (++v6 == v7) {
        goto LABEL_37;
      }
    }
    unint64_t v12 = *(void *)(a3 + 16);
    if ((unint64_t)v5 < v12)
    {
      int *v5 = v6;
      uint64_t v9 = (uint64_t)(v5 + 1);
LABEL_4:
      double v10 = *(double *)(**(void **)(a1 + 32) + 8 * v6);
      *(void *)(a3 + 8) = v9;
      double v11 = fabs(v10);
      if (v8 < v11) {
        double v8 = v11;
      }
      *(double *)a1 = v8;
      uint64_t v5 = (int *)v9;
      goto LABEL_7;
    }
    BOOL v13 = *(int **)a3;
    uint64_t v14 = (uint64_t)v5 - *(void *)a3;
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v12 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v19 = operator new(4 * v18);
      uint64_t v20 = &v19[4 * v15];
      _DWORD *v20 = v6;
      uint64_t v9 = (uint64_t)(v20 + 1);
      if (v5 == v13) {
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v19 = 0;
      uint64_t v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v6;
      uint64_t v9 = 4 * v15 + 4;
      if (v5 == v13) {
        goto LABEL_34;
      }
    }
    unint64_t v21 = (char *)(v5 - 1) - (char *)v13;
    if (v21 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        double v22 = v5;
      }
      else if ((int *)((char *)v5 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v5 - 1)
      {
        double v22 = v5;
      }
      else if ((unint64_t)((char *)v5 - v19 - v14) >= 0x20)
      {
        uint64_t v23 = (v21 >> 2) + 1;
        uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        double v22 = &v5[v24 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v20 = (_DWORD *)((char *)v20 - v24);
        uint64_t v25 = &v19[4 * v15 - 16];
        int64x2_t v26 = v5 - 4;
        uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 8;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          *(void *)a3 = v20;
          *(void *)(a3 + 8) = v9;
          *(void *)(a3 + 16) = &v19[4 * v18];
          if (v13)
          {
            operator delete(v13);
            double v8 = *(double *)a1;
          }
          goto LABEL_4;
        }
      }
      else
      {
        double v22 = v5;
      }
    }
    else
    {
      double v22 = v5;
    }
    do
    {
      int v29 = *--v22;
      *--uint64_t v20 = v29;
    }
    while (v22 != v13);
    goto LABEL_34;
  }
  double v8 = 0.0;
LABEL_37:
  uint64_t v30 = *(int **)a3;
  double v31 = *(int **)(a3 + 8);
  unint64_t v32 = 126 - 2 * __clz(((uint64_t)v31 - *(void *)a3) >> 2);
  double v33 = v8 * 1000.0;
  if (v31 == *(int **)a3) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v32;
  }
  if (v8 == 0.0) {
    double v33 = 1.0;
  }
  *(double *)a1 = v33;
  uint64_t v36 = *(void *)(a1 + 8);
  return std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v30, v31, &v36, v34, 1);
}

void operations_research::glop::InitialBasis::GetPrimalMarosBasis(uint64_t a1, unsigned int a2, std::vector<int> *a3)
{
}

void operations_research::glop::InitialBasis::GetMarosBasis<false>(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  if (*operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 1
    && (operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v92, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 230);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Starting Maros crash procedure.", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)v92);
  }
  unint64_t v7 = **(int **)(a1 + 24);
  uint64_t v8 = **(unsigned int **)(a1 + 24);
  unint64_t v9 = this->__end_ - this->__begin_;
  if (v7 <= v9)
  {
    if (v7 < v9) {
      this->__end_ = &this->__begin_[v7];
    }
  }
  else
  {
    std::vector<int>::__append(this, v7 - v9);
  }
  uint64_t v90 = (a2 - v7);
  if ((int)v7 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    if (v7 < 8)
    {
      uint64_t v11 = 0;
LABEL_15:
      int v18 = v11 + a2 - v8;
      unsigned int v19 = &begin[v11];
      uint64_t v20 = v8 - v11;
      do
      {
        *v19++ = v18++;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    int32x4_t v12 = vdupq_n_s32(v90);
    int32x4_t v13 = vdupq_n_s32((int)v90 + 4);
    uint64_t v11 = v8 & 0xFFFFFFF8;
    int32x4_t v14 = (int32x4_t)xmmword_23CE7EC40;
    uint64_t v15 = (int32x4_t *)(begin + 4);
    v16.i64[0] = 0x800000008;
    v16.i64[1] = 0x800000008;
    uint64_t v17 = v11;
    do
    {
      v15[-1] = vaddq_s32(v12, v14);
      int32x4_t *v15 = vaddq_s32(v13, v14);
      int32x4_t v14 = vaddq_s32(v14, v16);
      v15 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v11 != v8) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  unint64_t v104 = 0;
  if (!(a2 << 32))
  {
    uint64_t v23 = 0;
    int v25 = a2;
    if ((int)v90 < 1) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if (a2 << 32 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v21 = (unint64_t)((int)a2 - 1) >> 6;
  double v22 = operator new(8 * (v21 + 1));
  uint64_t v23 = v22;
  uint64_t v103 = (int)a2;
  unint64_t v104 = v21 + 1;
  uint64_t v102 = v22;
  if (a2 >= 0x41uLL) {
    unint64_t v24 = (unint64_t)((int)a2 - 1) >> 6;
  }
  else {
    unint64_t v24 = 0;
  }
  v22[v24] = 0;
  if ((unint64_t)a2 >> 6) {
    memset(v22, 255, 8 * ((unint64_t)(int)a2 >> 6));
  }
  if ((a2 & 0x3F) != 0) {
    v23[(unint64_t)(int)a2 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  }
  int v25 = a2;
  if ((int)v90 >= 1)
  {
LABEL_29:
    unint64_t v26 = 0;
    uint64_t v27 = **(void **)(a1 + 56);
    do
    {
      if (*(unsigned char *)(v27 + v26) == 4) {
        *(void *)((char *)v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v26);
      }
      ++v26;
    }
    while (v90 != v26);
  }
LABEL_33:
  if ((int)v8 >= 1)
  {
    uint64_t v28 = **(void **)(a1 + 56);
    unint64_t v29 = (int)v90;
    do
    {
      if (!*(unsigned char *)(v28 + v29)) {
        *(void *)((char *)v23 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
      }
      ++v29;
    }
    while ((uint64_t)v29 < (int)a2);
  }
  int v89 = this;
  int v101 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  *(_OWORD *)unint64_t v98 = 0u;
  *(_OWORD *)int v95 = 0u;
  *(_OWORD *)uint64_t v96 = 0u;
  *(_OWORD *)unint64_t v93 = 0u;
  long long v94 = 0u;
  *(_OWORD *)int v92 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v92, v8, v25);
  if ((int)v90 >= 1)
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)(a1 + 24);
      uint64_t v32 = *(void *)(v31 + 56);
      uint64_t v33 = *(void *)(v32 + 8 * v30);
      unint64_t v34 = v30 + 1;
      uint64_t v35 = *(void *)(v32 + 8 * (v30 + 1)) - v33;
      if (v35 >= 1)
      {
        uint64_t v36 = (int *)(*(void *)(v31 + 32) + 4 * v33);
        do
        {
          unint64_t v38 = *v36++;
          int v37 = v38;
          if (((*(void *)((char *)v23 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) != 0
            && (v23[v30 >> 6] & (1 << v30)) != 0)
          {
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v92, v37, v30);
          }
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v34 != v90);
  }
  if ((int)v7 <= 0)
  {
    uint64_t v40 = (int)v90;
  }
  else
  {
    double v39 = v93[1];
    uint64_t v40 = (int)v90;
    uint64_t v41 = v8;
    unint64_t v42 = (int)v90;
    do
    {
      if (!*v39++) {
        *(void *)((char *)v23 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v42);
      }
      ++v42;
      --v41;
    }
    while (v41);
  }
  if ((int)v8 >= 1)
  {
    while (1)
    {
      uint64_t v44 = 0;
      int v45 = -1;
      signed int v46 = 0x80000000;
      do
      {
        if ((*(void *)((char *)v23 + (((unint64_t)(v40 + v44) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + v44)))
        {
          int v47 = (*(unsigned char *)(**(void **)(a1 + 56)
                                           + (int)v44
                                           + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                           - **(_DWORD **)(a1 + 24))
                                - 1) <= 3u
              ? dword_23CE7EE50[(char)(*(unsigned char *)(**(void **)(a1 + 56)
                                                + (int)v44
                                                + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                                - **(_DWORD **)(a1 + 24))
                                     - 1)]
              : 0;
          signed int v48 = v47 - *((_DWORD *)v93[1] + v44);
          if (v48 > v46)
          {
            int v45 = v44;
            signed int v46 = v48;
          }
        }
        ++v44;
      }
      while (v8 != v44);
      if (v45 == -1) {
        break;
      }
      uint64_t v49 = (char *)v92[0] + 32 * v45;
      unint64_t v52 = *v49;
      uint64_t v50 = (int *)(v49 + 1);
      unint64_t v51 = v52;
      if (v52) {
        uint64_t v50 = *(int **)v50;
      }
      if (v51 < 2) {
        goto LABEL_90;
      }
      unint64_t v53 = v51 >> 1;
      signed int v54 = 0x80000000;
      int v55 = -1;
      double v56 = &v50[v53];
      do
      {
        unint64_t v59 = *v50;
        if (((*(void *)((char *)v23 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(**(void **)(a1 + 56) + v59) - 1) > 3u)
        {
          int v60 = 30 - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54) {
            goto LABEL_72;
          }
        }
        else
        {
          int v60 = dword_23CE7EE74[(char)(*(unsigned char *)(**(void **)(a1 + 56) + v59) - 1)] - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54) {
            goto LABEL_72;
          }
        }
        long long v61 = *(void **)(a1 + 24);
        uint64_t v62 = v61[7];
        uint64_t v63 = *(void *)(v62 + 8 * v59);
        uint64_t v64 = *(void *)(v62 + ((uint64_t)((v59 << 32) + 0x100000000) >> 29)) - v63;
        if (v64 < 1)
        {
          double v57 = 0.0;
          double v58 = 0.0;
        }
        else
        {
          uint64_t v65 = (_DWORD *)(v61[4] + 4 * v63);
          uint64_t v66 = (double *)(v61[1] + 8 * v63);
          double v58 = 0.0;
          double v57 = 0.0;
          do
          {
            double v67 = *v66++;
            double v68 = v67;
            LODWORD(v67) = *v65++;
            double v69 = fabs(v68);
            if (LODWORD(v67) == v45) {
              double v58 = v69;
            }
            if (v57 < v69) {
              double v57 = v69;
            }
            --v64;
          }
          while (v64);
        }
        if (v58 >= v57 * 0.001)
        {
          signed int v54 = v60;
          int v55 = *v50;
        }
LABEL_72:
        ++v50;
      }
      while (v50 != v56);
      if (v55 == -1) {
        goto LABEL_90;
      }
      uint64_t v70 = **(void **)(a1 + 56);
      if ((*(unsigned char *)(v70 + *(_DWORD *)(*(void *)(a1 + 24) + 4) + v45 - **(_DWORD **)(a1 + 24)) - 1) > 3u)
      {
        unsigned int v71 = 3;
        unint64_t v72 = v55;
        unsigned __int8 v73 = *(unsigned char *)(v70 + v55) - 1;
        if (v73 <= 3u) {
          goto LABEL_92;
        }
LABEL_89:
        if (v71 >= 3) {
          goto LABEL_90;
        }
LABEL_93:
        v89->__begin_[v45] = v55;
        if (*operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 2
          && (operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 336);
          long long v74 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Slack variable ", 15);
          uint64_t v75 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" replaced by column ", 20);
          unint64_t v76 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)". Pivot coefficient magnitude: ", 31);
          uint64_t v77 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v91);
        }
        *(void *)((char *)v23 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v55);
        *(void *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v92, v45, v55);
        std::string v78 = (unint64_t *)((char *)v92[0] + 32 * v45);
        unint64_t v81 = *v78;
        std::string v79 = v78 + 1;
        unint64_t v80 = v81;
        if (v81) {
          std::string v79 = (void *)*v79;
        }
        if (v80 >= 2)
        {
          unint64_t v82 = (2 * v80) & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            int v83 = *(_DWORD *)v79;
            std::string v79 = (void *)((char *)v79 + 4);
            *(void *)((char *)v23 + (((unint64_t)v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            v82 -= 4;
          }
          while (v82);
        }
      }
      else
      {
        unsigned int v71 = dword_23CE7EE84[(char)(*(unsigned char *)(v70
                                              + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                              + v45
                                              - **(_DWORD **)(a1 + 24))
                                   - 1)];
        unint64_t v72 = v55;
        unsigned __int8 v73 = *(unsigned char *)(v70 + v55) - 1;
        if (v73 > 3u) {
          goto LABEL_89;
        }
LABEL_92:
        if (v71 < dword_23CE7EE84[(char)v73]) {
          goto LABEL_93;
        }
LABEL_90:
        *(void *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
      }
    }
  }
  if (__p[1])
  {
    *(void **)&long long v100 = __p[1];
    operator delete(__p[1]);
  }
  if (v98[0]) {
    operator delete(v98[0]);
  }
  if (v96[1]) {
    operator delete(v96[1]);
  }
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
  if (v93[1])
  {
    *(void **)&long long v94 = v93[1];
    operator delete(v93[1]);
  }
  uint64_t v84 = (void **)v92[0];
  if (v92[0])
  {
    double v85 = (void **)v92[1];
    int v86 = v92[0];
    if (v92[1] != v92[0])
    {
      double v87 = (void **)v92[1];
      do
      {
        char v88 = *((unsigned char *)v87 - 32);
        v87 -= 4;
        if (v88) {
          operator delete(*(v85 - 3));
        }
        double v85 = v87;
      }
      while (v87 != v84);
      int v86 = v92[0];
    }
    v92[1] = v84;
    operator delete(v86);
  }
  if (v23) {
    operator delete(v23);
  }
}

void operations_research::glop::InitialBasis::GetDualMarosBasis(uint64_t a1, unsigned int a2, std::vector<int> *a3)
{
}

void operations_research::glop::InitialBasis::GetMarosBasis<true>(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  if (*operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 1
    && (operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v92, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 230);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Starting Maros crash procedure.", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)v92);
  }
  unint64_t v7 = **(int **)(a1 + 24);
  uint64_t v8 = **(unsigned int **)(a1 + 24);
  unint64_t v9 = this->__end_ - this->__begin_;
  if (v7 <= v9)
  {
    if (v7 < v9) {
      this->__end_ = &this->__begin_[v7];
    }
  }
  else
  {
    std::vector<int>::__append(this, v7 - v9);
  }
  uint64_t v90 = (a2 - v7);
  if ((int)v7 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    if (v7 < 8)
    {
      uint64_t v11 = 0;
LABEL_15:
      int v18 = v11 + a2 - v8;
      unsigned int v19 = &begin[v11];
      uint64_t v20 = v8 - v11;
      do
      {
        *v19++ = v18++;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    int32x4_t v12 = vdupq_n_s32(v90);
    int32x4_t v13 = vdupq_n_s32((int)v90 + 4);
    uint64_t v11 = v8 & 0xFFFFFFF8;
    int32x4_t v14 = (int32x4_t)xmmword_23CE7EC40;
    uint64_t v15 = (int32x4_t *)(begin + 4);
    v16.i64[0] = 0x800000008;
    v16.i64[1] = 0x800000008;
    uint64_t v17 = v11;
    do
    {
      v15[-1] = vaddq_s32(v12, v14);
      int32x4_t *v15 = vaddq_s32(v13, v14);
      int32x4_t v14 = vaddq_s32(v14, v16);
      v15 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v11 != v8) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  unint64_t v104 = 0;
  if (!(a2 << 32))
  {
    uint64_t v23 = 0;
    int v25 = a2;
    if ((int)v90 < 1) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  if (a2 << 32 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v21 = (unint64_t)((int)a2 - 1) >> 6;
  double v22 = operator new(8 * (v21 + 1));
  uint64_t v23 = v22;
  uint64_t v103 = (int)a2;
  unint64_t v104 = v21 + 1;
  uint64_t v102 = v22;
  if (a2 >= 0x41uLL) {
    unint64_t v24 = (unint64_t)((int)a2 - 1) >> 6;
  }
  else {
    unint64_t v24 = 0;
  }
  v22[v24] = 0;
  if ((unint64_t)a2 >> 6) {
    memset(v22, 255, 8 * ((unint64_t)(int)a2 >> 6));
  }
  if ((a2 & 0x3F) != 0) {
    v23[(unint64_t)(int)a2 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  }
  int v25 = a2;
  if ((int)v90 >= 1)
  {
LABEL_29:
    unint64_t v26 = 0;
    uint64_t v27 = **(void **)(a1 + 56);
    do
    {
      if (*(unsigned char *)(v27 + v26) == 4 || *(double *)(**(void **)(a1 + 32) + 8 * v26) != 0.0) {
        *(void *)((char *)v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v26);
      }
      ++v26;
    }
    while (v90 != v26);
  }
LABEL_35:
  if ((int)v8 >= 1)
  {
    uint64_t v28 = **(void **)(a1 + 56);
    unint64_t v29 = (int)v90;
    do
    {
      if (!*(unsigned char *)(v28 + v29)) {
        *(void *)((char *)v23 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
      }
      ++v29;
    }
    while ((uint64_t)v29 < (int)a2);
  }
  int v89 = this;
  int v101 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  *(_OWORD *)unint64_t v98 = 0u;
  *(_OWORD *)int v95 = 0u;
  *(_OWORD *)uint64_t v96 = 0u;
  *(_OWORD *)unint64_t v93 = 0u;
  long long v94 = 0u;
  *(_OWORD *)int v92 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v92, v8, v25);
  if ((int)v90 >= 1)
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)(a1 + 24);
      uint64_t v32 = *(void *)(v31 + 56);
      uint64_t v33 = *(void *)(v32 + 8 * v30);
      unint64_t v34 = v30 + 1;
      uint64_t v35 = *(void *)(v32 + 8 * (v30 + 1)) - v33;
      if (v35 >= 1)
      {
        uint64_t v36 = (int *)(*(void *)(v31 + 32) + 4 * v33);
        do
        {
          unint64_t v38 = *v36++;
          int v37 = v38;
          if (((*(void *)((char *)v23 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) != 0
            && (v23[v30 >> 6] & (1 << v30)) != 0)
          {
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v92, v37, v30);
          }
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v34 != v90);
  }
  if ((int)v7 <= 0)
  {
    uint64_t v40 = (int)v90;
  }
  else
  {
    double v39 = v93[1];
    uint64_t v40 = (int)v90;
    uint64_t v41 = v8;
    unint64_t v42 = (int)v90;
    do
    {
      if (!*v39++) {
        *(void *)((char *)v23 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v42);
      }
      ++v42;
      --v41;
    }
    while (v41);
  }
  if ((int)v8 >= 1)
  {
    while (1)
    {
      uint64_t v44 = 0;
      int v45 = -1;
      signed int v46 = 0x80000000;
      do
      {
        if ((*(void *)((char *)v23 + (((unint64_t)(v40 + v44) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + v44)))
        {
          int v47 = (*(unsigned char *)(**(void **)(a1 + 56)
                                           + (int)v44
                                           + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                           - **(_DWORD **)(a1 + 24))
                                - 1) <= 3u
              ? dword_23CE7EE50[(char)(*(unsigned char *)(**(void **)(a1 + 56)
                                                + (int)v44
                                                + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                                - **(_DWORD **)(a1 + 24))
                                     - 1)]
              : 0;
          signed int v48 = v47 - *((_DWORD *)v93[1] + v44);
          if (v48 > v46)
          {
            int v45 = v44;
            signed int v46 = v48;
          }
        }
        ++v44;
      }
      while (v8 != v44);
      if (v45 == -1) {
        break;
      }
      uint64_t v49 = (char *)v92[0] + 32 * v45;
      unint64_t v52 = *v49;
      uint64_t v50 = (int *)(v49 + 1);
      unint64_t v51 = v52;
      if (v52) {
        uint64_t v50 = *(int **)v50;
      }
      if (v51 < 2) {
        goto LABEL_92;
      }
      unint64_t v53 = v51 >> 1;
      signed int v54 = 0x80000000;
      int v55 = -1;
      double v56 = &v50[v53];
      do
      {
        unint64_t v59 = *v50;
        if (((*(void *)((char *)v23 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(**(void **)(a1 + 56) + v59) - 1) > 3u)
        {
          int v60 = 30 - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54) {
            goto LABEL_74;
          }
        }
        else
        {
          int v60 = dword_23CE7EE74[(char)(*(unsigned char *)(**(void **)(a1 + 56) + v59) - 1)] - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54) {
            goto LABEL_74;
          }
        }
        long long v61 = *(void **)(a1 + 24);
        uint64_t v62 = v61[7];
        uint64_t v63 = *(void *)(v62 + 8 * v59);
        uint64_t v64 = *(void *)(v62 + ((uint64_t)((v59 << 32) + 0x100000000) >> 29)) - v63;
        if (v64 < 1)
        {
          double v57 = 0.0;
          double v58 = 0.0;
        }
        else
        {
          uint64_t v65 = (_DWORD *)(v61[4] + 4 * v63);
          uint64_t v66 = (double *)(v61[1] + 8 * v63);
          double v58 = 0.0;
          double v57 = 0.0;
          do
          {
            double v67 = *v66++;
            double v68 = v67;
            LODWORD(v67) = *v65++;
            double v69 = fabs(v68);
            if (LODWORD(v67) == v45) {
              double v58 = v69;
            }
            if (v57 < v69) {
              double v57 = v69;
            }
            --v64;
          }
          while (v64);
        }
        if (v58 >= v57 * 0.001)
        {
          signed int v54 = v60;
          int v55 = *v50;
        }
LABEL_74:
        ++v50;
      }
      while (v50 != v56);
      if (v55 == -1) {
        goto LABEL_92;
      }
      uint64_t v70 = **(void **)(a1 + 56);
      if ((*(unsigned char *)(v70 + *(_DWORD *)(*(void *)(a1 + 24) + 4) + v45 - **(_DWORD **)(a1 + 24)) - 1) > 3u)
      {
        unsigned int v71 = 3;
        unint64_t v72 = v55;
        unsigned __int8 v73 = *(unsigned char *)(v70 + v55) - 1;
        if (v73 <= 3u) {
          goto LABEL_94;
        }
LABEL_91:
        if (v71 >= 3) {
          goto LABEL_92;
        }
LABEL_95:
        v89->__begin_[v45] = v55;
        if (*operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 2
          && (operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 336);
          long long v74 = (void *)google::LogMessage::stream((google::LogMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Slack variable ", 15);
          uint64_t v75 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" replaced by column ", 20);
          unint64_t v76 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)". Pivot coefficient magnitude: ", 31);
          uint64_t v77 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v91);
        }
        *(void *)((char *)v23 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v55);
        *(void *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v92, v45, v55);
        std::string v78 = (unint64_t *)((char *)v92[0] + 32 * v45);
        unint64_t v81 = *v78;
        std::string v79 = v78 + 1;
        unint64_t v80 = v81;
        if (v81) {
          std::string v79 = (void *)*v79;
        }
        if (v80 >= 2)
        {
          unint64_t v82 = (2 * v80) & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            int v83 = *(_DWORD *)v79;
            std::string v79 = (void *)((char *)v79 + 4);
            *(void *)((char *)v23 + (((unint64_t)v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            v82 -= 4;
          }
          while (v82);
        }
      }
      else
      {
        unsigned int v71 = dword_23CE7EE84[(char)(*(unsigned char *)(v70
                                              + *(_DWORD *)(*(void *)(a1 + 24) + 4)
                                              + v45
                                              - **(_DWORD **)(a1 + 24))
                                   - 1)];
        unint64_t v72 = v55;
        unsigned __int8 v73 = *(unsigned char *)(v70 + v55) - 1;
        if (v73 > 3u) {
          goto LABEL_91;
        }
LABEL_94:
        if (v71 < dword_23CE7EE84[(char)v73]) {
          goto LABEL_95;
        }
LABEL_92:
        *(void *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
      }
    }
  }
  if (__p[1])
  {
    *(void **)&long long v100 = __p[1];
    operator delete(__p[1]);
  }
  if (v98[0]) {
    operator delete(v98[0]);
  }
  if (v96[1]) {
    operator delete(v96[1]);
  }
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
  if (v93[1])
  {
    *(void **)&long long v94 = v93[1];
    operator delete(v93[1]);
  }
  uint64_t v84 = (void **)v92[0];
  if (v92[0])
  {
    double v85 = (void **)v92[1];
    int v86 = v92[0];
    if (v92[1] != v92[0])
    {
      double v87 = (void **)v92[1];
      do
      {
        char v88 = *((unsigned char *)v87 - 32);
        v87 -= 4;
        if (v88) {
          operator delete(*(v85 - 3));
        }
        double v85 = v87;
      }
      while (v87 != v84);
      int v86 = v92[0];
    }
    v92[1] = v84;
    operator delete(v86);
  }
  if (v23) {
    operator delete(v23);
  }
}

void operations_research::glop::InitialBasis::CompleteTriangularPrimalBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
}

void operations_research::glop::InitialBasis::CompleteTriangularBasis<false>(uint64_t a1, int a2, std::vector<int> *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(unsigned int **)(a1 + 24);
  unint64_t v7 = (int)*v6;
  uint64_t v8 = *v6;
  long long v97 = 0;
  unint64_t v98 = 0;
  unint64_t v99 = 0;
  if (v7)
  {
    if ((v7 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (v7 - 1) >> 6;
    double v10 = operator new(8 * (v9 + 1));
    uint64_t v11 = v10;
    unint64_t v98 = v7;
    unint64_t v99 = v9 + 1;
    long long v97 = (char *)v10;
    if (v7 >= 0x41) {
      unint64_t v12 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v12 = 0;
    }
    v10[v12] = 0;
    if (v8 >= 0x40) {
      bzero(v10, 8 * (v7 >> 6));
    }
    if ((v7 & 0x3F) != 0) {
      v11[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    std::vector<int>::pointer begin = v3->__begin_;
    unint64_t v14 = v3->__end_ - v3->__begin_;
    BOOL v15 = v7 >= v14;
    std::vector<int>::size_type v16 = v7 - v14;
    if (v7 > v14) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = 0;
    std::vector<int>::pointer begin = a3->__begin_;
    unint64_t v17 = a3->__end_ - a3->__begin_;
    BOOL v15 = v7 >= v17;
    std::vector<int>::size_type v16 = v7 - v17;
    if (v7 > v17)
    {
LABEL_11:
      std::vector<int>::__append(v3, v16, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v15) {
    v3->__end_ = &begin[v7];
  }
LABEL_15:
  if (v8)
  {
    unint64_t v18 = 0;
    std::vector<int>::pointer v19 = v3->__begin_;
    do
    {
      if (v19[v18] == -1) {
        *(void *)((char *)v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      }
      ++v18;
    }
    while (v8 != v18);
  }
  int v96 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v91 = 0u;
  *(_OWORD *)char v88 = 0u;
  long long v89 = 0u;
  uint64_t v20 = a2;
  *(_OWORD *)double v87 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v87, v8, a2);
  if (a2 >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = *(void *)(v22 + 56);
      uint64_t v24 = *(void *)(v23 + 8 * v21);
      uint64_t v25 = v21 + 1;
      uint64_t v26 = *(void *)(v23 + 8 * (v21 + 1)) - v24;
      if (v26 >= 1)
      {
        uint64_t v27 = (int *)(*(void *)(v22 + 32) + 4 * v24);
        do
        {
          unint64_t v29 = *v27++;
          int v28 = v29;
          if ((*(void *)((char *)v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29)) {
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v87, v28, v21);
          }
          --v26;
        }
        while (v26);
      }
      ++v21;
    }
    while (v25 != v20);
    unint64_t v80 = v3;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    int v86 = 0;
    *(void *)a1 = 0;
    while (1)
    {
      double v35 = fabs(*(double *)(**(void **)(a1 + 32) + 8 * v33));
      if (*(double *)a1 >= v35) {
        double v35 = *(double *)a1;
      }
      *(double *)a1 = v35;
      if (*((_DWORD *)__p[0] + v33) != 1) {
        goto LABEL_31;
      }
      if (v32 >= v31) {
        break;
      }
      *(_DWORD *)uint64_t v32 = v33;
      uint64_t v34 = (uint64_t)(v32 + 4);
LABEL_30:
      uint64_t v85 = v34;
      uint64_t v32 = (char *)v34;
LABEL_31:
      if (++v33 == v20)
      {
        double v50 = *(double *)a1;
        unint64_t v51 = v84;
        uint64_t v3 = v80;
        goto LABEL_65;
      }
    }
    uint64_t v36 = (v32 - v30) >> 2;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v31 - v30) >> 1 > v37) {
      unint64_t v37 = (v31 - v30) >> 1;
    }
    if ((unint64_t)(v31 - v30) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v37;
    }
    if (v38)
    {
      if (v38 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v39 = operator new(4 * v38);
      uint64_t v40 = &v39[4 * v36];
      _DWORD *v40 = v33;
      uint64_t v34 = (uint64_t)(v40 + 1);
      if (v32 == v30) {
        goto LABEL_50;
      }
    }
    else
    {
      double v39 = 0;
      uint64_t v40 = (_DWORD *)(4 * v36);
      *(_DWORD *)(4 * v36) = v33;
      uint64_t v34 = 4 * v36 + 4;
      if (v32 == v30) {
        goto LABEL_50;
      }
    }
    unint64_t v41 = v32 - 4 - v30;
    if (v41 >= 0xBC)
    {
      if (&v39[v32 - v30 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v32 - v30 - 4])
      {
        unint64_t v42 = v32;
      }
      else if (&v32[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
      {
        unint64_t v42 = v32;
      }
      else if ((unint64_t)(v30 - v39) >= 0x20)
      {
        uint64_t v44 = (v41 >> 2) + 1;
        uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v42 = &v32[-v45];
        uint64_t v40 = (_DWORD *)((char *)v40 - v45);
        signed int v46 = &v39[4 * v36 - 16];
        int v47 = (long long *)(v32 - 16);
        uint64_t v48 = v44 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v49 = *v47;
          *(v46 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v47 - 1);
          _OWORD *v46 = v49;
          v46 -= 2;
          v47 -= 2;
          v48 -= 8;
        }
        while (v48);
        if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v42 = v32;
      }
    }
    else
    {
      unint64_t v42 = v32;
    }
    do
    {
      int v43 = *((_DWORD *)v42 - 1);
      v42 -= 4;
      *--uint64_t v40 = v43;
    }
    while (v42 != v30);
LABEL_50:
    uint64_t v31 = &v39[4 * v38];
    uint64_t v84 = v40;
    uint64_t v85 = v34;
    int v86 = v31;
    if (v30) {
      operator delete(v30);
    }
    unint64_t v30 = v40;
    goto LABEL_30;
  }
  uint64_t v32 = 0;
  unint64_t v51 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  double v50 = 0.0;
  *(void *)a1 = 0;
LABEL_65:
  double v52 = v50 * 1000.0;
  BOOL v53 = v50 == 0.0;
  double v54 = 1.0;
  if (!v53) {
    double v54 = v52;
  }
  *(double *)a1 = v54;
  std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(&v82, v51, v32, (uint64_t *)(a1 + 16));
  for (uint64_t i = v82; v82 != v83; uint64_t i = v82)
  {
    uint64_t v56 = *i;
    std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(&v82);
    if (*((_DWORD *)__p[0] + (int)v56) == 1)
    {
      double v57 = *(void **)(a1 + 24);
      uint64_t v58 = v57[7];
      uint64_t v59 = *(void *)(v58 + 8 * (int)v56);
      uint64_t v60 = *(void *)(v58 + (((v56 << 32) + 0x100000000) >> 29)) - v59;
      if (v60 >= 1)
      {
        long long v61 = (int *)(v57[4] + 4 * v59);
        uint64_t v62 = (double *)(v57[1] + 8 * v59);
        double v63 = 0.0;
        while (1)
        {
          double v64 = fabs(*v62);
          if (v63 < v64) {
            double v63 = v64;
          }
          int v66 = *v61++;
          int v65 = v66;
          if ((*(void *)&v97[((unint64_t)v66 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v66)) {
            break;
          }
          ++v62;
          if (!--v60)
          {
            int v67 = -1;
            if (fabs(0.0) < v63 * 0.01) {
              goto LABEL_69;
            }
            goto LABEL_82;
          }
        }
        int v67 = v65;
        if (fabs(*v62) < v63 * 0.01) {
          continue;
        }
LABEL_82:
        uint64_t v68 = v67;
        v3->__begin_[v67] = v56;
        *(void *)&v97[((unint64_t)v67 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v67);
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v87, v67, v56);
        double v69 = (unint64_t *)((char *)v87[0] + 32 * v68);
        unint64_t v72 = *v69;
        unsigned int v71 = v69 + 1;
        unint64_t v70 = v72;
        if (v72) {
          unsigned int v71 = (void *)*v71;
        }
        if (v70 >= 2)
        {
          uint64_t v73 = 4 * (v70 >> 1);
          do
          {
            int v74 = *(_DWORD *)v71;
            int v81 = v74;
            if (v74 != v56)
            {
              operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree((uint64_t)v87, v74);
              if (*((_DWORD *)__p[0] + v81) == 1) {
                std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push((uint64_t)&v82, &v81);
              }
            }
            unsigned int v71 = (void *)((char *)v71 + 4);
            v73 -= 4;
          }
          while (v73);
        }
        continue;
      }
      int v67 = -1;
      if (fabs(0.0) >= 0.0 * 0.01) {
        goto LABEL_82;
      }
    }
LABEL_69:
    ;
  }
  if (i)
  {
    int v83 = i;
    operator delete(i);
  }
  if (v51) {
    operator delete(v51);
  }
  if (*((void *)&v94 + 1))
  {
    *(void *)&long long v95 = *((void *)&v94 + 1);
    operator delete(*((void **)&v94 + 1));
  }
  if ((void)v93) {
    operator delete((void *)v93);
  }
  if (*((void *)&v91 + 1)) {
    operator delete(*((void **)&v91 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v88[1])
  {
    *(void **)&long long v89 = v88[1];
    operator delete(v88[1]);
  }
  uint64_t v75 = (void **)v87[0];
  if (v87[0])
  {
    unint64_t v76 = (void **)v87[1];
    uint64_t v77 = v87[0];
    if (v87[1] != v87[0])
    {
      std::string v78 = (void **)v87[1];
      do
      {
        char v79 = *((unsigned char *)v78 - 32);
        v78 -= 4;
        if (v79) {
          operator delete(*(v76 - 3));
        }
        unint64_t v76 = v78;
      }
      while (v78 != v75);
      uint64_t v77 = v87[0];
    }
    v87[1] = v75;
    operator delete(v77);
  }
  if (v97) {
    operator delete(v97);
  }
}

void sub_23CB7266C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::InitialBasis::CompleteTriangularDualBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
}

void operations_research::glop::InitialBasis::CompleteTriangularBasis<true>(uint64_t a1, int a2, std::vector<int> *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(unsigned int **)(a1 + 24);
  unint64_t v7 = (int)*v6;
  uint64_t v8 = *v6;
  int v96 = 0;
  unint64_t v97 = 0;
  unint64_t v98 = 0;
  if (v7)
  {
    if ((v7 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (v7 - 1) >> 6;
    double v10 = operator new(8 * (v9 + 1));
    uint64_t v11 = v10;
    unint64_t v97 = v7;
    unint64_t v98 = v9 + 1;
    int v96 = (char *)v10;
    if (v7 >= 0x41) {
      unint64_t v12 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v12 = 0;
    }
    v10[v12] = 0;
    if (v8 >= 0x40) {
      bzero(v10, 8 * (v7 >> 6));
    }
    if ((v7 & 0x3F) != 0) {
      v11[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    std::vector<int>::pointer begin = v3->__begin_;
    unint64_t v14 = v3->__end_ - v3->__begin_;
    BOOL v15 = v7 >= v14;
    std::vector<int>::size_type v16 = v7 - v14;
    if (v7 > v14) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = 0;
    std::vector<int>::pointer begin = a3->__begin_;
    unint64_t v17 = a3->__end_ - a3->__begin_;
    BOOL v15 = v7 >= v17;
    std::vector<int>::size_type v16 = v7 - v17;
    if (v7 > v17)
    {
LABEL_11:
      std::vector<int>::__append(v3, v16, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v15) {
    v3->__end_ = &begin[v7];
  }
LABEL_15:
  if (v8)
  {
    unint64_t v18 = 0;
    std::vector<int>::pointer v19 = v3->__begin_;
    do
    {
      if (v19[v18] == -1) {
        *(void *)((char *)v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      }
      ++v18;
    }
    while (v8 != v18);
  }
  int v95 = 0;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v90 = 0u;
  *(_OWORD *)double v87 = 0u;
  long long v88 = 0u;
  uint64_t v20 = a2;
  *(_OWORD *)int v86 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v86, v8, a2);
  if (a2 > 0)
  {
    uint64_t v21 = 0;
    do
    {
      if (*(double *)(**(void **)(a1 + 32) + 8 * v21) == 0.0)
      {
        uint64_t v22 = *(void *)(a1 + 24);
        uint64_t v23 = *(void *)(v22 + 56);
        uint64_t v24 = *(void *)(v23 + 8 * v21);
        uint64_t v25 = *(void *)(v23 + 8 * (v21 + 1)) - v24;
        if (v25 >= 1)
        {
          uint64_t v26 = (int *)(*(void *)(v22 + 32) + 4 * v24);
          do
          {
            unint64_t v28 = *v26++;
            int v27 = v28;
            if ((*(void *)((char *)v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28)) {
              operations_research::glop::MatrixNonZeroPattern::AddEntry(v86, v27, v21);
            }
            --v25;
          }
          while (v25);
        }
      }
      ++v21;
    }
    while (v21 != v20);
    char v79 = v3;
    unint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    *(void *)a1 = 0;
    while (1)
    {
      double v34 = fabs(*(double *)(**(void **)(a1 + 32) + 8 * v32));
      if (*(double *)a1 >= v34) {
        double v34 = *(double *)a1;
      }
      *(double *)a1 = v34;
      if (*((_DWORD *)__p[0] + v32) != 1) {
        goto LABEL_32;
      }
      if (v31 >= v30) {
        break;
      }
      *(_DWORD *)uint64_t v31 = v32;
      uint64_t v33 = (uint64_t)(v31 + 4);
LABEL_31:
      uint64_t v84 = v33;
      uint64_t v31 = (char *)v33;
LABEL_32:
      if (++v32 == v20)
      {
        double v49 = *(double *)a1;
        double v50 = v83;
        uint64_t v3 = v79;
        goto LABEL_66;
      }
    }
    uint64_t v35 = (v31 - v29) >> 2;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v30 - v29) >> 1 > v36) {
      unint64_t v36 = (v30 - v29) >> 1;
    }
    if ((unint64_t)(v30 - v29) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37)
    {
      if (v37 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v38 = operator new(4 * v37);
      double v39 = &v38[4 * v35];
      *double v39 = v32;
      uint64_t v33 = (uint64_t)(v39 + 1);
      if (v31 == v29) {
        goto LABEL_51;
      }
    }
    else
    {
      unint64_t v38 = 0;
      double v39 = (_DWORD *)(4 * v35);
      *(_DWORD *)(4 * v3std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v32;
      uint64_t v33 = 4 * v35 + 4;
      if (v31 == v29) {
        goto LABEL_51;
      }
    }
    unint64_t v40 = v31 - 4 - v29;
    if (v40 >= 0xBC)
    {
      if (&v38[v31 - v29 - 4 - (v40 & 0xFFFFFFFFFFFFFFFCLL)] > &v38[v31 - v29 - 4])
      {
        unint64_t v41 = v31;
      }
      else if (&v31[-(v40 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v31 - 4)
      {
        unint64_t v41 = v31;
      }
      else if ((unint64_t)(v29 - v38) >= 0x20)
      {
        uint64_t v43 = (v40 >> 2) + 1;
        uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v41 = &v31[-v44];
        double v39 = (_DWORD *)((char *)v39 - v44);
        uint64_t v45 = &v38[4 * v35 - 16];
        signed int v46 = (long long *)(v31 - 16);
        uint64_t v47 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v48 = *v46;
          *(v45 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v46 - 1);
          _OWORD *v45 = v48;
          v45 -= 2;
          v46 -= 2;
          v47 -= 8;
        }
        while (v47);
        if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v41 = v31;
      }
    }
    else
    {
      unint64_t v41 = v31;
    }
    do
    {
      int v42 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *--double v39 = v42;
    }
    while (v41 != v29);
LABEL_51:
    unint64_t v30 = &v38[4 * v37];
    int v83 = v39;
    uint64_t v84 = v33;
    uint64_t v85 = v30;
    if (v29) {
      operator delete(v29);
    }
    unint64_t v29 = v39;
    goto LABEL_31;
  }
  uint64_t v31 = 0;
  double v50 = 0;
  int v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  double v49 = 0.0;
  *(void *)a1 = 0;
LABEL_66:
  double v51 = v49 * 1000.0;
  BOOL v52 = v49 == 0.0;
  double v53 = 1.0;
  if (!v52) {
    double v53 = v51;
  }
  *(double *)a1 = v53;
  std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(&v81, v50, v31, (uint64_t *)(a1 + 16));
  for (uint64_t i = v81; v81 != v82; uint64_t i = v81)
  {
    uint64_t v55 = *i;
    std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(&v81);
    if (*((_DWORD *)__p[0] + (int)v55) == 1)
    {
      uint64_t v56 = *(void **)(a1 + 24);
      uint64_t v57 = v56[7];
      uint64_t v58 = *(void *)(v57 + 8 * (int)v55);
      uint64_t v59 = *(void *)(v57 + (((v55 << 32) + 0x100000000) >> 29)) - v58;
      if (v59 >= 1)
      {
        uint64_t v60 = (int *)(v56[4] + 4 * v58);
        long long v61 = (double *)(v56[1] + 8 * v58);
        double v62 = 0.0;
        while (1)
        {
          double v63 = fabs(*v61);
          if (v62 < v63) {
            double v62 = v63;
          }
          int v65 = *v60++;
          int v64 = v65;
          if ((*(void *)&v96[((unint64_t)v65 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v65)) {
            break;
          }
          ++v61;
          if (!--v59)
          {
            int v66 = -1;
            if (fabs(0.0) < v62 * 0.01) {
              goto LABEL_70;
            }
            goto LABEL_83;
          }
        }
        int v66 = v64;
        if (fabs(*v61) < v62 * 0.01) {
          continue;
        }
LABEL_83:
        uint64_t v67 = v66;
        v3->__begin_[v66] = v55;
        *(void *)&v96[((unint64_t)v66 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v66);
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v86, v66, v55);
        uint64_t v68 = (unint64_t *)((char *)v86[0] + 32 * v67);
        unint64_t v71 = *v68;
        unint64_t v70 = v68 + 1;
        unint64_t v69 = v71;
        if (v71) {
          unint64_t v70 = (void *)*v70;
        }
        if (v69 >= 2)
        {
          uint64_t v72 = 4 * (v69 >> 1);
          do
          {
            int v73 = *(_DWORD *)v70;
            int v80 = v73;
            if (v73 != v55)
            {
              operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree((uint64_t)v86, v73);
              if (*((_DWORD *)__p[0] + v80) == 1) {
                std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push((uint64_t)&v81, &v80);
              }
            }
            unint64_t v70 = (void *)((char *)v70 + 4);
            v72 -= 4;
          }
          while (v72);
        }
        continue;
      }
      int v66 = -1;
      if (fabs(0.0) >= 0.0 * 0.01) {
        goto LABEL_83;
      }
    }
LABEL_70:
    ;
  }
  if (i)
  {
    unint64_t v82 = i;
    operator delete(i);
  }
  if (v50) {
    operator delete(v50);
  }
  if (*((void *)&v93 + 1))
  {
    *(void *)&long long v94 = *((void *)&v93 + 1);
    operator delete(*((void **)&v93 + 1));
  }
  if ((void)v92) {
    operator delete((void *)v92);
  }
  if (*((void *)&v90 + 1)) {
    operator delete(*((void **)&v90 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v87[1])
  {
    *(void **)&long long v88 = v87[1];
    operator delete(v87[1]);
  }
  int v74 = (void **)v86[0];
  if (v86[0])
  {
    uint64_t v75 = (void **)v86[1];
    unint64_t v76 = v86[0];
    if (v86[1] != v86[0])
    {
      uint64_t v77 = (void **)v86[1];
      do
      {
        char v78 = *((unsigned char *)v77 - 32);
        v77 -= 4;
        if (v78) {
          operator delete(*(v75 - 3));
        }
        uint64_t v75 = v77;
      }
      while (v77 != v74);
      unint64_t v76 = v86[0];
    }
    v86[1] = v74;
    operator delete(v76);
  }
  if (v96) {
    operator delete(v96);
  }
}

void sub_23CB72DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = **(void **)(*a1 + 56);
  int v6 = *(unsigned __int8 *)(v5 + a2);
  if ((v6 - 1) > 3u)
  {
    unsigned int v7 = 2;
    uint64_t v8 = a3;
    int v9 = *(unsigned __int8 *)(v5 + a3);
    char v10 = v9 - 1;
    if ((v9 - 1) > 3u)
    {
LABEL_5:
      BOOL v11 = v7 >= 2;
      if (v7 != 2) {
        return !v11;
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v7 = dword_23CE7EE60[(char)(v6 - 1)];
    uint64_t v8 = a3;
    int v9 = *(unsigned __int8 *)(v5 + a3);
    char v10 = v9 - 1;
    if ((v9 - 1) > 3u) {
      goto LABEL_5;
    }
  }
  unsigned int v12 = dword_23CE7EE60[v10];
  BOOL v11 = v7 >= v12;
  if (v7 != v12) {
    return !v11;
  }
LABEL_11:
  if (v6 == 3)
  {
    double v13 = *(double *)(**(void **)(v4 + 40) + 8 * a2) - *(double *)(**(void **)(v4 + 48) + 8 * a2);
  }
  else if (v6 == 2)
  {
    double v13 = -*(double *)(**(void **)(v4 + 48) + 8 * a2);
  }
  else
  {
    double v13 = 0.0;
    if (v6 == 1) {
      double v13 = *(double *)(**(void **)(v4 + 40) + 8 * a2);
    }
  }
  uint64_t v14 = **(void **)(v4 + 32);
  double v15 = v13 + fabs(*(double *)(v14 + 8 * a2)) / *(double *)v4;
  if (v9 == 3)
  {
    double v16 = *(double *)(**(void **)(v4 + 40) + 8 * v8) - *(double *)(**(void **)(v4 + 48) + 8 * v8);
  }
  else if (v9 == 2)
  {
    double v16 = -*(double *)(**(void **)(v4 + 48) + 8 * v8);
  }
  else
  {
    double v16 = 0.0;
    if (v9 == 1) {
      double v16 = *(double *)(**(void **)(v4 + 40) + 8 * v8);
    }
  }
  return v15 < v16 + fabs(*(double *)(v14 + 8 * v8)) / *(double *)v4;
}

BOOL operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = **(void **)(*a1 + 56);
  int v6 = *(unsigned __int8 *)(v5 + (int)a2);
  if ((v6 - 1) > 3u)
  {
    unsigned int v7 = 2;
    uint64_t v8 = (int)a3;
    int v9 = *(unsigned __int8 *)(v5 + (int)a3);
    char v10 = v9 - 1;
    if ((v9 - 1) > 3u)
    {
LABEL_5:
      BOOL v11 = v7 > 2;
      if (v7 != 2) {
        return v11;
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v7 = dword_23CE7EE60[(char)(v6 - 1)];
    uint64_t v8 = (int)a3;
    int v9 = *(unsigned __int8 *)(v5 + (int)a3);
    char v10 = v9 - 1;
    if ((v9 - 1) > 3u) {
      goto LABEL_5;
    }
  }
  unsigned int v12 = dword_23CE7EE60[v10];
  BOOL v11 = v7 > v12;
  if (v7 != v12) {
    return v11;
  }
LABEL_11:
  uint64_t v13 = *(void *)(*(void *)(v4 + 24) + 56);
  uint64_t v14 = *(void *)(v13 + (((a2 << 32) + 0x100000000) >> 29)) - *(void *)(v13 + 8 * (int)a2);
  uint64_t v15 = *(void *)(v13 + (((a3 << 32) + 0x100000000) >> 29)) - *(void *)(v13 + 8 * v8);
  if (v14 != v15) {
    return v14 > v15;
  }
  if (v6 == 3)
  {
    double v16 = *(double *)(**(void **)(v4 + 40) + 8 * (int)a2) - *(double *)(**(void **)(v4 + 48) + 8 * (int)a2);
  }
  else if (v6 == 2)
  {
    double v16 = -*(double *)(**(void **)(v4 + 48) + 8 * (int)a2);
  }
  else
  {
    double v16 = 0.0;
    if (v6 == 1) {
      double v16 = *(double *)(**(void **)(v4 + 40) + 8 * (int)a2);
    }
  }
  uint64_t v17 = **(void **)(v4 + 32);
  double v18 = v16 + fabs(*(double *)(v17 + 8 * (int)a2)) / *(double *)v4;
  if (v9 == 3)
  {
    double v19 = *(double *)(**(void **)(v4 + 40) + 8 * v8) - *(double *)(**(void **)(v4 + 48) + 8 * v8);
  }
  else if (v9 == 2)
  {
    double v19 = -*(double *)(**(void **)(v4 + 48) + 8 * v8);
  }
  else
  {
    double v19 = 0.0;
    if (v9 == 1) {
      double v19 = *(double *)(**(void **)(v4 + 40) + 8 * v8);
    }
  }
  return v18 > v19 + fabs(*(double *)(v17 + 8 * v8)) / *(double *)v4;
}

void *std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = (unsigned int *)*result;
  uint64_t v2 = result[1];
  uint64_t v25 = result[3];
  uint64_t v4 = v2 - (void)v3;
  if (v2 - (uint64_t)v3 >= 5)
  {
    uint64_t v24 = v2;
    uint64_t v5 = 0;
    uint64_t v6 = v4 >> 2;
    unsigned int v23 = *v3;
    int64_t v7 = (unint64_t)((v4 >> 2) - 2) >> 1;
    uint64_t v22 = (char *)v3;
    do
    {
      while (1)
      {
        BOOL v11 = &v3[v5];
        unsigned int v12 = v11[1];
        char v10 = v11 + 1;
        uint64_t v9 = v12;
        uint64_t v13 = (2 * v5) | 1;
        uint64_t v14 = 2 * v5 + 2;
        if (v14 < v6) {
          break;
        }
        uint64_t v5 = (2 * v5) | 1;
        *uint64_t v3 = v9;
        uint64_t v3 = v10;
        if (v13 > v7) {
          goto LABEL_9;
        }
      }
      unsigned int v8 = v10[1];
      uint64_t result = (void *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, v9, v8);
      if (result)
      {
        LODWORD(v9) = v8;
        ++v10;
        uint64_t v5 = v14;
      }
      else
      {
        uint64_t v5 = v13;
      }
      *uint64_t v3 = v9;
      uint64_t v3 = v10;
    }
    while (v5 <= v7);
LABEL_9:
    uint64_t v2 = v24;
    uint64_t v15 = (unsigned int *)(v24 - 4);
    if (v10 == (unsigned int *)(v24 - 4))
    {
      *char v10 = v23;
    }
    else
    {
      *char v10 = *v15;
      unsigned int *v15 = v23;
      uint64_t v16 = (char *)v10 - v22 + 4;
      if (v16 >= 5)
      {
        unint64_t v17 = (((unint64_t)v16 >> 2) - 2) >> 1;
        double v18 = (unsigned int *)&v22[4 * v17];
        unsigned int v19 = *v18;
        uint64_t v20 = *v10;
        uint64_t result = (void *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, *v18, v20);
        if (result)
        {
          do
          {
            uint64_t v21 = v18;
            *char v10 = v19;
            if (!v17) {
              break;
            }
            unint64_t v17 = (v17 - 1) >> 1;
            double v18 = (unsigned int *)&v22[4 * v17];
            unsigned int v19 = *v18;
            uint64_t result = (void *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, *v18, v20);
            char v10 = v21;
          }
          while ((result & 1) != 0);
          unsigned int *v21 = v20;
        }
      }
    }
  }
  v1[1] = v2 - 4;
  return result;
}

void std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v10];
    _DWORD *v15 = *a2;
    int64_t v7 = (char *)(v15 + 1);
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      uint64_t v15 = (_DWORD *)((char *)v15 - v18);
      unsigned int v19 = &v14[4 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v20 - 1);
        *unsigned int v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_32:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = *a2;
    int64_t v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v24 = *(char **)a1;
  uint64_t v32 = *(void *)(a1 + 24);
  if (v7 - v24 >= 5)
  {
    unint64_t v25 = (((unint64_t)(v7 - v24) >> 2) - 2) >> 1;
    uint64_t v26 = &v24[4 * v25];
    int v27 = *(_DWORD *)v26;
    unsigned int v30 = *((_DWORD *)v7 - 1);
    unint64_t v29 = v7 - 4;
    uint64_t v28 = v30;
    if (operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v32, *(unsigned int *)v26, v30))
    {
      do
      {
        uint64_t v31 = v26;
        *(_DWORD *)unint64_t v29 = v27;
        if (!v25) {
          break;
        }
        unint64_t v25 = (v25 - 1) >> 1;
        uint64_t v26 = &v24[4 * v25];
        int v27 = *(_DWORD *)v26;
        unint64_t v29 = v31;
      }
      while (operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v32, *(unsigned int *)v26, v28));
      *(_DWORD *)uint64_t v31 = v28;
    }
  }
}

void *std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(void *a1, unsigned char *a2, unsigned char *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v6 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v7 = *a4;
    a1[3] = *a4;
    uint64_t v20 = v7;
  }
  else
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(a3 - a2);
    BOOL v11 = (BOOL)v10;
    *a1 = v10;
    a1[1] = v10;
    uint64_t v12 = &v10[4 * (v6 >> 2)];
    a1[2] = v12;
    if (a3 != a2) {
      memmove(v10, a2, v6);
    }
    a1[1] = v12;
    uint64_t v13 = *a4;
    a1[3] = *a4;
    uint64_t v20 = v13;
    uint64_t v14 = (uint64_t)&v12[-v11];
    if ((uint64_t)&v12[-v11] >= 5)
    {
      uint64_t v15 = v14 >> 2;
      unint64_t v16 = (unint64_t)((v14 >> 2) - 2) >> 1;
      unint64_t v17 = v16 + 1;
      uint64_t v18 = (unsigned int *)(v11 + 4 * v16);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::TriangularColumnComparator &,std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>>(v11, &v20, v15, v18--);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_23CB7364C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::TriangularColumnComparator &,std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>>(BOOL result, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    BOOL v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v8 = a3;
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 | 1;
      uint64_t v12 = (unsigned int *)(result + 4 * (v10 | 1));
      uint64_t v13 = v10 + 2;
      uint64_t v14 = *v12;
      if (v10 + 2 >= a3)
      {
        uint64_t v23 = *a4;
        uint64_t result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
        if (!result) {
          goto LABEL_18;
        }
      }
      else
      {
        unint64_t v15 = v4 >> 1;
        unsigned int v16 = v12[1];
        BOOL v17 = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v16);
        if (v17) {
          LODWORD(v14) = v16;
        }
        uint64_t v7 = v15;
        uint64_t v8 = a3;
        if (v17)
        {
          ++v12;
          uint64_t v11 = v13;
        }
        uint64_t v23 = *v5;
        uint64_t result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
        if (!result)
        {
LABEL_18:
          while (1)
          {
            _DWORD *v5 = v14;
            uint64_t v5 = v12;
            if (v7 < v11) {
              break;
            }
            uint64_t v20 = (2 * v11) | 1;
            uint64_t v12 = (unsigned int *)(v6 + 4 * v20);
            uint64_t v21 = 2 * v11 + 2;
            LODWORD(v14) = *v12;
            if (v21 < v8)
            {
              unsigned int v18 = v12[1];
              BOOL v19 = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, *v12, v18);
              if (v19)
              {
                LODWORD(v14) = v18;
                ++v12;
              }
              uint64_t v8 = a3;
              if (v19) {
                uint64_t v11 = v21;
              }
              else {
                uint64_t v11 = v20;
              }
              uint64_t result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
              if (result) {
                break;
              }
            }
            else
            {
              uint64_t v11 = (2 * v11) | 1;
              uint64_t result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
              if (result) {
                break;
              }
            }
          }
          _DWORD *v5 = v23;
        }
      }
    }
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(int *result, int *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
  uint64_t v85 = a2;
LABEL_3:
  uint64_t v12 = 1 - a4;
  int v84 = a5;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v72 = *(a2 - 1);
          int v73 = *v11;
          uint64_t result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v72, *v11);
          if (result)
          {
            *uint64_t v11 = v72;
            *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v73;
          }
          break;
        case 3uLL:
          int v74 = *v11;
          int v75 = v11[1];
          BOOL v76 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v75, *v11);
          int v77 = *(a2 - 1);
          uint64_t result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v77, v75);
          if (v76)
          {
            if (result)
            {
              *uint64_t v10 = v77;
              *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v74;
            }
            else
            {
              *uint64_t v10 = v75;
              v10[1] = v74;
              int v83 = *(a2 - 1);
              uint64_t result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v83, v74);
              if (result)
              {
                v10[1] = v83;
                *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v74;
              }
            }
          }
          else if (result)
          {
            v10[1] = v77;
            *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v75;
            int v82 = *v10;
            int v81 = v10[1];
            uint64_t result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v81, *v10);
            if (result)
            {
              *uint64_t v10 = v81;
              v10[1] = v82;
            }
          }
          break;
        case 4uLL:
          uint64_t result = (int *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = (int *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v78 = (v15 - 2) >> 1;
        unint64_t v79 = v78 + 1;
        int v80 = &v11[v78];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((BOOL)v11, a3, a2 - v11, v80--);
          --v79;
        }
        while (v79);
        return std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v11, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = &v11[v15 >> 1];
    int v18 = *(a2 - 1);
    int v86 = v17;
    if ((unint64_t)v14 < 0x201)
    {
      int v23 = *v11;
      int v24 = *v17;
      BOOL v25 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v10, *v17);
      BOOL v26 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v23);
      if (v25)
      {
        if (v26)
        {
          *int v86 = v18;
          goto LABEL_33;
        }
        *int v86 = v23;
        *uint64_t v10 = v24;
        int v44 = *(a2 - 1);
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v44, v24))
        {
          *uint64_t v10 = v44;
LABEL_33:
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v24;
        }
      }
      else if (v26)
      {
        *uint64_t v10 = v18;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v23;
        int v29 = *v10;
        int v30 = *v86;
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v10, *v86))
        {
          *int v86 = v29;
          *uint64_t v10 = v30;
          if (a5) {
            goto LABEL_62;
          }
          goto LABEL_35;
        }
      }
      if (a5) {
        goto LABEL_62;
      }
      goto LABEL_35;
    }
    int v19 = *v17;
    int v20 = *v11;
    BOOL v21 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v17, *v10);
    BOOL v22 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v19);
    if (v21)
    {
      if (v22)
      {
        *uint64_t v10 = v18;
      }
      else
      {
        *uint64_t v10 = v19;
        *int v86 = v20;
        int v31 = *(a2 - 1);
        if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v31, v20)) {
          goto LABEL_25;
        }
        *int v86 = v31;
      }
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v20;
    }
    else if (v22)
    {
      *int v86 = v18;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v19;
      int v27 = *v86;
      int v28 = *v10;
      if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v86, *v10))
      {
        *uint64_t v10 = v27;
        *int v86 = v28;
      }
    }
LABEL_25:
    uint64_t v32 = a2;
    uint64_t v33 = &v10[v16];
    int v36 = *(v33 - 1);
    uint64_t v35 = v33 - 1;
    int v34 = v36;
    int v37 = v10[1];
    BOOL v38 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v36, v37);
    int v39 = *(v32 - 2);
    BOOL v40 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v39, v36);
    if (v38)
    {
      if (v40)
      {
        v10[1] = v39;
        unint64_t v41 = v85;
      }
      else
      {
        v10[1] = v34;
        int *v35 = v37;
        unint64_t v41 = v85;
        int v45 = *(v85 - 2);
        if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v45, v37)) {
          goto LABEL_40;
        }
        int *v35 = v45;
      }
      *(v41 - 2) = v37;
    }
    else
    {
      unint64_t v41 = v85;
      if (v40)
      {
        int *v35 = v39;
        *(v85 - 2) = v34;
        int v42 = *v35;
        int v43 = v10[1];
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v35, v43))
        {
          v10[1] = v42;
          int *v35 = v43;
        }
      }
    }
LABEL_40:
    signed int v46 = &v10[v16];
    int v49 = v46[1];
    uint64_t v47 = v46 + 1;
    int v48 = v49;
    int v50 = v10[2];
    BOOL v51 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v49, v50);
    int v52 = *(v41 - 3);
    BOOL v53 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v52, v49);
    if (v51)
    {
      a5 = v84;
      if (v53)
      {
        void v10[2] = v52;
        double v54 = v85;
        uint64_t v55 = v86;
      }
      else
      {
        void v10[2] = v48;
        *uint64_t v47 = v50;
        int v58 = *(v85 - 3);
        uint64_t v55 = v86;
        if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v58, v50)) {
          goto LABEL_49;
        }
        *uint64_t v47 = v58;
        double v54 = v85;
      }
      *(v54 - 3) = v50;
    }
    else
    {
      a5 = v84;
      uint64_t v55 = v86;
      if (v53)
      {
        *uint64_t v47 = v52;
        *(v85 - 3) = v48;
        int v56 = *v47;
        int v57 = v10[2];
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v47, v57))
        {
          void v10[2] = v56;
          *uint64_t v47 = v57;
        }
      }
    }
LABEL_49:
    int v59 = *v55;
    int v60 = *v35;
    BOOL v61 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v55, *v35);
    int v62 = *v47;
    BOOL v63 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v47, v59);
    if (v61)
    {
      if (v63)
      {
        int v64 = v86;
LABEL_57:
        int *v35 = v62;
        *uint64_t v47 = v60;
        a2 = v85;
        int v66 = *v10;
        *uint64_t v10 = v59;
        *int v64 = v66;
        if (a5) {
          goto LABEL_62;
        }
        goto LABEL_35;
      }
      int *v35 = v59;
      int v64 = v86;
      *int v86 = v60;
      uint64_t v35 = v86;
      int v59 = v62;
      if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v62, v60)) {
        goto LABEL_57;
      }
      a2 = v85;
      int v68 = *v10;
      *uint64_t v10 = v60;
      *int v86 = v68;
      if (a5) {
        goto LABEL_62;
      }
    }
    else
    {
      if (!v63)
      {
        a2 = v85;
        int v67 = *v10;
        *uint64_t v10 = v59;
        *int v86 = v67;
        if (a5) {
          goto LABEL_62;
        }
        goto LABEL_35;
      }
      int v64 = v86;
      *int v86 = v62;
      *uint64_t v47 = v59;
      uint64_t v47 = v86;
      int v59 = v60;
      if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v62, v60)) {
        goto LABEL_57;
      }
      a2 = v85;
      int v65 = *v10;
      *uint64_t v10 = v62;
      *int v86 = v65;
      if (a5) {
        goto LABEL_62;
      }
    }
LABEL_35:
    if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *(v10 - 1), *v10))
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(v10, a2, a3);
      uint64_t v11 = result;
LABEL_66:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
LABEL_62:
    unint64_t v69 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(v10, a2, a3);
    if ((v70 & 1) == 0) {
      goto LABEL_65;
    }
    BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v69, a3);
    uint64_t v11 = v69 + 1;
    uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v69 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v69;
      if (v71) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v71)
    {
LABEL_65:
      uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v10, v69, a3, -v13, a5 & 1);
      uint64_t v11 = v69 + 1;
      goto LABEL_66;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v11, a2, a3);
  }
  else
  {
    return (int *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((uint64_t)v11, a2, a3);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, uint64_t *a3)
{
  if (result == a2) {
    return result;
  }
  unint64_t v4 = result;
  char v5 = result + 1;
  if (result + 1 == a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result;
  while (2)
  {
    uint64_t v10 = v5;
    int v12 = *v8;
    int v11 = v8[1];
    uint64_t result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, *v8);
    if (!result) {
      goto LABEL_6;
    }
    v8[1] = v12;
    uint64_t v9 = v4;
    if (v8 == v4) {
      goto LABEL_5;
    }
    uint64_t v13 = *a3;
    uint64_t v14 = v7;
    while (1)
    {
      int v16 = *(int *)((char *)v4 + v14 - 4);
      if (v11 == v16)
      {
LABEL_4:
        uint64_t v9 = v8;
        goto LABEL_5;
      }
      uint64_t v17 = **(void **)(v13 + 56);
      int v18 = *(unsigned __int8 *)(v17 + v11);
      if ((v18 - 1) > 3u)
      {
        unsigned int v19 = 2;
        uint64_t v20 = v16;
        int v21 = *(unsigned __int8 *)(v17 + v16);
        char v22 = v21 - 1;
        uint64_t result = (int *)(v21 - 1);
        if (result > 3)
        {
LABEL_16:
          BOOL v23 = v19 >= 2;
          if (v19 != 2) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else
      {
        unsigned int v19 = dword_23CE7EE60[(char)(v18 - 1)];
        uint64_t v20 = v16;
        int v21 = *(unsigned __int8 *)(v17 + v16);
        char v22 = v21 - 1;
        uint64_t result = (int *)(v21 - 1);
        if (result > 3) {
          goto LABEL_16;
        }
      }
      unsigned int v24 = dword_23CE7EE60[v22];
      BOOL v23 = v19 >= v24;
      if (v19 != v24)
      {
LABEL_17:
        if (v23) {
          goto LABEL_4;
        }
        goto LABEL_12;
      }
LABEL_22:
      if (v18 == 3)
      {
        double v25 = *(double *)(**(void **)(v13 + 40) + 8 * v11) - *(double *)(**(void **)(v13 + 48) + 8 * v11);
LABEL_28:
        if (v21 == 3) {
          goto LABEL_10;
        }
        goto LABEL_31;
      }
      if (v18 != 2)
      {
        double v25 = 0.0;
        if (v18 == 1)
        {
          double v25 = *(double *)(**(void **)(v13 + 40) + 8 * v11);
          if (v21 == 3) {
            goto LABEL_10;
          }
          goto LABEL_31;
        }
        goto LABEL_28;
      }
      double v25 = -*(double *)(**(void **)(v13 + 48) + 8 * v11);
      if (v21 == 3)
      {
LABEL_10:
        double v15 = *(double *)(**(void **)(v13 + 40) + 8 * v20) - *(double *)(**(void **)(v13 + 48) + 8 * v20);
        goto LABEL_11;
      }
LABEL_31:
      if (v21 == 2)
      {
        double v15 = -*(double *)(**(void **)(v13 + 48) + 8 * v20);
      }
      else
      {
        double v15 = 0.0;
        if (v21 == 1) {
          double v15 = *(double *)(**(void **)(v13 + 40) + 8 * v20);
        }
      }
LABEL_11:
      if (v25 + fabs(*(double *)(**(void **)(v13 + 32) + 8 * v11)) / *(double *)v13 >= v15
                                                                                          + fabs(*(double *)(**(void **)(v13 + 32) + 8 * v20))
                                                                                          / *(double *)v13)
        break;
LABEL_12:
      --v8;
      *(int *)((char *)v4 + v14) = v16;
      v14 -= 4;
      if (!v14)
      {
        uint64_t v9 = v4;
        goto LABEL_5;
      }
    }
    uint64_t v9 = (int *)((char *)v4 + v14);
LABEL_5:
    *uint64_t v9 = v11;
LABEL_6:
    char v5 = v10 + 1;
    v7 += 4;
    uint64_t v8 = v10;
    if (v10 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(uint64_t result, int *a2, uint64_t *a3)
{
  if ((int *)result != a2)
  {
    unint64_t v4 = (int *)result;
    char v5 = (int *)(result + 4);
    if ((int *)(result + 4) != a2)
    {
      uint64_t v7 = *a3;
      do
      {
        int v8 = *v5;
        int v9 = *v4;
        uint64_t result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v5, *v4);
        if (result)
        {
          int *v5 = v9;
          int v10 = *(v4 - 1);
          int v11 = v4;
          if (v8 != v10)
          {
            uint64_t v12 = **(void **)(v7 + 56);
            int v13 = *(unsigned __int8 *)(v12 + v8);
            uint64_t v14 = (char)(v13 - 1);
            int v11 = v4;
            do
            {
              if (v14 > 3)
              {
                unsigned int v16 = 2;
                uint64_t v17 = v10;
                int v18 = *(unsigned __int8 *)(v12 + v10);
                char v19 = v18 - 1;
                uint64_t result = (v18 - 1);
                if (result > 3)
                {
LABEL_14:
                  BOOL v20 = v16 >= 2;
                  if (v16 == 2) {
                    goto LABEL_20;
                  }
                  goto LABEL_15;
                }
              }
              else
              {
                unsigned int v16 = dword_23CE7EE60[v14];
                uint64_t v17 = v10;
                int v18 = *(unsigned __int8 *)(v12 + v10);
                char v19 = v18 - 1;
                uint64_t result = (v18 - 1);
                if (result > 3) {
                  goto LABEL_14;
                }
              }
              unsigned int v21 = dword_23CE7EE60[v19];
              BOOL v20 = v16 >= v21;
              if (v16 == v21)
              {
LABEL_20:
                if (v13 == 3)
                {
                  uint64_t result = 8 * v8;
                  double v22 = *(double *)(**(void **)(v7 + 40) + result) - *(double *)(**(void **)(v7 + 48) + result);
                }
                else
                {
                  if (v13 == 2)
                  {
                    double v22 = -*(double *)(**(void **)(v7 + 48) + 8 * v8);
                    if (v18 != 3) {
                      goto LABEL_27;
                    }
LABEL_9:
                    double v15 = *(double *)(**(void **)(v7 + 40) + 8 * v17) - *(double *)(**(void **)(v7 + 48) + 8 * v17);
                    goto LABEL_10;
                  }
                  double v22 = 0.0;
                  if (v13 == 1)
                  {
                    double v22 = *(double *)(**(void **)(v7 + 40) + 8 * v8);
                    if (v18 == 3) {
                      goto LABEL_9;
                    }
LABEL_27:
                    if (v18 == 2)
                    {
                      double v15 = -*(double *)(**(void **)(v7 + 48) + 8 * v17);
                    }
                    else
                    {
                      double v15 = 0.0;
                      if (v18 == 1) {
                        double v15 = *(double *)(**(void **)(v7 + 40) + 8 * v17);
                      }
                    }
LABEL_10:
                    if (v22 + fabs(*(double *)(**(void **)(v7 + 32) + 8 * v8)) / *(double *)v7 >= v15 + fabs(*(double *)(**(void **)(v7 + 32) + 8 * v17)) / *(double *)v7) {
                      break;
                    }
                    goto LABEL_11;
                  }
                }
                if (v18 == 3) {
                  goto LABEL_9;
                }
                goto LABEL_27;
              }
LABEL_15:
              if (v20) {
                break;
              }
LABEL_11:
              *int v11 = v10;
              int v10 = *(v11 - 2);
              --v11;
            }
            while (v8 != v10);
          }
          *int v11 = v8;
        }
        ++v5;
        ++v4;
      }
      while (v5 != a2);
    }
  }
  return result;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(int *a1, int *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      int v8 = v7[1];
      ++v7;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, v8));
  }
  else
  {
    int v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      int v10 = *--v4;
    while (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, v10));
  }
  if (v7 < v4)
  {
    uint64_t v11 = *a3;
    int v12 = *v7;
    int v13 = *v4;
    do
    {
      *v7++ = v13;
      *unint64_t v4 = v12;
      uint64_t v14 = *a3;
      while (1)
      {
        int v12 = *v7;
        if (v6 == *v7) {
          goto LABEL_17;
        }
        uint64_t v15 = **(void **)(v14 + 56);
        int v16 = *(unsigned __int8 *)(v15 + v6);
        if ((v16 - 1) > 3u) {
          break;
        }
        unsigned int v17 = dword_23CE7EE60[(char)(v16 - 1)];
        uint64_t v18 = v12;
        int v19 = *(unsigned __int8 *)(v15 + v12);
        char v20 = v19 - 1;
        if ((v19 - 1) <= 3u) {
          goto LABEL_24;
        }
LABEL_21:
        BOOL v21 = v17 >= 2;
        if (v17 == 2) {
          goto LABEL_25;
        }
LABEL_15:
        if (!v21) {
          goto LABEL_39;
        }
LABEL_17:
        ++v7;
      }
      unsigned int v17 = 2;
      uint64_t v18 = v12;
      int v19 = *(unsigned __int8 *)(v15 + v12);
      char v20 = v19 - 1;
      if ((v19 - 1) > 3u) {
        goto LABEL_21;
      }
LABEL_24:
      unsigned int v22 = dword_23CE7EE60[v20];
      BOOL v21 = v17 >= v22;
      if (v17 != v22) {
        goto LABEL_15;
      }
LABEL_25:
      if (v16 == 3)
      {
        double v23 = *(double *)(**(void **)(v14 + 40) + 8 * v6) - *(double *)(**(void **)(v14 + 48) + 8 * v6);
        if (v19 == 3) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      if (v16 == 2)
      {
        double v23 = -*(double *)(**(void **)(v14 + 48) + 8 * v6);
LABEL_31:
        if (v19 == 3) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      double v23 = 0.0;
      if (v16 != 1) {
        goto LABEL_31;
      }
      double v23 = *(double *)(**(void **)(v14 + 40) + 8 * v6);
      if (v19 == 3)
      {
LABEL_37:
        double v24 = *(double *)(**(void **)(v14 + 40) + 8 * v18) - *(double *)(**(void **)(v14 + 48) + 8 * v18);
        goto LABEL_38;
      }
LABEL_32:
      if (v19 == 2)
      {
        double v24 = -*(double *)(**(void **)(v14 + 48) + 8 * v18);
      }
      else
      {
        double v24 = 0.0;
        if (v19 == 1) {
          double v24 = *(double *)(**(void **)(v14 + 40) + 8 * v18);
        }
      }
LABEL_38:
      if (v23 + fabs(*(double *)(**(void **)(v14 + 32) + 8 * v6)) / *(double *)v14 >= v24
                                                                                         + fabs(*(double *)(**(void **)(v14 + 32) + 8 * v18))
                                                                                         / *(double *)v14)
        goto LABEL_17;
LABEL_39:
      int v25 = *--v4;
      int v13 = v25;
      if (v6 != v25)
      {
        uint64_t v26 = **(void **)(v11 + 56);
        int v27 = *(unsigned __int8 *)(v26 + v6);
        uint64_t v28 = (char)(v27 - 1);
        do
        {
          if (v28 > 3)
          {
            unsigned int v31 = 2;
            uint64_t v32 = v13;
            int v33 = *(unsigned __int8 *)(v26 + v13);
            char v34 = v33 - 1;
            if ((v33 - 1) > 3u)
            {
LABEL_46:
              BOOL v35 = v31 >= 2;
              if (v31 == 2) {
                goto LABEL_52;
              }
              goto LABEL_47;
            }
          }
          else
          {
            unsigned int v31 = dword_23CE7EE60[v28];
            uint64_t v32 = v13;
            int v33 = *(unsigned __int8 *)(v26 + v13);
            char v34 = v33 - 1;
            if ((v33 - 1) > 3u) {
              goto LABEL_46;
            }
          }
          unsigned int v36 = dword_23CE7EE60[v34];
          BOOL v35 = v31 >= v36;
          if (v31 == v36)
          {
LABEL_52:
            if (v27 == 3)
            {
              double v37 = *(double *)(**(void **)(v11 + 40) + 8 * v6) - *(double *)(**(void **)(v11 + 48) + 8 * v6);
            }
            else
            {
              if (v27 == 2)
              {
                double v37 = -*(double *)(**(void **)(v11 + 48) + 8 * v6);
                if (v33 != 3) {
                  goto LABEL_59;
                }
LABEL_41:
                double v29 = *(double *)(**(void **)(v11 + 40) + 8 * v32) - *(double *)(**(void **)(v11 + 48) + 8 * v32);
                goto LABEL_42;
              }
              double v37 = 0.0;
              if (v27 == 1)
              {
                double v37 = *(double *)(**(void **)(v11 + 40) + 8 * v6);
                if (v33 == 3) {
                  goto LABEL_41;
                }
LABEL_59:
                if (v33 == 2)
                {
                  double v29 = -*(double *)(**(void **)(v11 + 48) + 8 * v32);
                }
                else
                {
                  double v29 = 0.0;
                  if (v33 == 1) {
                    double v29 = *(double *)(**(void **)(v11 + 40) + 8 * v32);
                  }
                }
LABEL_42:
                if (v37 + fabs(*(double *)(**(void **)(v11 + 32) + 8 * v6)) / *(double *)v11 >= v29 + fabs(*(double *)(**(void **)(v11 + 32) + 8 * v32)) / *(double *)v11) {
                  goto LABEL_13;
                }
                goto LABEL_43;
              }
            }
            if (v33 == 3) {
              goto LABEL_41;
            }
            goto LABEL_59;
          }
LABEL_47:
          if (v35) {
            goto LABEL_13;
          }
LABEL_43:
          int v30 = *--v4;
          int v13 = v30;
        }
        while (v6 != v30);
      }
      int v13 = v6;
LABEL_13:
      ;
    }
    while (v7 < v4);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v6;
  return v7;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  int v7 = *a1;
  do
    int v8 = a1[++v6];
  while (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v8, v7));
  int v9 = &a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      int v11 = *--a2;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, v7));
  }
  else
  {
    do
      int v10 = *--a2;
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v10, v7));
  }
  if (v9 < a2)
  {
    uint64_t v12 = *a3;
    int v13 = *a2;
    uint64_t v14 = &a1[v6];
    uint64_t v15 = a2;
    while (1)
    {
      int *v14 = v13;
      int *v15 = v8;
      int v16 = v14[1];
      ++v14;
      int v8 = v16;
      if (v16 != v7) {
        break;
      }
LABEL_12:
      int v8 = v7;
LABEL_13:
      uint64_t v17 = *a3;
      do
      {
        while (1)
        {
          do
          {
            int v18 = *--v15;
            int v13 = v18;
          }
          while (v18 == v7);
          uint64_t v19 = **(void **)(v17 + 56);
          int v20 = *(unsigned __int8 *)(v19 + v13);
          if ((v20 - 1) > 3u) {
            break;
          }
          unsigned int v21 = dword_23CE7EE60[(char)(v20 - 1)];
          int v22 = *(unsigned __int8 *)(v19 + v7);
          char v23 = v22 - 1;
          if ((v22 - 1) > 3u) {
            goto LABEL_19;
          }
LABEL_22:
          unsigned int v25 = dword_23CE7EE60[v23];
          BOOL v24 = v21 >= v25;
          if (v21 == v25) {
            goto LABEL_23;
          }
LABEL_14:
          if (!v24) {
            goto LABEL_10;
          }
        }
        unsigned int v21 = 2;
        int v22 = *(unsigned __int8 *)(v19 + v7);
        char v23 = v22 - 1;
        if ((v22 - 1) <= 3u) {
          goto LABEL_22;
        }
LABEL_19:
        BOOL v24 = v21 >= 2;
        if (v21 != 2) {
          goto LABEL_14;
        }
LABEL_23:
        if (v20 == 3)
        {
          double v26 = *(double *)(**(void **)(v17 + 40) + 8 * v13) - *(double *)(**(void **)(v17 + 48) + 8 * v13);
          if (v22 == 3)
          {
LABEL_35:
            double v27 = *(double *)(**(void **)(v17 + 40) + 8 * v7) - *(double *)(**(void **)(v17 + 48) + 8 * v7);
            continue;
          }
        }
        else
        {
          if (v20 == 2)
          {
            double v26 = -*(double *)(**(void **)(v17 + 48) + 8 * v13);
          }
          else
          {
            double v26 = 0.0;
            if (v20 == 1)
            {
              double v26 = *(double *)(**(void **)(v17 + 40) + 8 * v13);
              if (v22 == 3) {
                goto LABEL_35;
              }
              goto LABEL_30;
            }
          }
          if (v22 == 3) {
            goto LABEL_35;
          }
        }
LABEL_30:
        if (v22 == 2)
        {
          double v27 = -*(double *)(**(void **)(v17 + 48) + 8 * v7);
        }
        else
        {
          double v27 = 0.0;
          if (v22 == 1) {
            double v27 = *(double *)(**(void **)(v17 + 40) + 8 * v7);
          }
        }
      }
      while (v26 + fabs(*(double *)(**(void **)(v17 + 32) + 8 * v13)) / *(double *)v17 >= v27
                                                                                             + fabs(*(double *)(**(void **)(v17 + 32) + 8 * v7))
                                                                                             / *(double *)v17);
LABEL_10:
      if (v14 >= v15) {
        goto LABEL_63;
      }
    }
    uint64_t v28 = **(void **)(v12 + 56);
    int v29 = *(unsigned __int8 *)(v28 + v7);
    uint64_t v30 = (char)(v29 - 1);
    while (1)
    {
      int v32 = *(unsigned __int8 *)(v28 + v8);
      if ((v32 - 1) > 3u)
      {
        unsigned int v33 = 2;
        if (v30 > 3)
        {
LABEL_43:
          BOOL v34 = v33 >= 2;
          if (v33 != 2) {
            goto LABEL_39;
          }
          goto LABEL_47;
        }
      }
      else
      {
        unsigned int v33 = dword_23CE7EE60[(char)(v32 - 1)];
        if (v30 > 3) {
          goto LABEL_43;
        }
      }
      unsigned int v35 = dword_23CE7EE60[v30];
      BOOL v34 = v33 >= v35;
      if (v33 != v35)
      {
LABEL_39:
        if (v34) {
          goto LABEL_13;
        }
        goto LABEL_40;
      }
LABEL_47:
      if (v32 == 3)
      {
        double v36 = *(double *)(**(void **)(v12 + 40) + 8 * v8) - *(double *)(**(void **)(v12 + 48) + 8 * v8);
LABEL_53:
        if (v29 == 3) {
          goto LABEL_58;
        }
        goto LABEL_54;
      }
      if (v32 != 2)
      {
        double v36 = 0.0;
        if (v32 == 1)
        {
          double v36 = *(double *)(**(void **)(v12 + 40) + 8 * v8);
          if (v29 == 3) {
            goto LABEL_58;
          }
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      double v36 = -*(double *)(**(void **)(v12 + 48) + 8 * v8);
      if (v29 == 3)
      {
LABEL_58:
        double v37 = *(double *)(**(void **)(v12 + 40) + 8 * v7) - *(double *)(**(void **)(v12 + 48) + 8 * v7);
        goto LABEL_60;
      }
LABEL_54:
      if (v29 == 2)
      {
        double v37 = -*(double *)(**(void **)(v12 + 48) + 8 * v7);
      }
      else
      {
        double v37 = 0.0;
        if (v29 == 1) {
          double v37 = *(double *)(**(void **)(v12 + 40) + 8 * v7);
        }
      }
LABEL_60:
      if (v36 + fabs(*(double *)(**(void **)(v12 + 32) + 8 * v8)) / *(double *)v12 >= v37
                                                                                         + fabs(*(double *)(**(void **)(v12 + 32) + 8 * v7))
                                                                                         / *(double *)v12)
        goto LABEL_13;
LABEL_40:
      int v31 = v14[1];
      ++v14;
      int v8 = v31;
      if (v31 == v7) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v14 = &a1[v6];
LABEL_63:
  uint64_t result = v14 - 1;
  if (v14 - 1 != a1) {
    *a1 = *result;
  }
  int *result = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 1);
      int v9 = *a1;
      if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v8, *a1))
      {
        *a1 = v8;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v9;
      }
      return 1;
    case 3:
      int v10 = *a1;
      int v11 = a1[1];
      BOOL v12 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, *a1);
      int v13 = *(a2 - 1);
      BOOL v14 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v13, v11);
      if (v12)
      {
        if (v14)
        {
          *a1 = v13;
        }
        else
        {
          *a1 = v11;
          a1[1] = v10;
          int v35 = *(a2 - 1);
          if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v35, v10)) {
            return 1;
          }
          a1[1] = v35;
        }
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v10;
      }
      else if (v14)
      {
        a1[1] = v13;
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v11;
        int v25 = *a1;
        int v24 = a1[1];
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v24, *a1))
        {
          *a1 = v24;
          a1[1] = v25;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v15 = a1[1];
      int v16 = *a1;
      BOOL v17 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v15, *a1);
      uint64_t v19 = a1 + 2;
      int v18 = a1[2];
      BOOL v20 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v15);
      if (v17)
      {
        unsigned int v21 = a1;
        int v22 = a1 + 2;
        if (!v20)
        {
          *a1 = v15;
          a1[1] = v16;
          BOOL v23 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v16);
          unsigned int v21 = a1 + 1;
          int v22 = a1 + 2;
          if (!v23) {
            goto LABEL_19;
          }
        }
LABEL_18:
        int *v21 = v18;
        *int v22 = v16;
        goto LABEL_19;
      }
      if (v20)
      {
        a1[1] = v18;
        *uint64_t v19 = v15;
        BOOL v26 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v16);
        unsigned int v21 = a1;
        int v22 = a1 + 1;
        if (v26) {
          goto LABEL_18;
        }
      }
LABEL_19:
      double v27 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v28 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v30 = *v27;
        int v31 = *v19;
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v27, *v19)) {
          break;
        }
LABEL_22:
        uint64_t v19 = v27++;
        if (v27 == a2) {
          return 1;
        }
      }
      uint64_t v32 = i;
      do
      {
        *(int *)((char *)a1 + v32) = v31;
        uint64_t v33 = v32 - 4;
        if (v32 == 4)
        {
          *a1 = v30;
          if (++v28 != 8) {
            goto LABEL_22;
          }
          return v27 + 1 == a2;
        }
        int v31 = *(int *)((char *)a1 + v32 - 8);
        BOOL v34 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v30, v31);
        uint64_t v32 = v33;
      }
      while (v34);
      *(int *)((char *)a1 + v33) = v30;
      if (++v28 != 8) {
        goto LABEL_22;
      }
      return v27 + 1 == a2;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  int v10 = *a2;
  int v11 = *a2;
  int v12 = *a1;
  BOOL v13 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1);
  int v14 = *a3;
  BOOL v15 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, v10);
  if (v13)
  {
    if (v15)
    {
      *a1 = v14;
    }
    else
    {
      *a1 = v11;
      *a2 = v12;
      int v10 = *a3;
      int v11 = *a3;
      if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, v12)) {
        goto LABEL_11;
      }
      *a2 = v11;
    }
    *a3 = v12;
    int v10 = v12;
    int v11 = v12;
LABEL_11:
    int v18 = *a4;
    BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, v10);
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  if (v15)
  {
    *a2 = v14;
    *a3 = v11;
    int v16 = *a2;
    int v17 = *a1;
    if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1)) {
      goto LABEL_11;
    }
    *a1 = v16;
    *a2 = v17;
    int v11 = *a3;
    int v18 = *a4;
    BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, *a3);
    if (!result) {
      return result;
    }
  }
  else
  {
    int v11 = v14;
    int v18 = *a4;
    BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, v14);
    if (!result) {
      return result;
    }
  }
LABEL_14:
  *a3 = v18;
  *a4 = v11;
  int v20 = *a3;
  int v21 = *a2;
  BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, *a2);
  if (result)
  {
    *a2 = v20;
    *a3 = v21;
    int v22 = *a2;
    int v23 = *a1;
    BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1);
    if (result)
    {
      *a1 = v22;
      *a2 = v23;
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a2, a3, a4, a6);
  int v12 = *a5;
  int v13 = *a4;
  BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a5, *a4);
  if (result)
  {
    *a4 = v12;
    *a5 = v13;
    int v15 = *a4;
    int v16 = *a3;
    BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a4, *a3);
    if (result)
    {
      *a3 = v15;
      *a4 = v16;
      int v17 = *a3;
      int v18 = *a2;
      BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a3, *a2);
      if (result)
      {
        *a2 = v17;
        *a3 = v18;
        int v19 = *a2;
        int v20 = *a1;
        BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a2, *a1);
        if (result)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(BOOL result, uint64_t *a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    BOOL v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v8 = a3;
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      int v12 = (int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      int v14 = *v12;
      if (v10 + 2 >= a3)
      {
        int v23 = *a4;
        BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, *a4);
        if (!result) {
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v15 = v4 >> 1;
        int v16 = v12[1];
        BOOL v17 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v16);
        if (v17) {
          int v14 = v16;
        }
        uint64_t v7 = v15;
        uint64_t v8 = a3;
        if (v17)
        {
          ++v12;
          uint64_t v11 = v13;
        }
        int v23 = *v5;
        BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, *v5);
        if (!result)
        {
LABEL_17:
          while (1)
          {
            int v20 = v12;
            int *v5 = v14;
            if (v7 < v11) {
              break;
            }
            uint64_t v21 = (2 * v11) | 1;
            int v12 = (int *)(v6 + 4 * v21);
            uint64_t v11 = 2 * v11 + 2;
            int v14 = *v12;
            if (v11 < v8)
            {
              int v18 = v12[1];
              BOOL v19 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, *v12, v18);
              if (v19)
              {
                int v14 = v18;
                ++v12;
              }
              uint64_t v8 = a3;
              if (!v19) {
                uint64_t v11 = v21;
              }
              BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v23);
              char v5 = v20;
              if (result) {
                break;
              }
            }
            else
            {
              uint64_t v11 = v21;
              BOOL result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v23);
              char v5 = v20;
              if (result) {
                break;
              }
            }
          }
          int *v20 = v23;
        }
      }
    }
  }
  return result;
}

int *std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, uint64_t *a3)
{
  if ((char *)a2 - (char *)result >= 5)
  {
    uint64_t v3 = a2;
    unint64_t v4 = result;
    uint64_t v5 = (unint64_t)((char *)a2 - (char *)result) >> 2;
    do
    {
      uint64_t v7 = 0;
      int v8 = *v4;
      uint64_t v9 = *a3;
      uint64_t v10 = v4;
      do
      {
        int v12 = v10;
        uint64_t v13 = &v10[v7];
        int v14 = v13[1];
        uint64_t v10 = v13 + 1;
        int v11 = v14;
        uint64_t v15 = 2 * v7;
        uint64_t v7 = (2 * v7) | 1;
        uint64_t v16 = v15 + 2;
        if (v16 >= v5) {
          goto LABEL_7;
        }
        int v17 = v10[1];
        if (v11 == v17) {
          goto LABEL_7;
        }
        uint64_t v18 = **(void **)(v9 + 56);
        int v19 = *(unsigned __int8 *)(v18 + v11);
        if ((v19 - 1) > 3u)
        {
          unsigned int v20 = 2;
          BOOL result = (int *)v17;
          int v21 = *(unsigned __int8 *)(v18 + v17);
          char v22 = v21 - 1;
          if ((v21 - 1) > 3u)
          {
LABEL_12:
            BOOL v23 = v20 >= 2;
            if (v20 != 2) {
              goto LABEL_13;
            }
            goto LABEL_18;
          }
        }
        else
        {
          unsigned int v20 = dword_23CE7EE60[(char)(v19 - 1)];
          BOOL result = (int *)v17;
          int v21 = *(unsigned __int8 *)(v18 + v17);
          char v22 = v21 - 1;
          if ((v21 - 1) > 3u) {
            goto LABEL_12;
          }
        }
        unsigned int v24 = dword_23CE7EE60[v22];
        BOOL v23 = v20 >= v24;
        if (v20 != v24)
        {
LABEL_13:
          if (!v23) {
            goto LABEL_6;
          }
          goto LABEL_7;
        }
LABEL_18:
        if (v19 == 3)
        {
          double v25 = *(double *)(**(void **)(v9 + 40) + 8 * v11) - *(double *)(**(void **)(v9 + 48) + 8 * v11);
          if (v21 == 3)
          {
LABEL_30:
            double v26 = *(double *)(**(void **)(v9 + 40) + 8 * (void)result)
                - *(double *)(**(void **)(v9 + 48) + 8 * (void)result);
            goto LABEL_31;
          }
        }
        else
        {
          if (v19 == 2)
          {
            double v25 = -*(double *)(**(void **)(v9 + 48) + 8 * v11);
          }
          else
          {
            double v25 = 0.0;
            if (v19 == 1)
            {
              double v25 = *(double *)(**(void **)(v9 + 40) + 8 * v11);
              if (v21 == 3) {
                goto LABEL_30;
              }
              goto LABEL_25;
            }
          }
          if (v21 == 3) {
            goto LABEL_30;
          }
        }
LABEL_25:
        if (v21 == 2)
        {
          double v26 = -*(double *)(**(void **)(v9 + 48) + 8 * (void)result);
        }
        else
        {
          double v26 = 0.0;
          if (v21 == 1) {
            double v26 = *(double *)(**(void **)(v9 + 40) + 8 * (void)result);
          }
        }
LABEL_31:
        if (v25 + fabs(*(double *)(**(void **)(v9 + 32) + 8 * v11)) / *(double *)v9 < v26
                                                                                         + fabs(*(double *)(**(void **)(v9 + 32) + 8 * (void)result))
                                                                                         / *(double *)v9)
        {
LABEL_6:
          int v11 = v10[1];
          ++v10;
          uint64_t v7 = v16;
        }
LABEL_7:
        int *v12 = v11;
      }
      while (v7 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
      if (v10 == --v3)
      {
        *uint64_t v10 = v8;
      }
      else
      {
        *uint64_t v10 = *v3;
        *uint64_t v3 = v8;
        uint64_t v27 = (char *)v10 - (char *)v4 + 4;
        if (v27 >= 5)
        {
          unint64_t v28 = (((unint64_t)v27 >> 2) - 2) >> 1;
          int v29 = &v4[v28];
          int v30 = *v29;
          int v31 = *v10;
          BOOL result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v29, *v10);
          if (result)
          {
            do
            {
              uint64_t v32 = v29;
              *uint64_t v10 = v30;
              if (!v28) {
                break;
              }
              unint64_t v28 = (v28 - 1) >> 1;
              int v29 = &v4[v28];
              int v30 = *v29;
              BOOL result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v29, v31);
              uint64_t v10 = v32;
            }
            while ((result & 1) != 0);
            *uint64_t v32 = v31;
          }
        }
      }
    }
    while (v5-- > 2);
  }
  return result;
}

operations_research::glop::LuFactorization *operations_research::glop::LuFactorization::LuFactorization(operations_research::glop::LuFactorization *this)
{
  *(unsigned char *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((unsigned char *)this + 116) = 1;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((unsigned char *)this + 396) = 1;
  *((_OWORD *)this + 2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 3std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 3std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_DWORD *)this + 168) = 0;
  *((unsigned char *)this + 676) = 1;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_DWORD *)this + 238) = 0;
  *((unsigned char *)this + 956) = 1;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 7std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 7std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *(_OWORD *)((char *)this + 1273) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 8std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  operations_research::glop::LuFactorization::Stats::Stats((operations_research::glop::LuFactorization *)((char *)this + 1344));
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 1584, 0);
  operations_research::glop::Markowitz::Markowitz((operations_research::glop::LuFactorization *)((char *)this + 1880));
  return this;
}

void sub_23CB757D8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  operations_research::glop::GlopParameters::~GlopParameters(v5);
  operations_research::glop::LuFactorization::Stats::~Stats(v4);
  uint64_t v7 = v2 + 162;
  int v8 = v2[165];
  if (v8)
  {
    v2[166] = v8;
    operator delete(v8);
    uint64_t v9 = *v7;
    if (!*v7)
    {
LABEL_3:
      uint64_t v10 = v2[156];
      v2[156] = 0;
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v9 = *v7;
    if (!*v7) {
      goto LABEL_3;
    }
  }
  v2[163] = v9;
  operator delete(v9);
  uint64_t v10 = v2[156];
  v2[156] = 0;
  if (!v10)
  {
LABEL_4:
    int v11 = v2[153];
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  MEMORY[0x23ECF2BA0](v10, 0x1000C8077774924);
  int v11 = v2[153];
  if (!v11)
  {
LABEL_5:
    int v12 = v2[150];
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v2[154] = v11;
  operator delete(v11);
  int v12 = v2[150];
  if (!v12)
  {
LABEL_6:
    uint64_t v13 = v2[147];
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  v2[151] = v12;
  operator delete(v12);
  uint64_t v13 = v2[147];
  if (!v13)
  {
LABEL_7:
    int v14 = v2[144];
    if (!v14) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  v2[148] = v13;
  operator delete(v13);
  int v14 = v2[144];
  if (!v14)
  {
LABEL_8:
    uint64_t v15 = v2[141];
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_17:
  v2[145] = v14;
  operator delete(v14);
  uint64_t v15 = v2[141];
  if (!v15)
  {
LABEL_10:
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 106));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 71));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 36));
    operations_research::glop::TriangularMatrix::~TriangularMatrix(v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v2[142] = v15;
  operator delete(v15);
  goto LABEL_10;
}

void operations_research::glop::LuFactorization::Stats::~Stats(operations_research::glop::LuFactorization::Stats *this)
{
  *((void *)this + 20) = &unk_26F0BCDD8;
  if (*((char *)this + 191) < 0)
  {
    operator delete(*((void **)this + 21));
    *((void *)this + 10) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = this;
      goto LABEL_5;
    }
  }
  else
  {
    *((void *)this + 10) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 11));
  uint64_t v2 = this;

LABEL_5:
  operations_research::StatsGroup::~StatsGroup(v2);
}

void operations_research::glop::LuFactorization::Clear(operations_research::glop::LuFactorization *this)
{
  *(unsigned char *)this = 1;
  *((void *)this + 142) = *((void *)this + 141);
  *((void *)this + 148) = *((void *)this + 147);
  *((void *)this + 15std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((void *)this + 150);
  *((void *)this + 14std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)this + 144);
}

void operations_research::glop::LuFactorization::ComputeFactorization(std::vector<int> *this@<X0>, const operations_research::glop::CompactSparseMatrixView *a2@<X1>, uint64_t a3@<X8>)
{
  p_std::vector<int>::pointer end = (operations_research::glop::TriangularMatrix *)&this->__end_;
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this->__end_, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[12], 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[23].__end_cap_, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[35].__end_, 0, 0);
  LOBYTE(this->__begin_) = 1;
  this[47].__end_ = this[47].__begin_;
  this[49].__end_ = this[49].__begin_;
  this[50].__end_ = this[50].__begin_;
  this[48].__end_ = this[48].__begin_;
  if (**(_DWORD **)a2 != ((*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 2))
  {
    *((unsigned char *)&v28.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&v28, "Not a square matrix!!");
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 49, 2);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v27);
    operations_research::glop::GetErrorCodeString((char *)1, (uint64_t)__p);
    if ((v26 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v12 = v26;
    }
    else {
      uint64_t v12 = (uint64_t)__p[1];
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v28, 21);
    if ((char)v26 < 0)
    {
      operator delete(__p[0]);
      google::LogMessage::~LogMessage((google::LogMessage *)v27);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      google::LogMessage::~LogMessage((google::LogMessage *)v27);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        std::string v24 = v28;
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&v24, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
LABEL_18:
    operations_research::glop::Status::Status(a3, 1, (long long *)&v24);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
  operations_research::glop::Markowitz::ComputeLU(p_end, (uint64_t)&this[78].__end_, (uint64_t)a2, this + 49, this + 47, (operations_research::glop::TriangularMatrix *)&this[12], a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    uint64_t v7 = (char *)this[47].__end_ - (char *)this[47].__begin_;
    std::vector<int>::pointer begin = this[48].__begin_;
    unint64_t v9 = this[48].__end_ - begin;
    if (v7 >> 2 <= v9)
    {
      if (v7 >> 2 < v9) {
        this[48].__end_ = &begin[v7 >> 2];
      }
    }
    else
    {
      std::vector<int>::__append(this + 48, (v7 >> 2) - v9);
    }
    if ((int)((unint64_t)v7 >> 2) >= 1)
    {
      uint64_t v15 = 0;
      std::vector<int>::pointer v16 = this[47].__begin_;
      std::vector<int>::pointer v17 = this[48].__begin_;
      do
      {
        v17[v16[v15]] = v15;
        ++v15;
      }
      while (((unint64_t)v7 >> 2) != v15);
    }
    uint64_t v18 = (char *)this[49].__end_ - (char *)this[49].__begin_;
    std::vector<int>::pointer v19 = this[50].__begin_;
    unint64_t v20 = this[50].__end_ - v19;
    if (v18 >> 2 <= v20)
    {
      if (v18 >> 2 < v20) {
        this[50].__end_ = &v19[v18 >> 2];
      }
    }
    else
    {
      std::vector<int>::__append(this + 50, (v18 >> 2) - v20);
    }
    if ((int)((unint64_t)v18 >> 2) >= 1)
    {
      uint64_t v21 = 0;
      std::vector<int>::pointer v22 = this[49].__begin_;
      std::vector<int>::pointer v23 = this[50].__begin_;
      do
      {
        v23[v22[v21]] = v21;
        ++v21;
      }
      while (((unint64_t)v18 >> 2) != v21);
    }
    operations_research::glop::TriangularMatrix::PopulateFromTranspose((operations_research::glop::TriangularMatrix *)&this[23].__end_cap_, (char **)&this[12]);
    operations_research::glop::TriangularMatrix::PopulateFromTranspose((operations_research::glop::TriangularMatrix *)&this[35].__end_, (char **)p_end);
    LOBYTE(this->__begin_) = 0;
    operations_research::glop::Status::Status(a3);
  }
}

void sub_23CB75DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a28 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LuFactorization::RightSolve(uint64_t a1, uint64_t **a2)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v4 = (uint64_t *)(a1 + 1224);
    unint64_t v5 = *(void *)(a1 + 1184) - *(void *)(a1 + 1176);
    if ((v5 & 0x3FFFFFFFCLL) != 0)
    {
      BOOL v6 = a2[1];
      unint64_t v7 = (int)(v6 - *a2);
      uint64_t v8 = *(void *)(a1 + 1224);
      unint64_t v9 = (*(void *)(a1 + 1232) - v8) >> 3;
      if (v7 <= v9)
      {
        if (v7 < v9) {
          *(void *)(a1 + 1232) = v8 + 8 * v7;
        }
      }
      else
      {
        std::vector<double>::__append(a1 + 1224, v7 - v9, v6 - 1);
      }
      if ((int)(v5 >> 2) >= 1)
      {
        uint64_t v10 = *(int **)(a1 + 1176);
        int v11 = *a2;
        uint64_t v12 = (v5 >> 2);
        uint64_t v13 = *(void *)(a1 + 1224);
        do
        {
          uint64_t v15 = *v10++;
          uint64_t v14 = v15;
          uint64_t v16 = *v11++;
          *(void *)(v13 + 8 * v14) = v16;
          --v12;
        }
        while (v12);
      }
    }
    operations_research::glop::TriangularMatrix::LowerSolve(a1 + 8, v4);
    operations_research::glop::TriangularMatrix::UpperSolve(a1 + 288, v4);
    if (a2)
    {
      unint64_t v17 = *(void *)(a1 + 1160) - *(void *)(a1 + 1152);
      if ((v17 & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v18 = *(void *)(a1 + 1232);
        unint64_t v19 = (int)((v18 - *(void *)(a1 + 1224)) >> 3);
        unint64_t v20 = a2[1] - *a2;
        if (v19 <= v20)
        {
          if (v19 < v20) {
            a2[1] = &(*a2)[v19];
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)a2, v19 - v20, (uint64_t *)(v18 - 8));
        }
        if ((int)(v17 >> 2) >= 1)
        {
          std::vector<int>::pointer v23 = *(int **)(a1 + 1152);
          std::string v24 = *(uint64_t **)(a1 + 1224);
          uint64_t v25 = (v17 >> 2);
          unsigned __int8 v26 = *a2;
          do
          {
            uint64_t v28 = *v23++;
            uint64_t v27 = v28;
            uint64_t v29 = *v24++;
            v26[v27] = v29;
            --v25;
          }
          while (v25);
        }
      }
    }
    else
    {
      google::LogMessage::LogMessage((google::LogMessage *)v30, (google::glog_internal_namespace_ *)"./ortools/lp_data/permutation.h", 193, 2);
      uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)v30);
      std::vector<int>::pointer v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"result", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
      google::LogMessage::~LogMessage((google::LogMessage *)v30);
    }
  }
}

void sub_23CB7604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::LuFactorization::LeftSolve(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v4 = (uint64_t *)(a1 + 1224);
    unint64_t v5 = *(void *)(a1 + 1160) - *(void *)(a1 + 1152);
    if ((v5 & 0x3FFFFFFFCLL) != 0)
    {
      uint64_t v6 = a2[1];
      unint64_t v7 = (int)((v6 - *a2) >> 3);
      uint64_t v8 = *(void *)(a1 + 1224);
      unint64_t v9 = (*(void *)(a1 + 1232) - v8) >> 3;
      if (v7 <= v9)
      {
        if (v7 < v9) {
          *(void *)(a1 + 1232) = v8 + 8 * v7;
        }
      }
      else
      {
        std::vector<double>::__append(a1 + 1224, v7 - v9, (uint64_t *)(v6 - 8));
      }
      if ((int)(v5 >> 2) >= 1)
      {
        uint64_t v10 = *(int **)(a1 + 1152);
        int v11 = (void *)*a2;
        uint64_t v12 = (v5 >> 2);
        uint64_t v13 = *(void **)(a1 + 1224);
        do
        {
          uint64_t v14 = *v10++;
          *v13++ = v11[v14];
          --v12;
        }
        while (v12);
      }
    }
    operations_research::glop::TriangularMatrix::TransposeUpperSolve(a1 + 288, v4);
    operations_research::glop::TriangularMatrix::TransposeLowerSolve(a1 + 8, v4);
    if (a2)
    {
      unint64_t v15 = *(void *)(a1 + 1184) - *(void *)(a1 + 1176);
      if ((v15 & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v16 = *(void *)(a1 + 1232);
        unint64_t v17 = (int)((v16 - *(void *)(a1 + 1224)) >> 3);
        unint64_t v18 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v17 <= v18)
        {
          if (v17 < v18) {
            a2[1] = *a2 + 8 * v17;
          }
        }
        else
        {
          std::vector<double>::__append((uint64_t)a2, v17 - v18, (uint64_t *)(v16 - 8));
        }
        if ((int)(v15 >> 2) >= 1)
        {
          uint64_t v21 = *(int **)(a1 + 1176);
          uint64_t v22 = *(void *)(a1 + 1224);
          uint64_t v23 = (v15 >> 2);
          std::string v24 = (void *)*a2;
          do
          {
            uint64_t v25 = *v21++;
            *v24++ = *(void *)(v22 + 8 * v25);
            --v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/lp_data/permutation.h", 208, 2);
      unint64_t v19 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"result", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" == NULL", 8);
      google::LogMessage::~LogMessage((google::LogMessage *)v26);
    }
  }
}

void sub_23CB76230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::LuFactorization::RightSolveSquaredNorm(uint64_t a1, unint64_t *a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v5 = a1 + 8;
    unint64_t v4 = *(int *)(a1 + 8);
    *(void *)(a1 + 1328) = *(void *)(a1 + 1320);
    uint64_t v6 = a1 + 1296;
    uint64_t v49 = 0;
    uint64_t v7 = *(void *)(v5 + 1288);
    unint64_t v8 = (*(void *)(v5 + 1296) - v7) >> 3;
    int v44 = (uint64_t *)v6;
    if (v4 <= v8)
    {
      if (v4 < v8) {
        *(void *)(a1 + 1304) = v7 + 8 * v4;
      }
    }
    else
    {
      std::vector<double>::__append(v6, v4 - v8, &v49);
    }
    int v45 = (void *)v5;
    unint64_t v9 = (std::vector<int> *)(v5 + 1312);
    uint64_t v10 = *a2;
    if ((uint64_t)*a2 >= 1)
    {
      uint64_t v11 = 0;
      unint64_t v12 = a2[1];
      unint64_t v13 = a2[2];
      uint64_t v14 = *(char **)(a1 + 1328);
      unint64_t v47 = v12;
      unint64_t v48 = *a2;
      unint64_t v46 = v13;
      while (1)
      {
        while (1)
        {
          uint64_t v15 = *(int *)(*(void *)(a1 + 1176) + 4 * *(int *)(v12 + 4 * v11));
          *(void *)(*(void *)(a1 + 1296) + 8 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *(void *)(v13 + 8 * v11);
          unint64_t v16 = *(void *)(a1 + 1336);
          if ((unint64_t)v14 >= v16) {
            break;
          }
          *(_DWORD *)uint64_t v14 = v15;
          v14 += 4;
          *(void *)(a1 + 1328) = v14;
          if (++v11 == v10) {
            goto LABEL_39;
          }
        }
        unint64_t v17 = v9;
        std::vector<int>::pointer begin = v9->__begin_;
        uint64_t v19 = v14 - (char *)v9->__begin_;
        uint64_t v20 = v19 >> 2;
        unint64_t v21 = (v19 >> 2) + 1;
        if (v21 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v16 - (void)begin;
        if (v22 >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        unint64_t v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
        if (v23)
        {
          if (v23 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v24 = operator new(4 * v23);
          uint64_t v25 = &v24[4 * v20];
          _DWORD *v25 = v15;
          uint64_t v26 = (uint64_t)(v25 + 1);
          if (v14 == (char *)begin)
          {
LABEL_33:
            unint64_t v9 = v17;
            *(void *)(a1 + 132operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v25;
            *(void *)(a1 + 1328) = v26;
            *(void *)(a1 + 1336) = &v24[4 * v23];
            if (!begin) {
              goto LABEL_30;
            }
LABEL_29:
            operator delete(begin);
            goto LABEL_30;
          }
        }
        else
        {
          std::string v24 = 0;
          uint64_t v25 = (_DWORD *)(4 * v20);
          *(_DWORD *)(4 * v2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v15;
          uint64_t v26 = 4 * v20 + 4;
          if (v14 == (char *)begin) {
            goto LABEL_33;
          }
        }
        unint64_t v27 = v14 - 4 - (char *)begin;
        if (v27 < 0xBC
          || &v24[v19 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4]
          || &v14[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
          || (unint64_t)(v14 - v24 - v19) < 0x20)
        {
          break;
        }
        uint64_t v30 = (v27 >> 2) + 1;
        uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v28 = &v14[-v31];
        uint64_t v25 = (_DWORD *)((char *)v25 - v31);
        uint64_t v32 = &v24[4 * v20 - 16];
        uint64_t v33 = v14 - 16;
        uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v33 - 1);
          *uint64_t v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 8;
        }
        while (v34);
        unint64_t v9 = v17;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_27;
        }
LABEL_28:
        *(void *)(a1 + 132operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v25;
        *(void *)(a1 + 1328) = v26;
        *(void *)(a1 + 1336) = &v24[4 * v23];
        if (begin) {
          goto LABEL_29;
        }
LABEL_30:
        unint64_t v12 = v47;
        uint64_t v10 = v48;
        unint64_t v13 = v46;
        *(void *)(a1 + 1328) = v26;
        ++v11;
        uint64_t v14 = (char *)v26;
        if (v11 == v48) {
          goto LABEL_39;
        }
      }
      uint64_t v28 = v14;
      unint64_t v9 = v17;
      do
      {
LABEL_27:
        int v29 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--uint64_t v25 = v29;
      }
      while (v28 != (char *)begin);
      goto LABEL_28;
    }
LABEL_39:
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v45, v9);
    if (*(void *)(a1 + 1320) == *(void *)(a1 + 1328))
    {
      double v36 = v44;
      operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v45, v44);
      double v37 = (void *)(a1 + 288);
      BOOL v38 = v44;
      if (*(void *)(a1 + 1320) != *(void *)(a1 + 1328))
      {
LABEL_41:
        operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(v37, v38, (uint64_t)v9);
        int v39 = *(int **)(a1 + 1320);
        BOOL v40 = *(int **)(a1 + 1328);
        if (v39 != v40) {
          goto LABEL_42;
        }
        goto LABEL_47;
      }
    }
    else
    {
      double v36 = v44;
      operations_research::glop::TriangularMatrix::HyperSparseSolve(v45, v44, v9);
      operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 288, v9);
      double v37 = (void *)(a1 + 288);
      BOOL v38 = v44;
      if (*(void *)(a1 + 1320) != *(void *)(a1 + 1328)) {
        goto LABEL_41;
      }
    }
    operations_research::glop::TriangularMatrix::UpperSolve((uint64_t)v37, v38);
    int v39 = *(int **)(a1 + 1320);
    BOOL v40 = *(int **)(a1 + 1328);
    if (v39 != v40)
    {
LABEL_42:
      uint64_t v41 = *v36;
      double v42 = 0.0;
      do
      {
        uint64_t v43 = *v39++;
        double v42 = v42 + *(double *)(v41 + 8 * v43) * *(double *)(v41 + 8 * v43);
        *(void *)(v41 + 8 * v43) = 0;
      }
      while (v39 != v40);
      return;
    }
LABEL_47:
    operations_research::glop::SquaredNorm(v36);
    *(void *)(a1 + 1304) = *(void *)(a1 + 1296);
    return;
  }

  operations_research::glop::SquaredNorm(a2);
}

void operations_research::glop::LuFactorization::DualEdgeSquaredNorm(uint64_t a1, int a2)
{
  if (!*(unsigned char *)a1)
  {
    int v2 = a2;
    uint64_t v4 = *(void *)(a1 + 1128);
    if (v4 != *(void *)(a1 + 1136)) {
      int v2 = *(_DWORD *)(v4 + 4 * a2);
    }
    uint64_t v5 = *(int **)(a1 + 1320);
    *(void *)(a1 + 1328) = v5;
    uint64_t v6 = (uint64_t *)(a1 + 1296);
    unint64_t v7 = *(int *)(a1 + 8);
    uint64_t v39 = 0;
    uint64_t v8 = *(void *)(a1 + 1296);
    unint64_t v9 = (*(void *)(a1 + 1304) - v8) >> 3;
    if (v7 <= v9)
    {
      if (v7 < v9) {
        *(void *)(a1 + 1304) = v8 + 8 * v7;
      }
    }
    else
    {
      std::vector<double>::__append(a1 + 1296, v7 - v9, &v39);
      uint64_t v8 = *(void *)(a1 + 1296);
      uint64_t v5 = *(int **)(a1 + 1328);
    }
    uint64_t v10 = (void **)(a1 + 1320);
    *(void *)(v8 + 8 * v2) = 0x3FF0000000000000;
    unint64_t v11 = *(void *)(a1 + 1336);
    if ((unint64_t)v5 < v11)
    {
      int *v5 = v2;
      uint64_t v12 = (uint64_t)(v5 + 1);
      goto LABEL_31;
    }
    unint64_t v13 = (int *)*v10;
    uint64_t v14 = (char *)v5 - (unsigned char *)*v10;
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v11 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(4 * v18);
      uint64_t v20 = (int *)&v19[4 * v15];
      unint64_t v21 = &v19[4 * v18];
      int *v20 = v2;
      uint64_t v12 = (uint64_t)(v20 + 1);
      int64_t v22 = (char *)v5 - (char *)v13;
      if (v5 == v13) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (int *)(4 * v15);
      unint64_t v21 = 0;
      *(_DWORD *)(4 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v2;
      uint64_t v12 = 4 * v15 + 4;
      int64_t v22 = (char *)v5 - (char *)v13;
      if (v5 == v13) {
        goto LABEL_29;
      }
    }
    unint64_t v23 = v22 - 4;
    if (v23 >= 0x2C)
    {
      if ((unint64_t)((char *)v5 - &v19[v14]) >= 0x20)
      {
        uint64_t v25 = (v23 >> 2) + 1;
        uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        std::string v24 = &v5[v26 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v20 = (int *)((char *)v20 - v26);
        unint64_t v27 = &v19[4 * v15 - 16];
        uint64_t v28 = v5 - 4;
        uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v28 - 1);
          *unint64_t v27 = v30;
          v27 -= 2;
          v28 -= 8;
          v29 -= 8;
        }
        while (v29);
        if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_29:
          *(void *)(a1 + 132operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v20;
          *(void *)(a1 + 1328) = v12;
          *(void *)(a1 + 1336) = v21;
          if (v13) {
            operator delete(v13);
          }
LABEL_31:
          *(void *)(a1 + 1328) = v12;
          operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 568, a1 + 1320);
          if (*(void *)(a1 + 1320) == *(void *)(a1 + 1328))
          {
            operations_research::glop::TriangularMatrix::LowerSolveStartingAt(a1 + 568, v2, (uint64_t *)(a1 + 1296));
            uint64_t v32 = (void *)(a1 + 848);
            uint64_t v33 = (uint64_t *)(a1 + 1296);
            if (*(void *)(a1 + 1320) != *(void *)(a1 + 1328))
            {
LABEL_33:
              operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(v32, v33, a1 + 1320);
              uint64_t v34 = *(int **)(a1 + 1320);
              long long v35 = *(int **)(a1 + 1328);
              if (v34 != v35) {
                goto LABEL_34;
              }
              goto LABEL_39;
            }
          }
          else
          {
            operations_research::glop::TriangularMatrix::HyperSparseSolve((void *)(a1 + 568), (uint64_t *)(a1 + 1296), (std::vector<int> *)(a1 + 1320));
            operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 848, a1 + 1320);
            uint64_t v32 = (void *)(a1 + 848);
            uint64_t v33 = (uint64_t *)(a1 + 1296);
            if (*(void *)(a1 + 1320) != *(void *)(a1 + 1328)) {
              goto LABEL_33;
            }
          }
          operations_research::glop::TriangularMatrix::UpperSolve((uint64_t)v32, v33);
          uint64_t v34 = *(int **)(a1 + 1320);
          long long v35 = *(int **)(a1 + 1328);
          if (v34 != v35)
          {
LABEL_34:
            uint64_t v36 = *v6;
            double v37 = 0.0;
            do
            {
              uint64_t v38 = *v34++;
              double v37 = v37 + *(double *)(v36 + 8 * v38) * *(double *)(v36 + 8 * v38);
              *(void *)(v36 + 8 * v38) = 0;
            }
            while (v34 != v35);
            return;
          }
LABEL_39:
          operations_research::glop::SquaredNorm((uint64_t *)(a1 + 1296));
          *(void *)(a1 + 1304) = *(void *)(a1 + 1296);
          return;
        }
      }
      else
      {
        std::string v24 = v5;
      }
    }
    else
    {
      std::string v24 = v5;
    }
    do
    {
      int v31 = *--v24;
      *--uint64_t v20 = v31;
    }
    while (v24 != v13);
    goto LABEL_29;
  }
}

void operations_research::glop::LuFactorization::RightSolveLWithPermutedInput(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  if (!*a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = (std::vector<int> *)(a3 + 4);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 4);
    if (a3[4] == a3[5])
    {
      operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v4, a3);
    }
    else
    {
      operations_research::glop::TriangularMatrix::HyperSparseSolve(v4, a3, v5);
    }
  }
}

void operations_research::glop::LuFactorization::RightSolveLForColumnView(unsigned char *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = (char *)a3[4];
  int v31 = (void **)(a3 + 4);
  a3[5] = v4;
  if (*a1)
  {
    uint64_t v5 = *a2;
    if (*a2 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = a2[1];
      uint64_t v8 = a2[2];
      uint64_t v29 = v8;
      uint64_t v30 = v7;
      while (1)
      {
        while (1)
        {
          uint64_t v9 = *(int *)(v7 + 4 * v6);
          *(void *)(*a3 + 8 * v9) = *(void *)(v8 + 8 * v6);
          unint64_t v10 = a3[6];
          if ((unint64_t)v4 >= v10) {
            break;
          }
          *(_DWORD *)uint64_t v4 = v9;
          v4 += 4;
          a3[5] = v4;
          if (++v6 == v5) {
            return;
          }
        }
        unint64_t v11 = (char *)*v31;
        uint64_t v12 = v4 - (unsigned char *)*v31;
        uint64_t v13 = v12 >> 2;
        unint64_t v14 = (v12 >> 2) + 1;
        if (v14 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)v11;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v17 = operator new(4 * v16);
          unint64_t v18 = &v17[4 * v13];
          *unint64_t v18 = v9;
          uint64_t v19 = (uint64_t)(v18 + 1);
          if (v4 == v11) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v17 = 0;
          unint64_t v18 = (_DWORD *)(4 * v13);
          *(_DWORD *)(4 * v13) = v9;
          uint64_t v19 = 4 * v13 + 4;
          if (v4 == v11) {
            goto LABEL_29;
          }
        }
        unint64_t v20 = v4 - 4 - v11;
        if (v20 < 0xBC)
        {
          unint64_t v21 = v4;
          goto LABEL_28;
        }
        if (&v17[v12 - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v12 - 4]) {
          break;
        }
        if (&v4[-(v20 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
        {
          unint64_t v21 = v4;
          do
          {
LABEL_28:
            int v28 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *--unint64_t v18 = v28;
          }
          while (v21 != v11);
          goto LABEL_29;
        }
        if ((unint64_t)(v4 - v17 - v12) < 0x20)
        {
          unint64_t v21 = v4;
          goto LABEL_28;
        }
        uint64_t v22 = (v20 >> 2) + 1;
        uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v21 = &v4[-v23];
        unint64_t v18 = (_DWORD *)((char *)v18 - v23);
        std::string v24 = &v17[4 * v13 - 16];
        uint64_t v25 = v4 - 16;
        uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v25 - 1);
          *std::string v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 8;
        }
        while (v26);
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
LABEL_29:
        a3[4] = v18;
        a3[5] = v19;
        a3[6] = &v17[4 * v16];
        if (v11) {
          operator delete(v11);
        }
        uint64_t v8 = v29;
        uint64_t v7 = v30;
        a3[5] = v19;
        ++v6;
        uint64_t v4 = (char *)v19;
        if (v6 == v5) {
          return;
        }
      }
      unint64_t v21 = v4;
      goto LABEL_28;
    }
  }
  else
  {
    operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ColumnView>((uint64_t)a1, a2, (uint64_t)a3);
  }
}

void operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ColumnView>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (*(void *)(a3 + 8) - *(void *)a3) >> 3;
  uint64_t v5 = *a2;
  if (*a2 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(a1 + 112);
    uint64_t v40 = a1;
    uint64_t v41 = (void **)(a3 + 32);
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    unint64_t v10 = *(char **)(a3 + 40);
    uint64_t v39 = *a2;
    int v38 = v7;
    uint64_t v36 = v9;
    uint64_t v37 = v8;
    while (1)
    {
      uint64_t v11 = *(int *)(*(void *)(a1 + 1176) + 4 * *(int *)(v8 + 4 * v6));
      *(void *)(*(void *)a3 + 8 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(void *)(v9 + 8 * v6);
      unint64_t v12 = *(void *)(a3 + 48);
      if ((unint64_t)v10 >= v12) {
        break;
      }
      *(_DWORD *)unint64_t v10 = v11;
      v10 += 4;
      *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v10;
      if ((int)v11 >= v7) {
        goto LABEL_33;
      }
LABEL_3:
      if (++v6 == v5) {
        goto LABEL_38;
      }
    }
    uint64_t v13 = (char *)*v41;
    uint64_t v14 = v10 - (unsigned char *)*v41;
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v12 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(4 * v18);
      unint64_t v20 = &v19[4 * v15];
      _DWORD *v20 = v11;
      uint64_t v21 = (uint64_t)(v20 + 1);
      if (v10 == v13)
      {
LABEL_30:
        *(void *)(a3 + 32) = v20;
        *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
        *(void *)(a3 + 48) = &v19[4 * v18];
        if (v13) {
          operator delete(v13);
        }
        unint64_t v10 = (char *)v21;
        uint64_t v5 = v39;
        a1 = v40;
        int v7 = v38;
        uint64_t v9 = v36;
        uint64_t v8 = v37;
        *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
        if ((int)v11 < v38) {
          goto LABEL_3;
        }
LABEL_33:
        uint64_t v31 = *(void *)(a1 + 64);
        uint64_t v32 = *(void *)(v31 + (((v11 << 32) + 0x100000000) >> 29));
        uint64_t v33 = *(void *)(v31 + 8 * v11);
        if ((int)v11 >= (int)v4) {
          int v34 = v4;
        }
        else {
          int v34 = v11;
        }
        if (v32 != v33) {
          LODWORD(v4) = v34;
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v11;
      uint64_t v21 = 4 * v15 + 4;
      if (v10 == v13) {
        goto LABEL_30;
      }
    }
    unint64_t v22 = v10 - 4 - v13;
    if (v22 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        uint64_t v23 = v10;
      }
      else if (&v10[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
      {
        uint64_t v23 = v10;
      }
      else if ((unint64_t)(v10 - &v19[v14]) >= 0x20)
      {
        uint64_t v24 = (v22 >> 2) + 1;
        uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v23 = &v10[-v25];
        unint64_t v20 = (_DWORD *)((char *)v20 - v25);
        uint64_t v26 = &v19[4 * v15 - 16];
        long long v27 = v10 - 16;
        uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v29 = *(_OWORD *)v27;
          *(v26 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v27 - 1);
          _OWORD *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 8;
        }
        while (v28);
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v23 = v10;
      }
    }
    else
    {
      uint64_t v23 = v10;
    }
    do
    {
      int v30 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *--unint64_t v20 = v30;
    }
    while (v23 != v13);
    goto LABEL_30;
  }
LABEL_38:
  long long v35 = (void *)(a1 + 8);
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 32);
  *(unsigned char *)(a3 + 24) = 1;
  if (*(void *)(a3 + 32) == *(void *)(a3 + 40))
  {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v35, v4, (uint64_t *)a3);
  }
  else
  {
    operations_research::glop::TriangularMatrix::HyperSparseSolve(v35, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
  }
}

void operations_research::glop::LuFactorization::RightSolveLWithNonZeros(operations_research::glop::LuFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  if (!*(unsigned char *)this)
  {
    uint64_t v4 = (std::vector<int> *)((char *)a2 + 32);
    if (*((void *)a2 + 4) == *((void *)a2 + 5))
    {
      uint64_t v11 = *((void *)a2 + 1) - *(void *)a2;
      uint64_t v12 = *((void *)this + 162);
      *((void *)this + 162) = *(void *)a2;
      *(void *)a2 = v12;
      uint64_t v13 = *((void *)this + 163);
      *((void *)this + 163) = *((void *)a2 + 1);
      *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v13;
      uint64_t v14 = *((void *)this + 164);
      *((void *)this + 164) = *((void *)a2 + 2);
      *((void *)a2 + 2) = v14;
      uint64_t v30 = 0;
      unint64_t v15 = (int)(v11 >> 3);
      unint64_t v16 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3;
      if (v15 <= v16)
      {
        if (v15 < v16) {
          *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(void *)a2 + 8 * v15;
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)a2, v15 - v16, &v30);
      }
      if ((int)((unint64_t)v11 >> 3) >= 1)
      {
        long long v27 = (void *)*((void *)this + 162);
        uint64_t v28 = (int *)*((void *)this + 147);
        uint64_t v29 = ((unint64_t)v11 >> 3);
        do
        {
          if (*(double *)v27 != 0.0) {
            *(void *)(*(void *)a2 + 8 * *v28) = *v27;
          }
          ++v28;
          ++v27;
          --v29;
        }
        while (v29);
      }
      uint64_t v30 = 0;
      std::vector<double>::assign((uint64_t)this + 1296, (int)(v11 >> 3), &v30);
      uint64_t v26 = (char *)this + 8;
    }
    else
    {
      uint64_t v5 = *((void *)this + 162);
      *((void *)this + 162) = *(void *)a2;
      *(void *)a2 = v5;
      uint64_t v6 = *((void *)this + 163);
      *((void *)this + 163) = *((void *)a2 + 1);
      *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v6;
      uint64_t v7 = *((void *)this + 164);
      *((void *)this + 164) = *((void *)a2 + 2);
      *((void *)a2 + 2) = v7;
      uint64_t v8 = *((void *)this + 163) - *((void *)this + 162);
      uint64_t v30 = 0;
      unint64_t v9 = (int)(v8 >> 3);
      unint64_t v10 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3;
      if (v9 <= v10)
      {
        if (v9 < v10) {
          *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(void *)a2 + 8 * v9;
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)a2, v9 - v10, &v30);
      }
      uint64_t v17 = (int *)*((void *)a2 + 4);
      unint64_t v18 = (int *)*((void *)a2 + 5);
      if (v17 != v18)
      {
        uint64_t v19 = *((void *)this + 162);
        uint64_t v20 = *((void *)this + 147);
        uint64_t v21 = *(void *)a2;
        do
        {
          uint64_t v22 = *v17;
          uint64_t v23 = *(void *)(v19 + 8 * v22);
          *(void *)(v19 + 8 * v22) = 0;
          uint64_t v24 = *(int *)(v20 + 4 * v22);
          *(void *)(v21 + 8 * v24) = v23;
          *v17++ = v24;
        }
        while (v17 != v18);
      }
      uint64_t v25 = (char *)this + 8;
      operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v25, v4);
      *((unsigned char *)a2 + 24) = 1;
      uint64_t v26 = v25;
      if (*((void *)a2 + 4) != *((void *)a2 + 5))
      {
        operations_research::glop::TriangularMatrix::HyperSparseSolve(v25, (uint64_t *)a2, v4);
        return;
      }
    }
    operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v26, (uint64_t *)a2);
  }
}

void operations_research::glop::LuFactorization::RightSolveLForScatteredColumn(operations_research::glop::LuFactorization *this, const operations_research::glop::ScatteredColumn *a2, operations_research::glop::ScatteredColumn *a3)
{
  *((void *)a3 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)a3 + 4);
  if (*(unsigned char *)this)
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=((uint64_t)a3, (uint64_t)a2);
  }
  else if (*((void *)a2 + 4) == *((void *)a2 + 5))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=((uint64_t)a3, (uint64_t)a2);
    operations_research::glop::LuFactorization::RightSolveLWithNonZeros(this, a3);
  }
  else
  {
    operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ScatteredColumn>((uint64_t)this, (uint64_t *)a2, (uint64_t)a3);
  }
}

void operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ScatteredColumn>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (*(void *)(a3 + 8) - *(void *)a3) >> 3;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[5] - v5;
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 112);
    uint64_t v9 = *a2;
    uint64_t v10 = (unint64_t)v6 >> 2;
    uint64_t v43 = a1;
    int v44 = (void **)(a3 + 32);
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t v12 = *(char **)(a3 + 40);
    uint64_t v42 = a2[4];
    int v41 = *(_DWORD *)(a1 + 112);
    uint64_t v39 = v11;
    uint64_t v40 = *a2;
    while (1)
    {
      uint64_t v13 = *(int *)(v5 + 4 * v7);
      uint64_t v14 = *(int *)(*(void *)(a1 + 1176) + 4 * v13);
      *(void *)(*(void *)a3 + 8 * v14) = *(void *)(v9 + 8 * v13);
      unint64_t v15 = *(void *)(a3 + 48);
      if ((unint64_t)v12 >= v15) {
        break;
      }
      *(_DWORD *)uint64_t v12 = v14;
      v12 += 4;
      *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v12;
      if ((int)v14 >= v8) {
        goto LABEL_36;
      }
LABEL_6:
      if (++v7 == v11) {
        goto LABEL_41;
      }
    }
    unint64_t v16 = (char *)*v44;
    uint64_t v17 = v12 - (unsigned char *)*v44;
    uint64_t v18 = v17 >> 2;
    unint64_t v19 = (v17 >> 2) + 1;
    if (v19 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - (void)v16;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(4 * v21);
      uint64_t v23 = &v22[4 * v18];
      *uint64_t v23 = v14;
      uint64_t v24 = (uint64_t)(v23 + 1);
      if (v12 == v16)
      {
LABEL_33:
        *(void *)(a3 + 32) = v23;
        *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v24;
        *(void *)(a3 + 48) = &v22[4 * v21];
        if (v16) {
          operator delete(v16);
        }
        uint64_t v12 = (char *)v24;
        uint64_t v5 = v42;
        a1 = v43;
        int v8 = v41;
        uint64_t v11 = v39;
        uint64_t v9 = v40;
        *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v24;
        if ((int)v14 < v41) {
          goto LABEL_6;
        }
LABEL_36:
        uint64_t v34 = *(void *)(a1 + 64);
        uint64_t v35 = *(void *)(v34 + (((v14 << 32) + 0x100000000) >> 29));
        uint64_t v36 = *(void *)(v34 + 8 * v14);
        if ((int)v14 >= (int)v4) {
          int v37 = v4;
        }
        else {
          int v37 = v14;
        }
        if (v35 != v36) {
          LODWORD(v4) = v37;
        }
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v14;
      uint64_t v24 = 4 * v18 + 4;
      if (v12 == v16) {
        goto LABEL_33;
      }
    }
    unint64_t v25 = v12 - 4 - v16;
    if (v25 >= 0xBC)
    {
      if (&v22[v17 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
      {
        uint64_t v26 = v12;
      }
      else if (&v12[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
      {
        uint64_t v26 = v12;
      }
      else if ((unint64_t)(v12 - &v22[v17]) >= 0x20)
      {
        uint64_t v27 = (v25 >> 2) + 1;
        uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v26 = &v12[-v28];
        uint64_t v23 = (_DWORD *)((char *)v23 - v28);
        uint64_t v29 = &v22[4 * v18 - 16];
        uint64_t v30 = v12 - 16;
        uint64_t v31 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v30 - 1);
          *uint64_t v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v26 = v12;
      }
    }
    else
    {
      uint64_t v26 = v12;
    }
    do
    {
      int v33 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v33;
    }
    while (v26 != v16);
    goto LABEL_33;
  }
LABEL_41:
  int v38 = (void *)(a1 + 8);
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 32);
  *(unsigned char *)(a3 + 24) = 1;
  if (*(void *)(a3 + 32) == *(void *)(a3 + 40))
  {
    operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v38, v4, (uint64_t *)a3);
  }
  else
  {
    operations_research::glop::TriangularMatrix::HyperSparseSolve(v38, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
  }
}

void operations_research::glop::LuFactorization::LeftSolveUWithNonZeros(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1128) != *(void *)(a1 + 1136))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 288);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: col_perm_.empty() ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v4 = (std::vector<int> *)(a2 + 32);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 568, a2 + 32);
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v5 = (void *)(a1 + 288);
    if (*(void *)(a2 + 32) == *(void *)(a2 + 40))
    {
      operations_research::glop::TriangularMatrix::TransposeUpperSolve((uint64_t)v5, (uint64_t *)a2);
    }
    else
    {
      operations_research::glop::TriangularMatrix::TransposeHyperSparseSolve(v5, (uint64_t *)a2, v4);
    }
  }
}

void sub_23CB775CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::glop::LuFactorization::RightSolveUWithNonZeros(operations_research::glop::LuFactorization *this, int **a2)
{
  if (*((void *)this + 141) != *((void *)this + 142))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 304);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: col_perm_.empty() ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  if (!*(unsigned char *)this)
  {
    uint64_t v4 = (char *)(a2 + 4);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder((int *)this + 72, a2 + 4);
    *((unsigned char *)a2 + 24) = 1;
    uint64_t v5 = (void *)((char *)this + 568);
    if (a2[4] == a2[5])
    {
      operations_research::glop::TriangularMatrix::TransposeLowerSolve((uint64_t)v5, (uint64_t *)a2);
    }
    else
    {
      operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(v5, (uint64_t *)a2, (uint64_t)v4);
    }
  }
}

void sub_23CB776DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  if (*a1) {
    return 0;
  }
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 + 32;
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 848, a2 + 32);
  *(unsigned char *)(v5 + 24) = 1;
  int v8 = v6 + 1;
  if (*(void *)(v5 + 32) == *(void *)(v5 + 40))
  {
    operations_research::glop::TriangularMatrix::TransposeLowerSolve((uint64_t)v8, (uint64_t *)v5);
    unint64_t v104 = (void *)v5;
    if (a3) {
      goto LABEL_5;
    }
LABEL_17:
    if (*(void *)(v5 + 32) == *(void *)(v5 + 40))
    {
      uint64_t v49 = *(void *)(v5 + 8) - *(void *)v5;
      uint64_t v50 = v6[162];
      v6[162] = *(void *)v5;
      *(void *)uint64_t v5 = v50;
      uint64_t v51 = v6[163];
      v6[163] = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = v51;
      uint64_t v52 = v6[164];
      v6[164] = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = v52;
      uint64_t v105 = 0;
      BOOL v53 = (void *)v5;
      unint64_t v54 = (int)(v49 >> 3);
      unint64_t v55 = (uint64_t)(v53[1] - *v53) >> 3;
      if (v54 <= v55)
      {
        if (v54 < v55) {
          v104[1] = *v53 + 8 * v54;
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)v53, v54 - v55, &v105);
      }
      if ((int)((unint64_t)v49 >> 3) >= 1)
      {
        int v64 = (void *)v6[162];
        int v65 = (int *)v6[150];
        uint64_t v66 = ((unint64_t)v49 >> 3);
        do
        {
          if (*(double *)v64 != 0.0) {
            *(void *)(*v104 + 8 * *v6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *v64;
          }
          ++v65;
          ++v64;
          --v66;
        }
        while (v66);
      }
      uint64_t v105 = 0;
      std::vector<double>::assign((uint64_t)(v6 + 162), (int)(v49 >> 3), &v105);
    }
    else
    {
      uint64_t v25 = v6[162];
      v6[162] = *(void *)v5;
      *(void *)uint64_t v5 = v25;
      uint64_t v26 = v6[163];
      v6[163] = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = v26;
      uint64_t v27 = v6[164];
      v6[164] = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = v27;
      uint64_t v28 = v6[163] - v6[162];
      uint64_t v105 = 0;
      unint64_t v29 = (int)(v28 >> 3);
      unint64_t v30 = (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3;
      if (v29 <= v30)
      {
        if (v29 < v30) {
          *(void *)(v5 + 8) = *(void *)v5 + 8 * v29;
        }
      }
      else
      {
        std::vector<double>::__append(v5, v29 - v30, &v105);
      }
      int v56 = *(int **)(v5 + 32);
      int v57 = *(int **)(v5 + 40);
      if (v56 != v57)
      {
        uint64_t v58 = v6[162];
        uint64_t v59 = v6[150];
        uint64_t v60 = *(void *)v5;
        do
        {
          uint64_t v61 = *v56;
          uint64_t v62 = *(void *)(v58 + 8 * v61);
          *(void *)(v58 + 8 * v6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
          uint64_t v63 = *(int *)(v59 + 4 * v61);
          *(void *)(v60 + 8 * v63) = v62;
          *v56++ = v63;
        }
        while (v56 != v57);
      }
    }
    return 0;
  }
  operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(v8, (uint64_t *)v5, v7);
  unint64_t v104 = (void *)v5;
  if (!a3) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v5 + 8) - *(void *)v5;
  uint64_t v11 = (int *)a3[4];
  uint64_t v10 = (int *)a3[5];
  if (v11 == v10 || (double)(int)((unint64_t)v9 >> 3) * 0.05 <= (double)(unint64_t)(v10 - v11))
  {
    uint64_t v105 = 0;
    int64_t v22 = (v9 << 29) & 0xFFFFFFFF00000000;
    uint64_t v23 = (void *)*a3;
    unint64_t v24 = (a3[1] - *a3) >> 3;
    if (v22 >> 32 <= v24)
    {
      if (v22 >> 32 < v24) {
        a3[1] = (uint64_t)&v23[v22 >> 32];
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, (v22 >> 32) - v24, &v105);
      uint64_t v23 = (void *)*a3;
    }
    bzero(v23, v22 >> 29);
  }
  else
  {
    uint64_t v12 = (void *)*a3;
    unint64_t v13 = (char *)v10 - (char *)v11 - 4;
    uint64_t v14 = (int *)a3[4];
    if (v13 < 4) {
      goto LABEL_96;
    }
    uint64_t v15 = (v13 >> 2) + 1;
    uint64_t v14 = &v11[v15 & 0x7FFFFFFFFFFFFFFELL];
    unint64_t v16 = v11 + 1;
    uint64_t v17 = v15 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v18 = *v16;
      v12[*(v16 - 1)] = 0;
      v12[v18] = 0;
      v16 += 2;
      v17 -= 2;
    }
    while (v17);
    if (v15 != (v15 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_96:
      do
      {
        uint64_t v19 = *v14++;
        v12[v19] = 0;
      }
      while (v14 != v10);
    }
    uint64_t v105 = 0;
    unint64_t v20 = (int)(v9 >> 3);
    unint64_t v21 = (a3[1] - (uint64_t)v12) >> 3;
    if (v20 <= v21)
    {
      if (v20 < v21) {
        a3[1] = (uint64_t)&v12[v20];
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, v20 - v21, &v105);
    }
  }
  a3[5] = a3[4];
  uint64_t v31 = *(void *)v5;
  *(void *)uint64_t v5 = *a3;
  *a3 = v31;
  uint64_t v32 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = a3[1];
  a3[1] = v32;
  uint64_t v33 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = a3[2];
  a3[2] = v33;
  uint64_t v34 = *(void *)(v5 + 32);
  if (v34 == *(void *)(v5 + 40))
  {
    int v45 = (int *)v6[150];
    unint64_t v46 = v6[151] - (void)v45;
    if ((int)(v46 >> 2) >= 1)
    {
      unint64_t v47 = (void *)*a3;
      uint64_t v48 = (v46 >> 2);
      do
      {
        if (*(double *)v47 != 0.0) {
          *(void *)(*(void *)v5 + 8 * *v4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *v47;
        }
        ++v45;
        ++v47;
        --v48;
      }
      while (v48);
    }
    return 1;
  }
  *(void *)(v5 + 32) = a3[4];
  a3[4] = v34;
  uint64_t v35 = *(void *)(v5 + 40);
  *(void *)(v5 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = a3[5];
  a3[5] = v35;
  uint64_t v36 = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = a3[6];
  a3[6] = v36;
  int64_t v37 = a3[5] - a3[4];
  uint64_t v38 = v37 >> 2;
  uint64_t v39 = *(unsigned char **)(v5 + 32);
  if (v37 >> 2 > (unint64_t)((uint64_t)(*(void *)(v5 + 48) - (void)v39) >> 2))
  {
    if (v37 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = *(unsigned char **)(v5 + 40);
    int v41 = (char *)operator new(v37);
    uint64_t v42 = v40 - v39;
    uint64_t v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
    int v44 = v43;
    if (v40 == v39) {
      goto LABEL_57;
    }
    if ((unint64_t)(v42 - 4) >= 0x2C)
    {
      int v44 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v40 - &v41[v42 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        uint64_t v67 = v42 >> 2;
        unint64_t v68 = ((unint64_t)(v42 - 4) >> 2) + 1;
        uint64_t v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        char v70 = &v40[-v69];
        int v44 = &v43[-v69];
        BOOL v71 = &v41[4 * v67 - 16];
        int v72 = (long long *)(v40 - 16);
        uint64_t v73 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v74 = *v72;
          *((_OWORD *)v71 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v72 - 1);
          *(_OWORD *)BOOL v71 = v74;
          v71 -= 32;
          v72 -= 2;
          v73 -= 8;
        }
        while (v73);
        uint64_t v40 = v70;
        if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_57:
          uint64_t v5 = (uint64_t)v104;
          v104[4] = v44;
          v104[5] = v43;
          v104[6] = &v41[4 * v38];
          if (v39) {
            operator delete(v39);
          }
          goto LABEL_59;
        }
      }
    }
    else
    {
      int v44 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      int v75 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *((_DWORD *)v44 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v75;
      v44 -= 4;
    }
    while (v40 != v39);
    goto LABEL_57;
  }
LABEL_59:
  uint64_t v103 = (void **)v7;
  int v77 = (int *)a3[4];
  BOOL v76 = (int *)a3[5];
  if (v77 != v76)
  {
    unint64_t v78 = *(char **)(v5 + 40);
    uint64_t v102 = (int *)a3[5];
    while (1)
    {
      while (1)
      {
        uint64_t v79 = *v77;
        uint64_t v80 = *(int *)(v6[150] + 4 * v79);
        *(void *)(*(void *)v5 + 8 * v8operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(void *)(*a3 + 8 * v79);
        unint64_t v81 = *(void *)(v5 + 48);
        if ((unint64_t)v78 >= v81) {
          break;
        }
        *(_DWORD *)unint64_t v78 = v80;
        v78 += 4;
        *(void *)(v5 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v78;
        if (++v77 == v76) {
          goto LABEL_89;
        }
      }
      int v82 = (char *)*v103;
      uint64_t v83 = v78 - (unsigned char *)*v103;
      uint64_t v84 = v83 >> 2;
      unint64_t v85 = (v83 >> 2) + 1;
      if (v85 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v86 = a3;
      double v87 = v6;
      uint64_t v88 = v81 - (void)v82;
      if (v88 >> 1 > v85) {
        unint64_t v85 = v88 >> 1;
      }
      unint64_t v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
      if (v89)
      {
        if (v89 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v90 = operator new(4 * v89);
        long long v91 = &v90[4 * v84];
        _DWORD *v91 = v80;
        uint64_t v92 = (uint64_t)(v91 + 1);
        if (v78 == v82)
        {
LABEL_83:
          uint64_t v5 = (uint64_t)v104;
          v104[4] = v91;
          v104[5] = v92;
          v104[6] = &v90[4 * v89];
          if (!v82) {
            goto LABEL_80;
          }
LABEL_79:
          operator delete(v82);
          goto LABEL_80;
        }
      }
      else
      {
        long long v90 = 0;
        long long v91 = (_DWORD *)(4 * v84);
        *(_DWORD *)(4 * v84) = v80;
        uint64_t v92 = 4 * v84 + 4;
        if (v78 == v82) {
          goto LABEL_83;
        }
      }
      unint64_t v93 = v78 - 4 - v82;
      if (v93 < 0xBC
        || &v90[v83 - 4 - (v93 & 0xFFFFFFFFFFFFFFFCLL)] > &v90[v83 - 4]
        || &v78[-(v93 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v78 - 4
        || (unint64_t)(v78 - v90 - v83) < 0x20)
      {
        break;
      }
      uint64_t v96 = (v93 >> 2) + 1;
      uint64_t v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
      long long v94 = &v78[-v97];
      long long v91 = (_DWORD *)((char *)v91 - v97);
      unint64_t v98 = &v90[4 * v84 - 16];
      unint64_t v99 = v78 - 16;
      uint64_t v100 = v96 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v101 = *(_OWORD *)v99;
        *(v98 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v99 - 1);
        _OWORD *v98 = v101;
        v98 -= 2;
        v99 -= 32;
        v100 -= 8;
      }
      while (v100);
      uint64_t v5 = (uint64_t)v104;
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_77;
      }
LABEL_78:
      *(void *)(v5 + 32) = v91;
      *(void *)(v5 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v92;
      *(void *)(v5 + 48) = &v90[4 * v89];
      if (v82) {
        goto LABEL_79;
      }
LABEL_80:
      uint64_t v6 = v87;
      a3 = v86;
      BOOL v76 = v102;
      *(void *)(v5 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v92;
      ++v77;
      unint64_t v78 = (char *)v92;
      if (v77 == v102) {
        goto LABEL_89;
      }
    }
    long long v94 = v78;
    uint64_t v5 = (uint64_t)v104;
    do
    {
LABEL_77:
      int v95 = *((_DWORD *)v94 - 1);
      v94 -= 4;
      *--long long v91 = v95;
    }
    while (v94 != v82);
    goto LABEL_78;
  }
LABEL_89:
  *(unsigned char *)(v5 + 24) = 0;
  return 1;
}

uint64_t operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(unsigned char *a1, uint64_t a2)
{
  return operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(a1, a2, 0);
}

uint64_t operations_research::glop::LuFactorization::LeftSolveUForUnitRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 1128);
    if (v8 != *(void *)(a1 + 1136)) {
      uint64_t v4 = *(unsigned int *)(v8 + 4 * (int)a2);
    }
    *(void *)(*(void *)a3 + 8 * (int)v4) = 0x3FF0000000000000;
    uint64_t v9 = (void **)(a3 + 32);
    uint64_t v11 = *(char **)(a3 + 40);
    unint64_t v10 = *(void *)(a3 + 48);
    if ((unint64_t)v11 < v10)
    {
      *(_DWORD *)uint64_t v11 = v4;
      uint64_t v12 = (uint64_t)(v11 + 4);
LABEL_47:
      *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v12;
      if (*(void *)(*(void *)(a1 + 624) + (((v4 << 32) + 0x100000000) >> 29)) == *(void *)(*(void *)(a1 + 624)
                                                                                                  + 8 * (int)v4))
      {
        *(double *)(*(void *)a3 + 8 * (int)v4) = *(double *)(*(void *)a3 + 8 * (int)v4)
                                                   / *(double *)(*(void *)(a1 + 648) + 8 * (int)v4);
      }
      else
      {
        uint64_t v51 = (void *)(a1 + 568);
        operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v51, a3 + 32);
        *(unsigned char *)(a3 + 24) = 1;
        if (*(void *)(a3 + 32) == *(void *)(a3 + 40)) {
          operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v51, v4, (uint64_t *)a3);
        }
        else {
          operations_research::glop::TriangularMatrix::HyperSparseSolve(v51, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
        }
      }
      return v4;
    }
    uint64_t v23 = (char *)*v9;
    uint64_t v24 = v11 - (unsigned char *)*v9;
    uint64_t v25 = v24 >> 2;
    unint64_t v26 = (v24 >> 2) + 1;
    if (v26 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v10 - (void)v23;
    if (v27 >> 1 > v26) {
      unint64_t v26 = v27 >> 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 62) {
        goto LABEL_54;
      }
      unint64_t v29 = operator new(4 * v28);
      unint64_t v30 = &v29[4 * v25];
      uint64_t v31 = &v29[4 * v28];
      _DWORD *v30 = v4;
      uint64_t v12 = (uint64_t)(v30 + 1);
      int64_t v32 = v11 - v23;
      if (v11 == v23) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v29 = 0;
      unint64_t v30 = (_DWORD *)(4 * v25);
      uint64_t v31 = 0;
      *(_DWORD *)(4 * v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v4;
      uint64_t v12 = 4 * v25 + 4;
      int64_t v32 = v11 - v23;
      if (v11 == v23)
      {
LABEL_45:
        *(void *)(a3 + 32) = v30;
        *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v12;
        *(void *)(a3 + 48) = v31;
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_47;
      }
    }
    unint64_t v42 = v32 - 4;
    if (v42 < 0x2C) {
      goto LABEL_58;
    }
    if ((unint64_t)(v11 - v29 - v24) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v43 = (v42 >> 2) + 1;
    uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    int v45 = &v11[-v44];
    unint64_t v30 = (_DWORD *)((char *)v30 - v44);
    unint64_t v46 = &v29[4 * v25 - 16];
    unint64_t v47 = v11 - 16;
    uint64_t v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v49 = *(_OWORD *)v47;
      *(v46 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v47 - 1);
      _OWORD *v46 = v49;
      v46 -= 2;
      v47 -= 32;
      v48 -= 8;
    }
    while (v48);
    uint64_t v11 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        int v50 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--unint64_t v30 = v50;
      }
      while (v11 != v23);
    }
    goto LABEL_45;
  }
  *(void *)(*(void *)a3 + 8 * (int)a2) = 0x3FF0000000000000;
  uint64_t v6 = *(char **)(a3 + 40);
  unint64_t v5 = *(void *)(a3 + 48);
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)uint64_t v6 = a2;
    *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v6 + 4;
    return v4;
  }
  unint64_t v13 = *(char **)(a3 + 32);
  uint64_t v14 = (v6 - v13) >> 2;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = v5 - (void)v13;
  if (v16 >> 1 > v15) {
    unint64_t v15 = v16 >> 1;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (!(v17 >> 62))
    {
      uint64_t v18 = operator new(4 * v17);
      uint64_t v19 = &v18[4 * v14];
      unint64_t v20 = &v18[4 * v17];
      *uint64_t v19 = v4;
      uint64_t v21 = (uint64_t)(v19 + 1);
      int64_t v22 = v6 - v13;
      if (v6 == v13) {
        goto LABEL_35;
      }
LABEL_29:
      unint64_t v33 = v22 - 4;
      if (v33 < 0x2C) {
        goto LABEL_59;
      }
      if ((unint64_t)(v13 - v18) < 0x20) {
        goto LABEL_59;
      }
      uint64_t v34 = (v33 >> 2) + 1;
      uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v36 = &v6[-v35];
      uint64_t v19 = (_DWORD *)((char *)v19 - v35);
      int64_t v37 = &v18[4 * v14 - 16];
      uint64_t v38 = v6 - 16;
      uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v40 = *(_OWORD *)v38;
        *(v37 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v38 - 1);
        *int64_t v37 = v40;
        v37 -= 2;
        v38 -= 32;
        v39 -= 8;
      }
      while (v39);
      uint64_t v6 = v36;
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_59:
        do
        {
          int v41 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--uint64_t v19 = v41;
        }
        while (v6 != v13);
      }
      goto LABEL_35;
    }
LABEL_54:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v18 = 0;
  uint64_t v19 = (_DWORD *)(4 * v14);
  unint64_t v20 = 0;
  *(_DWORD *)(4 * v14) = a2;
  uint64_t v21 = 4 * v14 + 4;
  int64_t v22 = v6 - v13;
  if (v6 != v13) {
    goto LABEL_29;
  }
LABEL_35:
  *(void *)(a3 + 32) = v19;
  *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
  *(void *)(a3 + 48) = v20;
  if (v13) {
    operator delete(v13);
  }
  *(void *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
  return v4;
}

uint64_t operations_research::glop::LuFactorization::GetColumnOfU(uint64_t a1, unsigned int a2, __n128 a3)
{
  unsigned int v3 = a2;
  if (*(unsigned char *)a1)
  {
    *(void *)(a1 + 1256) = 0;
    *(unsigned char *)(a1 + 1288) = 0;
    if (!*(void *)(a1 + 1264)) {
      operator new[]();
    }
    *(void *)(a1 + 1256) = 1;
    **(_DWORD **)(a1 + 1272) = a2;
    **(void **)(a1 + 128operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0x3FF0000000000000;
    *(unsigned char *)(a1 + 1288) = 1;
    return a1 + 1248;
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 288);
    uint64_t v7 = *(void *)(a1 + 1128);
    if (v7 != *(void *)(a1 + 1136)) {
      unsigned int v3 = *(_DWORD *)(v7 + 4 * (int)a2);
    }
    operations_research::glop::TriangularMatrix::CopyColumnToSparseColumn(v6, v3, a1 + 1248, a3);
    return a1 + 1248;
  }
}

uint64_t operations_research::glop::LuFactorization::NumberOfEntries(operations_research::glop::LuFactorization *this)
{
  if (*(unsigned char *)this) {
    return 0;
  }
  else {
    return *((int *)this + 73)
  }
         + (uint64_t)*((int *)this + 3)
         + ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3)
         + ((uint64_t)(*((void *)this + 38) - *((void *)this + 37)) >> 3);
}

double operations_research::glop::LuFactorization::ComputeInverseInfinityNormUpperBound(operations_research::glop::LuFactorization *this)
{
  double v2 = operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound((operations_research::glop::LuFactorization *)((char *)this + 8));
  return v2
       * operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound((operations_research::glop::LuFactorization *)((char *)this + 288));
}

operations_research::glop::LuFactorization::Stats *operations_research::glop::LuFactorization::Stats::Stats(operations_research::glop::LuFactorization::Stats *this)
{
  strcpy((char *)this, "LuFactorization");
  *((unsigned char *)this + 23) = 15;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  double v2 = (void *)((char *)this + 80);
  char v5 = 17;
  strcpy(__p, "basis_num_entries");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::LuFactorization::Stats *)((char *)this + 80), (long long *)__p, this);
  *double v2 = &unk_26F0C4A58;
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  char v5 = 10;
  strcpy(__p, "lu_fill_in");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::LuFactorization::Stats *)((char *)this + 160), (long long *)__p, this) = &unk_26F0C4998;
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  return this;
}

void sub_23CB7849C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 8operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*(void **)(v14 + 88));
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::Markowitz *operations_research::glop::Markowitz::Markowitz(operations_research::glop::Markowitz *this)
{
  double v2 = operations_research::glop::Markowitz::Stats::Stats(this);
  *(_OWORD *)((char *)v2 + 433) = 0u;
  *(_OWORD *)((char *)v2 + 408) = 0u;
  *(_OWORD *)((char *)v2 + 424) = 0u;
  *(_OWORD *)((char *)v2 + 456) = 0u;
  *(_OWORD *)((char *)v2 + 472) = 0u;
  *(_OWORD *)((char *)v2 + 488) = 0u;
  *(_OWORD *)((char *)v2 + 504) = 0u;
  *(_OWORD *)((char *)v2 + 52operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 536) = 0u;
  *(_OWORD *)((char *)v2 + 552) = 0u;
  *((unsigned char *)v2 + 568) = 0;
  *((_OWORD *)v2 + 36) = 0u;
  *((_OWORD *)v2 + 37) = 0u;
  *((_OWORD *)v2 + 38) = 0u;
  *((_OWORD *)v2 + 39) = 0u;
  *((_OWORD *)v2 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *((_OWORD *)v2 + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)v2 + 42) = 0u;
  *((_OWORD *)v2 + 43) = 0u;
  *((_OWORD *)v2 + 44) = 0u;
  *((_OWORD *)v2 + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)v2 + 46) = 0u;
  *((_DWORD *)v2 + 188) = 0;
  *((unsigned char *)v2 + 756) = 1;
  *(_OWORD *)((char *)v2 + 76operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 776) = 0u;
  *(_OWORD *)((char *)v2 + 792) = 0u;
  *(_OWORD *)((char *)v2 + 808) = 0u;
  *(_OWORD *)((char *)v2 + 824) = 0u;
  *(_OWORD *)((char *)v2 + 84operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 856) = 0u;
  *(_OWORD *)((char *)v2 + 872) = 0u;
  *(_OWORD *)((char *)v2 + 888) = 0u;
  *(_OWORD *)((char *)v2 + 904) = 0u;
  *(_OWORD *)((char *)v2 + 92operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 936) = 0u;
  *(_OWORD *)((char *)v2 + 952) = 0u;
  *(_OWORD *)((char *)v2 + 968) = 0u;
  *(_OWORD *)((char *)v2 + 984) = 0u;
  *(_OWORD *)((char *)v2 + 100operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 1016) = 0u;
  *((_DWORD *)v2 + 258) = 0;
  *((unsigned char *)v2 + 1036) = 1;
  *(_OWORD *)((char *)v2 + 1384) = 0u;
  *(_OWORD *)((char *)v2 + 140operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *(_OWORD *)((char *)v2 + 1416) = 0u;
  *(_OWORD *)((char *)v2 + 1432) = 0u;
  *((void *)v2 + 18std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
  *((_OWORD *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 7operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *((_OWORD *)this + 7std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 7std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 8operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0u;
  *((_OWORD *)this + 8std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 8std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_DWORD *)this + 344) = 0;
  *((void *)this + 192) = 0;
  *((_OWORD *)this + 9std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 92) = 0u;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v2 + 1544, 0);
  return this;
}

void sub_23CB78640(_Unwind_Exception *a1)
{
  uint64_t v7 = (void *)v1[190];
  if (v7)
  {
    v1[191] = v7;
    operator delete(v7);
    uint64_t v8 = (void *)v1[187];
    if (!v8)
    {
LABEL_3:
      uint64_t v9 = *v5;
      if (!*v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = (void *)v1[187];
    if (!v8) {
      goto LABEL_3;
    }
  }
  v1[188] = v8;
  operator delete(v8);
  uint64_t v9 = *v5;
  if (!*v5)
  {
LABEL_4:
    operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(v4);
    operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(v3);
    unint64_t v10 = (void *)v1[151];
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  v1[185] = v9;
  operator delete(v9);
  operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(v4);
  operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(v3);
  unint64_t v10 = (void *)v1[151];
  if (!v10)
  {
LABEL_6:
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v1 + 116));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v1 + 81));
    operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory((operations_research::glop::SparseMatrixWithReusableColumnMemory *)(v1 + 66));
    operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory(v2);
    operations_research::glop::Markowitz::Stats::~Stats((operations_research::glop::Markowitz::Stats *)v1);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v10);
  goto LABEL_6;
}

void operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(operations_research::glop::ColumnPriorityQueue *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 7);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  uint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v9;
    operator delete(v9);
  }
}

void operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory(operations_research::glop::SparseMatrixWithReusableColumnMemory *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 13);
    uint64_t v4 = (void *)*((void *)this + 12);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(v3 - 6);
        v3 -= 6;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          MEMORY[0x23ECF2BA0](v5, 0x1000C8077774924);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void *)this;
  *(void *)this = 0;
  if (v9) {
    MEMORY[0x23ECF2BA0](v9, 0x1000C8077774924);
  }
}

void operations_research::glop::Markowitz::Stats::~Stats(operations_research::glop::Markowitz::Stats *this)
{
  *((void *)this + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if (*((char *)this + 351) < 0)
  {
    operator delete(*((void **)this + 41));
    *((void *)this + 3operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_3:
      *((void *)this + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
      if ((*((char *)this + 191) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)this + 3operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 271) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*((void **)this + 31));
  *((void *)this + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 191) & 0x80000000) == 0)
  {
LABEL_4:
    *((void *)this + 1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
    if ((*((char *)this + 111) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*((void **)this + 21));
  *((void *)this + 1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = this;
    goto LABEL_7;
  }
LABEL_11:
  operator delete(*((void **)this + 11));
  uint64_t v2 = this;

LABEL_7:
  operations_research::StatsGroup::~StatsGroup(v2);
}

operations_research::glop::Markowitz::Stats *operations_research::glop::Markowitz::Stats::Stats(operations_research::glop::Markowitz::Stats *this)
{
  strcpy((char *)this, "Markowitz");
  *((unsigned char *)this + 23) = 9;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_23CE7ECF0;
  strcpy((char *)__p, "basis_singleton_column_ratio");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 80), (long long *)&__p, this);
  *((void *)this + 1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0C4998;
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v4 = xmmword_23CE7EC80;
  strcpy((char *)__p, "basis_residual_singleton_column_ratio");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 160), (long long *)&__p, this);
  *((void *)this + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0C4998;
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_23CE7ECF0;
  strcpy((char *)__p, "pivots_without_fill_in_ratio");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 240), (long long *)&__p, this);
  *((void *)this + 3operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0C4998;
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_23CE7ED90;
  strcpy((char *)__p, "degree_two_pivot_columns");
  *(void *)operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 320), (long long *)&__p, this) = &unk_26F0C4998;
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_23CB78C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v17 + 24operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if (*(char *)(v17 + 271) < 0) {
    operator delete(*(void **)(v17 + 248));
  }
  *(void *)(v17 + 16operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if (*(char *)(v17 + 191) < 0) {
    operator delete(*(void **)(v17 + 168));
  }
  *(void *)(v17 + 8operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = &unk_26F0BCDD8;
  if (*(char *)(v17 + 111) < 0)
  {
    operator delete(*(void **)(v17 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v17);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v17);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result == a2)
  {
    *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)result, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(v3 + 24) = *(unsigned char *)(a2 + 24);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    unint64_t v4 = *(void *)(a2 + 64);
    if (v4)
    {
      uint64_t v5 = *(void **)(v3 + 56);
      if (v4 > *(void *)(v3 + 72) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(void *)(v3 + 56) = 0;
          *(void *)(v3 + 64) = 0;
          *(void *)(v3 + 72) = 0;
          unint64_t v4 = *(void *)(a2 + 64);
        }
        if ((v4 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = ((v4 - 1) >> 6) + 1;
        uint64_t v5 = operator new(8 * v6);
        *(void *)(v3 + 56) = v5;
        *(void *)(v3 + 64) = 0;
        *(void *)(v3 + 72) = v6;
        unint64_t v4 = *(void *)(a2 + 64);
      }
      memmove(v5, *(const void **)(a2 + 56), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v4 = *(void *)(a2 + 64);
    }
    *(void *)(v3 + 64) = v4;
    return v3;
  }
  return result;
}

uint64_t *std::vector<double>::assign(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(uint64_t **)a1;
  BOOL result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(void *)(a1 + 8) = v7;
      operator delete(v7);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 >> 61) {
      goto LABEL_38;
    }
    uint64_t v9 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v9 = a2;
    }
    BOOL v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v9;
    }
    if (v11 >> 61) {
LABEL_38:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = v11;
    BOOL result = (uint64_t *)operator new(8 * v11);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v13 = &result[a2];
    uint64_t v14 = *a3;
    unint64_t v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v16 = result;
    if (v15 < 3) {
      goto LABEL_41;
    }
    unint64_t v17 = v15 + 1;
    uint64_t v16 = &result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v18 = vdupq_lane_s64(v14, 0);
    uint64_t v19 = (int64x2_t *)(result + 2);
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *uint64_t v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  uint64_t v21 = *(uint64_t **)(a1 + 8);
  int64_t v22 = (char *)v21 - (char *)v7;
  unint64_t v23 = v21 - v7;
  if (v23 >= a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = v21 - v7;
  }
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3) {
      goto LABEL_42;
    }
    BOOL result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    int64x2_t v25 = vdupq_lane_s64(*a3, 0);
    unint64_t v26 = (int64x2_t *)(v7 + 2);
    unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      int64x2_t *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    BOOL v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  BOOL v10 = a2 >= v23;
  unint64_t v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    unint64_t v13 = &v7[a2];
LABEL_37:
    *(void *)(a1 + 8) = v13;
    return result;
  }
  unint64_t v30 = &v21[v29];
  unint64_t v31 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v31 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)v21 + v31 + 8) > a3) {
    goto LABEL_43;
  }
  uint64_t v32 = (v31 >> 3) + 1;
  unint64_t v33 = &v21[v32 & 0x3FFFFFFFFFFFFFFCLL];
  int64x2_t v34 = vdupq_lane_s64(*a3, 0);
  uint64_t v35 = (int64x2_t *)(v21 + 2);
  uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35[-1] = v34;
    int64x2_t *v35 = v34;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  uint64_t v21 = v33;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(void *)(a1 + 8) = v30;
  return result;
}

void operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<int> *a3@<X2>, std::vector<int> *a4@<X3>, uint64_t a5@<X8>)
{
  v56[2] = *MEMORY[0x263EF8340];
  operations_research::glop::Markowitz::Clear((operations_research::glop::Markowitz *)a1);
  int v9 = **(_DWORD **)a2;
  unint64_t v10 = *(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8);
  int v11 = v10 >> 2;
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::size_type v12 = v11;
  std::vector<int>::assign(a4, v11, (std::vector<int>::const_reference)&__u);
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign(a3, v9, (std::vector<int>::const_reference)&__u);
  if (*(void *)(*(void *)a2 + 8) == *(void *)(*(void *)a2 + 16))
  {
    operations_research::glop::Status::Status(a5);
    return;
  }
  *(void *)(a1 + 40operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = a2;
  long long v49 = (operations_research::glop::TriangularMatrix *)(a1 + 648);
  operations_research::glop::TriangularMatrix::Reset(a1 + 648, v9, (v10 >> 2));
  uint64_t v48 = a1 + 928;
  operations_research::glop::TriangularMatrix::Reset(a1 + 928, v9, (v10 >> 2));
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign((std::vector<int> *)(a1 + 456), v11, (std::vector<int>::const_reference)&__u);
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  unint64_t v13 = *(void **)(a1 + 504);
  uint64_t v14 = *(void **)(a1 + 512);
  while (v14 != v13)
  {
    uint64_t v16 = *(v14 - 6);
    v14 -= 6;
    uint64_t v15 = v16;
    void *v14 = 0;
    if (v16) {
      MEMORY[0x23ECF2BA0](v15, 0x1000C8077774924);
    }
  }
  *(void *)(a1 + 512) = v13;
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign((std::vector<int> *)(a1 + 576), v12, (std::vector<int>::const_reference)&__u);
  *(void *)(a1 + 608) = *(void *)(a1 + 600);
  unint64_t v17 = *(void **)(a1 + 632);
  int64x2_t v18 = *(void **)(a1 + 624);
  while (v17 != v18)
  {
    uint64_t v20 = *(v17 - 6);
    v17 -= 6;
    uint64_t v19 = v20;
    *unint64_t v17 = 0;
    if (v20) {
      MEMORY[0x23ECF2BA0](v19, 0x1000C8077774924);
    }
  }
  *(void *)(a1 + 632) = v18;
  __u.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::assign((char **)(a1 + 1208), v12, &__u);
  *(unsigned char *)(a1 + 1464) = 1;
  int v55 = 0;
  operations_research::glop::Markowitz::ExtractSingletonColumns(a1, (void *)a2, (uint64_t *)a3, a4, &v55, v21);
  operations_research::glop::Markowitz::ExtractResidualSingletonColumns(a1, (void *)a2, (uint64_t *)a3, (uint64_t *)a4, &v55);
  int v22 = v55;
  operations_research::glop::MatrixNonZeroPattern::InitializeFromMatrixSubset(a1 + 1232, (unsigned int **)a2, a3, a4, (void *)(a1 + 1496), (void *)(a1 + 1520));
  if (v9 >= (int)(v10 >> 2)) {
    int v9 = v10 >> 2;
  }
  if (v22 >= v9)
  {
LABEL_30:
    operations_research::RatioDistribution::Add(a1 + 240, (double)v22 / (double)v9);
    operations_research::RatioDistribution::Add(a1 + 320, 0.0 / (double)v9);
    operations_research::glop::Status::Status(a5);
    return;
  }
  double v23 = *(double *)(a1 + 1720);
  int v24 = v22;
  while (1)
  {
    double v54 = 0.0;
    unsigned int v52 = -1;
    int v53 = -1;
    uint64_t Pivot = operations_research::glop::Markowitz::FindPivot(a1, a3, a4, &v53, (int *)&v52, &v54);
    int v27 = v53;
    if (v53 == -1) {
      break;
    }
    uint64_t v28 = v52;
    if (v52 == -1) {
      break;
    }
    double v29 = v54;
    if (fabs(v54) <= v23) {
      break;
    }
    int v30 = *(_DWORD *)(*(void *)(a1 + 1280) + 4 * (int)v52);
    uint64_t v31 = *(void *)(a1 + 1256);
    *(void *)(*(void *)(a1 + 1304) + (((unint64_t)(int)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
    --*(_DWORD *)(a1 + 1376);
    *(_DWORD *)(v31 + 4 * v27) = 0;
    if (Pivot)
    {
      operations_research::glop::Markowitz::UpdateResidualMatrix((void *)a1, v27, v28);
    }
    else
    {
      ++v22;
      if (v30 == 1) {
        operations_research::glop::Markowitz::RemoveRowFromResidualMatrix(a1, v27);
      }
      else {
        operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix((void *)a1, v26, v28);
      }
    }
    if (*(unsigned char *)(a1 + 1464))
    {
      operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn((uint64_t)v49, 1.0);
      uint64_t v32 = *(int *)(**(void **)(a2 + 8) + 4 * (int)v28);
      uint64_t v33 = *(void *)(*(void *)a2 + 56);
      uint64_t v34 = *(void *)(v33 + 8 * v32);
      std::string::size_type v35 = *(void *)(v33 + (((v32 << 32) + 0x100000000) >> 29)) - v34;
      std::string::size_type v36 = *(void *)(*(void *)a2 + 32) + 4 * v34;
      uint64_t v37 = *(void *)(*(void *)a2 + 8) + 8 * v34;
      __u.__r_.__value_.__r.__words[0] = v35;
      __u.__r_.__value_.__l.__size_ = v36;
      __u.__r_.__value_.__r.__words[2] = v37;
      operations_research::glop::TriangularMatrix::AddTriangularColumn(v48, (uint64_t *)&__u, v27);
    }
    else
    {
      int v38 = *(_DWORD *)(*(void *)(a1 + 456) + 4 * (int)v28);
      uint64_t v39 = (void *)(a1 + 408);
      if (v38 != -1) {
        uint64_t v39 = (void *)(*(void *)(a1 + 504) + 48 * v38);
      }
      operations_research::glop::TriangularMatrix::AddAndNormalizeTriangularColumn((uint64_t)v49, v39, v27, v29);
      operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn((void *)(a1 + 408), v28);
      int v40 = *(_DWORD *)(*(void *)(a1 + 576) + 4 * (int)v28);
      int v41 = (void *)(a1 + 528);
      if (v40 != -1) {
        int v41 = (void *)(*(void *)(a1 + 624) + 48 * v40);
      }
      operations_research::glop::TriangularMatrix::AddTriangularColumnWithGivenDiagonalEntry(v48, v41, v29);
      operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn((void *)(a1 + 528), v28);
    }
    a4->__begin_[(int)v28] = v24;
    a3->__begin_[v27] = v24++;
    if (v9 == v24) {
      goto LABEL_30;
    }
  }
  *(double *)int v56 = v54;
  v56[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("The matrix is singular! pivot = %E", 34, (uint64_t)v56, 1, (uint64_t)&__u);
  if (*operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__ >= 1
    && (operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/markowitz.cc", (const char *)1)))
  {
    unint64_t v42 = google::LogMessage::LogMessage((google::LogMessage *)v56, (google::glog_internal_namespace_ *)"./ortools/glop/markowitz.cc", 86);
    uint64_t v43 = (void *)google::LogMessage::stream(v42);
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ERROR_LU: ", 10);
    if ((__u.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_u = &__u;
    }
    else {
      p_u = (std::string *)__u.__r_.__value_.__r.__words[0];
    }
    if ((__u.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__u.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __u.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)p_u, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v56);
  }
  if (SHIBYTE(__u.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, __u.__r_.__value_.__l.__data_, __u.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = __u;
  }
  operations_research::glop::Status::Status(a5, 1, (long long *)&v50);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__u.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_49:
    operator delete(__u.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__u.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_49;
  }
}

void sub_23CB79614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::Markowitz::Clear(operations_research::glop::Markowitz *this)
{
  *((void *)this + 58) = *((void *)this + 57);
  *((void *)this + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((void *)this + 60);
  uint64_t v2 = (void *)*((void *)this + 63);
  uint64_t v3 = (void *)*((void *)this + 64);
  while (v3 != v2)
  {
    uint64_t v5 = *(v3 - 6);
    v3 -= 6;
    uint64_t v4 = v5;
    *uint64_t v3 = 0;
    if (v5) {
      MEMORY[0x23ECF2BA0](v4, 0x1000C8077774924);
    }
  }
  *((void *)this + 64) = v2;
  *((void *)this + 73) = *((void *)this + 72);
  *((void *)this + 76) = *((void *)this + 75);
  uint64_t v6 = (void *)*((void *)this + 79);
  uint64_t v7 = (void *)*((void *)this + 78);
  while (v6 != v7)
  {
    uint64_t v9 = *(v6 - 6);
    v6 -= 6;
    uint64_t v8 = v9;
    void *v6 = 0;
    if (v9) {
      MEMORY[0x23ECF2BA0](v8, 0x1000C8077774924);
    }
  }
  *((void *)this + 79) = v7;
  *((void *)this + 158) = *((void *)this + 157);
  *((void *)this + 16std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((void *)this + 160);
  uint64_t v10 = *((void *)this + 155);
  uint64_t v11 = *((void *)this + 154);
  if (v10 != v11)
  {
    uint64_t v12 = *((void *)this + 155);
    do
    {
      char v13 = *(unsigned char *)(v12 - 32);
      v12 -= 32;
      if (v13) {
        operator delete(*(void **)(v10 - 24));
      }
      uint64_t v10 = v12;
    }
    while (v12 != v11);
  }
  *((void *)this + 15std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = v11;
  *((void *)this + 164) = 0;
  *((void *)this + 167) = 0;
  *((_DWORD *)this + 344) = 0;
  *((void *)this + 177) = *((void *)this + 176);
  *((void *)this + 174) = *((void *)this + 173);
  uint64_t v14 = *((void *)this + 180);
  uint64_t v15 = *((void *)this + 179);
  if (v14 != v15)
  {
    uint64_t v16 = *((void *)this + 180);
    do
    {
      int64x2_t v18 = *(void **)(v16 - 24);
      v16 -= 24;
      unint64_t v17 = v18;
      if (v18)
      {
        *(void *)(v14 - 16) = v17;
        operator delete(v17);
      }
      uint64_t v14 = v16;
    }
    while (v16 != v15);
  }
  *((void *)this + 18operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v15;
  *((void *)this + 18std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)this + 184);
  *((unsigned char *)this + 146std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
}

void operations_research::glop::Markowitz::ExtractSingletonColumns(uint64_t a1, void *a2, uint64_t *a3, void *a4, int *a5, __n128 a6)
{
  unint64_t v8 = *(void *)(a2[1] + 8) - *(void *)a2[1];
  unint64_t v35 = v8 >> 2;
  if ((int)(v8 >> 2) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = 0;
    uint64_t v14 = (v8 >> 2);
    while (1)
    {
      uint64_t v15 = *a2;
      uint64_t v16 = *(int *)(*(void *)a2[1] + 4 * v10);
      uint64_t v17 = *(void *)(*a2 + 56);
      uint64_t v18 = *(void *)(v17 + 8 * v16);
      if (*(void *)(v17 + (((v16 << 32) + 0x100000000) >> 29)) - v18 == 1)
      {
        unsigned __int32 v19 = *(_DWORD *)(*(void *)(v15 + 32) + 4 * v18);
        unint64_t v20 = *(void *)(*(void *)(v15 + 8) + 8 * v18);
        if (v12 >= v13)
        {
          uint64_t v21 = v12 - v11;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v13 - (char *)v11) >> 3 > v22) {
            unint64_t v22 = ((char *)v13 - (char *)v11) >> 3;
          }
          if ((unint64_t)((char *)v13 - (char *)v11) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23)
          {
            if (v23 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v24 = (char *)operator new(16 * v23);
            uint64_t v25 = (uint64_t)&v24[16 * v21];
            *(_DWORD *)uint64_t v25 = v19;
            *(_DWORD *)(v25 + 4) = v10;
            *(void *)(v25 + 8) = v20;
            if (v12 != v11)
            {
LABEL_16:
              uint64_t v26 = v25;
              do
              {
                a6 = v12[-1];
                int v27 = (__n128 *)(v26 - 16);
                *(__n128 *)(v26 - 16) = a6;
                --v12;
                v26 -= 16;
              }
              while (v12 != v11);
              char v13 = (__n128 *)&v24[16 * v23];
              uint64_t v12 = (__n128 *)(v25 + 16);
              if (v11) {
LABEL_19:
              }
                operator delete(v11);
LABEL_20:
              uint64_t v11 = v27;
              goto LABEL_4;
            }
          }
          else
          {
            int v24 = 0;
            uint64_t v25 = 16 * v21;
            *(_DWORD *)uint64_t v25 = v19;
            *(_DWORD *)(v25 + 4) = v10;
            *(void *)(v25 + 8) = v20;
            if (v12 != v11) {
              goto LABEL_16;
            }
          }
          int v27 = (__n128 *)v25;
          char v13 = (__n128 *)&v24[16 * v23];
          uint64_t v12 = (__n128 *)(v25 + 16);
          if (v11) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }
        v12->n128_u32[0] = v19;
        v12->n128_u32[1] = v10;
        v12->n128_u64[1] = v20;
        ++v12;
      }
LABEL_4:
      if (++v10 == v14) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t v11 = 0;
LABEL_25:
  unint64_t v28 = 126 - 2 * __clz(v12 - v11);
  if (v12 == v11) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  if (v12 != v11)
  {
    int v30 = &v11->n128_i32[1];
    do
    {
      uint64_t v32 = (__n128 *)(v30 - 1);
      uint64_t v31 = *(v30 - 1);
      uint64_t v33 = *a3;
      if (*(_DWORD *)(*a3 + 4 * v31) == -1)
      {
        double v34 = *(double *)(v30 + 1);
        *(_DWORD *)(*a4 + 4 * *v3operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *a5;
        *(_DWORD *)(v33 + 4 * v3std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *a5;
        operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(a1 + 648, 1.0);
        operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(a1 + 928, v34);
        ++*a5;
      }
      v30 += 4;
    }
    while (&v32[1] != v12);
  }
  operations_research::RatioDistribution::Add(a1 + 80, (double)*a5 / (double)(int)v35);
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_23CB79ABC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::Markowitz::ExtractResidualSingletonColumns(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  unint64_t v7 = *(void *)(a2[1] + 8) - *(void *)a2[1];
  unint64_t v26 = v7 >> 2;
  if ((int)(v7 >> 2) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v27 = a1 + 928;
    unint64_t v28 = (operations_research::glop::TriangularMatrix *)(a1 + 648);
    uint64_t v12 = (v7 >> 2);
    int v13 = -1;
    do
    {
      uint64_t v14 = *a4;
      if (*(_DWORD *)(*a4 + 4 * v11) == -1)
      {
        uint64_t v15 = *(int *)(*(void *)a2[1] + 4 * v11);
        uint64_t v16 = *(void *)(*a2 + 56);
        uint64_t v17 = *(void *)(v16 + 8 * v15);
        uint64_t v18 = *(void *)(v16 + (((v15 << 32) + 0x100000000) >> 29)) - v17;
        unsigned __int32 v19 = (int *)(*(void *)(*a2 + 32) + 4 * v17);
        uint64_t v20 = *(void *)(*a2 + 8) + 8 * v17;
        v29[0] = v18;
        v29[1] = (uint64_t)v19;
        uint64_t v29[2] = v20;
        if (v18 >= 1)
        {
          int v21 = 0;
          uint64_t v22 = *a3;
          do
          {
            uint64_t v24 = *v19++;
            int v23 = v24;
            if (*(_DWORD *)(v22 + 4 * v24) == -1)
            {
              if (v21 > 0) {
                goto LABEL_3;
              }
              ++v21;
              int v13 = v23;
            }
            --v18;
          }
          while (v18);
          if (v21 == 1)
          {
            *(_DWORD *)(v14 + 4 * v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *a5;
            *(_DWORD *)(v22 + 4 * v13) = *a5;
            operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn((uint64_t)v28, 1.0);
            operations_research::glop::TriangularMatrix::AddTriangularColumn(v27, v29, v13);
            ++*a5;
          }
        }
      }
LABEL_3:
      ++v11;
    }
    while (v11 != v12);
  }
  return operations_research::RatioDistribution::Add(a1 + 160, (double)*a5 / (double)(int)v26);
}

void operations_research::glop::MatrixNonZeroPattern::InitializeFromMatrixSubset(uint64_t a1, unsigned int **a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v10 = (*((void *)a2[1] + 1) - *(void *)a2[1]) >> 2;
  uint64_t v11 = **a2;
  operations_research::glop::MatrixNonZeroPattern::Reset(a1, v11, v10);
  uint64_t v12 = (void *)a1;
  double v117 = a5;
  a5[1] = *a5;
  a6[1] = *a6;
  if ((int)v10 >= 1)
  {
    unint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    do
    {
      if (*(_DWORD *)(v14 + 4 * v13) == -1)
      {
        uint64_t v17 = *(int *)(*(void *)v16 + 4 * v13);
        uint64_t v18 = v15[7];
        uint64_t v19 = *(void *)(v18 + 8 * v17);
        uint64_t v20 = *(void *)(v18 + (((v17 << 32) + 0x100000000) >> 29)) - v19;
        if (v20 >= 1)
        {
          int v21 = (int *)(v15[4] + 4 * v19);
          uint64_t v22 = *(void *)(a1 + 24);
          do
          {
            uint64_t v23 = *v21++;
            ++*(_DWORD *)(v22 + 4 * v23);
            --v20;
          }
          while (v20);
        }
      }
      else
      {
        *(void *)(*(void *)(a1 + 72) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        --*(_DWORD *)(a1 + 144);
      }
      ++v13;
    }
    while (v13 != v10);
  }
  uint64_t v119 = v10;
  long long v120 = a4;
  uint64_t v24 = a3;
  int v121 = (void *)a1;
  if ((int)v11 >= 1)
  {
    uint64_t v25 = 0;
    while (1)
    {
      if (*(_DWORD *)(*v24 + 4 * v25) != -1)
      {
        *(_DWORD *)(v12[3] + 4 * v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
        goto LABEL_13;
      }
      uint64_t v26 = *v12 + 32 * v25;
      uint64_t v28 = v26 + 8;
      unint64_t v27 = *(void *)v26;
      if (*(void *)v26)
      {
        uint64_t v28 = *(void *)(v26 + 8);
        unint64_t v29 = *(void *)(v26 + 16);
      }
      else
      {
        unint64_t v29 = 6;
      }
      int v30 = *(_DWORD *)(v12[3] + 4 * v25);
      if (v29 < v30) {
        break;
      }
LABEL_36:
      BOOL v45 = v30 == 1;
      uint64_t v24 = a3;
      if (v45)
      {
        unint64_t v47 = (char *)a6[1];
        unint64_t v46 = a6[2];
        if ((unint64_t)v47 >= v46)
        {
          uint64_t v48 = (char *)*a6;
          uint64_t v49 = (uint64_t)&v47[-*a6];
          uint64_t v50 = v49 >> 2;
          unint64_t v51 = (v49 >> 2) + 1;
          if (v51 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v46 - (void)v48;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            if (v53 >> 62) {
              goto LABEL_116;
            }
            double v54 = operator new(4 * v53);
            uint64_t v12 = v121;
            int v55 = &v54[4 * v50];
            _DWORD *v55 = v25;
            uint64_t v56 = (uint64_t)(v55 + 1);
            if (v47 == v48) {
              goto LABEL_57;
            }
LABEL_51:
            unint64_t v57 = v47 - 4 - v48;
            if (v57 < 0x2C) {
              goto LABEL_121;
            }
            if ((unint64_t)(v47 - &v54[v49]) < 0x20) {
              goto LABEL_121;
            }
            uint64_t v58 = (v57 >> 2) + 1;
            uint64_t v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v60 = &v47[-v59];
            int v55 = (_DWORD *)((char *)v55 - v59);
            uint64_t v61 = &v54[4 * v50 - 16];
            uint64_t v62 = v47 - 16;
            uint64_t v63 = v58 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v64 = *(_OWORD *)v62;
              *(v61 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v62 - 1);
              _OWORD *v61 = v64;
              v61 -= 2;
              v62 -= 32;
              v63 -= 8;
            }
            while (v63);
            unint64_t v47 = v60;
            if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_121:
              do
              {
                int v65 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *--int v55 = v65;
              }
              while (v47 != v48);
            }
          }
          else
          {
            double v54 = 0;
            int v55 = (_DWORD *)(4 * v50);
            *(_DWORD *)(4 * v5operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v25;
            uint64_t v56 = 4 * v50 + 4;
            if (v47 != v48) {
              goto LABEL_51;
            }
          }
LABEL_57:
          *a6 = v55;
          a6[1] = v56;
          a6[2] = &v54[4 * v53];
          if (v48)
          {
            operator delete(v48);
            uint64_t v12 = v121;
          }
          uint64_t v24 = a3;
          a6[1] = v56;
          goto LABEL_13;
        }
        *(_DWORD *)unint64_t v47 = v25;
        a6[1] = v47 + 4;
      }
LABEL_13:
      if (++v25 == v11) {
        goto LABEL_60;
      }
    }
    unint64_t v31 = 2 * v29;
    if (v31 <= v30) {
      unint64_t v32 = v30;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32 >> 62) {
      goto LABEL_116;
    }
    uint64_t v33 = (char *)operator new(4 * v32);
    double v34 = v33;
    uint64_t v12 = v121;
    if (v27 >= 2)
    {
      uint64_t v35 = 0;
      unint64_t v36 = v27 >> 1;
      if (v27 < 0x10 || (unint64_t)&v33[-v28] < 0x20)
      {
        uint64_t v37 = (int *)v28;
      }
      else
      {
        uint64_t v35 = v36 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v37 = (int *)(v28 + 4 * (v36 & 0x7FFFFFFFFFFFFFF8));
        int v38 = v33 + 16;
        uint64_t v39 = (long long *)(v28 + 16);
        uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v41 = *v39;
          *(v38 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v39 - 1);
          *int v38 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 8;
        }
        while (v40);
        if (v36 == v35) {
          goto LABEL_33;
        }
      }
      unint64_t v42 = v36 - v35;
      uint64_t v43 = &v33[4 * v35];
      do
      {
        int v44 = *v37++;
        *(_DWORD *)uint64_t v43 = v44;
        v43 += 4;
        --v42;
      }
      while (v42);
    }
LABEL_33:
    if (v27)
    {
      operator delete(*(void **)(v26 + 8));
      uint64_t v12 = v121;
      unint64_t v27 = *(void *)v26;
    }
    *(void *)(v26 + 8) = v34;
    *(void *)(v26 + 16) = v32;
    *(void *)uint64_t v26 = v27 | 1;
    int v30 = *(_DWORD *)(v12[3] + 4 * v25);
    goto LABEL_36;
  }
LABEL_60:
  BOOL v66 = (int)v10 < 1;
  uint64_t v68 = v10;
  uint64_t v67 = v120;
  if (!v66)
  {
    for (uint64_t i = 0; i != v68; ++i)
    {
      if (*(_DWORD *)(*v67 + 4 * i) != -1) {
        continue;
      }
      uint64_t v70 = *(int *)(*(void *)a2[1] + 4 * i);
      uint64_t v71 = *((void *)*a2 + 7);
      uint64_t v72 = *(void *)(v71 + 8 * v70);
      uint64_t v73 = *(void *)(v71 + (((v70 << 32) + 0x100000000) >> 29));
      uint64_t v74 = v73 - v72;
      if (v73 <= v72)
      {
        *(_DWORD *)(v12[6] + 4 * i) = 0;
        uint64_t v68 = v119;
        uint64_t v67 = v120;
        continue;
      }
      int v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = *((void *)*a2 + 4) + 4 * v72;
      unint64_t v78 = a3;
      do
      {
        uint64_t v79 = *(int *)(v77 + 4 * v76);
        if (*(_DWORD *)(*v78 + 4 * v79) == -1)
        {
          uint64_t v80 = *v12 + 32 * v79;
          uint64_t v81 = v80 + 8;
          unint64_t v82 = *(void *)v80;
          if (*(void *)v80)
          {
            uint64_t v81 = *(void *)(v80 + 8);
            unint64_t v83 = *(void *)(v80 + 16);
            unint64_t v84 = v82 >> 1;
            if (v82 >> 1 == v83) {
              goto LABEL_75;
            }
          }
          else
          {
            unint64_t v83 = 6;
            unint64_t v84 = v82 >> 1;
            if (v82 >> 1 == 6)
            {
LABEL_75:
              if (((v83 >> 61) & 3) != 0) {
                goto LABEL_116;
              }
              unint64_t v85 = (char *)operator new(8 * v83);
              int v86 = v85;
              *(_DWORD *)&v85[4 * v83] = i;
              if (v82 >= 2)
              {
                unint64_t v87 = 0;
                if (v83 < 8 || (unint64_t)&v85[-v81] < 0x20)
                {
                  uint64_t v88 = (int *)v81;
                }
                else
                {
                  unint64_t v87 = v83 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v88 = (int *)(v81 + 4 * (v83 & 0xFFFFFFFFFFFFFFF8));
                  unint64_t v89 = v85 + 16;
                  long long v90 = (long long *)(v81 + 16);
                  unint64_t v91 = v83 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    long long v92 = *v90;
                    *(v89 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v90 - 1);
                    *unint64_t v89 = v92;
                    v89 += 2;
                    v90 += 2;
                    v91 -= 8;
                  }
                  while (v91);
                  if (v83 == v87) {
                    goto LABEL_86;
                  }
                }
                unint64_t v93 = v83 - v87;
                long long v94 = &v85[4 * v87];
                do
                {
                  int v95 = *v88++;
                  *(_DWORD *)long long v94 = v95;
                  v94 += 4;
                  --v93;
                }
                while (v93);
              }
LABEL_86:
              if (v82)
              {
                operator delete(*(void **)(v80 + 8));
                unint64_t v82 = *(void *)v80;
              }
              *(void *)(v80 + 8) = v86;
              *(void *)(v80 + 16) = 2 * v83;
              v82 |= 1uLL;
              uint64_t v12 = v121;
              unint64_t v78 = a3;
LABEL_68:
              ++v75;
              *(void *)uint64_t v80 = v82 + 2;
              goto LABEL_69;
            }
          }
          *(_DWORD *)(v81 + 4 * v84) = i;
          goto LABEL_68;
        }
LABEL_69:
        ++v76;
      }
      while (v76 != v74);
      *(_DWORD *)(v12[6] + 4 * i) = v75;
      BOOL v45 = v75 == 1;
      uint64_t v68 = v119;
      uint64_t v67 = v120;
      if (v45)
      {
        uint64_t v97 = (char *)v117[1];
        unint64_t v96 = v117[2];
        if ((unint64_t)v97 < v96)
        {
          *(_DWORD *)uint64_t v97 = i;
          uint64_t v98 = (uint64_t)(v97 + 4);
          unint64_t v99 = v117;
LABEL_114:
          v99[1] = v98;
          continue;
        }
        uint64_t v100 = (char *)*v117;
        uint64_t v101 = (uint64_t)&v97[-*v117];
        uint64_t v102 = v101 >> 2;
        unint64_t v103 = (v101 >> 2) + 1;
        if (v103 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v104 = v96 - (void)v100;
        if (v104 >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (!v105)
        {
          uint64_t v106 = 0;
          unint64_t v107 = (_DWORD *)(4 * v102);
          *(_DWORD *)(4 * v102) = i;
          uint64_t v98 = 4 * v102 + 4;
          if (v97 == v100)
          {
LABEL_110:
            *double v117 = v107;
            v117[1] = v98;
            v117[2] = &v106[4 * v105];
            if (v100)
            {
              operator delete(v100);
              uint64_t v12 = v121;
            }
            unint64_t v99 = v117;
            goto LABEL_114;
          }
LABEL_104:
          unint64_t v108 = v97 - 4 - v100;
          if (v108 < 0x2C) {
            goto LABEL_122;
          }
          if ((unint64_t)(v97 - &v106[v101]) < 0x20) {
            goto LABEL_122;
          }
          uint64_t v109 = (v108 >> 2) + 1;
          uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v111 = &v97[-v110];
          unint64_t v107 = (_DWORD *)((char *)v107 - v110);
          unint64_t v112 = &v106[4 * v102 - 16];
          unint64_t v113 = v97 - 16;
          uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v115 = *(_OWORD *)v113;
            *(v112 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v113 - 1);
            _OWORD *v112 = v115;
            v112 -= 2;
            v113 -= 32;
            v114 -= 8;
          }
          while (v114);
          uint64_t v97 = v111;
          if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_122:
            do
            {
              int v116 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *--unint64_t v107 = v116;
            }
            while (v97 != v100);
          }
          goto LABEL_110;
        }
        if (!(v105 >> 62))
        {
          uint64_t v106 = operator new(4 * v105);
          uint64_t v12 = v121;
          unint64_t v107 = &v106[4 * v102];
          *unint64_t v107 = i;
          uint64_t v98 = (uint64_t)(v107 + 1);
          if (v97 == v100) {
            goto LABEL_110;
          }
          goto LABEL_104;
        }
LABEL_116:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
    }
  }
}

uint64_t operations_research::glop::Markowitz::FindPivot(uint64_t a1, void *a2, void *a3, _DWORD *a4, int *a5, double *a6)
{
  uint64_t v12 = *(void *)(a1 + 1496);
  uint64_t v13 = *(void *)(a1 + 1504);
  while (v12 != v13)
  {
    int v15 = *(_DWORD *)(v13 - 4);
    v13 -= 4;
    int v14 = v15;
    *(void *)(a1 + 1504) = v13;
    if (*(_DWORD *)(*(void *)(a1 + 1280) + 4 * v15) == 1)
    {
      if (*(unsigned char *)(a1 + 1464))
      {
        *a5 = v14;
        unint64_t v82 = *(uint64_t **)(a1 + 400);
        uint64_t v83 = *v82;
        uint64_t v84 = *(int *)(*(void *)v82[1] + 4 * v14);
        uint64_t v85 = *(void *)(*v82 + 56);
        uint64_t v86 = *(void *)(v85 + 8 * v84);
        uint64_t v87 = *(void *)(v85 + (((v84 << 32) + 0x100000000) >> 29)) - v86;
        if (v87 < 1) {
          return 0;
        }
        uint64_t v88 = (int *)(*(void *)(v83 + 32) + 4 * v86);
        for (uint64_t i = (uint64_t *)(*(void *)(v83 + 8) + 8 * v86); ; ++i)
        {
          uint64_t v91 = *v88++;
          int v90 = v91;
          if (*(_DWORD *)(*a2 + 4 * v91) == -1) {
            break;
          }
          if (!--v87) {
            return 0;
          }
        }
        *a4 = v90;
        goto LABEL_88;
      }
      uint64_t v16 = operations_research::glop::Markowitz::ComputeColumn(a1, a2, v14);
      if (v16[1])
      {
        *a5 = v14;
        uint64_t i = (uint64_t *)v16[4];
        *a4 = *(_DWORD *)v16[3];
LABEL_88:
        uint64_t v30 = *i;
LABEL_89:
        uint64_t v35 = 0;
        *(void *)a6 = v30;
        return v35;
      }
      uint64_t v12 = *(void *)(a1 + 1496);
      uint64_t v13 = *(void *)(a1 + 1504);
    }
  }
  *(unsigned char *)(a1 + 1464) = 0;
LABEL_8:
  uint64_t v17 = *(void *)(a1 + 1520);
  uint64_t v18 = *(void *)(a1 + 1528);
LABEL_9:
  while (v17 != v18)
  {
    int v20 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    int v19 = v20;
    *(void *)(a1 + 1528) = v18;
    if (*(_DWORD *)(*a2 + 4 * v20) == -1 && *(_DWORD *)(*(void *)(a1 + 1256) + 4 * v19) == 1)
    {
      int v21 = (void *)(*(void *)(a1 + 1232) + 32 * v19);
      unint64_t v24 = *v21;
      uint64_t v22 = (int *)(v21 + 1);
      unint64_t v23 = v24;
      if (v24) {
        uint64_t v22 = *(int **)v22;
      }
      if (v23 >= 2)
      {
        uint64_t v25 = 4 * (v23 >> 1);
        while (1)
        {
          unint64_t v26 = *v22;
          if (((*(void *)(*(void *)(a1 + 1304) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
            break;
          }
          ++v22;
          v25 -= 4;
          if (!v25) {
            goto LABEL_9;
          }
        }
        if (v26 != -1)
        {
          unint64_t v27 = operations_research::glop::Markowitz::ComputeColumn(a1, a2, v26);
          uint64_t v28 = v27[1];
          if (v28)
          {
            *a5 = v26;
            *a4 = v19;
            if (v28 < 1)
            {
              uint64_t v30 = 0;
            }
            else
            {
              uint64_t v29 = 0;
              uint64_t v30 = 0;
              do
              {
                if (*(_DWORD *)(v27[3] + 4 * v29) == v19) {
                  uint64_t v30 = *(void *)(v27[4] + 8 * v29);
                }
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_89;
          }
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v101 = a4;
  if (!*(unsigned char *)(a1 + 1465))
  {
    *(unsigned char *)(a1 + 146std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 1;
    uint64_t v80 = (a3[1] - *a3) >> 2;
    operations_research::glop::ColumnPriorityQueue::Reset((std::vector<int> *)(a1 + 1384), (a2[1] - *a2) >> 2, v80);
    if ((int)v80 >= 1)
    {
      uint64_t v81 = 0;
      do
      {
        if (*(_DWORD *)(*a3 + 4 * v81) == -1) {
          operations_research::glop::Markowitz::UpdateDegree((void *)a1, v81, *(_DWORD *)(*(void *)(a1 + 1280) + 4 * v81));
        }
        ++v81;
      }
      while (v80 != v81);
    }
  }
  uint64_t v31 = *(void *)(a1 + 1472);
  *(void *)(a1 + 148operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v31;
  unint64_t v32 = *(int *)(a1 + 1728);
  if (!v32) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v33 = (void **)(a1 + 1472);
  double v34 = *(double *)(a1 + 1696);
  uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v36 = (int *)v31;
  while (1)
  {
    uint64_t v37 = *(void *)(a1 + 1432);
    uint64_t v38 = *(int *)(a1 + 1456);
    int v39 = v38 + 1;
    uint64_t v40 = (uint64_t *)(v37 + 24 * (int)v38 + 8);
    while (1)
    {
      uint64_t v41 = *v40;
      if (*(v40 - 1) != *v40) {
        break;
      }
      ++v38;
      *(_DWORD *)(a1 + 1456) = v39++;
      v40 += 3;
      if (v38 == 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1440) - v37) >> 3)) {
        goto LABEL_92;
      }
    }
    int v43 = *(_DWORD *)(v41 - 4);
    int v42 = v43;
    uint64_t *v40 = v41 - 4;
    uint64_t v44 = 4 * v43;
    *(_DWORD *)(*(void *)(a1 + 1384) + v44) = -1;
    *(_DWORD *)(*(void *)(a1 + 1408) + v44) = 0;
    if (v43 == -1) {
      break;
    }
    if (*(_DWORD *)(*a3 + 4 * v42) == -1)
    {
      uint64_t v45 = *(int *)(*(void *)(a1 + 1280) + 4 * v42);
      unint64_t v46 = *(int **)(a1 + 1480);
      unint64_t v47 = *(void *)(a1 + 1488);
      unint64_t v99 = a6;
      uint64_t v100 = v35;
      if ((unint64_t)v46 < v47)
      {
        int *v46 = v42;
        uint64_t v31 = (uint64_t)(v46 + 1);
LABEL_51:
        *(void *)(a1 + 148operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v31;
        int v66 = v45 - 1;
        if (v35 < v45 - 1) {
          goto LABEL_91;
        }
        uint64_t v67 = v33;
        unint64_t v68 = v32;
        uint64_t v69 = operations_research::glop::Markowitz::ComputeColumn(a1, a2, v42);
        unint64_t v32 = v68;
        uint64_t v70 = v69[1];
        if (v70 < 1) {
          goto LABEL_58;
        }
        uint64_t v71 = 0;
        uint64_t v72 = (double *)v69[4];
        double v73 = 0.0;
        do
        {
          double v74 = fabs(v72[v71]);
          if (v73 < v74) {
            double v73 = v74;
          }
          ++v71;
        }
        while (v70 != v71);
        if (v73 == 0.0)
        {
LABEL_58:
          *(void *)(a1 + 1480) -= 4;
          a6 = v99;
          uint64_t v35 = v100;
          uint64_t v33 = v67;
        }
        else
        {
          double v75 = v34 * v73;
          uint64_t v76 = (int *)v69[3];
          a6 = v99;
          uint64_t v35 = v100;
          uint64_t v33 = v67;
          do
          {
            double v77 = *v72;
            double v78 = fabs(*v72);
            if (v78 >= v75)
            {
              uint64_t v79 = (*(int *)(*(void *)(a1 + 1256) + 4 * *v76) - 1) * v66;
              if (v35 > v79 || v35 == v79 && v78 > fabs(*v99))
              {
                *a5 = v42;
                *uint64_t v101 = *v76;
                double *v99 = v77;
                uint64_t v35 = v79;
              }
            }
            ++v76;
            ++v72;
            --v70;
          }
          while (v70);
        }
        goto LABEL_59;
      }
      uint64_t v98 = *(int *)(*(void *)(a1 + 1280) + 4 * v42);
      uint64_t v48 = (int *)*v33;
      uint64_t v49 = (char *)v46 - (unsigned char *)*v33;
      uint64_t v50 = v49 >> 2;
      unint64_t v51 = (v49 >> 2) + 1;
      if (v51 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v47 - (void)v48;
      if (v52 >> 1 > v51) {
        unint64_t v51 = v52 >> 1;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v96 = v51;
      uint64_t v97 = v33;
      if (v51)
      {
        uint64_t v94 = (char *)v46 - (unsigned char *)*v33;
        uint64_t v95 = v49 >> 2;
        if (v51 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v53 = v32;
        double v54 = operator new(4 * v51);
        uint64_t v35 = v100;
        unint64_t v32 = v53;
        uint64_t v49 = v94;
        uint64_t v50 = v95;
        int v55 = (int *)&v54[4 * v95];
        int *v55 = v42;
        uint64_t v31 = (uint64_t)(v55 + 1);
        if (v46 != v48)
        {
LABEL_42:
          unint64_t v56 = (char *)(v46 - 1) - (char *)v48;
          if (v56 < 0x2C) {
            goto LABEL_104;
          }
          if ((unint64_t)((char *)v46 - &v54[v49]) < 0x20) {
            goto LABEL_104;
          }
          uint64_t v57 = (v56 >> 2) + 1;
          uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v59 = &v46[v58 / 0xFFFFFFFFFFFFFFFCLL];
          int v55 = (int *)((char *)v55 - v58);
          uint64_t v60 = &v54[4 * v50 - 16];
          uint64_t v61 = v46 - 4;
          uint64_t v62 = v57 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v63 = *(_OWORD *)v61;
            *(v60 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v61 - 1);
            _OWORD *v60 = v63;
            v60 -= 2;
            v61 -= 8;
            v62 -= 8;
          }
          while (v62);
          unint64_t v46 = v59;
          if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_104:
            do
            {
              int v64 = *--v46;
              *--int v55 = v64;
            }
            while (v46 != v48);
          }
          *(void *)(a1 + 1472) = v55;
          *(void *)(a1 + 148operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v31;
          *(void *)(a1 + 1488) = &v54[4 * v96];
          if (v48)
          {
LABEL_49:
            unint64_t v65 = v32;
            operator delete(v48);
            unint64_t v32 = v65;
            uint64_t v35 = v100;
          }
LABEL_50:
          uint64_t v33 = v97;
          uint64_t v45 = v98;
          goto LABEL_51;
        }
      }
      else
      {
        double v54 = 0;
        int v55 = (int *)(4 * v50);
        *(_DWORD *)(4 * v5operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v42;
        uint64_t v31 = 4 * v50 + 4;
        if (v46 != v48) {
          goto LABEL_42;
        }
      }
      *(void *)(a1 + 1472) = v55;
      *(void *)(a1 + 148operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v31;
      *(void *)(a1 + 1488) = &v54[4 * v96];
      if (v48) {
        goto LABEL_49;
      }
      goto LABEL_50;
    }
LABEL_59:
    uint64_t v31 = *(void *)(a1 + 1480);
    unint64_t v36 = *(int **)(a1 + 1472);
    if (v32 <= (v31 - (uint64_t)v36) >> 2) {
      goto LABEL_91;
    }
  }
  uint64_t v31 = *(void *)(a1 + 1480);
LABEL_91:
  unint64_t v36 = (int *)*v33;
LABEL_92:
  if (v36 != (int *)v31)
  {
    uint64_t v92 = v35;
    do
    {
      if (*v36 != *a5) {
        operations_research::glop::ColumnPriorityQueue::PushOrAdjust((uint64_t *)(a1 + 1384), *v36, *(_DWORD *)(*(void *)(a1 + 1280) + 4 * *v36));
      }
      ++v36;
    }
    while (v36 != (int *)v31);
    return v92;
  }
  return v35;
}

uint64_t operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn(uint64_t result, int a2, int a3)
{
  *(void *)(*(void *)(result + 72) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
  --*(_DWORD *)(result + 144);
  *(_DWORD *)(*(void *)(result + 24) + 4 * a2) = 0;
  return result;
}

void operations_research::glop::Markowitz::RemoveRowFromResidualMatrix(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)(*(void *)(a1 + 1232) + 32 * a2);
  unint64_t v6 = *v3;
  uint64_t v5 = (int *)(v3 + 1);
  unint64_t v4 = v6;
  if (*(unsigned char *)(a1 + 1465))
  {
    if (v4) {
      uint64_t v5 = *(int **)v5;
    }
    if (v4 >= 2)
    {
      uint64_t v7 = 4 * (v4 >> 1);
      do
      {
        unint64_t v8 = *v5;
        if (((*(void *)(*(void *)(a1 + 1304) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        {
          int v9 = *v5;
          uint64_t v10 = *(void *)(a1 + 1280);
          uint64_t v11 = 4 * v8;
          int v12 = *(_DWORD *)(v10 + v11) - 1;
          *(_DWORD *)(v10 + v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v12;
          operations_research::glop::Markowitz::UpdateDegree((void *)a1, v9, v12);
        }
        ++v5;
        v7 -= 4;
      }
      while (v7);
    }
    return;
  }
  if (v4) {
    uint64_t v5 = *(int **)v5;
  }
  if (v4 >= 2)
  {
    uint64_t v13 = &v5[v4 >> 1];
    uint64_t v38 = (void **)(a1 + 1496);
    while (1)
    {
      int v15 = *v5;
      if ((*(void *)(*(void *)(a1 + 1304) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15)) {
        goto LABEL_16;
      }
      uint64_t v16 = *(void *)(a1 + 1280);
      uint64_t v17 = 4 * v15;
      int v18 = *(_DWORD *)(v16 + v17) - 1;
      *(_DWORD *)(v16 + v17) = v18;
      if (v18 != 1) {
        goto LABEL_16;
      }
      int v19 = *(char **)(a1 + 1504);
      unint64_t v20 = *(void *)(a1 + 1512);
      if ((unint64_t)v19 >= v20) {
        break;
      }
      *(_DWORD *)int v19 = v15;
      uint64_t v14 = (uint64_t)(v19 + 4);
LABEL_15:
      *(void *)(a1 + 1504) = v14;
LABEL_16:
      if (++v5 == v13) {
        return;
      }
    }
    int v21 = (char *)*v38;
    uint64_t v22 = v19 - (unsigned char *)*v38;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v20 - (void)v21;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = operator new(4 * v26);
      uint64_t v28 = (int *)&v27[4 * v23];
      *uint64_t v28 = v15;
      uint64_t v14 = (uint64_t)(v28 + 1);
      if (v19 == v21) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v15;
      uint64_t v14 = 4 * v23 + 4;
      if (v19 == v21)
      {
LABEL_37:
        *(void *)(a1 + 1496) = v28;
        *(void *)(a1 + 1504) = v14;
        *(void *)(a1 + 1512) = &v27[4 * v26];
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_15;
      }
    }
    unint64_t v29 = v19 - 4 - v21;
    if (v29 < 0x2C) {
      goto LABEL_43;
    }
    if ((unint64_t)(v19 - &v27[v22]) < 0x20) {
      goto LABEL_43;
    }
    uint64_t v30 = (v29 >> 2) + 1;
    uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v32 = &v19[-v31];
    uint64_t v28 = (int *)((char *)v28 - v31);
    uint64_t v33 = &v27[4 * v23 - 16];
    double v34 = v19 - 16;
    uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v34 - 1);
      *uint64_t v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 8;
    }
    while (v35);
    int v19 = v32;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_43:
      do
      {
        int v37 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--uint64_t v28 = v37;
      }
      while (v19 != v21);
    }
    goto LABEL_37;
  }
}

void operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix(void *a1, uint64_t a2, int a3)
{
  int v4 = *(_DWORD *)(a1[57] + 4 * a3);
  if (v4 != -1)
  {
    uint64_t v5 = a1[63] + 48 * v4;
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6 < 1) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v5 = (uint64_t)(a1 + 51);
  uint64_t v6 = a1[52];
  if (v6 >= 1)
  {
LABEL_5:
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v5 + 24);
    uint64_t v32 = v8;
    uint64_t v33 = (void **)(a1 + 190);
    while (1)
    {
      uint64_t v10 = *(int *)(v8 + 4 * v7);
      uint64_t v11 = a1[157];
      int v12 = *(_DWORD *)(v11 + 4 * v10) - 1;
      *(_DWORD *)(v11 + 4 * v1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v12;
      if (v12 != 1) {
        goto LABEL_8;
      }
      uint64_t v13 = (char *)a1[191];
      unint64_t v14 = a1[192];
      if ((unint64_t)v13 >= v14) {
        break;
      }
      *(_DWORD *)uint64_t v13 = v10;
      uint64_t v9 = (uint64_t)(v13 + 4);
LABEL_7:
      a1[191] = v9;
LABEL_8:
      if (++v7 == v6) {
        return;
      }
    }
    int v15 = (char *)*v33;
    uint64_t v16 = v13 - (unsigned char *)*v33;
    uint64_t v17 = v16 >> 2;
    unint64_t v18 = (v16 >> 2) + 1;
    if (v18 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v14 - (void)v15;
    if (v19 >> 1 > v18) {
      unint64_t v18 = v19 >> 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v21 = operator new(4 * v20);
      uint64_t v22 = &v21[4 * v17];
      *uint64_t v22 = v10;
      uint64_t v9 = (uint64_t)(v22 + 1);
      if (v13 == v15) {
        goto LABEL_28;
      }
    }
    else
    {
      int v21 = 0;
      uint64_t v22 = (_DWORD *)(4 * v17);
      *(_DWORD *)(4 * v17) = v10;
      uint64_t v9 = 4 * v17 + 4;
      if (v13 == v15)
      {
LABEL_28:
        a1[190] = v22;
        a1[191] = v9;
        a1[192] = &v21[4 * v20];
        if (v15) {
          operator delete(v15);
        }
        uint64_t v8 = v32;
        goto LABEL_7;
      }
    }
    unint64_t v23 = v13 - 4 - v15;
    if (v23 < 0x2C) {
      goto LABEL_36;
    }
    if ((unint64_t)(v13 - &v21[v16]) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v24 = (v23 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v26 = &v13[-v25];
    uint64_t v22 = (_DWORD *)((char *)v22 - v25);
    unint64_t v27 = &v21[4 * v17 - 16];
    uint64_t v28 = v13 - 16;
    uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v28 - 1);
      *unint64_t v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    uint64_t v13 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        int v31 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--uint64_t v22 = v31;
      }
      while (v13 != v15);
    }
    goto LABEL_28;
  }
}

void operations_research::glop::Markowitz::UpdateResidualMatrix(void *a1, int a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1[57] + 4 * (int)a3);
  if (v5 == -1) {
    uint64_t v6 = a1 + 51;
  }
  else {
    uint64_t v6 = (void *)(a1[63] + 48 * v5);
  }
  int v7 = a3;
  operations_research::glop::MatrixNonZeroPattern::Update((uint64_t)(a1 + 154), a2, a3, v6);
  uint64_t v9 = (void *)(a1[154] + 32 * a2);
  unint64_t v12 = *v9;
  uint64_t v11 = (int *)(v9 + 1);
  unint64_t v10 = v12;
  if (v12) {
    uint64_t v11 = *(int **)v11;
  }
  if (v10 >= 2)
  {
    uint64_t v13 = 4 * (v10 >> 1);
    do
    {
      unint64_t v14 = *v11++;
      operations_research::glop::Markowitz::UpdateDegree(a1, v14, *(_DWORD *)(a1[160] + 4 * v14));
      *(void *)(a1[151] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v13 -= 4;
    }
    while (v13);
  }

  operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix(a1, v8, v7);
}

void operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn(void *a1, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1[6];
  uint64_t v6 = (char *)a1[10];
  unint64_t v5 = a1[11];
  int v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (char *)a1[9];
    uint64_t v10 = (v6 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = operator new(4 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    int v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    _DWORD *v15 = *(_DWORD *)(v4 + 4 * v3);
    uint64_t v8 = v15 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v9 - v14) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      int v7 = &v6[-v19];
      int v15 = (_DWORD *)((char *)v15 - v19);
      unint64_t v20 = &v14[4 * v10 - 16];
      int v21 = v6 - 16;
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--int v15 = v24;
        }
        while (v7 != v9);
      }
    }
    a1[9] = v15;
    a1[10] = v8;
    a1[11] = v16;
    if (v9)
    {
      operator delete(v9);
      uint64_t v4 = a1[6];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = *(_DWORD *)(v4 + 4 * a2);
    uint64_t v8 = v6 + 4;
  }
  a1[10] = v8;
  uint64_t v25 = a1[12] + 48 * *(int *)(v4 + 4 * v3);
  *(void *)(v25 + 8) = 0;
  *(unsigned char *)(v25 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 0;
  *(_DWORD *)(v4 + 4 * v3) = -1;
}

void operations_research::glop::Markowitz::ComputeLU(operations_research::glop::TriangularMatrix *a1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, std::vector<int> *a4@<X2>, std::vector<int> *a5@<X3>, operations_research::glop::TriangularMatrix *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v14 = (int *)(a2 + 648);
  operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 648), a1);
  operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 928), a6);
  operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(a2, a3, a4, a5, a7);
  if (!*(_DWORD *)a7)
  {
    if (*(char *)(a7 + 31) < 0) {
      operator delete(*(void **)(a7 + 8));
    }
    operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries((uint64_t)v14, (uint64_t *)a4);
    operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries(a2 + 928, (uint64_t *)a4);
    operations_research::glop::TriangularMatrix::Swap(v14, a1);
    operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 928), a6);
    operations_research::glop::Status::Status(a7);
  }
}

void *operations_research::glop::Markowitz::ComputeColumn(uint64_t a1, void *a2, int a3)
{
  char v3 = a3;
  uint64_t v6 = (void *)(a1 + 408);
  unint64_t v8 = a3;
  int v9 = *(_DWORD *)(*(void *)(a1 + 456) + 4 * a3);
  uint64_t v10 = (uint64_t)v6;
  if (v9 != -1) {
    uint64_t v10 = *(void *)(a1 + 504) + 48 * v9;
  }
  if (*(void *)(v10 + 8))
  {
    BOOL v11 = 0;
  }
  else
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 576) + 4 * a3);
    if (v12 == -1) {
      uint64_t v13 = a1 + 528;
    }
    else {
      uint64_t v13 = *(void *)(a1 + 624) + 48 * v12;
    }
    BOOL v11 = *(void *)(v13 + 8) == 0;
  }
  uint64_t v14 = operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(v6, a3);
  int v15 = (void *)v14;
  if ((*(void *)(*(void *)(a1 + 1208) + 8 * (v8 >> 6)) & (1 << v3)) != 0)
  {
    if (v11)
    {
      uint64_t v16 = *(void ***)(a1 + 400);
      unint64_t v17 = *v16;
      uint64_t v18 = *(int *)(*v16[1] + 4 * v8);
      uint64_t v19 = v17[7];
      uint64_t v20 = *(void *)(v19 + 8 * v18);
      uint64_t v21 = *(void *)(v19 + (((v18 << 32) + 0x100000000) >> 29)) - v20;
      uint64_t v22 = v17[4] + 4 * v20;
      uint64_t v23 = v17[1] + 8 * v20;
    }
    else
    {
      uint64_t v21 = *(void *)(v14 + 8);
      uint64_t v22 = *(void *)(v14 + 24);
      uint64_t v23 = *(void *)(v14 + 32);
    }
    v43[0] = v21;
    v43[1] = v22;
    v43[2] = v23;
    uint64_t v38 = operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column((void *)(a1 + 528), a3);
    operations_research::glop::TriangularMatrix::PermutedLowerSparseSolve((int *)(a1 + 648), v43, a2, (uint64_t)v15, v38);
    *(void *)(*(void *)(a1 + 1208) + 8 * (v8 >> 6)) &= ~(1 << v3);
  }
  else if (*(void *)(v14 + 8) != *(_DWORD *)(*(void *)(a1 + 1280) + 4 * v8))
  {
    int v41 = a3;
    int v42 = a2;
    if (v11)
    {
      uint64_t v24 = *(int *)(**(void **)(*(void *)(a1 + 400) + 8) + 4 * v8);
      uint64_t v25 = *(void *)(**(void **)(a1 + 400) + 56);
      if (*(void *)(v14 + 16) < *(void *)(v25 + (((v24 << 32) + 0x100000000) >> 29)) - *(void *)(v25 + 8 * v24)) {
        operator new[]();
      }
      unint64_t v26 = *(uint64_t **)(a1 + 400);
      uint64_t v27 = *v26;
      uint64_t v28 = *(int *)(*(void *)v26[1] + 4 * v8);
      uint64_t v29 = *(void *)(*v26 + 56);
      uint64_t v30 = *(void *)(v29 + 8 * v28);
      uint64_t v31 = *(void *)(v29 + (((v28 << 32) + 0x100000000) >> 29)) - v30;
      if (v31 >= 1)
      {
        uint64_t v32 = (int *)(*(void *)(v27 + 32) + 4 * v30);
        uint64_t v33 = (uint64_t *)(*(void *)(v27 + 8) + 8 * v30);
        uint64_t v34 = *(void *)(v14 + 8);
        do
        {
          int v36 = *v32++;
          int v35 = v36;
          uint64_t v37 = *v33;
          if (v34 == *(void *)(v14 + 16) && (!v34 || v34 < 2 * v34)) {
            operator new[]();
          }
          *(void *)(v14 + 8) = v34 + 1;
          *(_DWORD *)(*(void *)(v14 + 24) + 4 * v34) = v35;
          *(void *)(*(void *)(v14 + 32) + 8 * v34) = v37;
          *(unsigned char *)(v14 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 1;
          ++v33;
          ++v34;
          --v31;
        }
        while (v31);
      }
    }
    uint64_t v39 = operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column((void *)(a1 + 528), v41);
    operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::MoveTaggedEntriesTo(v15, v42, v39);
  }
  return v15;
}

uint64_t operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(void *a1, int a2)
{
  uint64_t v3 = a1[6];
  LODWORD(v4) = *(_DWORD *)(v3 + 4 * a2);
  if (v4 == -1)
  {
    uint64_t v6 = a1[10];
    if (a1[9] == v6)
    {
      uint64_t v8 = a1[12];
      unint64_t v9 = a1[13];
      int v7 = (void **)(a1 + 12);
      memset(v15, 0, 41);
      if (v9 >= a1[14])
      {
        int v12 = std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>(v7, (uint64_t *)v15);
        uint64_t v13 = *(void *)&v15[0];
        a1[13] = v12;
        *(void *)&v15[0] = 0;
        if (v13) {
          MEMORY[0x23ECF2BA0](v13, 0x1000C8077774924);
        }
      }
      else
      {
        *(void *)unint64_t v9 = 0;
        long long v10 = *(_OWORD *)((char *)v15 + 8);
        long long v11 = *(_OWORD *)((char *)&v15[1] + 8);
        *(unsigned char *)(v9 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = BYTE8(v15[2]);
        *(_OWORD *)(v9 + 24) = v11;
        *(_OWORD *)(v9 + 8) = v10;
        a1[13] = v9 + 48;
      }
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v8) >> 4);
      uint64_t v3 = a1[6];
    }
    else
    {
      LODWORD(v4) = *(_DWORD *)(v6 - 4);
      a1[10] = v6 - 4;
    }
    *(_DWORD *)(v3 + 4 * a2) = v4;
  }
  return a1[12] + 48 * (int)v4;
}

void sub_23CB7B708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x23ECF2BA0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::MoveTaggedEntriesTo(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(int *)(result[3] + 4 * v4);
      if ((*(_DWORD *)(*a2 + 4 * v5) & 0x80000000) == 0) {
        break;
      }
      if (v3 == ++v4) {
        return result;
      }
    }
    uint64_t v6 = *(void *)(result[4] + 8 * v4);
    uint64_t v7 = *(void *)(a3 + 8);
    if (v7 == *(void *)(a3 + 16) && (!v7 || v7 < 2 * v7)) {
      operator new[]();
    }
    uint64_t v8 = v7 + 1;
    *(void *)(a3 + 8) = v7 + 1;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v10 = *(void *)(a3 + 32);
    *(_DWORD *)(v9 + 4 * v7) = v5;
    *(void *)(v10 + 8 * v7) = v6;
    uint64_t v11 = v4 + 1;
    if (v4 + 1 < v3)
    {
      do
      {
        while (1)
        {
          uint64_t v12 = result[3];
          uint64_t v13 = *(int *)(v12 + 4 * v11);
          if ((*(_DWORD *)(*a2 + 4 * v13) & 0x80000000) == 0) {
            break;
          }
          *(_DWORD *)(v12 + 4 * v4) = v13;
          *(void *)(result[4] + 8 * v4++) = *(void *)(result[4] + 8 * v11);
          if (v3 == ++v11) {
            goto LABEL_21;
          }
        }
        uint64_t v14 = *(void *)(result[4] + 8 * v11);
        if (v8 == *(void *)(a3 + 16) && (!v8 || v8 < 2 * v8)) {
          operator new[]();
        }
        *(_DWORD *)(v9 + 4 * v8) = v13;
        *(void *)(v10 + 8 * v8++) = v14;
        *(void *)(a3 + 8) = v8;
        ++v11;
      }
      while (v3 != v11);
    }
LABEL_21:
    result[1] = v4;
    *(unsigned char *)(a3 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = 1;
  }
  return result;
}

void operations_research::glop::ColumnPriorityQueue::Reset(std::vector<int> *this, int a2, int a3)
{
  uint64_t v6 = this + 1;
  this[1].__end_ = this[1].__begin_;
  this->__end_ = this->__begin_;
  uint64_t v7 = this + 2;
  std::vector<int>::pointer begin = this[2].__begin_;
  std::vector<int>::pointer end = this[2].__end_;
  if (end != begin)
  {
    std::vector<int>::pointer v10 = this[2].__end_;
    do
    {
      uint64_t v12 = (void *)*((void *)v10 - 3);
      v10 -= 6;
      uint64_t v11 = v12;
      if (v12)
      {
        *((void *)end - 2) = v11;
        operator delete(v11);
      }
      std::vector<int>::pointer end = v10;
    }
    while (v10 != begin);
  }
  this[2].__end_ = begin;
  std::vector<int>::value_type __u = 0;
  std::vector<int>::assign(v6, a3, &__u);
  std::vector<int>::value_type v22 = -1;
  std::vector<int>::assign(this, a3, &v22);
  unint64_t v13 = a2 + 1;
  std::vector<int>::pointer v15 = this[2].__begin_;
  std::vector<int>::pointer v14 = this[2].__end_;
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v15) >> 3);
  if (v13 <= v16)
  {
    if (v13 < v16)
    {
      unint64_t v17 = &v15[6 * (int)v13];
      if (v14 != v17)
      {
        std::vector<int>::pointer v18 = this[2].__end_;
        do
        {
          uint64_t v20 = (void *)*((void *)v18 - 3);
          v18 -= 6;
          uint64_t v19 = v20;
          if (v20)
          {
            *((void *)v14 - 2) = v19;
            operator delete(v19);
          }
          std::vector<int>::pointer v14 = v18;
        }
        while (v18 != v17);
      }
      this[2].__end_ = v17;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v7, v13 - v16);
  }
  LODWORD(this[3].__begin_) = a3;
}

void operations_research::glop::Markowitz::UpdateDegree(void *a1, int a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v5 = (int *)a1[188];
    unint64_t v6 = a1[189];
    if ((unint64_t)v5 < v6)
    {
      int *v5 = a2;
      uint64_t v7 = (uint64_t)(v5 + 1);
LABEL_26:
      a1[188] = v7;
      return;
    }
    uint64_t v9 = (int *)a1[187];
    uint64_t v10 = v5 - v9;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::vector<int>::pointer v14 = operator new(4 * v13);
      std::vector<int>::pointer v15 = (int *)&v14[4 * v10];
      unint64_t v16 = &v14[4 * v13];
      int *v15 = a2;
      uint64_t v7 = (uint64_t)(v15 + 1);
      int64_t v17 = (char *)v5 - (char *)v9;
      if (v5 == v9) {
        goto LABEL_24;
      }
    }
    else
    {
      std::vector<int>::pointer v14 = 0;
      std::vector<int>::pointer v15 = (int *)(4 * v10);
      unint64_t v16 = 0;
      *(_DWORD *)(4 * v1operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = a2;
      uint64_t v7 = 4 * v10 + 4;
      int64_t v17 = (char *)v5 - (char *)v9;
      if (v5 == v9)
      {
LABEL_24:
        a1[187] = v15;
        a1[188] = v7;
        a1[189] = v16;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_26;
      }
    }
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_31;
    }
    if ((unint64_t)((char *)v9 - v14) < 0x20) {
      goto LABEL_31;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v21 = &v5[v20 / 0xFFFFFFFFFFFFFFFCLL];
    std::vector<int>::pointer v15 = (int *)((char *)v15 - v20);
    std::vector<int>::value_type v22 = &v14[4 * v10 - 16];
    uint64_t v23 = v5 - 4;
    uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v23 - 1);
      *std::vector<int>::value_type v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    uint64_t v5 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_31:
      do
      {
        int v26 = *--v5;
        *--std::vector<int>::pointer v15 = v26;
      }
      while (v5 != v9);
    }
    goto LABEL_24;
  }
  uint64_t v8 = a1 + 173;

  operations_research::glop::ColumnPriorityQueue::PushOrAdjust(v8, a2, a3);
}

void operations_research::glop::ColumnPriorityQueue::PushOrAdjust(uint64_t *a1, int a2, int a3)
{
  uint64_t v3 = a1[3];
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 == a3) {
    return;
  }
  uint64_t v8 = *a1;
  int v9 = *(_DWORD *)(*a1 + 4 * a2);
  if (v9 != -1)
  {
    uint64_t v10 = (void *)(a1[6] + 24 * v4);
    unint64_t v11 = (int *)v10[1];
    int v12 = *--v11;
    *(_DWORD *)(*v10 + 4 * v9) = v12;
    *(_DWORD *)(v8 + 4 * *v1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v9;
    v10[1] = v11;
  }
  if (a3 < 1)
  {
    uint64_t v21 = 4 * a2;
    *(_DWORD *)(v8 + v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = -1;
    *(_DWORD *)(v3 + v2std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
    return;
  }
  uint64_t v13 = a1[6] + 24 * a3;
  std::vector<int>::pointer v14 = (uint64_t *)(v13 + 8);
  std::vector<int>::pointer v15 = *(char **)(v13 + 8);
  unint64_t v16 = *(char **)v13;
  uint64_t v17 = (uint64_t)&v15[-*(void *)v13];
  uint64_t v18 = 4 * a2;
  *(_DWORD *)(v8 + v18) = (unint64_t)v17 >> 2;
  *(_DWORD *)(v3 + v18) = a3;
  unint64_t v19 = *(void *)(v13 + 16);
  if ((unint64_t)v15 >= v19)
  {
    uint64_t v22 = v17 >> 2;
    unint64_t v23 = (v17 >> 2) + 1;
    if (v23 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v19 - (void)v16;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v26 = operator new(4 * v25);
      uint64_t v22 = v17 >> 2;
      uint64_t v27 = &v26[4 * (v17 >> 2)];
      uint64_t v28 = &v26[4 * v25];
      *uint64_t v27 = a2;
      uint64_t v20 = (uint64_t)(v27 + 1);
      int64_t v29 = v15 - v16;
      if (v15 == v16) {
        goto LABEL_25;
      }
    }
    else
    {
      int v26 = 0;
      uint64_t v27 = (_DWORD *)(4 * v22);
      uint64_t v28 = 0;
      *(_DWORD *)(4 * v22) = a2;
      uint64_t v20 = 4 * v22 + 4;
      int64_t v29 = v15 - v16;
      if (v15 == v16)
      {
LABEL_25:
        *(void *)uint64_t v13 = v27;
        uint64_t *v14 = v20;
        *(void *)(v13 + 16) = v28;
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_27;
      }
    }
    unint64_t v30 = v29 - 4;
    if (v30 < 0x2C) {
      goto LABEL_35;
    }
    if ((unint64_t)(v15 - v26 - v17) < 0x20) {
      goto LABEL_35;
    }
    uint64_t v31 = (v30 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v33 = &v15[-v32];
    uint64_t v27 = (_DWORD *)((char *)v27 - v32);
    uint64_t v34 = &v26[4 * v22 - 16];
    int v35 = v15 - 16;
    uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *((_OWORD *)v35 - 1);
      *uint64_t v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 8;
    }
    while (v36);
    std::vector<int>::pointer v15 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        int v38 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--uint64_t v27 = v38;
      }
      while (v15 != v16);
    }
    goto LABEL_25;
  }
  *(_DWORD *)std::vector<int>::pointer v15 = a2;
  uint64_t v20 = (uint64_t)(v15 + 4);
LABEL_27:
  uint64_t *v14 = v20;
  int v39 = *((_DWORD *)a1 + 18);
  if (v39 >= a3) {
    int v39 = a3;
  }
  *((_DWORD *)a1 + 18) = v39;
}

uint64_t operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = 4 * a2;
  uint64_t result = (*(_DWORD *)(v2 + v3) - 1);
  *(_DWORD *)(v2 + v3) = result;
  return result;
}

void operations_research::glop::MatrixNonZeroPattern::Update(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  int v7 = *(_DWORD *)(a1 + 144);
  operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow((void *)a1, a2);
  int v9 = (unint64_t *)(*(void *)a1 + 32 * a2);
  unint64_t v12 = *v9;
  uint64_t v10 = v9 + 1;
  unint64_t v11 = v12;
  if (v12) {
    uint64_t v10 = (void *)*v10;
  }
  if (v11 >= 2)
  {
    unint64_t v13 = v11 >> 1;
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 96);
    uint64_t v16 = 4 * v13;
    do
    {
      int v17 = *(_DWORD *)v10;
      uint64_t v10 = (void *)((char *)v10 + 4);
      --*(_DWORD *)(v14 + 4 * v17);
      *(void *)(v15 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
      v16 -= 4;
    }
    while (v16);
  }
  uint64_t v18 = a4[1];
  if (v18 >= 1)
  {
    int v19 = v7 + 1;
    uint64_t v20 = (int *)a4[3];
    uint64_t v21 = (double *)a4[4];
    do
    {
      int v23 = *v20++;
      int v22 = v23;
      if (v23 != a2 && *v21 != 0.0)
      {
        uint64_t v24 = *(int *)(*(void *)(a1 + 24) + 4 * v22);
        if (v24 != v19)
        {
          if ((unint64_t)(v24 + 4) < *(void *)(*(void *)a1 + 32 * v22) >> 1) {
            operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow((void *)a1, v22);
          }
          operations_research::glop::MatrixNonZeroPattern::MergeInto((uint64_t *)a1, a2, v22);
        }
      }
      ++v21;
      --v18;
    }
    while (v18);
  }
}

void operations_research::glop::MatrixNonZeroPattern::Reset(uint64_t a1, uint64_t a2, int a3)
{
  std::vector<int>::pointer begin = *(std::vector<int>::pointer *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (std::vector<int> *)(a1 + 24);
  std::vector<int>::value_type __x = 0;
  uint64_t v9 = a2 << 32;
  unint64_t v10 = (int)a2;
  unint64_t v11 = (v7 - (uint64_t)begin) >> 2;
  BOOL v12 = (int)a2 >= v11;
  std::vector<int>::size_type v13 = (int)a2 - v11;
  if (v13 != 0 && v12)
  {
    std::vector<int>::__append(v8, v13, &__x);
    std::vector<int>::pointer begin = v8->__begin_;
  }
  else if (!v12)
  {
    *(void *)(a1 + 32) = &begin[v10];
  }
  bzero(begin, v9 >> 30);
  uint64_t v14 = *(char **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  std::vector<int>::value_type v28 = 0;
  unint64_t v16 = (v15 - (uint64_t)v14) >> 2;
  if (a3 <= v16)
  {
    if (a3 < v16) {
      *(void *)(a1 + 56) = &v14[4 * a3];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 48), a3 - v16, &v28);
    uint64_t v14 = *(char **)(a1 + 48);
  }
  bzero(v14, 4 * a3);
  uint64_t v18 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17 != *(void *)a1)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    do
    {
      char v20 = *(unsigned char *)(v19 - 32);
      v19 -= 32;
      if (v20) {
        operator delete(*(void **)(v17 - 24));
      }
      uint64_t v17 = v19;
    }
    while (v19 != v18);
    uint64_t v17 = *(void *)a1;
  }
  *(void *)(a1 + 8) = v18;
  unint64_t v21 = (v18 - v17) >> 5;
  if (v10 <= v21)
  {
    if (v10 < v21)
    {
      unint64_t v22 = v17 + 32 * v10;
      if (v18 != v22)
      {
        uint64_t v23 = v18;
        do
        {
          char v24 = *(unsigned char *)(v23 - 32);
          v23 -= 32;
          if (v24) {
            operator delete(*(void **)(v18 - 24));
          }
          uint64_t v18 = v23;
        }
        while (v23 != v22);
      }
      *(void *)(a1 + 8) = v22;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)a1, v10 - v21);
  }
  char v26 = 0;
  std::vector<BOOL>::assign((char **)(a1 + 72), a3, &v26);
  char v25 = 0;
  std::vector<BOOL>::assign((char **)(a1 + 96), a3, &v25);
  *(_DWORD *)(a1 + 144) = a3;
}

void operations_research::glop::MatrixNonZeroPattern::AddEntry(void *a1, int a2, int a3)
{
  ++*(_DWORD *)(a1[3] + 4 * a2);
  ++*(_DWORD *)(a1[6] + 4 * a3);
  uint64_t v4 = *a1 + 32 * a2;
  uint64_t v6 = v4 + 8;
  unint64_t v5 = *(void *)v4;
  if (*(void *)v4)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v8 = v5 >> 1;
    if (v5 >> 1 != v7) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v7 = 6;
    unint64_t v8 = v5 >> 1;
    if (v5 >> 1 != 6)
    {
LABEL_3:
      *(_DWORD *)(v6 + 4 * v8) = a3;
      goto LABEL_19;
    }
  }
  if (((v7 >> 61) & 3) != 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = (char *)operator new(8 * v7);
  unint64_t v10 = v9;
  *(_DWORD *)&v9[4 * v7] = a3;
  if (v5 >= 2)
  {
    unint64_t v11 = 0;
    if (v7 < 8 || (unint64_t)&v9[-v6] < 0x20)
    {
      BOOL v12 = (int *)v6;
    }
    else
    {
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFF8;
      BOOL v12 = (int *)(v6 + 4 * (v7 & 0xFFFFFFFFFFFFFFF8));
      std::vector<int>::size_type v13 = v9 + 16;
      uint64_t v14 = (long long *)(v6 + 16);
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v16 = *v14;
        *(v13 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v14 - 1);
        _OWORD *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v7 == v11) {
        goto LABEL_16;
      }
    }
    unint64_t v17 = v7 - v11;
    uint64_t v18 = &v9[4 * v11];
    do
    {
      int v19 = *v12++;
      *(_DWORD *)uint64_t v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
LABEL_16:
  if (v5)
  {
    operator delete(*(void **)(v4 + 8));
    unint64_t v5 = *(void *)v4;
  }
  *(void *)(v4 + 8) = v10;
  *(void *)(v4 + 16) = 2 * v7;
  v5 |= 1uLL;
LABEL_19:
  *(void *)uint64_t v4 = v5 + 2;
}

void operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow(void *a1, int a2)
{
  uint64_t v2 = (unint64_t *)(*a1 + 32 * a2);
  unint64_t v3 = *v2 >> 1;
  uint64_t v4 = *v2 & 1;
  if ((int)v3 < 1)
  {
    int v13 = 0;
    goto LABEL_8;
  }
  unint64_t v5 = (void **)(v2 + 1);
  uint64_t v6 = a1[9];
  uint64_t v7 = (*v2 >> 1);
  if (v4)
  {
    uint64_t v28 = 0;
    int v13 = 0;
    uint64_t v29 = 4 * v7;
    do
    {
      int v30 = *(_DWORD *)((char *)*v5 + v28);
      if (((*(void *)(v6 + (((unint64_t)v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
        *((_DWORD *)*v5 + v13++) = v30;
      }
      v28 += 4;
    }
    while (v29 != v28);
LABEL_8:
    unint64_t v5 = (void **)(v2 + 1);
    if (v4)
    {
      char v14 = 0;
      unint64_t v15 = (void *)v2[1];
      unint64_t v9 = v2[2];
      unint64_t v16 = v13;
      if (v9 >= v13) {
        goto LABEL_24;
      }
    }
    else
    {
      char v14 = 1;
      unint64_t v9 = 6;
      unint64_t v15 = v2 + 1;
      unint64_t v16 = v13;
      if ((unint64_t)v13 <= 6) {
        goto LABEL_24;
      }
    }
LABEL_10:
    if (2 * v9 <= v16) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = 2 * v9;
    }
    if (v17 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v18 = operator new(4 * v17);
    unint64_t v19 = v3;
    char v20 = v18;
    unint64_t v21 = v16 - v3;
    if (v16 == v3) {
      goto LABEL_16;
    }
LABEL_15:
    bzero((char *)v20 + 4 * v3, 4 * v21);
    goto LABEL_16;
  }
  int v8 = 0;
  unint64_t v9 = 6;
  unint64_t v10 = (int *)(v2 + 1);
  do
  {
    int v12 = *v10++;
    int v11 = v12;
    if (((*(void *)(v6 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      *((_DWORD *)v5 + v8++) = v11;
    }
    --v7;
  }
  while (v7);
  uint64_t v4 = 0;
  char v14 = 1;
  unint64_t v15 = v2 + 1;
  unint64_t v16 = v8;
  if ((unint64_t)v8 > 6) {
    goto LABEL_10;
  }
LABEL_24:
  if (v16 <= v3) {
    goto LABEL_41;
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  unint64_t v17 = 0;
  char v20 = v15;
  unint64_t v21 = v16 - v3;
  if (v16 != v3) {
    goto LABEL_15;
  }
LABEL_16:
  if (!v19)
  {
    if (!v18) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  uint64_t v22 = 0;
  if (v19 < 8 || (unint64_t)((char *)v18 - (char *)v15) < 0x20)
  {
    uint64_t v23 = (int *)v15;
  }
  else
  {
    uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v23 = (int *)v15 + (v19 & 0x7FFFFFFFFFFFFFF8);
    char v24 = v18 + 1;
    char v25 = (long long *)(v15 + 2);
    uint64_t v26 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *v25;
      *(v24 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v25 - 1);
      *char v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 8;
    }
    while (v26);
    if (v19 == v22) {
      goto LABEL_38;
    }
  }
  unint64_t v31 = v19 - v22;
  uint64_t v32 = (_DWORD *)v18 + v22;
  do
  {
    int v33 = *v23++;
    *v32++ = v33;
    --v31;
  }
  while (v31);
LABEL_38:
  if ((v14 & 1) == 0) {
    operator delete(*v5);
  }
  int *v5 = v18;
  v2[2] = v17;
  uint64_t v4 = 1;
LABEL_41:
  *uint64_t v2 = v4 | (2 * v16);
}

void operations_research::glop::MatrixNonZeroPattern::MergeInto(uint64_t *a1, int a2, int a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 32 * a3;
  uint64_t v6 = (void *)(v5 + 8);
  unint64_t v7 = *(void *)v5;
  if (*(void *)v5)
  {
    uint64_t v6 = (void *)*v6;
    if (v7 < 2)
    {
LABEL_3:
      int v8 = (void *)(v4 + 32 * a2);
      unint64_t v11 = *v8;
      unint64_t v10 = (int *)(v8 + 1);
      unint64_t v9 = v11;
      if ((v11 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if (v7 < 2)
  {
    goto LABEL_3;
  }
  unint64_t v13 = v7 >> 1;
  uint64_t v14 = a1[12];
  uint64_t v15 = 4 * v13;
  do
  {
    int v16 = *(_DWORD *)v6;
    uint64_t v6 = (void *)((char *)v6 + 4);
    *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v15 -= 4;
  }
  while (v15);
  unint64_t v7 = *(void *)v5;
  unint64_t v17 = (void *)(v4 + 32 * a2);
  unint64_t v18 = *v17;
  unint64_t v10 = (int *)(v17 + 1);
  unint64_t v9 = v18;
  if ((v18 & 1) == 0)
  {
LABEL_4:
    unint64_t v12 = v7;
    if (v9 < 2) {
      goto LABEL_34;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v10 = *(int **)v10;
  unint64_t v12 = v7;
  if (v9 >= 2)
  {
LABEL_11:
    unint64_t v39 = v7;
    int v40 = a3;
    unint64_t v19 = &v10[v9 >> 1];
    while (1)
    {
      while (1)
      {
        int v20 = *v10;
        uint64_t v21 = a1[12];
        unint64_t v22 = (unint64_t)*v10 >> 6;
        uint64_t v23 = *(void *)(v21 + 8 * v22);
        if (((1 << *v10) & v23) == 0) {
          break;
        }
        *(void *)(v21 + 8 * v22) = v23 & ~(1 << v20);
        if (++v10 == v19) {
          goto LABEL_33;
        }
      }
      unint64_t v24 = *(void *)v5;
      if (*(void *)v5)
      {
        uint64_t v25 = *(void *)(v5 + 8);
        unint64_t v26 = *(void *)(v5 + 16);
        unint64_t v27 = v24 >> 1;
        if (v24 >> 1 == v26)
        {
LABEL_18:
          if (((v26 >> 61) & 3) != 0) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = (char *)operator new(8 * v26);
          uint64_t v29 = v28;
          *(_DWORD *)&v28[4 * v26] = v20;
          if (v24 < 2) {
            goto LABEL_29;
          }
          unint64_t v30 = 0;
          if (v26 < 8 || (unint64_t)&v28[-v25] < 0x20)
          {
            unint64_t v31 = (int *)v25;
          }
          else
          {
            unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v31 = (int *)(v25 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v32 = v28 + 16;
            int v33 = (long long *)(v25 + 16);
            unint64_t v34 = v26 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v35 = *v33;
              *(v32 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(v33 - 1);
              *uint64_t v32 = v35;
              v32 += 2;
              v33 += 2;
              v34 -= 8;
            }
            while (v34);
            if (v26 == v30) {
              goto LABEL_29;
            }
          }
          unint64_t v36 = v26 - v30;
          long long v37 = &v28[4 * v30];
          do
          {
            int v38 = *v31++;
            *(_DWORD *)long long v37 = v38;
            v37 += 4;
            --v36;
          }
          while (v36);
LABEL_29:
          if (v24)
          {
            operator delete(*(void **)(v5 + 8));
            unint64_t v24 = *(void *)v5;
          }
          *(void *)(v5 + 8) = v29;
          *(void *)(v5 + 16) = 2 * v26;
          v24 |= 1uLL;
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v25 = v5 + 8;
        unint64_t v26 = 6;
        unint64_t v27 = v24 >> 1;
        if (v24 >> 1 == 6) {
          goto LABEL_18;
        }
      }
      *(_DWORD *)(v25 + 4 * v27) = v20;
LABEL_32:
      *(void *)uint64_t v5 = v24 + 2;
      ++*(_DWORD *)(a1[6] + 4 * v20);
      if (++v10 == v19)
      {
LABEL_33:
        unint64_t v12 = *(void *)v5;
        unint64_t v7 = v39;
        a3 = v40;
        break;
      }
    }
  }
LABEL_34:
  *(_DWORD *)(a1[3] + 4 * a3) += (v12 >> 1) - (v7 >> 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::anonymous namespace'::MatrixEntry *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
LABEL_1:
  unint64_t v11 = a2 - 1;
  unint64_t v12 = a2 - 2;
  unint64_t v13 = a2 - 3;
  uint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (char *)a2 - (char *)v14;
    uint64_t v16 = a2 - v14;
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 383)
    {
      std::string v166 = v14 + 1;
      BOOL v168 = v14 == a2 || v166 == a2;
      if (a4)
      {
        if (!v168)
        {
          uint64_t v169 = 0;
          double v170 = v14;
          do
          {
            double v172 = v166;
            signed __int32 v173 = v170[1].n128_i32[0];
            signed __int32 v174 = v170[1].n128_i32[1];
            BOOL v175 = v173 < (signed __int32)v170->n128_u32[0];
            if (v173 == v170->n128_u32[0]) {
              BOOL v175 = v174 < (signed __int32)v170->n128_u32[1];
            }
            if (v175)
            {
              unint64_t v176 = v170[1].n128_u64[1];
              uint64_t v177 = v169;
              do
              {
                long long v178 = (char *)v14 + v177;
                *(__n128 *)((char *)v14 + v177 + 16) = *(__n128 *)((char *)v14 + v177);
                if (!v177)
                {
                  uint64_t v171 = (uint64_t)v14;
                  goto LABEL_199;
                }
                signed __int32 v179 = *((_DWORD *)v178 - 4);
                BOOL v180 = v174 < *((_DWORD *)v178 - 3);
                BOOL v6 = v173 == v179;
                BOOL v181 = v173 < v179;
                if (!v6) {
                  BOOL v180 = v181;
                }
                v177 -= 16;
              }
              while (v180);
              uint64_t v171 = (uint64_t)&v14[1] + v177;
LABEL_199:
              *(_DWORD *)uint64_t v171 = v173;
              *(_DWORD *)(v171 + 4) = v174;
              *(void *)(v171 + 8) = v176;
            }
            std::string v166 = v172 + 1;
            v169 += 16;
            double v170 = v172;
          }
          while (&v172[1] != a2);
        }
      }
      else if (!v168)
      {
        do
        {
          double v222 = v166;
          signed __int32 v223 = a1[1].n128_i32[0];
          signed __int32 v224 = a1[1].n128_i32[1];
          BOOL v225 = v223 < (signed __int32)a1->n128_u32[0];
          if (v223 == a1->n128_u32[0]) {
            BOOL v225 = v224 < (signed __int32)a1->n128_u32[1];
          }
          if (v225)
          {
            unint64_t v226 = a1[1].n128_u64[1];
            int64_t v227 = v222;
            do
            {
              *int64_t v227 = v227[-1];
              signed __int32 v228 = v227[-2].n128_i32[0];
              signed __int32 v229 = v227[-2].n128_i32[1];
              --v227;
              BOOL v230 = v224 < v229;
              BOOL v6 = v223 == v228;
              BOOL v231 = v223 < v228;
              if (v6) {
                BOOL v231 = v230;
              }
            }
            while (v231);
            v227->n128_u32[0] = v223;
            v227->n128_u32[1] = v224;
            v227->n128_u64[1] = v226;
          }
          std::string v166 = v222 + 1;
          a1 = v222;
        }
        while (&v222[1] != a2);
      }
      return;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v182 = (unint64_t)(v16 - 2) >> 1;
        int64_t v183 = v182;
        do
        {
          int64_t v184 = v183;
          if (v182 >= v183)
          {
            uint64_t v185 = (2 * v183) | 1;
            uint64_t v186 = &v14[v185];
            if (2 * v184 + 2 < v16)
            {
              signed __int32 v188 = v186[1].n128_i32[0];
              BOOL v187 = (signed __int32)v186->n128_u32[1] < (signed __int32)v186[1].n128_u32[1];
              if (v186->n128_u32[0] != v188) {
                BOOL v187 = (signed __int32)v186->n128_u32[0] < v188;
              }
              if (v187) {
                ++v186;
              }
              else {
                signed __int32 v188 = v186->n128_u32[0];
              }
              if (v187) {
                uint64_t v185 = 2 * v184 + 2;
              }
            }
            else
            {
              signed __int32 v188 = v186->n128_u32[0];
            }
            uint64_t v189 = &v14[v184];
            signed __int32 v190 = v189->n128_u32[0];
            signed __int32 v191 = v189->n128_i32[1];
            BOOL v6 = v188 == v189->n128_u32[0];
            BOOL v192 = v188 < (signed __int32)v189->n128_u32[0];
            if (v6) {
              BOOL v192 = (signed __int32)v186->n128_u32[1] < v191;
            }
            if (!v192)
            {
              unint64_t v193 = v189->n128_u64[1];
              do
              {
                uint64_t v199 = v189;
                uint64_t v189 = v186;
                __n128 *v199 = *v186;
                if (v182 < v185) {
                  break;
                }
                uint64_t v200 = (2 * v185) | 1;
                uint64_t v186 = &v14[v200];
                uint64_t v185 = 2 * v185 + 2;
                if (v185 < v16)
                {
                  signed __int32 v194 = v186->n128_u32[0];
                  signed __int32 v195 = v186[1].n128_i32[0];
                  BOOL v196 = (signed __int32)v186->n128_u32[1] < (signed __int32)v186[1].n128_u32[1];
                  if (v186->n128_u32[0] != v195) {
                    BOOL v196 = v194 < v195;
                  }
                  if (v196)
                  {
                    signed __int32 v194 = v186[1].n128_i32[0];
                    ++v186;
                  }
                  else
                  {
                    uint64_t v185 = v200;
                  }
                }
                else
                {
                  signed __int32 v194 = v186->n128_u32[0];
                  uint64_t v185 = v200;
                }
                BOOL v197 = (signed __int32)v186->n128_u32[1] < v191;
                BOOL v6 = v194 == v190;
                BOOL v198 = v194 < v190;
                if (!v6) {
                  BOOL v197 = v198;
                }
              }
              while (!v197);
              v189->n128_u32[0] = v190;
              v189->n128_u32[1] = v191;
              v189->n128_u64[1] = v193;
            }
          }
          int64_t v183 = v184 - 1;
        }
        while (v184);
        uint64_t v201 = (unint64_t)v15 >> 4;
        do
        {
          uint64_t v203 = 0;
          __n128 v257 = *v14;
          uint64_t v204 = v14;
          do
          {
            uint64_t v205 = (uint64_t)&v204[v203 + 1];
            uint64_t v206 = (2 * v203) | 1;
            uint64_t v207 = 2 * v203 + 2;
            if (v207 < v201)
            {
              int v208 = *(_DWORD *)(v205 + 16);
              BOOL v209 = *(_DWORD *)v205 < v208;
              if (*(_DWORD *)v205 == v208) {
                BOOL v209 = *(_DWORD *)(v205 + 4) < *(_DWORD *)(v205 + 20);
              }
              if (v209)
              {
                v205 += 16;
                uint64_t v206 = v207;
              }
            }
            _OWORD *v204 = *(_OWORD *)v205;
            uint64_t v204 = (_OWORD *)v205;
            uint64_t v203 = v206;
          }
          while (v206 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
          if ((__n128 *)v205 == --a2)
          {
            *(__n128 *)uint64_t v205 = v257;
          }
          else
          {
            *(__n128 *)uint64_t v205 = *a2;
            *a2 = v257;
            uint64_t v210 = v205 - (void)v14 + 16;
            if (v210 >= 17)
            {
              unint64_t v211 = (((unint64_t)v210 >> 4) - 2) >> 1;
              uint64_t v212 = &v14[v211];
              signed __int32 v213 = *(_DWORD *)v205;
              signed __int32 v214 = *(_DWORD *)(v205 + 4);
              BOOL v215 = (signed __int32)v212->n128_u32[0] < *(_DWORD *)v205;
              if (v212->n128_u32[0] == *(_DWORD *)v205) {
                BOOL v215 = (signed __int32)v212->n128_u32[1] < v214;
              }
              if (v215)
              {
                uint64_t v216 = *(void *)(v205 + 8);
                do
                {
                  double v217 = (_OWORD *)v205;
                  uint64_t v205 = (uint64_t)v212;
                  *double v217 = *v212;
                  if (!v211) {
                    break;
                  }
                  unint64_t v211 = (v211 - 1) >> 1;
                  uint64_t v212 = &v14[v211];
                  BOOL v218 = (signed __int32)v212->n128_u32[0] < v213;
                  if (v212->n128_u32[0] == v213) {
                    BOOL v218 = (signed __int32)v212->n128_u32[1] < v214;
                  }
                }
                while (v218);
                *(_DWORD *)uint64_t v205 = v213;
                *(_DWORD *)(v205 + 4) = v214;
                *(void *)(v205 + 8) = v216;
              }
            }
          }
        }
        while (v201-- > 2);
      }
      return;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = &v14[(unint64_t)v16 >> 1];
    signed __int32 v19 = a2[-1].n128_i32[0];
    signed __int32 v20 = a2[-1].n128_i32[1];
    if ((unint64_t)v15 < 0x801)
    {
      signed __int32 v26 = v14->n128_u32[0];
      signed __int32 v27 = v14->n128_i32[1];
      BOOL v28 = (signed __int32)v14->n128_u32[0] < (signed __int32)v18->n128_u32[0];
      if (v14->n128_u32[0] == v18->n128_u32[0]) {
        BOOL v28 = v27 < (signed __int32)v18->n128_u32[1];
      }
      BOOL v29 = v20 < v27;
      BOOL v6 = v19 == v26;
      BOOL v30 = v19 < v26;
      if (v6) {
        BOOL v30 = v29;
      }
      if (v28)
      {
        if (v30)
        {
          __n128 v236 = *v18;
          *unint64_t v18 = *v11;
          goto LABEL_53;
        }
        __n128 v243 = *v18;
        *unint64_t v18 = *v14;
        a5.n128_u64[1] = v243.n128_u64[1];
        __n128 *v14 = v243;
        signed __int32 v51 = a2[-1].n128_i32[0];
        BOOL v6 = v51 == v14->n128_u32[0];
        BOOL v52 = v51 < (signed __int32)v14->n128_u32[0];
        if (v6) {
          BOOL v52 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v14->n128_u32[1];
        }
        if (v52)
        {
          __n128 v236 = *v14;
          __n128 *v14 = *v11;
LABEL_53:
          a5.n128_u64[1] = v236.n128_u64[1];
          *unint64_t v11 = v236;
        }
      }
      else if (v30)
      {
        __n128 v239 = *v14;
        __n128 *v14 = *v11;
        a5.n128_u64[1] = v239.n128_u64[1];
        *unint64_t v11 = v239;
        BOOL v32 = (signed __int32)v14->n128_u32[0] < (signed __int32)v18->n128_u32[0];
        if (v14->n128_u32[0] == v18->n128_u32[0]) {
          BOOL v32 = (signed __int32)v14->n128_u32[1] < (signed __int32)v18->n128_u32[1];
        }
        if (v32)
        {
          __n128 v240 = *v18;
          *unint64_t v18 = *v14;
          a5.n128_u64[1] = v240.n128_u64[1];
          __n128 *v14 = v240;
          --a3;
          signed __int32 v33 = v14->n128_u32[0];
          if (a4) {
            goto LABEL_55;
          }
          goto LABEL_96;
        }
      }
      --a3;
      signed __int32 v33 = v14->n128_u32[0];
      if (a4) {
        goto LABEL_55;
      }
      goto LABEL_96;
    }
    signed __int32 v21 = v18->n128_u32[0];
    signed __int32 v22 = v18->n128_i32[1];
    BOOL v23 = (signed __int32)v18->n128_u32[0] < (signed __int32)v14->n128_u32[0];
    if (v18->n128_u32[0] == v14->n128_u32[0]) {
      BOOL v23 = v22 < (signed __int32)v14->n128_u32[1];
    }
    BOOL v24 = v20 < v22;
    BOOL v6 = v19 == v21;
    BOOL v25 = v19 < v21;
    if (v6) {
      BOOL v25 = v24;
    }
    if (v23)
    {
      if (v25)
      {
        __n128 v235 = *v14;
        __n128 *v14 = *v11;
LABEL_36:
        *unint64_t v11 = v235;
        goto LABEL_37;
      }
      __n128 v241 = *v14;
      __n128 *v14 = *v18;
      *unint64_t v18 = v241;
      signed __int32 v34 = a2[-1].n128_i32[0];
      BOOL v6 = v34 == v18->n128_u32[0];
      BOOL v35 = v34 < (signed __int32)v18->n128_u32[0];
      if (v6) {
        BOOL v35 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v18->n128_u32[1];
      }
      if (v35)
      {
        __n128 v235 = *v18;
        *unint64_t v18 = *v11;
        goto LABEL_36;
      }
    }
    else if (v25)
    {
      __n128 v237 = *v18;
      *unint64_t v18 = *v11;
      *unint64_t v11 = v237;
      BOOL v31 = (signed __int32)v18->n128_u32[0] < (signed __int32)v14->n128_u32[0];
      if (v18->n128_u32[0] == v14->n128_u32[0]) {
        BOOL v31 = (signed __int32)v18->n128_u32[1] < (signed __int32)v14->n128_u32[1];
      }
      if (v31)
      {
        __n128 v238 = *v14;
        __n128 *v14 = *v18;
        *unint64_t v18 = v238;
      }
    }
LABEL_37:
    unint64_t v36 = v14 + 1;
    signed __int32 v37 = v14[1].n128_i32[0];
    int v38 = &v14[v17];
    signed __int32 v40 = v38[-1].n128_i32[0];
    signed __int32 v41 = v38[-1].n128_i32[1];
    unint64_t v39 = v38 - 1;
    BOOL v42 = v41 < (signed __int32)v14[1].n128_u32[1];
    BOOL v6 = v40 == v37;
    BOOL v43 = v40 < v37;
    if (!v6) {
      BOOL v42 = v43;
    }
    signed __int32 v44 = a2[-2].n128_i32[0];
    BOOL v45 = (signed __int32)a2[-2].n128_u32[1] < v41;
    BOOL v6 = v44 == v40;
    BOOL v46 = v44 < v40;
    if (v6) {
      BOOL v46 = v45;
    }
    if (v42)
    {
      if (v46)
      {
        __n128 v47 = *v36;
        __n128 *v36 = *v12;
LABEL_60:
        __n128 *v12 = v47;
        goto LABEL_61;
      }
      __n128 v54 = *v36;
      __n128 *v36 = *v39;
      *unint64_t v39 = v54;
      signed __int32 v55 = a2[-2].n128_i32[0];
      BOOL v6 = v55 == v39->n128_u32[0];
      BOOL v56 = v55 < (signed __int32)v39->n128_u32[0];
      if (v6) {
        BOOL v56 = (signed __int32)a2[-2].n128_u32[1] < (signed __int32)v39->n128_u32[1];
      }
      if (v56)
      {
        __n128 v244 = *v39;
        *unint64_t v39 = *v12;
        __n128 v47 = v244;
        goto LABEL_60;
      }
    }
    else if (v46)
    {
      __n128 v242 = *v39;
      *unint64_t v39 = *v12;
      __n128 *v12 = v242;
      signed __int32 v48 = v14[1].n128_i32[0];
      BOOL v49 = (signed __int32)v39->n128_u32[0] < v48;
      if (v39->n128_u32[0] == v48) {
        BOOL v49 = (signed __int32)v39->n128_u32[1] < (signed __int32)v14[1].n128_u32[1];
      }
      if (v49)
      {
        __n128 v50 = *v36;
        __n128 *v36 = *v39;
        *unint64_t v39 = v50;
      }
    }
LABEL_61:
    uint64_t v57 = v14 + 2;
    signed __int32 v58 = v14[2].n128_i32[0];
    uint64_t v59 = &v14[v17];
    signed __int32 v61 = v59[1].n128_i32[0];
    signed __int32 v62 = v59[1].n128_i32[1];
    uint64_t v60 = v59 + 1;
    BOOL v63 = v62 < (signed __int32)v14[2].n128_u32[1];
    BOOL v6 = v61 == v58;
    BOOL v64 = v61 < v58;
    if (!v6) {
      BOOL v63 = v64;
    }
    signed __int32 v65 = a2[-3].n128_i32[0];
    BOOL v66 = (signed __int32)a2[-3].n128_u32[1] < v62;
    BOOL v6 = v65 == v61;
    BOOL v67 = v65 < v61;
    if (v6) {
      BOOL v67 = v66;
    }
    if (v63)
    {
      if (v67)
      {
        __n128 v68 = *v57;
        *uint64_t v57 = *v13;
LABEL_77:
        __n128 *v13 = v68;
        goto LABEL_78;
      }
      __n128 v72 = *v57;
      *uint64_t v57 = *v60;
      __n128 *v60 = v72;
      signed __int32 v73 = a2[-3].n128_i32[0];
      BOOL v6 = v73 == v60->n128_u32[0];
      BOOL v74 = v73 < (signed __int32)v60->n128_u32[0];
      if (v6) {
        BOOL v74 = (signed __int32)a2[-3].n128_u32[1] < (signed __int32)v60->n128_u32[1];
      }
      if (v74)
      {
        __n128 v246 = *v60;
        __n128 *v60 = *v13;
        __n128 v68 = v246;
        goto LABEL_77;
      }
    }
    else if (v67)
    {
      __n128 v245 = *v60;
      __n128 *v60 = *v13;
      __n128 *v13 = v245;
      signed __int32 v69 = v14[2].n128_i32[0];
      BOOL v70 = (signed __int32)v60->n128_u32[0] < v69;
      if (v60->n128_u32[0] == v69) {
        BOOL v70 = (signed __int32)v60->n128_u32[1] < (signed __int32)v14[2].n128_u32[1];
      }
      if (v70)
      {
        __n128 v71 = *v57;
        *uint64_t v57 = *v60;
        __n128 *v60 = v71;
      }
    }
LABEL_78:
    signed __int32 v75 = v18->n128_u32[0];
    signed __int32 v76 = v18->n128_i32[1];
    BOOL v77 = (signed __int32)v18->n128_u32[0] < (signed __int32)v39->n128_u32[0];
    if (v18->n128_u32[0] == v39->n128_u32[0]) {
      BOOL v77 = v76 < (signed __int32)v39->n128_u32[1];
    }
    BOOL v78 = (signed __int32)v60->n128_u32[1] < v76;
    BOOL v6 = v60->n128_u32[0] == v75;
    BOOL v79 = (signed __int32)v60->n128_u32[0] < v75;
    if (v6) {
      BOOL v79 = v78;
    }
    if (v77)
    {
      if (v79)
      {
        __n128 v247 = *v39;
        *unint64_t v39 = *v60;
LABEL_94:
        __n128 *v60 = v247;
        goto LABEL_95;
      }
      __n128 v250 = *v39;
      *unint64_t v39 = *v18;
      *unint64_t v18 = v250;
      BOOL v81 = (signed __int32)v60->n128_u32[0] < (signed __int32)v18->n128_u32[0];
      if (v60->n128_u32[0] == v18->n128_u32[0]) {
        BOOL v81 = (signed __int32)v60->n128_u32[1] < (signed __int32)v18->n128_u32[1];
      }
      if (v81)
      {
        __n128 v247 = *v18;
        *unint64_t v18 = *v60;
        goto LABEL_94;
      }
    }
    else if (v79)
    {
      __n128 v248 = *v18;
      *unint64_t v18 = *v60;
      __n128 *v60 = v248;
      BOOL v80 = (signed __int32)v18->n128_u32[0] < (signed __int32)v39->n128_u32[0];
      if (v18->n128_u32[0] == v39->n128_u32[0]) {
        BOOL v80 = (signed __int32)v18->n128_u32[1] < (signed __int32)v39->n128_u32[1];
      }
      if (v80)
      {
        __n128 v249 = *v39;
        *unint64_t v39 = *v18;
        *unint64_t v18 = v249;
      }
    }
LABEL_95:
    __n128 v251 = *v14;
    __n128 *v14 = *v18;
    a5.n128_u64[1] = v251.n128_u64[1];
    *unint64_t v18 = v251;
    --a3;
    signed __int32 v33 = v14->n128_u32[0];
    if (a4)
    {
LABEL_55:
      signed __int32 v53 = v14->n128_i32[1];
      goto LABEL_99;
    }
LABEL_96:
    signed __int32 v82 = v14[-1].n128_i32[0];
    signed __int32 v53 = v14->n128_i32[1];
    BOOL v6 = v82 == v33;
    BOOL v83 = v82 < v33;
    if (v6) {
      BOOL v83 = (signed __int32)v14[-1].n128_u32[1] < v53;
    }
    if (v83)
    {
LABEL_99:
      uint64_t v84 = 0;
      a5.n128_u64[0] = v14->n128_u64[1];
      do
      {
        signed __int32 v85 = v14[v84 + 1].n128_i32[0];
        BOOL v86 = (signed __int32)v14[v84 + 1].n128_u32[1] < v53;
        BOOL v6 = v85 == v33;
        BOOL v87 = v85 < v33;
        if (!v6) {
          BOOL v86 = v87;
        }
        ++v84;
      }
      while (v86);
      uint64_t v88 = &v14[v84];
      unint64_t v89 = a2;
      if (v84 == 1)
      {
        unint64_t v89 = a2;
        do
        {
          if (v88 >= v89) {
            break;
          }
          signed __int32 v94 = v89[-1].n128_i32[0];
          signed __int32 v95 = v89[-1].n128_i32[1];
          --v89;
          BOOL v96 = v95 < v53;
          BOOL v6 = v94 == v33;
          BOOL v97 = v94 < v33;
          if (v6) {
            BOOL v97 = v96;
          }
        }
        while (!v97);
      }
      else
      {
        do
        {
          signed __int32 v90 = v89[-1].n128_i32[0];
          signed __int32 v91 = v89[-1].n128_i32[1];
          --v89;
          BOOL v92 = v91 < v53;
          BOOL v6 = v90 == v33;
          BOOL v93 = v90 < v33;
          if (v6) {
            BOOL v93 = v92;
          }
        }
        while (!v93);
      }
      uint64_t v14 = v88;
      if (v88 < v89)
      {
        uint64_t v98 = v89;
        do
        {
          __n128 v252 = *v14;
          __n128 *v14 = *v98;
          __n128 *v98 = v252;
          do
          {
            signed __int32 v99 = v14[1].n128_i32[0];
            signed __int32 v100 = v14[1].n128_i32[1];
            ++v14;
            BOOL v101 = v100 < v53;
            BOOL v6 = v99 == v33;
            BOOL v102 = v99 < v33;
            if (v6) {
              BOOL v102 = v101;
            }
          }
          while (v102);
          do
          {
            signed __int32 v103 = v98[-1].n128_i32[0];
            signed __int32 v104 = v98[-1].n128_i32[1];
            --v98;
            BOOL v105 = v104 < v53;
            BOOL v6 = v103 == v33;
            BOOL v106 = v103 < v33;
            if (v6) {
              BOOL v106 = v105;
            }
          }
          while (!v106);
        }
        while (v14 < v98);
      }
      if (&v14[-1] != a1) {
        *a1 = v14[-1];
      }
      v14[-1].n128_u32[0] = v33;
      v14[-1].n128_u32[1] = v53;
      v14[-1].n128_u64[1] = a5.n128_u64[0];
      if (v88 < v89) {
        goto LABEL_128;
      }
      {
        a2 = v14 - 1;
        if (v107) {
          return;
        }
        goto LABEL_1;
      }
      if (!v107)
      {
LABEL_128:
        a4 = 0;
      }
    }
    else
    {
      signed __int32 v109 = a2[-1].n128_i32[0];
      BOOL v6 = v33 == v109;
      BOOL v110 = v33 < v109;
      if (v6) {
        BOOL v110 = v53 < (signed __int32)a2[-1].n128_u32[1];
      }
      if (v110)
      {
        do
        {
          signed __int32 v111 = v14[1].n128_i32[0];
          signed __int32 v112 = v14[1].n128_i32[1];
          ++v14;
          BOOL v113 = v53 < v112;
          BOOL v6 = v33 == v111;
          BOOL v114 = v33 < v111;
          if (v6) {
            BOOL v114 = v113;
          }
        }
        while (!v114);
      }
      else
      {
        long long v115 = v14 + 1;
        do
        {
          uint64_t v14 = v115;
          if (v115 >= a2) {
            break;
          }
          signed __int32 v116 = v115->n128_u32[0];
          BOOL v117 = v53 < (signed __int32)v14->n128_u32[1];
          BOOL v6 = v33 == v116;
          BOOL v118 = v33 < v116;
          if (!v6) {
            BOOL v117 = v118;
          }
          long long v115 = v14 + 1;
        }
        while (!v117);
      }
      uint64_t v119 = a2;
      if (v14 < a2)
      {
        uint64_t v119 = a2;
        do
        {
          signed __int32 v120 = v119[-1].n128_i32[0];
          signed __int32 v121 = v119[-1].n128_i32[1];
          --v119;
          BOOL v122 = v53 < v121;
          BOOL v6 = v33 == v120;
          BOOL v123 = v33 < v120;
          if (v6) {
            BOOL v123 = v122;
          }
        }
        while (v123);
      }
      a5.n128_u64[0] = a1->n128_u64[1];
      while (v14 < v119)
      {
        __n128 v253 = *v14;
        __n128 *v14 = *v119;
        __n128 *v119 = v253;
        do
        {
          signed __int32 v124 = v14[1].n128_i32[0];
          signed __int32 v125 = v14[1].n128_i32[1];
          ++v14;
          BOOL v126 = v53 < v125;
          BOOL v6 = v33 == v124;
          BOOL v127 = v33 < v124;
          if (v6) {
            BOOL v127 = v126;
          }
        }
        while (!v127);
        do
        {
          signed __int32 v128 = v119[-1].n128_i32[0];
          signed __int32 v129 = v119[-1].n128_i32[1];
          --v119;
          BOOL v130 = v53 < v129;
          BOOL v6 = v33 == v128;
          BOOL v131 = v33 < v128;
          if (v6) {
            BOOL v131 = v130;
          }
        }
        while (v131);
      }
      BOOL v5 = &v14[-1] >= a1;
      BOOL v6 = &v14[-1] == a1;
      if (&v14[-1] != a1) {
        *a1 = v14[-1];
      }
      a4 = 0;
      v14[-1].n128_u32[0] = v33;
      v14[-1].n128_u32[1] = v53;
      v14[-1].n128_u64[1] = a5.n128_u64[0];
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return;
    case 2:
      signed __int32 v132 = a2[-1].n128_i32[0];
      signed __int32 v133 = a2[-1].n128_i32[1];
      unint64_t v134 = a2 - 1;
      BOOL v135 = v133 < (signed __int32)v14->n128_u32[1];
      BOOL v6 = v132 == v14->n128_u32[0];
      BOOL v136 = v132 < (signed __int32)v14->n128_u32[0];
      if (v6) {
        BOOL v136 = v135;
      }
      if (v136)
      {
        __n128 v254 = *v14;
        __n128 *v14 = *v134;
        *unint64_t v134 = v254;
      }
      return;
    case 3:
      uint64_t v137 = v14 + 1;
      signed __int32 v138 = v14[1].n128_i32[0];
      signed __int32 v139 = v14[1].n128_i32[1];
      BOOL v140 = v138 < (signed __int32)v14->n128_u32[0];
      if (v138 == v14->n128_u32[0]) {
        BOOL v140 = v139 < (signed __int32)v14->n128_u32[1];
      }
      signed __int32 v142 = a2[-1].n128_i32[0];
      uint64_t v141 = a2 - 1;
      BOOL v143 = (signed __int32)a2[-1].n128_u32[1] < v139;
      BOOL v6 = v142 == v138;
      BOOL v144 = v142 < v138;
      if (v6) {
        BOOL v144 = v143;
      }
      if (v140)
      {
        if (v144)
        {
          __n128 v255 = *v14;
          __n128 *v14 = *v141;
          __n128 v145 = v255;
        }
        else
        {
          __n128 v259 = *v14;
          __n128 *v14 = *v137;
          __n128 *v137 = v259;
          signed __int32 v232 = a2[-1].n128_i32[0];
          signed __int32 v233 = v14[1].n128_i32[0];
          BOOL v6 = v232 == v233;
          BOOL v234 = v232 < v233;
          if (v6) {
            BOOL v234 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v14[1].n128_u32[1];
          }
          if (!v234) {
            return;
          }
          __n128 v145 = *v137;
          __n128 *v137 = *v141;
        }
        *uint64_t v141 = v145;
        return;
      }
      if (v144)
      {
        __n128 v219 = *v137;
        __n128 *v137 = *v141;
        *uint64_t v141 = v219;
        signed __int32 v220 = v14[1].n128_i32[0];
        BOOL v6 = v220 == v14->n128_u32[0];
        BOOL v221 = v220 < (signed __int32)v14->n128_u32[0];
        if (v6) {
          BOOL v221 = (signed __int32)v14[1].n128_u32[1] < (signed __int32)v14->n128_u32[1];
        }
        if (v221)
        {
          __n128 v258 = *v14;
          __n128 *v14 = *v137;
          __n128 *v137 = v258;
        }
      }
      break;
    case 4:
      return;
    case 5:
      uint64_t v146 = v14 + 1;
      uint64_t v147 = v14 + 2;
      unint64_t v148 = v14 + 3;
      signed __int32 v149 = a2[-1].n128_i32[0];
      signed __int32 v150 = a2[-1].n128_i32[1];
      uint64_t v151 = a2 - 1;
      signed __int32 v152 = v14[3].n128_i32[0];
      BOOL v153 = v150 < (signed __int32)v14[3].n128_u32[1];
      BOOL v6 = v149 == v152;
      BOOL v154 = v149 < v152;
      if (v6) {
        BOOL v154 = v153;
      }
      if (v154)
      {
        __n128 v155 = *v148;
        *unint64_t v148 = *v151;
        *uint64_t v151 = v155;
        signed __int32 v156 = v14[3].n128_i32[0];
        signed __int32 v157 = v14[2].n128_i32[0];
        BOOL v6 = v156 == v157;
        BOOL v158 = v156 < v157;
        if (v6) {
          BOOL v158 = (signed __int32)v14[3].n128_u32[1] < (signed __int32)v14[2].n128_u32[1];
        }
        if (v158)
        {
          __n128 v159 = *v147;
          *uint64_t v147 = *v148;
          *unint64_t v148 = v159;
          signed __int32 v160 = v14[2].n128_i32[0];
          signed __int32 v161 = v14[1].n128_i32[0];
          BOOL v6 = v160 == v161;
          BOOL v162 = v160 < v161;
          if (v6) {
            BOOL v162 = (signed __int32)v14[2].n128_u32[1] < (signed __int32)v14[1].n128_u32[1];
          }
          if (v162)
          {
            __n128 v163 = *v146;
            *uint64_t v146 = *v147;
            *uint64_t v147 = v163;
            signed __int32 v164 = v14[1].n128_i32[0];
            BOOL v6 = v164 == v14->n128_u32[0];
            BOOL v165 = v164 < (signed __int32)v14->n128_u32[0];
            if (v6) {
              BOOL v165 = (signed __int32)v14[1].n128_u32[1] < (signed __int32)v14->n128_u32[1];
            }
            if (v165)
            {
              __n128 v256 = *v14;
              __n128 *v14 = *v146;
              *uint64_t v146 = v256;
            }
          }
        }
      }
      return;
    default:
      JUMPOUT(0);
  }
}

  unint64_t v13 = a1;
  while (1)
  {
    a1 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v7 || !v6)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL v92 = *(a2 - 1);
          BOOL v93 = *v13;
          signed __int32 v94 = **a3;
          uint64_t result = *(double *)(v94 + 8 * v92);
          if (result >= *(double *)(v94 + 8 * v93)) {
            return result;
          }
          __n128 *v13 = v92;
          goto LABEL_166;
        case 3uLL:
          signed __int32 v95 = **a3;
          BOOL v93 = *v13;
          BOOL v96 = v13[1];
          BOOL v97 = *(double *)(v95 + 8 * v96);
          uint64_t result = *(double *)(v95 + 8 * v93);
          uint64_t v98 = *(a2 - 1);
          signed __int32 v99 = *(double *)(v95 + 8 * v98);
          if (v97 >= result)
          {
            if (v99 < v97)
            {
              v13[1] = v98;
              *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v96;
              uint64_t v151 = *v13;
              signed __int32 v150 = v13[1];
              uint64_t result = *(double *)(v95 + 8 * v150);
              if (result < *(double *)(v95 + 8 * v151))
              {
                __n128 *v13 = v150;
                v13[1] = v151;
              }
            }
          }
          else
          {
            if (v99 >= v97)
            {
              __n128 *v13 = v96;
              v13[1] = v93;
              signed __int32 v156 = *(a2 - 1);
              if (*(double *)(v95 + 8 * v156) >= result) {
                return result;
              }
              v13[1] = v156;
            }
            else
            {
              __n128 *v13 = v98;
            }
LABEL_166:
            *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v93;
          }
          return result;
        case 4uLL:
          BOOL v101 = v13 + 1;
          BOOL v102 = v13[1];
          signed __int32 v103 = v13 + 2;
          signed __int32 v104 = v13[2];
          BOOL v105 = **a3;
          BOOL v106 = *v13;
          BOOL v107 = *(double *)(v105 + 8 * v102);
          __n128 v108 = *(double *)(v105 + 8 * *v13);
          signed __int32 v109 = v104;
          BOOL v110 = *(double *)(v105 + 8 * v104);
          if (v107 >= v108)
          {
            if (v110 >= v107)
            {
              BOOL v102 = v13[2];
            }
            else
            {
              signed __int32 v111 = v102;
              *BOOL v101 = v104;
              *signed __int32 v103 = v102;
              signed __int32 v112 = v13;
              BOOL v113 = v13 + 1;
              signed __int32 v109 = v102;
              if (v110 < v108) {
                goto LABEL_168;
              }
            }
            signed __int32 v157 = *(a2 - 1);
            uint64_t result = *(double *)(v105 + 8 * v157);
            if (result >= *(double *)(v105 + 8 * v109)) {
              return result;
            }
          }
          else
          {
            signed __int32 v111 = v106;
            if (v110 < v107)
            {
              signed __int32 v112 = v13;
              BOOL v113 = v13 + 2;
              BOOL v102 = *v13;
              goto LABEL_168;
            }
            __n128 *v13 = v102;
            v13[1] = v106;
            signed __int32 v112 = v13 + 1;
            BOOL v113 = v13 + 2;
            BOOL v102 = v106;
            if (v110 < v108)
            {
LABEL_168:
              _OWORD *v112 = v104;
              char *v113 = v106;
              signed __int32 v157 = *(a2 - 1);
              uint64_t result = *(double *)(v105 + 8 * v157);
              if (result >= *(double *)(v105 + 8 * v111)) {
                return result;
              }
              goto LABEL_172;
            }
            BOOL v102 = v104;
            signed __int32 v157 = *(a2 - 1);
            uint64_t result = *(double *)(v105 + 8 * v157);
            if (result >= *(double *)(v105 + 8 * v109)) {
              return result;
            }
          }
LABEL_172:
          *signed __int32 v103 = v157;
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v102;
          BOOL v158 = *v103;
          __n128 v159 = *v101;
          uint64_t result = *(double *)(v105 + 8 * v158);
          if (result < *(double *)(v105 + 8 * v159))
          {
            v13[1] = v158;
            v13[2] = v159;
            signed __int32 v160 = *v13;
            if (result < *(double *)(v105 + 8 * v160))
            {
              __n128 *v13 = v158;
              v13[1] = v160;
            }
          }
          return result;
        case 5uLL:
          signed __int32 v100 = **a3;
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        BOOL v123 = (v15 - 2) >> 1;
        signed __int32 v124 = v123;
        do
        {
          if (v123 >= v124)
          {
            BOOL v126 = (2 * v124) | 1;
            BOOL v127 = &v13[v126];
            signed __int32 v128 = **a3;
            if (2 * v124 + 2 < (uint64_t)v15 && *(double *)(v128 + 8 * *v127) < *(double *)(v128 + 8 * v127[1]))
            {
              ++v127;
              BOOL v126 = 2 * v124 + 2;
            }
            signed __int32 v129 = &v13[v124];
            BOOL v130 = *v127;
            BOOL v131 = *v129;
            uint64_t result = *(double *)(v128 + 8 * v131);
            if (*(double *)(v128 + 8 * v130) >= result)
            {
              do
              {
                signed __int32 v132 = v127;
                uint64_t *v129 = v130;
                if (v123 < v126) {
                  break;
                }
                signed __int32 v133 = 2 * v126;
                BOOL v126 = (2 * v126) | 1;
                BOOL v127 = &v13[v126];
                unint64_t v134 = v133 + 2;
                if (v134 < (uint64_t)v15 && *(double *)(v128 + 8 * *v127) < *(double *)(v128 + 8 * v127[1]))
                {
                  ++v127;
                  BOOL v126 = v134;
                }
                BOOL v130 = *v127;
                signed __int32 v129 = v132;
              }
              while (*(double *)(v128 + 8 * v130) >= result);
              *signed __int32 v132 = v131;
            }
          }
          signed __int32 v125 = v124-- <= 0;
        }
        while (!v125);
        BOOL v135 = (unint64_t)v14 >> 2;
        do
        {
          BOOL v136 = 0;
          uint64_t v137 = *v13;
          signed __int32 v138 = *a3;
          signed __int32 v139 = v13;
          do
          {
            BOOL v140 = v139;
            v139 += v136 + 1;
            uint64_t v141 = 2 * v136;
            BOOL v136 = (2 * v136) | 1;
            signed __int32 v142 = v141 + 2;
            if (v142 < v135)
            {
              uint64_t result = *(double *)(*v138 + 8 * *v139);
              if (result < *(double *)(*v138 + 8 * v139[1]))
              {
                ++v139;
                BOOL v136 = v142;
              }
            }
            *BOOL v140 = *v139;
          }
          while (v136 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
          if (v139 == --a2)
          {
            void *v139 = v137;
          }
          else
          {
            void *v139 = *a2;
            *a2 = v137;
            BOOL v143 = (char *)v139 - (char *)v13 + 4;
            if (v143 >= 5)
            {
              BOOL v144 = (((unint64_t)v143 >> 2) - 2) >> 1;
              __n128 v145 = &v13[v144];
              uint64_t v146 = *v145;
              uint64_t v147 = *v139;
              unint64_t v148 = **a3;
              uint64_t result = *(double *)(v148 + 8 * v147);
              if (*(double *)(v148 + 8 * v146) < result)
              {
                do
                {
                  signed __int32 v149 = v145;
                  void *v139 = v146;
                  if (!v144) {
                    break;
                  }
                  BOOL v144 = (v144 - 1) >> 1;
                  __n128 v145 = &v13[v144];
                  uint64_t v146 = *v145;
                  signed __int32 v139 = v149;
                }
                while (*(double *)(v148 + 8 * v146) < result);
                *signed __int32 v149 = v147;
              }
            }
          }
          signed __int32 v125 = v135-- <= 2;
        }
        while (!v125);
      }
      return result;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v13[v15 >> 1];
    unint64_t v18 = **a3;
    signed __int32 v19 = *(a2 - 1);
    signed __int32 v20 = *(double *)(v18 + 8 * v19);
    if ((unint64_t)v14 < 0x201)
    {
      BOOL v25 = *v13;
      signed __int32 v26 = *v17;
      signed __int32 v27 = *(double *)(v18 + 8 * v25);
      BOOL v28 = *(double *)(v18 + 8 * v26);
      if (v27 < v28)
      {
        if (v20 < v27)
        {
          *unint64_t v17 = v19;
          goto LABEL_31;
        }
        *unint64_t v17 = v25;
        __n128 *v13 = v26;
        BOOL v46 = *(a2 - 1);
        if (*(double *)(v18 + 8 * v46) < v28)
        {
          __n128 *v13 = v46;
LABEL_31:
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v26;
        }
LABEL_32:
        --a4;
        signed __int32 v33 = *v13;
        BOOL v32 = *v13;
        if (a5) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      if (v20 >= v27) {
        goto LABEL_32;
      }
      __n128 *v13 = v19;
      *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v25;
      BOOL v31 = *v13;
      BOOL v32 = *v17;
      if (*(double *)(v18 + 8 * v31) >= *(double *)(v18 + 8 * v32)) {
        goto LABEL_32;
      }
      *unint64_t v17 = v31;
      __n128 *v13 = v32;
      --a4;
      signed __int32 v33 = v32;
      BOOL v32 = (int)v32;
      if (a5) {
        goto LABEL_56;
      }
LABEL_55:
      uint64_t result = *(double *)(v18 + 8 * v32);
      if (*(double *)(v18 + 8 * *(v13 - 1)) < result) {
        goto LABEL_56;
      }
      if (result < *(double *)(v18 + 8 * *(a2 - 1)))
      {
        do
        {
          BOOL v83 = v13[1];
          ++v13;
        }
        while (result >= *(double *)(v18 + 8 * v83));
      }
      else
      {
        uint64_t v84 = v13 + 1;
        do
        {
          unint64_t v13 = v84;
          if (v84 >= a2) {
            break;
          }
          ++v84;
        }
        while (result >= *(double *)(v18 + 8 * *v13));
      }
      signed __int32 v85 = a2;
      if (v13 < a2)
      {
        signed __int32 v85 = a2;
        do
          BOOL v86 = *--v85;
        while (result < *(double *)(v18 + 8 * v86));
      }
      if (v13 < v85)
      {
        BOOL v87 = *v13;
        uint64_t v88 = *v85;
        do
        {
          __n128 *v13 = v88;
          *signed __int32 v85 = v87;
          do
          {
            unint64_t v89 = v13[1];
            ++v13;
            BOOL v87 = v89;
          }
          while (result >= *(double *)(v18 + 8 * v89));
          do
          {
            signed __int32 v90 = *--v85;
            uint64_t v88 = v90;
          }
          while (result < *(double *)(v18 + 8 * v90));
        }
        while (v13 < v85);
      }
      signed __int32 v91 = v13 - 1;
      BOOL v6 = v13 - 1 >= a1;
      unint64_t v7 = v13 - 1 == a1;
      if (v13 - 1 != a1) {
        *a1 = *v91;
      }
      a5 = 0;
      _DWORD *v91 = v33;
    }
    else
    {
      signed __int32 v21 = *v17;
      signed __int32 v22 = *v13;
      BOOL v23 = *(double *)(v18 + 8 * v21);
      BOOL v24 = *(double *)(v18 + 8 * v22);
      if (v23 >= v24)
      {
        if (v20 < v23)
        {
          *unint64_t v17 = v19;
          *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v21;
          BOOL v29 = *v17;
          BOOL v30 = *v13;
          if (*(double *)(v18 + 8 * v29) < *(double *)(v18 + 8 * v30))
          {
            __n128 *v13 = v29;
            *unint64_t v17 = v30;
          }
        }
      }
      else
      {
        if (v20 >= v23)
        {
          __n128 *v13 = v21;
          *unint64_t v17 = v22;
          signed __int32 v34 = *(a2 - 1);
          if (*(double *)(v18 + 8 * v34) >= v24) {
            goto LABEL_23;
          }
          *unint64_t v17 = v34;
        }
        else
        {
          __n128 *v13 = v19;
        }
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v22;
      }
LABEL_23:
      BOOL v35 = &v13[v16];
      int v38 = *(v35 - 1);
      unint64_t v36 = v35 - 1;
      signed __int32 v37 = v38;
      unint64_t v39 = v13[1];
      signed __int32 v40 = *(double *)(v18 + 8 * v38);
      signed __int32 v41 = *(double *)(v18 + 8 * v39);
      BOOL v42 = *(a2 - 2);
      BOOL v43 = *(double *)(v18 + 8 * v42);
      if (v40 >= v41)
      {
        if (v43 < v40)
        {
          __n128 *v36 = v42;
          *(a2 - 2) = v37;
          signed __int32 v44 = *v36;
          BOOL v45 = v13[1];
          if (*(double *)(v18 + 8 * v44) < *(double *)(v18 + 8 * v45))
          {
            v13[1] = v44;
            __n128 *v36 = v45;
          }
        }
      }
      else
      {
        if (v43 >= v40)
        {
          v13[1] = v37;
          __n128 *v36 = v39;
          __n128 v47 = *(a2 - 2);
          if (*(double *)(v18 + 8 * v47) >= v41) {
            goto LABEL_37;
          }
          __n128 *v36 = v47;
        }
        else
        {
          v13[1] = v42;
        }
        *(a2 - 2) = v39;
      }
LABEL_37:
      signed __int32 v48 = &v13[v16];
      signed __int32 v51 = v48[1];
      BOOL v49 = v48 + 1;
      __n128 v50 = v51;
      BOOL v52 = v13[2];
      signed __int32 v53 = *(double *)(v18 + 8 * v51);
      __n128 v54 = *(double *)(v18 + 8 * v52);
      signed __int32 v55 = *(a2 - 3);
      BOOL v56 = *(double *)(v18 + 8 * v55);
      if (v53 >= v54)
      {
        if (v56 < v53)
        {
          *BOOL v49 = v55;
          *(a2 - 3) = v50;
          uint64_t v57 = *v49;
          signed __int32 v58 = v13[2];
          if (*(double *)(v18 + 8 * v57) < *(double *)(v18 + 8 * v58))
          {
            v13[2] = v57;
            *BOOL v49 = v58;
          }
        }
      }
      else
      {
        if (v56 >= v53)
        {
          v13[2] = v50;
          *BOOL v49 = v52;
          uint64_t v59 = *(a2 - 3);
          if (*(double *)(v18 + 8 * v59) >= v54) {
            goto LABEL_46;
          }
          *BOOL v49 = v59;
        }
        else
        {
          v13[2] = v55;
        }
        *(a2 - 3) = v52;
      }
LABEL_46:
      uint64_t v60 = *v17;
      signed __int32 v61 = *v36;
      signed __int32 v62 = *(double *)(v18 + 8 * v60);
      BOOL v63 = *(double *)(v18 + 8 * v61);
      BOOL v64 = *v49;
      signed __int32 v65 = *(double *)(v18 + 8 * v64);
      if (v62 >= v63)
      {
        if (v65 >= v62) {
          goto LABEL_54;
        }
        *unint64_t v17 = v64;
        *BOOL v49 = v60;
        BOOL v49 = &v13[v15 >> 1];
        LODWORD(v6operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v61;
        if (v65 >= v63)
        {
          LODWORD(v6operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v64;
          goto LABEL_54;
        }
      }
      else if (v65 >= v62)
      {
        __n128 *v36 = v60;
        *unint64_t v17 = v61;
        unint64_t v36 = &v13[v15 >> 1];
        LODWORD(v6operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v64;
        if (v65 >= v63)
        {
          LODWORD(v6operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v61;
          goto LABEL_54;
        }
      }
      __n128 *v36 = v64;
      *BOOL v49 = v61;
LABEL_54:
      BOOL v66 = *v13;
      __n128 *v13 = v60;
      *unint64_t v17 = v66;
      --a4;
      signed __int32 v33 = *v13;
      BOOL v32 = *v13;
      if ((a5 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      BOOL v67 = 0;
      __n128 v68 = **a3;
      signed __int32 v69 = *(double *)(v68 + 8 * v32);
      do
        BOOL v70 = v13[++v67];
      while (*(double *)(v68 + 8 * v70) < v69);
      __n128 v71 = &v13[v67];
      __n128 v72 = a2;
      if (v67 == 1)
      {
        __n128 v72 = a2;
        do
        {
          if (v71 >= v72) {
            break;
          }
          BOOL v74 = *--v72;
        }
        while (*(double *)(v68 + 8 * v74) >= v69);
      }
      else
      {
        do
          signed __int32 v73 = *--v72;
        while (*(double *)(v68 + 8 * v73) >= v69);
      }
      if (v71 >= v72)
      {
        BOOL v81 = v71 - 1;
        if (v71 - 1 == v13) {
          goto LABEL_74;
        }
LABEL_73:
        __n128 *v13 = *v81;
        goto LABEL_74;
      }
      signed __int32 v75 = *v72;
      signed __int32 v76 = v70;
      BOOL v77 = &v13[v67];
      BOOL v78 = v72;
      do
      {
        *BOOL v77 = v75;
        void *v78 = v76;
        do
        {
          BOOL v79 = v77[1];
          ++v77;
          signed __int32 v76 = v79;
        }
        while (*(double *)(v68 + 8 * v79) < v69);
        do
        {
          BOOL v80 = *--v78;
          signed __int32 v75 = v80;
        }
        while (*(double *)(v68 + 8 * v80) >= v69);
      }
      while (v77 < v78);
      BOOL v81 = v77 - 1;
      if (v77 - 1 != v13) {
        goto LABEL_73;
      }
LABEL_74:
      *BOOL v81 = v33;
      if (v71 < v72) {
        goto LABEL_77;
      }
      unint64_t v13 = v81 + 1;
      {
        a2 = v81;
        if (v82) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v82)
      {
LABEL_77:
        a5 = 0;
        unint64_t v13 = v81 + 1;
      }
    }
  }
  BOOL v114 = *a3;
  if (a5)
  {
    if (v13 != a2)
    {
      long long v115 = v13 + 1;
      if (v13 + 1 != a2)
      {
        signed __int32 v116 = 0;
        BOOL v117 = *v114;
        BOOL v118 = v13;
        do
        {
          signed __int32 v121 = *v118;
          signed __int32 v120 = v118[1];
          BOOL v118 = v115;
          uint64_t result = *(double *)(v117 + 8 * v120);
          if (result < *(double *)(v117 + 8 * v121))
          {
            BOOL v122 = v116;
            do
            {
              *(int *)((char *)v13 + v122 + 4) = v121;
              if (!v122)
              {
                uint64_t v119 = v13;
                goto LABEL_115;
              }
              signed __int32 v121 = *(int *)((char *)v13 + v122 - 4);
              v122 -= 4;
            }
            while (result < *(double *)(v117 + 8 * v121));
            uint64_t v119 = (int *)((char *)v13 + v122 + 4);
LABEL_115:
            __n128 *v119 = v120;
          }
          long long v115 = v118 + 1;
          v116 += 4;
        }
        while (v118 + 1 != a2);
      }
    }
  }
  else if (v13 != a2)
  {
    signed __int32 v152 = v13 + 1;
    if (v13 + 1 != a2)
    {
      BOOL v153 = *v114;
      do
      {
        __n128 v155 = *a1;
        BOOL v154 = a1[1];
        a1 = v152;
        uint64_t result = *(double *)(v153 + 8 * v154);
        if (result < *(double *)(v153 + 8 * v155))
        {
          do
          {
            *signed __int32 v152 = v155;
            __n128 v155 = *(v152 - 2);
            --v152;
          }
          while (result < *(double *)(v153 + 8 * v155));
          *signed __int32 v152 = v154;
        }
        signed __int32 v152 = a1 + 1;
      }
      while (a1 + 1 != a2);
    }
  }
  return result;
}

  int v301 = a2 - 3;
  uint64_t v296 = a2 - 9;
  uint64_t v297 = a2 - 6;
  unint64_t v9 = a1;
  uint64_t v312 = (unint64_t)a2;
  while (1)
  {
    unint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    if (v5 || !v4) {
      break;
    }
    int v319 = v9;
    if (v10 <= 575)
    {
      if (a4)
      {
        if (v9 == a2) {
          return;
        }
        signed __int32 v142 = v9 + 3;
        if (v9 + 3 == a2) {
          return;
        }
        BOOL v143 = 0;
        BOOL v144 = v9;
        while (2)
        {
          __n128 v248 = v142;
          __n128 v250 = (unsigned char *)v144[3];
          __n128 v249 = (unsigned char *)v144[4];
          __n128 v251 = v249 - v250;
          if (v249 == v250)
          {
            __n128 v253 = 0;
            __n128 v252 = 0;
            uint64_t v264 = v144[1];
            __n128 v255 = v264 - *v144;
            if (v264 != *v144) {
              goto LABEL_322;
            }
          }
          else
          {
            if (v251 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            __n128 v252 = (char *)operator new(v249 - v250);
            __n128 v253 = &v252[4 * (v251 >> 2)];
            memcpy(v252, v250, v251);
            __n128 v254 = v144[1];
            __n128 v255 = v254 - *v144;
            if (v254 != *v144)
            {
LABEL_322:
              if ((v255 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v341 = operator new(v255);
              __n128 v256 = v253 - v252 > v255;
              operator delete(v341);
              if (v252) {
LABEL_324:
              }
                operator delete(v252);
LABEL_325:
              if (v256)
              {
                __n128 v257 = (unsigned char *)*v248;
                __n128 v258 = (unsigned char *)v144[4];
                __n128 v259 = v144[5];
                v248[1] = 0;
                v248[2] = 0;
                *__n128 v248 = 0;
                uint64_t v260 = v258 - v257;
                if (v258 != v257)
                {
                  if ((v260 & 0x8000000000000000) != 0)
                  {
                    *(_OWORD *)(v144 + 3) = *(_OWORD *)v144;
                    v248[2] = v144[2];
                    unint64_t *v144 = 0;
                    v144[1] = 0;
                    v144[2] = 0;
                    __n128 v247 = v9;
                    if (v144 != v9) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    goto LABEL_317;
                  }
                  int v318 = v259;
                  unint64_t v265 = 0;
                  for (uint64_t i = v143; ; i -= 24)
                  {
                    std::string v267 = (char *)v319 + i;
                    if (v265)
                    {
                      *((void *)v267 + 4) = v265;
                      operator delete(v265);
                      *((void *)v267 + 3) = 0;
                      *((void *)v267 + 4) = 0;
                      *((void *)v267 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = 0;
                    }
                    *(_OWORD *)(v267 + 24) = *(_OWORD *)v267;
                    *((void *)v267 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" vs. ", 5) = *((void *)v267 + 2);
                    *((void *)v267 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
                    *((void *)v267 + 2) = 0;
                    *(void *)std::string v267 = 0;
                    if (!i)
                    {
                      unint64_t v9 = v319;
                      __n128 v247 = v319;
                      a2 = (uint64_t *)v312;
                      __n128 v259 = v318;
                      goto LABEL_317;
                    }
                    std::string v268 = operator new(v258 - v257);
                    memcpy(v268, v257, v258 - v257);
                    std::string::size_type v270 = *(uint64_t *)((char *)v319 + i - 24);
                    std::string::size_type v269 = *(uint64_t *)((char *)v319 + i - 16);
                    uint64_t v271 = v269 - v270;
                    if (v269 == v270)
                    {
                      operator delete(v268);
                      if (!v260) {
                        goto LABEL_346;
                      }
                    }
                    else
                    {
                      if ((v271 & 0x8000000000000000) != 0) {
                        goto LABEL_426;
                      }
                      uint64_t v335 = operator new(v269 - v270);
                      operator delete(v335);
                      operator delete(v268);
                      if (v260 <= v271)
                      {
LABEL_346:
                        unint64_t v9 = v319;
                        BOOL v144 = (uint64_t *)((char *)v319 + i);
                        a2 = (uint64_t *)v312;
                        __n128 v259 = v318;
                        uint64_t v263 = *(void **)((char *)v319 + i);
                        if (v263) {
                          goto LABEL_332;
                        }
LABEL_347:
                        __n128 v247 = v144;
                        goto LABEL_317;
                      }
                    }
                    unint64_t v265 = *(void **)v267;
                  }
                }
                *(_OWORD *)(v144 + 3) = *(_OWORD *)v144;
                v248[2] = v144[2];
                unint64_t *v144 = 0;
                v144[1] = 0;
                v144[2] = 0;
                __n128 v247 = v9;
                if (v144 != v9)
                {
                  v261 = *(v144 - 3);
                  uint64_t v262 = *(v144 - 2);
                  if (v262 != v261)
                  {
                    if (v262 - v261 < 0) {
LABEL_426:
                    }
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    uint64_t v334 = operator new(v262 - v261);
                    operator delete(v334);
                  }
                  uint64_t v263 = (void *)*v144;
                  if (!*v144) {
                    goto LABEL_347;
                  }
LABEL_332:
                  v144[1] = (uint64_t)v263;
                  operator delete(v263);
                  unint64_t *v144 = 0;
                  v144[1] = 0;
                  __n128 v247 = v144;
                  v144[2] = 0;
                }
LABEL_317:
                *__n128 v247 = (uint64_t)v257;
                v247[1] = (uint64_t)v258;
                v247[2] = v259;
              }
              signed __int32 v142 = v248 + 3;
              v143 += 24;
              BOOL v144 = v248;
              if (v248 + 3 == a2) {
                return;
              }
              continue;
            }
          }
          break;
        }
        __n128 v256 = v253 != v252;
        if (v252) {
          goto LABEL_324;
        }
        goto LABEL_325;
      }
      if (v9 == a2) {
        return;
      }
      unint64_t v272 = v9 + 3;
      while (2)
      {
        if (v272 == a2) {
          return;
        }
        int64_t v273 = v272;
        uint64_t v275 = (unsigned char *)v9[3];
        unint64_t v274 = (unsigned char *)v9[4];
        int v276 = v274 - v275;
        if (v274 == v275)
        {
          int v278 = 0;
          std::string::size_type v277 = 0;
          unint64_t v288 = v9[1];
          uint64_t v280 = v288 - *v9;
          if (v288 != *v9) {
            goto LABEL_357;
          }
        }
        else
        {
          if (v276 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v277 = (char *)operator new(v274 - v275);
          int v278 = &v277[4 * (v276 >> 2)];
          memcpy(v277, v275, v276);
          std::string::size_type v279 = v9[1];
          uint64_t v280 = v279 - *v9;
          if (v279 != *v9)
          {
LABEL_357:
            if ((v280 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            int v281 = operator new(v280);
            std::string::size_type v282 = v278 - v277 > v280;
            operator delete(v281);
            if (v277) {
LABEL_359:
            }
              operator delete(v277);
LABEL_360:
            if (v282)
            {
              std::string::size_type v283 = (const void *)*v273;
              int v284 = *((_OWORD *)v9 + 2);
              v273[1] = 0;
              v273[2] = 0;
              *int64_t v273 = 0;
              int v320 = v284;
              uint64_t v285 = v284 - (void)v283;
              if ((const void *)v284 != v283)
              {
                if ((v285 & 0x8000000000000000) != 0)
                {
                  *(_OWORD *)int64_t v273 = *(_OWORD *)v9;
                  v273[2] = v9[2];
                  *unint64_t v9 = 0;
                  v9[1] = 0;
                  v9[2] = 0;
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                int v289 = 0;
                while (1)
                {
                  if (v289)
                  {
                    v9[4] = (uint64_t)v289;
                    operator delete(v289);
                    void v9[3] = 0;
                    v9[4] = 0;
                    v9[5] = 0;
                  }
                  *(_OWORD *)(v9 + 3) = *(_OWORD *)v9;
                  v9[5] = v9[2];
                  v9[1] = 0;
                  v9[2] = 0;
                  *unint64_t v9 = 0;
                  int v290 = operator new(v285);
                  memcpy(v290, v283, v285);
                  std::string::size_type v291 = *(v9 - 3);
                  uint64_t v292 = *(v9 - 2);
                  uint64_t v293 = v292 - v291;
                  if (v292 == v291)
                  {
                    operator delete(v290);
                    if (!v285) {
                      goto LABEL_377;
                    }
                  }
                  else
                  {
                    if ((v293 & 0x8000000000000000) != 0) {
                      goto LABEL_423;
                    }
                    v337 = operator new(v292 - v291);
                    operator delete(v337);
                    operator delete(v290);
                    if (v285 <= v293) {
                      goto LABEL_377;
                    }
                  }
                  int v289 = (void *)*v9;
                  v9 -= 3;
                }
              }
              *(_OWORD *)int64_t v273 = *(_OWORD *)v9;
              v273[2] = v9[2];
              *unint64_t v9 = 0;
              v9[1] = 0;
              v9[2] = 0;
              unint64_t v286 = *(v9 - 3);
              int64_t v287 = *(v9 - 2);
              if (v287 != v286)
              {
                if (v287 - v286 < 0) {
LABEL_423:
                }
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v336 = operator new(v287 - v286);
                operator delete(v336);
              }
LABEL_377:
              unint64_t v294 = (void *)*v9;
              if (*v9)
              {
                v9[1] = (uint64_t)v294;
                operator delete(v294);
                *unint64_t v9 = 0;
                v9[1] = 0;
                v9[2] = 0;
              }
              *unint64_t v9 = (uint64_t)v283;
              *(_OWORD *)(v9 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v320;
            }
            unint64_t v272 = v273 + 3;
            unint64_t v9 = v273;
            continue;
          }
        }
        break;
      }
      std::string::size_type v282 = v278 != v277;
      if (v277) {
        goto LABEL_359;
      }
      goto LABEL_360;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return;
      }
      uint64_t v298 = (char *)a2 - (char *)v9;
      __n128 v145 = (v11 - 2) >> 1;
      int v316 = v145;
      while (2)
      {
        uint64_t v146 = v145;
        if (v316 < v145) {
          goto LABEL_208;
        }
        uint64_t v147 = (2 * v145) | 1;
        unint64_t v148 = &v319[3 * v147];
        if (2 * v145 + 2 >= (uint64_t)v11) {
          goto LABEL_218;
        }
        signed __int32 v149 = (const void *)*v148;
        signed __int32 v150 = v319[3 * v147 + 1];
        uint64_t v151 = v150 - *v148;
        if (v150 == *v148)
        {
          BOOL v153 = 0;
          signed __int32 v152 = 0;
          signed __int32 v195 = v148[3];
          BOOL v196 = v148[4];
          signed __int32 v156 = v148 + 3;
          signed __int32 v157 = v196 - v195;
          if (v196 != v195) {
            goto LABEL_214;
          }
        }
        else
        {
          if (v151 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          signed __int32 v152 = (char *)operator new(v150 - *v148);
          BOOL v153 = &v152[4 * (v151 >> 2)];
          memcpy(v152, v149, v151);
          BOOL v154 = v148[3];
          __n128 v155 = v148[4];
          signed __int32 v156 = v148 + 3;
          signed __int32 v157 = v155 - v154;
          if (v155 != v154)
          {
LABEL_214:
            if ((v157 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            BOOL v158 = operator new(v157);
            __n128 v159 = v153 - v152 > v157;
            operator delete(v158);
            if (v152)
            {
LABEL_216:
              operator delete(v152);
              if (v159) {
                goto LABEL_217;
              }
              goto LABEL_218;
            }
LABEL_261:
            if (v159)
            {
LABEL_217:
              unint64_t v148 = v156;
              uint64_t v147 = 2 * v146 + 2;
            }
LABEL_218:
            signed __int32 v161 = (const void *)*v148;
            signed __int32 v160 = v148[1];
            BOOL v162 = v160 - *v148;
            if (v160 == *v148)
            {
              __n128 v163 = 0;
              signed __int32 v164 = 0;
            }
            else
            {
              if (v162 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              signed __int32 v164 = (char *)operator new(v160 - *v148);
              __n128 v163 = &v164[4 * (v162 >> 2)];
              memcpy(v164, v161, v162);
            }
            BOOL v165 = &v319[3 * v146];
            std::string v166 = v165[1];
            uint64_t v167 = v166 - *v165;
            if (v166 == *v165)
            {
              uint64_t v169 = v163 != v164;
              if (v164) {
                goto LABEL_225;
              }
            }
            else
            {
              if ((v167 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              BOOL v168 = operator new(v166 - *v165);
              uint64_t v169 = v163 - v164 > v167;
              operator delete(v168);
              if (v164) {
LABEL_225:
              }
                operator delete(v164);
            }
            if (v169) {
              goto LABEL_208;
            }
            double v170 = 0;
            uint64_t v171 = *v165;
            double v172 = *(_OWORD *)(v165 + 1);
            v165[1] = 0;
            v165[2] = 0;
            *BOOL v165 = 0;
            int v300 = v172;
            uint64_t v310 = v172;
            size_t v302 = v146;
            __sza = v172 - v171;
LABEL_231:
            signed __int32 v174 = v148;
            if (v170)
            {
              v165[1] = (uint64_t)v170;
              operator delete(v170);
              *BOOL v165 = 0;
              v165[1] = 0;
              v165[2] = 0;
            }
            *(_OWORD *)BOOL v165 = *(_OWORD *)v148;
            v165[2] = v148[2];
            *unint64_t v148 = 0;
            v148[1] = 0;
            v148[2] = 0;
            if (v316 < v147) {
              goto LABEL_207;
            }
            BOOL v175 = (2 * v147) | 1;
            unint64_t v148 = &v319[3 * v175];
            unint64_t v176 = 2 * v147 + 2;
            uint64_t v177 = v11;
            if (v176 >= (uint64_t)v11)
            {
              uint64_t v147 = (2 * v147) | 1;
              goto LABEL_247;
            }
            long long v178 = (const void *)*v148;
            signed __int32 v179 = v319[3 * v175 + 1];
            BOOL v180 = v179 - *v148;
            if (v179 == *v148)
            {
              int64_t v182 = 0;
              BOOL v181 = 0;
              signed __int32 v188 = v148[3];
              uint64_t v189 = v148[4];
              uint64_t v185 = v148 + 3;
              uint64_t v186 = v189 - v188;
              if (v189 != v188) {
                goto LABEL_239;
              }
            }
            else
            {
              if (v180 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              BOOL v181 = (char *)operator new(v179 - *v148);
              int64_t v182 = &v181[4 * (v180 >> 2)];
              memcpy(v181, v178, v180);
              int64_t v183 = v148[3];
              int64_t v184 = v148[4];
              uint64_t v185 = v148 + 3;
              uint64_t v186 = v184 - v183;
              if (v184 != v183)
              {
LABEL_239:
                if ((v186 & 0x8000000000000000) != 0) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                int v328 = operator new(v186);
                BOOL v187 = v182 - v181 > v186;
                operator delete(v328);
                if (v181)
                {
LABEL_241:
                  operator delete(v181);
                  uint64_t v147 = v175;
                  if (!v187)
                  {
LABEL_247:
                    signed __int32 v191 = (const void *)*v148;
                    signed __int32 v190 = v148[1];
                    BOOL v192 = v190 - *v148;
                    if (v190 == *v148)
                    {
                      signed __int32 v194 = 0;
                      unint64_t v193 = 0;
                      unint64_t v11 = v177;
                      if (v310 == v171) {
                        goto LABEL_228;
                      }
                    }
                    else
                    {
                      if (v192 < 0) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v193 = (char *)operator new(v190 - *v148);
                      signed __int32 v194 = &v193[4 * (v192 >> 2)];
                      memcpy(v193, v191, v192);
                      unint64_t v11 = v177;
                      if (v310 == v171)
                      {
LABEL_228:
                        signed __int32 v173 = v194 != v193;
                        if (v193) {
                          goto LABEL_229;
                        }
                        goto LABEL_230;
                      }
                    }
                    if ((__sza & 0x8000000000000000) != 0) {
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    }
                    v325 = operator new(__sza);
                    signed __int32 v173 = v194 - v193 > __sza;
                    operator delete(v325);
                    if (v193) {
LABEL_229:
                    }
                      operator delete(v193);
LABEL_230:
                    double v170 = (void *)*v174;
                    BOOL v165 = v174;
                    if (v173)
                    {
                      if (v170)
                      {
                        v174[1] = (uint64_t)v170;
                        operator delete(v170);
                        operations_research::sat::CpModelBuilder *v174 = 0;
                        v174[1] = 0;
                        v174[2] = 0;
                      }
LABEL_207:
                      operations_research::sat::CpModelBuilder *v174 = v171;
                      *(_OWORD *)(v174 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v300;
                      uint64_t v146 = v302;
LABEL_208:
                      __n128 v145 = v146 - 1;
                      if (v146) {
                        continue;
                      }
                      BOOL v197 = v298 / 0x18;
                      BOOL v198 = v319;
                      uint64_t v199 = v312;
                      while (2)
                      {
                        int v313 = v199;
                        size_t v317 = v197;
                        uint64_t v200 = 0;
                        uint64_t v201 = *v198;
                        uint64_t v311 = v198[1];
                        __szb = v198[2];
                        v198[1] = 0;
                        v198[2] = 0;
                        double v202 = (v197 - 2) >> 1;
                        uint64_t v203 = v198;
                        uint64_t *v198 = 0;
                        uint64_t v204 = v197;
LABEL_268:
                        uint64_t v205 = v200 + 1;
                        uint64_t v206 = &v203[3 * v200 + 3];
                        uint64_t v207 = 2 * v200;
                        uint64_t v200 = (2 * v200) | 1;
                        int v208 = v207 + 2;
                        if (v207 + 2 >= v204) {
                          goto LABEL_276;
                        }
                        BOOL v209 = (const void *)*v206;
                        uint64_t v210 = v203[3 * v205 + 1];
                        unint64_t v211 = v210 - *v206;
                        if (v210 == *v206)
                        {
                          signed __int32 v213 = 0;
                          uint64_t v212 = 0;
                          signed __int32 v220 = v206[3];
                          BOOL v221 = v206[4];
                          uint64_t v216 = v206 + 3;
                          double v217 = v221 - v220;
                          if (v221 != v220) {
                            goto LABEL_272;
                          }
                        }
                        else
                        {
                          if (v211 < 0) {
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v212 = (char *)operator new(v210 - *v206);
                          signed __int32 v213 = &v212[4 * (v211 >> 2)];
                          memcpy(v212, v209, v211);
                          signed __int32 v214 = v206[3];
                          BOOL v215 = v206[4];
                          uint64_t v216 = v206 + 3;
                          double v217 = v215 - v214;
                          if (v215 != v214)
                          {
LABEL_272:
                            if ((v217 & 0x8000000000000000) != 0) {
                              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                            }
                            size_t v340 = operator new(v217);
                            BOOL v218 = v213 - v212 > v217;
                            operator delete(v340);
                            uint64_t v204 = v317;
                            if (v212)
                            {
LABEL_274:
                              operator delete(v212);
                              if (v218) {
                                goto LABEL_275;
                              }
                              goto LABEL_276;
                            }
LABEL_280:
                            if (v218)
                            {
LABEL_275:
                              uint64_t v206 = v216;
                              uint64_t v200 = v208;
                            }
LABEL_276:
                            __n128 v219 = (void *)*v203;
                            if (*v203)
                            {
                              v203[1] = (uint64_t)v219;
                              operator delete(v219);
                              operations_research::sat::CpModelBuilder *v203 = 0;
                              v203[1] = 0;
                              v203[2] = 0;
                            }
                            *(_OWORD *)uint64_t v203 = *(_OWORD *)v206;
                            v203[2] = v206[2];
                            char *v206 = 0;
                            v206[1] = 0;
                            v206[2] = 0;
                            uint64_t v203 = v206;
                            if (v200 > v202)
                            {
                              double v222 = v313 - 24;
                              signed __int32 v223 = (void *)*v206;
                              if (v206 == (uint64_t *)(v313 - 24))
                              {
                                BOOL v198 = v319;
                                if (v223)
                                {
                                  v206[1] = (uint64_t)v223;
                                  operator delete(v223);
                                  char *v206 = 0;
                                  v206[1] = 0;
                                  v206[2] = 0;
                                }
                                char *v206 = v201;
                                v206[1] = v311;
                                v206[2] = __szb;
                              }
                              else
                              {
                                BOOL v198 = v319;
                                if (v223)
                                {
                                  v206[1] = (uint64_t)v223;
                                  operator delete(v223);
                                  char *v206 = 0;
                                  v206[1] = 0;
                                  v206[2] = 0;
                                }
                                *(_OWORD *)uint64_t v206 = *(_OWORD *)(v313 - 24);
                                v206[2] = *(void *)(v313 - 8);
                                *(void *)(v313 - 24) = v201;
                                *(void *)(v313 - 16) = v311;
                                *(void *)(v313 - 8) = __szb;
                                signed __int32 v224 = (char *)v206 - (char *)v319 + 24;
                                if (v224 >= 25)
                                {
                                  BOOL v225 = (v224 / 0x18uLL - 2) >> 1;
                                  unint64_t v226 = &v319[3 * v225];
                                  signed __int32 v228 = (const void *)*v226;
                                  int64_t v227 = v226[1];
                                  signed __int32 v229 = v227 - *v226;
                                  if (v227 == *v226)
                                  {
                                    BOOL v231 = 0;
                                    BOOL v230 = 0;
                                    __n128 v246 = v206[1];
                                    signed __int32 v233 = v246 - *v206;
                                    if (v246 != *v206) {
                                      goto LABEL_289;
                                    }
                                  }
                                  else
                                  {
                                    if (v229 < 0) {
                                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                    }
                                    BOOL v230 = (char *)operator new(v227 - *v226);
                                    BOOL v231 = &v230[4 * (v229 >> 2)];
                                    memcpy(v230, v228, v229);
                                    signed __int32 v232 = v206[1];
                                    signed __int32 v233 = v232 - *v206;
                                    if (v232 != *v206)
                                    {
LABEL_289:
                                      if ((v233 & 0x8000000000000000) != 0) {
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                      }
                                      BOOL v234 = v231 - v230 > v233;
                                      if (v230) {
LABEL_291:
                                      }
                                        operator delete(v230);
LABEL_292:
                                      if (!v234) {
                                        goto LABEL_265;
                                      }
                                      v304 = v313 - 24;
                                      __n128 v235 = 0;
                                      __n128 v236 = (const void *)*v206;
                                      __n128 v237 = *(_OWORD *)(v206 + 1);
                                      v206[1] = 0;
                                      v206[2] = 0;
                                      char *v206 = 0;
                                      *(_OWORD *)__szc = v237;
                                      int v314 = (const void *)v237;
                                      __n128 v238 = v237 - (void)v236;
                                      while (2)
                                      {
                                        __n128 v240 = v226;
                                        if (v235)
                                        {
                                          v206[1] = (uint64_t)v235;
                                          operator delete(v235);
                                          char *v206 = 0;
                                          v206[1] = 0;
                                          v206[2] = 0;
                                        }
                                        *(_OWORD *)uint64_t v206 = *(_OWORD *)v226;
                                        v206[2] = v226[2];
                                        *unint64_t v226 = 0;
                                        v226[1] = 0;
                                        v226[2] = 0;
                                        if (!v225)
                                        {
LABEL_315:
                                          *__n128 v240 = (uint64_t)v236;
                                          *(_OWORD *)(v240 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(_OWORD *)__szc;
                                          double v222 = v304;
                                          goto LABEL_265;
                                        }
                                        BOOL v225 = (v225 - 1) >> 1;
                                        unint64_t v226 = &v319[3 * v225];
                                        __n128 v242 = (const void *)*v226;
                                        __n128 v241 = v226[1];
                                        __n128 v243 = v241 - *v226;
                                        if (v241 == *v226)
                                        {
                                          __n128 v245 = 0;
                                          __n128 v244 = 0;
                                          if (v314 == v236) {
                                            goto LABEL_294;
                                          }
                                        }
                                        else
                                        {
                                          if (v243 < 0) {
                                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                          }
                                          __n128 v244 = (char *)operator new(v241 - *v226);
                                          __n128 v245 = &v244[4 * (v243 >> 2)];
                                          memcpy(v244, v242, v243);
                                          if (v314 == v236)
                                          {
LABEL_294:
                                            __n128 v239 = v245 != v244;
                                            if (v244) {
                                              goto LABEL_295;
                                            }
                                            goto LABEL_296;
                                          }
                                        }
                                        if ((v238 & 0x8000000000000000) != 0) {
                                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                        }
                                        uint64_t v333 = operator new(v238);
                                        __n128 v239 = v245 - v244 > v238;
                                        operator delete(v333);
                                        if (v244) {
LABEL_295:
                                        }
                                          operator delete(v244);
LABEL_296:
                                        __n128 v235 = (void *)*v240;
                                        uint64_t v206 = v240;
                                        if (!v239)
                                        {
                                          if (v235)
                                          {
                                            v240[1] = (uint64_t)v235;
                                            operator delete(v235);
                                            *__n128 v240 = 0;
                                            v240[1] = 0;
                                            v240[2] = 0;
                                          }
                                          goto LABEL_315;
                                        }
                                        continue;
                                      }
                                    }
                                  }
                                  BOOL v234 = v231 != v230;
                                  if (v230) {
                                    goto LABEL_291;
                                  }
                                  goto LABEL_292;
                                }
                              }
LABEL_265:
                              uint64_t v199 = v222;
                              BOOL v197 = v317 - 1;
                              if (v317 <= 2) {
                                return;
                              }
                              continue;
                            }
                            goto LABEL_268;
                          }
                        }
                        break;
                      }
                      BOOL v218 = v213 != v212;
                      uint64_t v204 = v317;
                      if (v212) {
                        goto LABEL_274;
                      }
                      goto LABEL_280;
                    }
                    goto LABEL_231;
                  }
LABEL_246:
                  unint64_t v148 = v185;
                  uint64_t v147 = v176;
                  goto LABEL_247;
                }
LABEL_245:
                uint64_t v147 = v175;
                if (!v187) {
                  goto LABEL_247;
                }
                goto LABEL_246;
              }
            }
            BOOL v187 = v182 != v181;
            if (v181) {
              goto LABEL_241;
            }
            goto LABEL_245;
          }
        }
        break;
      }
      __n128 v159 = v153 != v152;
      if (v152) {
        goto LABEL_216;
      }
      goto LABEL_261;
    }
    unint64_t v12 = &v9[3 * (v11 >> 1)];
    if ((unint64_t)v10 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9, &v9[3 * (v11 >> 1)], v301);
      unint64_t v13 = 3 * (v11 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9 + 3, &v9[v13 - 3], v297);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9 + 6, &v9[v13 + 3], v296);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(&v9[v13 - 3], &v9[v13], &v9[v13 + 3]);
      uint64_t v14 = *(_OWORD *)v9;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v12;
      *(_OWORD *)unint64_t v12 = v14;
      uint64_t v15 = v9[2];
      v9[2] = v9[v13 + 2];
      v9[v13 + 2] = v15;
      --a3;
      if (a4) {
        goto LABEL_18;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(&v9[3 * (v11 >> 1)], v9, v301);
      --a3;
      if (a4) {
        goto LABEL_18;
      }
    }
    unint64_t v17 = (unsigned char *)*(v9 - 3);
    uint64_t v16 = (unsigned char *)*(v9 - 2);
    unint64_t v18 = v16 - v17;
    if (v16 == v17)
    {
      signed __int32 v20 = 0;
      signed __int32 v19 = 0;
      BOOL v74 = v9[1];
      signed __int32 v22 = v74 - *v9;
      if (v74 == *v9) {
        goto LABEL_98;
      }
    }
    else
    {
      if (v18 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      signed __int32 v19 = (char *)operator new(v16 - v17);
      signed __int32 v20 = &v19[4 * (v18 >> 2)];
      memcpy(v19, v17, v18);
      signed __int32 v21 = v9[1];
      signed __int32 v22 = v21 - *v9;
      if (v21 == *v9)
      {
LABEL_98:
        BOOL v24 = v20 != v19;
        if (!v19) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    if ((v22 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v23 = operator new(v22);
    BOOL v24 = v20 - v19 > v22;
    operator delete(v23);
    if (!v19) {
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v19);
LABEL_17:
    if (v24)
    {
LABEL_18:
      BOOL v25 = 0;
      signed __int32 v26 = *v9;
      signed __int32 v27 = *(_OWORD *)(v9 + 1);
      v9[1] = 0;
      v9[2] = 0;
      *unint64_t v9 = 0;
      uint64_t v309 = v27;
      BOOL v28 = v27;
      BOOL v29 = v27 - v26;
      do
      {
        BOOL v32 = (unsigned char *)v319[v25 + 3];
        BOOL v31 = (unsigned char *)v319[v25 + 4];
        signed __int32 v33 = v31 - v32;
        if (v31 == v32)
        {
          BOOL v35 = 0;
          signed __int32 v34 = 0;
          if (v28 == v26) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v33 < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          signed __int32 v34 = (char *)operator new(v31 - v32);
          BOOL v35 = &v34[4 * (v33 >> 2)];
          memcpy(v34, v32, v33);
          if (v28 == v26)
          {
LABEL_19:
            BOOL v30 = v35 != v34;
            if (!v34) {
              goto LABEL_21;
            }
LABEL_20:
            operator delete(v34);
            goto LABEL_21;
          }
        }
        if ((v29 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        int v338 = operator new(v29);
        BOOL v30 = v35 - v34 > v29;
        operator delete(v338);
        if (v34) {
          goto LABEL_20;
        }
LABEL_21:
        v25 += 3;
      }
      while (v30);
      unint64_t v36 = &v319[v25];
      signed __int32 v37 = (uint64_t *)v312;
      if (v25 != 3)
      {
        while (1)
        {
          signed __int32 v40 = (unsigned char *)*(v37 - 3);
          signed __int32 v41 = v37 - 3;
          BOOL v42 = (unsigned char *)*(v37 - 2);
          BOOL v43 = v42 - v40;
          if (v42 == v40)
          {
            BOOL v45 = 0;
            signed __int32 v44 = 0;
            signed __int32 v37 = v41;
            if (v28 != v26) {
              goto LABEL_41;
            }
          }
          else
          {
            if (v43 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            signed __int32 v44 = (char *)operator new(v42 - v40);
            BOOL v45 = &v44[4 * (v43 >> 2)];
            memcpy(v44, v40, v43);
            signed __int32 v37 = v41;
            if (v28 != v26)
            {
LABEL_41:
              if ((v29 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              int v329 = operator new(v29);
              unint64_t v39 = v45 - v44 > v29;
              operator delete(v329);
              if (!v44) {
                goto LABEL_35;
              }
LABEL_34:
              operator delete(v44);
              goto LABEL_35;
            }
          }
          unint64_t v39 = v45 != v44;
          if (v44) {
            goto LABEL_34;
          }
LABEL_35:
          if (v39) {
            goto LABEL_60;
          }
        }
      }
      signed __int32 v37 = (uint64_t *)v312;
      if ((unint64_t)v36 < v312)
      {
        for (uint64_t j = v301; ; uint64_t j = v37 - 3)
        {
          signed __int32 v48 = (const void *)*j;
          BOOL v49 = j;
          __n128 v50 = j[1] - *j;
          if (v50)
          {
            if (v50 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            signed __int32 v51 = (char *)operator new(v50);
            BOOL v52 = &v51[4 * (v50 >> 2)];
            memcpy(v51, v48, v50);
            signed __int32 v37 = v49;
            if (v28 == v26)
            {
LABEL_44:
              BOOL v46 = v52 == v51;
              if (v51) {
                goto LABEL_45;
              }
              goto LABEL_57;
            }
          }
          else
          {
            BOOL v52 = 0;
            signed __int32 v51 = 0;
            signed __int32 v37 = v49;
            if (v28 == v26) {
              goto LABEL_44;
            }
          }
          if ((v29 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v330 = operator new(v29);
          BOOL v46 = v52 - v51 <= v29;
          operator delete(v330);
          if (v51)
          {
LABEL_45:
            operator delete(v51);
            if (v36 >= v37 || !v46) {
              break;
            }
            continue;
          }
LABEL_57:
          signed __int32 v53 = !v46;
          if (v36 >= v37) {
            signed __int32 v53 = 1;
          }
          if (v53) {
            break;
          }
        }
      }
LABEL_60:
      size_t v303 = v37;
      __sz = v36;
      unint64_t v9 = v36;
      if (v36 < v37)
      {
        __n128 v54 = v37;
        do
        {
          signed __int32 v55 = *v9;
          *unint64_t v9 = *v54;
          *__n128 v54 = v55;
          BOOL v56 = v9[1];
          v9[1] = v54[1];
          v54[1] = v56;
          uint64_t v57 = v9[2];
          v9[2] = v54[2];
          v54[2] = v57;
          do
          {
            uint64_t v60 = (unsigned char *)v9[3];
            uint64_t v59 = (unsigned char *)v9[4];
            v9 += 3;
            signed __int32 v61 = v59 - v60;
            if (v59 == v60)
            {
              BOOL v63 = 0;
              signed __int32 v62 = 0;
              if (v28 == v26) {
                goto LABEL_64;
              }
            }
            else
            {
              if (v61 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              signed __int32 v62 = (char *)operator new(v59 - v60);
              BOOL v63 = &v62[4 * (v61 >> 2)];
              memcpy(v62, v60, v61);
              if (v28 == v26)
              {
LABEL_64:
                signed __int32 v58 = v63 != v62;
                if (!v62) {
                  continue;
                }
LABEL_65:
                operator delete(v62);
                continue;
              }
            }
            if ((v29 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            v326 = operator new(v29);
            signed __int32 v58 = v63 - v62 > v29;
            operator delete(v326);
            if (v62) {
              goto LABEL_65;
            }
          }
          while (v58);
          do
          {
            BOOL v66 = (unsigned char *)*(v54 - 3);
            signed __int32 v65 = (unsigned char *)*(v54 - 2);
            v54 -= 3;
            BOOL v67 = v65 - v66;
            if (v65 == v66)
            {
              signed __int32 v69 = 0;
              __n128 v68 = 0;
              if (v28 == v26) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v67 < 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              __n128 v68 = (char *)operator new(v65 - v66);
              signed __int32 v69 = &v68[4 * (v67 >> 2)];
              memcpy(v68, v66, v67);
              if (v28 == v26)
              {
LABEL_75:
                BOOL v64 = v69 != v68;
                if (!v68) {
                  continue;
                }
LABEL_76:
                operator delete(v68);
                continue;
              }
            }
            if ((v29 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v323 = operator new(v29);
            BOOL v64 = v69 - v68 > v29;
            operator delete(v323);
            if (v68) {
              goto LABEL_76;
            }
          }
          while (!v64);
        }
        while (v9 < v54);
      }
      a1 = v319;
      BOOL v70 = (void *)*v319;
      if (v9 - 3 == v319)
      {
        a2 = (uint64_t *)v312;
        __n128 v72 = v303;
        __n128 v71 = __sz;
        if (v70)
        {
          *(v9 - 2) = (uint64_t)v70;
          operator delete(v70);
          goto LABEL_92;
        }
      }
      else
      {
        a2 = (uint64_t *)v312;
        if (v70)
        {
          v319[1] = (uint64_t)v70;
          operator delete(v70);
          const void *v319 = 0;
          v319[1] = 0;
          v319[2] = 0;
        }
        *(_OWORD *)int v319 = *(_OWORD *)(v9 - 3);
        v319[2] = *(v9 - 1);
        __n128 v72 = v303;
        __n128 v71 = __sz;
LABEL_92:
        *(v9 - 3) = 0;
        *(v9 - 2) = 0;
        *(v9 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
      }
      *(v9 - 3) = v26;
      *((_OWORD *)v9 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v309;
      if (v71 < v72)
      {
LABEL_96:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(v319, v9 - 3, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        signed __int32 v73 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v319, v9 - 3);
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9, a2))
        {
          a2 = v9 - 3;
          if (v73) {
            return;
          }
          goto LABEL_1;
        }
        if (!v73) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      signed __int32 v75 = (const void *)*v9;
      signed __int32 v76 = *(_OWORD *)(v9 + 1);
      v9[1] = 0;
      v9[2] = 0;
      *unint64_t v9 = 0;
      size_t v315 = v76;
      BOOL v77 = (const void *)v76;
      BOOL v78 = v76 - (void)v75;
      BOOL v79 = (uint64_t)(v76 - (void)v75) >> 2;
      if ((const void *)v76 == v75)
      {
        BOOL v81 = 0;
        BOOL v80 = 0;
        signed __int32 v129 = *(void *)(v312 - 24);
        BOOL v130 = *(void *)(v312 - 16);
        uint64_t v84 = v130 - v129;
        if (v130 == v129) {
          goto LABEL_174;
        }
      }
      else
      {
        if ((v78 & 0x8000000000000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        BOOL v80 = (char *)operator new(v76 - (void)v75);
        BOOL v81 = &v80[4 * v79];
        memcpy(v80, v75, v78);
        signed __int32 v82 = *(void *)(v312 - 24);
        BOOL v83 = *(void *)(v312 - 16);
        uint64_t v84 = v83 - v82;
        if (v83 == v82)
        {
LABEL_174:
          signed __int32 v85 = v81 != v80;
          if (v80) {
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if ((v84 & 0x8000000000000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v339 = operator new(v84);
      signed __int32 v85 = v81 - v80 > v84;
      operator delete(v339);
      if (v80) {
LABEL_105:
      }
        operator delete(v80);
LABEL_106:
      if (v85)
      {
        unint64_t v9 = v319;
        while (1)
        {
          if (v77 == v75)
          {
            uint64_t v88 = 0;
            BOOL v87 = 0;
            BOOL v92 = v9[3];
            BOOL v93 = v9[4];
            signed __int32 v91 = v93 - v92;
            if (v93 != v92) {
              goto LABEL_116;
            }
          }
          else
          {
            if ((v78 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            BOOL v87 = (char *)operator new(v78);
            uint64_t v88 = &v87[4 * v79];
            memcpy(v87, v75, v78);
            unint64_t v89 = v9[3];
            signed __int32 v90 = v9[4];
            signed __int32 v91 = v90 - v89;
            if (v90 != v89)
            {
LABEL_116:
              if ((v91 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v331 = operator new(v91);
              BOOL v86 = v88 - v87 > v91;
              operator delete(v331);
              if (!v87) {
                goto LABEL_110;
              }
LABEL_109:
              operator delete(v87);
              goto LABEL_110;
            }
          }
          BOOL v86 = v88 != v87;
          if (v87) {
            goto LABEL_109;
          }
LABEL_110:
          v9 += 3;
          if (v86) {
            goto LABEL_132;
          }
        }
      }
      unint64_t v9 = v319 + 3;
      if ((unint64_t)(v319 + 3) < v312)
      {
        while (1)
        {
          if (v77 == v75)
          {
            signed __int32 v95 = 0;
            signed __int32 v94 = 0;
            signed __int32 v99 = v9[1];
            BOOL v97 = v99 - *v9;
            if (v99 != *v9) {
              goto LABEL_123;
            }
          }
          else
          {
            if ((v78 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            signed __int32 v94 = (char *)operator new(v78);
            signed __int32 v95 = &v94[4 * v79];
            memcpy(v94, v75, v78);
            BOOL v96 = v9[1];
            BOOL v97 = v96 - *v9;
            if (v96 != *v9)
            {
LABEL_123:
              if ((v97 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v332 = operator new(v97);
              uint64_t v98 = v95 - v94 > v97;
              operator delete(v332);
              if (!v94) {
                goto LABEL_126;
              }
LABEL_125:
              operator delete(v94);
              goto LABEL_126;
            }
          }
          uint64_t v98 = v95 != v94;
          if (v94) {
            goto LABEL_125;
          }
LABEL_126:
          if (!v98)
          {
            v9 += 3;
            if ((unint64_t)v9 < v312) {
              continue;
            }
          }
          break;
        }
      }
LABEL_132:
      signed __int32 v100 = (uint64_t *)v312;
      if ((unint64_t)v9 < v312)
      {
        signed __int32 v100 = (uint64_t *)v312;
        do
        {
          if (v77 == v75)
          {
            signed __int32 v103 = 0;
            BOOL v102 = 0;
            BOOL v107 = *(v100 - 3);
            __n128 v108 = *(v100 - 2);
            BOOL v106 = v108 - v107;
            if (v108 != v107) {
              goto LABEL_142;
            }
          }
          else
          {
            if ((v78 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            BOOL v102 = (char *)operator new(v78);
            signed __int32 v103 = &v102[4 * v79];
            memcpy(v102, v75, v78);
            signed __int32 v104 = *(v100 - 3);
            BOOL v105 = *(v100 - 2);
            BOOL v106 = v105 - v104;
            if (v105 != v104)
            {
LABEL_142:
              if ((v106 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              int v327 = operator new(v106);
              BOOL v101 = v103 - v102 > v106;
              operator delete(v327);
              if (!v102) {
                goto LABEL_136;
              }
LABEL_135:
              operator delete(v102);
              goto LABEL_136;
            }
          }
          BOOL v101 = v103 != v102;
          if (v102) {
            goto LABEL_135;
          }
LABEL_136:
          v100 -= 3;
        }
        while (v101);
      }
LABEL_145:
      if (v9 < v100)
      {
        signed __int32 v109 = *v9;
        *unint64_t v9 = *v100;
        char *v100 = v109;
        BOOL v110 = v9[1];
        v9[1] = v100[1];
        v100[1] = v110;
        signed __int32 v111 = v9[2];
        v9[2] = v100[2];
        v100[2] = v111;
        while (1)
        {
          if (v77 == v75)
          {
            BOOL v114 = 0;
            BOOL v113 = 0;
            BOOL v118 = v9[3];
            uint64_t v119 = v9[4];
            BOOL v117 = v119 - v118;
            if (v119 != v118) {
              goto LABEL_155;
            }
          }
          else
          {
            if ((v78 & 0x8000000000000000) != 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            BOOL v113 = (char *)operator new(v78);
            BOOL v114 = &v113[4 * v79];
            memcpy(v113, v75, v78);
            long long v115 = v9[3];
            signed __int32 v116 = v9[4];
            BOOL v117 = v116 - v115;
            if (v116 != v115)
            {
LABEL_155:
              if ((v117 & 0x8000000000000000) != 0) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              size_t v324 = operator new(v117);
              signed __int32 v112 = v114 - v113 > v117;
              operator delete(v324);
              if (!v113) {
                goto LABEL_149;
              }
LABEL_148:
              operator delete(v113);
              goto LABEL_149;
            }
          }
          signed __int32 v112 = v114 != v113;
          if (v113) {
            goto LABEL_148;
          }
LABEL_149:
          v9 += 3;
          if (v112)
          {
            while (1)
            {
              if (v77 == v75)
              {
                BOOL v122 = 0;
                signed __int32 v121 = 0;
                BOOL v126 = *(v100 - 3);
                BOOL v127 = *(v100 - 2);
                signed __int32 v125 = v127 - v126;
                if (v127 != v126) {
                  goto LABEL_166;
                }
              }
              else
              {
                if ((v78 & 0x8000000000000000) != 0) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                signed __int32 v121 = (char *)operator new(v78);
                BOOL v122 = &v121[4 * v79];
                memcpy(v121, v75, v78);
                BOOL v123 = *(v100 - 3);
                signed __int32 v124 = *(v100 - 2);
                signed __int32 v125 = v124 - v123;
                if (v124 != v123)
                {
LABEL_166:
                  if ((v125 & 0x8000000000000000) != 0) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v322 = operator new(v125);
                  signed __int32 v120 = v122 - v121 > v125;
                  operator delete(v322);
                  if (!v121) {
                    goto LABEL_160;
                  }
LABEL_159:
                  operator delete(v121);
                  goto LABEL_160;
                }
              }
              signed __int32 v120 = v122 != v121;
              if (v121) {
                goto LABEL_159;
              }
LABEL_160:
              v100 -= 3;
              if (!v120) {
                goto LABEL_145;
              }
            }
          }
        }
      }
      signed __int32 v128 = (void *)*v319;
      uint64_t v4 = v9 - 3 >= v319;
      BOOL v5 = v9 - 3 == v319;
      if (v9 - 3 == v319)
      {
        a2 = (uint64_t *)v312;
        if (!v128) {
          goto LABEL_179;
        }
        *(v9 - 2) = (uint64_t)v128;
        operator delete(v128);
      }
      else
      {
        a2 = (uint64_t *)v312;
        if (v128)
        {
          v319[1] = (uint64_t)v128;
          operator delete(v128);
          const void *v319 = 0;
          v319[1] = 0;
          v319[2] = 0;
        }
        *(_OWORD *)int v319 = *(_OWORD *)(v9 - 3);
        v319[2] = *(v9 - 1);
      }
      *(v9 - 3) = 0;
      *(v9 - 2) = 0;
      *(v9 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
LABEL_179:
      a4 = 0;
      *(v9 - 3) = (uint64_t)v75;
      *((_OWORD *)v9 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v315;
    }
  }
  switch(v11)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      signed __int32 v132 = (unsigned char *)*(a2 - 3);
      BOOL v131 = (unsigned char *)*(a2 - 2);
      signed __int32 v133 = v131 - v132;
      if (v131 == v132)
      {
        BOOL v135 = 0;
        unint64_t v134 = 0;
        uint64_t v295 = v9[1];
        uint64_t v137 = v295 - *v9;
        if (v295 != *v9) {
          goto LABEL_190;
        }
      }
      else
      {
        if (v133 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v134 = (char *)operator new(v131 - v132);
        BOOL v135 = &v134[4 * (v133 >> 2)];
        memcpy(v134, v132, v133);
        BOOL v136 = v9[1];
        uint64_t v137 = v136 - *v9;
        if (v136 != *v9)
        {
LABEL_190:
          if ((v137 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v321 = operator new(v137);
          signed __int32 v138 = v135 - v134 > v137;
          operator delete(v321);
          if (v134) {
            goto LABEL_192;
          }
          goto LABEL_193;
        }
      }
      signed __int32 v138 = v135 != v134;
      if (v134) {
LABEL_192:
      }
        operator delete(v134);
LABEL_193:
      if (v138)
      {
        signed __int32 v139 = *v9;
        *unint64_t v9 = *(a2 - 3);
        *(a2 - 3) = v139;
        BOOL v140 = v9[1];
        v9[1] = *(a2 - 2);
        *(a2 - 2) = v140;
        uint64_t v141 = v9[2];
        v9[2] = *(a2 - 1);
        *(a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v141;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9, v9 + 3, v301);
      return;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v9, v9 + 3, v9 + 6, v301);
      return;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(v9, v9 + 3, v9 + 6, v9 + 9, v301);
      return;
    default:
      JUMPOUT(0);
  }
}

  unint64_t v11 = (long long *)(a2 - 80);
  unint64_t v12 = (long long *)a1;
LABEL_2:
  unint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 4);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          BOOL v46 = *((_DWORD *)a2 - 18);
          __n128 v47 = *(_DWORD *)(a1 + 8);
          if (v46 < v47) {
            goto LABEL_40;
          }
          if (v47 >= v46)
          {
            uint64_t v60 = *((double *)a2 - 8);
            signed __int32 v61 = *(double *)(a1 + 16);
            if (v60 < v61) {
              goto LABEL_40;
            }
            if (v61 >= v60)
            {
              signed __int32 v62 = *((double *)a2 - 7);
              BOOL v63 = *(double *)(a1 + 24);
              if (v62 < v63) {
                goto LABEL_40;
              }
              if (v63 >= v62)
              {
                BOOL v64 = *((double *)a2 - 6);
                signed __int32 v65 = *(double *)(a1 + 32);
                if (v64 < v65) {
                  goto LABEL_40;
                }
                if (v65 >= v64)
                {
                  BOOL v66 = *((void *)a2 - 5);
                  BOOL v67 = *(void *)(a1 + 40);
                  if (v66 < v67) {
                    goto LABEL_40;
                  }
                  if (v67 >= v66)
                  {
                    __n128 v68 = *((void *)a2 - 4);
                    signed __int32 v69 = *(void *)(a1 + 48);
                    if (v68 < v69
                      || v69 >= v68
                      && ((BOOL v70 = *((void *)a2 - 3), v71 = *(void *)(a1 + 56), v70 < v71)
                       || v71 >= v70
                       && ((__n128 v72 = *((void *)a2 - 2), v73 = *(void *)(a1 + 64), v72 < v73)
                        || v73 >= v72
                        && ((BOOL v74 = *((void *)a2 - 1), v75 = *(void *)(a1 + 72), v74 < v75)
                         || v75 >= v74 && *(void *)v11 < *(void *)a1))))
                    {
LABEL_40:
                      BOOL v77 = *(_OWORD *)a1;
                      BOOL v86 = *(_OWORD *)(a1 + 48);
                      unint64_t v89 = *(_OWORD *)(a1 + 64);
                      BOOL v80 = *(_OWORD *)(a1 + 16);
                      BOOL v83 = *(_OWORD *)(a1 + 32);
                      signed __int32 v48 = *((_OWORD *)a2 - 1);
                      __n128 v50 = *((_OWORD *)a2 - 4);
                      BOOL v49 = *((_OWORD *)a2 - 3);
                      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 - 2);
                      *(_OWORD *)(a1 + 64) = v48;
                      *(_OWORD *)(a1 + 16) = v50;
                      *(_OWORD *)(a1 + 32) = v49;
                      *(_OWORD *)a1 = *v11;
                      *((_OWORD *)a2 - 3) = v83;
                      *((_OWORD *)a2 - 2) = v86;
                      *((_OWORD *)a2 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v89;
                      *unint64_t v11 = v77;
                      *((_OWORD *)a2 - 4) = v80;
                    }
                  }
                }
              }
            }
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)a1, (long long *)(a1 + 80), (long long *)a2 - 5);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, (uint64_t)(a2 - 80));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a1 + 240, (uint64_t)(a2 - 80));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1919)
    {
      if (a5)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, (uint64_t)a2);
      }
      else
      {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((void *)a1, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (long long *)(a1 + 80 * (v16 >> 1));
    if ((unint64_t)v15 < 0x2801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v18, (long long *)a1, (long long *)a2 - 5);
      if (a5) {
        goto LABEL_30;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)a1, v18, (long long *)a2 - 5);
      signed __int32 v19 = 80 * v17;
      signed __int32 v20 = (long long *)(80 * v17 + a1 - 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)(a1 + 80), v20, (long long *)a2 - 10);
      signed __int32 v21 = (long long *)(a1 + 80 + v19);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((long long *)(a1 + 160), v21, (long long *)a2 - 15);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v20, v18, v21);
      signed __int32 v76 = *(_OWORD *)a1;
      signed __int32 v85 = *(_OWORD *)(a1 + 48);
      uint64_t v88 = *(_OWORD *)(a1 + 64);
      BOOL v79 = *(_OWORD *)(a1 + 16);
      signed __int32 v82 = *(_OWORD *)(a1 + 32);
      signed __int32 v22 = v18[4];
      BOOL v24 = v18[1];
      BOOL v23 = v18[2];
      *(_OWORD *)(a1 + 48) = v18[3];
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 16) = v24;
      *(_OWORD *)(a1 + 32) = v23;
      *(_OWORD *)a1 = *v18;
      v18[3] = v85;
      v18[4] = v88;
      v18[1] = v79;
      void v18[2] = v82;
      *unint64_t v18 = v76;
      if (a5) {
        goto LABEL_30;
      }
    }
    BOOL v25 = *(_DWORD *)(a1 - 72);
    signed __int32 v26 = *(_DWORD *)(a1 + 8);
    if (v25 >= v26)
    {
      if (v26 < v25) {
        goto LABEL_34;
      }
      signed __int32 v27 = *(double *)(a1 - 64);
      BOOL v28 = *(double *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          goto LABEL_34;
        }
        BOOL v29 = *(double *)(a1 - 56);
        BOOL v30 = *(double *)(a1 + 24);
        if (v29 >= v30)
        {
          if (v30 < v29) {
            goto LABEL_34;
          }
          BOOL v31 = *(double *)(a1 - 48);
          BOOL v32 = *(double *)(a1 + 32);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              goto LABEL_34;
            }
            signed __int32 v33 = *(void *)(a1 - 40);
            signed __int32 v34 = *(void *)(a1 + 40);
            if (v33 >= v34)
            {
              if (v34 < v33) {
                goto LABEL_34;
              }
              BOOL v35 = *(void *)(a1 - 32);
              unint64_t v36 = *(void *)(a1 + 48);
              if (v35 >= v36)
              {
                if (v36 < v35
                  || (signed __int32 v37 = *(void *)(a1 - 24), v38 = *(void *)(a1 + 56), v37 >= v38)
                  && (v38 < v37
                   || (unint64_t v39 = *(void *)(a1 - 16), v40 = *(void *)(a1 + 64), v39 >= v40)
                   && (v40 < v39
                    || (v41 = *(void *)(a1 - 8), BOOL v42 = *(void *)(a1 + 72), v41 >= v42)
                    && (v42 < v41 || *(void *)(a1 - 80) >= *(void *)a1))))
                {
LABEL_34:
                  unint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>((long long *)a1, (unint64_t)a2);
                  goto LABEL_35;
                }
              }
            }
          }
        }
      }
    }
LABEL_30:
    BOOL v43 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>((double *)a1, (double *)a2);
    if ((v44 & 1) == 0) {
      goto LABEL_33;
    }
    BOOL v45 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, v43);
    unint64_t v12 = (long long *)(v43 + 80);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v43 + 80, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (char *)v43;
      if (v45) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v13 = v14 + 1;
    if (!v45)
    {
LABEL_33:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(a1, v43, a3, -v14, a5 & 1);
      unint64_t v12 = (long long *)(v43 + 80);
LABEL_35:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if ((char *)a1 != a2)
  {
    signed __int32 v51 = (v16 - 2) >> 1;
    BOOL v52 = v51 + 1;
    signed __int32 v53 = (uint64_t *)(a1 + 80 * v51);
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a3, 0xCCCCCCCCCCCCCCCDLL * (v15 >> 4), v53);
      v53 -= 10;
      --v52;
    }
    while (v52);
    __n128 v54 = v15 / 0x50uLL;
    do
    {
      while (1)
      {
        BOOL v78 = *(_OWORD *)a1;
        BOOL v87 = *(_OWORD *)(a1 + 48);
        signed __int32 v90 = *(_OWORD *)(a1 + 64);
        BOOL v81 = *(_OWORD *)(a1 + 16);
        uint64_t v84 = *(_OWORD *)(a1 + 32);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a3, v54);
        if (v11 == v59) {
          break;
        }
        *uint64_t v59 = *v11;
        signed __int32 v55 = v11[1];
        BOOL v56 = v11[2];
        uint64_t v57 = v11[4];
        v59[3] = v11[3];
        v59[4] = v57;
        v59[1] = v55;
        v59[2] = v56;
        v11[3] = v87;
        v11[4] = v90;
        v11[1] = v81;
        v11[2] = v84;
        *unint64_t v11 = v78;
        v11 -= 5;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, (uint64_t)(v59 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v59 - a1 + 80) >> 4));
        signed __int32 v58 = v54-- <= 2;
        if (v58) {
          return;
        }
      }
      v59[2] = v84;
      v59[3] = v87;
      v59[4] = v90;
      *uint64_t v59 = v78;
      v59[1] = v81;
      v11 -= 5;
      signed __int32 v58 = v54-- <= 2;
    }
    while (!v58);
  }
}

  unint64_t v10 = (__n128 *)(a2 - 32);
  uint64_t i = a1;
LABEL_2:
  while (1)
  {
    a1 = i;
    unint64_t v12 = a2 - i;
    unint64_t v13 = (uint64_t)(a2 - i) >> 5;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 767)
    {
      uint64_t v88 = i + 32;
      signed __int32 v90 = i == a2 || v88 == a2;
      if (a4)
      {
        if (v90) {
          return v23.n128_f64[0];
        }
        signed __int32 v91 = 0;
        BOOL v92 = i;
LABEL_204:
        signed __int32 v94 = v92;
        BOOL v92 = v88;
        signed __int32 v95 = *(_DWORD *)(v94 + 40);
        BOOL v96 = v95 >> 1;
        BOOL v97 = *(int *)(v94 + 8) >> 1;
        if (v95 >> 1 == v97)
        {
          uint64_t v98 = *(void *)(v94 + 48);
          signed __int32 v99 = *(void *)(v94 + 16);
          if (v98 == v99)
          {
            if (*(unsigned char *)(v94 + 56)) {
              signed __int32 v100 = *(unsigned char *)(v94 + 24) == 0;
            }
            else {
              signed __int32 v100 = 0;
            }
            if (!v100) {
              goto LABEL_203;
            }
          }
          else if (v98 >= v99)
          {
            goto LABEL_203;
          }
        }
        else
        {
          if (v96 >= v97) {
            goto LABEL_203;
          }
          uint64_t v98 = *(void *)(v94 + 48);
        }
        BOOL v101 = *(void *)(v94 + 32);
        BOOL v102 = *(_DWORD *)(v94 + 44);
        signed __int32 v103 = *(unsigned char *)(v94 + 56);
        *(_OWORD *)BOOL v92 = *(_OWORD *)v94;
        BOOL v23 = *(__n128 *)(v94 + 9);
        *(__n128 *)(v92 + 9) = v23;
        BOOL v93 = i;
        if (v94 == i) {
          goto LABEL_202;
        }
        signed __int32 v104 = v91;
        if (!v103)
        {
          while (1)
          {
            __n128 v108 = i + v104;
            signed __int32 v109 = *(int *)(i + v104 - 24) >> 1;
            if (v96 == v109)
            {
              if (v98 >= *(void *)(v108 - 16)) {
                goto LABEL_225;
              }
            }
            else if (v96 >= v109)
            {
              goto LABEL_230;
            }
            v94 -= 32;
            *(_OWORD *)__n128 v108 = *(_OWORD *)(v108 - 32);
            BOOL v23 = *(__n128 *)(v108 - 23);
            *(__n128 *)(v108 + 9) = v23;
            v104 -= 32;
            if (!v104) {
              goto LABEL_201;
            }
          }
        }
        while (1)
        {
          BOOL v105 = i + v104;
          BOOL v106 = *(int *)(i + v104 - 24) >> 1;
          if (v96 == v106)
          {
            BOOL v107 = *(void *)(v105 - 16);
            if (v98 == v107)
            {
              if (*(unsigned char *)(i + v104 - 8))
              {
LABEL_230:
                BOOL v93 = v94;
LABEL_202:
                *(void *)BOOL v93 = v101;
                *(_DWORD *)(v93 + 8) = v95;
                *(_DWORD *)(v93 + 12) = v102;
                *(void *)(v93 + 16) = v98;
                *(unsigned char *)(v93 + 24) = v103;
LABEL_203:
                uint64_t v88 = v92 + 32;
                v91 += 32;
                if (v92 + 32 == a2) {
                  return v23.n128_f64[0];
                }
                goto LABEL_204;
              }
            }
            else if (v98 >= v107)
            {
LABEL_225:
              BOOL v93 = i + v104;
              goto LABEL_202;
            }
          }
          else if (v96 >= v106)
          {
            goto LABEL_230;
          }
          v94 -= 32;
          *(_OWORD *)BOOL v105 = *(_OWORD *)(v105 - 32);
          BOOL v23 = *(__n128 *)(v105 - 23);
          *(__n128 *)(v105 + 9) = v23;
          v104 -= 32;
          if (!v104)
          {
LABEL_201:
            BOOL v93 = i;
            goto LABEL_202;
          }
        }
      }
      if (v90) {
        return v23.n128_f64[0];
      }
      while (2)
      {
        int64_t v183 = a1;
        a1 = v88;
        int64_t v184 = *(_DWORD *)(v183 + 40);
        uint64_t v185 = v184 >> 1;
        uint64_t v186 = *(int *)(v183 + 8) >> 1;
        if (v184 >> 1 == v186)
        {
          BOOL v187 = *(void *)(v183 + 48);
          signed __int32 v188 = *(void *)(v183 + 16);
          if (v187 == v188)
          {
            if (*(unsigned char *)(v183 + 56)) {
              uint64_t v189 = *(unsigned char *)(v183 + 24) == 0;
            }
            else {
              uint64_t v189 = 0;
            }
            if (!v189)
            {
LABEL_331:
              uint64_t v88 = a1 + 32;
              if (a1 + 32 == a2) {
                return v23.n128_f64[0];
              }
              continue;
            }
          }
          else if (v187 >= v188)
          {
            goto LABEL_331;
          }
          signed __int32 v190 = *(void *)a1;
          signed __int32 v191 = *(_DWORD *)(v183 + 44);
          BOOL v192 = *(unsigned char *)(v183 + 56);
          if (v192) {
            goto LABEL_348;
          }
          do
          {
LABEL_353:
            while (1)
            {
              unint64_t v193 = v183;
              *(_OWORD *)(v183 + 32) = *(_OWORD *)v183;
              BOOL v23 = *(__n128 *)(v183 + 9);
              *(__n128 *)(v183 + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v23;
              v183 -= 32;
              BOOL v197 = *(int *)(v193 - 24) >> 1;
              if (v185 == v197) {
                break;
              }
              if (v185 >= v197) {
                goto LABEL_330;
              }
            }
          }
          while (v187 < *(void *)(v193 - 16));
        }
        else
        {
          if (v185 >= v186) {
            goto LABEL_331;
          }
          BOOL v187 = *(void *)(v183 + 48);
          signed __int32 v190 = *(void *)a1;
          signed __int32 v191 = *(_DWORD *)(v183 + 44);
          BOOL v192 = *(unsigned char *)(v183 + 56);
          if (!v192) {
            goto LABEL_353;
          }
          do
          {
LABEL_348:
            while (1)
            {
              unint64_t v193 = v183;
              *(_OWORD *)(v183 + 32) = *(_OWORD *)v183;
              BOOL v23 = *(__n128 *)(v183 + 9);
              *(__n128 *)(v183 + 4std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v23;
              v183 -= 32;
              signed __int32 v194 = *(int *)(v193 - 24) >> 1;
              signed __int32 v195 = v185 < v194;
              if (v185 == v194)
              {
                BOOL v196 = *(void *)(v193 - 16);
                signed __int32 v195 = v187 < v196;
                if (v187 == v196) {
                  break;
                }
              }
              if (!v195) {
                goto LABEL_330;
              }
            }
          }
          while (!*(unsigned char *)(v193 - 8));
        }
        break;
      }
LABEL_330:
      *(void *)unint64_t v193 = v190;
      *(_DWORD *)(v193 + 8) = v184;
      *(_DWORD *)(v193 + 12) = v191;
      *(void *)(v193 + 16) = v187;
      *(unsigned char *)(v193 + 24) = v192;
      goto LABEL_331;
    }
    if (!a3)
    {
      if (i == a2) {
        return v23.n128_f64[0];
      }
      BOOL v110 = (v13 - 2) >> 1;
      signed __int32 v111 = v110;
      while (2)
      {
        BOOL v113 = v111;
        if (v110 < v111) {
          goto LABEL_235;
        }
        BOOL v114 = (2 * v111) | 1;
        signed __int32 v112 = (_OWORD *)(i + 32 * v114);
        if (2 * v113 + 2 < (uint64_t)v13)
        {
          long long v115 = *((int *)v112 + 2) >> 1;
          signed __int32 v116 = *((int *)v112 + 10) >> 1;
          BOOL v117 = v115 < v116;
          if (v115 == v116
            && (BOOL v118 = i + 32 * v114,
                uint64_t v119 = *(void *)(v118 + 16),
                signed __int32 v120 = *((void *)v112 + 6),
                BOOL v117 = v119 < v120,
                v119 == v120))
          {
            if (!*(unsigned char *)(v118 + 24) || *((unsigned char *)v112 + 56)) {
              goto LABEL_246;
            }
          }
          else if (!v117)
          {
            goto LABEL_246;
          }
          v112 += 2;
          BOOL v114 = 2 * v113 + 2;
        }
LABEL_246:
        signed __int32 v121 = i + 32 * v113;
        BOOL v122 = *((int *)v112 + 2) >> 1;
        BOOL v123 = *(_DWORD *)(v121 + 8);
        signed __int32 v124 = v123 >> 1;
        if (v122 == v123 >> 1)
        {
          signed __int32 v125 = *((void *)v112 + 2);
          BOOL v126 = *(void *)(v121 + 16);
          BOOL v127 = v125 < v126;
          if (v125 == v126)
          {
            if (*((unsigned char *)v112 + 24)) {
              signed __int32 v128 = *(unsigned char *)(i + 32 * v113 + 24) == 0;
            }
            else {
              signed __int32 v128 = 0;
            }
            if (v128) {
              goto LABEL_235;
            }
          }
          else
          {
            signed __int32 v125 = *(void *)(v121 + 16);
            if (v127) {
              goto LABEL_235;
            }
          }
        }
        else
        {
          if (v122 < v124) {
            goto LABEL_235;
          }
          signed __int32 v125 = *(void *)(v121 + 16);
        }
        signed __int32 v129 = *(void *)v121;
        BOOL v130 = *(_DWORD *)(v121 + 12);
        BOOL v131 = *(unsigned __int8 *)(v121 + 24);
        signed __int32 v132 = *(_OWORD *)((char *)v112 + 9);
        *(_OWORD *)signed __int32 v121 = *v112;
        *(_OWORD *)(v121 + 9) = v132;
LABEL_259:
        if (v110 < v114) {
          goto LABEL_234;
        }
        unint64_t v134 = v112;
        BOOL v135 = 2 * v114;
        BOOL v114 = (2 * v114) | 1;
        signed __int32 v112 = (_OWORD *)(i + 32 * v114);
        BOOL v136 = v135 + 2;
        if (v136 < (uint64_t)v13)
        {
          uint64_t v137 = *((int *)v112 + 2) >> 1;
          signed __int32 v138 = *((int *)v112 + 10) >> 1;
          signed __int32 v139 = v137 < v138;
          if (v137 == v138
            && (BOOL v140 = i + 32 * v114,
                uint64_t v141 = *(void *)(v140 + 16),
                signed __int32 v142 = *((void *)v112 + 6),
                signed __int32 v139 = v141 < v142,
                v141 == v142))
          {
            if (*(unsigned char *)(v140 + 24)) {
              BOOL v143 = *((unsigned char *)v112 + 56) == 0;
            }
            else {
              BOOL v143 = 0;
            }
            if (!v143) {
              goto LABEL_271;
            }
LABEL_270:
            v112 += 2;
            BOOL v114 = v136;
          }
          else if (v139)
          {
            goto LABEL_270;
          }
        }
LABEL_271:
        BOOL v144 = *((int *)v112 + 2) >> 1;
        __n128 v145 = v144 < v124;
        if (v144 == v124 && (uint64_t v146 = *((void *)v112 + 2), v145 = v146 < v125, v146 == v125))
        {
          if (*((unsigned char *)v112 + 24)) {
            uint64_t v147 = v131 == 0;
          }
          else {
            uint64_t v147 = 0;
          }
          if (v147)
          {
LABEL_233:
            signed __int32 v112 = v134;
LABEL_234:
            *(void *)signed __int32 v112 = v129;
            *((_DWORD *)v112 + 2) = v123;
            *((_DWORD *)v112 + 3) = v130;
            *((void *)v112 + 2) = v125;
            *((unsigned char *)v112 + 24) = v131;
LABEL_235:
            signed __int32 v111 = v113 - 1;
            if (v113) {
              continue;
            }
            unint64_t v148 = (unint64_t)v12 >> 5;
            while (2)
            {
              signed __int32 v149 = 0;
              *(_OWORD *)uint64_t v203 = *(_OWORD *)i;
              *(_OWORD *)&v203[16] = *(_OWORD *)(i + 16);
              signed __int32 v150 = i;
LABEL_287:
              signed __int32 v152 = (__n128 *)v150;
              BOOL v153 = v149 + 1;
              v150 += 32 * (v149 + 1);
              BOOL v154 = 2 * v149;
              signed __int32 v149 = (2 * v149) | 1;
              __n128 v155 = v154 + 2;
              if (v155 < v148)
              {
                signed __int32 v156 = *(int *)(v150 + 8) >> 1;
                signed __int32 v157 = *(int *)(v150 + 40) >> 1;
                BOOL v158 = v156 < v157;
                if (v156 == v157
                  && (__n128 v159 = &v152[2 * v153],
                      signed __int32 v160 = v159[1].n128_i64[0],
                      signed __int32 v161 = *(void *)(v150 + 48),
                      BOOL v158 = v160 < v161,
                      v160 == v161))
                {
                  if (!v159[1].n128_u8[8] || *(unsigned char *)(v150 + 56)) {
                    goto LABEL_286;
                  }
                }
                else if (!v158)
                {
                  goto LABEL_286;
                }
                v150 += 32;
                signed __int32 v149 = v155;
              }
LABEL_286:
              uint64_t v151 = *(__n128 *)v150;
              *(__n128 *)((char *)v152 + 9) = *(__n128 *)(v150 + 9);
              *signed __int32 v152 = v151;
              if (v149 > (uint64_t)((unint64_t)(v148 - 2) >> 1))
              {
                a2 -= 32;
                if (v150 == a2)
                {
                  v23.n128_u64[0] = *(void *)v203;
                  *(_OWORD *)(v150 + 9) = *(_OWORD *)&v203[9];
                  *(_OWORD *)signed __int32 v150 = *(_OWORD *)v203;
                  goto LABEL_283;
                }
                BOOL v23 = *(__n128 *)a2;
                *(_OWORD *)(v150 + 9) = *(_OWORD *)(a2 + 9);
                *(__n128 *)signed __int32 v150 = v23;
                v23.n128_u64[0] = *(void *)v203;
                *(_OWORD *)(a2 + 9) = *(_OWORD *)&v203[9];
                *(_OWORD *)a2 = *(_OWORD *)v203;
                BOOL v162 = v150 - i + 32;
                if (v162 >= 33)
                {
                  __n128 v163 = ((unint64_t)v162 >> 5) - 2;
                  signed __int32 v164 = v163 >> 1;
                  BOOL v165 = i + 32 * (v163 >> 1);
                  std::string v166 = *(int *)(v165 + 8) >> 1;
                  uint64_t v167 = *(_DWORD *)(v150 + 8);
                  BOOL v168 = v167 >> 1;
                  if (v166 == v167 >> 1)
                  {
                    uint64_t v169 = *(void *)(v165 + 16);
                    double v170 = *(void *)(v150 + 16);
                    uint64_t v171 = v169 < v170;
                    if (v169 == v170)
                    {
                      if (*(unsigned char *)(i + 32 * v164 + 24)) {
                        double v172 = *(unsigned char *)(v150 + 24) == 0;
                      }
                      else {
                        double v172 = 0;
                      }
                      if (!v172) {
                        goto LABEL_283;
                      }
                    }
                    else
                    {
                      uint64_t v169 = *(void *)(v150 + 16);
                      if (!v171) {
                        goto LABEL_283;
                      }
                    }
                  }
                  else
                  {
                    if (v166 >= v168) {
                      goto LABEL_283;
                    }
                    uint64_t v169 = *(void *)(v150 + 16);
                  }
                  signed __int32 v173 = *(void *)v150;
                  signed __int32 v174 = *(_DWORD *)(v150 + 12);
                  BOOL v175 = *(unsigned char *)(v150 + 24);
                  BOOL v23 = *(__n128 *)(v165 + 9);
                  *(_OWORD *)signed __int32 v150 = *(_OWORD *)v165;
                  *(__n128 *)(v150 + 9) = v23;
                  if (v163 >= 2)
                  {
                    if (!v175)
                    {
                      while (1)
                      {
                        signed __int32 v179 = v164 - 1;
                        signed __int32 v164 = (v164 - 1) >> 1;
                        unint64_t v176 = i + 32 * v164;
                        BOOL v180 = *(int *)(v176 + 8) >> 1;
                        BOOL v181 = v180 < v168;
                        if (v180 == v168 && (int64_t v182 = *(void *)(v176 + 16), v181 = v182 < v169, v182 == v169))
                        {
                          if (!*(unsigned char *)(i + 32 * v164 + 24)) {
                            goto LABEL_312;
                          }
                        }
                        else if (!v181)
                        {
                          goto LABEL_312;
                        }
                        BOOL v23 = *(__n128 *)v176;
                        *(_OWORD *)(v165 + 9) = *(_OWORD *)(v176 + 9);
                        *(__n128 *)BOOL v165 = v23;
                        BOOL v165 = i + 32 * v164;
                        if (v179 <= 1) {
                          goto LABEL_313;
                        }
                      }
                    }
                    while (1)
                    {
                      uint64_t v177 = v164 - 1;
                      signed __int32 v164 = (v164 - 1) >> 1;
                      unint64_t v176 = i + 32 * v164;
                      long long v178 = *(int *)(v176 + 8) >> 1;
                      if (v178 == v168)
                      {
                        if (*(void *)(v176 + 16) >= v169) {
                          break;
                        }
                      }
                      else if (v178 >= v168)
                      {
                        break;
                      }
                      BOOL v23 = *(__n128 *)v176;
                      *(_OWORD *)(v165 + 9) = *(_OWORD *)(v176 + 9);
                      *(__n128 *)BOOL v165 = v23;
                      BOOL v165 = i + 32 * v164;
                      if (v177 < 2) {
                        goto LABEL_313;
                      }
                    }
                  }
LABEL_312:
                  unint64_t v176 = v165;
LABEL_313:
                  *(void *)unint64_t v176 = v173;
                  *(_DWORD *)(v176 + 8) = v167;
                  *(_DWORD *)(v176 + 12) = v174;
                  *(void *)(v176 + 16) = v169;
                  *(unsigned char *)(v176 + 24) = v175;
                }
LABEL_283:
                BOOL v29 = v148-- <= 2;
                if (v29) {
                  return v23.n128_f64[0];
                }
                continue;
              }
              goto LABEL_287;
            }
          }
        }
        else if (v145)
        {
          goto LABEL_233;
        }
        break;
      }
      signed __int32 v133 = *v112;
      *(_OWORD *)((char *)v134 + 9) = *(_OWORD *)((char *)v112 + 9);
      *unint64_t v134 = v133;
      goto LABEL_259;
    }
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = i + 32 * (v13 >> 1);
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)a1, (long long *)(a1 + 32 * (v13 >> 1)), (long long *)(a2 - 32));
      uint64_t v16 = 32 * v14;
      unint64_t v17 = (long long *)(32 * v14 + a1 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)(a1 + 32), v17, (long long *)(a2 - 64));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)(a1 + 64), (long long *)(a1 + 32 + v16), (long long *)(a2 - 96));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(v17, (long long *)v15, (long long *)(a1 + 32 + v16));
      *(_OWORD *)uint64_t v199 = *(_OWORD *)a1;
      *(_OWORD *)&v199[16] = *(_OWORD *)(a1 + 16);
      BOOL v23 = *(__n128 *)(v15 + 9);
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(__n128 *)(a1 + 9) = v23;
      v23.n128_u64[0] = *(void *)v199;
      *(_OWORD *)(v15 + 9) = *(_OWORD *)&v199[9];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v199;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      v23.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)(a1 + 32 * (v13 >> 1)), (long long *)a1, (long long *)(a2 - 32)).n128_u64[0];
      --a3;
      if ((a4 & 1) == 0)
      {
LABEL_9:
        unint64_t v18 = *(int *)(a1 - 24) >> 1;
        signed __int32 v19 = *(_DWORD *)(a1 + 8);
        signed __int32 v20 = v19 >> 1;
        if (v18 == v19 >> 1)
        {
          signed __int32 v21 = *(void *)(a1 - 16);
          signed __int32 v22 = *(void *)(a1 + 16);
          if (v21 == v22)
          {
            if (!*(unsigned char *)(a1 - 8) || *(unsigned char *)(a1 + 24)) {
              goto LABEL_99;
            }
          }
          else if (v21 >= v22)
          {
            signed __int32 v21 = *(void *)(a1 + 16);
LABEL_99:
            BOOL v56 = *(void *)a1;
            uint64_t v57 = *(_DWORD *)(a1 + 12);
            signed __int32 v58 = *(unsigned char *)(a1 + 24);
            uint64_t v59 = *(_DWORD *)(a2 - 24);
            uint64_t v60 = v20 < v59 >> 1;
            if (v20 == v59 >> 1 && (v61 = *(void *)(a2 - 16), uint64_t v60 = v21 < v61, v21 == v61))
            {
              if (*(unsigned char *)(a1 + 24) && !*(unsigned char *)(a2 - 8)) {
                goto LABEL_107;
              }
            }
            else if (v60)
            {
              if (!*(unsigned char *)(a1 + 24))
              {
                for (uint64_t i = a1 + 32; ; i += 32)
                {
                  signed __int32 v69 = *(int *)(i + 8) >> 1;
                  if (v20 == v69)
                  {
                    if (v21 < *(void *)(i + 16)) {
                      goto LABEL_133;
                    }
                  }
                  else if (v20 < v69)
                  {
                    goto LABEL_133;
                  }
                }
              }
LABEL_107:
              for (uint64_t i = a1 + 32; ; i += 32)
              {
                signed __int32 v62 = *(int *)(i + 8) >> 1;
                BOOL v63 = v20 < v62;
                if (v20 == v62 && (v64 = *(void *)(i + 16), BOOL v63 = v21 < v64, v21 == v64))
                {
                  if (!*(unsigned char *)(i + 24)) {
                    goto LABEL_133;
                  }
                }
                else if (v63)
                {
                  goto LABEL_133;
                }
              }
            }
            uint64_t i = a1 + 32;
            if (a1 + 32 < a2)
            {
              if (!*(unsigned char *)(a1 + 24))
              {
                while (1)
                {
                  __n128 v68 = *(int *)(i + 8) >> 1;
                  if (v20 == v68)
                  {
                    if (v21 < *(void *)(i + 16)) {
                      goto LABEL_133;
                    }
                  }
                  else if (v20 < v68)
                  {
                    goto LABEL_133;
                  }
                  i += 32;
                  if (i >= a2) {
                    goto LABEL_133;
                  }
                }
              }
              do
              {
                signed __int32 v65 = *(int *)(i + 8) >> 1;
                BOOL v66 = v20 < v65;
                if (v20 == v65 && (BOOL v67 = *(void *)(i + 16), v66 = v21 < v67, v21 == v67))
                {
                  if (!*(unsigned char *)(i + 24)) {
                    break;
                  }
                }
                else if (v66)
                {
                  break;
                }
                i += 32;
              }
              while (i < a2);
            }
LABEL_133:
            BOOL v70 = a2;
            if (i >= a2) {
              goto LABEL_170;
            }
            if (*(unsigned char *)(a1 + 24))
            {
              for (uint64_t j = a2 - 16; ; j -= 32)
              {
                __n128 v72 = v59 >> 1;
                signed __int32 v73 = v20 < v72;
                if (v20 == v72 && (signed __int32 v73 = v21 < *(void *)j, v21 == *(void *)j))
                {
                  if (*(unsigned char *)(j + 8)) {
                    goto LABEL_148;
                  }
                }
                else if (!v73)
                {
                  goto LABEL_148;
                }
                uint64_t v59 = *(_DWORD *)(j - 40);
              }
            }
            for (uint64_t j = a2 - 16; ; j -= 32)
            {
              BOOL v74 = v59 >> 1;
              if (v20 == v74)
              {
                if (v21 >= *(void *)j) {
                  goto LABEL_148;
                }
              }
              else if (v20 >= v74)
              {
LABEL_148:
                BOOL v70 = j - 16;
LABEL_170:
                while (i < v70)
                {
                  *(_OWORD *)uint64_t v201 = *(_OWORD *)i;
                  *(_OWORD *)&v201[16] = *(_OWORD *)(i + 16);
                  BOOL v23 = *(__n128 *)v70;
                  *(_OWORD *)(i + 9) = *(_OWORD *)(v70 + 9);
                  *(__n128 *)uint64_t i = v23;
                  v23.n128_u64[0] = *(void *)v201;
                  *(_OWORD *)(v70 + 9) = *(_OWORD *)&v201[9];
                  *(_OWORD *)BOOL v70 = *(_OWORD *)v201;
                  if (v58)
                  {
                    do
                    {
                      while (1)
                      {
                        i += 32;
                        signed __int32 v75 = *(int *)(i + 8) >> 1;
                        signed __int32 v76 = v20 < v75;
                        if (v20 == v75)
                        {
                          BOOL v77 = *(void *)(i + 16);
                          signed __int32 v76 = v21 < v77;
                          if (v21 == v77) {
                            break;
                          }
                        }
                        if (v76) {
                          goto LABEL_159;
                        }
                      }
                    }
                    while (*(unsigned char *)(i + 24));
                  }
                  else
                  {
                    do
                    {
                      while (1)
                      {
                        i += 32;
                        BOOL v78 = *(int *)(i + 8) >> 1;
                        if (v20 != v78) {
                          break;
                        }
                        if (v21 < *(void *)(i + 16)) {
                          goto LABEL_159;
                        }
                      }
                    }
                    while (v20 >= v78);
                  }
LABEL_159:
                  if (v58)
                  {
                    do
                    {
                      while (1)
                      {
                        v70 -= 32;
                        BOOL v79 = *(int *)(v70 + 8) >> 1;
                        BOOL v80 = v20 < v79;
                        if (v20 == v79)
                        {
                          BOOL v81 = *(void *)(v70 + 16);
                          BOOL v80 = v21 < v81;
                          if (v21 == v81) {
                            break;
                          }
                        }
                        if (!v80) {
                          goto LABEL_170;
                        }
                      }
                    }
                    while (!*(unsigned char *)(v70 + 24));
                  }
                  else
                  {
                    do
                    {
                      while (1)
                      {
                        v70 -= 32;
                        signed __int32 v82 = *(int *)(v70 + 8) >> 1;
                        if (v20 != v82) {
                          break;
                        }
                        if (v21 >= *(void *)(v70 + 16)) {
                          goto LABEL_170;
                        }
                      }
                    }
                    while (v20 < v82);
                  }
                }
                uint64_t v4 = i - 32 >= a1;
                BOOL v5 = i - 32 == a1;
                if (i - 32 != a1)
                {
                  BOOL v23 = *(__n128 *)(i - 32);
                  *(_OWORD *)(a1 + 9) = *(_OWORD *)(i - 23);
                  *(__n128 *)a1 = v23;
                }
                a4 = 0;
                *(void *)(i - 32) = v56;
                *(_DWORD *)(i - 24) = v19;
                *(_DWORD *)(i - 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v57;
                *(void *)(i - 16) = v21;
                *(unsigned char *)(i - 8) = v58;
                goto LABEL_2;
              }
              uint64_t v59 = *(_DWORD *)(j - 40);
            }
          }
        }
        else if (v18 >= v20)
        {
          signed __int32 v21 = *(void *)(a1 + 16);
          goto LABEL_99;
        }
        goto LABEL_20;
      }
    }
    signed __int32 v19 = *(_DWORD *)(a1 + 8);
    signed __int32 v20 = v19 >> 1;
LABEL_20:
    BOOL v24 = *(void *)(a1 + 16);
    BOOL v25 = *(unsigned char *)(a1 + 24);
    signed __int32 v26 = a1 + 32;
    if (!v25)
    {
      while (1)
      {
        BOOL v28 = *(int *)(v26 + 8) >> 1;
        BOOL v29 = v28 < v20;
        if (v28 == v20 && (v30 = *(void *)(v26 + 16), BOOL v29 = v30 < v24, v30 == v24))
        {
          if (!*(unsigned char *)(v26 + 24)) {
            goto LABEL_33;
          }
        }
        else if (!v29)
        {
          goto LABEL_33;
        }
        v26 += 32;
      }
    }
    while (1)
    {
      signed __int32 v27 = *(int *)(v26 + 8) >> 1;
      if (v27 != v20) {
        break;
      }
      if (*(void *)(v26 + 16) >= v24) {
        goto LABEL_33;
      }
LABEL_23:
      v26 += 32;
    }
    if (v27 < v20) {
      goto LABEL_23;
    }
LABEL_33:
    BOOL v31 = *(void *)a1;
    BOOL v32 = *(_DWORD *)(a1 + 12);
    if (v26 - 32 != a1)
    {
      k = a2 - 32;
      if (!*(unsigned char *)(a1 + 24))
      {
        while (1)
        {
          BOOL v35 = *(int *)(k + 8) >> 1;
          unint64_t v36 = v35 < v20;
          if (v35 == v20 && (signed __int32 v37 = *(void *)(k + 16), v36 = v37 < v24, v37 == v24))
          {
            if (*(unsigned char *)(k + 24)) {
              goto LABEL_64;
            }
          }
          else if (v36)
          {
            goto LABEL_64;
          }
          k -= 32;
        }
      }
      while (1)
      {
        signed __int32 v34 = *(int *)(k + 8) >> 1;
        if (v34 == v20)
        {
          if (*(void *)(k + 16) < v24) {
            goto LABEL_64;
          }
        }
        else if (v34 < v20)
        {
          goto LABEL_64;
        }
        k -= 32;
      }
    }
    k = a2;
    if (v26 < a2)
    {
      for (k = a2 - 32; ; k -= 32)
      {
        unint64_t v39 = *(int *)(k + 8) >> 1;
        signed __int32 v40 = v39 < v20;
        if (v39 == v20 && (v41 = *(void *)(k + 16), signed __int32 v40 = v41 < v24, v41 == v24))
        {
          if (*(unsigned char *)(k + 24)) {
            BOOL v42 = *(unsigned char *)(a1 + 24) == 0;
          }
          else {
            BOOL v42 = 0;
          }
          if (v42 || v26 >= k) {
            break;
          }
        }
        else if (v40 || v26 >= k)
        {
          break;
        }
      }
    }
LABEL_64:
    uint64_t i = v26;
    if (v26 >= k) {
      goto LABEL_93;
    }
    uint64_t i = v26;
    signed __int32 v44 = k;
    while (2)
    {
      *(_OWORD *)uint64_t v200 = *(_OWORD *)i;
      *(_OWORD *)&v200[16] = *(_OWORD *)(i + 16);
      BOOL v45 = *(_OWORD *)v44;
      *(_OWORD *)(i + 9) = *(_OWORD *)(v44 + 9);
      *(_OWORD *)uint64_t i = v45;
      i += 32;
      *(_OWORD *)(v44 + 9) = *(_OWORD *)&v200[9];
      *(_OWORD *)signed __int32 v44 = *(_OWORD *)v200;
      if (!v25)
      {
        while (1)
        {
          __n128 v47 = *(int *)(i + 8) >> 1;
          signed __int32 v48 = v47 < v20;
          if (v47 == v20 && (v49 = *(void *)(i + 16), signed __int32 v48 = v49 < v24, v49 == v24))
          {
            if (!*(unsigned char *)(i + 24)) {
              goto LABEL_80;
            }
          }
          else if (!v48)
          {
            goto LABEL_80;
          }
          i += 32;
        }
      }
      while (2)
      {
        BOOL v46 = *(int *)(i + 8) >> 1;
        if (v46 == v20)
        {
          if (*(void *)(i + 16) >= v24) {
            goto LABEL_80;
          }
LABEL_70:
          i += 32;
          continue;
        }
        break;
      }
      if (v46 < v20) {
        goto LABEL_70;
      }
LABEL_80:
      v44 -= 32;
      if (!v25)
      {
        while (1)
        {
          signed __int32 v51 = *(int *)(v44 + 8) >> 1;
          BOOL v52 = v51 < v20;
          if (v51 == v20 && (v53 = *(void *)(v44 + 16), BOOL v52 = v53 < v24, v53 == v24))
          {
            if (*(unsigned char *)(v44 + 24)) {
              goto LABEL_66;
            }
          }
          else if (v52)
          {
            goto LABEL_66;
          }
          v44 -= 32;
        }
      }
      while (2)
      {
        __n128 v50 = *(int *)(v44 + 8) >> 1;
        if (v50 == v20)
        {
          if (*(void *)(v44 + 16) < v24) {
            goto LABEL_66;
          }
LABEL_83:
          v44 -= 32;
          continue;
        }
        break;
      }
      if (v50 >= v20) {
        goto LABEL_83;
      }
LABEL_66:
      if (i < v44) {
        continue;
      }
      break;
    }
LABEL_93:
    if (i - 32 != a1)
    {
      __n128 v54 = *(_OWORD *)(i - 32);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(i - 23);
      *(_OWORD *)a1 = v54;
    }
    *(void *)(i - 32) = v31;
    *(_DWORD *)(i - 24) = v19;
    *(_DWORD *)(i - 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v32;
    *(void *)(i - 16) = v24;
    *(unsigned char *)(i - 8) = v25;
    if (v26 < k)
    {
LABEL_98:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(a1, i - 32, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      signed __int32 v55 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, i - 32);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(i, a2))
      {
        a2 = i - 32;
        if (v55) {
          return v23.n128_f64[0];
        }
        goto LABEL_1;
      }
      if (!v55) {
        goto LABEL_98;
      }
    }
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return v23.n128_f64[0];
    case 2uLL:
      BOOL v83 = *(int *)(a2 - 24) >> 1;
      uint64_t v84 = *(int *)(i + 8) >> 1;
      signed __int32 v85 = v83 < v84;
      if (v83 != v84 || (v86 = *(void *)(a2 - 16), v87 = *(void *)(i + 16), signed __int32 v85 = v86 < v87, v86 != v87))
      {
        if (!v85) {
          return v23.n128_f64[0];
        }
        goto LABEL_281;
      }
      if (*(unsigned char *)(a2 - 8) && !*(unsigned char *)(i + 24))
      {
LABEL_281:
        *(_OWORD *)double v202 = *(_OWORD *)i;
        *(_OWORD *)&v202[16] = *(_OWORD *)(i + 16);
        BOOL v23 = *v10;
        *(_OWORD *)(i + 9) = *(_OWORD *)(a2 - 23);
        *(__n128 *)uint64_t i = v23;
        v23.n128_u64[0] = *(void *)v202;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v202[9];
        *unint64_t v10 = *(__n128 *)v202;
      }
      return v23.n128_f64[0];
    case 3uLL:
      v23.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((long long *)i, (long long *)(i + 32), (long long *)(a2 - 32)).n128_u64[0];
      return v23.n128_f64[0];
    case 4uLL:
      v23.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(i, i + 32, i + 64, a2 - 32).n128_u64[0];
      return v23.n128_f64[0];
    case 5uLL:
      v23.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(i, i + 32, i + 64, i + 96, a2 - 32).n128_u64[0];
      return v23.n128_f64[0];
    default:
      JUMPOUT(0);
  }
}

  unint64_t v11 = (const void **)a1;
LABEL_2:
  unint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    unint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          BOOL v35 = (const void **)*(a2 - 3);
          signed __int32 v34 = a2 - 3;
          signed __int32 v33 = v35;
          unint64_t v36 = *(char *)(a1 + 23);
          signed __int32 v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            int v38 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            int v38 = (size_t)v34[1];
          }
          if (v37 >= 0) {
            unint64_t v39 = v34;
          }
          else {
            unint64_t v39 = v33;
          }
          if (v36 >= 0) {
            signed __int32 v40 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            signed __int32 v40 = *(void *)(a1 + 8);
          }
          if (v36 >= 0) {
            signed __int32 v41 = (const void *)a1;
          }
          else {
            signed __int32 v41 = *(const void **)a1;
          }
          if (v40 >= v38) {
            BOOL v42 = v38;
          }
          else {
            BOOL v42 = v40;
          }
          BOOL v43 = memcmp(v39, v41, v42);
          signed __int32 v44 = v38 < v40;
          if (v43) {
            signed __int32 v44 = v43 < 0;
          }
          if (v44)
          {
            __n128 v54 = *(const void **)(a1 + 16);
            BOOL v52 = *(_OWORD *)a1;
            BOOL v45 = *(_OWORD *)v34;
            *(void *)(a1 + 16) = v34[2];
            *(_OWORD *)a1 = v45;
            *(_OWORD *)signed __int32 v34 = v52;
            v34[2] = v54;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v12 == 1)
    {
      if ((const void **)a1 != a2)
      {
        BOOL v46 = (v15 - 2) >> 1;
        __n128 v47 = v46 + 1;
        signed __int32 v48 = (__n128 *)(a1 + 24 * v46);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v14 >> 3), v48);
          signed __int32 v48 = (__n128 *)((char *)v48 - 24);
          --v47;
        }
        while (v47);
        BOOL v49 = v14 / 0x18uLL;
        do
        {
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, (uint64_t)a2, a3, v49);
          a2 -= 3;
        }
        while (v49-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = a1 + 24 * (v15 >> 1);
    if ((unint64_t)v14 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v17, (const void **)a1, a2 - 3);
      if (a5) {
        goto LABEL_29;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)v17, a2 - 3);
      unint64_t v18 = 24 * v16;
      signed __int32 v19 = (const void **)(24 * v16 + a1 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), v19, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + v18), a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, (const void **)v17, (const void **)(a1 + 24 + v18));
      signed __int32 v53 = *(void *)(a1 + 16);
      signed __int32 v51 = *(_OWORD *)a1;
      signed __int32 v20 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v20;
      *(void *)(v17 + 16) = v53;
      *(_OWORD *)unint64_t v17 = v51;
      if (a5) {
        goto LABEL_29;
      }
    }
    signed __int32 v21 = *(char *)(a1 + 23);
    signed __int32 v22 = *(char *)(a1 - 1);
    if (v22 >= 0) {
      BOOL v23 = *(unsigned __int8 *)(a1 - 1);
    }
    else {
      BOOL v23 = *(void *)(a1 - 16);
    }
    if (v22 >= 0) {
      BOOL v24 = (const void *)(a1 - 24);
    }
    else {
      BOOL v24 = *(const void **)(a1 - 24);
    }
    if (v21 >= 0) {
      BOOL v25 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      BOOL v25 = *(void *)(a1 + 8);
    }
    if (v21 >= 0) {
      signed __int32 v26 = (const void *)a1;
    }
    else {
      signed __int32 v26 = *(const void **)a1;
    }
    if (v25 >= v23) {
      signed __int32 v27 = v23;
    }
    else {
      signed __int32 v27 = v25;
    }
    BOOL v28 = memcmp(v24, v26, v27);
    BOOL v29 = v23 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29)
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, a2);
      goto LABEL_34;
    }
LABEL_29:
    BOOL v30 = (const void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (uint64_t)a2);
    if ((v31 & 1) == 0) {
      goto LABEL_32;
    }
    BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v30);
    unint64_t v11 = v30 + 3;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v30 + 3), a2))
    {
      a4 = -v13;
      a2 = v30;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    unint64_t v12 = v13 + 1;
    if (!v32)
    {
LABEL_32:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v30, a3, -v13, a5 & 1);
      unint64_t v11 = v30 + 3;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2);
  }
}

  uint64_t i = a1;
  while (1)
  {
    a1 = i;
    unint64_t v11 = (uint64_t)a2 - i;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    if (v5 || !v4) {
      break;
    }
    if (v11 <= 575)
    {
      __n128 v72 = (__n128 *)(i + 24);
      BOOL v74 = (__n128 *)i == a2 || v72 == a2;
      if (a4)
      {
        if (v74) {
          return v23.n128_f64[0];
        }
        signed __int32 v75 = 0;
        signed __int32 v76 = i;
LABEL_200:
        BOOL v78 = v76;
        signed __int32 v76 = (unint64_t)v72;
        BOOL v79 = *(_DWORD *)(v78 + 24);
        BOOL v80 = *(void *)(v78 + 28);
        BOOL v81 = *(unsigned char *)(v78 + 36);
        signed __int32 v82 = (void *)(v78 + 37);
        BOOL v83 = *(void *)(v78 + 4);
        uint64_t v84 = v80 < v83;
        if (v80 == v83)
        {
          if (*(unsigned __int8 *)(v78 + 12) == v81)
          {
            uint64_t v84 = v79 < *(_DWORD *)v78;
            goto LABEL_203;
          }
          if (*(unsigned char *)(v78 + 36)) {
            goto LABEL_199;
          }
          *(void *)signed __int32 v157 = *v82;
          *(_DWORD *)&v157[7] = *(_DWORD *)(v78 + 44);
          *(void *)(v76 + 16) = *(void *)(v78 + 16);
          BOOL v23 = *(__n128 *)v78;
          *(_OWORD *)signed __int32 v76 = *(_OWORD *)v78;
          BOOL v77 = i;
          if (v78 == i) {
            goto LABEL_198;
          }
        }
        else
        {
LABEL_203:
          if (!v84) {
            goto LABEL_199;
          }
          *(void *)signed __int32 v157 = *v82;
          *(_DWORD *)&v157[7] = *(_DWORD *)(v78 + 44);
          *(void *)(v76 + 16) = *(void *)(v78 + 16);
          BOOL v23 = *(__n128 *)v78;
          *(_OWORD *)signed __int32 v76 = *(_OWORD *)v78;
          BOOL v77 = i;
          if (v78 == i) {
            goto LABEL_198;
          }
          if (v81)
          {
            signed __int32 v85 = v75;
            while (1)
            {
              BOOL v87 = (__n128 *)(i + v85);
              uint64_t v88 = (__n128 *)(i + v85 - 24);
              unint64_t v89 = *(void *)(i + v85 - 20);
              if (v80 == v89)
              {
                if (v87[-1].n128_u8[4] != v81 || v79 >= (signed __int32)v88->n128_u32[0]) {
                  goto LABEL_229;
                }
              }
              else if (v80 >= v89)
              {
                goto LABEL_228;
              }
              v78 -= 24;
              BOOL v23 = *v88;
              *BOOL v87 = *v88;
              v87[1].n128_u64[0] = *(void *)(i + v85 - 8);
              v85 -= 24;
              if (!v85) {
                goto LABEL_197;
              }
            }
          }
        }
        signed __int32 v85 = v75;
        while (1)
        {
          signed __int32 v91 = (__n128 *)(i + v85);
          BOOL v92 = (__n128 *)(i + v85 - 24);
          BOOL v93 = *(void *)(i + v85 - 20);
          if (v80 == v93)
          {
            if (v91[-1].n128_u8[4]) {
              signed __int32 v90 = 1;
            }
            else {
              signed __int32 v90 = v79 < (signed __int32)v92->n128_u32[0];
            }
            if (!v90)
            {
LABEL_229:
              BOOL v77 = i + v85;
LABEL_198:
              *(_DWORD *)BOOL v77 = v79;
              *(void *)(v77 + 4) = v80;
              *(unsigned char *)(v77 + 12) = v81;
              *(void *)(v77 + 13) = *(void *)v157;
              *(_DWORD *)(v77 + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(_DWORD *)&v157[7];
LABEL_199:
              __n128 v72 = (__n128 *)(v76 + 24);
              v75 += 24;
              if ((__n128 *)(v76 + 24) == a2) {
                return v23.n128_f64[0];
              }
              goto LABEL_200;
            }
          }
          else if (v80 >= v93)
          {
LABEL_228:
            BOOL v77 = v78;
            goto LABEL_198;
          }
          v78 -= 24;
          BOOL v23 = *v92;
          _DWORD *v91 = *v92;
          v91[1].n128_u64[0] = *(void *)(i + v85 - 8);
          v85 -= 24;
          if (!v85)
          {
LABEL_197:
            BOOL v77 = i;
            goto LABEL_198;
          }
        }
      }
      if (v74) {
        return v23.n128_f64[0];
      }
      while (2)
      {
        uint64_t v137 = a1;
        a1 = (unint64_t)v72;
        signed __int32 v138 = *(_DWORD *)(v137 + 24);
        signed __int32 v139 = *(void *)(v137 + 28);
        BOOL v140 = *(unsigned char *)(v137 + 36);
        uint64_t v141 = (void *)(v137 + 37);
        signed __int32 v142 = *(void *)(v137 + 4);
        BOOL v143 = v139 < v142;
        if (v139 == v142)
        {
          if (*(unsigned __int8 *)(v137 + 12) == v140)
          {
            BOOL v143 = v138 < *(_DWORD *)v137;
            goto LABEL_310;
          }
          if (!*(unsigned char *)(v137 + 36))
          {
            *(void *)signed __int32 v160 = *v141;
            *(_DWORD *)&v160[7] = *(_DWORD *)(v137 + 44);
            goto LABEL_323;
          }
        }
        else
        {
LABEL_310:
          if (v143)
          {
            *(void *)signed __int32 v160 = *v141;
            *(_DWORD *)&v160[7] = *(_DWORD *)(v137 + 44);
            if (*(unsigned char *)(v137 + 36))
            {
              do
              {
                BOOL v144 = v137;
                BOOL v23 = *(__n128 *)v137;
                *(_OWORD *)(v137 + 24) = *(_OWORD *)v137;
                *(void *)(v137 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(void *)(v137 + 16);
                v137 -= 24;
                __n128 v145 = *(void *)(v144 - 20);
                uint64_t v146 = v139 < v145;
                if (v139 == v145) {
                  uint64_t v146 = *(unsigned __int8 *)(v144 - 12) == v140 && v138 < *(_DWORD *)(v144 - 24);
                }
              }
              while (v146);
            }
            else
            {
              do
              {
LABEL_323:
                while (1)
                {
                  BOOL v144 = v137;
                  BOOL v23 = *(__n128 *)v137;
                  *(_OWORD *)(v137 + 24) = *(_OWORD *)v137;
                  *(void *)(v137 + 4operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(void *)(v137 + 16);
                  v137 -= 24;
                  uint64_t v147 = *(void *)(v144 - 20);
                  if (v139 == v147) {
                    break;
                  }
                  if (v139 >= v147) {
                    goto LABEL_305;
                  }
                }
                if (*(unsigned char *)(v144 - 12)) {
                  unint64_t v148 = 1;
                }
                else {
                  unint64_t v148 = v138 < *(_DWORD *)(v144 - 24);
                }
              }
              while (v148);
            }
LABEL_305:
            *(_DWORD *)BOOL v144 = v138;
            *(void *)(v144 + 4) = v139;
            *(unsigned char *)(v144 + 12) = v140;
            *(void *)(v144 + 13) = *(void *)v160;
            *(_DWORD *)(v144 + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(_DWORD *)&v160[7];
          }
        }
        __n128 v72 = (__n128 *)(a1 + 24);
        if ((__n128 *)(a1 + 24) == a2) {
          return v23.n128_f64[0];
        }
        continue;
      }
    }
    if (!a3)
    {
      if ((__n128 *)i == a2) {
        return v23.n128_f64[0];
      }
      signed __int32 v94 = (v12 - 2) >> 1;
      signed __int32 v95 = v94;
      while (2)
      {
        BOOL v97 = v95;
        if (v94 < v95) {
          goto LABEL_234;
        }
        uint64_t v98 = (2 * v95) | 1;
        BOOL v96 = i + 24 * v98;
        if (2 * v97 + 2 >= (uint64_t)v12) {
          goto LABEL_243;
        }
        signed __int32 v99 = *(void *)(v96 + 4);
        signed __int32 v100 = *(void *)(v96 + 28);
        BOOL v101 = v99 < v100;
        if (v99 != v100) {
          goto LABEL_240;
        }
        if (*(unsigned __int8 *)(v96 + 12) == *(unsigned __int8 *)(v96 + 36))
        {
          BOOL v101 = *(_DWORD *)v96 < *(_DWORD *)(v96 + 24);
LABEL_240:
          if (!v101)
          {
LABEL_243:
            BOOL v102 = i + 24 * v97;
            signed __int32 v103 = *(void *)(v96 + 4);
            signed __int32 v104 = *(_DWORD *)v102;
            BOOL v105 = *(void *)(v102 + 4);
            BOOL v106 = *(unsigned __int8 *)(v102 + 12);
            BOOL v107 = v103 < v105;
            if (v103 == v105)
            {
              if (*(unsigned __int8 *)(v96 + 12) == v106)
              {
                BOOL v107 = *(_DWORD *)v96 < v104;
                goto LABEL_246;
              }
              if (!*(unsigned char *)(v96 + 12)) {
                goto LABEL_234;
              }
            }
            else
            {
LABEL_246:
              if (v107) {
                goto LABEL_234;
              }
            }
            *(_DWORD *)&v158[7] = *(_DWORD *)(v102 + 20);
            *(void *)BOOL v158 = *(void *)(v102 + 13);
LABEL_251:
            __n128 v108 = *(_OWORD *)v96;
            *(void *)(v102 + 16) = *(void *)(v96 + 16);
            *(_OWORD *)BOOL v102 = v108;
            if (v94 < v98) {
              goto LABEL_233;
            }
            BOOL v102 = v96;
            signed __int32 v109 = 2 * v98;
            uint64_t v98 = (2 * v98) | 1;
            BOOL v96 = i + 24 * v98;
            BOOL v110 = v109 + 2;
            if (v110 >= (uint64_t)v12) {
              goto LABEL_259;
            }
            signed __int32 v111 = *(void *)(v96 + 4);
            signed __int32 v112 = *(void *)(v96 + 28);
            BOOL v113 = v111 < v112;
            if (v111 != v112) {
              goto LABEL_256;
            }
            if (*(unsigned __int8 *)(v96 + 12) == *(unsigned __int8 *)(v96 + 36))
            {
              BOOL v113 = *(_DWORD *)v96 < *(_DWORD *)(v96 + 24);
LABEL_256:
              if (!v113)
              {
LABEL_259:
                BOOL v114 = *(void *)(v96 + 4);
                if (v114 == v105)
                {
                  if (*(unsigned __int8 *)(v96 + 12) == v106)
                  {
                    if (*(_DWORD *)v96 < v104) {
                      goto LABEL_232;
                    }
                  }
                  else if (!*(unsigned char *)(v96 + 12))
                  {
LABEL_232:
                    BOOL v96 = v102;
LABEL_233:
                    *(_DWORD *)BOOL v96 = v104;
                    *(void *)(v96 + 4) = v105;
                    *(unsigned char *)(v96 + 12) = v106;
                    *(void *)(v96 + 13) = *(void *)v158;
                    *(_DWORD *)(v96 + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(_DWORD *)&v158[7];
LABEL_234:
                    signed __int32 v95 = v97 - 1;
                    if (v97) {
                      continue;
                    }
                    long long v115 = v11 / 0x18uLL;
                    while (2)
                    {
                      signed __int32 v116 = 0;
                      BOOL v165 = *(void *)(i + 16);
                      __n128 v159 = *(__n128 *)i;
                      BOOL v117 = i;
LABEL_275:
                      uint64_t v119 = v117;
                      v117 += 24 * v116 + 24;
                      signed __int32 v120 = 2 * v116;
                      signed __int32 v116 = (2 * v116) | 1;
                      signed __int32 v121 = v120 + 2;
                      if (v121 >= v115) {
                        goto LABEL_274;
                      }
                      BOOL v122 = *(void *)(v117 + 4);
                      BOOL v123 = *(void *)(v117 + 28);
                      signed __int32 v124 = v122 < v123;
                      if (v122 != v123) {
                        goto LABEL_279;
                      }
                      if (*(unsigned __int8 *)(v117 + 12) == *(unsigned __int8 *)(v117 + 36))
                      {
                        signed __int32 v124 = *(_DWORD *)v117 < *(_DWORD *)(v117 + 24);
LABEL_279:
                        if (!v124)
                        {
LABEL_274:
                          BOOL v118 = *(_OWORD *)v117;
                          *(void *)(v119 + 16) = *(void *)(v117 + 16);
                          *(_OWORD *)uint64_t v119 = v118;
                          if (v116 > (uint64_t)((unint64_t)(v115 - 2) >> 1))
                          {
                            a2 = (__n128 *)((char *)a2 - 24);
                            if ((__n128 *)v117 == a2)
                            {
                              v23.n128_u64[0] = v159.n128_u64[0];
                              *(void *)(v117 + 16) = v165;
                              *(__n128 *)BOOL v117 = v159;
                              goto LABEL_271;
                            }
                            BOOL v23 = *a2;
                            *(void *)(v117 + 16) = a2[1].n128_u64[0];
                            *(__n128 *)BOOL v117 = v23;
                            v23.n128_u64[0] = v159.n128_u64[0];
                            a2[1].n128_u64[0] = v165;
                            *a2 = v159;
                            signed __int32 v125 = v117 - i + 24;
                            if (v125 >= 25)
                            {
                              BOOL v126 = v125 / 0x18uLL - 2;
                              BOOL v127 = v126 >> 1;
                              signed __int32 v128 = i + 24 * (v126 >> 1);
                              signed __int32 v129 = *(void *)(v128 + 4);
                              BOOL v130 = *(_DWORD *)v117;
                              BOOL v131 = *(void *)(v117 + 4);
                              signed __int32 v132 = *(unsigned __int8 *)(v117 + 12);
                              signed __int32 v133 = v129 < v131;
                              if (v129 != v131) {
                                goto LABEL_288;
                              }
                              if (*(unsigned __int8 *)(v128 + 12) == v132)
                              {
                                signed __int32 v133 = *(_DWORD *)v128 < v130;
LABEL_288:
                                if (!v133) {
                                  goto LABEL_271;
                                }
                              }
                              else if (*(unsigned char *)(v128 + 12))
                              {
                                goto LABEL_271;
                              }
                              *(_DWORD *)&v152[7] = *(_DWORD *)(v117 + 20);
                              *(void *)signed __int32 v152 = *(void *)(v117 + 13);
                              BOOL v23 = *(__n128 *)v128;
                              *(void *)(v117 + 16) = *(void *)(v128 + 16);
                              *(__n128 *)BOOL v117 = v23;
                              if (v126 >= 2)
                              {
                                while (1)
                                {
                                  BOOL v135 = v127 - 1;
                                  BOOL v127 = (v127 - 1) >> 1;
                                  unint64_t v134 = i + 24 * v127;
                                  BOOL v136 = *(void *)(v134 + 4);
                                  if (v136 == v131)
                                  {
                                    if (*(unsigned __int8 *)(v134 + 12) == v132)
                                    {
                                      if (*(_DWORD *)v134 >= v130) {
                                        break;
                                      }
                                    }
                                    else if (*(unsigned char *)(v134 + 12))
                                    {
                                      break;
                                    }
                                  }
                                  else if (v136 >= v131)
                                  {
                                    break;
                                  }
                                  BOOL v23 = *(__n128 *)v134;
                                  *(void *)(v128 + 16) = *(void *)(v134 + 16);
                                  *(__n128 *)signed __int32 v128 = v23;
                                  signed __int32 v128 = i + 24 * v127;
                                  if (v135 <= 1) {
                                    goto LABEL_292;
                                  }
                                }
                              }
                              unint64_t v134 = v128;
LABEL_292:
                              *(_DWORD *)unint64_t v134 = v130;
                              *(void *)(v134 + 4) = v131;
                              *(unsigned char *)(v134 + 12) = v132;
                              *(void *)(v134 + 13) = *(void *)v152;
                              *(_DWORD *)(v134 + 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = *(_DWORD *)&v152[7];
                            }
LABEL_271:
                            BOOL v31 = v115-- <= 2;
                            if (v31) {
                              return v23.n128_f64[0];
                            }
                            continue;
                          }
                          goto LABEL_275;
                        }
                      }
                      else if (*(unsigned char *)(v117 + 12))
                      {
                        goto LABEL_274;
                      }
                      break;
                    }
                    v117 += 24;
                    signed __int32 v116 = v121;
                    goto LABEL_274;
                  }
                }
                else if (v114 < v105)
                {
                  goto LABEL_232;
                }
                goto LABEL_251;
              }
            }
            else if (*(unsigned char *)(v96 + 12))
            {
              goto LABEL_259;
            }
            v96 += 24;
            uint64_t v98 = v110;
            goto LABEL_259;
          }
        }
        else if (*(unsigned char *)(v96 + 12))
        {
          goto LABEL_243;
        }
        break;
      }
      v96 += 24;
      uint64_t v98 = 2 * v97 + 2;
      goto LABEL_243;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = i + 24 * (v12 >> 1);
    if ((unint64_t)v11 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24 * (v12 >> 1)), (uint64_t)&a2[-2].n128_i64[1]);
      uint64_t v15 = 24 * v13;
      uint64_t v16 = (int *)(24 * v13 + a1 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 24, v16, (uint64_t)&a2[-3]);
      unint64_t v17 = (int *)(a1 + 24 + v15);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 48, v17, (uint64_t)&a2[-5].n128_i64[1]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>((uint64_t)v16, (int *)v14, (uint64_t)v17);
      signed __int32 v161 = *(void *)(a1 + 16);
      BOOL v153 = *(_OWORD *)a1;
      unint64_t v18 = *(void *)(v14 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = v18;
      v23.n128_u64[0] = v153;
      *(void *)(v14 + 16) = v161;
      *(_OWORD *)uint64_t v14 = v153;
      --a3;
      signed __int32 v19 = *(_DWORD *)a1;
      if (a4) {
        goto LABEL_14;
      }
    }
    else
    {
      v23.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 24 * (v12 >> 1), (int *)a1, (uint64_t)&a2[-2].n128_i64[1]).n128_u64[0];
      --a3;
      signed __int32 v19 = *(_DWORD *)a1;
      if (a4)
      {
LABEL_14:
        signed __int32 v21 = *(void *)(a1 + 4);
        signed __int32 v22 = *(unsigned char *)(a1 + 12);
        goto LABEL_19;
      }
    }
    signed __int32 v20 = *(void *)(a1 - 20);
    signed __int32 v21 = *(void *)(a1 + 4);
    signed __int32 v22 = *(unsigned char *)(a1 + 12);
    if (v20 == v21)
    {
      if (*(unsigned __int8 *)(a1 - 12) == v22)
      {
        if (*(_DWORD *)(a1 - 24) >= v19) {
          goto LABEL_71;
        }
      }
      else if (*(unsigned char *)(a1 - 12))
      {
        goto LABEL_71;
      }
      signed __int32 v21 = *(void *)(a1 - 20);
LABEL_19:
      BOOL v24 = 0;
      *(void *)signed __int32 v150 = *(void *)(a1 + 13);
      *(_DWORD *)&v150[7] = *(_DWORD *)(a1 + 20);
      while (1)
      {
        BOOL v25 = a1 + v24;
        signed __int32 v26 = *(void *)(a1 + v24 + 28);
        if (v26 != v21)
        {
          if (v26 >= v21) {
            goto LABEL_27;
          }
          goto LABEL_21;
        }
        if (*(unsigned __int8 *)(v25 + 36) != v22) {
          break;
        }
        if (*(_DWORD *)(v25 + 24) >= v19) {
          goto LABEL_27;
        }
LABEL_21:
        v24 += 24;
      }
      if (!*(unsigned char *)(v25 + 36)) {
        goto LABEL_21;
      }
LABEL_27:
      signed __int32 v27 = a1 + v24 + 24;
      BOOL v28 = &a2[-2].n128_i8[8];
      if (v24)
      {
        while (1)
        {
          BOOL v29 = (__n128 *)v28;
          BOOL v32 = *(void *)(v28 + 4);
          v28 -= 24;
          BOOL v31 = v32 < v21;
          if (v32 != v21) {
            goto LABEL_31;
          }
          if (v29->n128_u8[12] == v22)
          {
            BOOL v31 = (signed __int32)v29->n128_u32[0] < v19;
LABEL_31:
            if (v31) {
              goto LABEL_47;
            }
          }
          else if (!v29->n128_u8[12])
          {
            goto LABEL_47;
          }
        }
      }
      BOOL v29 = a2;
      if (v27 < (unint64_t)a2)
      {
        BOOL v30 = &a2[-2].n128_i8[8];
        do
        {
          while (1)
          {
            while (1)
            {
              BOOL v29 = (__n128 *)v30;
              signed __int32 v34 = *(void *)(v30 + 4);
              v30 -= 24;
              if (v34 == v21) {
                break;
              }
              if (v27 >= (unint64_t)v29 || v34 < v21) {
                goto LABEL_47;
              }
            }
            if (v29->n128_u8[12] == v22) {
              break;
            }
            if (v27 >= (unint64_t)v29 || !v29->n128_u8[12]) {
              goto LABEL_47;
            }
          }
        }
        while ((signed __int32)v29->n128_u32[0] >= v19 && v27 < (unint64_t)v29);
      }
LABEL_47:
      uint64_t i = v27;
      if (v27 < (unint64_t)v29)
      {
        BOOL v35 = (unint64_t)v29;
        do
        {
          BOOL v162 = *(void *)(i + 16);
          BOOL v154 = *(__n128 *)i;
          unint64_t v36 = *(_OWORD *)v35;
          *(void *)(i + 16) = *(void *)(v35 + 16);
          *(_OWORD *)uint64_t i = v36;
          *(void *)(v35 + 16) = v162;
          *(__n128 *)BOOL v35 = v154;
          signed __int32 v37 = i + 24;
          do
          {
            while (1)
            {
              while (1)
              {
                uint64_t i = v37;
                int v38 = *(void *)(v37 + 4);
                v37 += 24;
                if (v38 == v21) {
                  break;
                }
                if (v38 >= v21) {
                  goto LABEL_57;
                }
              }
              if (*(unsigned __int8 *)(i + 12) != v22) {
                break;
              }
              if (*(_DWORD *)i >= v19) {
                goto LABEL_57;
              }
            }
          }
          while (!*(unsigned char *)(i + 12));
LABEL_57:
          unint64_t v39 = v35 - 24;
          do
          {
            while (1)
            {
              while (1)
              {
                BOOL v35 = v39;
                signed __int32 v40 = *(void *)(v39 + 4);
                v39 -= 24;
                if (v40 == v21) {
                  break;
                }
                if (v40 < v21) {
                  goto LABEL_49;
                }
              }
              if (*(unsigned __int8 *)(v35 + 12) != v22) {
                break;
              }
              if (*(_DWORD *)v35 < v19) {
                goto LABEL_49;
              }
            }
          }
          while (*(unsigned char *)(v35 + 12));
LABEL_49:
          ;
        }
        while (i < v35);
      }
      if (i - 24 != a1)
      {
        signed __int32 v41 = *(_OWORD *)(i - 24);
        *(void *)(a1 + 16) = *(void *)(i - 8);
        *(_OWORD *)a1 = v41;
      }
      *(_DWORD *)(i - 24) = v19;
      *(void *)(i - 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
      *(unsigned char *)(i - 12) = v22;
      *(_DWORD *)(i - 4) = *(_DWORD *)&v150[7];
      *(void *)(i - 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(void *)v150;
      if (v27 < (unint64_t)v29)
      {
LABEL_70:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>(a1, i - 24, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, i - 24);
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, (uint64_t)a2))
        {
          a2 = (__n128 *)(i - 24);
          if (v42) {
            return v23.n128_f64[0];
          }
          goto LABEL_1;
        }
        if (!v42) {
          goto LABEL_70;
        }
      }
    }
    else
    {
      if (v20 < v21) {
        goto LABEL_19;
      }
LABEL_71:
      *(void *)uint64_t v151 = *(void *)(a1 + 13);
      *(_DWORD *)&v151[7] = *(_DWORD *)(a1 + 20);
      BOOL v43 = *(uint64_t *)((char *)&a2[-2].n128_i64[1] + 4);
      signed __int32 v44 = v21 < v43;
      if (v21 == v43)
      {
        if (a2[-1].n128_u8[4] != v22)
        {
          if (!*(unsigned char *)(a1 + 12)) {
            goto LABEL_105;
          }
          goto LABEL_88;
        }
        signed __int32 v44 = v19 < (signed __int32)a2[-2].n128_u32[2];
      }
      if (v44)
      {
        if (*(unsigned char *)(a1 + 12))
        {
          for (uint64_t i = a1 + 24; ; i += 24)
          {
            BOOL v45 = *(void *)(i + 4);
            if (v21 == v45)
            {
              if (*(unsigned __int8 *)(i + 12) == v22 && v19 < *(_DWORD *)i) {
                goto LABEL_113;
              }
            }
            else if (v21 < v45)
            {
              goto LABEL_113;
            }
          }
        }
LABEL_105:
        for (uint64_t i = a1 + 24; ; i += 24)
        {
          BOOL v52 = *(void *)(i + 4);
          if (v21 == v52)
          {
            if (*(unsigned char *)(i + 12)) {
              signed __int32 v51 = 1;
            }
            else {
              signed __int32 v51 = v19 < *(_DWORD *)i;
            }
            if (v51) {
              goto LABEL_113;
            }
          }
          else if (v21 < v52)
          {
            goto LABEL_113;
          }
        }
      }
LABEL_88:
      uint64_t i = a1 + 24;
      if (a1 + 24 < (unint64_t)a2)
      {
        if (!*(unsigned char *)(a1 + 12))
        {
          while (1)
          {
            __n128 v50 = *(void *)(i + 4);
            if (v21 == v50)
            {
              if (*(unsigned char *)(i + 12)) {
                BOOL v49 = 1;
              }
              else {
                BOOL v49 = v19 < *(_DWORD *)i;
              }
              if (v49) {
                goto LABEL_113;
              }
            }
            else if (v21 < v50)
            {
              goto LABEL_113;
            }
            i += 24;
            if (i >= (unint64_t)a2) {
              goto LABEL_113;
            }
          }
        }
        do
        {
          __n128 v47 = *(void *)(i + 4);
          signed __int32 v48 = v21 < v47;
          if (v21 == v47) {
            signed __int32 v48 = *(unsigned __int8 *)(i + 12) == v22 && v19 < *(_DWORD *)i;
          }
          if (v48) {
            break;
          }
          i += 24;
        }
        while (i < (unint64_t)a2);
      }
LABEL_113:
      signed __int32 v53 = a2;
      if (i < (unint64_t)a2)
      {
        if (!*(unsigned char *)(a1 + 12))
        {
          for (uint64_t j = &a2[-1].n128_u8[4]; ; j -= 24)
          {
            if (v21 == v43)
            {
              if (*j) {
                uint64_t v57 = 1;
              }
              else {
                uint64_t v57 = v19 < *((_DWORD *)j - 3);
              }
              if (!v57) {
                goto LABEL_132;
              }
            }
            else if (v21 >= v43)
            {
              goto LABEL_132;
            }
            BOOL v43 = *((void *)j - 4);
          }
        }
        uint64_t j = &a2[-1].n128_u8[4];
        signed __int32 v55 = v21 < v43;
        if (v21 != v43) {
          goto LABEL_121;
        }
LABEL_118:
        signed __int32 v55 = *j == v22 && v19 < *((_DWORD *)j - 3);
LABEL_121:
        while (v55)
        {
          BOOL v56 = *((void *)j - 4);
          j -= 24;
          signed __int32 v55 = v21 < v56;
          if (v21 == v56) {
            goto LABEL_118;
          }
        }
LABEL_132:
        signed __int32 v53 = (__n128 *)(j - 12);
      }
LABEL_165:
      while (i < (unint64_t)v53)
      {
        __n128 v163 = *(void *)(i + 16);
        __n128 v155 = *(__n128 *)i;
        BOOL v23 = *v53;
        *(void *)(i + 16) = v53[1].n128_u64[0];
        *(__n128 *)uint64_t i = v23;
        v23.n128_u64[0] = v155.n128_u64[0];
        v53[1].n128_u64[0] = v163;
        *signed __int32 v53 = v155;
        if (v22)
        {
          do
          {
            while (1)
            {
              i += 24;
              signed __int32 v58 = *(void *)(i + 4);
              if (v21 == v58) {
                break;
              }
              if (v21 < v58) {
                goto LABEL_149;
              }
            }
          }
          while (*(unsigned __int8 *)(i + 12) != v22 || v19 >= *(_DWORD *)i);
        }
        else
        {
          do
          {
            while (1)
            {
              i += 24;
              signed __int32 v61 = *(void *)(i + 4);
              if (v21 == v61) {
                break;
              }
              if (v21 < v61) {
                goto LABEL_149;
              }
            }
            if (*(unsigned char *)(i + 12)) {
              uint64_t v60 = 1;
            }
            else {
              uint64_t v60 = v19 < *(_DWORD *)i;
            }
          }
          while (!v60);
        }
LABEL_149:
        if (v22)
        {
          do
          {
            while (1)
            {
              signed __int32 v53 = (__n128 *)((char *)v53 - 24);
              signed __int32 v62 = *(uint64_t *)((char *)v53->n128_i64 + 4);
              if (v21 == v62) {
                break;
              }
              if (v21 >= v62) {
                goto LABEL_165;
              }
            }
          }
          while (v53->n128_u8[12] == v22 && v19 < (signed __int32)v53->n128_u32[0]);
        }
        else
        {
          do
          {
            while (1)
            {
              signed __int32 v53 = (__n128 *)((char *)v53 - 24);
              signed __int32 v65 = *(uint64_t *)((char *)v53->n128_i64 + 4);
              if (v21 == v65) {
                break;
              }
              if (v21 >= v65) {
                goto LABEL_165;
              }
            }
            if (v53->n128_u8[12]) {
              BOOL v64 = 1;
            }
            else {
              BOOL v64 = v19 < (signed __int32)v53->n128_u32[0];
            }
          }
          while (v64);
        }
      }
      uint64_t v4 = i - 24 >= a1;
      BOOL v5 = i - 24 == a1;
      if (i - 24 != a1)
      {
        BOOL v23 = *(__n128 *)(i - 24);
        *(void *)(a1 + 16) = *(void *)(i - 8);
        *(__n128 *)a1 = v23;
      }
      a4 = 0;
      *(_DWORD *)(i - 24) = v19;
      *(void *)(i - 2operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0) = v21;
      *(unsigned char *)(i - 12) = v22;
      *(_DWORD *)(i - 4) = *(_DWORD *)&v151[7];
      *(void *)(i - 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(void *)v151;
    }
  }
  switch(v12)
  {
    case 0uLL:
    case 1uLL:
      return v23.n128_f64[0];
    case 2uLL:
      __n128 v68 = a2[-2].n128_u32[2];
      BOOL v67 = &a2[-2].n128_i8[8];
      BOOL v66 = v68;
      signed __int32 v69 = *(void *)(v67 + 4);
      BOOL v70 = *(void *)(i + 4);
      __n128 v71 = v69 < v70;
      if (v69 != v70) {
        goto LABEL_176;
      }
      if (v67[12] != *(unsigned char *)(i + 12))
      {
        if (v67[12]) {
          return v23.n128_f64[0];
        }
LABEL_178:
        signed __int32 v164 = *(void *)(i + 16);
        signed __int32 v156 = *(__n128 *)i;
        BOOL v23 = *(__n128 *)v67;
        *(void *)(i + 16) = *((void *)v67 + 2);
        *(__n128 *)uint64_t i = v23;
        v23.n128_u64[0] = v156.n128_u64[0];
        *((void *)v67 + 2) = v164;
        *(__n128 *)BOOL v67 = v156;
        return v23.n128_f64[0];
      }
      __n128 v71 = v66 < *(_DWORD *)i;
LABEL_176:
      if (v71) {
        goto LABEL_178;
      }
      return v23.n128_f64[0];
    case 3uLL:
      v23.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, (int *)(i + 24), (uint64_t)&a2[-2].n128_i64[1]).n128_u64[0];
      return v23.n128_f64[0];
    case 4uLL:
      v23.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, i + 24, i + 48, (uint64_t)&a2[-2].n128_i64[1]).n128_u64[0];
      return v23.n128_f64[0];
    case 5uLL:
      v23.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(i, i + 24, i + 48, i + 72, (uint64_t)&a2[-2].n128_i64[1]).n128_u64[0];
      return v23.n128_f64[0];
    default:
      JUMPOUT(0);
  }
}

  int v208 = &a2[-1].i64[1];
  unint64_t v7 = (uint64_t *)a1;
  while (1)
  {
    int v8 = (char *)a2 - (char *)v7;
    unint64_t v9 = v7;
    unint64_t v10 = ((char *)a2 - (char *)v7) >> 3;
    a1 = (int8x16_t *)v9;
    if (v5 || !v4)
    {
      switch(v10)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a2[-1].i64[1], *v9))
          {
            BOOL v106 = a1->i64[0];
            a1->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v106;
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9, v9 + 1, v208);
          break;
        case 4:
          BOOL v107 = v9 + 1;
          __n128 v108 = v9 + 2;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9, v9 + 1, v9 + 2);
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a2[-1].i64[1], a1[1].i64[0]))
          {
            signed __int32 v109 = *v108;
            *__n128 v108 = a2[-1].i64[1];
            a2[-1].i64[1] = v109;
            if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v108, *v107))
            {
              signed __int32 v111 = a1->i64[1];
              BOOL v110 = a1[1].i64[0];
              signed __int32 v112 = a1->i64[0];
              a1->i64[1] = v110;
              a1[1].i64[0] = v111;
              if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v110, v112)) {
                *a1 = vextq_s8(*a1, *a1, 8uLL);
              }
            }
          }
          break;
        case 5:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,0>(v9, v9 + 1, v9 + 2, v9 + 3, v208);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v8 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == (uint64_t *)a2) {
        return;
      }
      BOOL v135 = (unint64_t)(v10 - 2) >> 1;
      BOOL v136 = v135;
      do
      {
        uint64_t v137 = v136;
        if (v135 >= v136)
        {
          signed __int32 v138 = (2 * v136) | 1;
          signed __int32 v139 = &a1->i64[v138];
          if (2 * v136 + 2 < v10
            && operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v139, v139[1]))
          {
            ++v139;
            signed __int32 v138 = 2 * v137 + 2;
          }
          BOOL v140 = &a1->i64[v137];
          if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v139, *v140))
          {
            uint64_t v141 = *v140;
            do
            {
              signed __int32 v142 = v139;
              *BOOL v140 = *v139;
              if (v135 < v138) {
                break;
              }
              BOOL v143 = (2 * v138) | 1;
              signed __int32 v139 = &a1->i64[v143];
              BOOL v144 = 2 * v138 + 2;
              if (v144 < v10 && operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v139, v139[1]))
              {
                ++v139;
                BOOL v143 = v144;
              }
              BOOL v140 = v142;
              signed __int32 v138 = v143;
            }
            while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v139, v141));
            *signed __int32 v142 = v141;
          }
        }
        BOOL v136 = v137 - 1;
      }
      while (v137);
      __n128 v145 = (unint64_t)v8 >> 3;
      while (1)
      {
        uint64_t v147 = 0;
        unint64_t v148 = (uint64_t *)a1;
        uint64_t v206 = a1->i64[0];
        signed __int32 v149 = (unint64_t)(v145 - 2) >> 1;
        BOOL v209 = v149;
        unint64_t v211 = v145;
        do
        {
          uint64_t v151 = &v148[v147 + 1];
          signed __int32 v152 = (2 * v147) | 1;
          BOOL v153 = 2 * v147 + 2;
          if (v153 >= v145) {
            goto LABEL_261;
          }
          BOOL v154 = *v151;
          __n128 v155 = v151[1];
          if (*(char *)(*v151 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v154 + 8), *(void *)(v154 + 16));
            signed __int32 v214 = v151 + 1;
            if ((*(char *)(v155 + 31) & 0x80000000) == 0)
            {
LABEL_265:
              signed __int32 v157 = *(_OWORD *)(v155 + 8);
              v217.__r_.__value_.__r.__words[2] = *(void *)(v155 + 24);
              *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v157;
              goto LABEL_268;
            }
          }
          else
          {
            signed __int32 v156 = *(_OWORD *)(v154 + 8);
            v218.__r_.__value_.__r.__words[2] = *(void *)(v154 + 24);
            *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v156;
            signed __int32 v214 = v151 + 1;
            if ((*(char *)(v155 + 31) & 0x80000000) == 0) {
              goto LABEL_265;
            }
          }
          std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v155 + 8), *(void *)(v155 + 16));
LABEL_268:
          BOOL v158 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
          __n128 v159 = (void *)v217.__r_.__value_.__r.__words[0];
          signed __int32 v160 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v218.__r_.__value_.__l.__size_;
          }
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v162 = &v218;
          }
          else {
            BOOL v162 = (std::string *)v218.__r_.__value_.__r.__words[0];
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __n128 v163 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
          }
          else {
            __n128 v163 = v217.__r_.__value_.__l.__size_;
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            signed __int32 v164 = &v217;
          }
          else {
            signed __int32 v164 = (std::string *)v217.__r_.__value_.__r.__words[0];
          }
          if (v163 >= size) {
            BOOL v165 = size;
          }
          else {
            BOOL v165 = v163;
          }
          std::string v166 = memcmp(v162, v164, v165);
          if (v158 < 0)
          {
            operator delete(v159);
            if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_287:
            }
              operator delete(v218.__r_.__value_.__l.__data_);
          }
          else if (v160 < 0)
          {
            goto LABEL_287;
          }
          signed __int32 v150 = size < v163;
          if (v166) {
            signed __int32 v150 = v166 < 0;
          }
          __n128 v145 = v211;
          if (v150)
          {
            uint64_t v151 = v214;
            signed __int32 v152 = v153;
          }
          signed __int32 v149 = v209;
LABEL_261:
          *unint64_t v148 = *v151;
          unint64_t v148 = v151;
          uint64_t v147 = v152;
        }
        while (v152 <= v149);
        uint64_t v167 = &a2[-1].i64[1];
        BOOL v5 = v151 == (uint64_t *)&a2[-1].u64[1];
        a2 = (int8x16_t *)((char *)a2 - 8);
        if (v5)
        {
          *uint64_t v151 = v206;
          goto LABEL_254;
        }
        *uint64_t v151 = *v167;
        *uint64_t v167 = v206;
        BOOL v168 = (char *)v151 - (char *)a1 + 8;
        if (v168 >= 9)
        {
          uint64_t v169 = (((unint64_t)v168 >> 3) - 2) >> 1;
          double v170 = &a1->i64[v169];
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v170, *v151))
          {
            uint64_t v171 = *v151;
            BOOL v215 = *v151 + 8;
            while (1)
            {
              signed __int32 v173 = v170;
              *uint64_t v151 = *v170;
              if (!v169)
              {
LABEL_321:
                *signed __int32 v173 = v171;
                __n128 v145 = v211;
                break;
              }
              uint64_t v169 = (v169 - 1) >> 1;
              double v170 = &a1->i64[v169];
              signed __int32 v174 = *v170;
              if (*(char *)(*v170 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v174 + 8), *(void *)(v174 + 16));
                if ((*(char *)(v171 + 31) & 0x80000000) == 0)
                {
LABEL_298:
                  unint64_t v176 = *(_OWORD *)v215;
                  v217.__r_.__value_.__r.__words[2] = *(void *)(v215 + 16);
                  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v176;
                  goto LABEL_301;
                }
              }
              else
              {
                BOOL v175 = *(_OWORD *)(v174 + 8);
                v218.__r_.__value_.__r.__words[2] = *(void *)(v174 + 24);
                *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v175;
                if ((*(char *)(v171 + 31) & 0x80000000) == 0) {
                  goto LABEL_298;
                }
              }
              std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v171 + 8), *(void *)(v171 + 16));
LABEL_301:
              uint64_t v177 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
              long long v178 = (void *)v217.__r_.__value_.__r.__words[0];
              signed __int32 v179 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v180 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              }
              else {
                BOOL v180 = v218.__r_.__value_.__l.__size_;
              }
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v181 = &v218;
              }
              else {
                BOOL v181 = (std::string *)v218.__r_.__value_.__r.__words[0];
              }
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v182 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
              }
              else {
                int64_t v182 = v217.__r_.__value_.__l.__size_;
              }
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v183 = &v217;
              }
              else {
                int64_t v183 = (std::string *)v217.__r_.__value_.__r.__words[0];
              }
              if (v182 >= v180) {
                int64_t v184 = v180;
              }
              else {
                int64_t v184 = v182;
              }
              uint64_t v185 = memcmp(v181, v183, v184);
              if (v177 < 0)
              {
                operator delete(v178);
                if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_320:
                }
                  operator delete(v218.__r_.__value_.__l.__data_);
              }
              else if (v179 < 0)
              {
                goto LABEL_320;
              }
              double v172 = v180 < v182;
              if (v185) {
                double v172 = v185 < 0;
              }
              uint64_t v151 = v173;
              if (!v172) {
                goto LABEL_321;
              }
            }
          }
        }
LABEL_254:
        if (v145-- <= 2) {
          return;
        }
      }
    }
    unint64_t v11 = (unint64_t)v10 >> 1;
    unint64_t v12 = &v9[(unint64_t)v10 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v12, v9, v208);
      uint64_t v212 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_11:
      unint64_t v17 = 0;
      unint64_t v18 = a1->i64[0];
      signed __int32 v19 = a1->i64[0] + 8;
      do
      {
        signed __int32 v21 = a1->i64[v17 + 1];
        if (*(char *)(v21 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v21 + 8), *(void *)(v21 + 16));
          if ((*(char *)(v18 + 31) & 0x80000000) == 0)
          {
LABEL_17:
            BOOL v23 = *(_OWORD *)v19;
            v217.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
            *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v23;
            goto LABEL_20;
          }
        }
        else
        {
          signed __int32 v22 = *(_OWORD *)(v21 + 8);
          v218.__r_.__value_.__r.__words[2] = *(void *)(v21 + 24);
          *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v22;
          if ((*(char *)(v18 + 31) & 0x80000000) == 0) {
            goto LABEL_17;
          }
        }
        std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v18 + 8), *(void *)(v18 + 16));
LABEL_20:
        BOOL v24 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
        BOOL v25 = (void *)v217.__r_.__value_.__r.__words[0];
        signed __int32 v26 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          signed __int32 v27 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
        }
        else {
          signed __int32 v27 = v218.__r_.__value_.__l.__size_;
        }
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v28 = &v218;
        }
        else {
          BOOL v28 = (std::string *)v218.__r_.__value_.__r.__words[0];
        }
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v29 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
        }
        else {
          BOOL v29 = v217.__r_.__value_.__l.__size_;
        }
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v30 = &v217;
        }
        else {
          BOOL v30 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        if (v29 >= v27) {
          BOOL v31 = v27;
        }
        else {
          BOOL v31 = v29;
        }
        BOOL v32 = memcmp(v28, v30, v31);
        if (v24 < 0)
        {
          operator delete(v25);
          if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_12;
          }
        }
        else if ((v26 & 0x80) == 0)
        {
          goto LABEL_12;
        }
        operator delete(v218.__r_.__value_.__l.__data_);
LABEL_12:
        signed __int32 v20 = v27 < v29;
        if (v32) {
          signed __int32 v20 = v32 < 0;
        }
        ++v17;
      }
      while (v20);
      signed __int32 v33 = &a1->i64[v17];
      BOOL v5 = v17 == 1;
      signed __int32 v34 = (uint64_t *)a2;
      if (v5)
      {
        signed __int32 v34 = (uint64_t *)a2;
        do
        {
          if (v33 >= v34) {
            break;
          }
          unint64_t v36 = *--v34;
        }
        while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v36, v18));
      }
      else
      {
        do
          BOOL v35 = *--v34;
        while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v35, v18));
      }
      if (v33 >= v34)
      {
        BOOL v66 = (int8x16_t *)(v33 - 1);
        a3 = v212;
        BOOL v67 = a1;
        if (v33 - 1 == (uint64_t *)a1) {
          goto LABEL_108;
        }
LABEL_107:
        a1->i64[0] = v66->i64[0];
        BOOL v67 = a1;
        goto LABEL_108;
      }
      uint64_t v204 = v34;
      uint64_t v205 = v33;
      while (2)
      {
        signed __int32 v37 = *v33;
        *signed __int32 v33 = *v34;
        *signed __int32 v34 = v37;
        while (2)
        {
          signed __int32 v40 = v33[1];
          ++v33;
          unint64_t v39 = v40;
          if (*(char *)(v40 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v39 + 8), *(void *)(v39 + 16));
            if (*(char *)(v18 + 31) < 0) {
              goto LABEL_57;
            }
LABEL_55:
            BOOL v42 = *(_OWORD *)v19;
            v217.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
            *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v42;
          }
          else
          {
            signed __int32 v41 = *(_OWORD *)(v39 + 8);
            v218.__r_.__value_.__r.__words[2] = *(void *)(v39 + 24);
            *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v41;
            if ((*(char *)(v18 + 31) & 0x80000000) == 0) {
              goto LABEL_55;
            }
LABEL_57:
            std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v18 + 8), *(void *)(v18 + 16));
          }
          BOOL v43 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
          signed __int32 v44 = (void *)v217.__r_.__value_.__r.__words[0];
          BOOL v45 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v46 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          }
          else {
            BOOL v46 = v218.__r_.__value_.__l.__size_;
          }
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __n128 v47 = &v218;
          }
          else {
            __n128 v47 = (std::string *)v218.__r_.__value_.__r.__words[0];
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            signed __int32 v48 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
          }
          else {
            signed __int32 v48 = v217.__r_.__value_.__l.__size_;
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v49 = &v217;
          }
          else {
            BOOL v49 = (std::string *)v217.__r_.__value_.__r.__words[0];
          }
          if (v48 >= v46) {
            __n128 v50 = v46;
          }
          else {
            __n128 v50 = v48;
          }
          signed __int32 v51 = memcmp(v47, v49, v50);
          if (v43 < 0)
          {
            operator delete(v44);
            if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_77;
            }
          }
          else if (v45 < 0)
          {
LABEL_77:
            operator delete(v218.__r_.__value_.__l.__data_);
          }
          int v38 = v46 < v48;
          if (v51) {
            int v38 = v51 < 0;
          }
          if (v38) {
            continue;
          }
          break;
        }
        while (2)
        {
          __n128 v54 = *--v34;
          signed __int32 v53 = v54;
          if (*(char *)(v54 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v53 + 8), *(void *)(v53 + 16));
            if (*(char *)(v18 + 31) < 0) {
              goto LABEL_85;
            }
LABEL_83:
            BOOL v56 = *(_OWORD *)v19;
            v217.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
            *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v56;
          }
          else
          {
            signed __int32 v55 = *(_OWORD *)(v53 + 8);
            v218.__r_.__value_.__r.__words[2] = *(void *)(v53 + 24);
            *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v55;
            if ((*(char *)(v18 + 31) & 0x80000000) == 0) {
              goto LABEL_83;
            }
LABEL_85:
            std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v18 + 8), *(void *)(v18 + 16));
          }
          uint64_t v57 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
          signed __int32 v58 = (void *)v217.__r_.__value_.__r.__words[0];
          uint64_t v59 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          }
          else {
            uint64_t v60 = v218.__r_.__value_.__l.__size_;
          }
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            signed __int32 v61 = &v218;
          }
          else {
            signed __int32 v61 = (std::string *)v218.__r_.__value_.__r.__words[0];
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            signed __int32 v62 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
          }
          else {
            signed __int32 v62 = v217.__r_.__value_.__l.__size_;
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v63 = &v217;
          }
          else {
            BOOL v63 = (std::string *)v217.__r_.__value_.__r.__words[0];
          }
          if (v62 >= v60) {
            BOOL v64 = v60;
          }
          else {
            BOOL v64 = v62;
          }
          signed __int32 v65 = memcmp(v61, v63, v64);
          if (v57 < 0)
          {
            operator delete(v58);
            if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_105;
            }
          }
          else if (v59 < 0)
          {
LABEL_105:
            operator delete(v218.__r_.__value_.__l.__data_);
          }
          BOOL v52 = v60 < v62;
          if (v65) {
            BOOL v52 = v65 < 0;
          }
          if (!v52) {
            continue;
          }
          break;
        }
        if (v33 < v34) {
          continue;
        }
        break;
      }
      BOOL v66 = (int8x16_t *)(v33 - 1);
      signed __int32 v34 = v204;
      signed __int32 v33 = v205;
      a3 = v212;
      BOOL v67 = a1;
      if (v66 != a1) {
        goto LABEL_107;
      }
LABEL_108:
      v66->i64[0] = v18;
      if (v33 < v34) {
        goto LABEL_111;
      }
      __n128 v68 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v67, v66);
      unint64_t v7 = &v66->i64[1];
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>((int8x16_t *)&v66->u64[1], a2))
      {
        a2 = v66;
        if (v68) {
          return;
        }
        goto LABEL_1;
      }
      BOOL v67 = a1;
      if (!v68)
      {
LABEL_111:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,false>(v67, v66, a3, a4 & 1);
        a4 = 0;
        unint64_t v7 = &v66->i64[1];
      }
    }
    else
    {
      unint64_t v13 = v9;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9, v12, v208);
      uint64_t v14 = v11;
      uint64_t v15 = &v13[v11];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v13 + 1, v15 - 1, a2[-1].i64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v13 + 2, &v13[v14 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v15 - 1, v12, &v13[v14 + 1]);
      uint64_t v16 = *v13;
      __n128 *v13 = *v15;
      void *v15 = v16;
      uint64_t v212 = a3 - 1;
      if (a4) {
        goto LABEL_11;
      }
LABEL_10:
      if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a1[-1].i64[1], a1->i64[0])) {
        goto LABEL_11;
      }
      unint64_t v7 = (uint64_t *)a1;
      signed __int32 v69 = a1->i64[0];
      if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a1->i64[0], *v208))
      {
        do
        {
          BOOL v70 = v7[1];
          ++v7;
        }
        while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v69, v70));
      }
      else
      {
        __n128 v71 = &a1->i64[1];
        do
        {
          unint64_t v7 = v71;
          if (v71 >= (uint64_t *)a2) {
            break;
          }
          ++v71;
        }
        while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v69, *v7));
      }
      __n128 v72 = (uint64_t *)a2;
      if (v7 < (uint64_t *)a2)
      {
        __n128 v72 = (uint64_t *)a2;
        do
          signed __int32 v73 = *--v72;
        while (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v69, v73));
      }
      if (v7 < v72)
      {
        BOOL v74 = (long long *)(v69 + 8);
        do
        {
          signed __int32 v75 = *v7;
          std::vector<int> *v7 = *v72;
          signed __int32 v76 = v72;
          *__n128 v72 = v75;
          do
          {
            BOOL v79 = v7[1];
            ++v7;
            BOOL v78 = v79;
            if (*(char *)(v69 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v69 + 8), *(void *)(v69 + 16));
              if ((*(char *)(v78 + 31) & 0x80000000) == 0)
              {
LABEL_132:
                BOOL v81 = *(_OWORD *)(v78 + 8);
                v217.__r_.__value_.__r.__words[2] = *(void *)(v78 + 24);
                *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v81;
                goto LABEL_135;
              }
            }
            else
            {
              BOOL v80 = *v74;
              v218.__r_.__value_.__r.__words[2] = *(void *)(v69 + 24);
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v80;
              if ((*(char *)(v78 + 31) & 0x80000000) == 0) {
                goto LABEL_132;
              }
            }
            std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v78 + 8), *(void *)(v78 + 16));
LABEL_135:
            signed __int32 v82 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
            BOOL v83 = (void *)v217.__r_.__value_.__r.__words[0];
            uint64_t v84 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              signed __int32 v85 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            }
            else {
              signed __int32 v85 = v218.__r_.__value_.__l.__size_;
            }
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v86 = &v218;
            }
            else {
              BOOL v86 = (std::string *)v218.__r_.__value_.__r.__words[0];
            }
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v87 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
            }
            else {
              BOOL v87 = v217.__r_.__value_.__l.__size_;
            }
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v88 = &v217;
            }
            else {
              uint64_t v88 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            if (v87 >= v85) {
              unint64_t v89 = v85;
            }
            else {
              unint64_t v89 = v87;
            }
            signed __int32 v90 = memcmp(v86, v88, v89);
            if (v82 < 0)
            {
              operator delete(v83);
              if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_127;
              }
            }
            else if ((v84 & 0x80) == 0)
            {
              goto LABEL_127;
            }
            operator delete(v218.__r_.__value_.__l.__data_);
LABEL_127:
            BOOL v77 = v85 < v87;
            if (v90) {
              BOOL v77 = v90 < 0;
            }
          }
          while (!v77);
          do
          {
            BOOL v93 = *--v76;
            BOOL v92 = v93;
            if (*(char *)(v69 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v69 + 8), *(void *)(v69 + 16));
              if ((*(char *)(v92 + 31) & 0x80000000) == 0)
              {
LABEL_160:
                signed __int32 v95 = *(_OWORD *)(v92 + 8);
                v217.__r_.__value_.__r.__words[2] = *(void *)(v92 + 24);
                *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v95;
                goto LABEL_163;
              }
            }
            else
            {
              signed __int32 v94 = *v74;
              v218.__r_.__value_.__r.__words[2] = *(void *)(v69 + 24);
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v94;
              if ((*(char *)(v92 + 31) & 0x80000000) == 0) {
                goto LABEL_160;
              }
            }
            std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v92 + 8), *(void *)(v92 + 16));
LABEL_163:
            BOOL v96 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
            BOOL v97 = (void *)v217.__r_.__value_.__r.__words[0];
            uint64_t v98 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              signed __int32 v99 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            }
            else {
              signed __int32 v99 = v218.__r_.__value_.__l.__size_;
            }
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              signed __int32 v100 = &v218;
            }
            else {
              signed __int32 v100 = (std::string *)v218.__r_.__value_.__r.__words[0];
            }
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v101 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
            }
            else {
              BOOL v101 = v217.__r_.__value_.__l.__size_;
            }
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v102 = &v217;
            }
            else {
              BOOL v102 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            if (v101 >= v99) {
              signed __int32 v103 = v99;
            }
            else {
              signed __int32 v103 = v101;
            }
            signed __int32 v104 = memcmp(v100, v102, v103);
            if (v96 < 0)
            {
              operator delete(v97);
              if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_155;
              }
            }
            else if ((v98 & 0x80) == 0)
            {
              goto LABEL_155;
            }
            operator delete(v218.__r_.__value_.__l.__data_);
LABEL_155:
            signed __int32 v91 = v99 < v101;
            if (v104) {
              signed __int32 v91 = v104 < 0;
            }
          }
          while (v91);
          __n128 v72 = v76;
        }
        while (v7 < v76);
      }
      BOOL v105 = v7 - 1;
      uint64_t v4 = v7 - 1 >= (uint64_t *)a1;
      BOOL v5 = v7 - 1 == (uint64_t *)a1;
      if (v7 - 1 != (uint64_t *)a1) {
        a1->i64[0] = *v105;
      }
      a4 = 0;
      *BOOL v105 = v69;
      a3 = v212;
    }
  }
  if ((a4 & 1) == 0)
  {
    if (v9 == (uint64_t *)a2) {
      return;
    }
    uint64_t v186 = v9 + 1;
    if (&a1->u64[1] == (unint64_t *)a2) {
      return;
    }
LABEL_327:
    BOOL v187 = (int8x16_t *)v186;
    signed __int32 v188 = operations_research::StatsGroup::StatString(void)const::$_0::operator()(a1->i64[1], a1->i64[0]);
    a1 = v187;
    if (!v188) {
      goto LABEL_326;
    }
    uint64_t v189 = v187->i64[0];
    signed __int32 v190 = v187->i64[0] + 8;
    while (1)
    {
      BOOL v192 = v187[-1].i64[0];
      v187->i64[0] = v187[-1].i64[1];
      if (*(char *)(v189 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v189 + 8), *(void *)(v189 + 16));
        if ((*(char *)(v192 + 31) & 0x80000000) == 0)
        {
LABEL_334:
          signed __int32 v194 = *(_OWORD *)(v192 + 8);
          v217.__r_.__value_.__r.__words[2] = *(void *)(v192 + 24);
          *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v194;
          goto LABEL_337;
        }
      }
      else
      {
        unint64_t v193 = *(_OWORD *)v190;
        v218.__r_.__value_.__r.__words[2] = *(void *)(v190 + 16);
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v193;
        if ((*(char *)(v192 + 31) & 0x80000000) == 0) {
          goto LABEL_334;
        }
      }
      std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v192 + 8), *(void *)(v192 + 16));
LABEL_337:
      signed __int32 v195 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
      BOOL v196 = (void *)v217.__r_.__value_.__r.__words[0];
      BOOL v197 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
      if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v198 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
      }
      else {
        BOOL v198 = v218.__r_.__value_.__l.__size_;
      }
      if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v199 = &v218;
      }
      else {
        uint64_t v199 = (std::string *)v218.__r_.__value_.__r.__words[0];
      }
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v200 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v200 = v217.__r_.__value_.__l.__size_;
      }
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v201 = &v217;
      }
      else {
        uint64_t v201 = (std::string *)v217.__r_.__value_.__r.__words[0];
      }
      if (v200 >= v198) {
        double v202 = v198;
      }
      else {
        double v202 = v200;
      }
      uint64_t v203 = memcmp(v199, v201, v202);
      if (v195 < 0)
      {
        operator delete(v196);
        if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_356:
        }
          operator delete(v218.__r_.__value_.__l.__data_);
      }
      else if (v197 < 0)
      {
        goto LABEL_356;
      }
      signed __int32 v191 = v198 < v200;
      if (v203) {
        signed __int32 v191 = v203 < 0;
      }
      BOOL v187 = (int8x16_t *)((char *)v187 - 8);
      if (!v191)
      {
        v187->i64[0] = v189;
        BOOL v187 = a1;
LABEL_326:
        uint64_t v186 = &v187->i64[1];
        if (&v187->u64[1] == (unint64_t *)a2) {
          return;
        }
        goto LABEL_327;
      }
    }
  }
  if (v9 == (uint64_t *)a2) {
    return;
  }
  BOOL v113 = v9 + 1;
  if (&a1->u64[1] == (unint64_t *)a2) {
    return;
  }
  BOOL v114 = 0;
  long long v115 = (uint64_t *)a1;
  while (2)
  {
    BOOL v118 = *v115;
    BOOL v117 = v115[1];
    long long v115 = v113;
    if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v117, v118)) {
      goto LABEL_203;
    }
    signed __int32 v213 = v115;
    uint64_t v119 = *v115;
    signed __int32 v120 = *v115 + 8;
    signed __int32 v121 = v114;
    while (2)
    {
      *(uint64_t *)((char *)&a1->i64[1] + v12std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = *(uint64_t *)((char *)a1->i64 + v121);
      if (!v121)
      {
        signed __int32 v116 = (uint64_t *)a1;
        goto LABEL_202;
      }
      BOOL v123 = *(uint64_t *)((char *)&a1->i64[-1] + v121);
      if (*(char *)(v119 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v119 + 8), *(void *)(v119 + 16));
        if (*(char *)(v123 + 31) < 0) {
          goto LABEL_214;
        }
LABEL_212:
        signed __int32 v125 = *(_OWORD *)(v123 + 8);
        v217.__r_.__value_.__r.__words[2] = *(void *)(v123 + 24);
        *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v125;
      }
      else
      {
        signed __int32 v124 = *(_OWORD *)v120;
        v218.__r_.__value_.__r.__words[2] = *(void *)(v120 + 16);
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v124;
        if ((*(char *)(v123 + 31) & 0x80000000) == 0) {
          goto LABEL_212;
        }
LABEL_214:
        std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v123 + 8), *(void *)(v123 + 16));
      }
      BOOL v126 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
      BOOL v127 = (void *)v217.__r_.__value_.__r.__words[0];
      signed __int32 v128 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
      if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        signed __int32 v129 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
      }
      else {
        signed __int32 v129 = v218.__r_.__value_.__l.__size_;
      }
      if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v130 = &v218;
      }
      else {
        BOOL v130 = (std::string *)v218.__r_.__value_.__r.__words[0];
      }
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v131 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      }
      else {
        BOOL v131 = v217.__r_.__value_.__l.__size_;
      }
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        signed __int32 v132 = &v217;
      }
      else {
        signed __int32 v132 = (std::string *)v217.__r_.__value_.__r.__words[0];
      }
      if (v131 >= v129) {
        signed __int32 v133 = v129;
      }
      else {
        signed __int32 v133 = v131;
      }
      unint64_t v134 = memcmp(v130, v132, v133);
      if (v126 < 0)
      {
        operator delete(v127);
        if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_234;
        }
      }
      else if (v128 < 0)
      {
LABEL_234:
        operator delete(v218.__r_.__value_.__l.__data_);
      }
      BOOL v122 = v129 < v131;
      if (v134) {
        BOOL v122 = v134 < 0;
      }
      v121 -= 8;
      if (v122) {
        continue;
      }
      break;
    }
    signed __int32 v116 = (uint64_t *)((char *)&a1->i64[1] + v121);
LABEL_202:
    *signed __int32 v116 = v119;
    long long v115 = v213;
LABEL_203:
    BOOL v113 = v115 + 1;
    v114 += 8;
    if (v115 + 1 != (uint64_t *)a2) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::anonymous namespace'::MatrixEntry *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      signed __int32 v7 = a2[-1].n128_i32[0];
      int v8 = a2 - 1;
      BOOL v9 = v7 == a1->n128_u32[0];
      BOOL v10 = v7 < (signed __int32)a1->n128_u32[0];
      if (v9) {
        BOOL v10 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
      }
      if (v10)
      {
        __n128 v11 = *a1;
        *a1 = *v8;
        *int v8 = v11;
      }
      return result;
    case 3:
      unint64_t v12 = a1 + 1;
      signed __int32 v13 = a1[1].n128_i32[0];
      signed __int32 v14 = a1[1].n128_i32[1];
      BOOL v15 = v13 < (signed __int32)a1->n128_u32[0];
      if (v13 == a1->n128_u32[0]) {
        BOOL v15 = v14 < (signed __int32)a1->n128_u32[1];
      }
      signed __int32 v17 = a2[-1].n128_i32[0];
      uint64_t v16 = a2 - 1;
      BOOL v18 = (signed __int32)a2[-1].n128_u32[1] < v14;
      BOOL v9 = v17 == v13;
      BOOL v19 = v17 < v13;
      if (v9) {
        BOOL v19 = v18;
      }
      if (v15)
      {
        if (v19)
        {
          __n128 v20 = *a1;
          *a1 = *v16;
LABEL_48:
          *uint64_t v16 = v20;
          return result;
        }
        __n128 v63 = *a1;
        *a1 = *v12;
        __n128 *v12 = v63;
        signed __int32 v64 = a2[-1].n128_i32[0];
        signed __int32 v65 = a1[1].n128_i32[0];
        BOOL v9 = v64 == v65;
        BOOL v66 = v64 < v65;
        if (v9) {
          BOOL v66 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)a1[1].n128_u32[1];
        }
        if (v66)
        {
          __n128 v20 = *v12;
          __n128 *v12 = *v16;
          goto LABEL_48;
        }
      }
      else if (v19)
      {
        __n128 v54 = *v12;
        __n128 *v12 = *v16;
        *uint64_t v16 = v54;
        signed __int32 v55 = a1[1].n128_i32[0];
        BOOL v9 = v55 == a1->n128_u32[0];
        BOOL v56 = v55 < (signed __int32)a1->n128_u32[0];
        if (v9) {
          BOOL v56 = (signed __int32)a1[1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
        }
        if (v56)
        {
          __n128 v57 = *a1;
          *a1 = *v12;
          __n128 *v12 = v57;
        }
      }
      return result;
    case 4:
      return 1;
    case 5:
      signed __int32 v33 = a1 + 1;
      signed __int32 v34 = a1 + 2;
      BOOL v35 = a1 + 3;
      signed __int32 v36 = a2[-1].n128_i32[0];
      signed __int32 v37 = a2[-1].n128_i32[1];
      int v38 = a2 - 1;
      signed __int32 v39 = a1[3].n128_i32[0];
      BOOL v40 = v37 < (signed __int32)a1[3].n128_u32[1];
      BOOL v9 = v36 == v39;
      BOOL v41 = v36 < v39;
      if (v9) {
        BOOL v41 = v40;
      }
      if (v41)
      {
        __n128 v42 = *v35;
        __n128 *v35 = *v38;
        *int v38 = v42;
        signed __int32 v43 = a1[3].n128_i32[0];
        signed __int32 v44 = a1[2].n128_i32[0];
        BOOL v9 = v43 == v44;
        BOOL v45 = v43 < v44;
        if (v9) {
          BOOL v45 = (signed __int32)a1[3].n128_u32[1] < (signed __int32)a1[2].n128_u32[1];
        }
        if (v45)
        {
          __n128 v46 = *v34;
          *signed __int32 v34 = *v35;
          __n128 *v35 = v46;
          signed __int32 v47 = a1[2].n128_i32[0];
          signed __int32 v48 = a1[1].n128_i32[0];
          BOOL v9 = v47 == v48;
          BOOL v49 = v47 < v48;
          if (v9) {
            BOOL v49 = (signed __int32)a1[2].n128_u32[1] < (signed __int32)a1[1].n128_u32[1];
          }
          if (v49)
          {
            __n128 v50 = *v33;
            *signed __int32 v33 = *v34;
            *signed __int32 v34 = v50;
            signed __int32 v51 = a1[1].n128_i32[0];
            BOOL v9 = v51 == a1->n128_u32[0];
            BOOL v52 = v51 < (signed __int32)a1->n128_u32[0];
            if (v9) {
              BOOL v52 = (signed __int32)a1[1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
            }
            if (v52)
            {
              __n128 v53 = *a1;
              *a1 = *v33;
              *signed __int32 v33 = v53;
            }
          }
        }
      }
      return 1;
    default:
      signed __int32 v21 = a1 + 2;
      signed __int32 v22 = a1[2].n128_i32[0];
      BOOL v23 = a1 + 1;
      signed __int32 v24 = a1[1].n128_i32[0];
      signed __int32 v25 = a1[1].n128_i32[1];
      signed __int32 v26 = a1->n128_u32[0];
      signed __int32 v27 = a1->n128_i32[1];
      BOOL v28 = v24 < (signed __int32)a1->n128_u32[0];
      if (v24 == a1->n128_u32[0]) {
        BOOL v28 = v25 < v27;
      }
      signed __int32 v29 = a1[2].n128_i32[1];
      BOOL v30 = v29 < v25;
      BOOL v9 = v22 == v24;
      BOOL v31 = v22 < v24;
      if (v9) {
        BOOL v31 = v30;
      }
      if (v28)
      {
        if (v31)
        {
          __n128 v32 = *a1;
          *a1 = *v21;
LABEL_54:
          __n128 *v21 = v32;
          goto LABEL_55;
        }
        __n128 v67 = *a1;
        *a1 = *v23;
        *BOOL v23 = v67;
        signed __int32 v68 = a1[1].n128_i32[0];
        BOOL v9 = v22 == v68;
        BOOL v69 = v22 < v68;
        if (v9) {
          BOOL v69 = v29 < (signed __int32)a1[1].n128_u32[1];
        }
        if (v69)
        {
          __n128 v32 = *v23;
          *BOOL v23 = *v21;
          goto LABEL_54;
        }
      }
      else if (v31)
      {
        __n128 v58 = *v23;
        *BOOL v23 = *v21;
        __n128 *v21 = v58;
        signed __int32 v59 = a1[1].n128_i32[0];
        BOOL v60 = (signed __int32)a1[1].n128_u32[1] < v27;
        BOOL v9 = v59 == v26;
        BOOL v61 = v59 < v26;
        if (v9) {
          BOOL v61 = v60;
        }
        if (v61)
        {
          __n128 v62 = *a1;
          *a1 = *v23;
          *BOOL v23 = v62;
        }
      }
LABEL_55:
      BOOL v70 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v71 = 0;
      int v72 = 0;
      while (1)
      {
        signed __int32 v73 = v70->n128_u32[0];
        signed __int32 v74 = v70->n128_i32[1];
        signed __int32 v75 = v21->n128_u32[0];
        BOOL v76 = v74 < (signed __int32)v21->n128_u32[1];
        BOOL v9 = v70->n128_u32[0] == v75;
        BOOL v77 = (signed __int32)v70->n128_u32[0] < v75;
        if (!v9) {
          BOOL v76 = v77;
        }
        if (v76) {
          break;
        }
LABEL_58:
        signed __int32 v21 = v70;
        v71 += 16;
        if (++v70 == a2) {
          return 1;
        }
      }
      unint64_t v78 = v70->n128_u64[1];
      uint64_t v79 = v71;
      do
      {
        BOOL v80 = (char *)a1 + v79;
        *(__n128 *)((char *)a1 + v79 + 48) = *(__n128 *)((char *)a1 + v79 + 32);
        if (v79 == -32)
        {
          a1->n128_u32[0] = v73;
          a1->n128_u32[1] = v74;
          a1->n128_u64[1] = v78;
          if (++v72 != 8) {
            goto LABEL_58;
          }
          return &v70[1] == a2;
        }
        signed __int32 v81 = *((_DWORD *)v80 + 4);
        BOOL v82 = v74 < *((_DWORD *)v80 + 5);
        BOOL v9 = v73 == v81;
        BOOL v83 = v73 < v81;
        if (!v9) {
          BOOL v82 = v83;
        }
        v79 -= 16;
      }
      while (v82);
      uint64_t v84 = (char *)a1 + v79;
      *((_DWORD *)v84 + 12) = v73;
      *((_DWORD *)v84 + 13) = v74;
      *((void *)v84 + 7) = v78;
      if (++v72 != 8) {
        goto LABEL_58;
      }
      return &v70[1] == a2;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::anonymous namespace'::MatrixEntry *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5 = a2->n128_u32[0];
  signed __int32 v6 = a2->n128_i32[1];
  BOOL v7 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
  if (a2->n128_u32[0] == a1->n128_u32[0]) {
    BOOL v7 = v6 < (signed __int32)a1->n128_u32[1];
  }
  BOOL v8 = (signed __int32)a3->n128_u32[1] < v6;
  BOOL v9 = a3->n128_u32[0] == v5;
  BOOL v10 = (signed __int32)a3->n128_u32[0] < v5;
  if (v9) {
    BOOL v10 = v8;
  }
  if (v7)
  {
    if (v10)
    {
      BOOL result = *a1;
      *a1 = *a3;
LABEL_17:
      *a3 = result;
      goto LABEL_18;
    }
    BOOL result = *a1;
    *a1 = *a2;
    *a2 = result;
    BOOL v12 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0]) {
      BOOL v12 = (signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1];
    }
    if (v12)
    {
      BOOL result = *a2;
      *a2 = *a3;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    BOOL result = *a2;
    *a2 = *a3;
    *a3 = result;
    BOOL v11 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
    if (a2->n128_u32[0] == a1->n128_u32[0]) {
      BOOL v11 = (signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1];
    }
    if (v11)
    {
      BOOL result = *a1;
      *a1 = *a2;
      *a2 = result;
    }
  }
LABEL_18:
  BOOL v13 = (signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0];
  if (a4->n128_u32[0] == a3->n128_u32[0]) {
    BOOL v13 = (signed __int32)a4->n128_u32[1] < (signed __int32)a3->n128_u32[1];
  }
  if (v13)
  {
    BOOL result = *a3;
    *a3 = *a4;
    *a4 = result;
    BOOL v14 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0]) {
      BOOL v14 = (signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1];
    }
    if (v14)
    {
      BOOL result = *a2;
      *a2 = *a3;
      *a3 = result;
      BOOL v15 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
      if (a2->n128_u32[0] == a1->n128_u32[0]) {
        BOOL v15 = (signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1];
      }
      if (v15)
      {
        BOOL result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  signed __int32 v5 = (void *)a1[1];
  uint64_t v4 = a1[2];
  signed __int32 v6 = (char *)v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_43;
      }
      uint64_t v16 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      signed __int32 v6 = (char *)&v5[4 * (v16 & 0xFFFFFFFFFFFFFFELL)];
      signed __int32 v17 = v5 + 4;
      uint64_t v18 = v16 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 4) = 0;
        *signed __int32 v17 = 0;
        v17 += 8;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_43:
        do
        {
          *(void *)signed __int32 v6 = 0;
          v6 += 32;
        }
        while (v6 != (char *)&v5[4 * a2]);
      }
      signed __int32 v6 = (char *)&v5[4 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  uint64_t v7 = ((uint64_t)v5 - *a1) >> 5;
  if ((v7 + a2) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v4 - *a1;
  uint64_t v9 = v8 >> 4;
  if (v8 >> 4 <= v7 + a2) {
    uint64_t v9 = v7 + a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v11 = (char *)operator new(32 * v10);
    uint64_t v12 = (uint64_t)&v11[32 * v7];
    uint64_t v13 = v12 + 32 * a2;
    BOOL v14 = (void *)v12;
    uint64_t v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v15) {
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v19 = v15 + 1;
    BOOL v14 = (void *)(v12 + 32 * (v19 & 0xFFFFFFFFFFFFFFELL));
    __n128 v20 = (void *)(v12 + 32);
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 4) = 0;
      void *v20 = 0;
      v20 += 8;
      v21 -= 2;
    }
    while (v21);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v11 = 0;
  uint64_t v12 = 32 * v7;
  uint64_t v13 = 32 * v7 + 32 * a2;
  BOOL v14 = (void *)(32 * v7);
  uint64_t v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (v15) {
    goto LABEL_21;
  }
  do
  {
LABEL_24:
    void *v14 = 0;
    v14 += 4;
  }
  while (v14 != (void *)v13);
LABEL_25:
  signed __int32 v22 = &v11[32 * v10];
  BOOL v23 = (char *)*a1;
  if (v5 == (void *)*a1)
  {
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v22;
    if (!v5) {
      return;
    }
    goto LABEL_34;
  }
  do
  {
    uint64_t v24 = *((void *)v6 - 4);
    v6 -= 32;
    *(void *)(v12 - 32) = v24;
    v12 -= 32;
    long long v25 = *(_OWORD *)(v6 + 8);
    *(void *)(v12 + 24) = *((void *)v6 + 3);
    *(_OWORD *)(v12 + 8) = v25;
    *(void *)signed __int32 v6 = 0;
  }
  while (v6 != v23);
  signed __int32 v26 = (char *)*a1;
  signed __int32 v6 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = (uint64_t)v22;
  if (v6 != v26)
  {
    signed __int32 v27 = v6;
    do
    {
      char v28 = *(v27 - 32);
      v27 -= 32;
      if (v28) {
        operator delete(*((void **)v6 - 3));
      }
      signed __int32 v6 = v27;
    }
    while (v27 != v26);
    signed __int32 v6 = v26;
  }
  if (v6)
  {
LABEL_34:
    operator delete(v6);
  }
}

void std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(uint64_t a1, unint64_t a2)
{
  signed __int32 v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      signed __int32 v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    signed __int32 v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v11 = (char *)operator new(24 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    BOOL v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      signed __int32 v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void **)a1;
    signed __int32 v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      __n128 v20 = v5;
      do
      {
        signed __int32 v22 = (void *)*(v20 - 3);
        v20 -= 3;
        uint64_t v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        signed __int32 v5 = v20;
      }
      while (v20 != v19);
      signed __int32 v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}