uint64_t sub_25D944570()
{
  uint64_t v0;

  return swift_deallocObject();
}

id *partial apply for closure #1 in static Transformer<>.transformer(previousIntent:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in static Transformer<>.transformer(previousIntent:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_summarise_common_PaymentAccount();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSearchForAccountsIntent?);
  return String.init<A>(describing:)();
}

id INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(void *a1, uint64_t a2, void *a3)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc INSearchForAccountsIntent.init(accountNickname:accountType:organizationName:requestedBalanceType:)(a1, a2, a3);
}

uint64_t implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for INSearchForAccountsIntent();
  lazy protocol witness table accessor for type INSearchForAccountsIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t sub_25D945C48()
{
  return swift_deallocObject();
}

uint64_t sub_25D947228()
{
  return swift_deallocObject();
}

uint64_t default argument 0 of static Transformer<>.transformer(appBundleId:)()
{
  uint64_t v1 = *(void *)AppUtil.usoNamespace.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static Transformer<>.transformer(appBundleId:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  type metadata accessor for INPerson();
  type metadata accessor for UsoEntityBuilder_common_Person();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v51 = a4;
  uint64_t v59 = a1;
  uint64_t v61 = a2;
  uint64_t v60 = a3;
  v91 = 0;
  id v90 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v62 = 0;
  uint64_t v52 = type metadata accessor for UsoIdentifier();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  unint64_t v55 = (*(void *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v52);
  v56 = (char *)v16 - v55;
  unint64_t v57 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v62);
  uint64_t v58 = (uint64_t)v16 - v57;
  uint64_t v63 = type metadata accessor for PersonNameComponents();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = v63 - 8;
  uint64_t v67 = *(void *)(v64 + 64);
  unint64_t v66 = (v67 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v62);
  v68 = (char *)v16 - v66;
  unint64_t v69 = (v67 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  v70 = (char *)v16 - v69;
  v91 = (char *)v16 - v69;
  id v71 = *v5;
  id v90 = v71;
  uint64_t v88 = v6;
  uint64_t v89 = v7;
  type metadata accessor for UsoEntityBuilder_common_Person();
  uint64_t v72 = UsoEntityBuilder_common_Person.__allocating_init()();
  uint64_t v87 = v72;
  id v73 = objc_msgSend(v71, sel_nameComponents);
  if (v73)
  {
    id v50 = v73;
    id v49 = v73;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v58, v68, v63);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v58, 0, 1, v63);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v58, 1, 1, v63);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v58, 1, v63) == 1)
  {
    outlined destroy of PersonNameComponents?(v58);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v70, v58, v63);
    type metadata accessor for UsoEntityBuilder_common_PersonName();
    uint64_t v46 = UsoEntityBuilder_common_PersonName.__allocating_init()();
    uint64_t v86 = v46;
    uint64_t v47 = PersonNameComponents.nickname.getter();
    uint64_t v48 = v8;
    if (v8)
    {
      uint64_t v44 = v47;
      uint64_t v45 = v48;
      uint64_t v43 = v48;
      uint64_t v74 = v47;
      uint64_t v75 = v48;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v41 = PersonNameComponents.givenName.getter();
    uint64_t v42 = v9;
    if (v9)
    {
      uint64_t v39 = v41;
      uint64_t v40 = v42;
      uint64_t v38 = v42;
      uint64_t v76 = v41;
      uint64_t v77 = v42;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setGivenName(value:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = PersonNameComponents.familyName.getter();
    uint64_t v37 = v10;
    if (v10)
    {
      uint64_t v34 = v36;
      uint64_t v35 = v37;
      uint64_t v33 = v37;
      uint64_t v78 = v36;
      uint64_t v79 = v37;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setFamilyName(value:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = PersonNameComponents.middleName.getter();
    uint64_t v32 = v11;
    if (v11)
    {
      uint64_t v29 = v31;
      uint64_t v30 = v32;
      uint64_t v28 = v32;
      uint64_t v80 = v31;
      uint64_t v81 = v32;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setMiddleName(value:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = PersonNameComponents.namePrefix.getter();
    uint64_t v27 = v12;
    if (v12)
    {
      uint64_t v24 = v26;
      uint64_t v25 = v27;
      uint64_t v23 = v27;
      uint64_t v82 = v26;
      uint64_t v83 = v27;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePrefix(value:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = PersonNameComponents.nameSuffix.getter();
    uint64_t v22 = v13;
    if (v13)
    {
      uint64_t v19 = v21;
      uint64_t v20 = v22;
      uint64_t v18 = v22;
      uint64_t v84 = v21;
      uint64_t v85 = v22;
      dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePostfix(value:)();
      swift_bridgeObjectRelease();
    }
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)();
    swift_release();
    uint64_t v17 = dispatch thunk of UsoEntityBuilder_common_Person.name.getter();
    if (v17)
    {
      v16[3] = v17;
      v16[2] = v17;
      v16[0] = INPerson.uniqueContactIdentifier.getter();
      v16[1] = v14;
      swift_bridgeObjectRetain();
      UsoIdentifierNamespace.rawValue.getter(0);
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v52);
      swift_release();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v70, v63);
  }
  swift_retain();
  uint64_t *v51 = v72;
  return swift_release();
}

uint64_t sub_25D947CF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Transformer<>.transformer(appBundleId:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  __swift_allocate_value_buffer(v1, static Transformer<>.transformer);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for UsoEntityBuilder();
  type metadata accessor for UsoEntity();
  return Transformer.init(transform:)();
}

{
  uint64_t v1;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  __swift_allocate_value_buffer(v1, static Transformer<>.transformer);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for INPerson();
  type metadata accessor for UsoEntity();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v19 = MEMORY[0x2611B8260]();
  if (v19)
  {
    swift_retain();
    *a1 = v19;
    return swift_release();
  }
  else
  {
    uint64_t v17 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    v16 = v1;
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntityBuilder();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v12 = String.init(stringInterpolation:)();
    uint64_t v13 = v4;
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v10 = String.init(stringInterpolation:)();
    uint64_t v11 = v7;
    uint64_t v14 = PaymentsError.errorDescription.getter();
    uint64_t v15 = v8;
    outlined consume of PaymentsError(v12, v13, v10, v11, 0, 0, 5);
    uint64_t *v16 = v14;
    v16[1] = v15;
    (*(void (**)(void))(*(void *)(v17 - 8) + 104))();
    return swift_willThrow();
  }
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor()
{
  if (one-time initialization token for transformer != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  return __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
}

{
  uint64_t v0;

  if (one-time initialization token for transformer != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  return __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
}

uint64_t static Transformer<>.transformer(contactResolver:)(uint64_t a1)
{
  uint64_t v4 = a1;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v3);
  uint64_t v2 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v3, (void *)(v2 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(contactResolver:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v75 = a1;
  uint64_t v78 = a2;
  uint64_t v73 = 0;
  uint64_t v61 = closure #1 in closure #1 in static Transformer<>.transformer(contactResolver:);
  uint64_t v62 = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  uint64_t v63 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
  uint64_t v64 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v104 = 0;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v68 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = v68 - 8;
  unint64_t v71 = (*(void *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v72 = (char *)v27 - v71;
  uint64_t v82 = type metadata accessor for ContactResolverConfig();
  uint64_t v79 = *(void *)(v82 - 8);
  uint64_t v80 = v82 - 8;
  unint64_t v74 = (*(void *)(v79 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v85 = (char *)v27 - v74;
  unint64_t v76 = (*(void *)(*(void *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v3 = (uint64_t *)MEMORY[0x270FA5388](v75);
  uint64_t v77 = (uint64_t)v27 - v76;
  v104 = (char *)v27 - v76;
  uint64_t v84 = *v3;
  uint64_t v103 = v84;
  uint64_t v102 = v4;
  Swift::String v5 = SignpostName.transformContactQueryToINPersons.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v77);
  uint64_t v87 = v78[3];
  uint64_t v88 = v78[4];
  __swift_project_boxed_opaque_existential_1(v78, v87);
  uint64_t v81 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
  uint64_t v83 = &v101;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v85, v81, v82);
  swift_endAccess();
  uint64_t v6 = v86;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v88 + 8))(v84, v85, v87);
  uint64_t v89 = v6;
  uint64_t v90 = v7;
  uint64_t v91 = v6;
  if (v6)
  {
    v27[0] = v91;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v85, v82);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    return outlined destroy of Signpost.OpenSignpost(v77);
  }
  else
  {
    uint64_t v57 = v90;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v85, v82);
    uint64_t v100 = v57;
    uint64_t v99 = v57;
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    uint64_t v8 = v89;
    uint64_t result = Sequence.forEach(_:)();
    uint64_t v59 = v8;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = v72;
      uint64_t v11 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v10, v11, v68);
      swift_bridgeObjectRetain();
      uint64_t v46 = 7;
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v57;
      swift_retain();
      uint64_t v45 = 32;
      uint64_t v12 = swift_allocObject();
      uint64_t v13 = v39;
      uint64_t v47 = v12;
      *(void *)(v12 + 16) = v62;
      *(void *)(v12 + 24) = v13;
      swift_release();
      unint64_t v55 = Logger.logObject.getter();
      int v56 = static os_log_type_t.debug.getter();
      uint64_t v42 = &v97;
      uint64_t v97 = 12;
      unint64_t v40 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v43 = v98;
      uint64_t v44 = 17;
      uint64_t v49 = swift_allocObject();
      *(unsigned char *)(v49 + 16) = 32;
      uint64_t v50 = swift_allocObject();
      *(unsigned char *)(v50 + 16) = 8;
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = v47;
      uint64_t v48 = v14;
      *(void *)(v14 + 16) = v63;
      *(void *)(v14 + 24) = v15;
      uint64_t v16 = swift_allocObject();
      uint64_t v17 = v48;
      uint64_t v52 = v16;
      *(void *)(v16 + 16) = v64;
      *(void *)(v16 + 24) = v17;
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v51 = _allocateUninitializedArray<A>(_:)();
      uint64_t v53 = v18;
      swift_retain();
      uint64_t v19 = v49;
      uint64_t v20 = v53;
      *uint64_t v53 = v65;
      v20[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
      swift_retain();
      uint64_t v21 = v50;
      uint64_t v22 = v53;
      v53[2] = v66;
      v22[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
      swift_retain();
      uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
      uint64_t v24 = v53;
      v53[4] = v67;
      v24[5] = v23;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v55, (os_log_type_t)v56))
      {
        uint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v33 = createStorage<A>(capacity:type:)(0);
        uint64_t v34 = createStorage<A>(capacity:type:)(1);
        uint64_t v35 = &v96;
        v96 = v32;
        uint64_t v36 = &v95;
        uint64_t v95 = v33;
        uint64_t v37 = &v94;
        uint64_t v94 = v34;
        serialize(_:at:)(2, &v96);
        serialize(_:at:)(1, v35);
        uint64_t v25 = v59;
        v92 = v65;
        uint64_t v93 = v49;
        closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37);
        uint64_t v38 = v25;
        if (v25)
        {
          __break(1u);
        }
        else
        {
          v92 = v66;
          uint64_t v93 = v50;
          closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
          uint64_t v29 = 0;
          uint64_t v26 = v29;
          v92 = v67;
          uint64_t v93 = v52;
          closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
          uint64_t v28 = v26;
          _os_log_impl(&dword_25D85A000, v55, (os_log_type_t)v56, "#Transformer for resolving INPersons from ContactQuery returning persons: %s", v32, v43);
          destroyStorage<A>(_:count:)(v33, 0, v31);
          destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v32, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v30 = v28;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v30 = v59;
      }
      v27[1] = v30;

      (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v68);
      swift_bridgeObjectRetain();
      *uint64_t v60 = v57;
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      return outlined destroy of Signpost.OpenSignpost(v77);
    }
  }
  return result;
}

uint64_t sub_25D948D3C()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(contactResolver:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Transformer<>.transformer(contactResolver:)(a1, (void *)(v2 + 16), a2);
}

void closure #1 in closure #1 in static Transformer<>.transformer(contactResolver:)(id *a1)
{
  id v8 = *a1;
  id v9 = objc_msgSend(*a1, sel_siriMatches);
  if (v9)
  {
    type metadata accessor for INPerson();
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    uint64_t v1 = _ArrayProtocol.filter(_:)();
    if (v7)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = v1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    type metadata accessor for INPerson();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setAlternatives_, isa);
  }
  else
  {
    objc_msgSend(v8, sel_setAlternatives_, 0);
  }
}

BOOL closure #1 in closure #1 in closure #1 in static Transformer<>.transformer(contactResolver:)(id *a1)
{
  id v11 = *a1;
  id v12 = objc_msgSend(*a1, sel_contactIdentifier);
  if (v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v1;

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  outlined destroy of String.UTF8View();
  id v2 = v11;
  if (v10)
  {
    BOOL v8 = 1;
  }
  else
  {
    id v7 = objc_msgSend(v11, sel_customIdentifier);
    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v3;

      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    outlined destroy of String.UTF8View();
    BOOL v8 = v6 != 0;
  }

  return v8;
}

uint64_t closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void (*v26)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v19 = a2;
  uint64_t v21 = a1;
  uint64_t v44 = 0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntityBuilder_common_Person>);
  uint64_t v30 = *(void *)(v33 - 8);
  uint64_t v31 = v33 - 8;
  unint64_t v20 = (*(void *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)v12 - v20;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntityBuilder, UsoEntity>);
  uint64_t v23 = *(void *)(v27 - 8);
  uint64_t v24 = v27 - 8;
  unint64_t v22 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v2 = (uint64_t *)MEMORY[0x270FA5388](v21);
  uint64_t v3 = (char *)v12 - v22;
  uint64_t v25 = (char *)v12 - v22;
  uint64_t v35 = *v2;
  uint64_t v44 = v35;
  uint64_t v4 = Transformer<>.transformer.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v3, v4, v27);
  uint64_t v26 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v28 = v5;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v27);
  uint64_t v6 = default argument 0 of static Transformer<>.transformer(appBundleId:)();
  uint64_t v29 = v7;
  static Transformer<>.transformer(appBundleId:)(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v37 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v34 = v8;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v33);
  uint64_t v9 = v36;
  uint32_t v43 = v35;
  v37(&v42, &v43);
  uint64_t v38 = v9;
  uint64_t v39 = v9;
  if (v9)
  {
    uint64_t v14 = v39;
    swift_release();
    uint64_t result = swift_release();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v16 = v42;
    swift_release();
    uint64_t v10 = v38;
    unint64_t v41 = v16;
    v26(&v40, &v41);
    uint64_t v17 = v10;
    uint64_t v18 = v10;
    if (v10)
    {
      v12[1] = v18;
      swift_release();
      return swift_release();
    }
    else
    {
      uint64_t v13 = v40;
      swift_release();
      uint64_t result = swift_release();
      *uint64_t v19 = v13;
    }
  }
  return result;
}

uint64_t sub_25D9495CC()
{
  return swift_deallocObject();
}

id @nonobjc NSDecimalNumber.init(value:)()
{
  return objc_msgSend(v0, sel_initWithFloat_);
}

id @nonobjc INCurrencyAmount.init(amount:currencyCode:)(void *a1, uint64_t a2)
{
  id v4 = (id)MEMORY[0x2611B9130](a2);
  id v6 = objc_msgSend(v3, sel_initWithAmount_currencyCode_, a1);

  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc INSendPaymentIntent.init(payee:currencyAmount:note:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = MEMORY[0x2611B9130](a3);
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(v11, sel_initWithPayee_currencyAmount_note_, a1, a2, v8);
  }
  else
  {
    id v4 = objc_msgSend(v11, sel_initWithPayee_currencyAmount_note_, a1, a2, 0);
  }
  id v7 = v4;

  return v7;
}

id @nonobjc INRequestPaymentIntent.init(payer:currencyAmount:note:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = MEMORY[0x2611B9130](a3);
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(v11, sel_initWithPayer_currencyAmount_note_, a1, a2, v8);
  }
  else
  {
    id v4 = objc_msgSend(v11, sel_initWithPayer_currencyAmount_note_, a1, a2, 0);
  }
  id v7 = v4;

  return v7;
}

id @nonobjc INSearchForAccountsIntent.init(accountNickname:accountType:organizationName:requestedBalanceType:)(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_msgSend(v3, sel_initWithAccountNickname_accountType_organizationName_requestedBalanceType_, a1, a2, a2);

  return v7;
}

uint64_t sub_25D9498A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9498E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D949914()
{
  return swift_deallocObject();
}

uint64_t sub_25D949940()
{
  return swift_deallocObject();
}

uint64_t sub_25D949980()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    type metadata accessor for TransformationError();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined consume of PaymentsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7)
  {
    uint64_t v8 = a7;
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    switch(v8)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 2:
      case 3:
      case 5:
      case 8:
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 9:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 15:
      case 16:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:)();
}

uint64_t sub_25D949C78()
{
  return swift_deallocObject();
}

uint64_t sub_25D949CA4()
{
  return swift_deallocObject();
}

uint64_t sub_25D949CD0()
{
  return swift_deallocObject();
}

uint64_t sub_25D949D10()
{
  return swift_deallocObject();
}

uint64_t sub_25D949D50()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:)(*(void **)(v0 + 16));
}

uint64_t sub_25D949D98()
{
  return swift_deallocObject();
}

uint64_t sub_25D949DC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D949DF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D949E30()
{
  return swift_deallocObject();
}

uint64_t sub_25D949E70()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)()
{
  return implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:)(*(void **)(v0 + 16));
}

uint64_t sub_25D949EB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D949EE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D949F10()
{
  return swift_deallocObject();
}

uint64_t sub_25D949F50()
{
  return swift_deallocObject();
}

uint64_t sub_25D949F98()
{
  return swift_deallocObject();
}

uint64_t sub_25D949FC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D949FF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A030()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A070()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A0B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A0DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A108()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A148()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A188()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A1C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A1F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A220()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A260()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A2A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A2D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A300()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A340()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A380()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A3C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A3EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A418()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A458()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A498()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A4D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A504()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A530()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A570()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type INAccountType and conformance INAccountType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INAccountType and conformance INAccountType;
  if (!lazy protocol witness table cache variable for type INAccountType and conformance INAccountType)
  {
    type metadata accessor for INAccountType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INAccountType and conformance INAccountType);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_25D94A63C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A668()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A694()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A6D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A714()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

uint64_t sub_25D94A75C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A788()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A7B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A7F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A834()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A874()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void **)(v0 + 16));
}

uint64_t sub_25D94A8BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A8E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A914()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A954()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

{
  return implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_25D94A99C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A9C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94A9F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AA34()
{
  return swift_deallocObject();
}

void *outlined init with copy of ContactQuery?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for ContactQuery();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of ContactQuery?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ContactQuery();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D94AC4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_25D94AC80()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  uint64_t result = *(void *)(v0 + 16);
  specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
  return result;
}

uint64_t sub_25D94ACCC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_25D94AD18()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AD44()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AD70()
{
  return swift_deallocObject();
}

uint64_t sub_25D94ADB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94ADF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AE1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AE48()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AE88()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AEC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AEF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AF20()
{
  return swift_deallocObject();
}

uint64_t sub_25D94AF60()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSDecimalNumber()
{
  uint64_t v2 = lazy cache variable for type metadata for NSDecimalNumber;
  if (!lazy cache variable for type metadata for NSDecimalNumber)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSDecimalNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoIdentifier]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UsoIdentifier] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D94B13C()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  type metadata accessor for ContactQuery();

  return implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)();
}

uint64_t sub_25D94B270()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B29C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B2C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B308()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B348()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(*(void *)(v0 + 16));
}

uint64_t sub_25D94B390()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B3BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B3E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B428()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(v0);
}

uint64_t sub_25D94B470()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B49C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B4C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B508()
{
  return swift_deallocObject();
}

void *outlined assign with take of ContactQuery?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for ContactQuery();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[INPerson]?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[INPerson]?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[INPerson]?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INRequestPaymentIntent and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject)
  {
    type metadata accessor for INRequestPaymentIntent();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INRequestPaymentIntent and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D94B888()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B8B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B8E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B920()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B960()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B9A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94B9D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BA00()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BA40()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BA80()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BAC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BAF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BB20()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BB60()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BBA0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BBE0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BC0C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BC38()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BC78()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BCB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BCE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BD24()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BD64()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BD90()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BDBC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BDFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BE3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BE68()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BE94()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BED4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BF14()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BF40()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BF6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BFAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94BFEC()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D94C0B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C0E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C110()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C150()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C190()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C1D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C1FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C228()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C268()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C2A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C2D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C300()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C340()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type INSendPaymentIntent and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject)
  {
    type metadata accessor for INSendPaymentIntent();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSendPaymentIntent and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D94C40C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C438()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C464()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C4A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C4E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C524()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C550()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C57C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C5BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C5FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C63C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C668()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C694()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C6D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C71C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C748()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C774()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C7B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C7F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C820()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C860()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C8A0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C8CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C8F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C938()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C978()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C9A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94C9D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CA10()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CA50()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CA7C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CAA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CAE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CB28()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContactQuery() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D94CBF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CC20()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CC4C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CC8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CCCC()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CD0C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CD38()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CD64()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CDA4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CDE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CE10()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CE3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D94CE7C()
{
  return swift_deallocObject();
}

uint64_t static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[42] = a6;
  v6[41] = a5;
  v6[40] = a4;
  v6[39] = a2;
  v6[38] = a1;
  v6[24] = v6;
  v6[25] = 0;
  v6[26] = 0;
  v6[27] = 0;
  v6[28] = 0;
  v6[29] = 0;
  v6[31] = 0;
  v6[33] = 0;
  v6[22] = 0;
  v6[23] = 0;
  v6[37] = 0;
  v6[17] = 0;
  v6[18] = 0;
  v6[19] = 0;
  v6[43] = type metadata accessor for SiriPaymentsSnippetModel();
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  v6[25] = a2;
  v6[26] = a3;
  v6[27] = a4;
  v6[28] = a5;
  v6[29] = a6;
  return MEMORY[0x270FA2498](static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:), 0);
}

uint64_t static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[39];
  v0[24] = v0;
  v0[30] = v2;
  outlined init with copy of GlobalsProviding(v1, (uint64_t)(v0 + 2));
  *(void *)(swift_task_alloc() + 16) = v0 + 2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  uint64_t v38 = Sequence.compactMap<A>(_:)();
  v0[46] = v38;
  uint64_t v35 = *(void *)(v37 + 312);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v37 + 16);
  *(void *)(v37 + 248) = v38;
  *(void *)(v37 + 256) = v35;
  uint64_t v36 = Sequence.compactMap<A>(_:)();
  *(void *)(v37 + 376) = v36;
  uint64_t v3 = *(void **)(v37 + 328);
  *(void *)(v37 + 264) = v36;
  id v32 = objc_msgSend(v3, sel_dialog);
  type metadata accessor for DialogElement();
  uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  *(void *)(v37 + 280) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogElement]);
  lazy protocol witness table accessor for type [DialogElement] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  uint64_t v34 = *(void **)(v37 + 272);
  swift_bridgeObjectRelease();
  if (v34)
  {
    id v27 = objc_msgSend(v34, sel_fullPrint);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v4;

    uint64_t v30 = v28;
    uint64_t v31 = v29;
  }
  else
  {

    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  *(void *)(v37 + 160) = v30;
  *(void *)(v37 + 168) = v31;
  if (*(void *)(v37 + 168))
  {
    Swift::String v39 = *(Swift::String *)(v37 + 160);
  }
  else
  {
    Swift::String v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  uint64_t v5 = *(void *)(v37 + 336);
  uint64_t v6 = *(void *)(v37 + 312);
  *(void *)(v37 + 384) = v39._object;
  *(Swift::String *)(v37 + 176) = v39;
  *(void *)(v37 + 288) = v6;
  outlined init with copy of GlobalsProviding(v5, v37 + 56);
  *(void *)(swift_task_alloc() + 16) = v37 + 56;
  uint64_t rawValue = Sequence.compactMap<A>(_:)();
  *(void *)(v37 + 392) = rawValue;
  uint64_t v21 = *(char **)(v37 + 360);
  uint64_t v19 = *(void *)(v37 + 352);
  uint64_t v20 = *(void *)(v37 + 344);
  id v23 = *(id *)(v37 + 328);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v37 + 56);
  *(void *)(v37 + 296) = rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSJSONWritingOptions v16 = NSJSONWritingOptions.init(rawValue:)(rawValue);
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  *(void *)(v37 + 400) = v16;
  *(void *)(v37 + 408) = v8;
  *(void *)(v37 + 136) = v16;
  *(void *)(v37 + 144) = v7;
  *(void *)(v37 + 152) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)uint64_t v19 = v16;
  *(void *)(v19 + 8) = v17;
  *(void *)(v19 + 16) = v18;
  swift_storeEnumTagMultiPayload();
  outlined init with take of SiriPaymentsSnippetModel((char *)v19, v21);
  type metadata accessor for ResponseFactory();
  *(void *)(v37 + 416) = ResponseFactory.__allocating_init()();
  *(void *)(v37 + 120) = v20;
  *(void *)(v37 + 128) = lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 96));
  outlined init with copy of SiriPaymentsSnippetModel((uint64_t *)v21, boxed_opaque_existential_1);
  type metadata accessor for DialogExecutionResult();
  uint64_t v24 = _allocateUninitializedArray<A>(_:)();
  unint64_t v22 = v10;
  id v11 = v23;
  *unint64_t v22 = v23;
  _finalizeUninitializedArray<A>(_:)();
  *(void *)(v37 + 424) = v24;
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(MEMORY[0x263F6FB10] + (int)*MEMORY[0x263F6FB10]);
  id v12 = (void *)swift_task_alloc();
  *(void *)(v37 + 432) = v12;
  *id v12 = *(void *)(v37 + 192);
  v12[1] = static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:);
  uint64_t v13 = *(void *)(v37 + 320);
  uint64_t v14 = *(void *)(v37 + 304);
  return v25(v14, v37 + 96, v24, v13);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)v0 + 96;
  *(void *)(*(void *)v0 + 192) = *(void *)v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v2);
  swift_release();
  return MEMORY[0x270FA2498](static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:), 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 360);
  *(void *)(v0 + 192) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SiriPaymentsSnippetModel(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 192) + 8);
  return v1();
}

uint64_t DisambiguationViewBuilder.__allocating_init(contactDisambiguationType:persons:deviceState:)(char a1, uint64_t a2, uint64_t a3)
{
  return DisambiguationViewBuilder.init(contactDisambiguationType:persons:deviceState:)(a1, a2, a3);
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = v3;
  return MEMORY[0x270FA2498](DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:), 0);
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)()
{
  *(void *)(v0 + 16) = v0;
  type metadata accessor for SAAceView();
  id v1 = SAUIAppPunchOut.__allocating_init()();
  uint64_t v2 = *(uint64_t (**)(id))(*(void *)(v0 + 16) + 8);
  return v2(v1);
}

uint64_t DisambiguationViewBuilder.persons.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t DisambiguationViewBuilder.persons.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t DisambiguationViewBuilder.init(contactDisambiguationType:persons:deviceState:)(char a1, uint64_t a2, uint64_t a3)
{
  char v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = v3;
  type metadata accessor for INPerson();
  *(void *)(v3 + 24) = _allocateUninitializedArray<A>(_:)();
  *(unsigned char *)(v3 + 16) = a1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v3 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v9);
  outlined init with take of CommonLabelsProviding(v9, (void *)(v3 + 32));
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t DisambiguationViewBuilder.makeDisambiguationItems(app:compact:)()
{
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if ((v3 - 3) <= 1u) {
    return DisambiguationViewBuilder.makeContactDisambiguationItems()();
  }
  else {
    return DisambiguationViewBuilder.makeDuplicateContactDisambiguationItems(_:)(v3);
  }
}

uint64_t DisambiguationViewBuilder.makeContactDisambiguationItems()()
{
  unint64_t v71 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  uint64_t v60 = v68;
  v68[0] = 0;
  v68[1] = 0;
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v56 = 0;
  uint64_t v46 = type metadata accessor for Image();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = v46 - 8;
  unint64_t v49 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v50 = (uint64_t *)((char *)&v17 - v49);
  uint64_t v51 = type metadata accessor for ContactQuery();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = v51 - 8;
  unint64_t v54 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v17 - v54;
  unint64_t v71 = (char *)&v17 - v54;
  uint64_t v70 = v0;
  uint64_t v57 = type metadata accessor for SiriKitDisambiguationItem();
  uint64_t v69 = _allocateUninitializedArray<A>(_:)();
  uint64_t v58 = &v67;
  swift_beginAccess();
  uint64_t v59 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v66 = v59;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[INPerson]>);
    IndexingIterator.next()();
    uint64_t v45 = v65;
    if (!v65) {
      break;
    }
    uint64_t v44 = v45;
    id v43 = v45;
    uint64_t v64 = v45;
    INPerson.toContactQuery()(v55);
    uint64_t v33 = type metadata accessor for SiriKitDisambiguationItemComponent();
    unint64_t v25 = 0x1F65C3000uLL;
    id v20 = [v43 (SEL)0x1F65C3018];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v1;
    uint64_t v21 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();

    uint64_t v24 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.hideOnLockScreen()();
    swift_release();
    id v23 = [v43 (SEL)(v25 + 24)];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v2;
    uint64_t v28 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrint(_:)();
    swift_bridgeObjectRelease();

    swift_release();
    id v27 = [v43 (SEL)(v25 + 24)];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v3;
    uint64_t v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v30 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)();
    swift_release();
    uint64_t v42 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    uint64_t v63 = v42;
    uint64_t v34 = 1;
    uint64_t v31 = _allocateUninitializedArray<A>(_:)();
    id v32 = v4;
    swift_retain();
    uint64_t v5 = v31;
    *id v32 = v42;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v40 = v5;
    uint64_t v37 = MEMORY[0x263F8D310];
    uint64_t v36 = _allocateUninitializedArray<A>(_:)();
    uint64_t v35 = v6;
    uint64_t v7 = INPerson.identifier.getter();
    uint64_t v8 = v35;
    uint64_t v9 = v7;
    uint64_t v10 = v36;
    *uint64_t v35 = v9;
    v8[1] = v11;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v12 = v47;
    *uint64_t v50 = v10;
    (*(void (**)(void))(v12 + 104))();
    uint64_t v13 = INPerson.identifier.getter();
    uint64_t v38 = v14;
    id v39 = static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(v13, v14);
    swift_bridgeObjectRelease();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    uint64_t v15 = SiriKitDisambiguationItem.__allocating_init(components:image:directInvocation:allowLineWrapForDisplayText:)();
    unint64_t v41 = &v62;
    uint64_t v62 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriKitDisambiguationItem]);
    Array.append(_:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v55, v51);
  }
  outlined destroy of [SFCardSection]();
  uint64_t v17 = &v69;
  uint64_t v18 = v69;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  return v18;
}

uint64_t DisambiguationViewBuilder.makeDuplicateContactDisambiguationItems(_:)(int a1)
{
  int v81 = a1;
  char v110 = 0;
  uint64_t v109 = 0;
  uint64_t v108 = 0;
  uint64_t v91 = v107;
  v107[0] = 0;
  v107[1] = 0;
  uint64_t v103 = 0;
  id v102 = 0;
  v101._countAndFlagsBits = 0;
  v101._object = 0;
  uint64_t v98 = 0;
  uint64_t v87 = 0;
  uint64_t v82 = type metadata accessor for Image();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = v82 - 8;
  unint64_t v85 = (*(void *)(v83 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v86 = (uint64_t *)((char *)&v20 - v85);
  char v110 = v2;
  uint64_t v109 = v1;
  uint64_t v88 = type metadata accessor for SiriKitDisambiguationItem();
  uint64_t v108 = _allocateUninitializedArray<A>(_:)();
  uint64_t v89 = &v106;
  swift_beginAccess();
  uint64_t v90 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v105 = v90;
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[INPerson]>);
    IndexingIterator.next()();
    uint64_t v80 = v104;
    if (!v104) {
      break;
    }
    uint64_t v79 = v80;
    id v77 = v80;
    uint64_t v103 = v80;
    id v78 = INPerson.toCNContact.getter();
    id v102 = v78;
    if ((_BYTE)v81)
    {
      if (v81 == 1)
      {
        id v69 = objc_msgSend(v78, sel_emailAddresses);
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Array.subscript.getter();
        id v65 = v94;
        id v67 = objc_msgSend(v94, sel_value);
        v66._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v66._object = v4;

        Swift::String v101 = v66;
        swift_bridgeObjectRelease();
      }
      else
      {
        id v62 = objc_msgSend(v78, sel_phoneNumbers);
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRetain();
        uint64_t v60 = &v100;
        uint64_t v100 = v61;
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CNLabeledValue]);
        lazy protocol witness table accessor for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]();
        int v63 = Collection.isEmpty.getter();
        outlined destroy of [SFCardSection]();
        swift_bridgeObjectRelease();

        if (v63)
        {
          id v50 = objc_msgSend(v78, sel_emailAddresses);
          uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          swift_bridgeObjectRetain();
          uint64_t v48 = &v99;
          uint64_t v99 = v49;
          lazy protocol witness table accessor for type [CNLabeledValue<NSString>] and conformance [A]();
          int v51 = Collection.isEmpty.getter();
          outlined destroy of [SFCardSection]();
          swift_bridgeObjectRelease();

          if (v51)
          {
            Swift::String v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          }
          else
          {
            id v47 = objc_msgSend(v78, sel_emailAddresses);
            uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Array.subscript.getter();
            id v43 = v96;
            id v45 = objc_msgSend(v96, sel_value);
            v44._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v44._object = v6;

            Swift::String v101 = v44;
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          id v57 = objc_msgSend(v78, sel_phoneNumbers);
          uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          Array.subscript.getter();
          id v52 = v95;
          id v53 = objc_msgSend(v95, sel_value);

          id v55 = objc_msgSend(v53, sel_stringValue);
          v54._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v54._object = v5;

          Swift::String v101 = v54;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      id v76 = objc_msgSend(v78, sel_phoneNumbers);
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      Array.subscript.getter();
      id v71 = v93;
      id v72 = objc_msgSend(v93, sel_value);

      id v74 = objc_msgSend(v72, sel_stringValue);
      v73._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v73._object = v3;

      Swift::String v101 = v73;
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = type metadata accessor for SiriKitDisambiguationItemComponent();
    uint64_t v42 = &v101;
    Swift::String v22 = v101;
    swift_bridgeObjectRetain();
    uint64_t v23 = dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.hideOnLockScreen()();
    swift_release();
    Swift::String v24 = v101;
    swift_bridgeObjectRetain();
    uint64_t v27 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrint(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    Swift::String v26 = v101;
    swift_bridgeObjectRetain();
    uint64_t v28 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v29 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)();
    swift_release();
    uint64_t v41 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
    swift_release();
    uint64_t v98 = v41;
    uint64_t v33 = 1;
    uint64_t v30 = _allocateUninitializedArray<A>(_:)();
    uint64_t v31 = v7;
    swift_retain();
    uint64_t v8 = v30;
    *uint64_t v31 = v41;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v39 = v8;
    uint64_t v36 = MEMORY[0x263F8D310];
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    uint64_t v34 = v9;
    uint64_t v10 = INPerson.identifier.getter();
    uint64_t v11 = v34;
    uint64_t v12 = v10;
    uint64_t v13 = v35;
    *uint64_t v34 = v12;
    v11[1] = v14;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v15 = v83;
    *uint64_t v86 = v13;
    (*(void (**)(void))(v15 + 104))();
    uint64_t v16 = INPerson.identifier.getter();
    uint64_t v37 = v17;
    id v38 = static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(v16, v17);
    swift_bridgeObjectRelease();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    uint64_t v18 = SiriKitDisambiguationItem.__allocating_init(components:image:directInvocation:allowLineWrapForDisplayText:)();
    uint64_t v40 = &v97;
    uint64_t v97 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriKitDisambiguationItem]);
    Array.append(_:)();
    swift_release();
    outlined destroy of String.UTF8View();
  }
  outlined destroy of [SFCardSection]();
  id v20 = &v108;
  uint64_t v21 = v108;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  return v21;
}

uint64_t DisambiguationViewBuilder.deinit()
{
  outlined destroy of [SFCardSection]();
  __swift_destroy_boxed_opaque_existential_0(v0 + 32);
  return v2;
}

uint64_t DisambiguationViewBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DisambiguationViewBuilding.makeContactDisambiguationView<A, B>(app:intent:response:) in conformance DisambiguationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return DisambiguationViewBuilder.makeContactDisambiguationView<A, B>(app:intent:response:)(a1, a2, a3);
}

uint64_t closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v21 = a3;
  v9[0] = a1;
  uint64_t v12 = a2;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  v9[1] = 0;
  uint64_t v18 = type metadata accessor for Locale();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v17 = (char *)v9 - v10;
  uint64_t v11 = *v3;
  uint64_t v24 = v11;
  uint64_t v23 = v4;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  uint64_t v19 = AppInformationResolver.__allocating_init(app:)();
  uint64_t v14 = v12[3];
  uint64_t v13 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v14);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v20 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v22 = v5;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v18);
  swift_release();
  uint64_t result = v20;
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  *uint64_t v21 = v20;
  v7[1] = v8;
  return result;
}

uint64_t partial apply for closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t closure #2 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = App.appIdentifier.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

unint64_t type metadata accessor for DialogElement()
{
  uint64_t v2 = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [DialogElement] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [DialogElement] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DialogElement] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogElement]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [DialogElement] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [DialogElement] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DialogElement] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DialogElement]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [DialogElement] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

NSJSONWritingOptions closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(void *a1@<X1>, NSJSONWritingOptions *a2@<X8>)
{
  NSJSONWritingOptions result = App.toAppDescription(deviceState:)(a1);
  *a2 = result;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

NSJSONWritingOptions partial apply for closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)@<X0>(NSJSONWritingOptions *a1@<X8>)
{
  return closure #3 in static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(*(void **)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CNLabeledValue]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [CNLabeledValue<CNPhoneNumber>] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [CNLabeledValue<NSString>] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CNLabeledValue]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [CNLabeledValue<NSString>] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t DuplicateContactDisambiguationType.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType;
  if (!lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType;
  if (!lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DuplicateContactDisambiguationType()
{
  return DuplicateContactDisambiguationType.hashValue.getter();
}

uint64_t type metadata accessor for DisambiguationViewBuilder()
{
  return self;
}

ValueMetadata *type metadata accessor for AppDisambiguationViewBuilder()
{
  return &type metadata for AppDisambiguationViewBuilder;
}

uint64_t getEnumTagSinglePayload for ContactDisambiguationType(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFB) {
      goto LABEL_15;
    }
    unsigned int v8 = ((a2 + 4) >> 8) + 1;
    int v9 = 1;
    if (v8 >= 0x100)
    {
      if (v8 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v9 = v2;
    }
    if (v9 == 1) {
      int v7 = a1[1];
    }
    else {
      int v7 = v9 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v7)
    {
      int v6 = (*a1 | ((v7 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v4 = v3 - 2;
      if (v4 < 0) {
        int v4 = -1;
      }
      int v6 = v4;
    }
  }
  else
  {
    int v6 = -1;
  }
  return (v6 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContactDisambiguationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFB)
  {
    unsigned int v5 = ((a3 + 4) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFB)
  {
    unsigned int v4 = ((a2 - 252) >> 8) + 1;
    *NSJSONWritingOptions result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *NSJSONWritingOptions result = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for ContactDisambiguationType(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))off_270A89718->getEnumTagSinglePayload)(a1, 2, &type metadata for DuplicateContactDisambiguationType);
}

uint64_t destructiveInjectEnumTag for ContactDisambiguationType(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, ValueMetadata *))off_270A89718->storeEnumTagSinglePayload)(a1, a2, 2, &type metadata for DuplicateContactDisambiguationType);
}

ValueMetadata *type metadata accessor for ContactDisambiguationType()
{
  return &type metadata for ContactDisambiguationType;
}

ValueMetadata *type metadata accessor for DuplicateContactDisambiguationType()
{
  return &type metadata for DuplicateContactDisambiguationType;
}

unint64_t base witness table accessor for Equatable in DuplicateContactDisambiguationType()
{
  return lazy protocol witness table accessor for type DuplicateContactDisambiguationType and conformance DuplicateContactDisambiguationType();
}

void *SendTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  Swift::String v26 = a1;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v35 = 0;
  uint64_t v14 = 0;
  unint64_t v5 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  int v6 = (char *)&v4 - v5;
  uint64_t v41 = v1;
  uint64_t v17 = type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  int v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  unsigned int v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  int v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unint64_t v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  uint64_t v35 = v24;
  id v2 = v26;
  swift_retain();
  uint64_t v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  uint64_t v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for SendPaymentCATs;
  v30[0] = v25;
  uint64_t v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (void *)(v33[0] + 16));
  unint64_t v15 = type metadata accessor for INSendPaymentIntent();
  unint64_t v16 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v20 = v29;
  uint64_t v18 = &protocol witness table for INSendPaymentIntent;
  uint64_t v19 = &protocol witness table for INSendPaymentIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  uint64_t v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v28);
  uint64_t v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  uint64_t v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

uint64_t sub_25D94FE44()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
  return swift_deallocObject();
}

void *RequestTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  Swift::String v26 = a1;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v35 = 0;
  uint64_t v14 = 0;
  unint64_t v5 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  int v6 = (char *)&v4 - v5;
  uint64_t v41 = v1;
  uint64_t v17 = type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  int v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  unsigned int v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  int v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unint64_t v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  uint64_t v35 = v24;
  id v2 = v26;
  swift_retain();
  uint64_t v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  uint64_t v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for RequestPaymentCATs;
  v30[0] = v25;
  uint64_t v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (void *)(v33[0] + 16));
  unint64_t v15 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v16 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v20 = v29;
  uint64_t v18 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v19 = &protocol witness table for INRequestPaymentIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  uint64_t v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v28);
  uint64_t v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  uint64_t v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

void *SearchForAccountsTCCHandleStrategy.__allocating_init(previousIntent:)(void *a1)
{
  Swift::String v26 = a1;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v35 = 0;
  uint64_t v14 = 0;
  unint64_t v5 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  int v6 = (char *)&v4 - v5;
  uint64_t v41 = v1;
  uint64_t v17 = type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v25 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v40 = v25;
  NSJSONWritingOptions.init(rawValue:)(v25);
  type metadata accessor for Globals();
  int v7 = v39;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v39);
  unsigned int v8 = &v38;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  int v9 = &v37;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unint64_t v10 = &v36;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v24 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10);
  uint64_t v35 = v24;
  id v2 = v26;
  swift_retain();
  uint64_t v21 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v13 = v32;
  v32[3] = &type metadata for CommonLabelsProvider;
  v32[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v11 = v31;
  outlined init with copy of GlobalsProviding(v24 + 56, (uint64_t)v31);
  swift_retain();
  uint64_t v12 = v30;
  v30[3] = v17;
  v30[4] = &protocol witness table for SearchForAccountsCATs;
  v30[0] = v25;
  uint64_t v23 = v33;
  v33[3] = &type metadata for ConfirmationViewBuilder;
  v33[4] = &protocol witness table for ConfirmationViewBuilder;
  v33[0] = swift_allocObject();
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v12, (void *)(v33[0] + 16));
  unint64_t v15 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v16 = type metadata accessor for INSearchForAccountsIntentResponse();
  uint64_t v20 = v29;
  uint64_t v18 = &protocol witness table for INSearchForAccountsIntent;
  uint64_t v19 = &protocol witness table for INSearchForAccountsIntentResponse;
  default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v15, v16, v17, v29);
  uint64_t v22 = v28;
  default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v28);
  uint64_t v27 = SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(v26, (uint64_t)v20, v25, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23);
  swift_retain();
  uint64_t v42 = v27;
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

uint64_t default argument 1 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v10[7] = a1;
  v10[6] = a2;
  v10[5] = a3;
  uint64_t v5 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v10);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7);
  a4[3] = v5;
  a4[4] = (uint64_t)&protocol witness table for Globals;
  *a4 = result;
  return result;
}

uint64_t default argument 4 of TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for TCCResponses();
  a1[4] = (uint64_t)&protocol witness table for TCCResponses;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return TCCResponses.init()();
}

void *SendTCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SendTCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(a1, a2, a3, a4, a5, a6);
}

void *SendTCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = 0;
  v18[10] = a1;
  v18[9] = a2;
  v18[8] = a3;
  v18[7] = a4;
  v18[6] = a5;
  v18[5] = a6;
  id v6 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v18);
  swift_retain();
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v17);
  outlined init with copy of GlobalsProviding(a5, (uint64_t)v16);
  outlined init with copy of GlobalsProviding(a6, (uint64_t)v15);
  uint64_t v14 = TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(a1, v18, a3, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15);
  swift_retain();
  uint64_t v19 = v14;
  __swift_destroy_boxed_opaque_existential_0(a6);
  __swift_destroy_boxed_opaque_existential_0(a5);
  __swift_destroy_boxed_opaque_existential_0(a4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);

  swift_release();
  return v14;
}

uint64_t SendTCCHandleStrategy.deinit()
{
  return TCCHandleStrategy.deinit();
}

uint64_t TCCHandleStrategy.deinit()
{
  outlined destroy of SFRichText?((id *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0(v0 + 144);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 192);
  return v2;
}

uint64_t SendTCCHandleStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void *TCCHandleStrategy.previousIntent.getter()
{
  swift_beginAccess();
  int v3 = *(void **)(v0 + 16);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void TCCHandleStrategy.previousIntent.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  int v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;

  swift_endAccess();
}

uint64_t (*TCCHandleStrategy.previousIntent.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t TCCHandleStrategy.ttsEnabled.getter()
{
  uint64_t v5 = 0;
  id v2 = (void *)*v0;
  uint64_t v5 = v0;
  v4[7] = v2[10];
  v4[6] = v2[11];
  v4[5] = v2[12];
  outlined init with copy of GlobalsProviding((uint64_t)(v0 + 24), (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  char v3 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
  return v3 & 1;
}

uint64_t TCCHandleStrategy.actionForInput(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v43 = a1;
  uint64_t v37 = 0;
  uint64_t v60 = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  id v62 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  Swift::String v66 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Swift::String v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v36 = 0;
  Swift::String v54 = (void *)*v2;
  uint64_t v38 = type metadata accessor for Parse();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  unint64_t v41 = (*(void *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v42 = (uint64_t)v26 - v41;
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v49 - 8);
  uint64_t v48 = v49 - 8;
  unint64_t v44 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v43);
  uint64_t v4 = (char *)v26 - v44;
  uint64_t v46 = (char *)v26 - v44;
  uint64_t v90 = v3;
  uint64_t v89 = v45;
  uint64_t v50 = v54[10];
  uint64_t v88 = v50;
  uint64_t v51 = v54[11];
  uint64_t v87 = v51;
  uint64_t v52 = v54[12];
  uint64_t v86 = v52;
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v4, v5, v49);
  uint64_t v64 = 7;
  id v6 = (void *)swift_allocObject();
  uint64_t v7 = v51;
  uint64_t v8 = v52;
  int v9 = v54;
  uint64_t v61 = v6;
  v6[2] = v50;
  v6[3] = v7;
  v6[4] = v8;
  uint64_t v53 = v9[13];
  unint64_t v10 = v54;
  v6[5] = v53;
  v6[6] = v10[14];
  id v77 = Logger.logObject.getter();
  int v78 = static os_log_type_t.debug.getter();
  id v57 = &v84;
  uint64_t v84 = 12;
  unint64_t v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v58 = v85;
  uint64_t v59 = 17;
  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 32;
  uint64_t v71 = swift_allocObject();
  *(unsigned char *)(v71 + 16) = 8;
  uint64_t v63 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v61;
  uint64_t v65 = v11;
  *(void *)(v11 + 16) = v60;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v65;
  uint64_t v67 = v13;
  *(void *)(v13 + 16) = v62;
  *(void *)(v13 + 24) = v14;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v67;
  uint64_t v74 = v15;
  *(void *)(v15 + 16) = v66;
  *(void *)(v15 + 24) = v16;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v72 = _allocateUninitializedArray<A>(_:)();
  uint64_t v75 = v17;
  swift_retain();
  uint64_t v18 = v69;
  uint64_t v19 = v75;
  *uint64_t v75 = v68;
  v19[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = v71;
  uint64_t v21 = v75;
  v75[2] = v70;
  v21[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
  swift_retain();
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
  uint64_t v23 = v75;
  v75[4] = v73;
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v77, (os_log_type_t)v78))
  {
    uint64_t v24 = v36;
    uint64_t v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v29 = createStorage<A>(capacity:type:)(0);
    uint64_t v30 = createStorage<A>(capacity:type:)(1);
    uint64_t v31 = &v83;
    uint64_t v83 = v28;
    uint64_t v32 = &v82;
    uint64_t v82 = v29;
    uint64_t v33 = &v81;
    uint64_t v81 = v30;
    serialize(_:at:)(2, &v83);
    serialize(_:at:)(1, v31);
    uint64_t v79 = v68;
    uint64_t v80 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
    uint64_t v34 = v24;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      uint64_t v79 = v70;
      uint64_t v80 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v83, (uint64_t)&v82, (uint64_t)&v81);
      v26[1] = 0;
      uint64_t v79 = v73;
      uint64_t v80 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v83, (uint64_t)&v82, (uint64_t)&v81);
      _os_log_impl(&dword_25D85A000, v77, (os_log_type_t)v78, "##TCCHandleStrategy<%s> actionForInput", v28, v58);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v28, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v49);
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v42, v50, v53, v35);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v42, v38);
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[60] = v3;
  v4[59] = a2;
  v4[58] = a1;
  v4[52] = v4;
  v4[53] = 0;
  v4[54] = 0;
  v4[55] = 0;
  v4[57] = 0;
  v4[50] = 0;
  v4[51] = 0;
  uint64_t v12 = (void *)*v3;
  v4[61] = *v3;
  type metadata accessor for DialogPhase();
  v4[62] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v4[63] = v5;
  v4[64] = *(void *)(v5 - 8);
  v4[65] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  v4[66] = v6;
  v4[67] = *(void *)(v6 - 8);
  v4[68] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[72] = v7;
  v4[73] = *(void *)(v7 - 8);
  v4[74] = swift_task_alloc();
  v4[53] = a2;
  v4[54] = a3;
  v4[75] = v12[10];
  v4[55] = v11;
  v4[76] = v12[11];
  v4[77] = v12[12];
  return MEMORY[0x270FA2498](TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:), 0);
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)()
{
  uint64_t v56 = v0;
  uint64_t v39 = *(void *)(v0 + 616);
  uint64_t v38 = *(void *)(v0 + 608);
  uint64_t v37 = *(void *)(v0 + 600);
  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v35 = *(void *)(v0 + 584);
  uint64_t v36 = *(void *)(v0 + 576);
  uint64_t v40 = *(void *)(v0 + 488);
  *(void *)(v0 + 416) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v1, v2, v36);
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = v37;
  v42[3] = v38;
  v42[4] = v39;
  v42[5] = *(void *)(v40 + 104);
  v42[6] = *(void *)(v40 + 112);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 448) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v41 = *(_DWORD *)(v0 + 792);
  uint64_t v45 = swift_allocObject();
  *(unsigned char *)(v45 + 16) = 32;
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(void *)(v43 + 24) = v42;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v44 + 24) = v43;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v47 + 24) = v44;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v48 = v3;
  swift_retain();
  *uint64_t v48 = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[1] = v45;
  swift_retain();
  v48[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[3] = v46;
  swift_retain();
  v48[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[5] = v47;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v49, v50))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = createStorage<A>(capacity:type:)(1);
    uint64_t v51 = buf;
    uint64_t v52 = v32;
    uint64_t v53 = v33;
    serialize(_:at:)(2, &v51);
    serialize(_:at:)(1, &v51);
    Swift::String v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v55 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    Swift::String v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v55 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    Swift::String v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v55 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    _os_log_impl(&dword_25D85A000, v49, v50, "#TCCHandleStrategy<%s> makePromptForTCCAcceptance", buf, v41);
    destroyStorage<A>(_:count:)(v32, 0, v30);
    destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v22 = v34[74];
  uint64_t v23 = v34[72];
  uint64_t v26 = v34[68];
  uint64_t v28 = v34[66];
  uint64_t v24 = v34[60];
  uint64_t v21 = v34[73];
  uint64_t v25 = v34[67];

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  outlined init with copy of GlobalsProviding(v24 + 192, (uint64_t)(v34 + 10));
  __swift_project_boxed_opaque_existential_1(v34 + 10, v34[13]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v27 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v29 = v4;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v28);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v34 + 10));
  swift_release();
  if (v29)
  {
    uint64_t v20 = (void *)v34[71];
    uint64_t v19 = (const void *)v34[70];
    v34[50] = v27;
    v34[51] = v29;
    App.isFirstParty.getter();
    AppDisplayInfo.init(displayName:isFirstParty:)();
    uint64_t v5 = type metadata accessor for AppDisplayInfo();
    (*(void (**)(const void *, void, uint64_t))(*(void *)(v5 - 8) + 56))(v19, 0, 1);
    outlined init with take of AppDisplayInfo?(v19, v20);
  }
  else
  {
    uint64_t v18 = (void *)v34[71];
    uint64_t v17 = (const void *)v34[70];
    uint64_t v6 = type metadata accessor for AppDisplayInfo();
    (*(void (**)(const void *, uint64_t))(*(void *)(v6 - 8) + 56))(v17, 1);
    outlined init with take of AppDisplayInfo?(v17, v18);
  }
  uint64_t v11 = (const void *)v34[71];
  unint64_t v10 = (void *)v34[69];
  uint64_t v12 = v34[60];
  outlined init with copy of GlobalsProviding(v12 + 64, (uint64_t)(v34 + 15));
  uint64_t v14 = v34[18];
  uint64_t v15 = v34[19];
  __swift_project_boxed_opaque_existential_1(v34 + 15, v14);
  outlined init with copy of AppDisplayInfo?(v11, v10);
  outlined init with copy of GlobalsProviding(v12 + 192, (uint64_t)(v34 + 20));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  v34[78] = v13;
  uint64_t v16 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8) + **(int **)(v15 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  v34[79] = v7;
  *uint64_t v7 = v34[52];
  v7[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  uint64_t v8 = v34[69];
  return v16(v8, v34 + 20, v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0[80];
  uint64_t v6 = v0[60];
  v0[52] = v0;
  v0[57] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 15));
  v0[82] = type metadata accessor for SKIDirectInvocation();
  outlined init with copy of GlobalsProviding(v6 + 192, (uint64_t)(v0 + 25));
  uint64_t v5 = static SKIDirectInvocation.makeButtonPressDirectInvocation(buttonPress:deviceState:)(0, v0 + 25);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 25));
  v0[83] = type metadata accessor for SAStartLocalRequest();
  v0[84] = SAClientBoundCommand.data.getter();
  v0[85] = v2;

  outlined init with copy of GlobalsProviding(v6 + 24, (uint64_t)(v0 + 30));
  unint64_t v10 = v0[33];
  uint64_t v8 = v0[34];
  __swift_project_boxed_opaque_existential_1(v0 + 30, v10);
  int v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 24) + **(int **)(v8 + 24));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v7 + 688) = v3;
  *uint64_t v3 = *(void *)(v7 + 416);
  v3[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  return v9(v10, v8);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  uint64_t v5 = v0[60];
  v0[52] = v0;
  outlined init with copy of GlobalsProviding(v5 + 192, (uint64_t)(v0 + 35));
  uint64_t v4 = static SKIDirectInvocation.makeButtonPressDirectInvocation(buttonPress:deviceState:)(1, v0 + 35);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 35));
  v0[90] = SAClientBoundCommand.data.getter();
  v0[91] = v1;

  outlined init with copy of GlobalsProviding(v5 + 24, (uint64_t)(v0 + 40));
  int v9 = v0[43];
  uint64_t v7 = v0[44];
  __swift_project_boxed_opaque_existential_1(v0 + 40, v9);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 736) = v2;
  *uint64_t v2 = *(void *)(v6 + 416);
  v2[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  return v8(v9, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *__dst;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(uint64_t, void *, uint64_t, uint64_t);
  uint64_t v24;

  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[91];
  uint64_t v4 = v0[90];
  uint64_t v5 = v0[89];
  uint64_t v6 = v0[88];
  uint64_t v7 = v0[85];
  uint64_t v8 = v0[84];
  uint64_t v20 = (id)v0[80];
  uint64_t v17 = v0[60];
  uint64_t v16 = v0[59];
  v0[52] = v0;
  SiriPaymentsSnippetModel.BinaryConfirmationModel.init(primaryButtonDI:primaryButtonLabel:secondaryButtonDI:secondaryButtonLabel:)(v8, v7, v6, v5, v4, v3, v2, v1, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 30));
  static DialogPhase.confirmation.getter();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_task_alloc();
  *(void *)(v15 + 16) = v16;
  *(void *)(v15 + 24) = v17;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  swift_release();
  swift_release();
  type metadata accessor for ResponseFactory();
  v0[96] = ResponseFactory.__allocating_init()();
  v0[48] = type metadata accessor for SiriPaymentsSnippetModel();
  v0[49] = lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
  __dst = __swift_allocate_boxed_opaque_existential_1(v0 + 45);
  outlined retain of SiriPaymentsSnippetModel.BinaryConfirmationModel(v0 + 2);
  memcpy(__dst, v0 + 2, 0x40uLL);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for DialogExecutionResult();
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  uint64_t v19 = v9;
  unint64_t v10 = v20;
  *uint64_t v19 = v20;
  _finalizeUninitializedArray<A>(_:)();
  v0[97] = v21;
  uint64_t v23 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))(MEMORY[0x263F6FB18] + (int)*MEMORY[0x263F6FB18]);
  uint64_t v11 = (void *)swift_task_alloc();
  v22[98] = v11;
  *uint64_t v11 = v22[52];
  v11[1] = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  uint64_t v12 = v22[65];
  uint64_t v13 = v22[58];
  return v23(v13, v0 + 45, v21, v12);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)v0 + 360;
  *(void *)(*(void *)v0 + 416) = *(void *)v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v2);
  swift_release();
  return MEMORY[0x270FA2498](TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:), 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  id v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = (id)v0[80];
  uint64_t v5 = v0[71];
  uint64_t v1 = v0[64];
  v0[52] = (uint64_t)v0;
  (*(void (**)(void))(v1 + 8))();
  outlined release of SiriPaymentsSnippetModel.BinaryConfirmationModel(v0 + 2);

  outlined destroy of AppDisplayInfo?(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[52] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[71];
  uint64_t v3 = v0[69];
  v0[52] = v0;
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 20));
  outlined destroy of AppDisplayInfo?(v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 15));
  outlined destroy of AppDisplayInfo?(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[52] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = v0[85];
  uint64_t v3 = v0[84];
  uint64_t v5 = (id)v0[80];
  uint64_t v6 = v0[71];
  v0[52] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 30));
  outlined consume of Data._Representation(v3, v4);

  outlined destroy of AppDisplayInfo?(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[52] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v6 = v0[85];
  uint64_t v5 = v0[84];
  uint64_t v7 = (id)v0[80];
  uint64_t v8 = v0[71];
  v0[52] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 40));
  outlined consume of Data._Representation(v3, v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 30));
  outlined consume of Data._Representation(v5, v6);

  outlined destroy of AppDisplayInfo?(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[52] + 8);
  return v1();
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1)
{
  uint64_t v8 = (void *)*v2;
  uint64_t v6 = *v2 + 16;
  uint64_t v7 = *v2 + 160;
  v8[52] = *v2;
  v8[80] = a1;
  v8[81] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  else
  {
    uint64_t v5 = *(void *)(v6 + 536);
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v7);
    outlined destroy of AppDisplayInfo?(v5);
    uint64_t v3 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[52] = *v3;
  v6[87] = v2;
  v6[88] = a1;
  v6[89] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  else
  {
    uint64_t v4 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v3;
  v6[52] = *v3;
  v6[93] = v2;
  v6[94] = a1;
  v6[95] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  else
  {
    uint64_t v4 = TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t TCCHandleStrategy.parseTCCConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v3[20] = v2;
  v3[19] = a2;
  v3[18] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v3[16] = 0;
  uint64_t v12 = (void *)*v2;
  v3[21] = *v2;
  uint64_t v4 = type metadata accessor for Input();
  v3[22] = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  v3[23] = v9;
  v3[24] = *(void *)(v9 + 64);
  v3[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v3[28] = v5;
  v3[29] = *(void *)(v5 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ConfirmationResponse();
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[34] = v7;
  v3[35] = *(void *)(v7 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = v11;
  v3[39] = v12[10];
  unsigned char v3[40] = v12[11];
  v3[41] = v12[12];
  return MEMORY[0x270FA2498](TCCHandleStrategy.parseTCCConfirmationResponse(input:), 0);
}

uint64_t TCCHandleStrategy.parseTCCConfirmationResponse(input:)()
{
  uint64_t v116 = v0;
  uint64_t v92 = *(void *)(v0 + 328);
  uint64_t v91 = *(void *)(v0 + 320);
  uint64_t v90 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v87 = *(void *)(v0 + 280);
  uint64_t v88 = *(void *)(v0 + 272);
  uint64_t v93 = *(void *)(v0 + 168);
  *(void *)(v0 + 56) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16);
  v89(v1, v2, v88);
  uint64_t v97 = (void *)swift_allocObject();
  v97[2] = v90;
  v97[3] = v91;
  v97[4] = v92;
  uint64_t v94 = *(void *)(v93 + 104);
  v97[5] = v94;
  uint64_t v95 = *(void *)(v93 + 112);
  v97[6] = v95;
  v104 = Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 336);
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 32;
  uint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 8;
  uint64_t v98 = swift_allocObject();
  *(void *)(v98 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(void *)(v98 + 24) = v97;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v99 + 24) = v98;
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v102 + 24) = v99;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v103 = v3;
  swift_retain();
  *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v100;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[3] = v101;
  swift_retain();
  v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[5] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v84 = createStorage<A>(capacity:type:)(0);
    uint64_t v85 = createStorage<A>(capacity:type:)(1);
    v111 = buf;
    uint64_t v112 = v84;
    uint64_t v113 = v85;
    serialize(_:at:)(2, &v111);
    serialize(_:at:)(1, &v111);
    v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    _os_log_impl(&dword_25D85A000, v104, v105, "##TCCHandleStrategy<%s> parseTCCConfirmationResponse", buf, size);
    destroyStorage<A>(_:count:)(v84, 0, v82);
    destroyStorage<A>(_:count:)(v85, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v77 = *(void *)(v86 + 304);
  uint64_t v78 = *(void *)(v86 + 272);
  uint64_t v80 = *(void *)(v86 + 160);
  uint64_t v76 = *(void *)(v86 + 280);

  uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v79(v77, v78);
  swift_beginAccess();
  uint64_t v81 = *(void **)(v80 + 16);
  id v4 = v81;
  swift_endAccess();
  if (v81)
  {
    uint64_t v75 = *(void *)(v86 + 248);
    uint64_t v74 = *(void *)(v86 + 216);
    uint64_t v73 = *(void *)(v86 + 256);
    *(void *)(v86 + 128) = v81;
    Input.parse.getter();
    Parse.confirmationResponse.getter(v74);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v74, 1, v75) != 1)
    {
      uint64_t v70 = *(void *)(v86 + 264);
      uint64_t v69 = *(void *)(v86 + 248);
      uint64_t v71 = *(void *)(v86 + 240);
      uint64_t v67 = *(void *)(v86 + 224);
      uint64_t v72 = *(void *)(v86 + 208);
      uint64_t v68 = *(void *)(v86 + 256);
      uint64_t v66 = *(void *)(v86 + 232);
      (*(void (**)(void))(v68 + 32))();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v71, v67);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v72, v70, v69);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v72, 0, 1, v69);
      ConfirmIntentAnswer.init(confirmationResponse:intent:)();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v69);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(v86 + 56) + 8);
      return v5();
    }
    uint64_t v45 = *(void *)(v86 + 328);
    uint64_t v44 = *(void *)(v86 + 320);
    uint64_t v43 = *(void *)(v86 + 312);
    uint64_t v7 = *(void *)(v86 + 296);
    uint64_t v42 = *(void *)(v86 + 272);
    uint64_t v41 = *(void *)(v86 + 240);
    uint64_t v40 = *(void *)(v86 + 224);
    uint64_t v49 = *(void *)(v86 + 200);
    uint64_t v50 = *(void *)(v86 + 176);
    uint64_t v47 = *(void *)(v86 + 152);
    uint64_t v39 = *(void *)(v86 + 232);
    uint64_t v46 = *(void *)(v86 + 184);
    outlined destroy of ConfirmationResponse?(*(void *)(v86 + 216));
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
    uint64_t v8 = Logger.payments.unsafeMutableAddressor();
    v89(v7, v8, v42);
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = v43;
    v52[3] = v44;
    v52[4] = v45;
    v52[5] = v94;
    v52[6] = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v49, v47, v50);
    unint64_t v48 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v55 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32))(v55 + v48, v49, v50);
    oslog = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    *(void *)(v86 + 136) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v51 = *(_DWORD *)(v86 + 344);
    uint64_t v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = 32;
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = 8;
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
    *(void *)(v53 + 24) = v52;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v54 + 24) = v53;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v59 + 24) = v54;
    uint64_t v60 = swift_allocObject();
    *(unsigned char *)(v60 + 16) = 32;
    uint64_t v61 = swift_allocObject();
    *(unsigned char *)(v61 + 16) = 8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = partial apply for implicit closure #3 in TCCHandleStrategy.parseTCCConfirmationResponse(input:);
    *(void *)(v56 + 24) = v55;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v62 + 24) = v56;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v63 = v9;
    swift_retain();
    *uint64_t v63 = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[1] = v57;
    swift_retain();
    v63[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[3] = v58;
    swift_retain();
    v63[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[5] = v59;
    swift_retain();
    v63[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[7] = v60;
    swift_retain();
    v63[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[9] = v61;
    swift_retain();
    v63[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[11] = v62;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v65))
    {
      uint64_t v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v37 = createStorage<A>(capacity:type:)(0);
      uint64_t v38 = createStorage<A>(capacity:type:)(2);
      char v106 = v36;
      uint64_t v107 = v37;
      uint64_t v108 = v38;
      serialize(_:at:)(2, &v106);
      serialize(_:at:)(2, &v106);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      _os_log_impl(&dword_25D85A000, oslog, v65, "#TCCHandleStrategy<%s> couldn't obtain confirmation response from input parse %s", v36, v51);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v36, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v31 = *(void *)(v86 + 296);
    uint64_t v32 = *(void *)(v86 + 272);

    v79(v31, v32);
    *(void *)(v86 + 40) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v86 + 48) = v10;
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v34 = String.init(stringInterpolation:)();
    uint64_t v33 = v13;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v14 = v34;
    *(void *)(v14 + 8) = v33;
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 40) = 0;
    *(unsigned char *)(v14 + 48) = 15;
    swift_willThrow();
  }
  else
  {
    uint64_t v15 = *(void *)(v86 + 288);
    uint64_t v26 = *(void *)(v86 + 272);
    uint64_t v16 = Logger.payments.unsafeMutableAddressor();
    v89(v15, v16, v26);
    log = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    *(void *)(v86 + 88) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v27 = *(_DWORD *)(v86 + 340);
    uint64_t v30 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v28))
    {
      uint64_t v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v23 = createStorage<A>(capacity:type:)(0);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      *(void *)(v86 + 96) = v22;
      *(void *)(v86 + 104) = v23;
      *(void *)(v86 + 112) = v24;
      serialize(_:at:)(0, (unsigned char **)(v86 + 96));
      serialize(_:at:)(0, (unsigned char **)(v86 + 96));
      *(void *)(v86 + 120) = v30;
      uint64_t v25 = (void *)swift_task_alloc();
      v25[2] = v86 + 96;
      v25[3] = v86 + 104;
      v25[4] = v86 + 112;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, log, v28, "couldn't restore in-progress intent", v22, v27);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v22, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v86 + 288);
    uint64_t v20 = *(void *)(v86 + 272);

    v79(v19, v20);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v17 = 9;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 40) = 0;
    *(unsigned char *)(v17 + 48) = 17;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(*(void *)(v86 + 56) + 8);
  return v18();
}

uint64_t TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = v3;
  v4[19] = a2;
  v4[18] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[17] = 0;
  Swift::String v11 = (void *)*v3;
  v4[21] = *v3;
  type metadata accessor for DialogPhase();
  v4[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[29] = v11[10];
  v4[15] = v10;
  v4[30] = v11[11];
  v4[31] = v11[12];
  return MEMORY[0x270FA2498](TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:), 0);
}

uint64_t TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)()
{
  uint64_t v42 = v0;
  uint64_t v25 = *(void *)(v0 + 248);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 208);
  uint64_t v26 = *(void *)(v0 + 168);
  *(void *)(v0 + 96) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v2, v22);
  os_log_type_t v28 = (void *)swift_allocObject();
  v28[2] = v23;
  v28[3] = v24;
  v28[4] = v25;
  uint64_t v28[5] = *(void *)(v26 + 104);
  v28[6] = *(void *)(v26 + 112);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 128) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v27 = *(_DWORD *)(v0 + 312);
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 32;
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v30 + 24) = v29;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v33 + 24) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v3;
  swift_retain();
  *uint64_t v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v31;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v32;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v34[5] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v35, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v37 = buf;
    uint64_t v38 = v18;
    uint64_t v39 = v19;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25D85A000, v35, v36, "##TCCHandleStrategy<%s> makeTCCConfirmationRejectedResponse", buf, v27);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v7 = v20[28];
  uint64_t v8 = v20[26];
  uint64_t v11 = v20[20];
  uint64_t v10 = v20[19];
  uint64_t v6 = v20[27];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  static DialogPhase.canceled.getter();
  swift_retain();
  swift_retain();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v10;
  *(void *)(v9 + 24) = v11;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined init with copy of GlobalsProviding(v11 + 64, (uint64_t)(v20 + 2));
  uint64_t v13 = v20[5];
  uint64_t v14 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v13);
  outlined init with copy of GlobalsProviding(v11 + 192, (uint64_t)(v20 + 7));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  v20[32] = v12;
  uint64_t v15 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 16) + **(int **)(v14 + 16));
  id v4 = (void *)swift_task_alloc();
  v20[33] = v4;
  *id v4 = v20[12];
  v4[1] = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  return v15(v20 + 7, v12, v13, v14);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v8 = (id)v0[34];
  v0[12] = v0;
  v0[17] = v8;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  type metadata accessor for ResponseFactory();
  v0[36] = ResponseFactory.__allocating_init()();
  type metadata accessor for DialogExecutionResult();
  uint64_t v9 = _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v1;
  uint64_t v2 = v8;
  *uint64_t v7 = v8;
  _finalizeUninitializedArray<A>(_:)();
  v0[37] = v9;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(MEMORY[0x263F6FB28] + (int)*MEMORY[0x263F6FB28]);
  uint64_t v3 = (void *)swift_task_alloc();
  v10[38] = v3;
  *uint64_t v3 = v10[12];
  v3[1] = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  id v4 = v10[25];
  uint64_t v5 = v10[18];
  return v11(v5, v9, v4);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(*(void *)v0 + 96) = *(void *)v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA2498](TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:), 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = (void *)v0[34];
  uint64_t v6 = v0[25];
  id v4 = v0[24];
  uint64_t v5 = v0[23];
  v0[12] = v0;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[12] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v5 = v0[25];
  uint64_t v3 = v0[24];
  id v4 = v0[23];
  v0[12] = v0;
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v6 + 96) + 8);
  return v1();
}

uint64_t TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[12] = *v2;
  v5[34] = a1;
  v5[35] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v5 + 7));
    uint64_t v3 = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = v3;
  v4[19] = a2;
  v4[18] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[17] = 0;
  uint64_t v11 = (void *)*v3;
  v4[21] = *v3;
  type metadata accessor for DialogPhase();
  v4[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[29] = v11[10];
  v4[15] = v10;
  v4[30] = v11[11];
  v4[31] = v11[12];
  return MEMORY[0x270FA2498](TCCHandleStrategy.makeTCCCancelledResponse(app:intent:), 0);
}

uint64_t TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)()
{
  uint64_t v42 = v0;
  uint64_t v25 = *(void *)(v0 + 248);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 208);
  uint64_t v26 = *(void *)(v0 + 168);
  *(void *)(v0 + 96) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v2, v22);
  os_log_type_t v28 = (void *)swift_allocObject();
  v28[2] = v23;
  v28[3] = v24;
  v28[4] = v25;
  uint64_t v28[5] = *(void *)(v26 + 104);
  v28[6] = *(void *)(v26 + 112);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 128) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v27 = *(_DWORD *)(v0 + 312);
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 32;
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:);
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v30 + 24) = v29;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v33 + 24) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v3;
  swift_retain();
  *uint64_t v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v31;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v32;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v34[5] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v35, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v37 = buf;
    uint64_t v38 = v18;
    uint64_t v39 = v19;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25D85A000, v35, v36, "##TCCHandleStrategy<%s> makeTCCCancelledResponse", buf, v27);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v7 = v20[28];
  uint64_t v8 = v20[26];
  uint64_t v11 = v20[20];
  uint64_t v10 = v20[19];
  uint64_t v6 = v20[27];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  static DialogPhase.canceled.getter();
  swift_retain();
  swift_retain();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v10;
  *(void *)(v9 + 24) = v11;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined init with copy of GlobalsProviding(v11 + 64, (uint64_t)(v20 + 2));
  uint64_t v13 = v20[5];
  uint64_t v14 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v13);
  outlined init with copy of GlobalsProviding(v11 + 192, (uint64_t)(v20 + 7));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  v20[32] = v12;
  uint64_t v15 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 24) + **(int **)(v14 + 24));
  id v4 = (void *)swift_task_alloc();
  v20[33] = v4;
  *id v4 = v20[12];
  v4[1] = TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  return v15(v20 + 7, v12, v13, v14);
}

uint64_t TCCHandleStrategy.catFamily.getter()
{
  uint64_t v2 = *(void *)(v0 + 184);
  swift_retain();
  return v2;
}

void *TCCHandleStrategy.__allocating_init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(a1, a2, a3, a4, a5, a6);
}

void *TCCHandleStrategy.init(previousIntent:globals:catFamily:commonLabelsProvider:tccResponseProvider:confirmationViewBuilder:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_log_type_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v10 = (void *)*v6;
  os_log_type_t v36 = a1;
  uint64_t v35 = v10[10];
  uint64_t v34 = a2;
  uint64_t v33 = a3;
  uint64_t v32 = a4;
  uint64_t v31 = a5;
  uint64_t v30 = a6;
  uint64_t v29 = v6;
  uint64_t v28 = v10[11];
  uint64_t v27 = v10[12];
  v6[2] = 0;
  uint64_t v12 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  (*(void (**)(uint64_t))(v11 + 24))(v12);
  outlined init with take of CommonLabelsProviding(v26, v21 + 18);
  swift_retain();
  v21[23] = a3;
  uint64_t v14 = a2[3];
  uint64_t v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  (*(void (**)(uint64_t))(v13 + 16))(v14);
  outlined init with take of CommonLabelsProviding(v25, v21 + 24);
  id v7 = a1;
  swift_beginAccess();
  uint64_t v8 = (void *)v21[2];
  v21[2] = a1;

  swift_endAccess();
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v24);
  outlined init with take of CommonLabelsProviding(v24, v21 + 3);
  outlined init with copy of GlobalsProviding(a5, (uint64_t)v23);
  outlined init with take of CommonLabelsProviding(v23, v21 + 8);
  outlined init with copy of GlobalsProviding(a6, (uint64_t)v22);
  outlined init with take of CommonLabelsProviding(v22, v21 + 13);
  __swift_destroy_boxed_opaque_existential_0(a6);
  __swift_destroy_boxed_opaque_existential_0(a5);
  __swift_destroy_boxed_opaque_existential_0(a4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a2);

  return v21;
}

uint64_t sub_25D956C20()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in TCCHandleStrategy.actionForInput(input:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t closure #1 in TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = a1;
  uint64_t v7 = a2;
  uint64_t v11 = a3;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v9 = (void *)*a3;
  uint64_t v6 = a3;
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v6 - v8;
  uint64_t v19 = a1;
  uint64_t v18 = MEMORY[0x270FA5388](v7);
  uint64_t v17 = v11;
  uint64_t v16 = v9[10];
  uint64_t v15 = v9[11];
  uint64_t v14 = v9[12];
  static PaymentsContextProvider.tccAcceptanceContextUpdate(app:)(v18, (uint64_t)&v6 - v8);
  id v4 = *(void (**)(char *, void))(*(void *)(type metadata accessor for NLContextUpdate() - 8) + 56);
  int v13 = 1;
  v4(v10, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  TCCHandleStrategy.ttsEnabled.getter();
  OutputGenerationManifest.canUseServerTTS.setter();
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t implicit closure #3 in TCCHandleStrategy.parseTCCConfirmationResponse(input:)()
{
  uint64_t v4 = type metadata accessor for Parse();
  unint64_t v2 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}

uint64_t closure #1 in TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = a1;
  uint64_t v7 = a2;
  uint64_t v11 = a3;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v9 = (void *)*a3;
  uint64_t v6 = a3;
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v6 - v8;
  uint64_t v19 = a1;
  uint64_t v18 = MEMORY[0x270FA5388](v7);
  uint64_t v17 = v11;
  uint64_t v16 = v9[10];
  uint64_t v15 = v9[11];
  uint64_t v14 = v9[12];
  static PaymentsContextProvider.tccAcceptanceContextUpdate(app:)(v18, (uint64_t)&v6 - v8);
  uint64_t v4 = *(void (**)(char *))(*(void *)(type metadata accessor for NLContextUpdate() - 8) + 56);
  int v13 = 0;
  v4(v10);
  OutputGenerationManifest.nlContextUpdate.setter();
  TCCHandleStrategy.ttsEnabled.getter();
  OutputGenerationManifest.canUseServerTTS.setter();
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t TCCHandleStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseTCCStrategyProviding.catFamily.getter in conformance TCCHandleStrategy<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TCCHandleStrategy.catFamily.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.handoffTCCFlow(deviceState:) in conformance TCCHandleStrategy<A1, B1, C1>()
{
  return ClientHandledRequestTCCAcceptanceFlowStrategyAsync.handoffTCCFlow(deviceState:)() & 1;
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.actionForInput(input:) in conformance TCCHandleStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TCCHandleStrategy.actionForInput(input:)(a1, a2);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.parseTCCConfirmationResponse(input:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.parseTCCConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCConfirmationRejectedResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeTCCCancelledResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makeTCCCancelledResponse(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v15 = v6;
  v6[7] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v15[8] = v7;
  uint64_t v8 = a5[11];
  uint64_t v9 = a5[12];
  uint64_t v10 = a5[13];
  uint64_t v11 = a5[14];
  v15[2] = a5[10];
  v15[3] = v8;
  v15[4] = v9;
  v15[5] = v10;
  v15[6] = v11;
  uint64_t v12 = type metadata accessor for TCCHandleStrategy();
  *uint64_t v7 = v15[7];
  v7[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66828](a1, a2, a3, a4, v12, a6);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForTCCAcceptance(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(a1, a2, a3);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnEmptyParse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  uint64_t v10 = a4[14];
  v14[2] = a4[10];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for TCCHandleStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F666A0](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeRepromptOnLowConfidence(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  uint64_t v10 = a4[14];
  v14[2] = a4[10];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for TCCHandleStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F666B0](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makePromptForDeviceUnlock(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  uint64_t v10 = a4[14];
  v14[2] = a4[10];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for TCCHandleStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F666A8](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for RequestTCCAcceptanceFlowStrategyAsync.makeHandoffForAuthenticationResponse(app:intent:) in conformance TCCHandleStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  uint64_t v10 = a4[14];
  v14[2] = a4[10];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for TCCHandleStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F666B8](a1, a2, a3, v11, a5);
}

void DialogExecutionResult.toTemplatingResult()(uint64_t a1@<X8>)
{
  v2[1] = a1;
  uint64_t v13 = 0;
  uint64_t v17 = closure #1 in DialogExecutionResult.toTemplatingResult();
  id v20 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = type metadata accessor for BehaviorAfterSpeaking();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v3 - 8;
  unint64_t v6 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (char *)v2 - v6;
  id v20 = (id)MEMORY[0x270FA5388](v9);
  id v8 = objc_msgSend(v20, sel_catId);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v1;
  id v12 = objc_msgSend(v9, sel_dialog);
  type metadata accessor for DialogElement();
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DialogElement]);
  uint64_t v16 = type metadata accessor for TemplatingSection();
  lazy protocol witness table accessor for type [DialogElement] and conformance [A]();
  uint64_t v18 = Sequence.compactMap<A>(_:)();
  v2[0] = v18;
  outlined destroy of [SFCardSection]();

  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x263F6FD28], v3);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

uint64_t closure #1 in DialogExecutionResult.toTemplatingResult()@<X0>(uint64_t a1@<X8>)
{
  DialogElement.toTemplatingSection()(a1);
  uint64_t v1 = type metadata accessor for TemplatingSection();
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(a1, 0, 1);
}

void DialogElement.toTemplatingSection()(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v45 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  unint64_t v31 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v32 = (char *)&v10 - v31;
  uint64_t v33 = type metadata accessor for TemplatingText();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = v33 - 8;
  unint64_t v36 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v39);
  uint64_t v37 = (char *)&v10 - v36;
  uint64_t v45 = v2;
  id v38 = objc_msgSend(v2, sel_id);
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v3;
  id v43 = objc_msgSend(v39, sel_fullPrint);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v4;
  int v44 = String.isEmpty.getter();
  swift_bridgeObjectRelease();

  if (v44)
  {
    id v22 = objc_msgSend(v39, sel_fullSpeak);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v6;

    uint64_t v28 = v23;
    uint64_t v29 = v24;
  }
  else
  {
    id v25 = objc_msgSend(v39, sel_fullPrint);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v5;

    uint64_t v28 = v26;
    uint64_t v29 = v27;
  }
  TemplatingText.init(text:speakableTextOverride:)();
  id v20 = objc_msgSend(v39, sel_fullPrint);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v7;
  int v21 = String.isEmpty.getter();
  swift_bridgeObjectRelease();

  if (v21)
  {
    id v11 = objc_msgSend(v39, sel_fullSpeak);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v9;

    uint64_t v17 = v12;
    uint64_t v18 = v13;
  }
  else
  {
    id v14 = objc_msgSend(v39, sel_fullPrint);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v8;

    uint64_t v17 = v15;
    uint64_t v18 = v16;
  }
  TemplatingText.init(text:speakableTextOverride:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
  objc_msgSend(v39, sel_spokenOnly);
  TemplatingSection.init(id:content:caption:spokenOnly:)();
}

uint64_t sub_25D957FBC()
{
  return swift_deallocObject();
}

uint64_t sub_25D957FE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D958014()
{
  return swift_deallocObject();
}

uint64_t sub_25D958054()
{
  return swift_deallocObject();
}

uint64_t sub_25D958094()
{
  return swift_deallocObject();
}

uint64_t sub_25D9580D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D958120()
{
  return swift_deallocObject();
}

uint64_t sub_25D95814C()
{
  return swift_deallocObject();
}

uint64_t sub_25D958178()
{
  return swift_deallocObject();
}

uint64_t sub_25D9581B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9581F8()
{
  return swift_deallocObject();
}

void *outlined init with take of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for AppDisplayInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with copy of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for AppDisplayInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of AppDisplayInfo?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AppDisplayInfo();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t type metadata accessor for SKIDirectInvocation()
{
  uint64_t v2 = lazy cache variable for type metadata for SKIDirectInvocation;
  if (!lazy cache variable for type metadata for SKIDirectInvocation)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocation);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAStartLocalRequest()
{
  uint64_t v2 = lazy cache variable for type metadata for SAStartLocalRequest;
  if (!lazy cache variable for type metadata for SAStartLocalRequest)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAStartLocalRequest);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(uint64_t a1)
{
  return closure #1 in TCCHandleStrategy.makePromptForTCCAcceptance(app:intent:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t *outlined retain of SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  outlined copy of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *outlined release of SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  outlined consume of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25D9586F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D958740()
{
  return swift_deallocObject();
}

uint64_t sub_25D95876C()
{
  return swift_deallocObject();
}

uint64_t sub_25D958798()
{
  return swift_deallocObject();
}

uint64_t sub_25D9587D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D958818()
{
  return swift_deallocObject();
}

uint64_t sub_25D958858()
{
  return swift_deallocObject();
}

uint64_t sub_25D9588A4()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in TCCHandleStrategy.parseTCCConfirmationResponse(input:)()
{
  type metadata accessor for Input();

  return implicit closure #3 in TCCHandleStrategy.parseTCCConfirmationResponse(input:)();
}

uint64_t sub_25D9589D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D958A04()
{
  return swift_deallocObject();
}

uint64_t sub_25D958A30()
{
  return swift_deallocObject();
}

uint64_t sub_25D958A70()
{
  return swift_deallocObject();
}

uint64_t sub_25D958AB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D958AF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D958B1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D958B48()
{
  return swift_deallocObject();
}

uint64_t sub_25D958B88()
{
  return swift_deallocObject();
}

uint64_t sub_25D958BC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D958C14()
{
  return swift_deallocObject();
}

uint64_t sub_25D958C40()
{
  return swift_deallocObject();
}

uint64_t sub_25D958C6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D958CAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D958CEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(uint64_t a1)
{
  return closure #1 in TCCHandleStrategy.makeTCCConfirmationRejectedResponse(app:intent:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_25D958D38()
{
  return swift_deallocObject();
}

uint64_t sub_25D958D84()
{
  return swift_deallocObject();
}

uint64_t sub_25D958DB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D958DDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D958E1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D958E5C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for TCCHandleStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SendTCCHandleStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendTCCHandleStrategy;
  if (!type metadata singleton initialization cache for SendTCCHandleStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SendTCCHandleStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for RequestTCCHandleStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestTCCHandleStrategy;
  if (!type metadata singleton initialization cache for RequestTCCHandleStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata accessor for SearchForAccountsTCCHandleStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsTCCHandleStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsTCCHandleStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for TCCHandleStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t instantiation function for generic protocol witness table for TCCHandleStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RequestTCCAcceptanceFlowStrategyAsync in TCCHandleStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ClientHandledRequestTCCAcceptanceFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in TCCHandleStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t INPerson.identifier.getter()
{
  id v14 = objc_msgSend(v0, sel_contactIdentifier);
  if (v14)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v1;

    uint64_t v12 = v10;
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = v12;
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    return v15;
  }
  id v9 = objc_msgSend(v0, sel_customIdentifier);
  if (v9)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v2;

    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = v7;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  return INPerson.encodeBase64.getter();
}

uint64_t INPerson.hasHandleLabel.getter()
{
  id v9 = v0;
  id v7 = objc_msgSend(v0, sel_personHandle);
  if (v7)
  {
    id v5 = v7;
    id v1 = v7;
    outlined destroy of SFRichText?(&v7);
    id v6 = objc_msgSend(v5, sel_label);

    if (v6)
    {
      INPersonHandleLabel.rawValue.getter(v6);

      char v3 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      char v4 = v3 & 1;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of SFRichText?(&v7);
  }
  char v4 = 2;
LABEL_6:
  if (v4 == 2) {
    unsigned __int8 v8 = 1;
  }
  else {
    unsigned __int8 v8 = v4 & 1;
  }
  return (v8 ^ 1) & 1;
}

uint64_t INPerson.hasHandleValue.getter()
{
  uint64_t v12 = v0;
  id v10 = objc_msgSend(v0, sel_personHandle);
  if (v10)
  {
    id v8 = v10;
    id v1 = v10;
    outlined destroy of SFRichText?(&v10);
    id v9 = objc_msgSend(v8, sel_value);
    if (v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v2;

      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = 0;
    }

    if (v7)
    {
      char v4 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      char v5 = v4 & 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of SFRichText?(&v10);
  }
  char v5 = 2;
LABEL_9:
  if (v5 == 2) {
    unsigned __int8 v11 = 1;
  }
  else {
    unsigned __int8 v11 = v5 & 1;
  }
  return (v11 ^ 1) & 1;
}

uint64_t INPerson.uniqueContactIdentifier.getter()
{
  uint64_t v28 = v0;
  id v26 = objc_msgSend(v0, sel_contactIdentifier);
  if (v26)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v1;

    uint64_t v24 = v22;
    uint64_t v25 = v23;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  if (v25) {
    return v24;
  }
  id v20 = objc_msgSend(v0, sel_customIdentifier);
  if (v20)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v2;

    uint64_t v18 = v16;
    uint64_t v19 = v17;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  if (v19) {
    return v18;
  }
  id v27 = objc_msgSend(v0, sel_personHandle);
  if (v27)
  {
    id v14 = v27;
    id v3 = v27;
    outlined destroy of SFRichText?(&v27);
    id v15 = objc_msgSend(v14, sel_value);
    if (v15)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v4;

      uint64_t v12 = v10;
      uint64_t v13 = v11;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }

    uint64_t v8 = v12;
    uint64_t v9 = v13;
  }
  else
  {
    outlined destroy of SFRichText?(&v27);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  if (v9) {
    return v8;
  }
  id v6 = objc_msgSend(v0, sel_displayName);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t INPerson.toContactQuery()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  id v97 = 0;
  id v96 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  unint64_t v57 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v58 = (char *)v23 - v57;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  unint64_t v59 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)v23 - v59;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  unint64_t v61 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v62 = (uint64_t)v23 - v61;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  unint64_t v63 = (*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v64 = (uint64_t)v23 - v63;
  uint64_t v65 = 0;
  uint64_t v66 = type metadata accessor for PersonNameComponents();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = v66 - 8;
  unint64_t v69 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v65);
  uint64_t v70 = (char *)v23 - v69;
  unint64_t v71 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v72 = (char *)v23 - v71;
  uint64_t v102 = (char *)v23 - v71;
  uint64_t v73 = type metadata accessor for ContactQuery();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = v73 - 8;
  unint64_t v76 = (*(void *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v77 = (char *)v23 - v76;
  uint64_t v101 = (char *)v23 - v76;
  uint64_t v100 = v1;
  ContactQuery.init()();
  id v79 = objc_msgSend(v78, sel_contactIdentifier);
  if (v79)
  {
    id v55 = v79;
    id v52 = v79;
    v53._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53._object = v8;

    Swift::String v54 = v53;
  }
  else
  {
    v54._countAndFlagsBits = 0;
    v54._object = 0;
  }
  Swift::String v98 = v54;
  if (v54._object)
  {
    Swift::String v99 = v98;
  }
  else
  {
    Swift::String v99 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  ContactQuery.id.setter();
  id v51 = objc_msgSend(v78, sel_nameComponents);
  if (v51)
  {
    id v50 = v51;
    id v49 = v51;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v64, v70, v66);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v64, 1, 1, v66);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v64, 1, v66) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v72, v64, v66);
    v90._countAndFlagsBits = PersonNameComponents.namePrefix.getter();
    v90._object = v9;
    if (v9)
    {
      Swift::String v91 = v90;
    }
    else
    {
      Swift::String v91 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.namePrefix.setter();
    v88._countAndFlagsBits = PersonNameComponents.givenName.getter();
    v88._object = v10;
    if (v10)
    {
      Swift::String v89 = v88;
    }
    else
    {
      Swift::String v89 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.givenName.setter();
    v86._countAndFlagsBits = PersonNameComponents.middleName.getter();
    v86._object = v11;
    if (v11)
    {
      Swift::String v87 = v86;
    }
    else
    {
      Swift::String v87 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.middleName.setter();
    v84._countAndFlagsBits = PersonNameComponents.familyName.getter();
    v84._object = v12;
    if (v12)
    {
      Swift::String v85 = v84;
    }
    else
    {
      Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.familyName.setter();
    v82._countAndFlagsBits = PersonNameComponents.nameSuffix.getter();
    v82._object = v13;
    if (v13)
    {
      Swift::String v83 = v82;
    }
    else
    {
      Swift::String v83 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.nameSuffix.setter();
    v80._countAndFlagsBits = PersonNameComponents.nickname.getter();
    v80._object = v14;
    if (v14)
    {
      Swift::String v81 = v80;
    }
    else
    {
      Swift::String v81 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    ContactQuery.nickname.setter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v72, v66);
    goto LABEL_48;
  }
  outlined destroy of PersonNameComponents?(v64);
  id v48 = objc_msgSend(v78, sel_personHandle);
  if (v48)
  {
    id v47 = v48;
    id v43 = v48;
    id v96 = v48;
    id v15 = objc_msgSend(v48, sel_type);
    uint64_t v46 = &v95;
    id v95 = v15;
    int v44 = &v94;
    uint64_t v94 = 0;
    uint64_t v45 = type metadata accessor for INPersonHandleType();
    lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v16 & 1) == 0)
    {
      id v42 = objc_msgSend(v43, sel_value);
      if (v42)
      {
        id v41 = v42;
        id v36 = v42;
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v17;

        uint64_t v39 = v37;
        uint64_t v40 = v38;
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
      }
      uint64_t v34 = v40;
      uint64_t v35 = v39;
      if (v40)
      {
        uint64_t v32 = v35;
        uint64_t v33 = v34;
        uint64_t v29 = v34;
        int v30 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        int v31 = v30 & 1;
      }
      else
      {
        int v31 = 2;
      }
      char v92 = v31;
      if (v31 != 2 && !(v92 & 1))
      {
        INPersonHandle.toContactHandleQuery()(v62);
        uint64_t v18 = type metadata accessor for ContactHandleQuery();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 56))(v62, 0, 1);
        ContactQuery.handle.setter();

        goto LABEL_48;
      }
    }
  }
  id v28 = objc_msgSend(v78, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  ContactQuery.fullName.setter();

LABEL_48:
  id v27 = objc_msgSend(v78, sel_relationship);
  if (v27)
  {
    id v26 = v27;
    id v25 = v27;
    id v97 = v27;
    v23[1] = INPersonHandleLabel.rawValue.getter(v27);
    v23[2] = v19;
    id v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
    unsigned int v24 = 1;
    v20(v58, 1, 1, v73);
    ContactRelationshipQuery.init(label:fromContact:)();
    uint64_t v21 = type metadata accessor for ContactRelationshipQuery();
    (*(void (**)(char *, void, void))(*(void *)(v21 - 8) + 56))(v60, 0, v24);
    ContactQuery.relationship.setter();
  }
  objc_msgSend(v78, sel_isMe);
  ContactQuery.isMe.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v74 + 32))(v56, v77, v73);
}

id INPerson.toCNContact.getter()
{
  type metadata accessor for CNMutableContact();
  id v32 = SAUIAppPunchOut.__allocating_init()();
  id v33 = objc_msgSend(v31, sel_personHandle);
  if (v33)
  {
    id v30 = objc_msgSend(v33, sel_type);
    if (v30)
    {
      if (v30 == (id)1)
      {
        id v29 = objc_msgSend(v33, sel_value);
        if (v29)
        {
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v0;

          uint64_t v27 = v25;
          uint64_t v28 = v26;
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
        if (v28)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          _allocateUninitializedArray<A>(_:)();
          uint64_t v23 = v1;
          id v24 = objc_msgSend(v33, sel_label);
          if (v24)
          {
            uint64_t v19 = INPersonHandleLabel.rawValue.getter(v24);
            uint64_t v20 = v2;

            uint64_t v21 = v19;
            uint64_t v22 = v20;
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v22 = 0;
          }
          swift_bridgeObjectRetain();
          MEMORY[0x2611B9130](v27, v28);
          type metadata accessor for NSString();
          id v17 = CNLabeledValue.__allocating_init(label:value:)(v21, v22);
          swift_bridgeObjectRelease();
          *uint64_t v23 = v17;
          _finalizeUninitializedArray<A>(_:)();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v32, sel_setEmailAddresses_, isa);

          swift_bridgeObjectRelease();
        }
      }
      else if (v30 == (id)2)
      {
        id v16 = objc_msgSend(v33, sel_value);
        if (v16)
        {
          v14._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14._object = v3;

          Swift::String v15 = v14;
        }
        else
        {
          Swift::String v15 = (Swift::String)0;
        }
        if (v15._object)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          _allocateUninitializedArray<A>(_:)();
          uint64_t v12 = v4;
          id v13 = objc_msgSend(v33, sel_label);
          if (v13)
          {
            uint64_t v8 = INPersonHandleLabel.rawValue.getter(v13);
            uint64_t v9 = v5;

            uint64_t v10 = v8;
            uint64_t v11 = v9;
          }
          else
          {
            uint64_t v10 = 0;
            uint64_t v11 = 0;
          }
          type metadata accessor for CNPhoneNumber();
          swift_bridgeObjectRetain();
          CNPhoneNumber.__allocating_init(stringValue:)(v15);
          *uint64_t v12 = CNLabeledValue.__allocating_init(label:value:)(v10, v11);
          _finalizeUninitializedArray<A>(_:)();
          Class v7 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v32, sel_setPhoneNumbers_, v7);

          swift_bridgeObjectRelease();
        }
      }
    }
  }
  return v32;
}

void *INPerson.personType.unsafeMutableAddressor()
{
  return &static INPerson.personType;
}

uint64_t INPersonHandleLabel.rawValue.getter(void *a1)
{
  id v1 = a1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t INPerson.encodeBase64.getter()
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("contactHandle://", 0x10uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  id v1 = v17;
  id v18 = (id)INIntentSlotValueTransformToContactValue();

  if (v18)
  {
    id v16 = v18;
  }
  else
  {
    LOBYTE(v6) = 2;
    uint64_t v7 = 31;
    LODWORD(v8) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id v15 = objc_msgSend(v16, sel_data, v6, v7, v8);
  if (v15)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v2;

    uint64_t v13 = v11;
    unint64_t v14 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xF000000000000000;
  }

  if ((v14 & 0xF000000000000000) == 0xF000000000000000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v9 = v13;
    unint64_t v10 = v14;
  }
  NSDataBase64EncodingOptions v3 = default argument 0 of Data.base64EncodedString(options:)();
  Data.base64EncodedString(options:)(v3);
  outlined consume of Data._Representation(v9, v10);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

uint64_t INPerson.hasName.getter()
{
  v119 = 0;
  uint64_t v73 = type metadata accessor for PersonNameComponents();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = v73 - 8;
  unint64_t v76 = (*(void *)(v74 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v77 = (char *)&v25 - v76;
  uint64_t v78 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                              - 8)
                  + 64);
  unint64_t v79 = (v78 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v0 = MEMORY[0x270FA5388](v97);
  Swift::String v80 = (char *)&v25 - v79;
  unint64_t v81 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  Swift::String v82 = (char *)&v25 - v81;
  unint64_t v83 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  Swift::String v84 = (char *)&v25 - v83;
  unint64_t v85 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  Swift::String v86 = (char *)&v25 - v85;
  unint64_t v87 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  Swift::String v88 = (char *)&v25 - v87;
  unint64_t v89 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  Swift::String v90 = (char *)&v25 - v89;
  unint64_t v91 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v92 = (char *)&v25 - v91;
  unint64_t v93 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v14 = (void *)MEMORY[0x270FA5388](v12);
  uint64_t v94 = (char *)&v25 - v93;
  v119 = v14;
  id v96 = objc_msgSend(v14, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v15;
  int v98 = String.isEmpty.getter();
  swift_bridgeObjectRelease();

  id v16 = v97;
  if ((v98 & 1) == 0)
  {
    int v72 = 1;
    goto LABEL_21;
  }
  id v71 = objc_msgSend(v97, sel_nameComponents);
  if (v71)
  {
    id v70 = v71;
    id v69 = v71;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v92, v77, v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v92, 0, 1, v73);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v92, 1, 1, v73);
  }
  outlined init with take of PersonNameComponents?(v92, v94);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v94, 1, v73) == 0)
  {
    uint64_t v99 = PersonNameComponents.givenName.getter();
    uint64_t v100 = v17;
    if (v17)
    {
      unint64_t v63 = &v99;
      uint64_t v64 = v99;
      uint64_t v65 = v100;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v94);
      int v66 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      int v67 = v66 & 1;
      goto LABEL_11;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v94);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v94);
  }
  int v67 = 2;
LABEL_11:
  char v117 = v67;
  char v118 = 0;
  if (v67 == 2)
  {
    if (v118 == 2)
    {
      BOOL v62 = 1;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  outlined init with copy of Bool?(&v117, &v101);
  if (v118 == 2)
  {
LABEL_18:
    BOOL v62 = 0;
    goto LABEL_17;
  }
  BOOL v62 = (v101 & 1) == (v118 & 1);
LABEL_17:
  int v72 = v62;
LABEL_21:
  int v61 = v72;

  id v18 = v97;
  if (v61)
  {
    int v60 = 1;
    goto LABEL_41;
  }
  id v59 = objc_msgSend(v97, sel_nameComponents);
  if (v59)
  {
    id v58 = v59;
    id v57 = v59;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v88, v77, v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v88, 0, 1, v73);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v88, 1, 1, v73);
  }
  outlined init with take of PersonNameComponents?(v88, v90);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v90, 1, v73) == 0)
  {
    uint64_t v102 = PersonNameComponents.familyName.getter();
    uint64_t v103 = v19;
    if (v19)
    {
      id v51 = &v102;
      uint64_t v52 = v102;
      uint64_t v53 = v103;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v90);
      int v54 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      int v55 = v54 & 1;
      goto LABEL_31;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v90);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v90);
  }
  int v55 = 2;
LABEL_31:
  char v115 = v55;
  char v116 = 0;
  if (v55 == 2)
  {
    if (v116 == 2)
    {
      BOOL v50 = 1;
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  outlined init with copy of Bool?(&v115, &v104);
  if (v116 == 2)
  {
LABEL_38:
    BOOL v50 = 0;
    goto LABEL_37;
  }
  BOOL v50 = (v104 & 1) == (v116 & 1);
LABEL_37:
  int v60 = v50;
LABEL_41:
  int v49 = v60;

  id v20 = v97;
  if (v49)
  {
    int v48 = 1;
    goto LABEL_61;
  }
  id v47 = objc_msgSend(v97, sel_nameComponents);
  if (v47)
  {
    id v46 = v47;
    id v45 = v47;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v84, v77, v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v84, 0, 1, v73);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v84, 1, 1, v73);
  }
  outlined init with take of PersonNameComponents?(v84, v86);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v86, 1, v73) == 0)
  {
    uint64_t v105 = PersonNameComponents.middleName.getter();
    uint64_t v106 = v21;
    if (v21)
    {
      uint64_t v39 = &v105;
      uint64_t v40 = v105;
      uint64_t v41 = v106;
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v86);
      int v42 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      int v43 = v42 & 1;
      goto LABEL_51;
    }
    outlined destroy of String.UTF8View();
    outlined destroy of PersonNameComponents?((uint64_t)v86);
  }
  else
  {
    outlined destroy of PersonNameComponents?((uint64_t)v86);
  }
  int v43 = 2;
LABEL_51:
  char v113 = v43;
  char v114 = 0;
  if (v43 == 2)
  {
    if (v114 == 2)
    {
      BOOL v38 = 1;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  outlined init with copy of Bool?(&v113, &v107);
  if (v114 == 2)
  {
LABEL_58:
    BOOL v38 = 0;
    goto LABEL_57;
  }
  BOOL v38 = (v107 & 1) == (v114 & 1);
LABEL_57:
  int v48 = v38;
LABEL_61:
  int v37 = v48;

  id v22 = v97;
  if ((v37 & 1) == 0)
  {
    id v35 = objc_msgSend(v97, sel_nameComponents);
    if (v35)
    {
      id v34 = v35;
      id v33 = v35;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v80, v77, v73);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v80, 0, 1, v73);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v80, 1, 1, v73);
    }
    outlined init with take of PersonNameComponents?(v80, v82);
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v82, 1, v73) == 0)
    {
      uint64_t v108 = PersonNameComponents.nickname.getter();
      uint64_t v109 = v23;
      if (v23)
      {
        uint64_t v27 = &v108;
        uint64_t v28 = v108;
        uint64_t v29 = v109;
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        outlined destroy of PersonNameComponents?((uint64_t)v82);
        int v30 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        int v31 = v30 & 1;
        goto LABEL_71;
      }
      outlined destroy of String.UTF8View();
      outlined destroy of PersonNameComponents?((uint64_t)v82);
    }
    else
    {
      outlined destroy of PersonNameComponents?((uint64_t)v82);
    }
    int v31 = 2;
LABEL_71:
    char v111 = v31;
    char v112 = 0;
    if (v31 == 2)
    {
      if (v112 == 2)
      {
        BOOL v26 = 1;
        goto LABEL_77;
      }
    }
    else
    {
      outlined init with copy of Bool?(&v111, &v110);
      if (v112 != 2)
      {
        BOOL v26 = (v110 & 1) == (v112 & 1);
LABEL_77:
        int v36 = v26;
        goto LABEL_81;
      }
    }
    BOOL v26 = 0;
    goto LABEL_77;
  }
  int v36 = 1;
LABEL_81:
  int v25 = v36;

  return v25 & 1;
}

uint64_t INPerson.hasIdentifier.getter()
{
  id v27 = objc_msgSend(v0, sel_contactIdentifier);
  if (v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v1;

    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  outlined destroy of String.UTF8View();
  id v2 = v0;
  if (v26)
  {
    id v24 = objc_msgSend(v0, sel_contactIdentifier);
    if (v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v3;

      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v23 = 0;
    }
    if (v23)
    {
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      char v20 = String.isEmpty.getter();
      swift_bridgeObjectRelease();
      char v21 = v20 & 1;
    }
    else
    {
      outlined destroy of String.UTF8View();
      char v21 = 2;
    }
    if (v21 == 2) {
      char v28 = 1;
    }
    else {
      char v28 = v21 & 1;
    }
    char v19 = v28 ^ 1;
  }
  else
  {
    char v19 = 0;
  }

  id v4 = v0;
  if (v19)
  {
    char v18 = 1;
  }
  else
  {
    id v17 = objc_msgSend(v0, sel_customIdentifier);
    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v5;

      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v16 = 0;
    }
    outlined destroy of String.UTF8View();
    id v6 = v0;
    if (v16)
    {
      id v14 = objc_msgSend(v0, sel_customIdentifier);
      if (v14)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v7;

        uint64_t v12 = v11;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v12)
      {
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        char v9 = String.isEmpty.getter();
        swift_bridgeObjectRelease();
        char v10 = v9 & 1;
      }
      else
      {
        outlined destroy of String.UTF8View();
        char v10 = 2;
      }
      if (v10 == 2) {
        char v29 = 1;
      }
      else {
        char v29 = v10 & 1;
      }
      char v13 = v29 ^ 1;
    }
    else
    {
      char v13 = 0;
    }

    char v18 = v13;
  }

  return v18 & 1;
}

uint64_t INPerson.hasIdentifiableInfo.getter()
{
  char v6 = INPerson.hasIdentifier.getter();
  id v0 = v5;
  if (v6) {
    char v4 = 1;
  }
  else {
    char v4 = INPerson.hasName.getter();
  }

  id v1 = v5;
  if (v4) {
    char v3 = 1;
  }
  else {
    char v3 = INPerson.hasHandleValue.getter();
  }

  return v3 & 1;
}

BOOL INPerson.isEmpty.getter()
{
  Swift::String v82 = 0;
  uint64_t v71 = type metadata accessor for PersonNameComponents();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = v71 - 8;
  unint64_t v74 = (*(void *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v71);
  uint64_t v75 = (char *)&v14 - v74;
  unint64_t v77 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  id v0 = (void *)MEMORY[0x270FA5388](v76);
  uint64_t v78 = (uint64_t)&v14 - v77;
  Swift::String v82 = v0;
  id v81 = objc_msgSend(v0, sel_personHandle);
  BOOL v70 = v81 == 0;
  BOOL v69 = v70;
  outlined destroy of SFRichText?(&v81);
  id v1 = v76;
  if (v69)
  {
    id v68 = objc_msgSend(v76, sel_nameComponents);
    if (v68)
    {
      id v67 = v68;
      id v66 = v68;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v78, v75, v71);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v78, 0, 1, v71);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v78, 1, 1, v71);
    }
    BOOL v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v78, 1, v71) == 1;
    BOOL v63 = v65;
    outlined destroy of PersonNameComponents?(v78);
    BOOL v64 = v63;
  }
  else
  {
    BOOL v64 = 0;
  }
  BOOL v62 = v64;

  id v2 = v76;
  if (v62)
  {
    id v59 = objc_msgSend(v76, sel_displayName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v3;
    int v60 = String.isEmpty.getter();
    swift_bridgeObjectRelease();

    int v61 = v60;
  }
  else
  {
    int v61 = 0;
  }
  int v57 = v61;

  id v4 = v76;
  if (v57)
  {
    v79[0] = objc_msgSend(v76, sel_image);
    BOOL v56 = v79[0] == 0;
    BOOL v54 = v56;
    outlined destroy of SFRichText?(v79);
    BOOL v55 = v54;
  }
  else
  {
    BOOL v55 = 0;
  }
  BOOL v53 = v55;

  id v5 = v76;
  if (v53)
  {
    id v52 = objc_msgSend(v76, sel_contactIdentifier);
    if (v52)
    {
      id v51 = v52;
      id v46 = v52;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v48 = v6;

      int v49 = (void *)v47;
      BOOL v50 = v48;
    }
    else
    {
      int v49 = 0;
      BOOL v50 = 0;
    }
    v79[1] = v49;
    v79[2] = v50;
    BOOL v45 = v50 == 0;
    BOOL v43 = v45;
    outlined destroy of String.UTF8View();
    BOOL v44 = v43;
  }
  else
  {
    BOOL v44 = 0;
  }
  BOOL v42 = v44;

  id v7 = v76;
  if (v42)
  {
    id v41 = objc_msgSend(v76, sel_customIdentifier);
    if (v41)
    {
      id v40 = v41;
      id v35 = v41;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v37 = v8;

      BOOL v38 = (void *)v36;
      uint64_t v39 = v37;
    }
    else
    {
      BOOL v38 = 0;
      uint64_t v39 = 0;
    }
    v79[3] = v38;
    v79[4] = v39;
    BOOL v34 = v39 == 0;
    BOOL v32 = v34;
    outlined destroy of String.UTF8View();
    BOOL v33 = v32;
  }
  else
  {
    BOOL v33 = 0;
  }
  BOOL v31 = v33;

  id v9 = v76;
  if (v31) {
    unsigned int v30 = objc_msgSend(v76, sel_isMe) ^ 1;
  }
  else {
    unsigned int v30 = 0;
  }
  unsigned int v29 = v30;

  id v10 = v76;
  if (v29)
  {
    v80[0] = objc_msgSend(v76, sel_relationship);
    BOOL v28 = v80[0] == 0;
    BOOL v26 = v28;
    outlined destroy of SFRichText?(v80);
    BOOL v27 = v26;
  }
  else
  {
    BOOL v27 = 0;
  }
  BOOL v25 = v27;

  id v11 = v76;
  if (v25)
  {
    id v24 = objc_msgSend(v76, sel_sourceAppBundleIdentifier);
    if (v24)
    {
      id v23 = v24;
      id v18 = v24;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v20 = v12;

      char v21 = (void *)v19;
      uint64_t v22 = v20;
    }
    else
    {
      char v21 = 0;
      uint64_t v22 = 0;
    }
    v80[1] = v21;
    v80[2] = v22;
    BOOL v17 = v22 == 0;
    BOOL v15 = v17;
    outlined destroy of String.UTF8View();
    BOOL v16 = v15;
  }
  else
  {
    BOOL v16 = 0;
  }
  BOOL v14 = v16;

  return v14;
}

id CNLabeledValue.__allocating_init(label:value:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CNLabeledValue.init(label:value:)(a1, a2);
}

CNPhoneNumber __swiftcall CNPhoneNumber.__allocating_init(stringValue:)(Swift::String stringValue)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNPhoneNumber)@nonobjc CNPhoneNumber.init(stringValue:)();
}

uint64_t INPersonHandle.toContactHandleQuery()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  BOOL v42 = 0;
  id v41 = 0;
  v40._countAndFlagsBits = 0;
  v40._object = 0;
  v39._countAndFlagsBits = 0;
  v39._object = 0;
  uint64_t v37 = 0;
  BOOL v38 = 0;
  id v36 = 0;
  uint64_t v28 = type metadata accessor for ContactHandle.HandleType();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v28 - 8;
  unint64_t v31 = (*(void *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v27);
  BOOL v32 = &v7[-v31];
  unint64_t v33 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (void *)MEMORY[0x270FA5388](v1);
  BOOL v34 = &v7[-v33];
  BOOL v42 = &v7[-v33];
  id v41 = v3;
  id v35 = objc_msgSend(v3, sel_type);
  if (v35 == (id)1)
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v29 + 104))(v32, *MEMORY[0x263F6D320], v28);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 32))(v34, v32, v28);
  }
  else
  {
    if (v35 == (id)2) {
      (*(void (**)(unsigned char *, void, uint64_t))(v29 + 104))(v32, *MEMORY[0x263F6D328], v28);
    }
    else {
      (*(void (**)(unsigned char *, void, uint64_t))(v29 + 104))(v32, *MEMORY[0x263F6D330], v28);
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 32))(v34, v32, v28);
  }
  Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  id v25 = objc_msgSend(v27, sel_label);
  if (v25)
  {
    id v24 = v25;
    id v23 = v25;
    id v36 = v25;
    v40._countAndFlagsBits = INPersonHandleLabel.rawValue.getter(v25);
    v40._object = v4;
    swift_bridgeObjectRelease();
  }
  Swift::String v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  id v22 = objc_msgSend(v27, sel_value);
  if (v22)
  {
    id v21 = v22;
    id v16 = v22;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = v5;

    uint64_t v19 = v17;
    char v20 = v18;
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
  }
  BOOL v14 = v20;
  uint64_t v15 = v19;
  if (v20)
  {
    uint64_t v12 = v15;
    char v13 = v14;
    v11._object = v14;
    v11._countAndFlagsBits = v15;
    uint64_t v37 = v15;
    BOOL v38 = v14;
    swift_bridgeObjectRetain();
    Swift::String v39 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 16))(v32, v34, v28);
  id v10 = &v40;
  *(Swift::String *)&v7[8] = v40;
  swift_bridgeObjectRetain();
  id v9 = &v39;
  Swift::String v8 = v39;
  swift_bridgeObjectRetain();
  ContactHandleQuery.init(type:label:value:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v29 + 8))(v34, v28);
}

unint64_t type metadata accessor for CNMutableContact()
{
  uint64_t v2 = lazy cache variable for type metadata for CNMutableContact;
  if (!lazy cache variable for type metadata for CNMutableContact)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CNMutableContact);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for CNPhoneNumber()
{
  uint64_t v2 = lazy cache variable for type metadata for CNPhoneNumber;
  if (!lazy cache variable for type metadata for CNPhoneNumber)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSString()
{
  uint64_t v2 = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSString);
    return ObjCClassMetadata;
  }
  return v2;
}

unsigned char *outlined init with copy of Bool?(unsigned char *a1, unsigned char *a2)
{
  uint64_t result = a2;
  *a2 = *a1;
  return result;
}

id @nonobjc CNLabeledValue.init(label:value:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611B9130](a1);
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v7, sel_initWithLabel_value_, v6);
  }
  else
  {
    id v2 = objc_msgSend(v7, sel_initWithLabel_value_, 0);
  }
  id v5 = v2;
  swift_unknownObjectRelease();

  return v5;
}

id @nonobjc CNPhoneNumber.init(stringValue:)()
{
  id v2 = (id)MEMORY[0x2611B9130]();
  id v3 = objc_msgSend(v1, sel_initWithStringValue_);

  swift_bridgeObjectRelease();
  return v3;
}

id SAUIButton.init(commands:text:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v3 = v11;
  id v4 = v11;
  id v5 = v11;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setCommands_, isa);

  swift_bridgeObjectRetain();
  id v9 = (id)MEMORY[0x2611B9130](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setText_, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

id SASTCommandTemplateAction.init(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v3 = v11;
  id v4 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  _allocateUninitializedArray<A>(_:)();
  *id v5 = static SASTCommandTemplateAction.makeLaunchAppWithIntentCommand(intent:appId:)(a1, a2, a3);
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setCommands_, isa);

  swift_bridgeObjectRelease();
  return v11;
}

id SASTApplicationBannerItem.init(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v3 = v12;
  id v4 = v12;
  id v5 = v12;
  swift_bridgeObjectRetain();
  id v8 = (id)MEMORY[0x2611B9130](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setBundleId_, v8);

  type metadata accessor for SASTCommandTemplateAction();
  id v6 = a1;
  swift_bridgeObjectRetain();
  SASTCommandTemplateAction.init(intent:appId:)(a1, a2, a3);
  objc_msgSend(v12, sel_setAction_);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v12;
}

id static SATextDecorationRegion.from(_:property:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SATextDecorationRegion();
  id v9 = SAUIAppPunchOut.__allocating_init()();
  String.count.getter();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v9, sel_setLength_);

  swift_bridgeObjectRetain();
  id v8 = (id)MEMORY[0x2611B9130](a3, a4);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setProperty_, v8);

  return v9;
}

void SASTItemGroup.addToTemplateIfApplicable(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  char v10 = (*(uint64_t (**)(uint64_t))(a2 + 8))(ObjectType);
  swift_unknownObjectRelease();
  if (v10)
  {
    id v7 = objc_msgSend(v2, sel_templateItems);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (v6)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
      Array.append(_:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setTemplateItems_);
    }
    else
    {
      swift_bridgeObjectRetain();
      objc_msgSend(v2, sel_setTemplateItems_, 0);

      outlined destroy of [SFCardSection]();
    }
  }
}

id SAIntentGroupProtobufMessage.init(intent:)(void *a1)
{
  id v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v1 = v15;
  id v2 = v15;
  id v3 = v15;
  id v17 = objc_msgSend(a1, sel_backingStore);
  id v18 = objc_msgSend(v17, sel_data);
  if (v18)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v4;

    uint64_t v13 = v11;
    unint64_t v14 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  if ((v14 & 0xF000000000000000) == 0xF000000000000000)
  {
    Class v10 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v13, v14);
    Class v10 = isa;
  }

  objc_msgSend(v15, sel_setData_, v10);
  id v7 = objc_msgSend(a1, sel_typeName);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = (id)MEMORY[0x2611B9130](v5);
  swift_bridgeObjectRelease();

  objc_msgSend(v15, sel_setTypeName_, v8);
  return v15;
}

id SAIntentGroupProtobufMessage.init(response:)(void *a1)
{
  id v25 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v1 = v25;
  id v2 = v25;
  id v3 = v25;
  id v27 = objc_msgSend(a1, sel_backingStore);
  if (v27)
  {
    id v24 = v27;
  }
  else
  {
    LOBYTE(v7) = 2;
    uint64_t v8 = 83;
    LODWORD(v9) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id v23 = objc_msgSend(v24, sel_data, v7, v8, v9);
  if (v23)
  {
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v4;

    uint64_t v21 = v19;
    unint64_t v22 = v20;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0xF000000000000000;
  }
  if ((v22 & 0xF000000000000000) == 0xF000000000000000)
  {
    Class v18 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v21, v22);
    Class v18 = isa;
  }

  objc_msgSend(v25, sel_setData_, v18);
  id v16 = objc_msgSend(a1, sel__payloadResponseTypeName);
  if (v16)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v5;

    uint64_t v14 = v12;
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  if (v15)
  {
    uint64_t v10 = MEMORY[0x2611B9130](v14);
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  objc_msgSend(v25, sel_setTypeName_);

  return v25;
}

uint64_t SASTColumnDataListItem.shouldAddToSnippet.getter()
{
  uint64_t v21 = v0;
  id v15 = objc_msgSend(v0, sel_decoratedRows);
  if (v15)
  {
    type metadata accessor for SAUIDecoratedText();
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v19 = v14;
  if (v14)
  {
    uint64_t v20 = v19;
  }
  else
  {
    type metadata accessor for SAUIDecoratedText();
    uint64_t v20 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIDecoratedText]);
  lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]();
  char v12 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  id v1 = v0;
  if (v12)
  {
    id v16 = objc_msgSend(v0, sel_title);
    if (v16)
    {
      id v9 = v16;
      id v2 = v16;
      outlined destroy of SFRichText?(&v16);
      id v10 = objc_msgSend(v9, sel_text);
      if (v10)
      {
        v6._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v6._object = v3;

        Swift::String v7 = v6;
      }
      else
      {
        Swift::String v7 = (Swift::String)0;
      }

      Swift::String v8 = v7;
    }
    else
    {
      outlined destroy of SFRichText?(&v16);
      Swift::String v8 = (Swift::String)0;
    }
    if (v8._object)
    {
      Swift::String v17 = v8;
    }
    else
    {
      Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    char v5 = String.isEmpty.getter();
    swift_bridgeObjectRelease();
    char v11 = v5 ^ 1;
  }
  else
  {
    char v11 = 1;
  }

  return v11 & 1;
}

uint64_t protocol witness for SASTItemGroupChildView.shouldAddToSnippet.getter in conformance SASTColumnDataListItem()
{
  return SASTColumnDataListItem.shouldAddToSnippet.getter() & 1;
}

uint64_t SASTPropertyListItem.shouldAddToSnippet.getter()
{
  id v5 = objc_msgSend(v0, sel_decoratedValues);
  if (v5)
  {
    type metadata accessor for SAUIDecoratedText();
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (!v4)
  {
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIDecoratedText]);
  lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]();
  int v2 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return (v2 ^ 1) & 1;
}

uint64_t protocol witness for SASTItemGroupChildView.shouldAddToSnippet.getter in conformance SASTPropertyListItem()
{
  return SASTPropertyListItem.shouldAddToSnippet.getter() & 1;
}

id static SASTCommandTemplateAction.makeLaunchAppWithIntentCommand(intent:appId:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v16 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  id v28 = 0;
  uint64_t v15 = 0;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v23 - 8);
  uint64_t v22 = v23 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  id v24 = (char *)&v13 - v14;
  uint64_t v32 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v6;
  uint64_t v29 = v3;
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  id v27 = SAUIAppPunchOut.__allocating_init()();
  id v28 = v27;
  type metadata accessor for SAIntentGroupProtobufMessage();
  id v7 = v16;
  id v17 = SAIntentGroupProtobufMessage.init(intent:)(v16);
  objc_msgSend(v27, sel_setHandledIntent_);

  id v8 = v27;
  swift_bridgeObjectRetain();
  id v20 = (id)MEMORY[0x2611B9130](v18, v19);
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setAppId_, v20);

  id v9 = v27;
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v25 = v11;
  id v26 = (id)MEMORY[0x2611B9130](v10);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setAceId_, v26);

  return v27;
}

unint64_t lazy protocol witness table accessor for type [SAUIDecoratedText] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAUIDecoratedText]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SAUIDecoratedText] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent()
{
  uint64_t v2 = lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent;
  if (!lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t static FlowUtil.actionForInput(parse:intentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v314 = a4;
  uint64_t v377 = a1;
  uint64_t v378 = a2;
  uint64_t v379 = a3;
  uint64_t v369 = 0;
  v315 = partial apply for implicit closure #2 in static FlowUtil.actionForInput(parse:intentType:);
  v316 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v317 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v320 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v321 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v322 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v323 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v324 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v325 = partial apply for closure #1 in static FlowUtil.actionForInput(parse:intentType:);
  v326 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v327 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v328 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v329 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v448 = 0;
  uint64_t v445 = 0;
  uint64_t v443 = 0;
  uint64_t v444 = 0;
  uint64_t v330 = 0;
  v447 = 0;
  unint64_t v429 = 0;
  uint64_t v430 = 0;
  v446 = 0;
  unint64_t v331 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v332 = (uint64_t)&v98 - v331;
  uint64_t v333 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v334 = *(void *)(v333 - 8);
  uint64_t v335 = v333 - 8;
  unint64_t v336 = (*(void *)(v334 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v369);
  v337 = (char *)&v98 - v336;
  unint64_t v338 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  v339 = (char *)&v98 - v338;
  v448 = (char *)&v98 - v338;
  uint64_t v340 = type metadata accessor for USOParse();
  uint64_t v341 = *(void *)(v340 - 8);
  uint64_t v342 = v340 - 8;
  unint64_t v343 = (*(void *)(v341 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v340);
  v344 = (char *)&v98 - v343;
  v447 = (char *)&v98 - v343;
  unint64_t v345 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v369);
  uint64_t v346 = (uint64_t)&v98 - v345;
  uint64_t v347 = type metadata accessor for Logger();
  uint64_t v348 = *(void *)(v347 - 8);
  uint64_t v349 = v347 - 8;
  uint64_t v350 = *(void *)(v348 + 64);
  unint64_t v351 = (v350 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v369);
  v352 = (char *)&v98 - v351;
  unint64_t v353 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v354 = (char *)&v98 - v353;
  unint64_t v355 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v356 = (char *)&v98 - v355;
  unint64_t v357 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v358 = (char *)&v98 - v357;
  unint64_t v359 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v360 = (char *)&v98 - v359;
  unint64_t v361 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v362 = (char *)&v98 - v361;
  unint64_t v363 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v364 = (char *)&v98 - v363;
  unint64_t v365 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v366 = (char *)&v98 - v365;
  unint64_t v367 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20);
  v368 = (char *)&v98 - v367;
  uint64_t v370 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v371 = *(void *)(v370 - 8);
  uint64_t v372 = v370 - 8;
  unint64_t v373 = (*(void *)(v371 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = MEMORY[0x270FA5388](v369);
  v374 = (char *)&v98 - v373;
  unint64_t v375 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v22);
  v376 = (char *)&v98 - v375;
  v446 = (char *)&v98 - v375;
  uint64_t v382 = type metadata accessor for Parse();
  uint64_t v380 = *(void *)(v382 - 8);
  uint64_t v381 = v382 - 8;
  MEMORY[0x270FA5388](v382);
  v383 = (char *)&v98 - v24;
  uint64_t v445 = v25;
  uint64_t v443 = v378;
  uint64_t v444 = v379;
  (*(void (**)(void))(v380 + 16))();
  int v384 = (*(uint64_t (**)(char *, uint64_t))(v380 + 88))(v383, v382);
  if (v384 == *MEMORY[0x263F6FF70])
  {
    (*(void (**)(char *, uint64_t))(v380 + 96))(v383, v382);
    (*(void (**)(char *, char *, uint64_t))(v371 + 32))(v376, v383, v370);
    v446 = v376;
    if (Parse.isCancel.getter())
    {
      id v26 = v368;
      uint64_t v27 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v26, v27, v347);
      v312 = Logger.logObject.getter();
      int v311 = static os_log_type_t.debug.getter();
      v309 = &v389;
      uint64_t v389 = 2;
      unint64_t v307 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v308 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v310 = v390;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v313 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v312, (os_log_type_t)v311))
      {
        uint64_t v28 = v330;
        v297 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v296 = 0;
        uint64_t v298 = createStorage<A>(capacity:type:)(0);
        uint64_t v299 = createStorage<A>(capacity:type:)(v296);
        v303 = &v388;
        v388 = v297;
        v304 = &v387;
        uint64_t v387 = v298;
        v301 = &v386;
        uint64_t v386 = v299;
        unsigned int v300 = 0;
        serialize(_:at:)(0, &v388);
        serialize(_:at:)(v300, v303);
        uint64_t v385 = v313;
        v302 = &v98;
        MEMORY[0x270FA5388](&v98);
        uint64_t v29 = v304;
        uint64_t v30 = &v98 - 6;
        v305 = &v98 - 6;
        v30[2] = (uint64_t)v303;
        v30[3] = (uint64_t)v29;
        v30[4] = v31;
        uint64_t v306 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v28)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v312, (os_log_type_t)v311, "#actionForInput received cancel input, returning .cancel", v297, v310);
          uint64_t v294 = 0;
          destroyStorage<A>(_:count:)(v298, 0, v295);
          destroyStorage<A>(_:count:)(v299, v294, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v297, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v348 + 8))(v368, v347);
      static ActionForInput.cancel()();
      return (*(uint64_t (**)(char *, uint64_t))(v371 + 8))(v376, v370);
    }
    else
    {
      uint64_t v33 = v330;
      uint64_t v403 = static PaymentsDirectInvocations.Identifiers.allCases.getter();
      (*(void (**)(char *, char *, uint64_t))(v371 + 16))(v374, v376, v370);
      v289 = &v98;
      MEMORY[0x270FA5388](&v98);
      v290 = &v98 - 4;
      *(&v98 - 2) = v34;
      uint64_t v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
      lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]();
      uint64_t result = Sequence.contains(where:)();
      uint64_t v292 = v33;
      int v293 = result;
      if (v33)
      {
        __break(1u);
        return result;
      }
      int v288 = v293;
      v286 = *(void (**)(char *, uint64_t))(v371 + 8);
      uint64_t v287 = v371 + 8;
      v286(v374, v370);
      outlined destroy of [SFCardSection]();
      if (v288)
      {
        id v35 = v366;
        uint64_t v36 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v35, v36, v347);
        v284 = Logger.logObject.getter();
        int v283 = static os_log_type_t.debug.getter();
        v281 = &v395;
        uint64_t v395 = 2;
        unint64_t v279 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v280 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v282 = v396;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v285 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v284, (os_log_type_t)v283))
        {
          uint64_t v37 = v292;
          v269 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v267 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v268 = 0;
          uint64_t v270 = createStorage<A>(capacity:type:)(0);
          uint64_t v271 = createStorage<A>(capacity:type:)(v268);
          v275 = &v394;
          v394 = v269;
          v276 = &v393;
          uint64_t v393 = v270;
          v273 = &v392;
          uint64_t v392 = v271;
          unsigned int v272 = 0;
          serialize(_:at:)(0, &v394);
          serialize(_:at:)(v272, v275);
          uint64_t v391 = v285;
          v274 = &v98;
          MEMORY[0x270FA5388](&v98);
          BOOL v38 = v276;
          Swift::String v39 = &v98 - 6;
          v277 = &v98 - 6;
          v39[2] = (uint64_t)v275;
          v39[3] = (uint64_t)v38;
          v39[4] = v40;
          uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v37)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25D85A000, v284, (os_log_type_t)v283, "#actionForInput returning .handle for supported direct invocation", v269, v282);
            uint64_t v266 = 0;
            destroyStorage<A>(_:count:)(v270, 0, v267);
            destroyStorage<A>(_:count:)(v271, v266, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v269, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v348 + 8))(v366, v347);
        static ActionForInput.handle()();
        return ((uint64_t (*)(char *, uint64_t))v286)(v376, v370);
      }
      else
      {
        Parse.confirmationResponse.getter(v346);
        uint64_t v41 = type metadata accessor for ConfirmationResponse();
        BOOL v265 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v346, 1) != 1;
        BOOL v264 = v265;
        outlined destroy of ConfirmationResponse?(v346);
        if (!v264)
        {
          v286(v376, v370);
          uint64_t v243 = v292;
          goto LABEL_72;
        }
        BOOL v42 = v364;
        uint64_t v43 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v42, v43, v347);
        v262 = Logger.logObject.getter();
        int v261 = static os_log_type_t.debug.getter();
        v259 = &v401;
        uint64_t v401 = 2;
        unint64_t v257 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v258 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v260 = v402;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v263 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v262, (os_log_type_t)v261))
        {
          uint64_t v44 = v292;
          v247 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v246 = 0;
          uint64_t v248 = createStorage<A>(capacity:type:)(0);
          uint64_t v249 = createStorage<A>(capacity:type:)(v246);
          v253 = &v400;
          v400 = v247;
          v254 = &v399;
          uint64_t v399 = v248;
          v251 = &v398;
          uint64_t v398 = v249;
          unsigned int v250 = 0;
          serialize(_:at:)(0, &v400);
          serialize(_:at:)(v250, v253);
          uint64_t v397 = v263;
          v252 = &v98;
          MEMORY[0x270FA5388](&v98);
          BOOL v45 = v254;
          id v46 = &v98 - 6;
          v255 = &v98 - 6;
          v46[2] = (uint64_t)v253;
          v46[3] = (uint64_t)v45;
          v46[4] = v47;
          uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v44)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25D85A000, v262, (os_log_type_t)v261, "#actionForInput returning .handle for supported direct invocation confirmation response", v247, v260);
            uint64_t v244 = 0;
            destroyStorage<A>(_:count:)(v248, 0, v245);
            destroyStorage<A>(_:count:)(v249, v244, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v247, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v348 + 8))(v364, v347);
        static ActionForInput.handle()();
        return ((uint64_t (*)(char *, uint64_t))v286)(v376, v370);
      }
    }
  }
  else
  {
    if (v384 != *MEMORY[0x263F6FF80])
    {
      (*(void (**)(char *, uint64_t))(v380 + 8))(v383, v382);
      uint64_t v243 = v330;
LABEL_72:
      char v92 = v352;
      uint64_t v112 = v243;
      uint64_t v93 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v92, v93, v347);
      char v118 = Logger.logObject.getter();
      int v117 = static os_log_type_t.debug.getter();
      char v115 = &v441;
      uint64_t v441 = 2;
      unint64_t v113 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v116 = v442;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v119 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v118, (os_log_type_t)v117))
      {
        uint64_t v94 = v112;
        uint64_t v102 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v101 = 0;
        uint64_t v103 = createStorage<A>(capacity:type:)(0);
        uint64_t v104 = createStorage<A>(capacity:type:)(v101);
        uint64_t v108 = &v440;
        v440 = v102;
        uint64_t v109 = &v439;
        uint64_t v439 = v103;
        uint64_t v106 = &v438;
        uint64_t v438 = v104;
        unsigned int v105 = 0;
        serialize(_:at:)(0, &v440);
        serialize(_:at:)(v105, v108);
        uint64_t v437 = v119;
        char v107 = &v98;
        MEMORY[0x270FA5388](&v98);
        uint64_t v95 = v109;
        id v96 = &v98 - 6;
        char v110 = &v98 - 6;
        v96[2] = (uint64_t)v108;
        v96[3] = (uint64_t)v95;
        v96[4] = v97;
        uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v94)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v118, (os_log_type_t)v117, "#FlowUtil actionForInput received unsupported parse type, returning .ignore", v102, v116);
          uint64_t v99 = 0;
          destroyStorage<A>(_:count:)(v103, 0, v100);
          destroyStorage<A>(_:count:)(v104, v99, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v102, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v348 + 8))(v352, v347);
      return static ActionForInput.ignore()();
    }
    int v48 = v344;
    (*(void (**)(char *, uint64_t))(v380 + 96))(v383, v382);
    (*(void (**)(char *, char *, uint64_t))(v341 + 32))(v48, v383, v340);
    v447 = v48;
    USOParse.preferredUserDialogAct.getter(v332);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v332, 1, v333) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v332);
      (*(void (**)(char *, uint64_t))(v341 + 8))(v344, v340);
      uint64_t v243 = v330;
      goto LABEL_72;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v334 + 32))(v339, v332, v333);
    if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
    {
      int v49 = v362;
      uint64_t v50 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v49, v50, v347);
      v241 = Logger.logObject.getter();
      int v240 = static os_log_type_t.debug.getter();
      v238 = &v408;
      uint64_t v408 = 2;
      unint64_t v236 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v237 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v239 = v409;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v242 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v241, (os_log_type_t)v240))
      {
        uint64_t v51 = v330;
        v226 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v225 = 0;
        uint64_t v227 = createStorage<A>(capacity:type:)(0);
        uint64_t v228 = createStorage<A>(capacity:type:)(v225);
        v232 = &v407;
        v407 = v226;
        v233 = &v406;
        uint64_t v406 = v227;
        v230 = &v405;
        uint64_t v405 = v228;
        unsigned int v229 = 0;
        serialize(_:at:)(0, &v407);
        serialize(_:at:)(v229, v232);
        uint64_t v404 = v242;
        v231 = &v98;
        MEMORY[0x270FA5388](&v98);
        id v52 = v233;
        BOOL v53 = &v98 - 6;
        v234 = &v98 - 6;
        v53[2] = (uint64_t)v232;
        v53[3] = (uint64_t)v52;
        v53[4] = v54;
        uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v51)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v241, (os_log_type_t)v240, "#actionForInput returning .handle for supported USO confirmation response", v226, v239);
          uint64_t v223 = 0;
          destroyStorage<A>(_:count:)(v227, 0, v224);
          destroyStorage<A>(_:count:)(v228, v223, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v226, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v348 + 8))(v362, v347);
      static ActionForInput.handle()();
      (*(void (**)(char *, uint64_t))(v334 + 8))(v339, v333);
      return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v344, v340);
    }
    else
    {
      int v222 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      (*(void (**)(char *, char *, uint64_t))(v334 + 16))(v337, v339, v333);
      if (v222) {
        int v221 = 1;
      }
      else {
        int v221 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      }
      int v220 = v221;
      v218 = *(void (**)(char *, uint64_t))(v334 + 8);
      uint64_t v219 = v334 + 8;
      v218(v337, v333);
      if (v220)
      {
        BOOL v55 = v360;
        uint64_t v56 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v55, v56, v347);
        v216 = Logger.logObject.getter();
        int v215 = static os_log_type_t.debug.getter();
        v213 = &v414;
        uint64_t v414 = 2;
        unint64_t v211 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v212 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v214 = v415;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v217 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v216, (os_log_type_t)v215))
        {
          uint64_t v57 = v330;
          v201 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v200 = 0;
          uint64_t v202 = createStorage<A>(capacity:type:)(0);
          uint64_t v203 = createStorage<A>(capacity:type:)(v200);
          v207 = &v413;
          v413 = v201;
          v208 = &v412;
          uint64_t v412 = v202;
          v205 = &v411;
          uint64_t v411 = v203;
          unsigned int v204 = 0;
          serialize(_:at:)(0, &v413);
          serialize(_:at:)(v204, v207);
          uint64_t v410 = v217;
          v206 = &v98;
          MEMORY[0x270FA5388](&v98);
          uint64_t v58 = v208;
          id v59 = &v98 - 6;
          v209 = &v98 - 6;
          v59[2] = (uint64_t)v207;
          v59[3] = (uint64_t)v58;
          v59[4] = v60;
          uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v57)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25D85A000, v216, (os_log_type_t)v215, "#actionForInput returning .cancel for supported USO confirmation response", v201, v214);
            uint64_t v198 = 0;
            destroyStorage<A>(_:count:)(v202, 0, v199);
            destroyStorage<A>(_:count:)(v203, v198, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v201, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v348 + 8))(v360, v347);
        static ActionForInput.cancel()();
        v218(v339, v333);
        return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v344, v340);
      }
      else
      {
        uint64_t v197 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
        if (v197)
        {
          uint64_t v196 = v197;
          uint64_t v191 = v197;
          unint64_t v192 = UsoTask.siriKitIntentType.getter();
          uint64_t v193 = v61;
          swift_release();
          unint64_t v194 = v192;
          uint64_t v195 = v193;
        }
        else
        {
          unint64_t v194 = 0;
          uint64_t v195 = 0;
        }
        uint64_t v189 = v195;
        unint64_t v190 = v194;
        if (v194)
        {
          unint64_t v187 = v190;
          uint64_t v188 = v189;
          unint64_t v429 = v190;
          uint64_t v430 = v189;
          if (v190 == v378)
          {
            BOOL v62 = v358;
            uint64_t v63 = Logger.payments.unsafeMutableAddressor();
            (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v62, v63, v347);
            v185 = Logger.logObject.getter();
            int v184 = static os_log_type_t.debug.getter();
            v182 = &v420;
            uint64_t v420 = 2;
            unint64_t v180 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            unint64_t v181 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)();
            uint32_t v183 = v421;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
            uint64_t v186 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v185, (os_log_type_t)v184))
            {
              uint64_t v64 = v330;
              v170 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v169 = 0;
              uint64_t v171 = createStorage<A>(capacity:type:)(0);
              uint64_t v172 = createStorage<A>(capacity:type:)(v169);
              v176 = &v419;
              v419 = v170;
              v177 = &v418;
              uint64_t v418 = v171;
              v174 = &v417;
              uint64_t v417 = v172;
              unsigned int v173 = 0;
              serialize(_:at:)(0, &v419);
              serialize(_:at:)(v173, v176);
              uint64_t v416 = v186;
              v175 = &v98;
              MEMORY[0x270FA5388](&v98);
              BOOL v65 = v177;
              id v66 = &v98 - 6;
              v178 = &v98 - 6;
              v66[2] = (uint64_t)v176;
              v66[3] = (uint64_t)v65;
              v66[4] = v67;
              uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              if (v64)
              {
                __break(1u);
              }
              else
              {
                _os_log_impl(&dword_25D85A000, v185, (os_log_type_t)v184, "#FlowUtil actionForInput returning .handle for supported USO task", v170, v183);
                uint64_t v167 = 0;
                destroyStorage<A>(_:count:)(v171, 0, v168);
                destroyStorage<A>(_:count:)(v172, v167, MEMORY[0x263F8EE58] + 8);
                MEMORY[0x2611B9630](v170, MEMORY[0x263F8E778]);
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }

            (*(void (**)(char *, uint64_t))(v348 + 8))(v358, v347);
            static ActionForInput.handle()();
            v218(v339, v333);
            return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v344, v340);
          }
          else
          {
            id v68 = v356;
            uint64_t v69 = Logger.payments.unsafeMutableAddressor();
            (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v68, v69, v347);
            uint64_t v155 = 32;
            uint64_t v156 = 7;
            uint64_t v70 = swift_allocObject();
            uint64_t v71 = v379;
            uint64_t v154 = v70;
            *(void *)(v70 + 16) = v378;
            *(void *)(v70 + 24) = v71;
            v165 = Logger.logObject.getter();
            int v166 = static os_log_type_t.debug.getter();
            v151 = &v427;
            uint64_t v427 = 12;
            unint64_t v149 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            unint64_t v150 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)();
            uint32_t v152 = v428;
            uint64_t v153 = 17;
            uint64_t v159 = swift_allocObject();
            *(unsigned char *)(v159 + 16) = 32;
            uint64_t v160 = swift_allocObject();
            *(unsigned char *)(v160 + 16) = 8;
            uint64_t v72 = swift_allocObject();
            uint64_t v73 = v154;
            uint64_t v157 = v72;
            *(void *)(v72 + 16) = v315;
            *(void *)(v72 + 24) = v73;
            uint64_t v74 = swift_allocObject();
            uint64_t v75 = v157;
            uint64_t v158 = v74;
            *(void *)(v74 + 16) = v316;
            *(void *)(v74 + 24) = v75;
            uint64_t v76 = swift_allocObject();
            uint64_t v77 = v158;
            uint64_t v162 = v76;
            *(void *)(v76 + 16) = v317;
            *(void *)(v76 + 24) = v77;
            uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
            uint64_t v161 = _allocateUninitializedArray<A>(_:)();
            v163 = v78;
            swift_retain();
            uint64_t v79 = v159;
            Swift::String v80 = v163;
            *v163 = v318;
            v80[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v79;
            swift_retain();
            uint64_t v81 = v160;
            Swift::String v82 = v163;
            v163[2] = v319;
            v82[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v81;
            swift_retain();
            unint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v162;
            Swift::String v84 = v163;
            v163[4] = v320;
            v84[5] = v83;
            _finalizeUninitializedArray<A>(_:)();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v165, (os_log_type_t)v166))
            {
              uint64_t v85 = v330;
              v142 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v143 = createStorage<A>(capacity:type:)(0);
              uint64_t v144 = createStorage<A>(capacity:type:)(1);
              v145 = &v426;
              v426 = v142;
              v146 = &v425;
              uint64_t v425 = v143;
              v147 = &v424;
              uint64_t v424 = v144;
              serialize(_:at:)(2, &v426);
              serialize(_:at:)(1, v145);
              v422 = v318;
              uint64_t v423 = v159;
              closure #1 in osLogInternal(_:log:type:)(&v422, (uint64_t)v145, (uint64_t)v146, (uint64_t)v147);
              uint64_t v148 = v85;
              if (v85)
              {
                __break(1u);
              }
              else
              {
                v422 = v319;
                uint64_t v423 = v160;
                closure #1 in osLogInternal(_:log:type:)(&v422, (uint64_t)&v426, (uint64_t)&v425, (uint64_t)&v424);
                uint64_t v140 = 0;
                v422 = v320;
                uint64_t v423 = v162;
                closure #1 in osLogInternal(_:log:type:)(&v422, (uint64_t)&v426, (uint64_t)&v425, (uint64_t)&v424);
                _os_log_impl(&dword_25D85A000, v165, (os_log_type_t)v166, "#actionForInput returning .ignore for USO task as it is supported but does not match current intent %s", v142, v152);
                destroyStorage<A>(_:count:)(v143, 0, v141);
                destroyStorage<A>(_:count:)(v144, 1, MEMORY[0x263F8EE58] + 8);
                MEMORY[0x2611B9630](v142, MEMORY[0x263F8E778]);
                swift_release();
                swift_release();
                swift_release();
              }
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
            }

            (*(void (**)(char *, uint64_t))(v348 + 8))(v356, v347);
            static ActionForInput.ignore()();
            v218(v339, v333);
            return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v344, v340);
          }
        }
        else
        {
          Swift::String v86 = v354;
          uint64_t v87 = Logger.payments.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v348 + 16))(v86, v87, v347);
          v138 = Logger.logObject.getter();
          int v137 = static os_log_type_t.debug.getter();
          v135 = &v435;
          uint64_t v435 = 2;
          unint64_t v133 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v134 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v136 = v436;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
          uint64_t v139 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v138, (os_log_type_t)v137))
          {
            uint64_t v88 = v330;
            v123 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v122 = 0;
            uint64_t v124 = createStorage<A>(capacity:type:)(0);
            uint64_t v125 = createStorage<A>(capacity:type:)(v122);
            v129 = &v434;
            v434 = v123;
            v130 = &v433;
            uint64_t v433 = v124;
            v127 = &v432;
            uint64_t v432 = v125;
            unsigned int v126 = 0;
            serialize(_:at:)(0, &v434);
            serialize(_:at:)(v126, v129);
            uint64_t v431 = v139;
            v128 = &v98;
            MEMORY[0x270FA5388](&v98);
            unint64_t v89 = v130;
            Swift::String v90 = &v98 - 6;
            v131 = &v98 - 6;
            v90[2] = (uint64_t)v129;
            v90[3] = (uint64_t)v89;
            v90[4] = v91;
            uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            if (v88)
            {
              __break(1u);
            }
            else
            {
              _os_log_impl(&dword_25D85A000, v138, (os_log_type_t)v137, "#FlowUtil actionForInput returning .ignore for unsupported USO task", v123, v136);
              uint64_t v120 = 0;
              destroyStorage<A>(_:count:)(v124, 0, v121);
              destroyStorage<A>(_:count:)(v125, v120, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x2611B9630](v123, MEMORY[0x263F8E778]);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          (*(void (**)(char *, uint64_t))(v348 + 8))(v354, v347);
          static ActionForInput.ignore()();
          v218(v339, v333);
          return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v344, v340);
        }
      }
    }
  }
}

uint64_t closure #1 in static FlowUtil.actionForInput(parse:intentType:)(char *a1)
{
  PaymentsDirectInvocations.Identifiers.rawValue.getter(*a1);
  Parse.DirectInvocation.identifier.getter();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_25D961880()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #2 in static FlowUtil.actionForInput(parse:intentType:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_25D9618B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9618E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D961910()
{
  return swift_deallocObject();
}

uint64_t sub_25D961950()
{
  return swift_deallocObject();
}

uint64_t sub_25D961990()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static FlowUtil.actionForInput(parse:intentType:)(char *a1)
{
  return closure #1 in static FlowUtil.actionForInput(parse:intentType:)(a1) & 1;
}

unint64_t lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PaymentsDirectInvocations.Identifiers]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PaymentsDirectInvocations.Identifiers] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for FlowUtil()
{
  return &type metadata for FlowUtil;
}

id Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v101)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _UNKNOWN **v112;
  id v113;
  _UNKNOWN **v114;
  _UNKNOWN **v115;
  _UNKNOWN **v116;
  _UNKNOWN **v117;
  id v118;
  uint64_t v119;
  void (*v120)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _UNKNOWN **v131;
  id v132;
  _UNKNOWN **v133;
  _UNKNOWN **v134;
  _UNKNOWN **v135;
  _UNKNOWN **v136;
  id v137;
  uint64_t v138;
  void (*v139)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  _UNKNOWN **v150;
  id v151;
  _UNKNOWN **v152;
  _UNKNOWN **v153;
  _UNKNOWN **v154;
  _UNKNOWN **v155;
  id v156;
  uint64_t v157;
  void (*v158)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  _UNKNOWN **v169;
  id v170;
  _UNKNOWN **v171;
  _UNKNOWN **v172;
  _UNKNOWN **v173;
  _UNKNOWN **v174;
  id v175;
  uint64_t v176;
  void (*v177)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  _UNKNOWN **v188;
  id v189;
  _UNKNOWN **v190;
  id v191;
  _UNKNOWN **v192;
  _UNKNOWN **v193;
  _UNKNOWN **v194;
  _UNKNOWN **v195;
  id v196;
  uint64_t v197;
  void (*v198)(_UNKNOWN ***__return_ptr, uint64_t *);
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  id v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  unsigned char *v207;
  uint64_t v208;
  unsigned char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void (*v222)(char *, uint64_t);
  void *v223;
  int v224;
  void *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint8_t *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned char **v232;
  uint64_t *v233;
  uint64_t *v234;
  void *v235;
  uint64_t (*v236)();
  uint64_t (*v237)();
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v239)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);
  _UNKNOWN **v241;
  _UNKNOWN **v242;
  _UNKNOWN **v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  void *v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  id v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  unint64_t v307;
  char *v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  void (*v312)(char *, uint64_t, uint64_t);
  void *v313;
  uint64_t v314;
  void (*v315)(char *, uint64_t, uint64_t);
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  uint32_t v328;
  uint64_t v329;
  uint64_t (*v330)();
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t (*v334)();
  uint64_t v335;
  uint64_t (*v336)(uint64_t, uint64_t, uint64_t);
  uint64_t v337;
  uint64_t (*v338)(uint64_t, uint64_t, uint64_t);
  uint64_t v339;
  uint64_t v340;
  uint64_t (*v341)(uint64_t, uint64_t, uint64_t);
  uint64_t v342;
  uint64_t (**v343)(uint64_t, uint64_t, uint64_t);
  uint64_t v344;
  NSObject *v345;
  int v346;
  uint64_t (*v347)(uint64_t, uint64_t, uint64_t);
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned char *v351;
  _UNKNOWN **v352;
  uint64_t v353;
  uint64_t v354;
  _UNKNOWN **v355;
  uint64_t v356;
  uint64_t v357;
  _UNKNOWN **v358;
  uint64_t v359;
  uint64_t v360;
  _UNKNOWN **v361;
  uint64_t v362;
  uint64_t v363;
  _UNKNOWN **v364;
  uint64_t v365;
  uint64_t v366;
  _UNKNOWN **v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned char v376[32];
  uint64_t (*v377)(uint64_t, uint64_t, uint64_t);
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned char *v381[2];
  uint32_t v382;
  uint64_t v383;
  void v384[3];
  uint64_t v385;
  unsigned char v386[32];
  uint64_t v387;
  uint32_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  char *v395;

  v303 = a1;
  v302 = a2;
  unsigned int v300 = a3;
  v301 = a4;
  uint64_t v296 = 0;
  uint64_t v330 = partial apply for implicit closure #1 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  uint64_t v334 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v336 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v338 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v341 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v236 = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  unint64_t v237 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v241 = &protocol witness table for INSearchForAccountsIntent;
  uint64_t v242 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v243 = &protocol witness table for INSendPaymentIntent;
  uint64_t v392 = 0;
  uint64_t v393 = 0;
  uint64_t v391 = 0;
  uint32_t v390 = 0;
  uint64_t v389 = 0;
  uint64_t v395 = 0;
  v394 = 0;
  uint64_t v244 = 0;
  uint64_t v369 = 0;
  v366 = 0;
  unint64_t v363 = 0;
  v360 = 0;
  unint64_t v357 = 0;
  v354 = 0;
  uint64_t v245 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v246 = *(void *)(v245 - 8);
  v247 = v245 - 8;
  uint64_t v248 = (*(void *)(v246 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v245);
  uint64_t v249 = (char *)&v66 - v248;
  uint64_t v395 = (char *)&v66 - v248;
  unsigned int v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_PaymentAccount, INSearchForAccountsIntent>);
  v251 = *(void *)(v250 - 8);
  v252 = v250 - 8;
  v253 = (*(void *)(v251 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v250);
  v254 = (char *)&v66 - v253;
  v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_summarise_common_PaymentAccount, INSearchForAccountsIntent>);
  uint64_t v256 = *(void *)(v255 - 8);
  unint64_t v257 = v255 - 8;
  unint64_t v258 = (*(void *)(v256 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v255);
  v259 = (char *)&v66 - v258;
  uint32_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_request_common_PaymentAccount, INSearchForAccountsIntent>);
  int v261 = *(void *)(v260 - 8);
  v262 = v260 - 8;
  uint64_t v263 = (*(void *)(v261 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v260);
  BOOL v264 = (char *)&v66 - v263;
  BOOL v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_requestMoney_common_Payment, INRequestPaymentIntent>);
  uint64_t v266 = *(void *)(v265 - 8);
  uint64_t v267 = v265 - 8;
  uint64_t v268 = (*(void *)(v266 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v265);
  v269 = (char *)&v66 - v268;
  uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_Payment, INSendPaymentIntent>);
  uint64_t v271 = *(void *)(v270 - 8);
  unsigned int v272 = v270 - 8;
  v273 = (*(void *)(v271 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v270);
  v274 = (char *)&v66 - v273;
  v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_pay_common_Payment, INSendPaymentIntent>);
  v276 = *(void *)(v275 - 8);
  v277 = v275 - 8;
  uint64_t v278 = (*(void *)(v276 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v296);
  unint64_t v279 = (char *)&v66 - v278;
  unint64_t v280 = type metadata accessor for Siri_Nlu_External_UserParse();
  v281 = *(void *)(v280 - 8);
  uint32_t v282 = v280 - 8;
  int v283 = (*(void *)(v281 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v280);
  v284 = (char *)&v66 - v283;
  uint64_t v285 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v296);
  v286 = (uint64_t)&v66 - v285;
  uint64_t v287 = type metadata accessor for USOParse();
  v289 = *(void *)(v287 - 8);
  int v288 = v287 - 8;
  v290 = v289;
  uint64_t v291 = *(void *)(v289 + 64);
  uint64_t v292 = (v291 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v296);
  int v293 = (char *)&v66 - v292;
  uint64_t v294 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v295 = (char *)&v66 - v294;
  v394 = (char *)&v66 - v294;
  v323 = type metadata accessor for Parse();
  v319 = *(void *)(v323 - 8);
  v320 = v323 - 8;
  v317 = v319;
  v318 = *(void *)(v319 + 64);
  v297 = (v318 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v296);
  uint64_t v298 = (char *)&v66 - v297;
  uint64_t v299 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  v322 = (char *)&v66 - v299;
  int v311 = type metadata accessor for Logger();
  v309 = *(void **)(v311 - 8);
  uint32_t v310 = v311 - 8;
  v305 = v309[8];
  v304 = (v305 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v303);
  uint64_t v306 = (char *)&v66 - v304;
  unint64_t v307 = (v305 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v66 - v307;
  unint64_t v308 = (char *)&v66 - v307;
  uint64_t v392 = v9;
  uint64_t v393 = v11;
  uint64_t v391 = v12;
  uint32_t v390 = v13;
  uint64_t v389 = v14;
  uint64_t v15 = Logger.payments.unsafeMutableAddressor();
  v312 = (void (*)(char *, uint64_t, uint64_t))v309[2];
  uint64_t v313 = v309 + 2;
  v312(v10, v15, v311);
  v315 = *(void (**)(char *, uint64_t, uint64_t))(v319 + 16);
  v316 = v319 + 16;
  v315(v322, v314, v323);
  v321 = (*(unsigned __int8 *)(v317 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v317 + 80);
  uint64_t v332 = 7;
  uint64_t v333 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v319 + 32))(v333 + v321, v322, v323);
  unint64_t v345 = Logger.logObject.getter();
  uint64_t v346 = static os_log_type_t.debug.getter();
  v326 = &v387;
  uint64_t v387 = 12;
  v324 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v325 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v327 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v328 = v388;
  v329 = 17;
  v337 = swift_allocObject();
  *(unsigned char *)(v337 + 16) = 32;
  v339 = swift_allocObject();
  *(unsigned char *)(v339 + 16) = 8;
  unint64_t v331 = 32;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v333;
  uint64_t v335 = v16;
  *(void *)(v16 + 16) = v330;
  *(void *)(v16 + 24) = v17;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v335;
  uint64_t v342 = v18;
  *(void *)(v18 + 16) = v334;
  *(void *)(v18 + 24) = v19;
  v344 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v340 = _allocateUninitializedArray<A>(_:)();
  unint64_t v343 = v20;
  swift_retain();
  uint64_t v21 = v337;
  uint64_t v22 = v343;
  *unint64_t v343 = v336;
  v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  swift_retain();
  uint64_t v23 = v339;
  uint64_t v24 = v343;
  v343[2] = v338;
  v24[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
  swift_retain();
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v342;
  id v26 = v343;
  v343[4] = v341;
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v345, (os_log_type_t)v346))
  {
    uint64_t v27 = v244;
    unsigned int v229 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v230 = createStorage<A>(capacity:type:)(0);
    v231 = createStorage<A>(capacity:type:)(1);
    v232 = &v351;
    unint64_t v351 = v229;
    v233 = &v350;
    uint64_t v350 = v230;
    v234 = &v349;
    uint64_t v349 = v231;
    serialize(_:at:)(2, &v351);
    serialize(_:at:)(1, v232);
    uint64_t v347 = v336;
    uint64_t v348 = v337;
    closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)v232, (uint64_t)v233, (uint64_t)v234);
    uint64_t v235 = v27;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      uint64_t v347 = v338;
      uint64_t v348 = v339;
      closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)&v351, (uint64_t)&v350, (uint64_t)&v349);
      v226 = 0;
      uint64_t v347 = v341;
      uint64_t v348 = v342;
      closure #1 in osLogInternal(_:log:type:)(&v347, (uint64_t)&v351, (uint64_t)&v350, (uint64_t)&v349);
      uint64_t v225 = 0;
      _os_log_impl(&dword_25D85A000, v345, (os_log_type_t)v346, "#Parse toSiriKitIntent %s", v229, v328);
      destroyStorage<A>(_:count:)(v230, 0, v228);
      destroyStorage<A>(_:count:)(v231, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v229, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v227 = v225;
    }
  }
  else
  {
    uint64_t v28 = v244;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v227 = v28;
  }
  int v221 = v227;

  int v222 = (void (*)(char *, uint64_t))v309[1];
  uint64_t v223 = v309 + 1;
  v222(v308, v311);
  v315(v298, v314, v323);
  uint64_t v224 = (*(uint64_t (**)(char *, uint64_t))(v319 + 88))(v298, v323);
  if (v224 == *MEMORY[0x263F6FF70])
  {
    uint64_t v63 = v249;
    (*(void (**)(char *, uint64_t))(v319 + 96))(v298, v323);
    (*(void (**)(char *, char *, uint64_t))(v246 + 32))(v63, v298, v245);
    uint64_t v395 = v63;
    id v66 = Parse.DirectInvocation.toSiriKitIntent(previousIntent:)((uint64_t)v303, v302);
    uint64_t v67 = v64;
    (*(void (**)(char *, uint64_t))(v246 + 8))(v249, v245);
    uint64_t v189 = v66;
    unint64_t v190 = v67;
    return v189;
  }
  if (v224 != *MEMORY[0x263F6FF80])
  {
    (*(void (**)(char *, uint64_t))(v319 + 8))(v298, v323);
    uint64_t v189 = v296;
    unint64_t v190 = (_UNKNOWN **)v296;
    return v189;
  }
  uint64_t v29 = v295;
  (*(void (**)(char *, uint64_t))(v319 + 96))(v298, v323);
  v213 = *(void (**)(char *, char *, uint64_t))(v289 + 32);
  uint32_t v214 = v289 + 32;
  v213(v29, v298, v287);
  v394 = v29;
  uint64_t v30 = USOParse.userParse.getter();
  uint64_t v217 = MEMORY[0x2611B7D70](v30);
  (*(void (**)(char *, uint64_t))(v281 + 8))(v284, v280);
  swift_bridgeObjectRetain();
  v216 = &v383;
  v383 = v217;
  int v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  v218 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v219 = *(void *)(v218 - 8);
  int v220 = v218 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v219 + 48))(v286, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v286);
  }
  else
  {
    unint64_t v212 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v286, v218);
    if (v212)
    {
      unint64_t v211 = v212;
      uint64_t v210 = v212;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_13;
    }
  }
  memset(v384, 0, sizeof(v384));
  uint64_t v385 = 0;
LABEL_13:
  if (v385)
  {
    v207 = v386;
    outlined init with take of Any((uint64_t)v384, (uint64_t)v386);
    v209 = v376;
    outlined init with copy of Any((uint64_t)v207, (uint64_t)v376);
    v208 = 0;
    type metadata accessor for UsoTask_pay_common_Payment();
    if (swift_dynamicCast())
    {
      v206 = v375;
      v354 = v375;
      id v31 = v303;
      if (v303)
      {
        v205 = v303;
        uint64_t v203 = v303;
        self;
        unsigned int v204 = swift_dynamicCastObjCClass();
        if (v204)
        {
          uint64_t v202 = (void *)v204;
        }
        else
        {
          v201 = 0;

          uint64_t v202 = v201;
        }
        uint64_t v200 = v202;
      }
      else
      {
        uint64_t v200 = 0;
      }
      uint64_t v32 = v221;
      uint64_t v196 = v200;
      static Transformer<>.transformer(previousIntent:contactResolver:)(v200, v301);

      uint64_t v198 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
      uint64_t v197 = v33;
      (*(void (**)(char *, uint64_t))(v276 + 8))(v279, v275);
      unint64_t v353 = v206;
      v198(&v352, &v353);
      uint64_t v199 = v32;
      if (v32)
      {
        uint64_t v191 = v199;
        unint64_t v192 = 0;
        swift_release();

        unint64_t v194 = v192;
        uint64_t v195 = v192;
      }
      else
      {
        uint64_t v193 = v352;
        swift_release();
        unint64_t v194 = v193;
        uint64_t v195 = v243;
      }
      uint64_t v188 = v195;
      unint64_t v187 = v194;
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
      (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
      uint64_t v189 = v187;
      unint64_t v190 = v188;
    }
    else
    {
      uint64_t v186 = 0;
      type metadata accessor for UsoTask_noVerb_common_Payment();
      if (swift_dynamicCast())
      {
        v185 = v374;
        unint64_t v357 = v374;
        id v34 = v303;
        if (v303)
        {
          int v184 = v303;
          v182 = v303;
          self;
          uint32_t v183 = swift_dynamicCastObjCClass();
          if (v183)
          {
            unint64_t v181 = (void *)v183;
          }
          else
          {
            unint64_t v180 = 0;

            unint64_t v181 = v180;
          }
          uint64_t v179 = v181;
        }
        else
        {
          uint64_t v179 = 0;
        }
        id v35 = v221;
        v175 = v179;
        static Transformer<>.transformer(previousIntent:contactResolver:)(v179, v301);

        v177 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
        v176 = v36;
        (*(void (**)(char *, uint64_t))(v271 + 8))(v274, v270);
        v356 = v185;
        v177(&v355, &v356);
        v178 = v35;
        if (v35)
        {
          v170 = v178;
          uint64_t v171 = 0;
          swift_release();

          unsigned int v173 = v171;
          v174 = v171;
        }
        else
        {
          uint64_t v172 = v355;
          swift_release();
          unsigned int v173 = v172;
          v174 = v243;
        }
        uint64_t v169 = v174;
        uint64_t v168 = v173;
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
        (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
        uint64_t v189 = v168;
        unint64_t v190 = v169;
      }
      else
      {
        uint64_t v167 = 0;
        type metadata accessor for UsoTask_requestMoney_common_Payment();
        if (swift_dynamicCast())
        {
          int v166 = v373;
          v360 = v373;
          id v37 = v303;
          if (v303)
          {
            v165 = v303;
            v163 = v303;
            self;
            uint64_t v164 = swift_dynamicCastObjCClass();
            if (v164)
            {
              uint64_t v162 = (void *)v164;
            }
            else
            {
              uint64_t v161 = 0;

              uint64_t v162 = v161;
            }
            uint64_t v160 = v162;
          }
          else
          {
            uint64_t v160 = 0;
          }
          BOOL v38 = v221;
          uint64_t v156 = v160;
          static Transformer<>.transformer(previousIntent:contactResolver:)(v160, v301);

          uint64_t v158 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
          uint64_t v157 = v39;
          (*(void (**)(char *, uint64_t))(v266 + 8))(v269, v265);
          unint64_t v359 = v166;
          v158(&v358, &v359);
          uint64_t v159 = v38;
          if (v38)
          {
            v151 = v159;
            uint32_t v152 = 0;
            swift_release();

            uint64_t v154 = v152;
            uint64_t v155 = v152;
          }
          else
          {
            uint64_t v153 = v358;
            swift_release();
            uint64_t v154 = v153;
            uint64_t v155 = v242;
          }
          unint64_t v150 = v155;
          unint64_t v149 = v154;
          swift_release();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
          (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
          uint64_t v189 = v149;
          unint64_t v190 = v150;
        }
        else
        {
          uint64_t v148 = 0;
          type metadata accessor for UsoTask_request_common_PaymentAccount();
          if (swift_dynamicCast())
          {
            v147 = v372;
            unint64_t v363 = v372;
            id v40 = v303;
            if (v303)
            {
              v146 = v303;
              uint64_t v144 = v303;
              self;
              v145 = swift_dynamicCastObjCClass();
              if (v145)
              {
                uint64_t v143 = (void *)v145;
              }
              else
              {
                v142 = 0;

                uint64_t v143 = v142;
              }
              uint64_t v141 = v143;
            }
            else
            {
              uint64_t v141 = 0;
            }
            uint64_t v41 = v221;
            int v137 = v141;
            static Transformer<>.transformer(previousIntent:)(v141);

            uint64_t v139 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
            v138 = v42;
            (*(void (**)(char *, uint64_t))(v261 + 8))(v264, v260);
            v362 = v147;
            v139(&v361, &v362);
            uint64_t v140 = v41;
            if (v41)
            {
              uint64_t v132 = v140;
              unint64_t v133 = 0;
              swift_release();

              v135 = v133;
              uint32_t v136 = v133;
            }
            else
            {
              unint64_t v134 = v361;
              swift_release();
              v135 = v134;
              uint32_t v136 = v241;
            }
            v131 = v136;
            v130 = v135;
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
            (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
            uint64_t v189 = v130;
            unint64_t v190 = v131;
          }
          else
          {
            v129 = 0;
            type metadata accessor for UsoTask_summarise_common_PaymentAccount();
            if (swift_dynamicCast())
            {
              v128 = v371;
              v366 = v371;
              id v43 = v303;
              if (v303)
              {
                v127 = v303;
                uint64_t v125 = v303;
                self;
                unsigned int v126 = swift_dynamicCastObjCClass();
                if (v126)
                {
                  uint64_t v124 = (void *)v126;
                }
                else
                {
                  v123 = 0;

                  uint64_t v124 = v123;
                }
                uint64_t v122 = v124;
              }
              else
              {
                uint64_t v122 = 0;
              }
              uint64_t v44 = v221;
              char v118 = v122;
              static Transformer<>.transformer(previousIntent:)(v122);

              uint64_t v120 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
              uint64_t v119 = v45;
              (*(void (**)(char *, uint64_t))(v256 + 8))(v259, v255);
              unint64_t v365 = v128;
              v120(&v364, &v365);
              uint64_t v121 = v44;
              if (v44)
              {
                unint64_t v113 = v121;
                unint64_t v114 = 0;
                swift_release();

                uint32_t v116 = v114;
                int v117 = v114;
              }
              else
              {
                char v115 = v364;
                swift_release();
                uint32_t v116 = v115;
                int v117 = v241;
              }
              uint64_t v112 = v117;
              uint64_t v111 = v116;
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
              (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
              uint64_t v189 = v111;
              unint64_t v190 = v112;
            }
            else
            {
              char v110 = 0;
              type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
              if (swift_dynamicCast())
              {
                uint64_t v109 = v370;
                uint64_t v369 = v370;
                id v46 = v303;
                if (v303)
                {
                  uint64_t v108 = v303;
                  uint64_t v106 = v303;
                  self;
                  char v107 = swift_dynamicCastObjCClass();
                  if (v107)
                  {
                    unsigned int v105 = (void *)v107;
                  }
                  else
                  {
                    uint64_t v104 = 0;

                    unsigned int v105 = v104;
                  }
                  uint64_t v103 = v105;
                }
                else
                {
                  uint64_t v103 = 0;
                }
                uint64_t v47 = v221;
                id v99 = v103;
                static Transformer<>.transformer(previousIntent:)(v103);

                uint64_t v101 = (void (*)(_UNKNOWN ***__return_ptr, uint64_t *))Transformer.transform.getter();
                uint64_t v100 = v48;
                (*(void (**)(char *, uint64_t))(v251 + 8))(v254, v250);
                v368 = v109;
                v101(&v367, &v368);
                uint64_t v102 = v47;
                if (v47)
                {
                  id v94 = v102;
                  uint64_t v95 = 0;
                  swift_release();

                  uint64_t v97 = v95;
                  uint64_t v98 = v95;
                }
                else
                {
                  id v96 = v367;
                  swift_release();
                  uint64_t v97 = v96;
                  uint64_t v98 = v241;
                }
                uint64_t v93 = v98;
                char v92 = v97;
                swift_release();
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
                (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
                uint64_t v189 = v92;
                unint64_t v190 = v93;
              }
              else
              {
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v376);
                __swift_destroy_boxed_opaque_existential_0((uint64_t)v386);
                (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
                uint64_t v189 = v296;
                unint64_t v190 = (_UNKNOWN **)v296;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v49 = v306;
    outlined destroy of FlowActivity?((uint64_t)v384);
    uint64_t v50 = Logger.payments.unsafeMutableAddressor();
    v312(v49, v50, v311);
    uint64_t v77 = v290;
    (*(void (**)(char *, char *, uint64_t))(v289 + 16))(v293, v295, v287);
    unint64_t v78 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    uint64_t v82 = 7;
    uint64_t v83 = swift_allocObject();
    v213((char *)(v83 + v78), v293, v287);
    Swift::String v90 = Logger.logObject.getter();
    int v91 = static os_log_type_t.debug.getter();
    v381[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v79 = v382;
    uint64_t v80 = 17;
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = 32;
    uint64_t v86 = swift_allocObject();
    *(unsigned char *)(v86 + 16) = 8;
    uint64_t v81 = 32;
    uint64_t v51 = swift_allocObject();
    uint64_t v52 = v83;
    uint64_t v84 = v51;
    *(void *)(v51 + 16) = v236;
    *(void *)(v51 + 24) = v52;
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v84;
    uint64_t v88 = v53;
    *(void *)(v53 + 16) = v237;
    *(void *)(v53 + 24) = v54;
    uint64_t v87 = _allocateUninitializedArray<A>(_:)();
    unint64_t v89 = v55;
    swift_retain();
    uint64_t v56 = v85;
    uint64_t v57 = v89;
    *unint64_t v89 = v238;
    v57[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
    swift_retain();
    uint64_t v58 = v86;
    id v59 = v89;
    v89[2] = v239;
    v59[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v58;
    swift_retain();
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
    uint64_t v61 = v89;
    v89[4] = v240;
    v61[5] = v60;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v90, (os_log_type_t)v91))
    {
      uint64_t v62 = (uint64_t)v221;
      uint64_t v70 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v71 = createStorage<A>(capacity:type:)(0);
      uint64_t v72 = createStorage<A>(capacity:type:)(1);
      uint64_t v73 = v381;
      v381[0] = v70;
      uint64_t v74 = &v380;
      uint64_t v380 = v71;
      uint64_t v75 = &v379;
      uint64_t v379 = v72;
      serialize(_:at:)(2, v381);
      serialize(_:at:)(1, v73);
      uint64_t v377 = v238;
      uint64_t v378 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)v73, (uint64_t)v74, (uint64_t)v75);
      uint64_t v76 = v62;
      if (v62)
      {
        __break(1u);
      }
      else
      {
        uint64_t v377 = v239;
        uint64_t v378 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)v381, (uint64_t)&v380, (uint64_t)&v379);
        uint64_t v68 = 0;
        uint64_t v377 = v240;
        uint64_t v378 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v377, (uint64_t)v381, (uint64_t)&v380, (uint64_t)&v379);
        _os_log_impl(&dword_25D85A000, v90, (os_log_type_t)v91, "#Parse toSiriKitIntent from USO parse: %s", v70, v79);
        destroyStorage<A>(_:count:)(v71, 0, v69);
        destroyStorage<A>(_:count:)(v72, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v70, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v222(v306, v311);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v295, v287);
    uint64_t v189 = v296;
    unint64_t v190 = (_UNKNOWN **)v296;
  }
  return v189;
}

uint64_t Parse.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v308 = a1;
  uint64_t v365 = 0;
  v309 = partial apply for implicit closure #1 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  uint32_t v310 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  int v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v312 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v314 = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  v315 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v316 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v319 = partial apply for implicit closure #1 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  v320 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v321 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v322 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v324 = partial apply for implicit closure #1 in Parse.confirmationResponse.getter;
  v325 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v326 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v327 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v328 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v329 = partial apply for implicit closure #4 in Parse.confirmationResponse.getter;
  uint64_t v330 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v331 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v332 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v333 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v441 = 0;
  uint64_t v439 = 0;
  uint64_t v334 = 0;
  uint32_t v442 = 0;
  uint64_t v424 = 0;
  uint64_t v420 = 0;
  uint32_t v421 = 0;
  char v419 = 0;
  v440 = 0;
  uint64_t v399 = 0;
  uint64_t v335 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v337 = *(void *)(v335 - 8);
  uint64_t v336 = v335 - 8;
  uint64_t v338 = v337;
  uint64_t v339 = *(void *)(v337 + 64);
  unint64_t v340 = (v339 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v335);
  uint64_t v341 = (char *)v97 - v340;
  unint64_t v342 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v97 - v340);
  unint64_t v343 = (char *)v97 - v342;
  uint32_t v442 = (char *)v97 - v342;
  unint64_t v344 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v365);
  uint64_t v345 = (uint64_t)v97 - v344;
  uint64_t v346 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v347 = *(void *)(v346 - 8);
  uint64_t v348 = v346 - 8;
  unint64_t v349 = (*(void *)(v347 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v365);
  uint64_t v350 = (char *)v97 - v349;
  uint64_t v351 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v352 = *(void *)(v351 - 8);
  uint64_t v353 = v351 - 8;
  unint64_t v354 = (*(void *)(v352 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v365);
  unint64_t v355 = (char *)v97 - v354;
  uint64_t v441 = (char *)v97 - v354;
  uint64_t v356 = type metadata accessor for USOParse();
  uint64_t v358 = *(void *)(v356 - 8);
  uint64_t v357 = v356 - 8;
  uint64_t v359 = v358;
  uint64_t v360 = *(void *)(v358 + 64);
  unint64_t v361 = (v360 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v365);
  v362 = (char *)v97 - v361;
  unint64_t v363 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  v364 = (char *)v97 - v363;
  v440 = (char *)v97 - v363;
  uint64_t v366 = type metadata accessor for Logger();
  uint64_t v367 = *(void *)(v366 - 8);
  uint64_t v368 = v366 - 8;
  unint64_t v369 = (*(void *)(v367 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v365);
  uint64_t v370 = (char *)v97 - v369;
  unint64_t v371 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v372 = (char *)v97 - v371;
  unint64_t v373 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v374 = (char *)v97 - v373;
  unint64_t v375 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v376 = (char *)v97 - v375;
  unint64_t v377 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v378 = (char *)v97 - v377;
  uint64_t v389 = type metadata accessor for Parse();
  uint64_t v387 = *(void *)(v389 - 8);
  uint64_t v388 = v389 - 8;
  uint64_t v380 = v387;
  uint64_t v382 = *(void *)(v387 + 64);
  unint64_t v381 = (v382 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v389);
  v383 = (char *)v97 - v381;
  unint64_t v384 = (v382 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v97 - v381);
  uint32_t v390 = (void *)((char *)v97 - v384);
  uint64_t v439 = v12;
  uint64_t v385 = *(void (**)(void))(v387 + 16);
  uint64_t v386 = v387 + 16;
  v385();
  int v391 = (*(uint64_t (**)(uint64_t *, uint64_t))(v387 + 88))(v390, v389);
  if (v391 == *MEMORY[0x263F6FF70])
  {
    uint64_t v62 = v343;
    (*(void (**)(uint64_t *, uint64_t))(v387 + 96))(v390, v389);
    uint64_t v168 = *(void (**)(char *, uint64_t *, uint64_t))(v337 + 32);
    uint64_t v169 = v337 + 32;
    v168(v62, v390, v335);
    uint32_t v442 = v62;
    uint64_t v170 = Parse.DirectInvocation.userData.getter();
    if (v170)
    {
      uint64_t v167 = v170;
      uint64_t v165 = v170;
      uint64_t v424 = v170;
      uint64_t v63 = Constants.DirectInvocationPayloadKeys.rawValue.getter(0);
      int v166 = v422;
      v422[0] = v63;
      v422[1] = v64;
      MEMORY[0x2611B90F0](v423);
      outlined destroy of String.UTF8View();
      if (v423[3])
      {
        if (swift_dynamicCast())
        {
          uint64_t v163 = v417;
          uint64_t v164 = v418;
        }
        else
        {
          uint64_t v163 = 0;
          uint64_t v164 = 0;
        }
        uint64_t v161 = v163;
        uint64_t v162 = v164;
      }
      else
      {
        uint32_t v152 = 0;
        outlined destroy of FlowActivity?((uint64_t)v423);
        uint64_t v161 = (uint64_t)v152;
        uint64_t v162 = v152;
      }
      uint64_t v159 = v162;
      uint64_t v160 = v161;
      if (v162)
      {
        uint64_t v157 = v160;
        uint64_t v158 = v159;
        v155._object = v159;
        v155._countAndFlagsBits = v160;
        uint64_t v420 = v160;
        uint32_t v421 = v159;
        swift_bridgeObjectRetain();
        LOBYTE(v65) = Constants.DirectInvocationButtonType.init(rawValue:)(v155);
        int v156 = v65;
        if (v65 != 2)
        {
          int v154 = v156;
          unsigned int v153 = 1;
          char v419 = v156 & 1;
          Constants.DirectInvocationButtonType.confirmationResponse.getter(v156 & 1, v308);
          uint64_t v66 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, void, void))(*(void *)(v66 - 8) + 56))(v308, 0, v153);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v337 + 8))(v343, v335);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v67 = v372;
    uint64_t v68 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v367 + 16))(v67, v68, v366);
    uint64_t v133 = v338;
    (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v341, v343, v335);
    unint64_t v134 = (*(unsigned __int8 *)(v133 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
    uint64_t v141 = 7;
    uint64_t v142 = swift_allocObject();
    v168((char *)(v142 + v134), (uint64_t *)v341, v335);
    unint64_t v150 = Logger.logObject.getter();
    int v151 = static os_log_type_t.error.getter();
    int v137 = &v430;
    uint64_t v430 = 12;
    unint64_t v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v138 = v431;
    uint64_t v139 = 17;
    uint64_t v144 = swift_allocObject();
    *(unsigned char *)(v144 + 16) = 32;
    uint64_t v145 = swift_allocObject();
    *(unsigned char *)(v145 + 16) = 8;
    uint64_t v140 = 32;
    uint64_t v69 = swift_allocObject();
    uint64_t v70 = v142;
    uint64_t v143 = v69;
    *(void *)(v69 + 16) = v329;
    *(void *)(v69 + 24) = v70;
    uint64_t v71 = swift_allocObject();
    uint64_t v72 = v143;
    uint64_t v147 = v71;
    *(void *)(v71 + 16) = v330;
    *(void *)(v71 + 24) = v72;
    uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v146 = _allocateUninitializedArray<A>(_:)();
    uint64_t v148 = v73;
    swift_retain();
    uint64_t v74 = v144;
    uint64_t v75 = v148;
    *uint64_t v148 = v331;
    v75[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
    swift_retain();
    uint64_t v76 = v145;
    uint64_t v77 = v148;
    v148[2] = v332;
    v77[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v76;
    swift_retain();
    unint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v147;
    uint32_t v79 = v148;
    v148[4] = v333;
    id v79[5] = v78;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v150, (os_log_type_t)v151))
    {
      uint64_t v80 = v334;
      unsigned int v126 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v127 = createStorage<A>(capacity:type:)(0);
      uint64_t v128 = createStorage<A>(capacity:type:)(1);
      v129 = &v429;
      unint64_t v429 = v126;
      v130 = &v428;
      uint64_t v428 = v127;
      v131 = &v427;
      uint64_t v427 = v128;
      serialize(_:at:)(2, &v429);
      serialize(_:at:)(1, v129);
      uint64_t v425 = v331;
      uint64_t v426 = v144;
      closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)v129, (uint64_t)v130, (uint64_t)v131);
      uint64_t v132 = v80;
      if (v80)
      {
        __break(1u);
      }
      else
      {
        uint64_t v425 = v332;
        uint64_t v426 = v145;
        closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v429, (uint64_t)&v428, (uint64_t)&v427);
        uint64_t v124 = 0;
        uint64_t v425 = v333;
        uint64_t v426 = v147;
        closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v429, (uint64_t)&v428, (uint64_t)&v427);
        _os_log_impl(&dword_25D85A000, v150, (os_log_type_t)v151, "#confirmationResponse couldn't get button press from Direct invocation %s", v126, v138);
        destroyStorage<A>(_:count:)(v127, 0, v125);
        destroyStorage<A>(_:count:)(v128, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v126, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v367 + 8))(v372, v366);
    uint64_t v81 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v308, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v337 + 8))(v343, v335);
  }
  else if (v391 == *MEMORY[0x263F6FF58])
  {
    uint64_t v13 = v378;
    (*(void (**)(uint64_t *, uint64_t))(v387 + 96))(v390, v389);
    uint64_t v290 = *v390;
    uint64_t v399 = v290;
    uint64_t v14 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v367 + 16))(v13, v14, v366);
    swift_unknownObjectRetain();
    uint64_t v297 = 7;
    uint64_t v298 = swift_allocObject();
    *(void *)(v298 + 16) = v290;
    uint64_t v306 = Logger.logObject.getter();
    int v307 = static os_log_type_t.debug.getter();
    int v293 = &v397;
    uint64_t v397 = 12;
    unint64_t v291 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v292 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v294 = v398;
    uint64_t v295 = 17;
    uint64_t v300 = swift_allocObject();
    *(unsigned char *)(v300 + 16) = 32;
    uint64_t v301 = swift_allocObject();
    *(unsigned char *)(v301 + 16) = 8;
    uint64_t v296 = 32;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v298;
    uint64_t v299 = v15;
    *(void *)(v15 + 16) = v324;
    *(void *)(v15 + 24) = v16;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v299;
    uint64_t v303 = v17;
    *(void *)(v17 + 16) = v325;
    *(void *)(v17 + 24) = v18;
    uint64_t v305 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v302 = _allocateUninitializedArray<A>(_:)();
    v304 = v19;
    swift_retain();
    uint64_t v20 = v300;
    uint64_t v21 = v304;
    uint64_t *v304 = v326;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = v301;
    uint64_t v23 = v304;
    v304[2] = v327;
    void v23[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v303;
    uint64_t v25 = v304;
    v304[4] = v328;
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v306, (os_log_type_t)v307))
    {
      uint64_t v26 = v334;
      int v283 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v284 = createStorage<A>(capacity:type:)(0);
      uint64_t v285 = createStorage<A>(capacity:type:)(1);
      v286 = &v396;
      uint32_t v396 = v283;
      uint64_t v287 = &v395;
      uint64_t v395 = v284;
      int v288 = &v394;
      uint64_t v394 = v285;
      serialize(_:at:)(2, &v396);
      serialize(_:at:)(1, v286);
      uint64_t v392 = v326;
      uint64_t v393 = v300;
      closure #1 in osLogInternal(_:log:type:)(&v392, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288);
      uint64_t v289 = v26;
      if (v26)
      {
        __break(1u);
      }
      else
      {
        uint64_t v392 = v327;
        uint64_t v393 = v301;
        closure #1 in osLogInternal(_:log:type:)(&v392, (uint64_t)&v396, (uint64_t)&v395, (uint64_t)&v394);
        uint64_t v281 = 0;
        uint64_t v392 = v328;
        uint64_t v393 = v303;
        closure #1 in osLogInternal(_:log:type:)(&v392, (uint64_t)&v396, (uint64_t)&v395, (uint64_t)&v394);
        _os_log_impl(&dword_25D85A000, v306, (os_log_type_t)v307, "parse is %s", v283, v294);
        destroyStorage<A>(_:count:)(v284, 0, v282);
        destroyStorage<A>(_:count:)(v285, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v283, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v367 + 8))(v378, v366);
    swift_unknownObjectRetain();
    self;
    id v280 = (id)swift_dynamicCastObjCClass();
    if (v280)
    {

      int v279 = 1;
    }
    else
    {
      swift_unknownObjectRelease();
      int v279 = 0;
    }
    if (v279)
    {
      unsigned int v275 = *MEMORY[0x263F6FC98];
      uint64_t v278 = type metadata accessor for ConfirmationResponse();
      uint64_t v276 = *(void *)(v278 - 8);
      uint64_t v277 = v278 - 8;
      (*(void (**)(uint64_t, void))(v276 + 104))(v308, v275);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56))(v308, 0, 1, v278);
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      self;
      id v274 = (id)swift_dynamicCastObjCClass();
      if (v274)
      {

        int v273 = 1;
      }
      else
      {
        swift_unknownObjectRelease();
        int v273 = 0;
      }
      if (v273)
      {
        unsigned int v269 = *MEMORY[0x263F6FC90];
        uint64_t v272 = type metadata accessor for ConfirmationResponse();
        uint64_t v270 = *(void *)(v272 - 8);
        uint64_t v271 = v272 - 8;
        (*(void (**)(uint64_t, void))(v270 + 104))(v308, v269);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v270 + 56))(v308, 0, 1, v272);
        return swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        self;
        id v268 = (id)swift_dynamicCastObjCClass();
        if (v268)
        {

          int v267 = 1;
        }
        else
        {
          swift_unknownObjectRelease();
          int v267 = 0;
        }
        if (v267)
        {
          unsigned int v263 = *MEMORY[0x263F6FC90];
          uint64_t v266 = type metadata accessor for ConfirmationResponse();
          uint64_t v264 = *(void *)(v266 - 8);
          uint64_t v265 = v266 - 8;
          (*(void (**)(uint64_t, void))(v264 + 104))(v308, v263);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v264 + 56))(v308, 0, 1, v266);
        }
        else
        {
          uint64_t v28 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v308, 1);
        }
        return swift_unknownObjectRelease();
      }
    }
  }
  else if (v391 == *MEMORY[0x263F6FF80])
  {
    uint64_t v29 = v376;
    (*(void (**)(uint64_t *, uint64_t))(v387 + 96))(v390, v389);
    uint64_t v241 = v359;
    uint64_t v244 = *(void (**)(char *, uint64_t *, uint64_t))(v358 + 32);
    uint64_t v243 = v358 + 32;
    v244(v364, v390, v356);
    v440 = v364;
    uint64_t v30 = Logger.payments.unsafeMutableAddressor();
    uint32_t v239 = *(void (**)(char *, uint64_t, uint64_t))(v367 + 16);
    uint64_t v240 = v367 + 16;
    v239(v29, v30, v366);
    (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v362, v364, v356);
    unint64_t v242 = (*(unsigned __int8 *)(v241 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80);
    uint64_t v252 = 7;
    uint64_t v253 = swift_allocObject();
    v244((char *)(v253 + v242), (uint64_t *)v362, v356);
    int v261 = Logger.logObject.getter();
    int v262 = static os_log_type_t.debug.getter();
    v247 = &v415;
    uint64_t v415 = 12;
    unint64_t v245 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v246 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v248 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v249 = v416;
    uint64_t v250 = 17;
    uint64_t v255 = swift_allocObject();
    *(unsigned char *)(v255 + 16) = 32;
    uint64_t v256 = swift_allocObject();
    *(unsigned char *)(v256 + 16) = 8;
    uint64_t v251 = 32;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v253;
    uint64_t v254 = v31;
    *(void *)(v31 + 16) = v314;
    *(void *)(v31 + 24) = v32;
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v254;
    uint64_t v258 = v33;
    *(void *)(v33 + 16) = v315;
    *(void *)(v33 + 24) = v34;
    uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v257 = _allocateUninitializedArray<A>(_:)();
    v259 = v35;
    swift_retain();
    uint64_t v36 = v255;
    id v37 = v259;
    uint64_t *v259 = v316;
    v37[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
    swift_retain();
    uint64_t v38 = v256;
    uint64_t v39 = v259;
    v259[2] = v317;
    v39[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    swift_retain();
    id v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v258;
    uint64_t v41 = v259;
    v259[4] = v318;
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v261, (os_log_type_t)v262))
    {
      uint64_t v42 = v334;
      v232 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v233 = createStorage<A>(capacity:type:)(0);
      uint64_t v234 = createStorage<A>(capacity:type:)(1);
      uint64_t v235 = v404;
      v404[0] = v232;
      unint64_t v236 = &v403;
      uint64_t v403 = v233;
      unint64_t v237 = &v402;
      uint64_t v402 = v234;
      serialize(_:at:)(2, v404);
      serialize(_:at:)(1, v235);
      v400 = v316;
      uint64_t v401 = v255;
      closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)v235, (uint64_t)v236, (uint64_t)v237);
      uint64_t v238 = v42;
      if (v42)
      {
        __break(1u);
      }
      else
      {
        v400 = v317;
        uint64_t v401 = v256;
        closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)v404, (uint64_t)&v403, (uint64_t)&v402);
        uint64_t v229 = 0;
        v400 = v318;
        uint64_t v401 = v258;
        closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)v404, (uint64_t)&v403, (uint64_t)&v402);
        uint64_t v228 = 0;
        _os_log_impl(&dword_25D85A000, v261, (os_log_type_t)v262, "parse is %s", v232, v249);
        destroyStorage<A>(_:count:)(v233, 0, v231);
        destroyStorage<A>(_:count:)(v234, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v232, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v230 = v228;
      }
    }
    else
    {
      uint64_t v43 = v334;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v230 = v43;
    }
    uint64_t v222 = v230;

    uint64_t v223 = *(void (**)(char *, uint64_t))(v367 + 8);
    uint64_t v224 = v367 + 8;
    v223(v376, v366);
    uint64_t v44 = USOParse.userParse.getter();
    uint64_t v225 = MEMORY[0x2611B7D70](v44);
    (*(void (**)(char *, uint64_t))(v347 + 8))(v350, v346);
    swift_bridgeObjectRetain();
    uint64_t v227 = &v414;
    uint64_t v414 = v225;
    uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v352 + 48))(v345, 1, v351) == 1)
    {
      uint64_t v47 = v374;
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v345);
      swift_bridgeObjectRelease();
      uint64_t v48 = Logger.payments.unsafeMutableAddressor();
      v239(v47, v48, v366);
      ((void (*)(char *, uint64_t, uint64_t))v385)(v383, v379, v389);
      unint64_t v180 = (*(unsigned __int8 *)(v380 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v380 + 80);
      uint64_t v184 = 7;
      uint64_t v185 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v387 + 32))(v185 + v180, v383, v389);
      unint64_t v192 = Logger.logObject.getter();
      int v193 = static os_log_type_t.error.getter();
      v412[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v181 = v413;
      uint64_t v182 = 17;
      uint64_t v187 = swift_allocObject();
      *(unsigned char *)(v187 + 16) = 32;
      uint64_t v188 = swift_allocObject();
      *(unsigned char *)(v188 + 16) = 8;
      uint64_t v183 = 32;
      uint64_t v49 = swift_allocObject();
      uint64_t v50 = v185;
      uint64_t v186 = v49;
      *(void *)(v49 + 16) = v319;
      *(void *)(v49 + 24) = v50;
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = v186;
      uint64_t v190 = v51;
      *(void *)(v51 + 16) = v320;
      *(void *)(v51 + 24) = v52;
      uint64_t v189 = _allocateUninitializedArray<A>(_:)();
      uint64_t v191 = v53;
      swift_retain();
      uint64_t v54 = v187;
      BOOL v55 = v191;
      *uint64_t v191 = v321;
      v55[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
      swift_retain();
      uint64_t v56 = v188;
      uint64_t v57 = v191;
      v191[2] = v322;
      v57[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
      swift_retain();
      uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v190;
      id v59 = v191;
      v191[4] = v323;
      v59[5] = v58;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v192, (os_log_type_t)v193))
      {
        uint64_t v60 = v222;
        unsigned int v173 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v174 = createStorage<A>(capacity:type:)(0);
        uint64_t v175 = createStorage<A>(capacity:type:)(1);
        v176 = v412;
        v412[0] = v173;
        v177 = &v411;
        uint64_t v411 = v174;
        v178 = &v410;
        uint64_t v410 = v175;
        serialize(_:at:)(2, v412);
        serialize(_:at:)(1, v176);
        uint64_t v408 = v321;
        uint64_t v409 = v187;
        closure #1 in osLogInternal(_:log:type:)(&v408, (uint64_t)v176, (uint64_t)v177, (uint64_t)v178);
        uint64_t v179 = v60;
        if (v60)
        {
          __break(1u);
        }
        else
        {
          uint64_t v408 = v322;
          uint64_t v409 = v188;
          closure #1 in osLogInternal(_:log:type:)(&v408, (uint64_t)v412, (uint64_t)&v411, (uint64_t)&v410);
          uint64_t v171 = 0;
          uint64_t v408 = v323;
          uint64_t v409 = v190;
          closure #1 in osLogInternal(_:log:type:)(&v408, (uint64_t)v412, (uint64_t)&v411, (uint64_t)&v410);
          _os_log_impl(&dword_25D85A000, v192, (os_log_type_t)v193, "#confirmationResponse Couldn't find user dialog act in parse: %s", v173, v181);
          destroyStorage<A>(_:count:)(v174, 0, v172);
          destroyStorage<A>(_:count:)(v175, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v173, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v223(v374, v366);
      uint64_t v61 = type metadata accessor for ConfirmationResponse();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v308, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v352 + 32))(v355, v345, v351);
      swift_bridgeObjectRelease();
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter())
      {
        uint64_t v221 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
        if (v221)
        {
          uint64_t v220 = v221;
          uint64_t v219 = v221;
          UsoTask.eraseToAny.getter();
          swift_release();
        }
        else
        {
          memset(v406, 0, sizeof(v406));
          uint64_t v407 = 0;
        }
        if (v407)
        {
          v218 = v405;
          outlined init with copy of Any?((uint64_t)v406, (uint64_t)v405);
          uint64_t v217 = 0;
          type metadata accessor for UsoTask_pay_common_Payment();
          if (swift_dynamicCast())
          {
            v216 = v404[2];
            unsigned int v212 = *MEMORY[0x263F6FC98];
            uint64_t v215 = type metadata accessor for ConfirmationResponse();
            uint64_t v213 = *(void *)(v215 - 8);
            uint64_t v214 = v215 - 8;
            (*(void (**)(uint64_t, void))(v213 + 104))(v308, v212);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v213 + 56))(v308, 0, 1, v215);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v405);
            outlined destroy of FlowActivity?((uint64_t)v406);
            (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
            return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
          }
          uint64_t v211 = 0;
          type metadata accessor for UsoTask_requestMoney_common_Payment();
          if (swift_dynamicCast())
          {
            uint64_t v210 = v404[1];
            unsigned int v206 = *MEMORY[0x263F6FC98];
            uint64_t v209 = type metadata accessor for ConfirmationResponse();
            uint64_t v207 = *(void *)(v209 - 8);
            uint64_t v208 = v209 - 8;
            (*(void (**)(uint64_t, void))(v207 + 104))(v308, v206);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v207 + 56))(v308, 0, 1, v209);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v405);
            outlined destroy of FlowActivity?((uint64_t)v406);
            (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
            return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
          }
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v405);
        }
        uint64_t v45 = type metadata accessor for ConfirmationResponse();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v308, 1);
        outlined destroy of FlowActivity?((uint64_t)v406);
        (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
        return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
      }
      else if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
      {
        unsigned int v202 = *MEMORY[0x263F6FC98];
        uint64_t v205 = type metadata accessor for ConfirmationResponse();
        uint64_t v203 = *(void *)(v205 - 8);
        uint64_t v204 = v205 - 8;
        (*(void (**)(uint64_t, void))(v203 + 104))(v308, v202);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56))(v308, 0, 1, v205);
        (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
        return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
      }
      else if (Siri_Nlu_External_UserDialogAct.hasRejected.getter())
      {
        unsigned int v198 = *MEMORY[0x263F6FC90];
        uint64_t v201 = type metadata accessor for ConfirmationResponse();
        uint64_t v199 = *(void *)(v201 - 8);
        uint64_t v200 = v201 - 8;
        (*(void (**)(uint64_t, void))(v199 + 104))(v308, v198);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v199 + 56))(v308, 0, 1, v201);
        (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
        return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
      }
      else
      {
        if (Siri_Nlu_External_UserDialogAct.hasCancelled.getter())
        {
          unsigned int v194 = *MEMORY[0x263F6FC90];
          uint64_t v197 = type metadata accessor for ConfirmationResponse();
          uint64_t v195 = *(void *)(v197 - 8);
          uint64_t v196 = v197 - 8;
          (*(void (**)(uint64_t, void))(v195 + 104))(v308, v194);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v195 + 56))(v308, 0, 1, v197);
        }
        else
        {
          uint64_t v46 = type metadata accessor for ConfirmationResponse();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v308, 1);
        }
        (*(void (**)(char *, uint64_t))(v352 + 8))(v355, v351);
        return (*(uint64_t (**)(char *, uint64_t))(v358 + 8))(v364, v356);
      }
    }
  }
  else
  {
    uint64_t v82 = v370;
    uint64_t v83 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v367 + 16))(v82, v83, v366);
    ((void (*)(char *, uint64_t, uint64_t))v385)(v383, v379, v389);
    unint64_t v106 = (*(unsigned __int8 *)(v380 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v380 + 80);
    uint64_t v113 = 7;
    uint64_t v114 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v387 + 32))(v114 + v106, v383, v389);
    uint64_t v122 = Logger.logObject.getter();
    int v123 = static os_log_type_t.error.getter();
    uint64_t v109 = &v437;
    uint64_t v437 = 12;
    unint64_t v107 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v110 = v438;
    uint64_t v111 = 17;
    uint64_t v116 = swift_allocObject();
    *(unsigned char *)(v116 + 16) = 32;
    uint64_t v117 = swift_allocObject();
    *(unsigned char *)(v117 + 16) = 8;
    uint64_t v112 = 32;
    uint64_t v84 = swift_allocObject();
    uint64_t v85 = v114;
    uint64_t v115 = v84;
    *(void *)(v84 + 16) = v309;
    *(void *)(v84 + 24) = v85;
    uint64_t v86 = swift_allocObject();
    uint64_t v87 = v115;
    uint64_t v119 = v86;
    *(void *)(v86 + 16) = v310;
    *(void *)(v86 + 24) = v87;
    uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v118 = _allocateUninitializedArray<A>(_:)();
    uint64_t v120 = v88;
    swift_retain();
    uint64_t v89 = v116;
    Swift::String v90 = v120;
    *uint64_t v120 = v311;
    v90[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v89;
    swift_retain();
    uint64_t v91 = v117;
    char v92 = v120;
    v120[2] = v312;
    v92[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
    swift_retain();
    uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v119;
    id v94 = v120;
    v120[4] = v313;
    v94[5] = v93;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v122, (os_log_type_t)v123))
    {
      uint64_t v95 = v334;
      id v99 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v100 = createStorage<A>(capacity:type:)(0);
      uint64_t v101 = createStorage<A>(capacity:type:)(1);
      uint64_t v102 = &v436;
      uint32_t v436 = v99;
      uint64_t v103 = &v435;
      uint64_t v435 = v100;
      uint64_t v104 = &v434;
      uint64_t v434 = v101;
      serialize(_:at:)(2, &v436);
      serialize(_:at:)(1, v102);
      uint64_t v432 = v311;
      uint64_t v433 = v116;
      closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)v102, (uint64_t)v103, (uint64_t)v104);
      uint64_t v105 = v95;
      if (v95)
      {
        __break(1u);
      }
      else
      {
        uint64_t v432 = v312;
        uint64_t v433 = v117;
        closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v436, (uint64_t)&v435, (uint64_t)&v434);
        v97[1] = 0;
        uint64_t v432 = v313;
        uint64_t v433 = v119;
        closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v436, (uint64_t)&v435, (uint64_t)&v434);
        _os_log_impl(&dword_25D85A000, v122, (os_log_type_t)v123, "#confirmationResponse Unexpected parse type: %s", v99, v110);
        destroyStorage<A>(_:count:)(v100, 0, v98);
        destroyStorage<A>(_:count:)(v101, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v99, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v367 + 8))(v370, v366);
    uint64_t v96 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v308, 1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v387 + 8))(v390, v389);
  }
}

Swift::String_optional __swiftcall Parse.toAppId()()
{
  uint64_t v219 = 0;
  uint64_t v183 = partial apply for implicit closure #3 in Parse.toAppId();
  uint64_t v184 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v185 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v188 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v189 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  uint64_t v190 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unsigned int v194 = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  uint64_t v195 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unsigned int v198 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v199 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v268 = 0;
  uint64_t v266 = 0;
  uint64_t v200 = 0;
  int v267 = 0;
  uint64_t v253 = 0;
  uint64_t v244 = 0;
  unint64_t v245 = 0;
  uint64_t v201 = type metadata accessor for Logger();
  uint64_t v202 = *(void *)(v201 - 8);
  uint64_t v203 = v201 - 8;
  unint64_t v204 = (*(void *)(v202 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v201);
  uint64_t v205 = (char *)&v64 - v204;
  unint64_t v206 = (v0 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v64 - v204);
  uint64_t v207 = (char *)&v64 - v206;
  unint64_t v208 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v64 - v206);
  uint64_t v209 = (char *)&v64 - v208;
  unint64_t v210 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v64 - v208);
  uint64_t v211 = (char *)&v64 - v210;
  unint64_t v212 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v219);
  uint64_t v213 = (uint64_t)&v64 - v212;
  uint64_t v214 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v215 = *(void *)(v214 - 8);
  uint64_t v216 = v214 - 8;
  unint64_t v217 = (*(void *)(v215 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v219);
  v218 = (char *)&v64 - v217;
  id v268 = (char *)&v64 - v217;
  uint64_t v220 = type metadata accessor for USOParse();
  uint64_t v221 = *(void *)(v220 - 8);
  uint64_t v222 = v220 - 8;
  unint64_t v223 = (*(void *)(v221 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v219);
  uint64_t v224 = (uint64_t)&v64 - v223;
  int v267 = (char *)&v64 - v223;
  uint64_t v235 = type metadata accessor for Parse();
  uint64_t v233 = *(void *)(v235 - 8);
  uint64_t v234 = v235 - 8;
  uint64_t v226 = v233;
  uint64_t v228 = *(void *)(v233 + 64);
  unint64_t v227 = (v228 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v235);
  uint64_t v229 = (char *)&v64 - v227;
  unint64_t v230 = (v228 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v64 - v227);
  unint64_t v236 = (char *)&v64 - v230;
  uint64_t v266 = v3;
  uint64_t v231 = *(void (**)(void))(v233 + 16);
  uint64_t v232 = v233 + 16;
  v231();
  if ((*(unsigned int (**)(char *, uint64_t))(v233 + 88))(v236, v235) == *MEMORY[0x263F6FF80])
  {
    uint64_t v4 = v224;
    (*(void (**)(char *, uint64_t))(v233 + 96))(v236, v235);
    (*(void (**)(uint64_t, char *, uint64_t))(v221 + 32))(v4, v236, v220);
    int v267 = (char *)v4;
    USOParse.userDialogAct.getter(v213);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v213);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v215 + 32))(v218, v213, v214);
      uint64_t v181 = Siri_Nlu_External_UserDialogAct.appId.getter();
      uint64_t v182 = v5;
      if (v5)
      {
        uint64_t v179 = v181;
        unint64_t v180 = v182;
        uint64_t v6 = v211;
        uint64_t v161 = v182;
        uint64_t v160 = v181;
        uint64_t v244 = v181;
        unint64_t v245 = v182;
        uint64_t v7 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v6, v7, v201);
        swift_bridgeObjectRetain();
        uint64_t v167 = 32;
        uint64_t v168 = 7;
        uint64_t v8 = swift_allocObject();
        uint64_t v9 = v161;
        uint64_t v169 = v8;
        *(void *)(v8 + 16) = v160;
        *(void *)(v8 + 24) = v9;
        v177 = Logger.logObject.getter();
        int v178 = static os_log_type_t.debug.getter();
        uint64_t v164 = &v242;
        uint64_t v242 = 12;
        unint64_t v162 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v163 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v165 = v243;
        uint64_t v166 = 17;
        uint64_t v171 = swift_allocObject();
        *(unsigned char *)(v171 + 16) = 32;
        uint64_t v172 = swift_allocObject();
        *(unsigned char *)(v172 + 16) = 8;
        uint64_t v10 = swift_allocObject();
        uint64_t v11 = v169;
        uint64_t v170 = v10;
        *(void *)(v10 + 16) = v189;
        *(void *)(v10 + 24) = v11;
        uint64_t v12 = swift_allocObject();
        uint64_t v13 = v170;
        uint64_t v174 = v12;
        *(void *)(v12 + 16) = v190;
        *(void *)(v12 + 24) = v13;
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v173 = _allocateUninitializedArray<A>(_:)();
        uint64_t v175 = v14;
        swift_retain();
        uint64_t v15 = v171;
        uint64_t v16 = v175;
        uint64_t *v175 = v191;
        v16[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
        swift_retain();
        uint64_t v17 = v172;
        uint64_t v18 = v175;
        v175[2] = v192;
        v18[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
        swift_retain();
        uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v174;
        uint64_t v20 = v175;
        v175[4] = v193;
        v20[5] = v19;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v177, (os_log_type_t)v178))
        {
          uint64_t v21 = v200;
          unsigned int v153 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v154 = createStorage<A>(capacity:type:)(0);
          uint64_t v155 = createStorage<A>(capacity:type:)(1);
          int v156 = &v241;
          uint64_t v241 = v153;
          uint64_t v157 = &v240;
          uint64_t v240 = v154;
          uint64_t v158 = &v239;
          uint64_t v239 = v155;
          serialize(_:at:)(2, &v241);
          serialize(_:at:)(1, v156);
          unint64_t v237 = v191;
          uint64_t v238 = v171;
          closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)v156, (uint64_t)v157, (uint64_t)v158);
          uint64_t v159 = v21;
          if (v21)
          {
            __break(1u);
          }
          else
          {
            unint64_t v237 = v192;
            uint64_t v238 = v172;
            closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)&v241, (uint64_t)&v240, (uint64_t)&v239);
            uint64_t v151 = 0;
            unint64_t v237 = v193;
            uint64_t v238 = v174;
            closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)&v241, (uint64_t)&v240, (uint64_t)&v239);
            _os_log_impl(&dword_25D85A000, v177, (os_log_type_t)v178, "#Parse toAppId() found app id in user dialog act: %s", v153, v165);
            destroyStorage<A>(_:count:)(v154, 0, v152);
            destroyStorage<A>(_:count:)(v155, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v153, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v202 + 8))(v211, v201);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v218, v214);
        (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v224, v220);
        uint64_t v149 = v160;
        unint64_t v150 = v161;
        goto LABEL_42;
      }
      (*(void (**)(char *, uint64_t))(v215 + 8))(v218, v214);
    }
    type metadata accessor for ReferenceResolutionClient();
    uint64_t v147 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v148 = ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(v224);
    swift_release();
    if (v148)
    {
      uint64_t v146 = v148;
      uint64_t v22 = v209;
      uint64_t v134 = v148;
      uint64_t v253 = v148;
      uint64_t v23 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v22, v23, v201);
      swift_retain();
      uint64_t v144 = Logger.logObject.getter();
      int v145 = static os_log_type_t.debug.getter();
      v131 = &v251;
      uint64_t v251 = 12;
      unint64_t v129 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v130 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v132 = v252;
      uint64_t v133 = 17;
      uint64_t v136 = 7;
      uint64_t v138 = swift_allocObject();
      *(unsigned char *)(v138 + 16) = 32;
      uint64_t v139 = swift_allocObject();
      *(unsigned char *)(v139 + 16) = 8;
      uint64_t v135 = 32;
      uint64_t v24 = swift_allocObject();
      uint64_t v25 = v134;
      uint64_t v137 = v24;
      *(void *)(v24 + 16) = v194;
      *(void *)(v24 + 24) = v25;
      uint64_t v26 = swift_allocObject();
      uint64_t v27 = v137;
      uint64_t v141 = v26;
      *(void *)(v26 + 16) = v195;
      *(void *)(v26 + 24) = v27;
      uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v140 = _allocateUninitializedArray<A>(_:)();
      uint64_t v142 = v28;
      swift_retain();
      uint64_t v29 = v138;
      uint64_t v30 = v142;
      uint8_t *v142 = v196;
      v30[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
      swift_retain();
      uint64_t v31 = v139;
      uint64_t v32 = v142;
      v142[2] = v197;
      v32[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
      swift_retain();
      uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v141;
      uint64_t v34 = v142;
      v142[4] = v198;
      void v34[5] = v33;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v144, (os_log_type_t)v145))
      {
        uint64_t v35 = v200;
        uint64_t v122 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v123 = createStorage<A>(capacity:type:)(0);
        uint64_t v124 = createStorage<A>(capacity:type:)(1);
        uint64_t v125 = &v250;
        uint64_t v250 = v122;
        unsigned int v126 = &v249;
        uint64_t v249 = v123;
        uint64_t v127 = &v248;
        uint64_t v248 = v124;
        serialize(_:at:)(2, &v250);
        serialize(_:at:)(1, v125);
        unint64_t v246 = v196;
        uint64_t v247 = v138;
        closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)v125, (uint64_t)v126, (uint64_t)v127);
        uint64_t v128 = v35;
        if (v35)
        {
          __break(1u);
        }
        else
        {
          unint64_t v246 = v197;
          uint64_t v247 = v139;
          closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)&v250, (uint64_t)&v249, (uint64_t)&v248);
          uint64_t v120 = 0;
          unint64_t v246 = v198;
          uint64_t v247 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v246, (uint64_t)&v250, (uint64_t)&v249, (uint64_t)&v248);
          _os_log_impl(&dword_25D85A000, v144, (os_log_type_t)v145, "#Parse toAppId() found app id in ordinal selection: %s", v122, v132);
          destroyStorage<A>(_:count:)(v123, 0, v121);
          destroyStorage<A>(_:count:)(v124, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v122, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v202 + 8))(v209, v201);
      uint64_t v118 = UsoEntity_common_App.appIdentifier.getter();
      uint64_t v119 = v36;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v224, v220);
      uint64_t v149 = v118;
      unint64_t v150 = v119;
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v224, v220);
    uint64_t v117 = v200;
  }
  else
  {
    id v37 = v207;
    uint64_t v38 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v37, v38, v201);
    ((void (*)(char *, uint64_t, uint64_t))v231)(v229, v225, v235);
    unint64_t v98 = (*(unsigned __int8 *)(v226 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
    uint64_t v106 = 7;
    uint64_t v104 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v233 + 32))(v104 + v98, v229, v235);
    uint64_t v115 = Logger.logObject.getter();
    int v116 = static os_log_type_t.debug.getter();
    uint64_t v101 = &v264;
    uint64_t v264 = 12;
    unint64_t v99 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v100 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v102 = v265;
    uint64_t v103 = 17;
    uint64_t v109 = swift_allocObject();
    *(unsigned char *)(v109 + 16) = 32;
    uint64_t v110 = swift_allocObject();
    *(unsigned char *)(v110 + 16) = 8;
    uint64_t v105 = 32;
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v104;
    uint64_t v107 = v39;
    *(void *)(v39 + 16) = v183;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = v107;
    uint64_t v108 = v41;
    *(void *)(v41 + 16) = v184;
    *(void *)(v41 + 24) = v42;
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = v108;
    uint64_t v112 = v43;
    *(void *)(v43 + 16) = v185;
    *(void *)(v43 + 24) = v44;
    uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v111 = _allocateUninitializedArray<A>(_:)();
    uint64_t v113 = v45;
    swift_retain();
    uint64_t v46 = v109;
    uint64_t v47 = v113;
    *uint64_t v113 = v186;
    v47[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
    swift_retain();
    uint64_t v48 = v110;
    uint64_t v49 = v113;
    v113[2] = v187;
    v49[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48;
    swift_retain();
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v112;
    uint64_t v51 = v113;
    v113[4] = v188;
    v51[5] = v50;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v115, (os_log_type_t)v116))
    {
      uint64_t v52 = v200;
      uint64_t v91 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v92 = createStorage<A>(capacity:type:)(0);
      uint64_t v93 = createStorage<A>(capacity:type:)(1);
      id v94 = v258;
      v258[0] = v91;
      uint64_t v95 = &v257;
      uint64_t v257 = v92;
      uint64_t v96 = &v256;
      uint64_t v256 = v93;
      serialize(_:at:)(2, v258);
      serialize(_:at:)(1, v94);
      uint64_t v254 = v186;
      uint64_t v255 = v109;
      closure #1 in osLogInternal(_:log:type:)(&v254, (uint64_t)v94, (uint64_t)v95, (uint64_t)v96);
      uint64_t v97 = v52;
      if (v52)
      {
        __break(1u);
      }
      else
      {
        uint64_t v254 = v187;
        uint64_t v255 = v110;
        closure #1 in osLogInternal(_:log:type:)(&v254, (uint64_t)v258, (uint64_t)&v257, (uint64_t)&v256);
        uint64_t v88 = 0;
        uint64_t v54 = v88;
        uint64_t v254 = v188;
        uint64_t v255 = v112;
        closure #1 in osLogInternal(_:log:type:)(&v254, (uint64_t)v258, (uint64_t)&v257, (uint64_t)&v256);
        uint64_t v87 = v54;
        _os_log_impl(&dword_25D85A000, v115, (os_log_type_t)v116, "#Parse toAppId() unexpected parse type %s", v91, v102);
        destroyStorage<A>(_:count:)(v92, 0, v90);
        destroyStorage<A>(_:count:)(v93, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v91, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v89 = v87;
      }
    }
    else
    {
      uint64_t v53 = v200;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v89 = v53;
    }
    uint64_t v86 = v89;

    (*(void (**)(char *, uint64_t))(v202 + 8))(v207, v201);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v236, v235);
    uint64_t v117 = v86;
  }
  BOOL v55 = v205;
  uint64_t v78 = v117;
  uint64_t v56 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v55, v56, v201);
  uint64_t v84 = Logger.logObject.getter();
  int v83 = static os_log_type_t.debug.getter();
  uint64_t v81 = &v262;
  uint64_t v262 = 2;
  unint64_t v79 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v80 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v82 = v263;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v85 = (unsigned char *)_allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v84, (os_log_type_t)v83))
  {
    uint64_t v57 = v78;
    uint64_t v68 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v67 = 0;
    uint64_t v69 = createStorage<A>(capacity:type:)(0);
    uint64_t v70 = createStorage<A>(capacity:type:)(v67);
    uint64_t v74 = &v261;
    int v261 = v68;
    uint64_t v75 = &v260;
    uint64_t v260 = v69;
    uint64_t v72 = &v259;
    uint64_t v259 = v70;
    unsigned int v71 = 0;
    serialize(_:at:)(0, &v261);
    serialize(_:at:)(v71, v74);
    v258[1] = v85;
    uint64_t v73 = &v64;
    MEMORY[0x270FA5388](&v64);
    uint64_t v58 = v75;
    id v59 = &v64 - 6;
    uint64_t v76 = &v64 - 6;
    v59[2] = v74;
    v59[3] = v58;
    v59[4] = v60;
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v57)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v84, (os_log_type_t)v83, "#Parse toAppId() could not resolve an app ID, returning nil", v68, v82);
      uint64_t v65 = 0;
      destroyStorage<A>(_:count:)(v69, 0, v66);
      destroyStorage<A>(_:count:)(v70, v65, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v68, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = 0;

  (*(void (**)(char *, uint64_t))(v202 + 8))(v205, v201);
  uint64_t v149 = (uint64_t)v64;
  unint64_t v150 = v64;
LABEL_42:
  uint64_t v61 = v149;
  uint64_t v62 = v150;
  result.value._object = v62;
  result.value._countAndFlagsBits = v61;
  return result;
}

uint64_t USOParse.isRequestToSummariseAppleCardInfo.getter()
{
  uint64_t v41 = 0;
  uint64_t v30 = closure #1 in USOParse.isRequestToSummariseAppleCardInfo.getter;
  uint64_t v56 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  uint64_t v31 = 0;
  uint64_t v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v35 = v36 - 8;
  unint64_t v32 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v36);
  id v37 = (char *)&v6 - v32;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  unint64_t v33 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v42 = (uint64_t)&v6 - v33;
  uint64_t v56 = v0;
  uint64_t v2 = USOParse.userParse.getter();
  uint64_t v40 = MEMORY[0x2611B7D70](v2);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v36);
  swift_bridgeObjectRetain();
  uint64_t v39 = &v53;
  uint64_t v53 = v40;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = v43 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 48))(v42, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v42);
  }
  else
  {
    uint64_t v29 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    if (v29)
    {
      uint64_t v28 = v29;
      uint64_t v27 = v29;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v54, 0, sizeof(v54));
  uint64_t v55 = 0;
LABEL_6:
  if (v55)
  {
    type metadata accessor for UsoTask_summarise_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v26 = v46;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v25 = v26;
  }
  else
  {
    uint64_t v6 = 0;
    outlined destroy of FlowActivity?((uint64_t)v54);
    uint64_t v25 = v6;
  }
  uint64_t v24 = v25;
  if (!v25)
  {
    int v8 = 0;
    return v8 & 1;
  }
  uint64_t v23 = v24;
  uint64_t v21 = v24;
  uint64_t v52 = v24;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  uint64_t v22 = v51;
  swift_release();
  if (v22
    && (uint64_t v20 = v22,
        uint64_t v18 = v22,
        uint64_t v19 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter(),
        swift_release(),
        v19))
  {
    uint64_t v17 = v19;
    uint64_t v14 = v19;
    UsoIdentifierNamespace.rawValue.getter(6);
    uint64_t v13 = v3;
    uint64_t v15 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v12 = v16;
  uint64_t v50 = v16;
  swift_bridgeObjectRetain();
  uint64_t v48 = v12;
  if (v12)
  {
    uint64_t v49 = v48;
  }
  else
  {
    uint64_t v11 = 0;
    type metadata accessor for UsoIdentifier();
    uint64_t v49 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  uint64_t v4 = v31;
  uint64_t v47 = v49;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  uint64_t result = Sequence.contains(where:)();
  int v10 = result;
  if (!v4)
  {
    int v7 = v10;
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    swift_release();
    int v8 = v7;
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t USOParse.isRequestToCreateAppleCardAccount.getter()
{
  uint64_t v41 = 0;
  uint64_t v30 = closure #1 in USOParse.isRequestToSummariseAppleCardInfo.getter;
  uint64_t v56 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  uint64_t v31 = 0;
  uint64_t v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v35 = v36 - 8;
  unint64_t v32 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v36);
  id v37 = (char *)&v6 - v32;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  unint64_t v33 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v42 = (uint64_t)&v6 - v33;
  uint64_t v56 = v0;
  uint64_t v2 = USOParse.userParse.getter();
  uint64_t v40 = MEMORY[0x2611B7D70](v2);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v36);
  swift_bridgeObjectRetain();
  uint64_t v39 = &v53;
  uint64_t v53 = v40;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = v43 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v44 + 48))(v42, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v42);
  }
  else
  {
    uint64_t v29 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    if (v29)
    {
      uint64_t v28 = v29;
      uint64_t v27 = v29;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v54, 0, sizeof(v54));
  uint64_t v55 = 0;
LABEL_6:
  if (v55)
  {
    type metadata accessor for UsoTask_create_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v26 = v46;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v25 = v26;
  }
  else
  {
    uint64_t v6 = 0;
    outlined destroy of FlowActivity?((uint64_t)v54);
    uint64_t v25 = v6;
  }
  uint64_t v24 = v25;
  if (!v25)
  {
    int v8 = 0;
    return v8 & 1;
  }
  uint64_t v23 = v24;
  uint64_t v21 = v24;
  uint64_t v52 = v24;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  uint64_t v22 = v51;
  swift_release();
  if (v22
    && (uint64_t v20 = v22,
        uint64_t v18 = v22,
        uint64_t v19 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter(),
        swift_release(),
        v19))
  {
    uint64_t v17 = v19;
    uint64_t v14 = v19;
    UsoIdentifierNamespace.rawValue.getter(6);
    uint64_t v13 = v3;
    uint64_t v15 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v12 = v16;
  uint64_t v50 = v16;
  swift_bridgeObjectRetain();
  uint64_t v48 = v12;
  if (v12)
  {
    uint64_t v49 = v48;
  }
  else
  {
    uint64_t v11 = 0;
    type metadata accessor for UsoIdentifier();
    uint64_t v49 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
  }
  uint64_t v4 = v31;
  uint64_t v47 = v49;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
  lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
  uint64_t result = Sequence.contains(where:)();
  int v10 = result;
  if (!v4)
  {
    int v7 = v10;
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    swift_release();
    int v8 = v7;
    return v8 & 1;
  }
  __break(1u);
  return result;
}

BOOL USOParse.isOrdinalDisambiguation.getter()
{
  uint64_t v21 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  unint64_t v12 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v13 = (uint64_t)&v3 - v12;
  uint64_t v21 = v0;
  USOParse.userDialogAct.getter((uint64_t)&v3 - v12);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v14 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v13);
  }
  else
  {
    uint64_t v11 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    if (v11)
    {
      uint64_t v10 = v11;
      uint64_t v9 = v11;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = 0;
LABEL_6:
  if (v20)
  {
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if (swift_dynamicCast()) {
      uint64_t v8 = v17;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v8;
  }
  else
  {
    uint64_t v4 = 0;
    outlined destroy of FlowActivity?((uint64_t)v19);
    uint64_t v7 = v4;
  }
  uint64_t v18 = v7;
  BOOL v6 = v7 != 0;
  BOOL v5 = v6;
  outlined destroy of ContiguousArray<A1>();
  return v5;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.toContactId()()
{
  uint64_t v230 = 0;
  int v193 = partial apply for implicit closure #3 in Parse.toAppId();
  unsigned int v194 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v195 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unsigned int v198 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v199 = partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  uint64_t v200 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v202 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v204 = partial apply for implicit closure #1 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:);
  uint64_t v205 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v282 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  uint64_t v261 = 0;
  uint64_t v259 = 0;
  uint64_t v260 = 0;
  uint64_t v257 = 0;
  uint64_t v258 = 0;
  unint64_t v209 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v210 = (uint64_t)v67 - v209;
  uint64_t v211 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v212 = *(void *)(v211 - 8);
  uint64_t v213 = v211 - 8;
  unint64_t v214 = (*(void *)(v212 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v230);
  uint64_t v215 = (char *)v67 - v214;
  uint64_t v216 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v217 = *(void *)(v216 - 8);
  uint64_t v218 = v216 - 8;
  unint64_t v219 = (*(void *)(v217 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v230);
  uint64_t v220 = (char *)v67 - v219;
  uint64_t v282 = (char *)v67 - v219;
  uint64_t v221 = type metadata accessor for Logger();
  uint64_t v222 = *(void *)(v221 - 8);
  uint64_t v223 = v221 - 8;
  unint64_t v224 = (*(void *)(v222 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v0 = MEMORY[0x270FA5388](v230);
  uint64_t v225 = (char *)v67 - v224;
  unint64_t v226 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  unint64_t v227 = (char *)v67 - v226;
  unint64_t v228 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v229 = (char *)v67 - v228;
  uint64_t v231 = type metadata accessor for USOParse();
  uint64_t v233 = *(void *)(v231 - 8);
  uint64_t v232 = v231 - 8;
  uint64_t v234 = v233;
  uint64_t v235 = *(void *)(v233 + 64);
  unint64_t v236 = (v235 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v230);
  unint64_t v237 = (char *)v67 - v236;
  unint64_t v238 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v239 = (char *)v67 - v238;
  uint64_t v281 = (char *)v67 - v238;
  uint64_t v250 = type metadata accessor for Parse();
  uint64_t v248 = *(void *)(v250 - 8);
  uint64_t v249 = v250 - 8;
  uint64_t v241 = v248;
  uint64_t v243 = *(void *)(v248 + 64);
  unint64_t v242 = (v243 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v250);
  uint64_t v244 = (char *)v67 - v242;
  unint64_t v245 = (v243 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v67 - v242);
  uint64_t v251 = (char *)v67 - v245;
  uint64_t v280 = v6;
  unint64_t v246 = *(void (**)(void))(v248 + 16);
  uint64_t v247 = v248 + 16;
  v246();
  if ((*(unsigned int (**)(char *, uint64_t))(v248 + 88))(v251, v250) != *MEMORY[0x263F6FF80])
  {
    uint64_t v40 = v225;
    uint64_t v41 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v40, v41, v221);
    ((void (*)(char *, uint64_t, uint64_t))v246)(v244, v240, v250);
    unint64_t v87 = (*(unsigned __int8 *)(v241 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80);
    uint64_t v95 = 7;
    uint64_t v93 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v248 + 32))(v93 + v87, v244, v250);
    uint64_t v104 = Logger.logObject.getter();
    int v105 = static os_log_type_t.debug.getter();
    uint64_t v90 = &v278;
    uint64_t v278 = 12;
    unint64_t v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v91 = v279;
    uint64_t v92 = 17;
    uint64_t v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 32;
    uint64_t v99 = swift_allocObject();
    *(unsigned char *)(v99 + 16) = 8;
    uint64_t v94 = 32;
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = v93;
    uint64_t v96 = v42;
    *(void *)(v42 + 16) = v193;
    *(void *)(v42 + 24) = v43;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v96;
    uint64_t v97 = v44;
    *(void *)(v44 + 16) = v194;
    *(void *)(v44 + 24) = v45;
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = v97;
    uint64_t v101 = v46;
    *(void *)(v46 + 16) = v195;
    *(void *)(v46 + 24) = v47;
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v100 = _allocateUninitializedArray<A>(_:)();
    uint32_t v102 = v48;
    swift_retain();
    uint64_t v49 = v98;
    uint64_t v50 = v102;
    *uint32_t v102 = v196;
    v50[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
    swift_retain();
    uint64_t v51 = v99;
    uint64_t v52 = v102;
    v102[2] = v197;
    v52[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v51;
    swift_retain();
    uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v101;
    uint64_t v54 = v102;
    v102[4] = v198;
    v54[5] = v53;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v104, (os_log_type_t)v105))
    {
      unint64_t v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v81 = createStorage<A>(capacity:type:)(0);
      uint64_t v82 = createStorage<A>(capacity:type:)(1);
      int v83 = &v275;
      unsigned int v275 = v80;
      uint64_t v84 = &v274;
      uint64_t v274 = v81;
      uint64_t v85 = &v273;
      uint64_t v273 = v82;
      serialize(_:at:)(2, &v275);
      serialize(_:at:)(1, v83);
      uint64_t v55 = v192;
      uint64_t v271 = v196;
      uint64_t v272 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v271, (uint64_t)v83, (uint64_t)v84, (uint64_t)v85);
      uint64_t v86 = v55;
      if (v55)
      {
        __break(1u);
      }
      else
      {
        uint64_t v271 = v197;
        uint64_t v272 = v99;
        closure #1 in osLogInternal(_:log:type:)(&v271, (uint64_t)&v275, (uint64_t)&v274, (uint64_t)&v273);
        uint64_t v78 = 0;
        uint64_t v271 = v198;
        uint64_t v272 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v271, (uint64_t)&v275, (uint64_t)&v274, (uint64_t)&v273);
        _os_log_impl(&dword_25D85A000, v104, (os_log_type_t)v105, "Unexpected parse type: %s", v80, v91);
        destroyStorage<A>(_:count:)(v81, 0, v79);
        destroyStorage<A>(_:count:)(v82, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v80, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v222 + 8))(v225, v221);
    Builtin::Word v69 = 0;
    uint64_t v56 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v72 = &v276;
    uint64_t v276 = v56;
    uint64_t v277 = v57;
    uint64_t v68 = "";
    int v70 = 1;
    Swift::String v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v69, 1);
    v67[1] = v58._object;
    DefaultStringInterpolation.appendLiteral(_:)(v58);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v68, v69, v70 & 1);
    object = v59._object;
    DefaultStringInterpolation.appendLiteral(_:)(v59);
    swift_bridgeObjectRelease();
    uint64_t v74 = v276;
    uint64_t v73 = v277;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v76 = String.init(stringInterpolation:)();
    uint64_t v75 = v60;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v61 = swift_allocError();
    uint64_t v62 = v75;
    uint64_t v77 = v61;
    *(void *)uint64_t v63 = v76;
    *(void *)(v63 + 8) = v62;
    *(void *)(v63 + 16) = 0;
    *(void *)(v63 + 24) = 0;
    *(void *)(v63 + 32) = 0;
    *(void *)(v63 + 40) = 0;
    *(unsigned char *)(v63 + 48) = 7;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v248 + 8))(v251, v250);
    uint64_t v131 = v77;
    goto LABEL_30;
  }
  uint64_t v7 = v229;
  (*(void (**)(char *, uint64_t))(v248 + 96))(v251, v250);
  uint64_t v170 = v234;
  uint64_t v173 = *(void (**)(char *, char *, uint64_t))(v233 + 32);
  uint64_t v172 = v233 + 32;
  v173(v239, v251, v231);
  uint64_t v281 = v239;
  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  uint64_t v168 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 16);
  uint64_t v169 = v222 + 16;
  v168(v7, v8, v221);
  (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v237, v239, v231);
  unint64_t v171 = (*(unsigned __int8 *)(v170 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80);
  uint64_t v181 = 7;
  uint64_t v182 = swift_allocObject();
  v173((char *)(v182 + v171), v237, v231);
  uint64_t v190 = Logger.logObject.getter();
  int v191 = static os_log_type_t.debug.getter();
  uint64_t v176 = &v269;
  uint64_t v269 = 12;
  unint64_t v174 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v175 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v177 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v178 = v270;
  uint64_t v179 = 17;
  uint64_t v184 = swift_allocObject();
  *(unsigned char *)(v184 + 16) = 32;
  uint64_t v185 = swift_allocObject();
  *(unsigned char *)(v185 + 16) = 8;
  uint64_t v180 = 32;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v182;
  uint64_t v183 = v9;
  *(void *)(v9 + 16) = v199;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v183;
  uint64_t v187 = v11;
  *(void *)(v11 + 16) = v200;
  *(void *)(v11 + 24) = v12;
  uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v186 = _allocateUninitializedArray<A>(_:)();
  uint64_t v188 = v13;
  swift_retain();
  uint64_t v14 = v184;
  uint64_t v15 = v188;
  *uint64_t v188 = v201;
  v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  swift_retain();
  uint64_t v16 = v185;
  uint64_t v17 = v188;
  v188[2] = v202;
  v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v187;
  uint64_t v19 = v188;
  v188[4] = v203;
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v190, (os_log_type_t)v191))
  {
    uint64_t v161 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v162 = createStorage<A>(capacity:type:)(0);
    uint64_t v163 = createStorage<A>(capacity:type:)(1);
    uint64_t v164 = &v256;
    uint64_t v256 = v161;
    uint32_t v165 = &v255;
    uint64_t v255 = v162;
    uint64_t v166 = &v254;
    uint64_t v254 = v163;
    serialize(_:at:)(2, &v256);
    serialize(_:at:)(1, v164);
    uint64_t v20 = v192;
    uint32_t v252 = v201;
    uint64_t v253 = v184;
    closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)v164, (uint64_t)v165, (uint64_t)v166);
    uint64_t v167 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      uint32_t v252 = v202;
      uint64_t v253 = v185;
      closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)&v256, (uint64_t)&v255, (uint64_t)&v254);
      uint64_t v157 = 0;
      uint32_t v252 = v203;
      uint64_t v253 = v187;
      closure #1 in osLogInternal(_:log:type:)(&v252, (uint64_t)&v256, (uint64_t)&v255, (uint64_t)&v254);
      uint64_t v156 = 0;
      _os_log_impl(&dword_25D85A000, v190, (os_log_type_t)v191, "parse is %s", v161, v178);
      destroyStorage<A>(_:count:)(v162, 0, v160);
      destroyStorage<A>(_:count:)(v163, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v161, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v158 = v156;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v158 = v192;
  }
  uint64_t v150 = v158;

  uint64_t v151 = *(void (**)(char *, uint64_t))(v222 + 8);
  uint64_t v152 = v222 + 8;
  v151(v229, v221);
  uint64_t v21 = USOParse.userParse.getter();
  uint64_t v153 = MEMORY[0x2611B7D70](v21);
  (*(void (**)(char *, uint64_t))(v212 + 8))(v215, v211);
  swift_bridgeObjectRetain();
  uint64_t v155 = &v268;
  uint64_t v268 = v153;
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 48))(v210, 1, v216) == 1)
  {
    uint64_t v25 = v227;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v210);
    swift_bridgeObjectRelease();
    uint64_t v26 = Logger.payments.unsafeMutableAddressor();
    v168(v25, v26, v221);
    ((void (*)(char *, uint64_t, uint64_t))v246)(v244, v240, v250);
    unint64_t v116 = (*(unsigned __int8 *)(v241 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80);
    uint64_t v120 = 7;
    uint64_t v121 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v248 + 32))(v121 + v116, v244, v250);
    uint64_t v128 = Logger.logObject.getter();
    int v129 = static os_log_type_t.error.getter();
    v266[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v117 = v267;
    uint64_t v118 = 17;
    uint64_t v123 = swift_allocObject();
    *(unsigned char *)(v123 + 16) = 32;
    uint64_t v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = 8;
    uint64_t v119 = 32;
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v121;
    uint64_t v122 = v27;
    *(void *)(v27 + 16) = v204;
    *(void *)(v27 + 24) = v28;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v122;
    uint64_t v126 = v29;
    *(void *)(v29 + 16) = v205;
    *(void *)(v29 + 24) = v30;
    uint64_t v125 = _allocateUninitializedArray<A>(_:)();
    uint64_t v127 = v31;
    swift_retain();
    uint64_t v32 = v123;
    unint64_t v33 = v127;
    uint64_t *v127 = v206;
    v33[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
    swift_retain();
    uint64_t v34 = v124;
    uint64_t v35 = v127;
    v127[2] = v207;
    v35[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v126;
    id v37 = v127;
    v127[4] = v208;
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v128, (os_log_type_t)v129))
    {
      uint64_t v109 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v110 = createStorage<A>(capacity:type:)(0);
      uint64_t v111 = createStorage<A>(capacity:type:)(1);
      uint64_t v112 = v266;
      v266[0] = v109;
      uint64_t v113 = &v265;
      uint64_t v265 = v110;
      uint64_t v114 = &v264;
      uint64_t v264 = v111;
      serialize(_:at:)(2, v266);
      serialize(_:at:)(1, v112);
      uint64_t v38 = v150;
      uint64_t v262 = v206;
      uint64_t v263 = v123;
      closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)v112, (uint64_t)v113, (uint64_t)v114);
      uint64_t v115 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        uint64_t v262 = v207;
        uint64_t v263 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)v266, (uint64_t)&v265, (uint64_t)&v264);
        uint64_t v107 = 0;
        uint64_t v262 = v208;
        uint64_t v263 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)v266, (uint64_t)&v265, (uint64_t)&v264);
        _os_log_impl(&dword_25D85A000, v128, (os_log_type_t)v129, "#toContactId Couldn't find user dialog act in parse: %s", v109, v117);
        destroyStorage<A>(_:count:)(v110, 0, v108);
        destroyStorage<A>(_:count:)(v111, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v109, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v151(v227, v221);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v106 = swift_allocError();
    *(void *)uint64_t v39 = 5;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0;
    *(void *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0;
    *(void *)(v39 + 40) = 0;
    *(unsigned char *)(v39 + 48) = 17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v231);
    uint64_t v131 = v106;
    goto LABEL_30;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v217 + 32))(v220, v210, v216);
  swift_bridgeObjectRelease();
  uint64_t v148 = Siri_Nlu_External_UserDialogAct.contactId.getter();
  uint64_t v149 = v22;
  if (!v22)
  {
    type metadata accessor for ReferenceResolutionClient();
    uint64_t v140 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v141 = ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)((uint64_t)v239);
    swift_release();
    if (v141)
    {
      uint64_t v139 = v141;
      uint64_t v136 = v141;
      uint64_t v261 = v141;
      uint64_t v137 = UsoEntity_common_Person.contactId.getter();
      uint64_t v138 = v23;
      if (v23)
      {
        uint64_t v134 = v137;
        uint64_t v135 = v138;
        uint64_t v133 = v138;
        uint64_t v132 = v137;
        uint64_t v259 = v137;
        uint64_t v260 = v138;
        swift_release();
        (*(void (**)(char *, uint64_t))(v217 + 8))(v220, v216);
        (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v231);
        uint64_t v144 = v132;
        int v145 = v133;
        goto LABEL_29;
      }
      swift_release();
    }
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v130 = swift_allocError();
    *(void *)uint64_t v24 = 6;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 32) = 0;
    *(void *)(v24 + 40) = 0;
    *(unsigned char *)(v24 + 48) = 17;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v217 + 8))(v220, v216);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v231);
    uint64_t v131 = v130;
LABEL_30:
    uint64_t v65 = v159;
    uint64_t v64 = v67[0];
    goto LABEL_31;
  }
  uint64_t v146 = v148;
  uint64_t v147 = v149;
  uint64_t v143 = v149;
  uint64_t v142 = v148;
  uint64_t v257 = v148;
  uint64_t v258 = v149;
  (*(void (**)(char *, uint64_t))(v217 + 8))(v220, v216);
  (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v231);
  uint64_t v144 = v142;
  int v145 = v143;
LABEL_29:
  uint64_t v64 = v144;
  uint64_t v65 = v145;
LABEL_31:
  result._object = v65;
  result._countAndFlagsBits = v64;
  return result;
}

uint64_t Parse.isCancel.getter()
{
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v61 = 0;
  Swift::String v59 = 0;
  uint64_t v45 = 0;
  uint64_t v26 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = v26 - 8;
  unint64_t v29 = (*(void *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v9 - v29;
  uint64_t v61 = (char *)&v9 - v29;
  unint64_t v31 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v45);
  uint64_t v32 = (uint64_t)&v9 - v31;
  uint64_t v33 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = v33 - 8;
  unint64_t v36 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v45);
  id v37 = (char *)&v9 - v36;
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  unint64_t v41 = (*(void *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v0 = MEMORY[0x270FA5388](v45);
  uint64_t v42 = (char *)&v9 - v41;
  unint64_t v43 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v0);
  uint64_t v44 = (char *)&v9 - v43;
  uint64_t v60 = (char *)&v9 - v43;
  uint64_t v46 = type metadata accessor for USOParse();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = v46 - 8;
  unint64_t v49 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v45);
  uint64_t v50 = (char *)&v9 - v49;
  Swift::String v59 = (char *)&v9 - v49;
  uint64_t v54 = type metadata accessor for Parse();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v53 = v54 - 8;
  unint64_t v51 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v54);
  uint64_t v55 = (char *)&v9 - v51;
  uint64_t v58 = v2;
  (*(void (**)(void))(v52 + 16))();
  int v56 = (*(uint64_t (**)(char *, uint64_t))(v52 + 88))(v55, v54);
  if (v56 == *MEMORY[0x263F6FF70])
  {
    uint64_t v5 = v30;
    (*(void (**)(char *, uint64_t))(v52 + 96))(v55, v54);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v5, v55, v26);
    uint64_t v61 = v5;
    uint64_t v11 = Parse.DirectInvocation.identifier.getter();
    uint64_t v15 = v6;
    id v10 = (id)static SiriKitDirectInvocationPayloads.cancel.getter();
    id v14 = objc_msgSend(v10, sel_identifier);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v7;

    int v16 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    int v20 = v16;
  }
  else if (v56 == *MEMORY[0x263F6FF80])
  {
    uint64_t v3 = v50;
    (*(void (**)(char *, uint64_t))(v52 + 96))(v55, v54);
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v3, v55, v46);
    Swift::String v59 = v3;
    uint64_t v4 = USOParse.userParse.getter();
    uint64_t v23 = MEMORY[0x2611B7D70](v4);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v33);
    swift_bridgeObjectRetain();
    uint64_t v25 = &v57;
    uint64_t v57 = v23;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v32, 1, v38) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
      int v20 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v44, v32, v38);
      swift_bridgeObjectRelease();
      int v22 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v42, v44, v38);
      if (v22) {
        int v21 = 1;
      }
      else {
        int v21 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      }
      int v19 = v21;
      uint64_t v18 = *(void (**)(char *, uint64_t))(v39 + 8);
      uint64_t v17 = v39 + 8;
      v18(v42, v38);
      v18(v44, v38);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
      int v20 = v19;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v54);
    int v20 = 0;
  }
  return v20 & 1;
}

uint64_t USOParse.preferredUserDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v24 = 0;
  uint64_t v46 = closure #1 in USOParse.preferredUserDialogAct.getter;
  uint64_t v18 = closure #2 in USOParse.preferredUserDialogAct.getter;
  uint64_t v52 = 0;
  unint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v44 = 0;
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v37 = v38 - 8;
  unint64_t v19 = (*(void *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v38);
  int v20 = (char *)&v12 - v19;
  unint64_t v21 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v12 - v19);
  int v22 = (char *)&v12 - v21;
  unint64_t v23 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v12 - v21);
  uint64_t v39 = (char *)&v12 - v23;
  unint64_t v25 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t)&v12 - v25;
  unint64_t v27 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (uint64_t)&v12 - v27;
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v28 - 8;
  uint64_t v32 = *(void *)(v29 + 64);
  unint64_t v31 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)&v12 - v31;
  uint64_t v52 = (char *)&v12 - v31;
  unint64_t v34 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v35 = (char *)&v12 - v34;
  unint64_t v51 = (char *)&v12 - v34;
  uint64_t v50 = v1;
  uint64_t v7 = USOParse.userParse.getter();
  uint64_t v42 = MEMORY[0x2611B7D70](v7);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v41 = v36 + 8;
  v40(v39, v38);
  v49[2] = v42;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  unint64_t v47 = lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Sequence.first(where:)();
  uint64_t v48 = 0;
  outlined destroy of [SFCardSection]();
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  uint64_t v16 = v29 + 48;
  if (v15(v43, 1, v28) == 1)
  {
    uint64_t v9 = v48;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v43);
    uint64_t v10 = USOParse.userParse.getter();
    uint64_t v14 = MEMORY[0x2611B7D70](v10);
    v40(v22, v38);
    v49[1] = v14;
    uint64_t result = Sequence.first(where:)();
    if (v9)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of [SFCardSection]();
      if (v15(v26, 1, v28) == 1)
      {
        outlined destroy of Siri_Nlu_External_UserDialogAct?(v26);
        uint64_t v11 = USOParse.userParse.getter();
        uint64_t v13 = MEMORY[0x2611B7D70](v11);
        v40(v20, v38);
        swift_bridgeObjectRetain();
        uint64_t v12 = v49;
        v49[0] = v13;
        lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        return swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v33, v26, v28);
        (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v17, v33, v28);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v17, 0, 1, v28);
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v33, v28);
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v35, v43, v28);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v17, v35, v28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v17, 0, 1, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v35, v28);
  }
  return result;
}

uint64_t implicit closure #1 in Parse.confirmationResponse.getter()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in Parse.confirmationResponse.getter(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in Parse.confirmationResponse.getter(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in Parse.confirmationResponse.getter(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t sub_25D96C24C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #3 in Parse.confirmationResponse.getter(v2);
}

id Parse.DirectInvocation.toSiriKitIntent(previousIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v113 = a1;
  uint64_t v112 = a2;
  int v105 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v106 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v107 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v108 = &protocol witness table for INSearchForAccountsIntent;
  uint64_t v109 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v110 = &protocol witness table for INSendPaymentIntent;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v152 = 0;
  uint64_t v111 = 0;
  uint64_t v114 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v114 - 8);
  uint64_t v116 = v114 - 8;
  unint64_t v117 = (*(void *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v113);
  uint64_t v118 = (char *)&v32 - v117;
  unint64_t v119 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v120 = (char *)&v32 - v119;
  unint64_t v121 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v122 = (char *)&v32 - v121;
  uint64_t v153 = v7;
  uint64_t v154 = v8;
  uint64_t v152 = v2;
  uint64_t v124 = Parse.DirectInvocation.identifier.getter();
  uint64_t v125 = v9;
  swift_bridgeObjectRetain();
  uint64_t v123 = PaymentsDirectInvocations.Identifiers.rawValue.getter(8);
  uint64_t v126 = v10;
  swift_bridgeObjectRetain();
  uint64_t v150 = v124;
  uint64_t v151 = v125;
  int v127 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v127)
  {
    uint64_t v11 = v122;
    swift_bridgeObjectRelease();
    uint64_t v12 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v11, v12, v114);
    uint64_t v103 = Logger.logObject.getter();
    int v102 = static os_log_type_t.debug.getter();
    uint64_t v100 = &v132;
    uint64_t v132 = 2;
    unint64_t v98 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v99 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v101 = v133;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v104 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v103, (os_log_type_t)v102))
    {
      uint64_t v13 = v111;
      unint64_t v88 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v87 = 0;
      uint64_t v89 = createStorage<A>(capacity:type:)(0);
      uint64_t v90 = createStorage<A>(capacity:type:)(v87);
      uint64_t v94 = &v131;
      uint64_t v131 = v88;
      uint64_t v95 = &v130;
      uint64_t v130 = v89;
      uint64_t v92 = &v129;
      uint64_t v129 = v90;
      unsigned int v91 = 0;
      serialize(_:at:)(0, &v131);
      serialize(_:at:)(v91, v94);
      uint64_t v128 = v104;
      uint64_t v93 = &v32;
      MEMORY[0x270FA5388](&v32);
      uint64_t v14 = v95;
      uint64_t v15 = &v32 - 6;
      uint64_t v96 = &v32 - 6;
      v15[2] = (uint64_t)v94;
      v15[3] = (uint64_t)v14;
      v15[4] = v16;
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v13)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v103, (os_log_type_t)v102, "#PaymentDirectInvocations sendPayment, returning INSendPaymentIntent", v88, v101);
        uint64_t v85 = 0;
        destroyStorage<A>(_:count:)(v89, 0, v86);
        destroyStorage<A>(_:count:)(v90, v85, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v88, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v115 + 8))(v122, v114);
    type metadata accessor for INSendPaymentIntent();
    id v82 = SAUIAppPunchOut.__allocating_init()();
    swift_bridgeObjectRelease();
    id v83 = v82;
    uint64_t v84 = v110;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v79 = PaymentsDirectInvocations.Identifiers.rawValue.getter(9);
    uint64_t v80 = v17;
    swift_bridgeObjectRetain();
    uint64_t v148 = v124;
    uint64_t v149 = v125;
    int v81 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v81)
    {
      uint64_t v18 = v120;
      swift_bridgeObjectRelease();
      uint64_t v19 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v18, v19, v114);
      uint64_t v77 = Logger.logObject.getter();
      int v76 = static os_log_type_t.debug.getter();
      uint64_t v74 = &v138;
      uint64_t v138 = 2;
      unint64_t v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v75 = v139;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v78 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v77, (os_log_type_t)v76))
      {
        uint64_t v20 = v111;
        uint64_t v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v61 = 0;
        uint64_t v63 = createStorage<A>(capacity:type:)(0);
        uint64_t v64 = createStorage<A>(capacity:type:)(v61);
        uint64_t v68 = &v137;
        uint64_t v137 = v62;
        Builtin::Word v69 = &v136;
        uint64_t v136 = v63;
        uint64_t v66 = &v135;
        uint64_t v135 = v64;
        unsigned int v65 = 0;
        serialize(_:at:)(0, &v137);
        serialize(_:at:)(v65, v68);
        uint64_t v134 = v78;
        uint64_t v67 = &v32;
        MEMORY[0x270FA5388](&v32);
        unint64_t v21 = v69;
        int v22 = &v32 - 6;
        int v70 = &v32 - 6;
        v22[2] = (uint64_t)v68;
        v22[3] = (uint64_t)v21;
        v22[4] = v23;
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v20)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v77, (os_log_type_t)v76, "#PaymentDirectInvocations requestPayment, returning INRequestPaymentIntent", v62, v75);
          uint64_t v59 = 0;
          destroyStorage<A>(_:count:)(v63, 0, v60);
          destroyStorage<A>(_:count:)(v64, v59, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v62, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v115 + 8))(v120, v114);
      type metadata accessor for INRequestPaymentIntent();
      id v58 = SAUIAppPunchOut.__allocating_init()();
      swift_bridgeObjectRelease();
      id v83 = v58;
      uint64_t v84 = v109;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v55 = PaymentsDirectInvocations.Identifiers.rawValue.getter(10);
      uint64_t v56 = v24;
      swift_bridgeObjectRetain();
      uint64_t v146 = v124;
      uint64_t v147 = v125;
      int v57 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v57)
      {
        unint64_t v25 = v118;
        swift_bridgeObjectRelease();
        uint64_t v26 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v25, v26, v114);
        uint64_t v53 = Logger.logObject.getter();
        int v52 = static os_log_type_t.debug.getter();
        uint64_t v50 = &v144;
        uint64_t v144 = 2;
        unint64_t v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v49 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v51 = v145;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v54 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v53, (os_log_type_t)v52))
        {
          uint64_t v27 = v111;
          uint64_t v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v37 = 0;
          uint64_t v39 = createStorage<A>(capacity:type:)(0);
          uint64_t v40 = createStorage<A>(capacity:type:)(v37);
          uint64_t v44 = &v143;
          uint64_t v143 = v38;
          uint64_t v45 = &v142;
          uint64_t v142 = v39;
          uint64_t v42 = &v141;
          uint64_t v141 = v40;
          unsigned int v41 = 0;
          serialize(_:at:)(0, &v143);
          serialize(_:at:)(v41, v44);
          uint64_t v140 = v54;
          uint64_t v43 = &v32;
          MEMORY[0x270FA5388](&v32);
          uint64_t v28 = v45;
          uint64_t v29 = &v32 - 6;
          uint64_t v46 = &v32 - 6;
          v29[2] = (uint64_t)v44;
          v29[3] = (uint64_t)v28;
          v29[4] = v30;
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v27)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25D85A000, v53, (os_log_type_t)v52, "#PaymentsDirectInvocations searchForAccounts, returning INSearchForAccountsIntent", v38, v51);
            uint64_t v35 = 0;
            destroyStorage<A>(_:count:)(v39, 0, v36);
            destroyStorage<A>(_:count:)(v40, v35, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v38, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v115 + 8))(v118, v114);
        type metadata accessor for INSearchForAccountsIntent();
        id v34 = SAUIAppPunchOut.__allocating_init()();
        swift_bridgeObjectRelease();
        id v83 = v34;
        uint64_t v84 = v108;
      }
      else
      {
        uint64_t v33 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v83 = v33;
        uint64_t v84 = (_UNKNOWN **)v33;
      }
    }
  }
  return v83;
}

uint64_t USOParse.userDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v10 = a1;
  uint64_t v15 = 0;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v6 = *(void *)(v8 - 8);
  uint64_t v7 = v8 - 8;
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = (char *)&v4 - v5;
  uint64_t v15 = v1;
  uint64_t v2 = USOParse.userParse.getter();
  uint64_t v13 = MEMORY[0x2611B7D70](v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v8);
  swift_bridgeObjectRetain();
  uint64_t v12 = &v14;
  uint64_t v14 = v13;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #3 in Parse.toAppId()()
{
  return type metadata accessor for Parse();
}

Swift::Bool __swiftcall Parse.isFirstPartyApp()()
{
  uint64_t v36 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v51 = 0;
  uint64_t v37 = 0;
  Swift::String_optional v44 = (Swift::String_optional)0;
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  unint64_t v41 = (*(void *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v38);
  uint64_t v42 = (char *)&v9 - v41;
  uint64_t v51 = v0;
  Swift::String_optional v43 = Parse.toAppId()();
  if (v43.value._object)
  {
    Swift::String_optional v35 = v43;
    object = v43.value._object;
    uint64_t countAndFlagsBits = v43.value._countAndFlagsBits;
    Swift::String_optional v44 = v43;
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.", 0xAuLL, 1);
    unint64_t v31 = v1._object;
    BOOL v33 = String.hasPrefix(_:)(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v34 = v33;
  }
  else
  {
    uint64_t v2 = v42;
    uint64_t v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v2, v3, v38);
    uint64_t v28 = Logger.logObject.getter();
    int v27 = static os_log_type_t.debug.getter();
    unint64_t v25 = &v49;
    uint64_t v49 = 2;
    unint64_t v23 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v24 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v26 = v50;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v29 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v28, (os_log_type_t)v27))
    {
      uint64_t v4 = v37;
      uint64_t v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v12 = 0;
      uint64_t v14 = createStorage<A>(capacity:type:)(0);
      uint64_t v15 = createStorage<A>(capacity:type:)(v12);
      uint64_t v19 = &v48;
      unint64_t v48 = v13;
      uint64_t v20 = &v47;
      uint64_t v47 = v14;
      uint64_t v17 = &v46;
      uint64_t v46 = v15;
      unsigned int v16 = 0;
      serialize(_:at:)(0, &v48);
      serialize(_:at:)(v16, v19);
      uint64_t v45 = v29;
      uint64_t v18 = &v9;
      MEMORY[0x270FA5388](&v9);
      unint64_t v5 = v20;
      uint64_t v6 = &v9 - 6;
      unint64_t v21 = &v9 - 6;
      v6[2] = (uint64_t)v19;
      v6[3] = (uint64_t)v5;
      v6[4] = v7;
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v4)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v28, (os_log_type_t)v27, "#Parse isFirstPartyApp() no app ID in parse, so this is first party app by default", v13, v26);
        uint64_t v10 = 0;
        destroyStorage<A>(_:count:)(v14, 0, v11);
        destroyStorage<A>(_:count:)(v15, v10, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v13, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    int v34 = 1;
  }
  return v34 & 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.DirectInvocation.getSelectionIndex()()
{
  Swift::String_optional v43 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v60 = 0;
  Swift::Int v51 = 0;
  uint64_t v44 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = v44 - 8;
  unint64_t v47 = (*(void *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v44);
  unint64_t v48 = (char *)v11 - v47;
  uint64_t v60 = v0;
  uint64_t v49 = Parse.DirectInvocation.userData.getter();
  if (v49)
  {
    uint64_t v41 = v49;
    uint64_t v40 = v49;
    uint64_t v1 = PaymentsDirectInvocations.Keys.rawValue.getter(2);
    uint64_t v39 = v50;
    v50[0] = v1;
    v50[1] = v2;
    MEMORY[0x2611B90F0](v58);
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v58, 0, sizeof(v58));
    uint64_t v59 = 0;
  }
  if (v59)
  {
    if (swift_dynamicCast())
    {
      Swift::Int v37 = v50[2];
      int v38 = 0;
    }
    else
    {
      Swift::Int v37 = 0;
      int v38 = 1;
    }
    Swift::Int v35 = v37;
    int v36 = v38;
  }
  else
  {
    Swift::Int v32 = 0;
    outlined destroy of FlowActivity?((uint64_t)v58);
    Swift::Int v35 = v32;
    int v36 = 1;
  }
  Swift::Int v34 = v35;
  if (v36)
  {
    uint64_t v4 = v48;
    uint64_t v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v4, v5, v44);
    uint64_t v30 = Logger.logObject.getter();
    int v29 = static os_log_type_t.error.getter();
    int v27 = &v56;
    uint64_t v56 = 2;
    unint64_t v25 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v28 = v57;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v31 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v30, (os_log_type_t)v29))
    {
      uint64_t v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v14 = 0;
      uint64_t v16 = createStorage<A>(capacity:type:)(0);
      uint64_t v17 = createStorage<A>(capacity:type:)(v14);
      unint64_t v21 = &v55;
      uint64_t v55 = v15;
      uint64_t v22 = &v54;
      uint64_t v54 = v16;
      uint64_t v19 = &v53;
      uint64_t v53 = v17;
      unsigned int v18 = 0;
      serialize(_:at:)(0, &v55);
      serialize(_:at:)(v18, v21);
      uint64_t v52 = v31;
      uint64_t v20 = v11;
      MEMORY[0x270FA5388](v11);
      uint64_t v6 = v22;
      uint64_t v7 = &v11[-6];
      unint64_t v23 = &v11[-6];
      v7[2] = v21;
      v7[3] = v6;
      v7[4] = v8;
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t v9 = v42;
      Sequence.forEach(_:)();
      if (v9)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v30, (os_log_type_t)v29, "Could not find contactId in userData", v15, v28);
        uint64_t v12 = 0;
        destroyStorage<A>(_:count:)(v16, 0, v13);
        destroyStorage<A>(_:count:)(v17, v12, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v15, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    v11[3] = swift_allocError();
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 17;
    swift_willThrow();
    return v11[2];
  }
  else
  {
    Swift::Int v33 = v34;
    Swift::Int result = v34;
    Swift::Int v51 = v34;
  }
  return result;
}

uint64_t closure #1 in USOParse.preferredUserDialogAct.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1;
}

uint64_t closure #2 in USOParse.preferredUserDialogAct.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1;
}

uint64_t closure #1 in USOParse.isRequestToSummariseAppleCardInfo.getter()
{
  UsoIdentifier.value.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("apple_card", 0xAuLL, 1);
  char v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t USOParse.isRequestForAppleCardBalance.getter()
{
  uint64_t v156 = 0;
  uint64_t v146 = 0;
  uint64_t v142 = 0;
  uint64_t v140 = 0;
  uint64_t v136 = 0;
  uint64_t v134 = 0;
  uint64_t v130 = 0;
  uint64_t v122 = 0;
  uint64_t v114 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v112 = *(void *)(v114 - 8);
  uint64_t v113 = v114 - 8;
  unint64_t v101 = (*(void *)(v112 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v114);
  int v102 = (char *)&v8 - v101;
  unint64_t v103 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v101);
  uint64_t v104 = (char *)&v8 - v103;
  unint64_t v105 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v103);
  uint64_t v115 = (char *)&v8 - v105;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v109 = *(void *)(*(void *)(v3 - 8) + 64);
  unint64_t v106 = (v109 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v107 = (uint64_t)&v8 - v106;
  unint64_t v108 = (v109 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v106);
  uint64_t v110 = (uint64_t)&v8 - v108;
  unint64_t v111 = (v109 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v108);
  uint64_t v123 = (uint64_t)&v8 - v111;
  uint64_t v156 = v0;
  uint64_t v4 = USOParse.userParse.getter();
  uint64_t v121 = MEMORY[0x2611B7D70](v4);
  uint64_t v116 = *(void (**)(char *, uint64_t))(v112 + 8);
  uint64_t v117 = v112 + 8;
  v116(v115, v114);
  swift_bridgeObjectRetain();
  uint64_t v120 = &v153;
  uint64_t v153 = v121;
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  unint64_t v119 = lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v124 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v125 = *(void *)(v124 - 8);
  uint64_t v126 = v124 - 8;
  int v127 = *(unsigned int (**)(uint64_t, uint64_t))(v125 + 48);
  uint64_t v128 = v125 + 48;
  if (v127(v123, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v123);
  }
  else
  {
    uint64_t v100 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v123, v124);
    if (v100)
    {
      uint64_t v99 = v100;
      uint64_t v98 = v100;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v154, 0, sizeof(v154));
  uint64_t v155 = 0;
LABEL_6:
  if (v155)
  {
    type metadata accessor for UsoTask_request_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v97 = v129;
    }
    else {
      uint64_t v97 = 0;
    }
    uint64_t v96 = v97;
  }
  else
  {
    uint64_t v71 = 0;
    outlined destroy of FlowActivity?((uint64_t)v154);
    uint64_t v96 = v71;
  }
  uint64_t v95 = v96;
  if (!v96)
  {
LABEL_31:
    uint64_t v5 = USOParse.userParse.getter();
    uint64_t v70 = MEMORY[0x2611B7D70](v5);
    v116(v104, v114);
    swift_bridgeObjectRetain();
    Builtin::Word v69 = &v150;
    uint64_t v150 = v70;
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v127)(v110, 1, v124) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v110);
    }
    else
    {
      uint64_t v68 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v110, v124);
      if (v68)
      {
        uint64_t v67 = v68;
        uint64_t v66 = v68;
        UsoTask.eraseToAny.getter();
        swift_release();
        goto LABEL_36;
      }
    }
    memset(v151, 0, sizeof(v151));
    uint64_t v152 = 0;
LABEL_36:
    if (v152)
    {
      type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
      if (swift_dynamicCast()) {
        uint64_t v65 = v135;
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v64 = v65;
    }
    else
    {
      uint64_t v40 = 0;
      outlined destroy of FlowActivity?((uint64_t)v151);
      uint64_t v64 = v40;
    }
    uint64_t v63 = v64;
    if (v64)
    {
      uint64_t v62 = v63;
      uint64_t v60 = v63;
      uint64_t v140 = v63;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      uint64_t v61 = v139;
      swift_release();
      if (v61)
      {
        uint64_t v59 = v61;
        uint64_t v56 = v61;
        uint64_t v57 = dispatch thunk of UsoEntity_common_PaymentAccount.balance.getter();
        swift_release();
        uint64_t v58 = v57;
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v138 = v58;
      BOOL v55 = v58 != 0;
      BOOL v54 = v55;
      outlined destroy of ContiguousArray<A1>();
      if (v54)
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        uint64_t v53 = v137;
        swift_release();
        if (!v53) {
          goto LABEL_56;
        }
        uint64_t v52 = v53;
        uint64_t v50 = v53;
        uint64_t v51 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
        swift_release();
        if (v51)
        {
          uint64_t v49 = v51;
          uint64_t v46 = v51;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          uint64_t v47 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v48 = v47;
        }
        else
        {
LABEL_56:
          uint64_t v48 = 0;
        }
        uint64_t v44 = v48;
        if (v48)
        {
          uint64_t v43 = v44;
          uint64_t v41 = v44;
          uint64_t v136 = v44;
          int v42 = USOParse.isRequestForAppleCardBalanceHelper(usoIdentifiers:)();
          swift_bridgeObjectRelease();
          swift_release();
          int v74 = v42;
          return v74 & 1;
        }
      }
      swift_release();
    }
    uint64_t v6 = USOParse.userParse.getter();
    uint64_t v39 = MEMORY[0x2611B7D70](v6);
    v116(v102, v114);
    swift_bridgeObjectRetain();
    int v38 = &v147;
    uint64_t v147 = v39;
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v127)(v107, 1, v124) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v107);
    }
    else
    {
      uint64_t v37 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v107, v124);
      if (v37)
      {
        uint64_t v36 = v37;
        uint64_t v35 = v37;
        UsoTask.eraseToAny.getter();
        swift_release();
        goto LABEL_66;
      }
    }
    memset(v148, 0, sizeof(v148));
    uint64_t v149 = 0;
LABEL_66:
    if (v149)
    {
      type metadata accessor for UsoTask_summarise_common_PaymentAccount();
      if (swift_dynamicCast()) {
        uint64_t v34 = v141;
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v33 = v34;
    }
    else
    {
      uint64_t v9 = 0;
      outlined destroy of FlowActivity?((uint64_t)v148);
      uint64_t v33 = v9;
    }
    uint64_t v32 = v33;
    if (v33)
    {
      uint64_t v31 = v32;
      uint64_t v29 = v32;
      uint64_t v146 = v32;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      uint64_t v30 = v145;
      swift_release();
      if (v30)
      {
        uint64_t v28 = v30;
        uint64_t v25 = v30;
        uint64_t v26 = dispatch thunk of UsoEntity_common_PaymentAccount.balance.getter();
        swift_release();
        uint64_t v27 = v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v144 = v27;
      BOOL v24 = v27 != 0;
      BOOL v23 = v24;
      outlined destroy of ContiguousArray<A1>();
      if (v23)
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
        uint64_t v22 = v143;
        swift_release();
        if (!v22) {
          goto LABEL_86;
        }
        uint64_t v21 = v22;
        uint64_t v19 = v22;
        uint64_t v20 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
        swift_release();
        if (v20)
        {
          uint64_t v18 = v20;
          uint64_t v15 = v20;
          uint64_t v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          uint64_t v16 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v17 = v16;
        }
        else
        {
LABEL_86:
          uint64_t v17 = 0;
        }
        uint64_t v13 = v17;
        if (v17)
        {
          uint64_t v12 = v13;
          uint64_t v10 = v13;
          uint64_t v142 = v13;
          int v11 = USOParse.isRequestForAppleCardBalanceHelper(usoIdentifiers:)();
          swift_bridgeObjectRelease();
          swift_release();
          int v74 = v11;
          return v74 & 1;
        }
      }
      swift_release();
    }
    int v74 = 0;
    return v74 & 1;
  }
  uint64_t v94 = v95;
  uint64_t v92 = v95;
  uint64_t v134 = v95;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
  uint64_t v93 = v133;
  swift_release();
  if (v93)
  {
    uint64_t v91 = v93;
    uint64_t v88 = v93;
    uint64_t v89 = dispatch thunk of UsoEntity_common_PaymentAccount.balance.getter();
    swift_release();
    uint64_t v90 = v89;
  }
  else
  {
    uint64_t v90 = 0;
  }
  uint64_t v132 = v90;
  BOOL v87 = v90 != 0;
  BOOL v86 = v87;
  outlined destroy of ContiguousArray<A1>();
  if (!v86) {
    goto LABEL_25;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  uint64_t v85 = v131;
  swift_release();
  if (!v85) {
    goto LABEL_26;
  }
  uint64_t v84 = v85;
  uint64_t v82 = v85;
  uint64_t v83 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
  swift_release();
  if (v83)
  {
    uint64_t v81 = v83;
    uint64_t v78 = v83;
    uint64_t v77 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
    uint64_t v79 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v80 = v79;
  }
  else
  {
LABEL_26:
    uint64_t v80 = 0;
  }
  uint64_t v76 = v80;
  if (!v80)
  {
LABEL_25:
    swift_release();
    goto LABEL_31;
  }
  uint64_t v75 = v76;
  uint64_t v72 = v76;
  uint64_t v130 = v76;
  int v73 = USOParse.isRequestForAppleCardBalanceHelper(usoIdentifiers:)();
  swift_bridgeObjectRelease();
  swift_release();
  int v74 = v73;
  return v74 & 1;
}

uint64_t USOParse.isRequestForAppleCardBalanceHelper(usoIdentifiers:)()
{
  return Sequence.contains(where:)() & 1;
}

uint64_t closure #1 in USOParse.isRequestForAppleCardBalanceHelper(usoIdentifiers:)(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v36 = 0;
  uint64_t v32 = type metadata accessor for UsoIdentifier();
  uint64_t v28 = *(void **)(v32 - 8);
  uint64_t v29 = v32 - 8;
  unint64_t v22 = (v28[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v32);
  BOOL v23 = &v7[-v22];
  unint64_t v24 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v7[-v22]);
  uint64_t v30 = &v7[-v24];
  uint64_t v36 = a1;
  uint64_t v25 = UsoIdentifier.value.getter();
  uint64_t v27 = v3;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("apple_card", 0xAuLL, 1)._object;
  int v35 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = (void (*)(unsigned char *, uint64_t, uint64_t))v28[2];
  uint64_t v34 = v28 + 2;
  v33(v30, v31, v32);
  if (v35)
  {
    int v21 = 1;
  }
  else
  {
    uint64_t v17 = UsoIdentifier.value.getter();
    uint64_t v19 = v4;
    uint64_t v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Apple Card", 0xAuLL, 1)._object;
    int v20 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v21 = v20;
  }
  int v16 = v21;
  uint64_t v14 = (void (*)(unsigned char *, uint64_t))v28[1];
  uint64_t v15 = v28 + 1;
  v14(v30, v32);
  v33(v23, v31, v32);
  if (v16)
  {
    int v13 = 1;
  }
  else
  {
    uint64_t v9 = UsoIdentifier.value.getter();
    uint64_t v11 = v5;
    uint64_t v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("generic_card", 0xCuLL, 1)._object;
    int v12 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v13 = v12;
  }
  int v8 = v13;
  v14(v23, v32);
  return v8 & 1;
}

uint64_t USOParse.isRequestForAppleSavings.getter()
{
  uint64_t v154 = 0;
  uint64_t v144 = 0;
  uint64_t v142 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v138 = 0;
  uint64_t v136 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  uint64_t v132 = 0;
  uint64_t v130 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v120 = 0;
  uint64_t v112 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v110 = *(void *)(v112 - 8);
  uint64_t v111 = v112 - 8;
  unint64_t v99 = (*(void *)(v110 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v112);
  uint64_t v100 = (char *)v14 - v99;
  unint64_t v101 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v14 - v99);
  int v102 = (char *)v14 - v101;
  unint64_t v103 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v14 - v101);
  uint64_t v113 = (char *)v14 - v103;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v107 = *(void *)(*(void *)(v3 - 8) + 64);
  unint64_t v104 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v105 = (uint64_t)v14 - v104;
  unint64_t v106 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v14 - v104);
  uint64_t v108 = (uint64_t)v14 - v106;
  unint64_t v109 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v14 - v106);
  uint64_t v121 = (uint64_t)v14 - v109;
  uint64_t v154 = v0;
  uint64_t v4 = USOParse.userParse.getter();
  uint64_t v119 = MEMORY[0x2611B7D70](v4);
  uint64_t v114 = *(void (**)(char *, uint64_t))(v110 + 8);
  uint64_t v115 = v110 + 8;
  v114(v113, v112);
  swift_bridgeObjectRetain();
  uint64_t v118 = &v151;
  uint64_t v151 = v119;
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  unint64_t v117 = lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v122 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v123 = *(void *)(v122 - 8);
  uint64_t v124 = v122 - 8;
  uint64_t v125 = *(unsigned int (**)(uint64_t, uint64_t))(v123 + 48);
  uint64_t v126 = v123 + 48;
  if (v125(v121, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v121);
  }
  else
  {
    uint64_t v98 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v121, v122);
    if (v98)
    {
      uint64_t v97 = v98;
      uint64_t v96 = v98;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_6;
    }
  }
  memset(v152, 0, sizeof(v152));
  uint64_t v153 = 0;
LABEL_6:
  if (v153)
  {
    type metadata accessor for UsoTask_request_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v95 = v127;
    }
    else {
      uint64_t v95 = 0;
    }
    uint64_t v94 = v95;
  }
  else
  {
    uint64_t v71 = 0;
    outlined destroy of FlowActivity?((uint64_t)v152);
    uint64_t v94 = v71;
  }
  uint64_t v93 = v94;
  if (v94)
  {
    uint64_t v92 = v93;
    uint64_t v90 = v93;
    uint64_t v132 = v93;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
    uint64_t v91 = v131;
    if (v131)
    {
      uint64_t v89 = v91;
      uint64_t v86 = v91;
      uint64_t v130 = v91;
      swift_release();
      uint64_t v87 = dispatch thunk of UsoEntity_common_PaymentAccount.name.getter();
      uint64_t v88 = v5;
      if (v5)
      {
        uint64_t v84 = v87;
        uint64_t v85 = v88;
        uint64_t v81 = v88;
        uint64_t v82 = v87;
        uint64_t v128 = v87;
        uint64_t v129 = v88;
        uint64_t v83 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
        if (v83)
        {
          uint64_t v80 = v83;
          uint64_t v75 = v83;
          uint64_t v76 = dispatch thunk of UsoEntity_common_PaymentAccountType.name.getter();
          uint64_t v77 = v6;
          swift_release();
          uint64_t v78 = v76;
          uint64_t v79 = v77;
        }
        else
        {
          uint64_t v78 = 0;
          uint64_t v79 = 0;
        }
        uint64_t v72 = v79;
        int v73 = USOParse.isRequestForAppleSavingsHelper(name:accountName:)(v82, v81, v78, v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v74 = v73;
        return v74 & 1;
      }
    }
    swift_release();
    swift_release();
  }
  uint64_t v7 = USOParse.userParse.getter();
  uint64_t v70 = MEMORY[0x2611B7D70](v7);
  v114(v102, v112);
  swift_bridgeObjectRetain();
  Builtin::Word v69 = &v148;
  uint64_t v148 = v70;
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v125)(v108, 1, v122) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v108);
  }
  else
  {
    uint64_t v68 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v108, v122);
    if (v68)
    {
      uint64_t v67 = v68;
      uint64_t v66 = v68;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_31;
    }
  }
  memset(v149, 0, sizeof(v149));
  uint64_t v150 = 0;
LABEL_31:
  if (v150)
  {
    type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v65 = v133;
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v64 = v65;
  }
  else
  {
    uint64_t v42 = 0;
    outlined destroy of FlowActivity?((uint64_t)v149);
    uint64_t v64 = v42;
  }
  uint64_t v63 = v64;
  if (v64)
  {
    uint64_t v62 = v63;
    uint64_t v60 = v63;
    uint64_t v138 = v63;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    uint64_t v61 = v137;
    if (v137)
    {
      uint64_t v59 = v61;
      uint64_t v56 = v61;
      uint64_t v136 = v61;
      swift_release();
      uint64_t v57 = dispatch thunk of UsoEntity_common_PaymentAccount.name.getter();
      uint64_t v58 = v8;
      if (v8)
      {
        uint64_t v54 = v57;
        uint64_t v55 = v58;
        uint64_t v51 = v58;
        uint64_t v52 = v57;
        uint64_t v134 = v57;
        uint64_t v135 = v58;
        uint64_t v53 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
        if (v53)
        {
          uint64_t v50 = v53;
          uint64_t v45 = v53;
          uint64_t v46 = dispatch thunk of UsoEntity_common_PaymentAccountType.name.getter();
          uint64_t v47 = v9;
          swift_release();
          uint64_t v48 = v46;
          uint64_t v49 = v47;
        }
        else
        {
          uint64_t v48 = 0;
          uint64_t v49 = 0;
        }
        uint64_t v43 = v49;
        int v44 = USOParse.isRequestForAppleSavingsHelper(name:accountName:)(v52, v51, v48, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v74 = v44;
        return v74 & 1;
      }
    }
    swift_release();
    swift_release();
  }
  uint64_t v10 = USOParse.userParse.getter();
  uint64_t v41 = MEMORY[0x2611B7D70](v10);
  v114(v100, v112);
  swift_bridgeObjectRetain();
  uint64_t v40 = &v145;
  uint64_t v145 = v41;
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v125)(v105, 1, v122) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v105);
  }
  else
  {
    uint64_t v39 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v105, v122);
    if (v39)
    {
      uint64_t v38 = v39;
      uint64_t v37 = v39;
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_56;
    }
  }
  memset(v146, 0, sizeof(v146));
  uint64_t v147 = 0;
LABEL_56:
  if (v147)
  {
    type metadata accessor for UsoTask_summarise_common_PaymentAccount();
    if (swift_dynamicCast()) {
      uint64_t v36 = v139;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v35 = v36;
  }
  else
  {
    v14[0] = 0;
    outlined destroy of FlowActivity?((uint64_t)v146);
    uint64_t v35 = v14[0];
  }
  uint64_t v34 = v35;
  if (!v35) {
    goto LABEL_76;
  }
  uint64_t v33 = v34;
  uint64_t v31 = v34;
  uint64_t v144 = v34;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  uint64_t v32 = v143;
  if (!v143
    || (uint64_t v30 = v32,
        uint64_t v27 = v32,
        uint64_t v142 = v32,
        swift_release(),
        uint64_t v28 = dispatch thunk of UsoEntity_common_PaymentAccount.name.getter(),
        uint64_t v29 = v11,
        !v11))
  {
    swift_release();
    swift_release();
LABEL_76:
    int v74 = 0;
    return v74 & 1;
  }
  uint64_t v25 = v28;
  uint64_t v26 = v29;
  uint64_t v22 = v29;
  uint64_t v23 = v28;
  uint64_t v140 = v28;
  uint64_t v141 = v29;
  uint64_t v24 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter();
  if (v24)
  {
    uint64_t v21 = v24;
    uint64_t v16 = v24;
    uint64_t v17 = dispatch thunk of UsoEntity_common_PaymentAccountType.name.getter();
    uint64_t v18 = v12;
    swift_release();
    uint64_t v19 = v17;
    uint64_t v20 = v18;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  v14[1] = v20;
  int v15 = USOParse.isRequestForAppleSavingsHelper(name:accountName:)(v23, v22, v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v74 = v15;
  return v74 & 1;
}

uint64_t USOParse.isRequestForAppleSavingsHelper(name:accountName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = 0;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  Swift::String v21 = String.lowercased()();
  Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("apple savings", 0xDuLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  char v14 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v14 & 1) == 0)
  {
    Swift::String v19 = String.lowercased()();
    Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("apple", 5uLL, 1);
    char v11 = StringProtocol.contains<A>(_:)();
    outlined destroy of String.UTF8View();
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRetain();
    if ((v11 & 1) == 0)
    {
      char v10 = 0;
LABEL_15:
      swift_bridgeObjectRelease();
      char v12 = v10;
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    if (a4)
    {
      Swift::String v4 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v9 = v4;
    }
    else
    {
      v9._uint64_t countAndFlagsBits = 0;
      v9._object = 0;
    }
    swift_bridgeObjectRetain();
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("savings account", 0xFuLL, 1);
    swift_bridgeObjectRetain();
    Swift::String v16 = v9;
    Swift::String v17 = v5;
    if (v9._object)
    {
      outlined init with copy of String(&v16, &v15);
      if (v17._object)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v7 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of String.UTF8View();
        char v8 = v7;
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v10 = v8;
        goto LABEL_15;
      }
      outlined destroy of String.UTF8View();
    }
    else if (!v17._object)
    {
      outlined destroy of String.UTF8View();
      char v8 = 1;
      goto LABEL_14;
    }
    outlined destroy of DIIdentifier();
    char v8 = 0;
    goto LABEL_14;
  }
  char v12 = 1;
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_25D970420()
{
  return swift_deallocObject();
}

uint64_t sub_25D97044C()
{
  return swift_deallocObject();
}

uint64_t sub_25D970478()
{
  return swift_deallocObject();
}

uint64_t sub_25D9704B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9704F8()
{
  uint64_t v2 = *(void *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for USOParse() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #2 in Parse.confirmationResponse.getter(v2);
}

uint64_t sub_25D97062C()
{
  return swift_deallocObject();
}

uint64_t sub_25D970658()
{
  return swift_deallocObject();
}

uint64_t sub_25D970684()
{
  return swift_deallocObject();
}

uint64_t sub_25D9706C4()
{
  return swift_deallocObject();
}

uint64_t sub_25D970704()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9707D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9707FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D970828()
{
  return swift_deallocObject();
}

uint64_t sub_25D970868()
{
  return swift_deallocObject();
}

uint64_t sub_25D9708A8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in Parse.confirmationResponse.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #4 in Parse.confirmationResponse.getter(v2);
}

uint64_t sub_25D9709DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D970A08()
{
  return swift_deallocObject();
}

uint64_t sub_25D970A34()
{
  return swift_deallocObject();
}

uint64_t sub_25D970A74()
{
  return swift_deallocObject();
}

uint64_t sub_25D970AB4()
{
  uint64_t v2 = *(void *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D970B80()
{
  return swift_deallocObject();
}

uint64_t sub_25D970BAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D970BD8()
{
  return swift_deallocObject();
}

uint64_t sub_25D970C18()
{
  return swift_deallocObject();
}

uint64_t sub_25D970C58()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D970D24()
{
  return swift_deallocObject();
}

uint64_t sub_25D970D50()
{
  return swift_deallocObject();
}

uint64_t sub_25D970D7C()
{
  return swift_deallocObject();
}

uint64_t sub_25D970DBC()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    *(void *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t sub_25D970E94()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Parse.confirmationResponse.getter()
{
  return implicit closure #1 in Parse.confirmationResponse.getter();
}

uint64_t sub_25D970EDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D970F08()
{
  return swift_deallocObject();
}

uint64_t sub_25D970F34()
{
  return swift_deallocObject();
}

uint64_t sub_25D970F74()
{
  return swift_deallocObject();
}

uint64_t sub_25D970FB4()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in Parse.toAppId()()
{
  type metadata accessor for Parse();

  return implicit closure #3 in Parse.toAppId()();
}

uint64_t sub_25D9710E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D971114()
{
  return swift_deallocObject();
}

uint64_t sub_25D971140()
{
  return swift_deallocObject();
}

uint64_t sub_25D971180()
{
  return swift_deallocObject();
}

uint64_t sub_25D9711C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D971200()
{
  return swift_deallocObject();
}

uint64_t sub_25D97122C()
{
  return swift_deallocObject();
}

uint64_t sub_25D971258()
{
  return swift_deallocObject();
}

uint64_t sub_25D971298()
{
  return swift_deallocObject();
}

uint64_t sub_25D9712D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D971318()
{
  return swift_deallocObject();
}

uint64_t sub_25D971344()
{
  return swift_deallocObject();
}

uint64_t sub_25D971370()
{
  return swift_deallocObject();
}

uint64_t sub_25D9713B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9713F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9714BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9714E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D971514()
{
  return swift_deallocObject();
}

uint64_t sub_25D971554()
{
  return swift_deallocObject();
}

uint64_t sub_25D971594()
{
  return swift_deallocObject();
}

uint64_t sub_25D9715D4()
{
  uint64_t v2 = *(void *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9716A0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9716CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9716F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D971738()
{
  return swift_deallocObject();
}

uint64_t sub_25D971778()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D971844()
{
  return swift_deallocObject();
}

uint64_t sub_25D971870()
{
  return swift_deallocObject();
}

uint64_t sub_25D97189C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9718DC()
{
  return swift_deallocObject();
}

uint64_t App.sirikitApp.getter()
{
  uint64_t v29 = closure #1 in App.sirikitApp.getter;
  uint64_t v30 = (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  id v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  uint64_t v40 = v0;
  uint64_t v32 = App.appIdentifier.getter();
  uint64_t v33 = v1;
  if (!v1) {
    return 0;
  }
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  uint64_t v24 = v33;
  uint64_t v25 = v32;
  uint64_t v38 = v32;
  uint64_t v39 = v33;
  id v26 = (id)static SAAppInfoFactory.createAppInfo(app:)();
  if (!v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v23 = v26;
  id v21 = v26;
  id v37 = v26;
  uint64_t v20 = type metadata accessor for SirikitLocalizedAppName();
  uint64_t v36 = Array.init()();
  id v22 = objc_msgSend(v26, sel_appNameMap);
  if (v22)
  {
    id v19 = v22;
    id v16 = v22;
    uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v15 = v18;
  if (v18)
  {
    uint64_t v14 = v15;
    uint64_t v8 = v15;
    uint64_t v35 = v15;
    uint64_t v34 = v15;
    Swift::String v9 = v5;
    MEMORY[0x270FA5388](v5);
    char v10 = v4;
    v4[2] = v29;
    v4[3] = 0;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    unint64_t v2 = lazy protocol witness table accessor for type [String : String] and conformance [A : B]();
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v30, (uint64_t)v10, v11, v20, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v12);
    uint64_t v36 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5[0] = 0;
  type metadata accessor for SirikitApp.Builder();
  v5[1] = SirikitApp.Builder.__allocating_init()();
  v5[3] = dispatch thunk of SirikitApp.Builder.withAppId(print:speak:)();
  swift_release();
  v5[5] = &v36;
  v5[2] = v36;
  swift_bridgeObjectRetain();
  v5[4] = dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = dispatch thunk of SirikitApp.Builder.build()();
  swift_release();
  outlined destroy of [SFCardSection]();

  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static AppUtil.walletApp.getter()
{
  return App.__allocating_init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
}

id static AppUtil.buildPunchout(for:locale:)()
{
  type metadata accessor for SAUIAppPunchOut();
  id v9 = SAUIAppPunchOut.__allocating_init()();
  uint64_t v10 = App.appIdentifier.getter();
  if (v0)
  {
    uint64_t v7 = MEMORY[0x2611B9130](v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_msgSend(v9, sel_setBundleId_);

  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  uint64_t v5 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v6 = v1;
  swift_release();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v3 = MEMORY[0x2611B9130](v5);
    swift_bridgeObjectRelease();
    Swift::String v4 = (void *)v3;
  }
  else
  {
    Swift::String v4 = 0;
  }
  objc_msgSend(v9, sel_setAppDisplayName_);

  swift_bridgeObjectRelease();
  return v9;
}

BOOL App.isFirstParty.getter()
{
  App.appIdentifier.getter();
  uint64_t v7 = v0;
  swift_retain();
  if (!v7)
  {
    App.systemExtensionBundleId.getter();
    uint64_t v6 = v1;
    swift_retain();
    if (!v6)
    {
      App.pluginIdentifier.getter();
      if (!v2)
      {
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        outlined destroy of String.UTF8View();
      }
      outlined destroy of String.UTF8View();
    }
    swift_release();
    outlined destroy of String.UTF8View();
  }
  swift_release();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.", 0xAuLL, 1);
  Swift::Bool v5 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Bool __swiftcall App.supportsIntent(intentName:)(Swift::String intentName)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  Swift::String v18 = intentName;
  uint64_t v17 = v1;
  uint64_t v10 = App.appIdentifier.getter();
  uint64_t v11 = v2;
  if (v2)
  {
    uint64_t v15 = v10;
    uint64_t v16 = v2;
    Swift::String v4 = AppUtil.intentSupportResolver.unsafeMutableAddressor();
    swift_beginAccess();
    outlined init with copy of GlobalsProviding((uint64_t)v4, (uint64_t)v12);
    swift_endAccess();
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v6 + 8))(v10, v11, intentName._countAndFlagsBits, intentName._object, v5);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    char v8 = v7;
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v55 = a3;
  uint64_t v45 = a4;
  uint64_t v32 = a5;
  uint64_t v54 = a6;
  uint64_t v34 = a8;
  uint64_t v35 = "Fatal error";
  uint64_t v36 = "Index out of bounds";
  id v37 = "Swift/Collection.swift";
  uint64_t v38 = "Range requires lowerBound <= upperBound";
  uint64_t v39 = "Swift/Range.swift";
  uint64_t v40 = "Index out of range";
  uint64_t v70 = a3;
  uint64_t v69 = a4;
  uint64_t v68 = a5;
  uint64_t v41 = *(void *)(a5 - 8);
  uint64_t v42 = a5 - 8;
  unint64_t v43 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  int v44 = (char *)&v15 - v43;
  uint64_t v46 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v49 = AssociatedTypeWitness - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v46);
  uint64_t v51 = (char *)&v15 - v50;
  unint64_t v52 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v15 - v52;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v56 - 8;
  unint64_t v59 = (*(void *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v55);
  uint64_t v60 = (char *)&v15 - v59;
  unint64_t v61 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (char *)&v15 - v61;
  Swift::Int v63 = dispatch thunk of Collection.count.getter();
  if (v63)
  {
    uint64_t v67 = Array.init()();
    uint64_t v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v63);
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (v63 >= 0)
    {
      uint64_t v27 = 0;
      for (uint64_t i = v33; ; uint64_t i = v18)
      {
        uint64_t v25 = i;
        uint64_t v26 = v27;
        if (v27 == v63) {
          goto LABEL_17;
        }
        if (v26 < 0 || v26 >= v63) {
          goto LABEL_16;
        }
        uint64_t v65 = v26;
        if (v63 < 0) {
          goto LABEL_15;
        }
        if (v26 >= v63) {
          break;
        }
        uint64_t v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        char v66 = 0;
        uint64_t v23 = v24;
LABEL_18:
        uint64_t v22 = v23;
        if (v66)
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v60, v62, v56);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
          uint64_t v19 = v67;
          swift_retain();
          swift_release();
          uint64_t v20 = v19;
          uint64_t v21 = v25;
          return v20;
        }
        uint64_t v17 = &v64;
        uint64_t v16 = (void (*)(void))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v48 + 16))(v51);
        v16();
        uint64_t v14 = v25;
        v30(v51, v44);
        uint64_t v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v62, v56);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v44, v32);
          return v15;
        }
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        uint64_t result = v18;
        uint64_t v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      uint64_t v65 = 0;
      char v66 = 1;
      uint64_t v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v20 = static Array._allocateUninitialized(_:)();
  uint64_t v21 = v33;
  return v20;
}

long long *AppUtil.usoContactsBundleId.unsafeMutableAddressor()
{
  if (one-time initialization token for usoContactsBundleId != -1) {
    swift_once();
  }
  return &static AppUtil.usoContactsBundleId;
}

long long *AppUtil.usoNamespace.unsafeMutableAddressor()
{
  if (one-time initialization token for usoNamespace != -1) {
    swift_once();
  }
  return &static AppUtil.usoNamespace;
}

NSJSONWritingOptions App.toAppDescription(deviceState:)(void *a1)
{
  Swift::UInt v5 = App.getAppName(deviceState:)(a1);
  if (!v1) {
    return 0;
  }
  App.appIdentifier.getter();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return NSJSONWritingOptions.init(rawValue:)(v5);
}

uint64_t one-time initialization function for PASSBOOK_EXTENSION_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsExtension", 0x29uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_EXTENSION_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID;
}

uint64_t static AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.getter()
{
  uint64_t v1 = *(void *)AppUtil.PASSBOOK_EXTENSION_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for PASSBOOK_UI_EXTENSION_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsUIExtension", 0x2BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_UI_EXTENSION_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.PASSBOOK_UI_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for MESSAGES_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.MESSAGES_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.MESSAGES_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for MESSAGES_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.MESSAGES_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSBOOK_IOS_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Passbook", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_IOS_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSBOOK_WATCH_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoPassbook", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSBOOK_WATCH_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.PASSBOOK_WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for CONTACTS_IOS_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileAddressBook", 0x1BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.CONTACTS_IOS_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.CONTACTS_IOS_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for CONTACTS_IOS_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.CONTACTS_IOS_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for CONTACTS_WATCH_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoContacts", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for CONTACTS_WATCH_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static AppUtil.CONTACTS_WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for internalWatchAppSuffix()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SIRI_INTERNAL_WATCHAPP", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.internalWatchAppSuffix = (__int128)v1;
  return result;
}

long long *AppUtil.internalWatchAppSuffix.unsafeMutableAddressor()
{
  if (one-time initialization token for internalWatchAppSuffix != -1) {
    swift_once();
  }
  return &static AppUtil.internalWatchAppSuffix;
}

uint64_t one-time initialization function for launchIdPrefix()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("x-apple-siri-app://", 0x13uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.launchIdPrefix = (__int128)v1;
  return result;
}

long long *AppUtil.launchIdPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for launchIdPrefix != -1) {
    swift_once();
  }
  return &static AppUtil.launchIdPrefix;
}

NSJSONWritingOptions one-time initialization function for intentSupportResolver(Swift::UInt a1)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(a1);
  qword_26A69EB90 = (uint64_t)&type metadata for LSApplicationIntentSupportResolver;
  qword_26A69EB98 = (uint64_t)&protocol witness table for LSApplicationIntentSupportResolver;
  return result;
}

void *AppUtil.intentSupportResolver.unsafeMutableAddressor()
{
  if (one-time initialization token for intentSupportResolver != -1) {
    swift_once();
  }
  return &static AppUtil.intentSupportResolver;
}

uint64_t one-time initialization function for usoAppBundleId()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Applications", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.usoAppBundleId = (__int128)v1;
  return result;
}

long long *AppUtil.usoAppBundleId.unsafeMutableAddressor()
{
  if (one-time initialization token for usoAppBundleId != -1) {
    swift_once();
  }
  return &static AppUtil.usoAppBundleId;
}

uint64_t one-time initialization function for usoContactsBundleId()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Contacts", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.usoContactsBundleId = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for usoNamespace()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("item_id", 7uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static AppUtil.usoNamespace = (__int128)v1;
  return result;
}

uint64_t static AppUtil.CONTACTS_APP_BUNDLE_ID.getter()
{
  uint64_t v1 = *(void *)AppUtil.CONTACTS_IOS_APP_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static AppUtil.PASSBOOK_APP_BUNDLE_ID.getter()
{
  uint64_t v1 = *(void *)AppUtil.PASSBOOK_IOS_APP_BUNDLE_ID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Bool __swiftcall LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(Swift::String appBundleId, Swift::String intentName)
{
  Swift::String v186 = appBundleId;
  Swift::String v187 = intentName;
  uint64_t v188 = &LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:);
  uint64_t v189 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  uint64_t v190 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  int v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unsigned int v194 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  uint64_t v195 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unsigned int v198 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v199 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  uint64_t v200 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v201 = partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:);
  uint64_t v202 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Swift::String v236 = (Swift::String)0;
  uint64_t countAndFlagsBits = 0;
  uint64_t v235 = 0;
  id v231 = 0;
  unint64_t v209 = 0;
  id v230 = 0;
  id v217 = 0;
  FunctionReplacement = (uint64_t (*)(uint64_t, void *, uint64_t, void *))swift_getFunctionReplacement();
  if (FunctionReplacement)
  {
    return FunctionReplacement(v186._countAndFlagsBits, v186._object, v187._countAndFlagsBits, v187._object);
  }
  else
  {
    uint64_t v165 = type metadata accessor for Logger();
    uint64_t v163 = *(void **)(v165 - 8);
    uint64_t v164 = v165 - 8;
    uint64_t v159 = v163[8];
    uint64_t v154 = v73;
    unint64_t v155 = (v159 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x270FA5388](v73);
    uint64_t v156 = (char *)v73 - v155;
    uint64_t v157 = v73;
    unint64_t v158 = (v159 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x270FA5388](v73);
    uint64_t v160 = (char *)v73 - v158;
    uint64_t v161 = v73;
    MEMORY[0x270FA5388](v73);
    Swift::String v4 = (char *)v73 - v3;
    uint64_t v162 = (char *)v73 - v3;
    Swift::String v236 = v186;
    uint64_t countAndFlagsBits = v187._countAndFlagsBits;
    uint64_t v235 = v5;
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    uint64_t v166 = (void (*)(char *, uint64_t, uint64_t))v163[2];
    uint64_t v167 = v163 + 2;
    v166(v4, v6, v165);
    swift_bridgeObjectRetain();
    uint64_t v174 = 32;
    uint64_t v175 = 7;
    uint64_t v7 = swift_allocObject();
    object = v186._object;
    uint64_t v176 = v7;
    *(void *)(v7 + 16) = v186._countAndFlagsBits;
    *(void *)(v7 + 24) = object;
    uint64_t v184 = Logger.logObject.getter();
    int v185 = static os_log_type_t.debug.getter();
    uint64_t v170 = &v232;
    uint64_t v232 = 12;
    unint64_t v168 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v169 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v171 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v172 = v233;
    uint64_t v173 = 17;
    uint64_t v178 = swift_allocObject();
    *(unsigned char *)(v178 + 16) = 32;
    uint64_t v179 = swift_allocObject();
    *(unsigned char *)(v179 + 16) = 8;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v176;
    uint64_t v177 = v9;
    *(void *)(v9 + 16) = v189;
    *(void *)(v9 + 24) = v10;
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v177;
    uint64_t v181 = v11;
    *(void *)(v11 + 16) = v190;
    *(void *)(v11 + 24) = v12;
    uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v180 = _allocateUninitializedArray<A>(_:)();
    uint64_t v182 = v13;
    swift_retain();
    uint64_t v14 = v178;
    uint64_t v15 = v182;
    void *v182 = v191;
    v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
    swift_retain();
    uint64_t v16 = v179;
    uint64_t v17 = v182;
    v182[2] = v192;
    v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
    swift_retain();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v181;
    uint64_t v19 = v182;
    v182[4] = v193;
    v19[5] = v18;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v184, (os_log_type_t)v185))
    {
      uint64_t v20 = v209;
      uint64_t v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v148 = createStorage<A>(capacity:type:)(0);
      uint64_t v149 = createStorage<A>(capacity:type:)(1);
      uint64_t v150 = &v215;
      uint64_t v215 = v147;
      uint64_t v151 = &v214;
      uint64_t v214 = v148;
      uint64_t v152 = &v213;
      uint64_t v213 = v149;
      serialize(_:at:)(2, &v215);
      serialize(_:at:)(1, v150);
      uint64_t v211 = v191;
      uint64_t v212 = v178;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
      uint64_t v153 = v20;
      if (v20)
      {
        __break(1u);
      }
      else
      {
        uint64_t v211 = v192;
        uint64_t v212 = v179;
        closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
        uint64_t v144 = 0;
        uint64_t v22 = v144;
        uint64_t v211 = v193;
        uint64_t v212 = v181;
        closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
        uint64_t v143 = v22;
        _os_log_impl(&dword_25D85A000, v184, (os_log_type_t)v185, "LSApplicationProxyIntentSupportResolver# Looking up %s", v147, v172);
        destroyStorage<A>(_:count:)(v148, 0, v146);
        destroyStorage<A>(_:count:)(v149, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v147, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v145 = v143;
      }
    }
    else
    {
      uint64_t v21 = v209;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v145 = v21;
    }
    uint64_t v23 = v145;

    uint64_t v138 = (void (*)(char *, uint64_t))v163[1];
    uint64_t v139 = v163 + 1;
    v138(v162, v165);
    type metadata accessor for LSApplicationRecord();
    swift_bridgeObjectRetain();
    id v24 = LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v186._countAndFlagsBits, (uint64_t)v186._object, 0);
    uint64_t v140 = v23;
    id v141 = v24;
    id v142 = v23;
    if (v23)
    {
      uint64_t v42 = v156;
      id v85 = v142;
      uint64_t v84 = 0;
      id v43 = v142;
      id v230 = v85;
      uint64_t v44 = Logger.payments.unsafeMutableAddressor();
      v166(v42, v44, v165);
      swift_bridgeObjectRetain();
      uint64_t v92 = 32;
      uint64_t v93 = 7;
      uint64_t v45 = swift_allocObject();
      uint64_t v46 = v186._object;
      uint64_t v47 = v45;
      id v48 = v85;
      uint64_t v87 = v47;
      *(void *)(v47 + 16) = v186._countAndFlagsBits;
      *(void *)(v47 + 24) = v46;
      id v49 = v48;
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = v85;
      unint64_t v104 = Logger.logObject.getter();
      int v105 = static os_log_type_t.error.getter();
      v228[1] = (unsigned char *)22;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v86 = v229;
      uint64_t v90 = 17;
      uint64_t v96 = swift_allocObject();
      int v89 = 32;
      *(unsigned char *)(v96 + 16) = 32;
      uint64_t v97 = swift_allocObject();
      int v91 = 8;
      *(unsigned char *)(v97 + 16) = 8;
      uint64_t v50 = swift_allocObject();
      uint64_t v51 = v87;
      uint64_t v88 = v50;
      *(void *)(v50 + 16) = v199;
      *(void *)(v50 + 24) = v51;
      uint64_t v52 = swift_allocObject();
      uint64_t v53 = v88;
      uint64_t v98 = v52;
      *(void *)(v52 + 16) = v200;
      *(void *)(v52 + 24) = v53;
      uint64_t v99 = swift_allocObject();
      *(unsigned char *)(v99 + 16) = v89;
      uint64_t v100 = swift_allocObject();
      *(unsigned char *)(v100 + 16) = v91;
      uint64_t v54 = swift_allocObject();
      uint64_t v55 = v94;
      uint64_t v95 = v54;
      *(void *)(v54 + 16) = v201;
      *(void *)(v54 + 24) = v55;
      uint64_t v56 = swift_allocObject();
      uint64_t v57 = v95;
      uint64_t v102 = v56;
      *(void *)(v56 + 16) = v202;
      *(void *)(v56 + 24) = v57;
      uint64_t v101 = _allocateUninitializedArray<A>(_:)();
      unint64_t v103 = v58;
      swift_retain();
      uint64_t v59 = v96;
      uint64_t v60 = v103;
      *unint64_t v103 = v203;
      v60[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
      swift_retain();
      uint64_t v61 = v97;
      uint64_t v62 = v103;
      v103[2] = v204;
      v62[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v61;
      swift_retain();
      Swift::Int v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
      char v64 = v103;
      v103[4] = v205;
      v64[5] = v63;
      swift_retain();
      uint64_t v65 = v99;
      char v66 = v103;
      v103[6] = v206;
      v66[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
      swift_retain();
      uint64_t v67 = v100;
      uint64_t v68 = v103;
      v103[8] = v207;
      v68[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
      swift_retain();
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
      uint64_t v70 = v103;
      v103[10] = v208;
      v70[11] = v69;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v104, (os_log_type_t)v105))
      {
        uint64_t v71 = v84;
        uint64_t v76 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v77 = createStorage<A>(capacity:type:)(0);
        uint64_t v78 = createStorage<A>(capacity:type:)(2);
        uint64_t v80 = v228;
        v228[0] = v76;
        uint64_t v81 = &v227;
        uint64_t v227 = v77;
        uint64_t v82 = &v226;
        uint64_t v226 = v78;
        unsigned int v79 = 2;
        serialize(_:at:)(2, v228);
        serialize(_:at:)(v79, v80);
        unint64_t v224 = v203;
        uint64_t v225 = v96;
        closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82);
        uint64_t v83 = v71;
        if (v71)
        {
          __break(1u);
        }
        else
        {
          unint64_t v224 = v204;
          uint64_t v225 = v97;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          uint64_t v74 = 0;
          uint64_t v72 = v74;
          unint64_t v224 = v205;
          uint64_t v225 = v98;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          v73[2] = v72;
          unint64_t v224 = v206;
          uint64_t v225 = v99;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          v73[1] = 0;
          unint64_t v224 = v207;
          uint64_t v225 = v100;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          v73[0] = 0;
          unint64_t v224 = v208;
          uint64_t v225 = v102;
          closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)v228, (uint64_t)&v227, (uint64_t)&v226);
          _os_log_impl(&dword_25D85A000, v104, (os_log_type_t)v105, "LSApplicationProxyIntentSupportResolver# Unable to get LSApplicationRecord for %s: %s", v76, v86);
          destroyStorage<A>(_:count:)(v77, 0, v75);
          destroyStorage<A>(_:count:)(v78, 2, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v76, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }

      v138(v156, v165);
      int v134 = 0;
    }
    else
    {
      uint64_t v136 = v141;
      id v25 = v141;
      id v231 = v136;
      type metadata accessor for INAppInfo();
      id v137 = @nonobjc INAppInfo.__allocating_init(applicationRecord:)(v136);
      if (v137)
      {
        id v135 = v137;
        id v132 = v137;
        id v217 = v137;
        id v131 = objc_msgSend(v137, sel_supportedIntents);
        uint64_t v128 = MEMORY[0x263F8D310];
        uint64_t v129 = MEMORY[0x263F8D320];
        uint64_t v130 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v216 = v187;
        int v133 = Set.contains(_:)();
        swift_bridgeObjectRelease();

        int v134 = v133;
      }
      else
      {
        uint64_t v26 = v160;
        uint64_t v27 = Logger.payments.unsafeMutableAddressor();
        v166(v26, v27, v165);
        swift_bridgeObjectRetain();
        uint64_t v117 = 32;
        uint64_t v118 = 7;
        uint64_t v28 = swift_allocObject();
        uint64_t v29 = v186._object;
        uint64_t v119 = v28;
        *(void *)(v28 + 16) = v186._countAndFlagsBits;
        *(void *)(v28 + 24) = v29;
        uint64_t v126 = Logger.logObject.getter();
        int v127 = static os_log_type_t.error.getter();
        v222[1] = (unsigned char *)12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v115 = v223;
        uint64_t v116 = 17;
        uint64_t v121 = swift_allocObject();
        *(unsigned char *)(v121 + 16) = 32;
        uint64_t v122 = swift_allocObject();
        *(unsigned char *)(v122 + 16) = 8;
        uint64_t v30 = swift_allocObject();
        uint64_t v31 = v119;
        uint64_t v120 = v30;
        *(void *)(v30 + 16) = v194;
        *(void *)(v30 + 24) = v31;
        uint64_t v32 = swift_allocObject();
        uint64_t v33 = v120;
        uint64_t v124 = v32;
        *(void *)(v32 + 16) = v195;
        *(void *)(v32 + 24) = v33;
        uint64_t v123 = _allocateUninitializedArray<A>(_:)();
        uint64_t v125 = v34;
        swift_retain();
        uint64_t v35 = v121;
        uint64_t v36 = v125;
        *uint64_t v125 = v196;
        v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
        swift_retain();
        uint64_t v37 = v122;
        uint64_t v38 = v125;
        v125[2] = v197;
        v38[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
        swift_retain();
        uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v124;
        uint64_t v40 = v125;
        v125[4] = v198;
        v40[5] = v39;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v126, (os_log_type_t)v127))
        {
          uint64_t v41 = v140;
          uint64_t v108 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v109 = createStorage<A>(capacity:type:)(0);
          uint64_t v110 = createStorage<A>(capacity:type:)(1);
          uint64_t v111 = v222;
          v222[0] = v108;
          uint64_t v112 = &v221;
          uint64_t v221 = v109;
          uint64_t v113 = &v220;
          uint64_t v220 = v110;
          serialize(_:at:)(2, v222);
          serialize(_:at:)(1, v111);
          uint64_t v218 = v196;
          uint64_t v219 = v121;
          closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)v111, (uint64_t)v112, (uint64_t)v113);
          uint64_t v114 = v41;
          if (v41)
          {
            __break(1u);
          }
          else
          {
            uint64_t v218 = v197;
            uint64_t v219 = v122;
            closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)v222, (uint64_t)&v221, (uint64_t)&v220);
            uint64_t v106 = 0;
            uint64_t v218 = v198;
            uint64_t v219 = v124;
            closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)v222, (uint64_t)&v221, (uint64_t)&v220);
            _os_log_impl(&dword_25D85A000, v126, (os_log_type_t)v127, "LSApplicationProxyIntentSupportResolver# Unable to get INAppInfo for %s", v108, v115);
            destroyStorage<A>(_:count:)(v109, 0, v107);
            destroyStorage<A>(_:count:)(v110, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v108, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        v138(v160, v165);
        int v134 = 0;
      }
    }
    return v134 & 1;
  }
}

id LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v10 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, a3 & 1);
  if (v8) {
    return (id)v5;
  }
  else {
    return v10;
  }
}

uint64_t implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

id @nonobjc INAppInfo.__allocating_init(applicationRecord:)(void *a1)
{
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_appInfoWithApplicationRecord_, a1);

  return v3;
}

BOOL protocol witness for AppIntentSupportResolving.doesAppSupportIntent(appBundleId:intentName:) in conformance LSApplicationIntentSupportResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

BOOL App.isPaymentSendingApp.getter()
{
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSendPaymentIntent", 0x13uLL, 1);
  Swift::Bool v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isPaymentRequestingApp.getter()
{
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INRequestPaymentIntent", 0x16uLL, 1);
  Swift::Bool v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isAccountSearchingApp.getter()
{
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSearchForAccountsIntent", 0x19uLL, 1);
  Swift::Bool v2 = App.supportsIntent(intentName:)(v0);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL App.isPaymentApp.getter()
{
  BOOL v2 = App.isPaymentSendingApp.getter();
  swift_retain();
  BOOL v1 = v2 || App.isPaymentRequestingApp.getter();
  swift_release();
  return v1;
}

uint64_t App.toUsoEntityBuilder(locale:)(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = type metadata accessor for UsoIdentifier();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v17 - 8;
  unint64_t v20 = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v21 = (char *)v8 - v20;
  uint64_t v34 = v2;
  uint64_t v33 = v1;
  type metadata accessor for UsoEntityBuilder_common_App();
  uint64_t v23 = UsoEntityBuilder_common_App.__allocating_init()();
  uint64_t v32 = v23;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  uint64_t v25 = AppInformationResolver.__allocating_init(app:)();
  uint64_t v26 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v27 = v3;
  swift_release();
  if (v27)
  {
    uint64_t v15 = v26;
    uint64_t v16 = v27;
    uint64_t v14 = v27;
    uint64_t v28 = v26;
    uint64_t v29 = v27;
    dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = App.appIdentifier.getter();
  uint64_t v13 = v4;
  if (v4)
  {
    uint64_t v10 = v12;
    uint64_t v11 = v13;
    v8[7] = v13;
    v8[8] = v12;
    uint64_t v30 = v12;
    uint64_t v31 = v13;
    uint64_t v9 = dispatch thunk of UsoEntityBuilder_common_App.name.getter();
    if (v9)
    {
      v8[6] = v9;
      v8[5] = v9;
      swift_bridgeObjectRetain();
      uint64_t v5 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
      v8[1] = *(void *)v5;
      v8[2] = *((void *)v5 + 1);
      swift_bridgeObjectRetain();
      uint64_t v6 = AppUtil.usoNamespace.unsafeMutableAddressor();
      v8[3] = *(void *)v6;
      v8[4] = *((void *)v6 + 1);
      swift_bridgeObjectRetain();
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  return v23;
}

uint64_t App.getAppName(deviceState:)(void *a1)
{
  uint64_t v7 = a1;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  v5[1] = 0;
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v13 - 8);
  uint64_t v11 = v13 - 8;
  unint64_t v6 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)v5 - v6;
  uint64_t v18 = v2;
  uint64_t v17 = v1;
  type metadata accessor for AppInformationResolver();
  swift_retain();
  uint64_t v14 = AppInformationResolver.__allocating_init(app:)();
  uint64_t v9 = v7[3];
  uint64_t v8 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v15 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v16 = v3;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v13);
  swift_release();
  return v15;
}

uint64_t closure #1 in App.sirikitApp.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v10 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = (uint64_t)&v9 - v10;
  uint64_t v28 = MEMORY[0x270FA5388](v12);
  uint64_t v29 = v4;
  uint64_t v26 = v5;
  uint64_t v27 = v6;
  uint64_t v13 = 0;
  type metadata accessor for SirikitLocalizedAppName.Builder();
  uint64_t v14 = SirikitLocalizedAppName.Builder.__allocating_init()();
  String.toSpeakableString.getter();
  uint64_t v19 = type metadata accessor for SpeakableString();
  uint64_t v7 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(uint64_t))(v7 + 56);
  uint64_t v20 = v7 + 56;
  unsigned int v17 = 0;
  unsigned int v18 = 1;
  v21(v22);
  uint64_t v23 = dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)();
  outlined destroy of SpeakableString?(v22);
  swift_release();
  String.toSpeakableString.getter();
  ((void (*)(uint64_t, void, void, uint64_t))v21)(v22, v17, v18, v19);
  uint64_t v24 = dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)();
  outlined destroy of SpeakableString?(v22);
  swift_release();
  uint64_t v25 = dispatch thunk of SirikitLocalizedAppName.Builder.build()();
  swift_release();
  return v25;
}

uint64_t thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2], a1[3]);
  *a3 = result;
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> (@owned SirikitLocalizedAppName)(a1, *(uint64_t (**)(void, void, void, void))(v2 + 16), a2);
}

uint64_t sub_25D975BE0()
{
  return swift_deallocObject();
}

uint64_t AppResolutionStateProviding.isForcedDisambiguation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = a1;
  uint64_t v12 = type metadata accessor for AppSelectionResponse();
  uint64_t v9 = *(void *)(v12 - 8);
  uint64_t v10 = v12 - 8;
  unint64_t v8 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v4 - v8;
  uint64_t v14 = v2;
  AppResolutionStateProviding.previousSelectionResponse.getter();
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v12);
  if (v13 == *MEMORY[0x263F6C900] || v13 == *MEMORY[0x263F6C908])
  {
    int v5 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v12);
    int v5 = 0;
  }
  return v5 & 1;
}

uint64_t Array<A>.cardinality.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v8 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if (v8) {
    return 0;
  }
  if (MEMORY[0x2611B9380](a1, a2) == 1)
  {
    swift_bridgeObjectRetain();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    if (v9) {
      return v9;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return v4;
  }
  else
  {
    swift_bridgeObjectRetain();
    type metadata accessor for App();
    uint64_t v3 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    return v3;
  }
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  id v7 = (id)MEMORY[0x2611B9130]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
  lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>();
  _convertInOutToPointerArgument<A>(_:)();
  id v9 = objc_msgSend(v6, sel_initWithBundleIdentifier_allowPlaceholder_error_, v7, a3 & 1, v10);
  id v3 = 0;

  if (v9)
  {

    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    return (id)v5;
  }
}

uint64_t sub_25D976134()
{
  return swift_deallocObject();
}

uint64_t sub_25D976160()
{
  return swift_deallocObject();
}

uint64_t sub_25D97618C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9761CC()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for LSApplicationRecord()
{
  uint64_t v2 = lazy cache variable for type metadata for LSApplicationRecord;
  if (!lazy cache variable for type metadata for LSApplicationRecord)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for LSApplicationRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25D976274()
{
  return swift_deallocObject();
}

uint64_t sub_25D9762B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)()
{
  return implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:)(*(void **)(v0 + 16));
}

uint64_t sub_25D9762FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D976328()
{
  return swift_deallocObject();
}

uint64_t sub_25D976354()
{
  return swift_deallocObject();
}

uint64_t sub_25D976394()
{
  return swift_deallocObject();
}

uint64_t sub_25D9763D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D976400()
{
  return swift_deallocObject();
}

uint64_t sub_25D97642C()
{
  return swift_deallocObject();
}

uint64_t sub_25D97646C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for INAppInfo()
{
  uint64_t v2 = lazy cache variable for type metadata for INAppInfo;
  if (!lazy cache variable for type metadata for INAppInfo)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INAppInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25D976514()
{
  return swift_deallocObject();
}

uint64_t sub_25D976554()
{
  return swift_deallocObject();
}

uint64_t sub_25D976580()
{
  return swift_deallocObject();
}

uint64_t sub_25D9765AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9765EC()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AppUtil()
{
  return &type metadata for AppUtil;
}

ValueMetadata *type metadata accessor for LSApplicationIntentSupportResolver()
{
  return &type metadata for LSApplicationIntentSupportResolver;
}

uint64_t type metadata instantiation function for Cardinality()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Cardinality()
{
  uint64_t v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for Cardinality(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v11 = *(void *)(a3 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  if ((v12 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    swift_retain();
    *a1 = v6;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v4 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v4;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(v11 + 64));
      }
    }
    else
    {
      (*(void (**)(void *, uint64_t *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for Cardinality(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  }
  if (result == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Cardinality(void *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *a2;
      swift_bridgeObjectRetain();
      *a1 = v4;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  else
  {
    (*(void (**)(void *, uint64_t *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *assignWithCopy for Cardinality(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    outlined destroy of Cardinality<A>((uint64_t)a1, v5);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v4 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v4;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v5 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of Cardinality<A>(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)(a2 - 8) + 8))(a1);
  }
  return a1;
}

void *initializeWithTake for Cardinality(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Cardinality(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    outlined destroy of Cardinality<A>((uint64_t)a1, v4);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *))(*(void *)(v4 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Cardinality(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for Cardinality(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t getEnumTag for Cardinality()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t destructiveInjectEnumTag for Cardinality()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Cardinality()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>;
  if (!lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.__allocating_init()()
{
  return PaymentsDialogConcept.Builder.init()();
}

uint64_t PaymentsDialogConcept.Builder.amount.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.amount.setter(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t PaymentsDialogConcept.Builder.fee.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.fee.setter(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.fee.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.memo.getter@<X0>(void *a1@<X8>)
{
  id v3 = (const void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v3, a1);
  return swift_endAccess();
}

uint64_t PaymentsDialogConcept.Builder.memo.setter(uint64_t a1)
{
  uint64_t v8 = a1;
  unint64_t v4 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (const void *)MEMORY[0x270FA5388](v8);
  uint64_t v5 = (char *)&v4 - v4;
  outlined init with copy of SpeakableString?(v2, (char *)&v4 - v4);
  uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  id v7 = &v9;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v5, v6);
  swift_endAccess();
  return outlined destroy of SpeakableString?(v8);
}

uint64_t (*PaymentsDialogConcept.Builder.memo.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.payeeName.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t PaymentsDialogConcept.Builder.payeeName.setter(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.payeeName.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.payerName.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t PaymentsDialogConcept.Builder.payerName.setter(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsDialogConcept.Builder.payerName.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsDialogConcept.Builder.init()()
{
  *((void *)v0 + 2) = 0;
  *((void *)v0 + 3) = 0;
  *((void *)v0 + 4) = 0;
  uint64_t v3 = OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  uint64_t v1 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 56))(&v0[v3], 1);
  uint64_t result = v4;
  *(void *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName) = 0;
  *(void *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName) = 0;
  return result;
}

uint64_t PaymentsDialogConcept.Builder.withAmount(_:)(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    uint64_t v3 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 16) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withApp(_:)(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    uint64_t v3 = dispatch thunk of SirikitApp.Builder.build()();
    swift_release();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 24) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withFee(_:)(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  swift_retain();
  if (a1)
  {
    uint64_t v3 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 32) = v4;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v1;
}

uint64_t PaymentsDialogConcept.Builder.withMemo(_:)(const void *a1)
{
  char v9 = a1;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v9);
  uint64_t v10 = (char *)&v6 - v7;
  unint64_t v8 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  int v13 = (char *)&v6 - v8;
  uint64_t v17 = v4;
  uint64_t v16 = v1;
  swift_retain();
  outlined init with copy of SpeakableString?(v9, v13);
  outlined init with copy of SpeakableString?(v13, v10);
  uint64_t v11 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  int v12 = &v15;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v10, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v13);
  swift_release();
  swift_retain();
  return v14;
}

uint64_t PaymentsDialogConcept.Builder.withMemo(print:speak:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  unint64_t v14 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v13 - v14;
  unint64_t v15 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v23 = (char *)&v13 - v15;
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  uint64_t v26 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v11 = type metadata accessor for SpeakableString();
  (*(void (**)(char *, void, uint64_t))(*(void *)(v11 - 8) + 56))(v23, 0, 1);
  outlined init with copy of SpeakableString?(v23, v20);
  uint64_t v21 = (void *)(v4 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  uint64_t v22 = &v25;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v20, v21);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v23);
  swift_release();
  swift_retain();
  return v24;
}

uint64_t PaymentsDialogConcept.Builder.withPayeeName(_:)(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v5;
}

uint64_t PaymentsDialogConcept.Builder.withPayerName(_:)(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  return v5;
}

uint64_t PaymentsDialogConcept.Builder.build()()
{
  type metadata accessor for PaymentsDialogConcept();
  swift_retain();
  return PaymentsDialogConcept.__allocating_init(builder:)(v1);
}

uint64_t type metadata accessor for PaymentsDialogConcept()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsDialogConcept;
  if (!type metadata singleton initialization cache for PaymentsDialogConcept) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t PaymentsDialogConcept.__allocating_init(builder:)(void *a1)
{
  return PaymentsDialogConcept.init(builder:)(a1);
}

uint64_t PaymentsDialogConcept.Builder.deinit()
{
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  return v2;
}

uint64_t PaymentsDialogConcept.Builder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static PaymentsDialogConcept.catTypeName.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payments.DialogConcept", 0x16uLL, 1)._countAndFlagsBits;
}

uint64_t static PaymentsDialogConcept.isDialogType.getter()
{
  return 0;
}

uint64_t PaymentsDialogConcept.init(builder:)(void *a1)
{
  uint64_t v22 = a1;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  v5[0] = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (char *)v5 - v5[0];
  uint64_t v31 = MEMORY[0x270FA5388](v22);
  uint64_t v30 = v1;
  v1[2] = 0;
  v5[1] = &v29;
  uint64_t v17 = 32;
  uint64_t v18 = 0;
  swift_beginAccess();
  uint64_t v6 = v22[2];
  swift_retain();
  swift_endAccess();
  v1[3] = v6;
  uint64_t v7 = &v28;
  swift_beginAccess();
  uint64_t v8 = v22[3];
  swift_retain();
  swift_endAccess();
  v1[4] = v8;
  uint64_t v9 = &v27;
  swift_beginAccess();
  uint64_t v10 = v22[4];
  swift_retain();
  swift_endAccess();
  uint64_t v2 = v22;
  v1[5] = v10;
  uint64_t v11 = (char *)v2 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
  int v12 = &v26;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v11, v13);
  swift_endAccess();
  outlined init with take of SpeakableString?(v13, (char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
  unint64_t v14 = (void *)((char *)v22 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
  unint64_t v15 = &v25;
  swift_beginAccess();
  uint64_t v16 = *v14;
  swift_retain();
  swift_endAccess();
  uint64_t v3 = v22;
  *(void *)((char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName) = v16;
  uint64_t v19 = (void *)((char *)v3 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
  uint64_t v20 = &v24;
  swift_beginAccess();
  uint64_t v21 = *v19;
  swift_retain();
  swift_endAccess();
  *(void *)((char *)v1 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName) = v21;
  swift_release();
  return v23;
}

void *outlined init with take of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

Swift::Bool __swiftcall PaymentsDialogConcept.allRequiredInputsHaveValues()()
{
  return 1;
}

uint64_t PaymentsDialogConcept.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v77 = 0;
  unint64_t v58 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v62);
  uint64_t v59 = (char *)&v27 - v58;
  uint64_t v78 = v5;
  uint64_t v79 = v4;
  uint64_t v77 = v3;
  swift_bridgeObjectRetain();
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amount", 6uLL, 1);
  uint64_t countAndFlagsBits = v6._countAndFlagsBits;
  object = v6._object;
  swift_bridgeObjectRetain();
  uint64_t v75 = v61;
  uint64_t v76 = v62;
  int v64 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v64)
  {
    swift_bridgeObjectRelease();
    uint64_t v55 = v57[3];
    uint64_t result = swift_retain();
    if (v55)
    {
      uint64_t v54 = v55;
      uint64_t v53 = v55;
      uint64_t result = type metadata accessor for DialogCurrency();
      uint64_t v8 = v56;
      uint64_t v9 = v53;
      v56[3] = result;
      *uint64_t v8 = v9;
    }
    else
    {
      uint64_t v10 = v56;
      void *v56 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
    swift_bridgeObjectRetain();
    uint64_t v73 = v61;
    uint64_t v74 = v62;
    int v52 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v52)
    {
      swift_bridgeObjectRelease();
      uint64_t v50 = v57[4];
      uint64_t result = swift_retain();
      if (v50)
      {
        uint64_t v49 = v50;
        uint64_t v48 = v50;
        uint64_t result = type metadata accessor for SirikitApp();
        uint64_t v11 = v56;
        uint64_t v12 = v48;
        v56[3] = result;
        *uint64_t v11 = v12;
      }
      else
      {
        uint64_t v13 = v56;
        void *v56 = 0;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fee", 3uLL, 1);
      swift_bridgeObjectRetain();
      uint64_t v71 = v61;
      uint64_t v72 = v62;
      int v47 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v47)
      {
        swift_bridgeObjectRelease();
        uint64_t v45 = v57[5];
        uint64_t result = swift_retain();
        if (v45)
        {
          uint64_t v44 = v45;
          uint64_t v43 = v45;
          uint64_t result = type metadata accessor for DialogCurrency();
          unint64_t v14 = v56;
          uint64_t v15 = v43;
          v56[3] = result;
          *unint64_t v14 = v15;
        }
        else
        {
          uint64_t v16 = v56;
          void *v56 = 0;
          v16[1] = 0;
          v16[2] = 0;
          v16[3] = 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memo", 4uLL, 1);
        swift_bridgeObjectRetain();
        uint64_t v69 = v61;
        uint64_t v70 = v62;
        int v42 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v42)
        {
          swift_bridgeObjectRelease();
          outlined init with copy of SpeakableString?((char *)v57 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo, v59);
          uint64_t v38 = type metadata accessor for SpeakableString();
          uint64_t v39 = *(void *)(v38 - 8);
          uint64_t v40 = v38 - 8;
          if ((*(unsigned int (**)(char *, uint64_t))(v39 + 48))(v59, 1) == 1)
          {
            uint64_t result = outlined destroy of SpeakableString?((uint64_t)v59);
            uint64_t v19 = v56;
            void *v56 = 0;
            v19[1] = 0;
            v19[2] = 0;
            void v19[3] = 0;
          }
          else
          {
            uint64_t v17 = v56;
            v56[3] = v38;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
            return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v59, v38);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          Swift::String v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payeeName", 9uLL, 1);
          swift_bridgeObjectRetain();
          uint64_t v67 = v61;
          uint64_t v68 = v62;
          int v37 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v37)
          {
            swift_bridgeObjectRelease();
            uint64_t v35 = *(void *)((char *)v57 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName);
            uint64_t result = swift_retain();
            if (v35)
            {
              uint64_t v34 = v35;
              uint64_t v33 = v35;
              uint64_t result = type metadata accessor for DialogPerson();
              uint64_t v20 = v56;
              uint64_t v21 = v33;
              v56[3] = result;
              *uint64_t v20 = v21;
            }
            else
            {
              uint64_t v22 = v56;
              void *v56 = 0;
              v22[1] = 0;
              v22[2] = 0;
              v22[3] = 0;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payerName", 9uLL, 1);
            swift_bridgeObjectRetain();
            uint64_t v65 = v61;
            uint64_t v66 = v62;
            int v32 = static String.== infix(_:_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v32)
            {
              swift_bridgeObjectRelease();
              uint64_t v30 = *(void *)((char *)v57 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName);
              uint64_t result = swift_retain();
              if (v30)
              {
                uint64_t v29 = v30;
                uint64_t v28 = v30;
                uint64_t result = type metadata accessor for DialogPerson();
                uint64_t v23 = v56;
                uint64_t v24 = v28;
                v56[3] = result;
                *uint64_t v23 = v24;
              }
              else
              {
                char v25 = v56;
                void *v56 = 0;
                v25[1] = 0;
                v25[2] = 0;
                v25[3] = 0;
              }
            }
            else
            {
              uint64_t result = swift_bridgeObjectRelease();
              char v26 = v56;
              void *v56 = 0;
              v26[1] = 0;
              v26[2] = 0;
              void v26[3] = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "amount";
  *(void *)(v2 + 8) = 6;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "app";
  *(void *)(v2 + 32) = 3;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "fee";
  *(void *)(v2 + 56) = 3;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "memo";
  *(void *)(v2 + 80) = 4;
  *(unsigned char *)(v2 + 88) = 2;
  *(void *)(v2 + 96) = "payeeName";
  *(void *)(v2 + 104) = 9;
  *(unsigned char *)(v2 + 112) = 2;
  *(void *)(v2 + 120) = "payerName";
  *(void *)(v2 + 128) = 9;
  *(unsigned char *)(v2 + 136) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_amount;
LABEL_14:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_app;
      goto LABEL_14;
    case 2:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_fee;
      goto LABEL_14;
    case 3:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_memo;
      goto LABEL_14;
    case 4:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_payeeName;
      goto LABEL_14;
    case 5:
      v7.value = SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_payerName;
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  swift_bridgeObjectRetain();
  v4.value = PaymentsDialogConcept.CodingKeys.init(rawValue:)(stringValue).value;
  swift_bridgeObjectRelease();
  if (v4.value == SiriPaymentsIntents_PaymentsDialogConcept_CodingKeys_unknownDefault) {
    return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
  }
  else {
    return v4;
  }
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional __swiftcall PaymentsDialogConcept.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional)6;
}

uint64_t PaymentsDialogConcept.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t PaymentsDialogConcept.CodingKeys.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fee", 3uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memo", 4uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payeeName", 9uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payerName", 9uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amount", 6uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t PaymentsDialogConcept.CodingKeys.stringValue.getter(char a1)
{
  return PaymentsDialogConcept.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDialogConcept.CodingKeys()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDialogConcept.CodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDialogConcept.CodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  result.value = PaymentsDialogConcept.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDialogConcept.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PaymentsDialogConcept.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return PaymentsDialogConcept.CodingKeys.stringValue.getter(*v0);
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  result.value = PaymentsDialogConcept.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return PaymentsDialogConcept.CodingKeys.intValue.getter();
}

SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance PaymentsDialogConcept.CodingKeys@<W0>(Swift::Int a1@<X0>, SiriPaymentsIntents::PaymentsDialogConcept::CodingKeys_optional *a2@<X8>)
{
  result.value = PaymentsDialogConcept.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PaymentsDialogConcept.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PaymentsDialogConcept.deinit()
{
  outlined destroy of SFRichText?((id *)(v0 + 16));
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  return v2;
}

uint64_t PaymentsDialogConcept.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PaymentsDialogConcept.encode(to:)(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  unint64_t v42 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v43 = (char *)v13 - v42;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PaymentsDialogConcept.CodingKeys>);
  uint64_t v45 = *(void *)(v54 - 8);
  uint64_t v46 = v54 - 8;
  unint64_t v47 = (*(void *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (void *)MEMORY[0x270FA5388](v44);
  uint64_t v50 = (char *)v13 - v47;
  uint64_t v72 = v3;
  uint64_t v71 = v1;
  uint64_t v48 = v3[3];
  uint64_t v49 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v48);
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v52 = v51[3];
  swift_retain();
  uint64_t v57 = &v70;
  uint64_t v70 = v52;
  uint64_t v53 = &v69;
  char v69 = 0;
  uint64_t v55 = type metadata accessor for DialogCurrency();
  unint64_t v4 = lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement();
  uint64_t v5 = v56;
  unint64_t v58 = v4;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v59 = v5;
  uint64_t v60 = v5;
  if (v5)
  {
    uint64_t v17 = v60;
    outlined destroy of ContiguousArray<A1>();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
    uint64_t v18 = v17;
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    uint64_t v36 = v51[4];
    swift_retain();
    uint64_t v39 = &v68;
    uint64_t v68 = v36;
    int v37 = &v67;
    char v67 = 1;
    uint64_t v38 = type metadata accessor for SirikitApp();
    lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp();
    uint64_t v6 = v59;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v40 = v6;
    uint64_t v41 = v6;
    if (v6)
    {
      uint64_t v16 = v41;
      outlined destroy of ContiguousArray<A1>();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
      uint64_t v18 = v16;
    }
    else
    {
      outlined destroy of ContiguousArray<A1>();
      uint64_t v7 = v40;
      uint64_t v33 = v51[5];
      swift_retain();
      uint64_t v66 = v33;
      v65[1] = 2;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      uint64_t v34 = v7;
      uint64_t v35 = v7;
      if (v7)
      {
        uint64_t v15 = v35;
        outlined destroy of ContiguousArray<A1>();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
        uint64_t v18 = v15;
      }
      else
      {
        outlined destroy of ContiguousArray<A1>();
        outlined init with copy of SpeakableString?((char *)v51 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo, v43);
        uint64_t v29 = v65;
        v65[0] = 3;
        uint64_t v30 = type metadata accessor for SpeakableString();
        lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
        uint64_t v8 = v34;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        uint64_t v31 = v8;
        uint64_t v32 = v8;
        if (v8)
        {
          uint64_t v14 = v32;
          outlined destroy of SpeakableString?((uint64_t)v43);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
          uint64_t v18 = v14;
        }
        else
        {
          outlined destroy of SpeakableString?((uint64_t)v43);
          uint64_t v22 = *(void *)((char *)v51 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName);
          swift_retain();
          char v25 = &v64;
          uint64_t v64 = v22;
          uint64_t v23 = &v63;
          char v63 = 4;
          uint64_t v24 = type metadata accessor for DialogPerson();
          unint64_t v9 = lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
          uint64_t v10 = v31;
          unint64_t v26 = v9;
          KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
          uint64_t v27 = v10;
          uint64_t v28 = v10;
          if (v10)
          {
            v13[2] = v28;
            outlined destroy of ContiguousArray<A1>();
            return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
          }
          else
          {
            outlined destroy of ContiguousArray<A1>();
            uint64_t v11 = v27;
            uint64_t v19 = *(void *)((char *)v51 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName);
            swift_retain();
            uint64_t v62 = v19;
            char v61 = 5;
            KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
            uint64_t v20 = v11;
            uint64_t v21 = v11;
            if (v11) {
              v13[1] = v21;
            }
            outlined destroy of ContiguousArray<A1>();
            return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v50, v54);
          }
        }
      }
    }
  }
  return result;
}

uint64_t PaymentsDialogConcept.__allocating_init(from:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v5 = PaymentsDialogConcept.init(from:)(a1);
  if (v3) {
    return v2;
  }
  else {
    return v5;
  }
}

uint64_t PaymentsDialogConcept.init(from:)(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  unint64_t v44 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v45 = (char *)v15 - v44;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PaymentsDialogConcept.CodingKeys>);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v47 - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (void *)MEMORY[0x270FA5388](v46);
  Swift::String v51 = (char *)v15 - v50;
  uint64_t v68 = v3;
  uint64_t v67 = v1;
  char v69 = 1;
  *(void *)(v1 + 16) = 0;
  uint64_t v53 = v3[3];
  uint64_t v54 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v53);
  lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
  uint64_t v4 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v55 = v4;
  uint64_t v56 = v4;
  if (v4)
  {
    uint64_t v20 = v56;
  }
  else
  {
    uint64_t v39 = type metadata accessor for DialogCurrency();
    uint64_t v38 = &v65;
    char v65 = 0;
    unint64_t v5 = lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement();
    uint64_t v6 = v55;
    unint64_t v40 = v5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = v6;
    uint64_t v42 = v6;
    if (v6)
    {
      uint64_t v19 = v42;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
      uint64_t v20 = v19;
    }
    else
    {
      char v69 = 3;
      *(void *)(v43 + 24) = v66;
      uint64_t v35 = type metadata accessor for SirikitApp();
      uint64_t v34 = &v63;
      char v63 = 1;
      lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp();
      uint64_t v7 = v41;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v36 = v7;
      uint64_t v37 = v7;
      if (v7)
      {
        uint64_t v18 = v37;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
        uint64_t v20 = v18;
      }
      else
      {
        char v69 = 7;
        *(void *)(v43 + 32) = v64;
        v61[1] = 2;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        char v69 = 15;
        *(void *)(v43 + 40) = v62;
        uint64_t v29 = type metadata accessor for SpeakableString();
        uint64_t v28 = v61;
        v61[0] = 3;
        lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
        uint64_t v8 = v32;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v30 = v8;
        uint64_t v31 = v8;
        if (v8)
        {
          uint64_t v17 = v31;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
          uint64_t v20 = v17;
        }
        else
        {
          char v69 = 31;
          outlined init with take of SpeakableString?(v45, (void *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo));
          uint64_t v24 = type metadata accessor for DialogPerson();
          uint64_t v23 = &v59;
          char v59 = 4;
          unint64_t v9 = lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson();
          uint64_t v10 = v30;
          unint64_t v25 = v9;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v26 = v10;
          uint64_t v27 = v10;
          if (!v10)
          {
            char v69 = 63;
            *(void *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payeeName) = v60;
            char v57 = 5;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            uint64_t v11 = v47;
            uint64_t v12 = v51;
            uint64_t v13 = v48;
            char v69 = 127;
            *(void *)(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_payerName) = v58;
            (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
            __swift_destroy_boxed_opaque_existential_0(v46);
            return v43;
          }
          uint64_t v16 = v27;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
          uint64_t v20 = v16;
        }
      }
    }
  }
  v15[3] = v20;
  if ((v69 & 0x7F) == 0x7F)
  {
    swift_release();
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v43 + 16));
    if ((v69 & 2) != 0) {
      outlined destroy of ContiguousArray<A1>();
    }
    if ((v69 & 4) != 0) {
      outlined destroy of ContiguousArray<A1>();
    }
    if ((v69 & 8) != 0) {
      outlined destroy of ContiguousArray<A1>();
    }
    if ((v69 & 0x10) != 0) {
      outlined destroy of SpeakableString?(v43 + OBJC_IVAR____TtC19SiriPaymentsIntents21PaymentsDialogConcept_memo);
    }
    if ((v69 & 0x20) != 0) {
      outlined destroy of ContiguousArray<A1>();
    }
    v15[2] = v43;
    v15[1] = v43;
    type metadata accessor for PaymentsDialogConcept();
    swift_deallocPartialClassInstance();
  }
  __swift_destroy_boxed_opaque_existential_0(v46);
  return v15[0];
}

uint64_t protocol witness for CATType.toDictionary.getter in conformance PaymentsDialogConcept()
{
  return CATType.toDictionary.getter();
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PaymentsDialogConcept()
{
  return static PaymentsDialogConcept.catTypeName.getter();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PaymentsDialogConcept()
{
  return static PaymentsDialogConcept.isDialogType.getter() & 1;
}

void *protocol witness for CATType.mockGlobals.getter in conformance PaymentsDialogConcept()
{
  return TCCHandleStrategy.previousIntent.getter();
}

void protocol witness for CATType.mockGlobals.setter in conformance PaymentsDialogConcept(void *a1)
{
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept(void *a1))(void **a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TCCHandleStrategy.previousIntent.modify();
  return protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept;
}

void protocol witness for CATType.mockGlobals.modify in conformance PaymentsDialogConcept(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PaymentsDialogConcept@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return PaymentsDialogConcept.getProperty(_:)(a1, a2, a3);
}

uint64_t ObjC metadata update function for PaymentsDialogConcept()
{
  return type metadata accessor for PaymentsDialogConcept();
}

uint64_t type metadata completion function for PaymentsDialogConcept()
{
  uint64_t updated = type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    uint64_t updated = swift_updateClassMetadata2();
    if (!updated) {
      return 0;
    }
  }
  return updated;
}

uint64_t type metadata accessor for SpeakableString?()
{
  uint64_t v4 = lazy cache variable for type metadata for SpeakableString?;
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    unint64_t v3 = type metadata accessor for Optional();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
      return v1;
    }
  }
  return v4;
}

uint64_t ObjC metadata update function for PaymentsDialogConcept.Builder()
{
  return type metadata accessor for PaymentsDialogConcept.Builder();
}

uint64_t type metadata accessor for PaymentsDialogConcept.Builder()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsDialogConcept.Builder;
  if (!type metadata singleton initialization cache for PaymentsDialogConcept.Builder) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for PaymentsDialogConcept.Builder()
{
  uint64_t updated = type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    uint64_t updated = swift_updateClassMetadata2();
    if (!updated) {
      return 0;
    }
  }
  return updated;
}

uint64_t getEnumTagSinglePayload for PaymentsDialogConcept.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFA) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 5) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 6;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PaymentsDialogConcept.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFA)
  {
    unsigned int v5 = ((a3 + 5) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFA)
  {
    unsigned int v4 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDialogConcept.CodingKeys()
{
  return &type metadata for PaymentsDialogConcept.CodingKeys;
}

unint64_t base witness table accessor for Equatable in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PaymentsDialogConcept@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = PaymentsDialogConcept.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PaymentsDialogConcept(uint64_t a1)
{
  return PaymentsDialogConcept.encode(to:)(a1);
}

unint64_t base witness table accessor for Decodable in PaymentsDialogConcept()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept();
}

unint64_t lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept)
  {
    type metadata accessor for PaymentsDialogConcept();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept;
  if (!lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept)
  {
    type metadata accessor for PaymentsDialogConcept();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDialogConcept and conformance PaymentsDialogConcept);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in PaymentsDialogConcept()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept and conformance PaymentsDialogConcept();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in PaymentsDialogConcept.CodingKeys()
{
  return lazy protocol witness table accessor for type PaymentsDialogConcept.CodingKeys and conformance PaymentsDialogConcept.CodingKeys();
}

unint64_t lazy protocol witness table accessor for type DialogCurrency and conformance DialogAbstractMeasurement()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement;
  if (!lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement)
  {
    type metadata accessor for DialogCurrency();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement;
  if (!lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement)
  {
    type metadata accessor for DialogCurrency();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DialogCurrency and conformance DialogAbstractMeasurement);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SirikitApp and conformance SirikitApp()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp;
  if (!lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp)
  {
    type metadata accessor for SirikitApp();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp;
  if (!lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp)
  {
    type metadata accessor for SirikitApp();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SirikitApp and conformance SirikitApp);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString;
  if (!lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString)
  {
    type metadata accessor for SpeakableString();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString;
  if (!lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString)
  {
    type metadata accessor for SpeakableString();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type DialogPerson and conformance DialogPerson()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    type metadata accessor for DialogPerson();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson;
  if (!lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson)
  {
    type metadata accessor for DialogPerson();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DialogPerson and conformance DialogPerson);
    return WitnessTable;
  }
  return v2;
}

uint64_t RequestPaymentSlots.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
  }
}

uint64_t SendPaymentSlots.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
  }
}

SiriPaymentsIntents::RequestPaymentSlots_optional __swiftcall RequestPaymentSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "payer";
  *(void *)(v2 + 8) = 5;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "currencyAmount";
  *(void *)(v2 + 32) = 14;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "note";
  *(void *)(v2 + 56) = 4;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_payer;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_currencyAmount;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_RequestPaymentSlots_note;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::RequestPaymentSlots_optional)3;
}

SiriPaymentsIntents::SendPaymentSlots_optional __swiftcall SendPaymentSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "payee";
  *(void *)(v2 + 8) = 5;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "currencyAmount";
  *(void *)(v2 + 32) = 14;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "note";
  *(void *)(v2 + 56) = 4;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_payee;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_currencyAmount;
      goto LABEL_8;
    case 2:
      v7.value = SiriPaymentsIntents_SendPaymentSlots_note;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::SendPaymentSlots_optional)3;
}

SiriPaymentsIntents::SearchForAccountsSlots_optional __swiftcall SearchForAccountsSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "accountNickname";
  *(void *)(v2 + 8) = 15;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "accountType";
  *(void *)(v2 + 32) = 11;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "organizationName";
  *(void *)(v2 + 56) = 16;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "requestedBalanceType";
  *(void *)(v2 + 80) = 20;
  *(unsigned char *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_accountNickname;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_accountType;
      goto LABEL_10;
    case 2:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_organizationName;
      goto LABEL_10;
    case 3:
      v7.value = SiriPaymentsIntents_SearchForAccountsSlots_requestedBalanceType;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::SearchForAccountsSlots_optional)4;
}

uint64_t SearchForAccountsSlots.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("organizationName", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestedBalanceType", 0x14uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

id Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 8))();
  id v10 = SAUIAppPunchOut.__allocating_init()();
  id v12 = objc_msgSend(v10, sel__intentInstanceDescription);

  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v11 = (void *)MEMORY[0x2611B9130]();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v12, sel_slotByName_, v11);

  if (!v13)
  {
    (*(void (**)(void))(a2 + 8))();
    id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeName);
    if (v8)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v3;

      uint64_t v6 = v4;
      uint64_t v7 = v5;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    if (v7)
    {
      PaymentsError.errorDescription.getter();
      outlined consume of PaymentsError(v6, v7, 0, 0, 0, 0, 11);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x25D97C300);
  }
  return v13;
}

uint64_t Slot<>.propertyName.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v9 = (void *)(*(uint64_t (**)(void))(a2 + 24))();
  id v10 = objc_msgSend(v9, sel_facadePropertyName);
  if (v10)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v2;

    uint64_t v7 = v5;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }

  if (v8) {
    return v7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return v4;
}

uint64_t SendPaymentSlots.canonicalName.getter(char a1)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  SendPaymentSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static SendPaymentSlots.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *Swift::String v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SendPaymentSlots()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots;
  if (!lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentSlots and conformance SendPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SendPaymentSlots()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SendPaymentSlots()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SendPaymentSlots()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::SendPaymentSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SendPaymentSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::SendPaymentSlots_optional *a2@<X8>)
{
  result.value = SendPaymentSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SendPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SendPaymentSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance SendPaymentSlots()
{
  return implicit closure #1 in PayeeDisambiguationStrategy.init()();
}

SiriPaymentsIntents::SendPaymentSlots_optional protocol witness for Slot.init(rawValue:) in conformance SendPaymentSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::SendPaymentSlots_optional *a2@<X8>)
{
  result.value = SendPaymentSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance SendPaymentSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance SendPaymentSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance SendPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static SendPaymentSlots.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t RequestPaymentSlots.canonicalName.getter(char a1)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  RequestPaymentSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static RequestPaymentSlots.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *Swift::String v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RequestPaymentSlots()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots;
  if (!lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentSlots and conformance RequestPaymentSlots);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RequestPaymentSlots()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RequestPaymentSlots()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance RequestPaymentSlots()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::RequestPaymentSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RequestPaymentSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::RequestPaymentSlots_optional *a2@<X8>)
{
  result.value = RequestPaymentSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RequestPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RequestPaymentSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance RequestPaymentSlots()
{
  return implicit closure #1 in PayerDisambiguationStrategy.init()();
}

SiriPaymentsIntents::RequestPaymentSlots_optional protocol witness for Slot.init(rawValue:) in conformance RequestPaymentSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::RequestPaymentSlots_optional *a2@<X8>)
{
  result.value = RequestPaymentSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance RequestPaymentSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance RequestPaymentSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance RequestPaymentSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static RequestPaymentSlots.allCases.getter();
  *a1 = result;
  return result;
}

unint64_t static SearchForAccountsSlots.intentType.getter()
{
  return type metadata accessor for INSearchForAccountsIntent();
}

uint64_t SearchForAccountsSlots.canonicalName.getter(char a1)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  SearchForAccountsSlots.rawValue.getter(a1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t static SearchForAccountsSlots.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *Swift::String v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchForAccountsSlots()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots;
  if (!lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsSlots and conformance SearchForAccountsSlots);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SearchForAccountsSlots()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchForAccountsSlots()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SearchForAccountsSlots()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::SearchForAccountsSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchForAccountsSlots@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::SearchForAccountsSlots_optional *a2@<X8>)
{
  result.value = SearchForAccountsSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SearchForAccountsSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchForAccountsSlots.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for static Slot.intentType.getter in conformance SearchForAccountsSlots()
{
  return static SearchForAccountsSlots.intentType.getter();
}

SiriPaymentsIntents::SearchForAccountsSlots_optional protocol witness for Slot.init(rawValue:) in conformance SearchForAccountsSlots@<W0>(uint64_t a1@<X0>, SiriPaymentsIntents::SearchForAccountsSlots_optional *a2@<X8>)
{
  result.value = SearchForAccountsSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

id protocol witness for Slot.slotDescription.getter in conformance SearchForAccountsSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.slotDescription.getter(a1, a2);
}

uint64_t protocol witness for Slot.propertyName.getter in conformance SearchForAccountsSlots(uint64_t a1, uint64_t a2)
{
  return Slot<>.propertyName.getter(a1, a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance SearchForAccountsSlots@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static SearchForAccountsSlots.allCases.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SendPaymentSlots()
{
  return &type metadata for SendPaymentSlots;
}

ValueMetadata *type metadata accessor for RequestPaymentSlots()
{
  return &type metadata for RequestPaymentSlots;
}

uint64_t getEnumTagSinglePayload for SearchForAccountsSlots(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFC) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 3) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 4;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchForAccountsSlots(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFC)
  {
    unsigned int v5 = ((a3 + 3) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFC)
  {
    unsigned int v4 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchForAccountsSlots()
{
  return &type metadata for SearchForAccountsSlots;
}

unint64_t base witness table accessor for Equatable in SearchForAccountsSlots()
{
  return lazy protocol witness table accessor for type SearchForAccountsSlots and conformance SearchForAccountsSlots();
}

unint64_t base witness table accessor for Equatable in RequestPaymentSlots()
{
  return lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
}

unint64_t base witness table accessor for Equatable in SendPaymentSlots()
{
  return lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SearchForAccountsSlots()
{
  return lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SearchForAccountsSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RequestPaymentSlots()
{
  return lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RequestPaymentSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RequestPaymentSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [RequestPaymentSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SendPaymentSlots()
{
  return lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SendPaymentSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SendPaymentSlots]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SendPaymentSlots] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  if (a2)
  {
    char v3 = String.isEmpty.getter();
    swift_bridgeObjectRelease();
    char v4 = v3 & 1;
  }
  else
  {
    char v4 = 2;
  }
  if (v4 == 2) {
    char v6 = 1;
  }
  else {
    char v6 = v4 & 1;
  }
  return v6 & 1;
}

uint64_t Optional<A>.emptyToNil.getter(uint64_t a1, uint64_t a2)
{
  if (Optional<A>.isNilOrEmpty.getter(a1, a2)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  if (a1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
    lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
    char v2 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    char v3 = v2 & 1;
  }
  else
  {
    char v3 = 2;
  }
  if (v3 == 2) {
    char v5 = 1;
  }
  else {
    char v5 = v3 & 1;
  }
  return v5 & 1;
}

uint64_t Optional<A>.emptyToNil.getter(uint64_t a1)
{
  if (Optional<A>.isNilOrEmpty.getter(a1)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SendPaymentUnsupportedValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  int v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  unint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  id v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  unint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSendPaymentIntent();
  unint64_t v1 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SendPaymentUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 624) = v2;
  *(void *)(v3 + 616) = a2;
  *(void *)(v3 + 608) = a1;
  *(void *)(v3 + 488) = v3;
  *(void *)(v3 + 496) = 0;
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 880) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 536) = 0;
  *(void *)(v3 + 472) = 0;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 544) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 560) = 0;
  *(void *)(v3 + 568) = 0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(void *)(v3 + 632) = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  *(void *)(v3 + 640) = v9;
  *(void *)(v3 + 648) = *(void *)(v9 + 64);
  *(void *)(v3 + 656) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 664) = swift_task_alloc();
  *(void *)(v3 + 672) = swift_task_alloc();
  *(void *)(v3 + 680) = swift_task_alloc();
  type metadata accessor for Locale();
  *(void *)(v3 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 696) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(void *)(v3 + 704) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 712) = v5;
  *(void *)(v3 + 720) = *(void *)(v5 - 8);
  *(void *)(v3 + 728) = swift_task_alloc();
  *(void *)(v3 + 736) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 744) = v6;
  *(void *)(v3 + 752) = *(void *)(v6 - 8);
  *(void *)(v3 + 760) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v3 + 768) = v7;
  *(void *)(v3 + 776) = *(void *)(v7 - 8);
  *(void *)(v3 + 784) = swift_task_alloc();
  *(void *)(v3 + 792) = swift_task_alloc();
  *(void *)(v3 + 496) = a2;
  *(void *)(v3 + 504) = v2;
  return MEMORY[0x270FA2498](SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0);
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v71 = v0;
  uint64_t v1 = *(void *)(v0 + 792);
  uint64_t v59 = *(void *)(v0 + 776);
  uint64_t v60 = *(void *)(v0 + 768);
  *(void *)(v0 + 488) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  char v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v1, v2, v60);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 512) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v62 = *(unsigned int *)(v0 + 884);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v65 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v64, v63))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v55 = createStorage<A>(capacity:type:)(0);
    uint64_t v56 = createStorage<A>(capacity:type:)(0);
    *(void *)(v58 + 576) = buf;
    *(void *)(v58 + 584) = v55;
    *(void *)(v58 + 592) = v56;
    serialize(_:at:)(0, (unsigned char **)(v58 + 576));
    serialize(_:at:)(0, (unsigned char **)(v58 + 576));
    *(void *)(v58 + 600) = v65;
    char v57 = (void *)swift_task_alloc();
    v57[2] = v58 + 576;
    v57[3] = v58 + 584;
    v57[4] = v58 + 592;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v64, v63, "SendPaymentUnsupportedValueStrategy makeUnsupportedValueOutput", buf, v62);
    destroyStorage<A>(_:count:)(v55, 0, v53);
    destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v58 + 792);
  uint64_t v46 = *(void *)(v58 + 768);
  uint64_t v49 = *(void *)(v58 + 760);
  uint64_t v50 = *(void *)(v58 + 744);
  uint64_t v44 = *(void *)(v58 + 776);
  uint64_t v48 = *(void *)(v58 + 752);

  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v47(v45, v46);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  Swift::String v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v51(v49, v50);
  v4.value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v58 + 881) = v4;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    uint64_t v9 = *(void *)(v58 + 784);
    uint64_t v25 = *(void *)(v58 + 768);
    uint64_t v29 = *(void *)(v58 + 656);
    uint64_t v30 = *(void *)(v58 + 632);
    uint64_t v27 = *(void *)(v58 + 616);
    uint64_t v26 = *(void *)(v58 + 640);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v61(v9, v10, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v29, v27, v30);
    unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v32 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v32 + v28, v29, v30);
    oslog = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    *(void *)(v58 + 520) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v58 + 888);
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 32;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(void *)(v33 + 24) = v32;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v36 + 24) = v33;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v37 = v11;
    swift_retain();
    *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[1] = v34;
    swift_retain();
    v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[3] = v35;
    swift_retain();
    v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v39))
    {
      uint64_t v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v23 = createStorage<A>(capacity:type:)(0);
      uint64_t v24 = createStorage<A>(capacity:type:)(1);
      uint64_t v66 = v22;
      uint64_t v67 = v23;
      uint64_t v68 = v24;
      serialize(_:at:)(2, &v66);
      serialize(_:at:)(1, &v66);
      char v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      char v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      char v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      _os_log_impl(&dword_25D85A000, oslog, v39, "#SendPaymentUnsupportedValueStrategy unknown parameter: %s", v22, size);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v22, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v15 = *(void *)(v58 + 784);
    uint64_t v16 = *(void *)(v58 + 768);
    uint64_t v17 = *(void *)(v58 + 760);
    uint64_t v18 = *(void *)(v58 + 744);

    v47(v15, v16);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v20 = ParameterIdentifier.name.getter();
    uint64_t v19 = v12;
    v51(v17, v18);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v13 = v20;
    *(void *)(v13 + 8) = v19;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)(v58 + 488) + 8);
    return v14();
  }
  else
  {
    uint64_t v40 = *(void *)(v58 + 624);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v58 + 880) = v4;
    swift_retain();
    outlined init with copy of GlobalsProviding(v40 + 144, v58 + 16);
    swift_release();
    uint64_t v41 = *(void *)(v58 + 40);
    uint64_t v42 = *(void *)(v58 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + 16), v41);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 56) + **(int **)(v42 + 56));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v58 + 800) = v5;
    *uint64_t v5 = *(void *)(v58 + 488);
    v5[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v6 = *(void *)(v58 + 704);
    uint64_t v7 = *(void *)(v58 + 616);
    return v43(v6, v7, v41, v42);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  SiriPaymentsIntents::SendPaymentSlots_optional v4 = *v1;
  *(void *)(v4 + 488) = *v1;
  *(void *)(v4 + 808) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    uint64_t v2 = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v1 = v0[90];
  uint64_t v2 = v0[89];
  uint64_t v3 = v0[88];
  v0[61] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(*(void *)(v49 + 704));
    __swift_destroy_boxed_opaque_existential_0(v49 + 16);
    ParameterResolutionRecord.app.getter();
    uint64_t v38 = App.sirikitApp.getter();
    *(void *)(v49 + 816) = v38;
    *(void *)(v49 + 528) = v38;
    swift_release();
    os_log_type_t v39 = (id)ParameterResolutionRecord.intent.getter();
    *(void *)(v49 + 824) = v39;
    *(void *)(v49 + 536) = v39;
    uint64_t v40 = objc_msgSend(v39, sel_note);
    if (v40)
    {
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v7;

      uint64_t v36 = v34;
      uint64_t v37 = v35;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    *(void *)(v49 + 832) = v37;
    *(void *)(v49 + 472) = v36;
    *(void *)(v49 + 480) = v37;
    type metadata accessor for PaymentsDialogConcept.Builder();
    uint64_t v32 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(void *)(v49 + 840) = v32;
    *(void *)(v49 + 544) = v32;
    uint64_t v33 = objc_msgSend(v39, sel_payee);
    if (v33)
    {
      uint64_t v27 = *(void *)(v49 + 624);
      *(void *)(v49 + 568) = v33;
      type metadata accessor for DialogPerson();
      int v8 = v33;
      swift_retain();
      outlined init with copy of GlobalsProviding(v27 + 104, v49 + 176);
      swift_release();
      uint64_t v29 = *(void *)(v49 + 200);
      unint64_t v28 = *(void *)(v49 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v49 + 176), v29);
      (*(void (**)(uint64_t))(v28 + 16))(v29);
      __swift_project_boxed_opaque_existential_1((void *)(v49 + 216), *(void *)(v49 + 240));
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v31 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0(v49 + 216);
      __swift_destroy_boxed_opaque_existential_0(v49 + 176);
      swift_retain();
      uint64_t v30 = (uint64_t *)(v32 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
      swift_beginAccess();
      *uint64_t v30 = v31;
      swift_release();
      swift_endAccess();
      swift_release();
    }
    uint64_t v26 = objc_msgSend(v39, sel_currencyAmount);
    if (v26)
    {
      *(void *)(v49 + 560) = v26;
      type metadata accessor for DialogCurrency.Builder();
      DialogCurrency.Builder.__allocating_init()();
      uint64_t v25 = objc_msgSend(v26, sel_amount);
      if (v25)
      {
        objc_msgSend(v25, sel_doubleValue);
      }
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      uint64_t v24 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      swift_retain();
      swift_beginAccess();
      *(void *)(v32 + 16) = v24;
      swift_release();
      swift_endAccess();
      swift_release();
    }
    swift_bridgeObjectRetain();
    if (v37)
    {
      uint64_t v23 = *(void *)(v49 + 680);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 56))(v23, 0, 1);
    }
    else
    {
      uint64_t v15 = *(void *)(v49 + 680);
      uint64_t v14 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v15, 1);
    }
    uint64_t v20 = *(unsigned char *)(v49 + 881);
    uint64_t v18 = *(const void **)(v49 + 680);
    uint64_t v16 = *(void **)(v49 + 672);
    uint64_t v21 = *(void *)(v49 + 664);
    uint64_t v19 = *(void *)(v49 + 624);
    outlined init with copy of SpeakableString?(v18, v16);
    uint64_t v17 = (void *)(v32 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
    swift_beginAccess();
    outlined assign with take of SpeakableString?(v16, v17);
    swift_endAccess();
    outlined destroy of SpeakableString?((uint64_t)v18);
    swift_retain();
    swift_retain();
    swift_beginAccess();
    *(void *)(v32 + 24) = v38;
    swift_release();
    swift_endAccess();
    swift_release();
    uint64_t v22 = PaymentsDialogConcept.Builder.build()();
    *(void *)(v49 + 848) = v22;
    *(void *)(v49 + 552) = v22;
    swift_retain();
    *(void *)(v49 + 856) = *(void *)(v19 + 16);
    swift_retain();
    swift_release();
    SendPaymentSlots.rawValue.getter(v20);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 56))(v21, 0, 1);
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v49 + 864) = v11;
    *uint64_t v11 = *(void *)(v49 + 488);
    v11[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v12 = *(void *)(v49 + 728);
    uint64_t v13 = *(void *)(v49 + 664);
    return SendPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(v12, v13, v22);
  }
  else
  {
    uint64_t v47 = *(void *)(v49 + 736);
    uint64_t v48 = *(void *)(v49 + 712);
    uint64_t v45 = *(void *)(v49 + 696);
    uint64_t v43 = *(void *)(v49 + 624);
    uint64_t v44 = *(uint64_t **)(v49 + 608);
    uint64_t v46 = *(void *)(v49 + 720);
    (*(void (**)(void))(v46 + 32))();
    __swift_destroy_boxed_opaque_existential_0(v49 + 16);
    swift_retain();
    outlined init with copy of GlobalsProviding(v43 + 104, v49 + 256);
    swift_release();
    uint64_t v42 = *(void *)(v49 + 280);
    uint64_t v41 = *(void *)(v49 + 288);
    __swift_project_boxed_opaque_existential_1((void *)(v49 + 256), v42);
    (*(void (**)(uint64_t))(v41 + 16))(v42);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    SiriPaymentsIntents::SendPaymentSlots_optional v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v45, 1);
    *(void *)(v49 + 336) = 0;
    *(void *)(v49 + 344) = 0;
    *(void *)(v49 + 352) = 0;
    *(void *)(v49 + 360) = 0;
    *(void *)(v49 + 368) = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v44[3] = type metadata accessor for AceOutput();
    v44[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v44);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v49 + 336);
    outlined destroy of NLContextUpdate?(v45);
    __swift_destroy_boxed_opaque_existential_0(v49 + 296);
    __swift_destroy_boxed_opaque_existential_0(v49 + 256);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(v49 + 488) + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v1;
  uint64_t v5 = *v1 + 16;
  *(void *)(v6 + 488) = *v1;
  *(void *)(v6 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    SiriPaymentsIntents::SendPaymentSlots_optional v4 = *(void *)(v5 + 648);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  uint64_t v12 = (id)v0[103];
  uint64_t v10 = v0[91];
  uint64_t v9 = v0[90];
  uint64_t v11 = v0[89];
  int v8 = v0[87];
  uint64_t v6 = v0[78];
  uint64_t v7 = (uint64_t *)v0[76];
  v0[61] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 7));
  swift_release();
  uint64_t v5 = v0[10];
  SiriPaymentsIntents::SendPaymentSlots_optional v4 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v8, 1);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[61] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 488) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  id v4;
  uint64_t v5;

  SiriPaymentsIntents::SendPaymentSlots_optional v4 = (id)v0[103];
  uint64_t v3 = v0[83];
  v0[61] = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[61] + 8);
  return v1();
}

uint64_t implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.name.getter();
  uint64_t v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  return v8;
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 112) = v2;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 240) = 0;
  uint64_t v3 = type metadata accessor for ParameterIdentifier();
  *(void *)(v2 + 160) = v3;
  *(void *)(v2 + 168) = *(void *)(v3 - 8);
  *(void *)(v2 + 176) = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(void *)(v2 + 184) = v4;
  uint64_t v7 = *(void *)(v4 - 8);
  *(void *)(v2 + 192) = v7;
  *(void *)(v2 + 200) = *(void *)(v7 + 64);
  *(void *)(v2 + 208) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v2 + 216) = v5;
  *(void *)(v2 + 224) = *(void *)(v5 - 8);
  *(void *)(v2 + 232) = swift_task_alloc();
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return MEMORY[0x270FA2498](SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0);
}

uint64_t SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v88 = v0;
  uint64_t v57 = *(void *)(v0 + 232);
  uint64_t v60 = *(void *)(v0 + 224);
  uint64_t v61 = *(void *)(v0 + 216);
  uint64_t v66 = *(void *)(v0 + 208);
  uint64_t v62 = *(void *)(v0 + 192);
  uint64_t v67 = *(void *)(v0 + 184);
  uint64_t v63 = *(void *)(v0 + 152);
  *(void *)(v0 + 112) = v0;
  id v58 = (id)ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSendPaymentIntent();
  id v59 = (id)SiriKitPaymentsIntent.clone()();

  *(void *)(v0 + 136) = v59;
  uint64_t v1 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v57, v1, v61);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v64(v66, v63, v67);
  int v65 = *(_DWORD *)(v62 + 80);
  uint64_t v70 = swift_allocObject();
  uint64_t v68 = *(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32);
  v68(v70 + ((v65 + 16) & ~(unint64_t)v65), v66, v67);
  v64(v66, v63, v67);
  uint64_t v72 = swift_allocObject();
  v68(v72 + ((v65 + 16) & ~(unint64_t)v65), v66, v67);
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 144) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 244);
  uint64_t v74 = swift_allocObject();
  *(unsigned char *)(v74 + 16) = 32;
  uint64_t v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 8;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  *(void *)(v71 + 24) = v70;
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v76 + 24) = v71;
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = 32;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 8;
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = partial apply for implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:);
  *(void *)(v73 + 24) = v72;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v79 + 24) = v73;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v80 = v2;
  swift_retain();
  *uint64_t v80 = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[1] = v74;
  swift_retain();
  v80[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  id v80[3] = v75;
  swift_retain();
  v80[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[5] = v76;
  swift_retain();
  v80[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[7] = v77;
  swift_retain();
  v80[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[9] = v78;
  swift_retain();
  v80[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[11] = v79;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v81, v82))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v54 = createStorage<A>(capacity:type:)(0);
    uint64_t v55 = createStorage<A>(capacity:type:)(2);
    uint64_t v83 = buf;
    uint64_t v84 = v54;
    uint64_t v85 = v55;
    serialize(_:at:)(2, &v83);
    serialize(_:at:)(2, &v83);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint32_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    _os_log_impl(&dword_25D85A000, v81, v82, "#SendPaymentUnsupportedValueStrategy updating intent for slot '%s' with index '%s'", buf, size);
    destroyStorage<A>(_:count:)(v54, 0, v52);
    destroyStorage<A>(_:count:)(v55, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v43 = *(void *)(v56 + 232);
  uint64_t v44 = *(void *)(v56 + 216);
  uint64_t v46 = *(void *)(v56 + 176);
  uint64_t v47 = *(void *)(v56 + 160);
  uint64_t v42 = *(void *)(v56 + 224);
  uint64_t v45 = *(void *)(v56 + 168);

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v48(v46, v47);
  v4.SiriPaymentsIntents::SendPaymentSlots value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SendPaymentSlots value = v4.value;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    uint64_t v20 = *(void *)(v56 + 176);
    uint64_t v14 = *(void *)(v56 + 160);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v15 = ParameterIdentifier.name.getter();
    uint64_t v16 = v10;
    v48(v20, v14);
    id v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v16;
    *(void *)(v12 + 16) = v18;
    *(void *)(v12 + 24) = v17;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = v51;
    uint64_t v9 = *(uint64_t (**)(id))(*(void *)(v56 + 112) + 8);
  }
  else
  {
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v56 + 240) = v4;
    if (v4.value)
    {
      if (v4.value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
      {
        *(void *)(v56 + 48) = 0;
        *(void *)(v56 + 56) = 0;
        *(void *)(v56 + 64) = 0;
        *(void *)(v56 + 72) = 0;
        if (*(void *)(v56 + 72))
        {
          uint64_t v31 = *(void *)(v56 + 72);
          uint64_t v29 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 48), v31);
          uint64_t v30 = *(void *)(v31 - 8);
          uint64_t v32 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v30 + 16))(v32, v29, v31);
          uint64_t v33 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v56 + 48);
          uint64_t v34 = v33;
        }
        else
        {
          uint64_t v34 = 0;
        }
        *(unsigned char *)(v56 + 242) = value;
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        uint64_t v6 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
        id v28 = (id)MEMORY[0x2611B9130](v6);
        swift_bridgeObjectRelease();
        objc_msgSend(v59, sel_setValue_forKey_, v34, v28);

        swift_unknownObjectRelease();
      }
      else
      {
        *(void *)(v56 + 16) = 0;
        *(void *)(v56 + 24) = 0;
        *(void *)(v56 + 32) = 0;
        *(void *)(v56 + 40) = 0;
        if (*(void *)(v56 + 40))
        {
          uint64_t v24 = *(void *)(v56 + 40);
          uint64_t v22 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 16), v24);
          uint64_t v23 = *(void *)(v24 - 8);
          uint64_t v25 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v23 + 16))(v25, v22, v24);
          uint64_t v26 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v56 + 16);
          uint64_t v27 = v26;
        }
        else
        {
          uint64_t v27 = 0;
        }
        *(unsigned char *)(v56 + 241) = value;
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
        uint64_t v7 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
        id v21 = (id)MEMORY[0x2611B9130](v7);
        swift_bridgeObjectRelease();
        objc_msgSend(v59, sel_setValue_forKey_, v27, v21);

        swift_unknownObjectRelease();
      }
    }
    else
    {
      *(void *)(v56 + 80) = 0;
      *(void *)(v56 + 88) = 0;
      *(void *)(v56 + 96) = 0;
      *(void *)(v56 + 104) = 0;
      if (*(void *)(v56 + 104))
      {
        uint64_t v38 = *(void *)(v56 + 104);
        uint64_t v36 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 80), v38);
        uint64_t v37 = *(void *)(v38 - 8);
        uint64_t v39 = swift_task_alloc();
        (*(void (**)(uint64_t, void *, uint64_t))(v37 + 16))(v39, v36, v38);
        uint64_t v40 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
        swift_task_dealloc();
        __swift_destroy_boxed_opaque_existential_0(v56 + 80);
        uint64_t v41 = v40;
      }
      else
      {
        uint64_t v41 = 0;
      }
      *(unsigned char *)(v56 + 243) = 0;
      lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
      lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
      uint64_t v5 = Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
      id v35 = (id)MEMORY[0x2611B9130](v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v59, sel_setValue_forKey_, v41, v35);

      swift_unknownObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = v59;
    uint64_t v9 = *(uint64_t (**)(id))(*(void *)(v56 + 112) + 8);
  }
  return v9(v8);
}

uint64_t implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.multicardinalIndex.getter();
  int v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  uint64_t v10 = v8;
  char v11 = v9 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  return Optional.debugDescription.getter();
}

uint64_t SendPaymentUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SendPaymentUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SendPaymentUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  id v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *unint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SendPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SendPaymentUnsupportedValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F664F0](a1, a2, v6, a4);
}

uint64_t sub_25D9824F8()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);

  return implicit closure #1 in SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)();
}

uint64_t sub_25D982634()
{
  return swift_deallocObject();
}

uint64_t sub_25D982660()
{
  return swift_deallocObject();
}

uint64_t sub_25D98268C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9826CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D98270C()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9827DC()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);

  return implicit closure #2 in SendPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)();
}

uint64_t sub_25D982918()
{
  return swift_deallocObject();
}

uint64_t sub_25D982944()
{
  return swift_deallocObject();
}

uint64_t sub_25D982970()
{
  return swift_deallocObject();
}

uint64_t sub_25D9829B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9829F0()
{
  return swift_deallocObject();
}

uint64_t sub_25D982A1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D982A48()
{
  return swift_deallocObject();
}

uint64_t sub_25D982A88()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentUnsupportedValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for SendPaymentUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  Collection.prefix(_:)();
  Substring.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  default argument 0 of Collection.dropFirst(_:)();
  Collection.dropFirst(_:)();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  outlined destroy of Substring();
  outlined destroy of String.UTF8View();
  uint64_t v0 = v3;
  uint64_t v1 = v4;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t default argument 0 of Collection.dropFirst(_:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Substring()
{
}

uint64_t PaymentsAppResolver.__allocating_init(appLister:)(uint64_t a1)
{
  return PaymentsAppResolver.init(appLister:)(a1);
}

uint64_t PaymentsAppResolver.init(appLister:)(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(*v1 + class metadata base offset for PaymentsAppResolver);
  uint64_t v6 = a1;
  swift_retain();
  uint64_t v8 = v1;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v5);
  outlined init with take of CommonLabelsProviding(v5, (char *)v1 + *(void *)(*v1 + class metadata base offset for PaymentsAppResolver + 16));
  swift_release();
  uint64_t v4 = AppResolutionService.init()();
  swift_retain();
  uint64_t v8 = (void *)v4;
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_release();
  return v4;
}

Swift::Bool __swiftcall PaymentsAppResolver.isAppOnDevice(_:)(Swift::String a1)
{
  Swift::String v88 = a1;
  uint64_t v81 = 0;
  uint64_t v71 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  uint64_t v72 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v73 = partial apply for implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:);
  uint64_t v74 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v101 = 0;
  BOOL v99 = 0;
  uint64_t v86 = *v1;
  uint64_t v82 = type metadata accessor for Logger();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = v82 - 8;
  unint64_t v85 = (*(void *)(v83 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v87 = (char *)v33 - v85;
  uint64_t v102 = v2;
  uint64_t v103 = v3;
  uint64_t v101 = v1;
  v100[1] = *(id *)(v86 + class metadata base offset for PaymentsAppResolver);
  type metadata accessor for LSApplicationRecord();
  swift_bridgeObjectRetain();
  id v4 = LSApplicationRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v88._countAndFlagsBits, (uint64_t)v88._object, 0);
  uint64_t v89 = 0;
  id v90 = v4;
  uint64_t v91 = 0;
  *(void *)&v70[3] = v4;
  *(void *)&v70[5] = 0;
  v70[2] = 0;
  v100[0] = v4;
  *(void *)uint64_t v70 = v4 != 0;
  uint64_t v5 = v87;
  BOOL v45 = v4 != 0;
  outlined destroy of SFRichText?(v100);
  int v44 = 1;
  BOOL v99 = v45;
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v5, v6, v82);
  swift_bridgeObjectRetain();
  uint64_t v55 = 32;
  uint64_t v56 = 7;
  uint64_t v7 = swift_allocObject();
  object = v88._object;
  uint64_t v50 = v7;
  *(void *)(v7 + 16) = v88._countAndFlagsBits;
  *(void *)(v7 + 24) = object;
  uint64_t v53 = 17;
  uint64_t v57 = swift_allocObject();
  *(unsigned char *)(v57 + 16) = v45 & v44;
  uint64_t v68 = Logger.logObject.getter();
  int v69 = static os_log_type_t.debug.getter();
  uint64_t v48 = &v97;
  uint64_t v97 = 22;
  unint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v49 = v98;
  uint64_t v59 = swift_allocObject();
  int v52 = 32;
  *(unsigned char *)(v59 + 16) = 32;
  uint64_t v60 = swift_allocObject();
  int v54 = 8;
  *(unsigned char *)(v60 + 16) = 8;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v50;
  uint64_t v51 = v9;
  *(void *)(v9 + 16) = v71;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v51;
  uint64_t v61 = v11;
  *(void *)(v11 + 16) = v72;
  *(void *)(v11 + 24) = v12;
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = v52;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = v54;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v57;
  uint64_t v58 = v13;
  *(void *)(v13 + 16) = v73;
  *(void *)(v13 + 24) = v14;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v58;
  uint64_t v65 = v15;
  *(void *)(v15 + 16) = v74;
  *(void *)(v15 + 24) = v16;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v64 = _allocateUninitializedArray<A>(_:)();
  uint64_t v66 = v17;
  swift_retain();
  uint64_t v18 = v59;
  id v19 = v66;
  *uint64_t v66 = v75;
  v19[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = v60;
  uint64_t v21 = v66;
  v66[2] = v76;
  v21[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
  swift_retain();
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v61;
  uint64_t v23 = v66;
  v66[4] = v77;
  v23[5] = v22;
  swift_retain();
  uint64_t v24 = v62;
  uint64_t v25 = v66;
  v66[6] = v78;
  v25[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  swift_retain();
  uint64_t v26 = v63;
  uint64_t v27 = v66;
  v66[8] = v79;
  v27[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
  swift_retain();
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
  uint64_t v29 = v66;
  v66[10] = v80;
  v29[11] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, (os_log_type_t)v69))
  {
    uint64_t v30 = *(void *)&v70[1];
    uint64_t v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v37 = createStorage<A>(capacity:type:)(0);
    uint64_t v38 = createStorage<A>(capacity:type:)(2);
    uint64_t v40 = &v96;
    uint64_t v96 = v36;
    uint64_t v41 = &v95;
    uint64_t v95 = v37;
    uint64_t v42 = &v94;
    uint64_t v94 = v38;
    unsigned int v39 = 2;
    serialize(_:at:)(2, &v96);
    serialize(_:at:)(v39, v40);
    uint64_t v92 = v75;
    uint64_t v93 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
    uint64_t v43 = v30;
    if (v30)
    {
      __break(1u);
    }
    else
    {
      uint64_t v92 = v76;
      uint64_t v93 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
      uint64_t v34 = 0;
      uint64_t v31 = v34;
      uint64_t v92 = v77;
      uint64_t v93 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
      void v33[5] = v31;
      uint64_t v92 = v78;
      uint64_t v93 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
      v33[4] = 0;
      uint64_t v92 = v79;
      uint64_t v93 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
      v33[3] = 0;
      uint64_t v92 = v80;
      uint64_t v93 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v96, (uint64_t)&v95, (uint64_t)&v94);
      _os_log_impl(&dword_25D85A000, v68, (os_log_type_t)v69, "#PaymentsAppResolver isAppOnDevice for %s, %s", v36, v49);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v36, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v82);
  return v45;
}

uint64_t sub_25D983BD8()
{
  return swift_deallocObject();
}

uint64_t implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("found LSApplicationRecord", 0x19uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("could not find LSApplicationRecord", 0x22uLL, 1)._countAndFlagsBits;
  }
}

uint64_t sub_25D983C94()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)()
{
  return implicit closure #2 in PaymentsAppResolver.isAppOnDevice(_:)(*(unsigned char *)(v0 + 16) & 1);
}

uint64_t PaymentsAppResolver.listApps(siriAuthorizationRestriction:)(uint64_t a1)
{
  v2[14] = v1;
  v2[13] = a1;
  v2[9] = v2;
  v2[10] = 0;
  v2[11] = 0;
  uint64_t v5 = *v1;
  v2[15] = *v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[10] = a1;
  v2[11] = v1;
  v2[19] = *(void *)(v5 + class metadata base offset for PaymentsAppResolver);
  return MEMORY[0x270FA2498](PaymentsAppResolver.listApps(siriAuthorizationRestriction:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = *v1;
  *(void *)(v3 + 176) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](PaymentsAppResolver.listApps(siriAuthorizationRestriction:), 0);
}

uint64_t PaymentsAppResolver.listApps(siriAuthorizationRestriction:)()
{
  uint64_t v44 = v0;
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 136);
  uint64_t v26 = *(void *)(v0 + 128);
  uint64_t v28 = *(void *)(v0 + 120);
  *(void *)(v0 + 72) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v2, v26);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = *(void *)(v28 + class metadata base offset for PaymentsAppResolver + 8);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 96) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v29 = *(_DWORD *)(v0 + 184);
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 32;
  uint64_t v34 = swift_allocObject();
  *(unsigned char *)(v34 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(void *)(v31 + 24) = v30;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v32 + 24) = v31;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v35 + 24) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v36 = v3;
  swift_retain();
  *uint64_t v36 = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[1] = v33;
  swift_retain();
  v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v36[3] = v34;
  swift_retain();
  v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v37, v38))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    unsigned int v39 = buf;
    uint64_t v40 = v22;
    uint64_t v41 = v23;
    serialize(_:at:)(2, &v39);
    serialize(_:at:)(1, &v39);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v35;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    _os_log_impl(&dword_25D85A000, v37, v38, "#PaymentsAppResolver listApps for intent %s", buf, v29);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v12 = v24[18];
  uint64_t v13 = v24[16];
  uint64_t v14 = (void *)v24[14];
  uint64_t v11 = v24[17];

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  outlined init with copy of GlobalsProviding((uint64_t)v14 + *(void *)(*v14 + class metadata base offset for PaymentsAppResolver + 16), (uint64_t)(v24 + 2));
  uint64_t v16 = v24[5];
  uint64_t v17 = v24[6];
  __swift_project_boxed_opaque_existential_1(v24 + 2, v16);
  v24[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v24[8] = v4;
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation(_:)();
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  uint64_t v19 = String.init(stringInterpolation:)();
  uint64_t v15 = v7;
  v24[20] = v7;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 8) + **(int **)(v17 + 8));
  uint64_t v8 = (void *)swift_task_alloc();
  v24[21] = v8;
  *uint64_t v8 = v24[9];
  v8[1] = PaymentsAppResolver.listApps(siriAuthorizationRestriction:);
  uint64_t v9 = v24[13];
  return v18(v19, v15, v9, v16, v17);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)(v0 + 72) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 72) + 8);
  uint64_t v2 = *(void *)(v4 + 176);
  return v1(v2);
}

uint64_t PaymentsAppResolver.__allocating_init()()
{
  return PaymentsAppResolver.init()();
}

uint64_t PaymentsAppResolver.init()()
{
  if (!"SiriPaymentsIntents.PaymentsAppResolver")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriPaymentsIntents.PaymentsAppResolver", 39, (unint64_t)"init()", 6, 2, (unint64_t)"SiriPaymentsIntents/PaymentsAppResolver.swift", 45, 2, v1, 0xDuLL, 7uLL);
  __break(1u);
  return result;
}

uint64_t PaymentsAppResolver.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v0 + *(void *)(*v0
                                                                            + class metadata base offset for PaymentsAppResolver
                                                                            + 16));
}

void *PaymentsAppResolver.deinit()
{
  uint64_t v1 = (void *)AppResolutionService.deinit();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v1 + *(void *)(*v1
                                                                     + class metadata base offset for PaymentsAppResolver
                                                                     + 16));
  return v1;
}

uint64_t PaymentsAppResolver.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_25D984BC0()
{
  return swift_deallocObject();
}

uint64_t sub_25D984BEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D984C18()
{
  return swift_deallocObject();
}

uint64_t sub_25D984C58()
{
  return swift_deallocObject();
}

uint64_t sub_25D984C98()
{
  return swift_deallocObject();
}

uint64_t sub_25D984CC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D984CF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D984D30()
{
  return swift_deallocObject();
}

uint64_t sub_25D984D70()
{
  return swift_deallocObject();
}

uint64_t sub_25D984DAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D984DD8()
{
  return swift_deallocObject();
}

uint64_t sub_25D984E04()
{
  return swift_deallocObject();
}

uint64_t sub_25D984E44()
{
  return swift_deallocObject();
}

uint64_t sub_25D984E84()
{
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsAppResolver()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PaymentsAppResolver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SearchForAccountsNeedsValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v1 = type metadata accessor for INSearchForAccountsIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SearchForAccountsNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SearchForAccountsNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  uint64_t v47 = 0;
  uint32_t v29 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = type metadata accessor for Parse();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = v31 - 8;
  unint64_t v34 = (*(void *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  char v35 = &v13[-v34];
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v41 = v42 - 8;
  unint64_t v38 = (*(void *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v37);
  unint64_t v4 = &v13[-v38];
  unsigned int v39 = &v13[-v38];
  uint64_t v59 = v3;
  uint64_t v58 = v5;
  uint64_t v57 = v6;
  uint64_t v7 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v40 + 16))(v4, v7, v42);
  uint32_t v49 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  uint64_t v45 = &v55;
  uint64_t v55 = 2;
  unint64_t v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v46 = v56;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v50 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v49, (os_log_type_t)v48))
  {
    uint64_t v8 = v30;
    uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = 0;
    uint64_t v19 = createStorage<A>(capacity:type:)(0);
    uint64_t v20 = createStorage<A>(capacity:type:)(v17);
    uint64_t v24 = &v54;
    int v54 = v18;
    uint64_t v25 = &v53;
    uint64_t v53 = v19;
    uint64_t v22 = &v52;
    uint64_t v52 = v20;
    unsigned int v21 = 0;
    serialize(_:at:)(0, &v54);
    serialize(_:at:)(v21, v24);
    uint64_t v51 = v50;
    uint64_t v23 = v13;
    MEMORY[0x270FA5388](v13);
    uint64_t v9 = v25;
    uint64_t v10 = &v13[-48];
    uint64_t v26 = &v13[-48];
    v10[2] = v24;
    v10[3] = v9;
    v10[4] = v11;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v49, (os_log_type_t)v48, "#SearchForAccountsNeedsValueStrategy actionForInput.", v18, v46);
      uint64_t v15 = 0;
      destroyStorage<A>(_:count:)(v19, 0, v16);
      destroyStorage<A>(_:count:)(v20, v15, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v18, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v39, v42);
  Input.parse.getter();
  int v14 = Parse.isCancel.getter();
  (*(void (**)(unsigned char *, uint64_t))(v32 + 8))(v35, v31);
  if (v14) {
    return static ActionForInput.cancel()();
  }
  else {
    return static ActionForInput.handle()();
  }
}

uint64_t SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 248) = v2;
  *(void *)(v3 + 240) = a2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 168) = v3;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 376) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 272) = v4;
  *(void *)(v3 + 280) = *(void *)(v4 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 296) = v5;
  *(void *)(v3 + 304) = *(void *)(v5 - 8);
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 320) = v6;
  *(void *)(v3 + 328) = *(void *)(v6 - 8);
  *(void *)(v3 + 336) = swift_task_alloc();
  *(void *)(v3 + 176) = a2;
  *(void *)(v3 + 184) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:), 0);
}

uint64_t SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v34 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 320);
  *(void *)(v0 + 168) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v1, v2, v35);
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 192) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v36 = *(unsigned int *)(v0 + 380);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v39 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v38, v37))
  {
    uint32_t v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v30 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    *(void *)(v33 + 200) = v29;
    *(void *)(v33 + 208) = v30;
    *(void *)(v33 + 216) = v31;
    serialize(_:at:)(0, (unsigned char **)(v33 + 200));
    serialize(_:at:)(0, (unsigned char **)(v33 + 200));
    *(void *)(v33 + 224) = v39;
    uint64_t v32 = (void *)swift_task_alloc();
    v32[2] = v33 + 200;
    v32[3] = v33 + 208;
    v32[4] = v33 + 216;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v38, v37, "#SearchForAccountsNeedsValueStrategy makePromptForValue.", v29, v36);
    destroyStorage<A>(_:count:)(v30, 0, v28);
    destroyStorage<A>(_:count:)(v31, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v29, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v33 + 336);
  uint64_t v22 = *(void *)(v33 + 320);
  uint64_t v24 = *(void *)(v33 + 312);
  uint64_t v25 = *(void *)(v33 + 296);
  uint64_t v20 = *(void *)(v33 + 328);
  uint64_t v23 = *(void *)(v33 + 304);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(void *)(v33 + 344) = v3;
  *(void *)(v33 + 136) = rawValue._countAndFlagsBits;
  *(void *)(v33 + 144) = v3;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  swift_bridgeObjectRetain();
  v4.SiriPaymentsIntents::SearchForAccountsSlots value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SearchForAccountsSlots value = v4.value;
  *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v33 + 377) = v4;
  if (v4.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(void *)(v33 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v33 + 160) = v10;
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v17 = String.init(stringInterpolation:)();
    uint64_t v16 = v13;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v14 = rawValue;
    *(void *)(v14 + 16) = v17;
    *(void *)(v14 + 24) = v16;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 40) = 0;
    *(unsigned char *)(v14 + 48) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(*(void *)(v33 + 168) + 8);
    return v15();
  }
  else
  {
    uint64_t v19 = *(void *)(v33 + 264);
    uint64_t v18 = *(void *)(v33 + 248);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v33 + 376) = v4;
    swift_retain();
    *(void *)(v33 + 352) = *(void *)(v18 + 16);
    swift_retain();
    swift_release();
    SearchForAccountsSlots.rawValue.getter(value);
    SpeakableString.init(print:speak:)();
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 56))(v19, 0, 1);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v33 + 360) = v6;
    *uint64_t v6 = *(void *)(v33 + 168);
    v6[1] = SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:);
    uint64_t v7 = *(void *)(v33 + 288);
    uint64_t v8 = *(void *)(v33 + 264);
    return SearchForAccountsCATs.promptForSlotValue(slot:)(v7, v8);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  SiriPaymentsIntents::SearchForAccountsSlots_optional v4 = (void *)*v1;
  v4[21] = *v1;
  v4[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[33]);
    swift_release();
    uint64_t v2 = SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v7 = *(unsigned __int8 *)(v0 + 377);
  Swift::String v11 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 272);
  Swift::String v12 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v8 = *(uint64_t **)(v0 + 232);
  *(void *)(v0 + 168) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, v0 + 16);
  swift_release();
  uint64_t v5 = *(void *)(v0 + 40);
  SiriPaymentsIntents::SearchForAccountsSlots_optional v4 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:)(v7, v12);
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v12, 0, 1);
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 168) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 168) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 168) + 8);
  return v2();
}

uint64_t SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 368) = v3;
  *(void *)(v4 + 360) = a3;
  *(void *)(v4 + 352) = a2;
  *(void *)(v4 + 344) = a1;
  *(void *)(v4 + 192) = v4;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 208) = 0;
  *(void *)(v4 + 216) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(unsigned char *)(v4 + 528) = 0;
  *(void *)(v4 + 296) = 0;
  uint64_t v5 = type metadata accessor for Parse();
  *(void *)(v4 + 376) = v5;
  *(void *)(v4 + 384) = *(void *)(v5 - 8);
  *(void *)(v4 + 392) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  *(void *)(v4 + 400) = v6;
  uint64_t v10 = *(void *)(v6 - 8);
  *(void *)(v4 + 408) = v10;
  *(void *)(v4 + 416) = *(void *)(v10 + 64);
  *(void *)(v4 + 424) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 432) = v7;
  *(void *)(v4 + 440) = *(void *)(v7 - 8);
  *(void *)(v4 + 448) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v4 + 456) = v8;
  *(void *)(v4 + 464) = *(void *)(v8 - 8);
  *(void *)(v4 + 472) = swift_task_alloc();
  *(void *)(v4 + 480) = swift_task_alloc();
  *(void *)(v4 + 488) = swift_task_alloc();
  *(void *)(v4 + 496) = swift_task_alloc();
  *(void *)(v4 + 504) = swift_task_alloc();
  *(void *)(v4 + 512) = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  *(void *)(v4 + 520) = swift_task_alloc();
  *(void *)(v4 + 200) = a2;
  *(void *)(v4 + 208) = a3;
  *(void *)(v4 + 216) = v3;
  return MEMORY[0x270FA2498](SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:), 0);
}

uint64_t SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v173 = v0;
  uint64_t v140 = *(void *)(v0 + 520);
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v141 = *(void *)(v0 + 464);
  uint64_t v142 = *(void *)(v0 + 456);
  *(void *)(v0 + 192) = v0;
  uint64_t v2 = SignpostName.parseResponseValueNeedsValue.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v140);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 16);
  v143(v1, v3, v142);
  oslog = Logger.logObject.getter();
  os_log_type_t v145 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 224) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v0 + 532);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v147 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v145))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v136 = createStorage<A>(capacity:type:)(0);
    uint64_t v137 = createStorage<A>(capacity:type:)(0);
    *(void *)(v139 + 312) = buf;
    *(void *)(v139 + 320) = v136;
    *(void *)(v139 + 328) = v137;
    serialize(_:at:)(0, (unsigned char **)(v139 + 312));
    serialize(_:at:)(0, (unsigned char **)(v139 + 312));
    *(void *)(v139 + 336) = v147;
    uint64_t v138 = (void *)swift_task_alloc();
    v138[2] = v139 + 312;
    v138[3] = v139 + 320;
    v138[4] = v139 + 328;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v145, "#SearchForAccountsNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v136, 0, v134);
    destroyStorage<A>(_:count:)(v137, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v126 = *(void *)(v139 + 512);
  uint64_t v127 = *(void *)(v139 + 456);
  uint64_t v130 = *(void *)(v139 + 448);
  uint64_t v131 = *(void *)(v139 + 432);
  uint64_t v125 = *(void *)(v139 + 464);
  uint64_t v129 = *(void *)(v139 + 440);

  uint64_t v128 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
  v128(v126, v127);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  *(void *)(v139 + 176) = rawValue._countAndFlagsBits;
  *(void *)(v139 + 184) = v4;
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v130, v131);
  swift_bridgeObjectRetain();
  v5.SiriPaymentsIntents::SearchForAccountsSlots value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SearchForAccountsSlots value = v5.value;
  if (v5.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    uint64_t v20 = *(void *)(v139 + 472);
    uint64_t v34 = *(void *)(v139 + 456);
    uint64_t v21 = Logger.payments.unsafeMutableAddressor();
    v143(v20, v21, v34);
    swift_bridgeObjectRetain();
    uint64_t v36 = swift_allocObject();
    *(Swift::String *)(v36 + 16) = rawValue;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    *(void *)(v139 + 232) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v35 = *(_DWORD *)(v139 + 536);
    uint64_t v38 = swift_allocObject();
    *(unsigned char *)(v38 + 16) = 32;
    uint64_t v39 = swift_allocObject();
    *(unsigned char *)(v39 + 16) = 8;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(void *)(v37 + 24) = v36;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v40 + 24) = v37;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v41 = v22;
    swift_retain();
    *uint64_t v41 = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[1] = v38;
    swift_retain();
    v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v39;
    swift_retain();
    v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v32 = createStorage<A>(capacity:type:)(0);
      uint64_t v33 = createStorage<A>(capacity:type:)(1);
      uint64_t v148 = v31;
      uint64_t v149 = v32;
      uint64_t v150 = v33;
      serialize(_:at:)(2, &v148);
      serialize(_:at:)(1, &v148);
      uint64_t v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v152 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v148, (uint64_t)&v149, (uint64_t)&v150);
      uint64_t v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v152 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v148, (uint64_t)&v149, (uint64_t)&v150);
      uint64_t v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v152 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v148, (uint64_t)&v149, (uint64_t)&v150);
      _os_log_impl(&dword_25D85A000, v42, v43, "#SearchForAccountsNeedsValueStrategy failed to map to known SearchForAccountsSlot, for record parameter: %s. Returning original intent and nil answeredValue", v31, v35);
      destroyStorage<A>(_:count:)(v32, 0, v30);
      destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v31, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v29 = *(void *)(v139 + 520);
    uint64_t v26 = *(void *)(v139 + 472);
    uint64_t v27 = *(void *)(v139 + 456);
    uint64_t v28 = *(void *)(v139 + 344);

    v128(v26, v27);
    ParameterResolutionRecord.intent.getter();
    type metadata accessor for INSearchForAccountsIntent();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 56))(v28, 0, 1);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v29);
  }
  else
  {
    uint64_t v6 = *(void *)(v139 + 504);
    uint64_t v115 = *(void *)(v139 + 456);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v139 + 528) = v5;
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    v143(v6, v7, v115);
    uint64_t v117 = swift_allocObject();
    *(unsigned char *)(v117 + 16) = value;
    log = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.debug.getter();
    *(void *)(v139 + 240) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v116 = *(_DWORD *)(v139 + 540);
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = 32;
    uint64_t v120 = swift_allocObject();
    *(unsigned char *)(v120 + 16) = 8;
    uint64_t v118 = swift_allocObject();
    *(void *)(v118 + 16) = partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v118 + 24) = v117;
    uint64_t v121 = swift_allocObject();
    *(void *)(v121 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v121 + 24) = v118;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v122 = v8;
    swift_retain();
    *uint64_t v122 = partial apply for closure #1 in OSLogArguments.append(_:);
    v122[1] = v119;
    swift_retain();
    v122[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v122[3] = v120;
    swift_retain();
    v122[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v122[5] = v121;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v124))
    {
      uint64_t v112 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v113 = createStorage<A>(capacity:type:)(0);
      uint64_t v114 = createStorage<A>(capacity:type:)(1);
      unint64_t v168 = v112;
      uint64_t v169 = v113;
      uint64_t v170 = v114;
      serialize(_:at:)(2, &v168);
      serialize(_:at:)(1, &v168);
      unint64_t v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v172 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      unint64_t v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v172 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      unint64_t v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v172 = v121;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      _os_log_impl(&dword_25D85A000, log, v124, "#SearchForAccountsNeedsValueStrategy extracted slot from resolveRecord: %s", v112, v116);
      destroyStorage<A>(_:count:)(v113, 0, v111);
      destroyStorage<A>(_:count:)(v114, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v112, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v95 = *(void *)(v139 + 504);
    uint64_t v9 = *(void *)(v139 + 496);
    uint64_t v96 = *(void *)(v139 + 456);
    uint64_t v100 = *(void *)(v139 + 424);
    uint64_t v101 = *(void *)(v139 + 400);
    uint64_t v98 = *(void *)(v139 + 352);
    uint64_t v97 = *(void *)(v139 + 408);

    v128(v95, v96);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v143(v9, v10, v96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v100, v98, v101);
    unint64_t v99 = (*(unsigned __int8 *)(v97 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    uint64_t v103 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v97 + 32))(v103 + v99, v100, v101);
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.debug.getter();
    *(void *)(v139 + 248) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v102 = *(_DWORD *)(v139 + 544);
    uint64_t v105 = swift_allocObject();
    *(unsigned char *)(v105 + 16) = 32;
    uint64_t v106 = swift_allocObject();
    *(unsigned char *)(v106 + 16) = 8;
    uint64_t v104 = swift_allocObject();
    *(void *)(v104 + 16) = partial apply for implicit closure #3 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v104 + 24) = v103;
    uint64_t v107 = swift_allocObject();
    *(void *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v107 + 24) = v104;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v108 = v11;
    swift_retain();
    *uint64_t v108 = partial apply for closure #1 in OSLogArguments.append(_:);
    v108[1] = v105;
    swift_retain();
    v108[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v108[3] = v106;
    swift_retain();
    v108[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v108[5] = v107;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v93 = createStorage<A>(capacity:type:)(0);
      uint64_t v94 = createStorage<A>(capacity:type:)(1);
      uint64_t v163 = v92;
      uint64_t v164 = v93;
      uint64_t v165 = v94;
      serialize(_:at:)(2, &v163);
      serialize(_:at:)(1, &v163);
      uint64_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v105;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      uint64_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v106;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      uint64_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v107;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      _os_log_impl(&dword_25D85A000, v109, v110, "#SearchForAccountsNeedsValueStrategy new input: %s", v92, v102);
      destroyStorage<A>(_:count:)(v93, 0, v91);
      destroyStorage<A>(_:count:)(v94, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v92, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v81 = *(void *)(v139 + 496);
    uint64_t v82 = *(void *)(v139 + 456);
    uint64_t v88 = *(void *)(v139 + 392);
    uint64_t v89 = *(void *)(v139 + 376);
    uint64_t v85 = *(void *)(v139 + 368);
    uint64_t v87 = *(void *)(v139 + 384);

    v128(v81, v82);
    Input.parse.getter();
    id v86 = (id)ParameterResolutionRecord.intent.getter();
    swift_retain();
    outlined init with copy of GlobalsProviding(v85 + 104, v139 + 16);
    swift_release();
    uint64_t v84 = *(void *)(v139 + 40);
    uint64_t v83 = *(void *)(v139 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v139 + 16), v84);
    (*(void (**)(uint64_t))(v83 + 24))(v84);
    swift_retain();
    outlined init with copy of GlobalsProviding(v85 + 64, v139 + 96);
    swift_release();
    id v90 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v86, (uint64_t)&protocol witness table for INSearchForAccountsIntent, v139 + 56, v139 + 96);
    __swift_destroy_boxed_opaque_existential_0(v139 + 96);
    __swift_destroy_boxed_opaque_existential_0(v139 + 56);
    __swift_destroy_boxed_opaque_existential_0(v139 + 16);

    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v89);
    if (v90)
    {
      self;
      uint64_t v80 = swift_dynamicCastObjCClass();
      if (v80)
      {
        uint64_t v79 = (void *)v80;
      }
      else
      {

        uint64_t v79 = 0;
      }
      uint64_t v78 = v79;
    }
    else
    {
      uint64_t v78 = 0;
    }
    if (v78)
    {
      uint64_t v12 = *(void *)(v139 + 488);
      uint64_t v68 = *(void *)(v139 + 456);
      *(void *)(v139 + 296) = v78;
      uint64_t v13 = Logger.payments.unsafeMutableAddressor();
      v143(v12, v13, v68);
      id v14 = v78;
      uint64_t v70 = swift_allocObject();
      *(void *)(v70 + 16) = v78;
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.debug.getter();
      *(void *)(v139 + 304) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v69 = *(_DWORD *)(v139 + 552);
      uint64_t v72 = swift_allocObject();
      *(unsigned char *)(v72 + 16) = 64;
      uint64_t v73 = swift_allocObject();
      *(unsigned char *)(v73 + 16) = 8;
      uint64_t v71 = swift_allocObject();
      *(void *)(v71 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
      *(void *)(v71 + 24) = v70;
      uint64_t v74 = swift_allocObject();
      *(void *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(void *)(v74 + 24) = v71;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v75 = v15;
      swift_retain();
      *uint64_t v75 = partial apply for closure #1 in OSLogArguments.append(_:);
      v75[1] = v72;
      swift_retain();
      v75[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v75[3] = v73;
      swift_retain();
      v75[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v75[5] = v74;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v66 = createStorage<A>(capacity:type:)(1);
        uint64_t v67 = createStorage<A>(capacity:type:)(0);
        unint64_t v158 = v65;
        uint64_t v159 = v66;
        uint64_t v160 = v67;
        serialize(_:at:)(2, &v158);
        serialize(_:at:)(1, &v158);
        uint64_t v161 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v162 = v72;
        closure #1 in osLogInternal(_:log:type:)(&v161, (uint64_t)&v158, (uint64_t)&v159, (uint64_t)&v160);
        uint64_t v161 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v162 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v161, (uint64_t)&v158, (uint64_t)&v159, (uint64_t)&v160);
        uint64_t v161 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v162 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v161, (uint64_t)&v158, (uint64_t)&v159, (uint64_t)&v160);
        _os_log_impl(&dword_25D85A000, v76, v77, "#SearchForAccountsNeedsValueStrategy converted to SiriKit intent: %@", v65, v69);
        destroyStorage<A>(_:count:)(v66, 1, v64);
        destroyStorage<A>(_:count:)(v67, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v65, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v63 = *(void *)(v139 + 520);
      uint64_t v58 = *(void *)(v139 + 488);
      uint64_t v59 = *(void *)(v139 + 456);
      uint64_t v62 = *(void *)(v139 + 344);

      v128(v58, v59);
      id v60 = (id)ParameterResolutionRecord.intent.getter();
      *(void *)(v139 + 160) = &type metadata for SearchForAccountsSlots;
      *(void *)(v139 + 168) = &protocol witness table for SearchForAccountsSlots;
      *(unsigned char *)(v139 + 136) = value;
      unint64_t v61 = type metadata accessor for INSearchForAccountsIntent();
      SiriKitPaymentsIntent.value(forSlot:)((void *)(v139 + 136), v61, &v157);
      __swift_destroy_boxed_opaque_existential_0(v139 + 136);

      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 56))(v62, 0, 1);
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v63);
    }
    else
    {
      uint64_t v17 = *(void *)(v139 + 480);
      uint64_t v53 = *(void *)(v139 + 456);
      uint64_t v18 = Logger.payments.unsafeMutableAddressor();
      v143(v17, v18, v53);
      uint32_t v56 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      *(void *)(v139 + 256) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v54 = *(_DWORD *)(v139 + 548);
      uint64_t v57 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v56, v55))
      {
        uint32_t v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v50 = createStorage<A>(capacity:type:)(0);
        uint64_t v51 = createStorage<A>(capacity:type:)(0);
        *(void *)(v139 + 264) = v49;
        *(void *)(v139 + 272) = v50;
        *(void *)(v139 + 280) = v51;
        serialize(_:at:)(0, (unsigned char **)(v139 + 264));
        serialize(_:at:)(0, (unsigned char **)(v139 + 264));
        *(void *)(v139 + 288) = v57;
        uint64_t v52 = (void *)swift_task_alloc();
        v52[2] = v139 + 264;
        v52[3] = v139 + 272;
        v52[4] = v139 + 280;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v56, v55, "#SearchForAccountsNeedsValueStrategy failed to convert new input to INSearchForAccountsIntent, returning original intent and nil answeredValue.", v49, v54);
        destroyStorage<A>(_:count:)(v50, 0, v48);
        destroyStorage<A>(_:count:)(v51, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v49, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v47 = *(void *)(v139 + 520);
      uint64_t v44 = *(void *)(v139 + 480);
      uint64_t v45 = *(void *)(v139 + 456);
      uint64_t v46 = *(void *)(v139 + 344);

      v128(v44, v45);
      uint64_t v153 = 0;
      uint64_t v154 = 0;
      uint64_t v155 = 0;
      uint64_t v156 = 0;
      ParameterResolutionRecord.intent.getter();
      type metadata accessor for INSearchForAccountsIntent();
      IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSearchForAccountsIntent>);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 56))(v46, 0, 1);
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v47);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(*(void *)(v139 + 192) + 8);
  return v24();
}

uint64_t implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  lazy protocol witness table accessor for type Input and conformance Input();
  return String.init<A>(describing:)();
}

void *implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t SearchForAccountsNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SearchForAccountsNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SearchForAccountsNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  uint64_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SearchForAccountsNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66308](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66310](a1, a2, v6, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SearchForAccountsNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = v7;
  *(void *)(v7 + 16) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v8;
  uint64_t v9 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  *uint64_t v8 = *(void *)(v11 + 16);
  v8[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v9, a7);
}

uint64_t sub_25D989804()
{
  return swift_deallocObject();
}

uint64_t sub_25D98994C()
{
  return swift_deallocObject();
}

uint64_t sub_25D989978()
{
  return swift_deallocObject();
}

uint64_t sub_25D9899A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9899E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D989A24()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_25D989A58()
{
  return swift_deallocObject();
}

uint64_t sub_25D989A84()
{
  return swift_deallocObject();
}

uint64_t sub_25D989AB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D989AF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D989B30()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Input() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #3 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(v2);
}

uint64_t sub_25D989C64()
{
  return swift_deallocObject();
}

uint64_t sub_25D989C90()
{
  return swift_deallocObject();
}

uint64_t sub_25D989CBC()
{
  return swift_deallocObject();
}

uint64_t sub_25D989CFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D989D3C()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_25D989D84()
{
  return swift_deallocObject();
}

uint64_t sub_25D989DB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D989DDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D989E1C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsNeedsValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsNeedsValueStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SearchForAccountsNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy();
}

uint64_t static PaymentsDirectInvocations.from(_:)(uint64_t a1)
{
  uint64_t v106 = a1;
  uint64_t v113 = 0;
  uint64_t v107 = partial apply for implicit closure #1 in static PaymentsDirectInvocations.from(_:);
  uint64_t v108 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  os_log_type_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v152 = 0;
  uint64_t v112 = 0;
  uint64_t v114 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v116 = *(void *)(v114 - 8);
  uint64_t v115 = v114 - 8;
  uint64_t v117 = v116;
  uint64_t v118 = *(void *)(v116 + 64);
  unint64_t v119 = (v118 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v120 = (char *)v33 - v119;
  uint64_t v121 = type metadata accessor for Logger();
  uint64_t v122 = *(void *)(v121 - 8);
  uint64_t v123 = v121 - 8;
  unint64_t v124 = (*(void *)(v122 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v121);
  uint64_t v125 = (char *)v33 - v124;
  uint64_t v152 = a1;
  uint64_t v127 = Parse.DirectInvocation.identifier.getter();
  uint64_t v128 = v2;
  swift_bridgeObjectRetain();
  uint64_t v126 = PaymentsDirectInvocations.Identifiers.rawValue.getter(0);
  uint64_t v129 = v3;
  swift_bridgeObjectRetain();
  uint64_t v150 = v127;
  uint64_t v151 = v128;
  int v130 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v130)
  {
    swift_bridgeObjectRelease();
    uint64_t v99 = Parse.DirectInvocation.userData.getter();
    uint64_t v100 = static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)(v99);
    uint64_t v101 = v4;
    int v102 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v103 = v100;
    uint64_t v104 = v101;
    int v105 = v102;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v96 = PaymentsDirectInvocations.Identifiers.rawValue.getter(1);
    uint64_t v97 = v6;
    swift_bridgeObjectRetain();
    uint64_t v148 = v127;
    uint64_t v149 = v128;
    int v98 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v98)
    {
      swift_bridgeObjectRelease();
      uint64_t v92 = Parse.DirectInvocation.userData.getter();
      uint64_t v93 = static PaymentsDirectInvocations.parseAppPickerSelection(userData:)(v92);
      uint64_t v94 = v7;
      int v95 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v103 = v93;
      uint64_t v104 = v94;
      int v105 = v95;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v89 = PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      uint64_t v90 = v9;
      swift_bridgeObjectRetain();
      uint64_t v146 = v127;
      uint64_t v147 = v128;
      int v91 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v91)
      {
        swift_bridgeObjectRelease();
        uint64_t v85 = Parse.DirectInvocation.userData.getter();
        uint64_t v86 = static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(v85);
        uint64_t v87 = v10;
        int v88 = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v103 = v86;
        uint64_t v104 = v87;
        int v105 = v88;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v82 = PaymentsDirectInvocations.Identifiers.rawValue.getter(2);
        uint64_t v83 = v12;
        swift_bridgeObjectRetain();
        uint64_t v144 = v127;
        uint64_t v145 = v128;
        int v84 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v84)
        {
          swift_bridgeObjectRelease();
          uint64_t v78 = Parse.DirectInvocation.userData.getter();
          uint64_t v79 = static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(v78);
          uint64_t v80 = v13;
          int v81 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v103 = v79;
          uint64_t v104 = v80;
          int v105 = v81;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          id v73 = (id)static SiriKitDirectInvocationPayloads.confirm.getter();
          id v76 = objc_msgSend(v73, sel_identifier);
          uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v75 = v15;

          swift_bridgeObjectRetain();
          uint64_t v142 = v127;
          uint64_t v143 = v128;
          int v77 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v77)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v103 = v113;
            uint64_t v104 = v113;
            int v105 = 3;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            id v68 = (id)static SiriKitDirectInvocationPayloads.reject.getter();
            id v71 = objc_msgSend(v68, sel_identifier);
            uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v70 = v16;

            swift_bridgeObjectRetain();
            uint64_t v140 = v127;
            uint64_t v141 = v128;
            int v72 = static String.== infix(_:_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if (v72)
            {
              uint64_t v67 = 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v103 = v67;
              uint64_t v104 = v113;
              int v105 = 3;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              id v62 = (id)static SiriKitDirectInvocationPayloads.cancel.getter();
              id v65 = objc_msgSend(v62, sel_identifier);
              uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v64 = v17;

              swift_bridgeObjectRetain();
              uint64_t v138 = v127;
              uint64_t v139 = v128;
              int v66 = static String.== infix(_:_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              if (v66)
              {
                uint64_t v61 = 2;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v103 = v61;
                uint64_t v104 = v113;
                int v105 = 3;
              }
              else
              {
                uint64_t v18 = v125;
                swift_bridgeObjectRelease();
                uint64_t v19 = Logger.payments.unsafeMutableAddressor();
                (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v18, v19, v121);
                uint64_t v42 = v117;
                (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v120, v106, v114);
                unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
                uint64_t v50 = 7;
                uint64_t v51 = swift_allocObject();
                (*(void (**)(unint64_t, char *, uint64_t))(v116 + 32))(v51 + v43, v120, v114);
                uint64_t v59 = Logger.logObject.getter();
                int v60 = static os_log_type_t.error.getter();
                uint64_t v46 = &v136;
                uint64_t v136 = 12;
                unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                unint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                lazy protocol witness table accessor for type Int and conformance Int();
                UnsignedInteger<>.init<A>(_:)();
                uint32_t v47 = v137;
                uint64_t v48 = 17;
                uint64_t v53 = swift_allocObject();
                *(unsigned char *)(v53 + 16) = 32;
                uint64_t v54 = swift_allocObject();
                *(unsigned char *)(v54 + 16) = 8;
                uint64_t v49 = 32;
                uint64_t v20 = swift_allocObject();
                uint64_t v21 = v51;
                uint64_t v52 = v20;
                *(void *)(v20 + 16) = v107;
                *(void *)(v20 + 24) = v21;
                uint64_t v22 = swift_allocObject();
                uint64_t v23 = v52;
                uint64_t v56 = v22;
                *(void *)(v22 + 16) = v108;
                *(void *)(v22 + 24) = v23;
                uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
                uint64_t v55 = _allocateUninitializedArray<A>(_:)();
                uint64_t v57 = v24;
                swift_retain();
                uint64_t v25 = v53;
                uint64_t v26 = v57;
                *uint64_t v57 = v109;
                v26[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
                swift_retain();
                uint64_t v27 = v54;
                uint64_t v28 = v57;
                v57[2] = v110;
                v28[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
                swift_retain();
                uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
                uint64_t v30 = v57;
                v57[4] = v111;
                void v30[5] = v29;
                _finalizeUninitializedArray<A>(_:)();
                swift_bridgeObjectRelease();
                if (os_log_type_enabled(v59, (os_log_type_t)v60))
                {
                  uint64_t v31 = v112;
                  uint64_t v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                  uint64_t v36 = createStorage<A>(capacity:type:)(0);
                  uint64_t v37 = createStorage<A>(capacity:type:)(1);
                  uint64_t v38 = &v135;
                  id v135 = v35;
                  uint64_t v39 = &v134;
                  uint64_t v134 = v36;
                  uint64_t v40 = &v133;
                  uint64_t v133 = v37;
                  serialize(_:at:)(2, &v135);
                  serialize(_:at:)(1, v38);
                  uint64_t v131 = v109;
                  uint64_t v132 = v53;
                  closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)v38, (uint64_t)v39, (uint64_t)v40);
                  uint64_t v41 = v31;
                  if (v31)
                  {
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v131 = v110;
                    uint64_t v132 = v54;
                    closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)&v135, (uint64_t)&v134, (uint64_t)&v133);
                    v33[1] = 0;
                    uint64_t v131 = v111;
                    uint64_t v132 = v56;
                    closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)&v135, (uint64_t)&v134, (uint64_t)&v133);
                    _os_log_impl(&dword_25D85A000, v59, (os_log_type_t)v60, "%s", v35, v47);
                    destroyStorage<A>(_:count:)(v36, 0, v34);
                    destroyStorage<A>(_:count:)(v37, 1, MEMORY[0x263F8EE58] + 8);
                    MEMORY[0x2611B9630](v35, MEMORY[0x263F8E778]);
                    swift_release();
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release();
                }

                (*(void (**)(char *, uint64_t))(v122 + 8))(v125, v121);
                swift_bridgeObjectRelease();
                uint64_t v103 = v113;
                uint64_t v104 = v113;
                int v105 = 0xFFFF;
              }
            }
          }
        }
      }
    }
  }
  return v103;
}

id static PaymentsDirectInvocations.selectionInvocation(appIdentifier:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(1);
  id v8 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  swift_bridgeObjectRetain();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
    _allocateUninitializedArray<A>(_:)();
    int v5 = v2;
    PaymentsDirectInvocations.Keys.rawValue.getter(3);
    uint64_t v4 = MEMORY[0x263F8D310];
    _convertToAnyHashable<A>(_:)();
    swift_bridgeObjectRetain();
    v5[8] = v4;
    v5[5] = a1;
    void v5[6] = a2;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of String.UTF8View();
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setUserData_, isa);

    swift_bridgeObjectRelease();
  }
  return v8;
}

id SKIDirectInvocationPayload.toRSKE(deviceState:)(void *a1)
{
  id v3 = self;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v4 = (id)DeviceState.asInvocationContext.getter();
  id v5 = objc_msgSend(v3, sel_runSiriKitExecutorCommandWithContext_payload_);

  return v5;
}

uint64_t PaymentsDirectInvocations.Identifiers.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.AppPicker", 0x21uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.ContactPicker", 0x25uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.ContactIdentifier", 0x29uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.PromptForPayee", 0x26uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.PromptForPayer", 0x26uLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.PromptForCurrencyAmount", 0x2FuLL, 1)._countAndFlagsBits;
      break;
    case 7:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.PromptForNote", 0x25uLL, 1)._countAndFlagsBits;
      break;
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.SendPayment", 0x23uLL, 1)._countAndFlagsBits;
      break;
    case 9:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.RequestPayment", 0x26uLL, 1)._countAndFlagsBits;
      break;
    case 10:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.SearchForAccounts", 0x29uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments.DisambiguatePerson", 0x2AuLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

id static PaymentsDirectInvocations.selectionInvocation(contactIdentifier:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
  id v8 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  swift_bridgeObjectRetain();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
    _allocateUninitializedArray<A>(_:)();
    id v5 = v2;
    PaymentsDirectInvocations.Keys.rawValue.getter(2);
    uint64_t v4 = MEMORY[0x263F8D310];
    _convertToAnyHashable<A>(_:)();
    swift_bridgeObjectRetain();
    v5[8] = v4;
    v5[5] = a1;
    void v5[6] = a2;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of String.UTF8View();
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setUserData_, isa);

    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t static PaymentsDirectInvocations.Identifiers.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  v1[4] = 4;
  v1[5] = 5;
  v1[6] = 6;
  v1[7] = 7;
  v1[8] = 8;
  v1[9] = 9;
  v1[10] = 10;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t PaymentsDirectInvocations.Keys.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("personData", 0xAuLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("contactId", 9uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appId", 5uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appData", 7uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional __swiftcall PaymentsDirectInvocations.Identifiers.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "com.apple.siri.payments.DisambiguatePerson";
  *(void *)(v2 + 8) = 42;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "com.apple.siri.payments.AppPicker";
  *(void *)(v2 + 32) = 33;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "com.apple.siri.payments.ContactPicker";
  *(void *)(v2 + 56) = 37;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "com.apple.siri.payments.ContactIdentifier";
  *(void *)(v2 + 80) = 41;
  *(unsigned char *)(v2 + 88) = 2;
  *(void *)(v2 + 96) = "com.apple.siri.payments.PromptForPayee";
  *(void *)(v2 + 104) = 38;
  *(unsigned char *)(v2 + 112) = 2;
  *(void *)(v2 + 120) = "com.apple.siri.payments.PromptForPayer";
  *(void *)(v2 + 128) = 38;
  *(unsigned char *)(v2 + 136) = 2;
  *(void *)(v2 + 144) = "com.apple.siri.payments.PromptForCurrencyAmount";
  *(void *)(v2 + 152) = 47;
  *(unsigned char *)(v2 + 160) = 2;
  *(void *)(v2 + 168) = "com.apple.siri.payments.PromptForNote";
  *(void *)(v2 + 176) = 37;
  *(unsigned char *)(v2 + 184) = 2;
  *(void *)(v2 + 192) = "com.apple.siri.payments.SendPayment";
  *(void *)(v2 + 200) = 35;
  *(unsigned char *)(v2 + 208) = 2;
  *(void *)(v2 + 216) = "com.apple.siri.payments.RequestPayment";
  *(void *)(v2 + 224) = 38;
  *(unsigned char *)(v2 + 232) = 2;
  *(void *)(v2 + 240) = "com.apple.siri.payments.SearchForAccounts";
  *(void *)(v2 + 248) = 41;
  *(unsigned char *)(v2 + 256) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_disambiguatePerson;
LABEL_24:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_appPicker;
      goto LABEL_24;
    case 2:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_contactPicker;
      goto LABEL_24;
    case 3:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_selectContact;
      goto LABEL_24;
    case 4:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForPayee;
      goto LABEL_24;
    case 5:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForPayer;
      goto LABEL_24;
    case 6:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForCurrencyAmount;
      goto LABEL_24;
    case 7:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_promptForNote;
      goto LABEL_24;
    case 8:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_sendPayment;
      goto LABEL_24;
    case 9:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_requestPayment;
      goto LABEL_24;
    case 10:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Identifiers_searchForAccounts;
      goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional)11;
}

SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional __swiftcall PaymentsDirectInvocations.Keys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "appData";
  *(void *)(v2 + 8) = 7;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "personData";
  *(void *)(v2 + 32) = 10;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "contactId";
  *(void *)(v2 + 56) = 9;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "appId";
  *(void *)(v2 + 80) = 5;
  *(unsigned char *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_appData;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_personData;
      goto LABEL_10;
    case 2:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_contactId;
      goto LABEL_10;
    case 3:
      v7.SiriPaymentsIntents::SearchForAccountsSlots value = SiriPaymentsIntents_PaymentsDirectInvocations_Keys_appId;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional)4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations.Identifiers()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDirectInvocations.Identifiers()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDirectInvocations.Identifiers()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDirectInvocations.Identifiers()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDirectInvocations.Identifiers@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDirectInvocations::Identifiers_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SearchForAccountsSlots value = PaymentsDirectInvocations.Identifiers.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SearchForAccountsSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDirectInvocations.Identifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PaymentsDirectInvocations.Identifiers.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PaymentsDirectInvocations.Identifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static PaymentsDirectInvocations.Identifiers.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations.Keys()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PaymentsDirectInvocations.Keys()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaymentsDirectInvocations.Keys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PaymentsDirectInvocations.Keys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PaymentsDirectInvocations.Keys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::PaymentsDirectInvocations::Keys_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SearchForAccountsSlots value = PaymentsDirectInvocations.Keys.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SearchForAccountsSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PaymentsDirectInvocations.Keys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PaymentsDirectInvocations.Keys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)(uint64_t a1)
{
  uint64_t v65 = a1;
  uint64_t v58 = 0;
  uint32_t v47 = partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:);
  uint64_t v48 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v78 = 0;
  uint64_t v52 = 0;
  uint64_t v70 = 0;
  uint64_t v53 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = v53 - 8;
  unint64_t v56 = (*(void *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v57 = (char *)v17 - v56;
  uint64_t v69 = type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue();
  uint64_t v66 = *(void *)(v69 - 8);
  uint64_t v67 = v69 - 8;
  unint64_t v59 = (*(void *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v58);
  id v68 = (void *)((char *)v17 - v59);
  uint64_t v60 = type metadata accessor for ContactResolutionResponseHandler();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = v60 - 8;
  unint64_t v63 = (*(void *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v65);
  uint64_t v64 = (char *)v17 - v63;
  uint64_t v78 = v1;
  swift_bridgeObjectRetain();
  ContactResolutionResponseHandler.init(userData:)();
  ContactResolutionResponseHandler.directInvocationValue.getter();
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v66 + 88))(v68, v69) == *MEMORY[0x263F6D800])
  {
    (*(void (**)(uint64_t *, uint64_t))(v66 + 96))(v68, v69);
    uint64_t v43 = *v68;
    uint64_t v70 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v60);
    uint64_t v44 = v43;
    uint64_t v45 = v58;
    int v46 = 0;
  }
  else
  {
    uint64_t v2 = v57;
    (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v68, v69);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v60);
    uint64_t v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v2, v3, v53);
    swift_bridgeObjectRetain();
    uint64_t v32 = 7;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v65;
    uint64_t v41 = Logger.logObject.getter();
    int v42 = static os_log_type_t.error.getter();
    uint64_t v28 = &v76;
    uint64_t v76 = 12;
    unint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v29 = v77;
    uint64_t v30 = 17;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 32;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 8;
    uint64_t v31 = 32;
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = v33;
    uint64_t v34 = v4;
    *(void *)(v4 + 16) = v47;
    *(void *)(v4 + 24) = v5;
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = v34;
    uint64_t v38 = v6;
    *(void *)(v6 + 16) = v48;
    *(void *)(v6 + 24) = v7;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v37 = _allocateUninitializedArray<A>(_:)();
    uint64_t v39 = v8;
    swift_retain();
    uint64_t v9 = v35;
    uint64_t v10 = v39;
    *uint64_t v39 = v49;
    v10[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9;
    swift_retain();
    uint64_t v11 = v36;
    uint64_t v12 = v39;
    v39[2] = v50;
    void v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
    swift_retain();
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    int v14 = v39;
    v39[4] = v51;
    v14[5] = v13;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      uint64_t v15 = v52;
      uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v20 = createStorage<A>(capacity:type:)(0);
      uint64_t v21 = createStorage<A>(capacity:type:)(1);
      uint64_t v22 = &v75;
      uint64_t v75 = v19;
      uint64_t v23 = &v74;
      uint64_t v74 = v20;
      uint64_t v24 = &v73;
      uint64_t v73 = v21;
      serialize(_:at:)(2, &v75);
      serialize(_:at:)(1, v22);
      id v71 = v49;
      uint64_t v72 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
      uint64_t v25 = v15;
      if (v15)
      {
        __break(1u);
      }
      else
      {
        id v71 = v50;
        uint64_t v72 = v36;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        v17[1] = 0;
        id v71 = v51;
        uint64_t v72 = v38;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        _os_log_impl(&dword_25D85A000, v41, (os_log_type_t)v42, "#PaymentsDirectInvocation Invalid user data for personDisambiguation: %s", v19, v29);
        destroyStorage<A>(_:count:)(v20, 0, v18);
        destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17[0] = 0;

    (*(void (**)(char *, uint64_t))(v54 + 8))(v57, v53);
    uint64_t v44 = v17[0];
    uint64_t v45 = v58;
    int v46 = 0xFFFF;
  }
  return v44;
}

uint64_t static PaymentsDirectInvocations.parseAppPickerSelection(userData:)(uint64_t a1)
{
  uint64_t v9 = a1;
  swift_bridgeObjectRetain();
  if (a1)
  {
    PaymentsDirectInvocations.Keys.rawValue.getter(3);
    MEMORY[0x2611B90F0](v6);
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
    uint64_t v7 = 0;
  }
  if (v7)
  {
    if (swift_dynamicCast()) {
      Swift::String v3 = v5;
    }
    else {
      Swift::String v3 = (Swift::String)0;
    }
    Swift::String v2 = v3;
  }
  else
  {
    outlined destroy of FlowActivity?((uint64_t)v6);
    Swift::String v2 = (Swift::String)0;
  }
  if (v2._object)
  {
    Swift::String v8 = v2;
  }
  else
  {
    Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  return v8._countAndFlagsBits;
}

uint64_t static PaymentsDirectInvocations.parseContactPickerSelection(userData:)(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t v59 = 0;
  uint64_t v48 = partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:);
  uint64_t v49 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v80 = 0;
  uint64_t v53 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = v54 - 8;
  unint64_t v57 = (*(void *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v58 = (char *)v17 - v57;
  uint64_t v70 = type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue();
  uint64_t v67 = *(void *)(v70 - 8);
  uint64_t v68 = v70 - 8;
  unint64_t v60 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v59);
  uint64_t v69 = (void *)((char *)v17 - v60);
  uint64_t v61 = type metadata accessor for ContactResolutionResponseHandler();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = v61 - 8;
  unint64_t v64 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)v17 - v64;
  uint64_t v80 = v1;
  swift_bridgeObjectRetain();
  ContactResolutionResponseHandler.init(userData:)();
  ContactResolutionResponseHandler.directInvocationValue.getter();
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v67 + 88))(v69, v70) == *MEMORY[0x263F6D808])
  {
    (*(void (**)(uint64_t *, uint64_t))(v67 + 96))(v69, v70);
    uint64_t v43 = *v69;
    uint64_t v44 = v69[1];
    uint64_t v71 = v43;
    uint64_t v72 = v44;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
    uint64_t v45 = v43;
    uint64_t v46 = v44;
    int v47 = 2;
  }
  else
  {
    Swift::String v2 = v58;
    (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v69, v70);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
    uint64_t v3 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v2, v3, v54);
    swift_bridgeObjectRetain();
    uint64_t v32 = 7;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v66;
    uint64_t v41 = Logger.logObject.getter();
    int v42 = static os_log_type_t.error.getter();
    uint64_t v28 = &v78;
    uint64_t v78 = 12;
    unint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v29 = v79;
    uint64_t v30 = 17;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 32;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 8;
    uint64_t v31 = 32;
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = v33;
    uint64_t v34 = v4;
    *(void *)(v4 + 16) = v48;
    *(void *)(v4 + 24) = v5;
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = v34;
    uint64_t v38 = v6;
    *(void *)(v6 + 16) = v49;
    *(void *)(v6 + 24) = v7;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v37 = _allocateUninitializedArray<A>(_:)();
    uint64_t v39 = v8;
    swift_retain();
    uint64_t v9 = v35;
    uint64_t v10 = v39;
    *uint64_t v39 = v50;
    v10[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9;
    swift_retain();
    uint64_t v11 = v36;
    uint64_t v12 = v39;
    v39[2] = v51;
    void v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
    swift_retain();
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    int v14 = v39;
    v39[4] = v52;
    v14[5] = v13;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      uint64_t v15 = v53;
      uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v20 = createStorage<A>(capacity:type:)(0);
      uint64_t v21 = createStorage<A>(capacity:type:)(1);
      uint64_t v22 = &v77;
      uint32_t v77 = v19;
      uint64_t v23 = &v76;
      uint64_t v76 = v20;
      uint64_t v24 = &v75;
      uint64_t v75 = v21;
      serialize(_:at:)(2, &v77);
      serialize(_:at:)(1, v22);
      uint64_t v73 = v50;
      uint64_t v74 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
      uint64_t v25 = v15;
      if (v15)
      {
        __break(1u);
      }
      else
      {
        uint64_t v73 = v51;
        uint64_t v74 = v36;
        closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
        v17[1] = 0;
        uint64_t v73 = v52;
        uint64_t v74 = v38;
        closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
        _os_log_impl(&dword_25D85A000, v41, (os_log_type_t)v42, "#PaymentsDirectInvocation Invalid user data for contactPicker: %s", v19, v29);
        destroyStorage<A>(_:count:)(v20, 0, v18);
        destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17[0] = 0;

    (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v54);
    uint64_t v45 = v17[0];
    uint64_t v46 = v17[0];
    int v47 = 0xFFFF;
  }
  return v45;
}

uint64_t implicit closure #1 in static PaymentsDirectInvocations.from(_:)()
{
  uint64_t v2 = Parse.DirectInvocation.identifier.getter();
  uint64_t v3 = v0;
  uint64_t v4 = PaymentsError.errorDescription.getter();
  outlined consume of PaymentsError(v2, v3, 0, 0, 0, 0, 0);
  return v4;
}

uint64_t sub_25D98D65C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsDirectInvocations.from(_:)()
{
  type metadata accessor for Parse.DirectInvocation();

  return implicit closure #1 in static PaymentsDirectInvocations.from(_:)();
}

uint64_t PaymentsDirectInvocations.identifier.getter(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  switch(a3)
  {
    case 1:
      uint64_t v13 = PaymentsDirectInvocations.Identifiers.rawValue.getter(1);
      break;
    case 2:
      uint64_t v13 = PaymentsDirectInvocations.Identifiers.rawValue.getter(2);
      break;
    case 3:
      if (v14 == 0)
      {
        id v10 = (id)static SiriKitDirectInvocationPayloads.confirm.getter();
        id v11 = objc_msgSend(v10, sel_identifier);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v13 = v12;
      }
      else if (a1 ^ 1 | a2)
      {
        id v4 = (id)static SiriKitDirectInvocationPayloads.cancel.getter();
        id v5 = objc_msgSend(v4, sel_identifier);
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v13 = v6;
      }
      else
      {
        id v7 = (id)static SiriKitDirectInvocationPayloads.reject.getter();
        id v8 = objc_msgSend(v7, sel_identifier);
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v13 = v9;
      }
      break;
    default:
      uint64_t v13 = PaymentsDirectInvocations.Identifiers.rawValue.getter(0);
      break;
  }
  return v13;
}

uint64_t PaymentsDirectInvocations.userData.getter(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      return static PaymentsDirectInvocations.personDisambiguationUserData(_:)(a1);
    case 1:
      swift_bridgeObjectRetain();
      uint64_t v5 = static PaymentsDirectInvocations.appPickerUserData(_:)(a1, a2);
      swift_bridgeObjectRelease();
      return v5;
    case 2:
      swift_bridgeObjectRetain();
      uint64_t v4 = static PaymentsDirectInvocations.contactPickerUserData(_:)(a1, a2);
      swift_bridgeObjectRelease();
      return v4;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t static PaymentsDirectInvocations.personDisambiguationUserData(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v4 = v1;
  *uint64_t v1 = PaymentsDirectInvocations.Keys.rawValue.getter(1);
  v4[1] = v2;
  v4[5] = MEMORY[0x263F8D6C8];
  v4[2] = a1;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static PaymentsDirectInvocations.appPickerUserData(_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  id v7 = v2;
  *uint64_t v2 = PaymentsDirectInvocations.Keys.rawValue.getter(3);
  v7[1] = v3;
  swift_bridgeObjectRetain();
  v7[5] = MEMORY[0x263F8D310];
  v7[2] = a1;
  v7[3] = a2;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static PaymentsDirectInvocations.contactPickerUserData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v22 = type metadata accessor for ContactResolutionCommonKeys();
  uint64_t v19 = *(void *)(v22 - 8);
  uint64_t v20 = v22 - 8;
  unint64_t v18 = (*(void *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (char *)&v17 - v18;
  uint64_t v21 = (char *)&v17 - v18;
  uint64_t v29 = MEMORY[0x270FA5388](v24);
  uint64_t v30 = v3;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  unint64_t v26 = v4;
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v2, *MEMORY[0x263F6D7E8], v22);
  uint64_t v5 = ContactResolutionCommonKeys.rawValue.getter();
  uint64_t v6 = v19;
  id v7 = v26;
  uint64_t v8 = v5;
  uint64_t v9 = v21;
  uint64_t v11 = v10;
  uint64_t v12 = v22;
  *unint64_t v26 = v8;
  v7[1] = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v12);
  swift_bridgeObjectRetain();
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  uint64_t v28 = MEMORY[0x263F8D310];
  v26[5] = MEMORY[0x263F8D310];
  v15[2] = v13;
  v15[3] = v14;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

id PaymentsDirectInvocations.toDirectInvocationPayload()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v38 = a1;
  uint64_t v36 = a2;
  int v37 = a3;
  uint64_t v33 = 0;
  uint64_t v54 = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
  uint64_t v58 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  unint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  char v81 = 0;
  id v78 = 0;
  uint64_t v32 = 0;
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v47 - 8);
  uint64_t v46 = v47 - 8;
  unint64_t v34 = (*(void *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v35 = (char *)&v23 - v34;
  uint64_t v79 = v3;
  uint64_t v80 = v4;
  char v81 = v5;
  type metadata accessor for SKIDirectInvocationPayload();
  PaymentsDirectInvocations.identifier.getter(v38, v36, v37);
  id v6 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  id v7 = v35;
  id v48 = v6;
  id v78 = v6;
  uint64_t v43 = PaymentsDirectInvocations.userData.getter(v38, v36, v37);
  uint64_t v40 = MEMORY[0x263F8EE58] + 8;
  uint64_t v39 = MEMORY[0x263F8DB68];
  uint64_t v41 = MEMORY[0x263F8DB70];
  uint64_t v42 = _dictionaryUpCast<A, B, C, D>(_:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setUserData_, isa);

  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v7, v8, v47);
  id v9 = v48;
  uint64_t v56 = 7;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = v48;
  uint64_t v69 = Logger.logObject.getter();
  int v70 = static os_log_type_t.debug.getter();
  uint64_t v51 = &v76;
  uint64_t v76 = 12;
  unint64_t v49 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v52 = v77;
  uint64_t v53 = 17;
  uint64_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 64;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 8;
  uint64_t v55 = 32;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v57;
  uint64_t v59 = v10;
  *(void *)(v10 + 16) = v54;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v59;
  uint64_t v66 = v12;
  *(void *)(v12 + 16) = v58;
  *(void *)(v12 + 24) = v13;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v64 = _allocateUninitializedArray<A>(_:)();
  uint64_t v67 = v14;
  swift_retain();
  uint64_t v15 = v61;
  uint64_t v16 = v67;
  *uint64_t v67 = v60;
  v16[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
  swift_retain();
  uint64_t v17 = v63;
  unint64_t v18 = v67;
  void v67[2] = v62;
  v18[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
  uint64_t v20 = v67;
  v67[4] = v65;
  v20[5] = v19;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    uint64_t v21 = v32;
    uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(1);
    uint64_t v27 = createStorage<A>(capacity:type:)(0);
    uint64_t v28 = &v75;
    uint64_t v75 = v25;
    uint64_t v29 = &v74;
    uint64_t v74 = v26;
    uint64_t v30 = &v73;
    uint64_t v73 = v27;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(1, v28);
    uint64_t v71 = v60;
    uint64_t v72 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v28, (uint64_t)v29, (uint64_t)v30);
    uint64_t v31 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      uint64_t v71 = v62;
      uint64_t v72 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      uint64_t v23 = 0;
      uint64_t v71 = v65;
      uint64_t v72 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      _os_log_impl(&dword_25D85A000, v69, (os_log_type_t)v70, "#PaymentsDirectInvocation DirectInvocationPayload: %@", v25, v52);
      destroyStorage<A>(_:count:)(v26, 1, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v25, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v47);
  return v48;
}

uint64_t implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)()
{
  return String.init<A>(describing:)();
}

BOOL static PaymentsDirectInvocations.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  outlined copy of PaymentsDirectInvocations(a1, a2, a3);
  outlined copy of PaymentsDirectInvocations(a4, a5, a6);
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((static String.== infix(_:_:)() & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_10;
    case 2:
      if (a6 != 2) {
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (static String.== infix(_:_:)())
      {
LABEL_10:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
        outlined consume of PaymentsDirectInvocations(a4, a5, a6);
        return 1;
      }
      else
      {
LABEL_15:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
        outlined consume of PaymentsDirectInvocations(a4, a5, a6);
        return 0;
      }
    case 3:
      if (v8 == 0)
      {
        if (a6 == 3 && a4 == 0 && a5 == 0)
        {
          outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
          outlined consume of PaymentsDirectInvocations(a4, a5, a6);
          return 1;
        }
        goto LABEL_29;
      }
      if (!((unint64_t)v8 ^ 1 | *((void *)&v8 + 1)))
      {
        if (a6 != 3 || a4 != 1 || a5) {
          goto LABEL_29;
        }
LABEL_24:
        outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
        outlined consume of PaymentsDirectInvocations(a4, 0, a6);
        return 1;
      }
      if (a6 == 3 && a4 == 2 && !a5) {
        goto LABEL_24;
      }
LABEL_29:
      outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
      outlined consume of PaymentsDirectInvocations(a4, a5, a6);
      return 0;
    default:
      if (a6) {
        goto LABEL_29;
      }
      outlined consume of PaymentsDirectInvocations(v8, *((uint64_t *)&v8 + 1), a3);
      outlined consume of PaymentsDirectInvocations(a4, a5, 0);
      return (void)v8 == a4;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  return static PaymentsDirectInvocations.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_25D98EC60()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EC8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D98ECB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D98ECF8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys;
  if (!lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D98EE38()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)()
{
  return implicit closure #1 in static PaymentsDirectInvocations.parsePersonDisambiguationSelection(userData:)();
}

uint64_t sub_25D98EE80()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EEAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EED8()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EF18()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EF58()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EF98()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EFC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D98EFF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F030()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F070()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F0B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F0DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F108()
{
  return swift_deallocObject();
}

uint64_t sub_25D98F148()
{
  return swift_deallocObject();
}

uint64_t initializeBufferWithCopyOfBuffer for PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PaymentsDirectInvocations(*(void *)a2, v4, v5);
  uint64_t result = a1;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t outlined copy of PaymentsDirectInvocations(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1 || a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PaymentsDirectInvocations(uint64_t a1)
{
  return outlined consume of PaymentsDirectInvocations(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t assignWithCopy for PaymentsDirectInvocations(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of PaymentsDirectInvocations(*(void *)a2, v7, v8);
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of PaymentsDirectInvocations(v2, v3, v4);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

uint64_t assignWithTake for PaymentsDirectInvocations(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of PaymentsDirectInvocations(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaymentsDirectInvocations(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v4 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      if (v2 >= 0xFC) {
        unsigned int v2 = -1;
      }
      int v4 = v2;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentsDirectInvocations(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned char *)(result + 17);
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 253;
    *(unsigned char *)(result + 16) = 0;
    if (a3 >= 0xFD) {
      *uint64_t v3 = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *uint64_t v3 = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PaymentsDirectInvocations(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) < 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return *(void *)a1 + 3;
  }
}

uint64_t destructiveInjectEnumTag for PaymentsDirectInvocations(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(unsigned char *)(result + 16) = a2;
  }
  else
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations()
{
  return &type metadata for PaymentsDirectInvocations;
}

uint64_t getEnumTagSinglePayload for PaymentsDirectInvocations.Identifiers(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF5) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 10) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 245;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 11;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PaymentsDirectInvocations.Identifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF5)
  {
    unsigned int v5 = ((a3 + 10) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF5)
  {
    unsigned int v4 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *__n128 result = a2 + 10;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations.Identifiers()
{
  return &type metadata for PaymentsDirectInvocations.Identifiers;
}

ValueMetadata *type metadata accessor for PaymentsDirectInvocations.Keys()
{
  return &type metadata for PaymentsDirectInvocations.Keys;
}

unint64_t base witness table accessor for Equatable in PaymentsDirectInvocations.Keys()
{
  return lazy protocol witness table accessor for type PaymentsDirectInvocations.Keys and conformance PaymentsDirectInvocations.Keys();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PaymentsDirectInvocations.Identifiers()
{
  return lazy protocol witness table accessor for type [PaymentsDirectInvocations.Identifiers] and conformance [A]();
}

unint64_t base witness table accessor for Equatable in PaymentsDirectInvocations.Identifiers()
{
  return lazy protocol witness table accessor for type PaymentsDirectInvocations.Identifiers and conformance PaymentsDirectInvocations.Identifiers();
}

uint64_t static PaymentsContextProvider.confirmationContextUpdate(isSend:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  unsigned int v21 = a1;
  uint64_t v30 = 0;
  char v29 = 0;
  uint64_t v20 = 0;
  uint64_t v28 = type metadata accessor for NLContextUpdate();
  uint64_t v24 = *(void *)(v28 - 8);
  uint64_t v25 = v28 - 8;
  unint64_t v15 = (*(void *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = (char *)&v15 - v15;
  uint64_t v30 = (char *)&v15 - v15;
  int v19 = 1;
  char v29 = MEMORY[0x270FA5388](v21) & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v18 = MEMORY[0x263F8D310];
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v16 = v2;
  uint64_t v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  unsigned int v4 = v16;
  uint64_t v5 = v3;
  LOBYTE(v3) = v19;
  uint64_t *v16 = v5;
  v4[1] = v6;
  uint64_t v7 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v3);
  int v8 = v16;
  v16[2] = v7;
  v8[3] = v9;
  uint64_t v10 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  uint64_t v11 = v16;
  void v16[4] = v10;
  v11[5] = v12;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v22 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForConfirm(isSend:)(v21 & 1, v13);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v26, v27, v28);
}

uint64_t static PaymentsContextProvider.appConfirmationContextUpdate(app:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v44 = a6;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  int v37 = a5;
  uint32_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v47 = 0;
  uint64_t v33 = 0;
  uint64_t v46 = type metadata accessor for NLContextUpdate();
  uint64_t v42 = *(void *)(v46 - 8);
  uint64_t v43 = v46 - 8;
  unint64_t v26 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v45 = (char *)&v25 - v26;
  uint32_t v52 = (char *)&v25 - v26;
  uint64_t v51 = MEMORY[0x270FA5388](v38);
  uint64_t v50 = v6;
  uint64_t v48 = v7;
  uint64_t v49 = v8;
  int v29 = 1;
  char v47 = v9 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v32 = MEMORY[0x263F8D310];
  uint64_t v28 = _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v10;
  uint64_t v11 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  uint64_t v12 = v27;
  uint64_t v13 = v11;
  LOBYTE(v11) = v29;
  *uint64_t v27 = v13;
  v12[1] = v14;
  uint64_t v15 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v11);
  uint64_t v16 = v27;
  void v27[2] = v15;
  v16[3] = v17;
  uint64_t v18 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  int v19 = v27;
  v27[4] = v18;
  v19[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  uint64_t v34 = 1;
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v21;
  Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, v29 & 1);
  *uint64_t v30 = v22;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  uint64_t v41 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v40 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(v38, v39, v35, v36, v37 & 1, v23);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v44, v45, v46);
}

uint64_t static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a6;
  uint64_t v34 = a1;
  uint64_t v37 = a2;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  int v43 = a5;
  uint64_t v44 = 0;
  uint64_t v48 = partial apply for closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:);
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  char v57 = 0;
  uint64_t v55 = 0;
  uint64_t v38 = type metadata accessor for Locale();
  uint64_t v35 = *(void *)(v38 - 8);
  uint64_t v36 = v38 - 8;
  unint64_t v22 = (*(void *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v39 = (char *)v19 - v22;
  uint64_t v23 = type metadata accessor for NLContextUpdate();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = v23 - 8;
  unint64_t v26 = (*(void *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v34);
  int v29 = (char *)v19 - v26;
  uint64_t v62 = (char *)v19 - v26;
  uint64_t v61 = v6;
  uint64_t v60 = v7;
  uint64_t v58 = v8;
  uint64_t v59 = v9;
  int v42 = 1;
  char v57 = v10 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v30 = 1;
  uint64_t v33 = MEMORY[0x263F8D310];
  uint64_t v28 = _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v11;
  uint64_t v12 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  uint64_t v13 = v27;
  *uint64_t v27 = v12;
  v13[1] = v14;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  uint64_t v32 = _allocateUninitializedArray<A>(_:)();
  uint64_t v31 = v15;
  Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, v42 & 1);
  *uint64_t v31 = v16;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  uint64_t v56 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v39, v37, v38);
  uint64_t v45 = &v50;
  uint64_t v51 = v39;
  uint64_t v52 = v40;
  uint64_t v53 = v41;
  char v54 = v43 & v42;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  uint64_t v47 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  lazy protocol witness table accessor for type [App] and conformance [A]();
  uint64_t v49 = Sequence.compactMap<A>(_:)();
  uint64_t v20 = v49;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v38);
  uint64_t v55 = v20;
  v19[2] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v19[1] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForAppDisambiguation(choices:)(v20, v17);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  static RREntity.makeDisambiguationGroup(with:locale:)(v34, v37);
  NLContextUpdate.rrEntities.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v21, v29, v23);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v29, v23);
}

uint64_t static PaymentsContextProvider.handleRequestPayment(paymentRecord:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a3;
  uint64_t v14 = a1;
  int v15 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v16 = 0;
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v8 - 8;
  unint64_t v11 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (char *)v6 - v11;
  uint64_t v18 = (char *)v6 - v11;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  int v12 = 1;
  char v16 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v14);
  NLContextUpdate.rrEntities.setter();
  if (v15)
  {
    v6[1] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[0] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForRequestPayment()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v13, v8);
}

uint64_t static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v32 = a1;
  int v33 = a2;
  int v43 = 0;
  uint64_t v42 = 0;
  char v41 = 0;
  uint64_t v31 = 0;
  uint64_t v40 = type metadata accessor for NLContextUpdate();
  uint64_t v36 = *(void *)(v40 - 8);
  uint64_t v37 = v40 - 8;
  unint64_t v22 = (*(void *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v39 = (char *)&v22 - v22;
  int v43 = (char *)&v22 - v22;
  uint64_t v42 = MEMORY[0x270FA5388](v32);
  int v25 = 1;
  char v41 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v26 = 2;
  uint64_t v30 = MEMORY[0x263F8D310];
  uint64_t v24 = _allocateUninitializedArray<A>(_:)();
  uint64_t v23 = v4;
  int v27 = 0;
  uint64_t v5 = Constants.NLPaymentConfirmationValue.canonicalName.getter(0);
  uint64_t v6 = v23;
  uint64_t v7 = v5;
  LOBYTE(v5) = v25;
  *uint64_t v23 = v7;
  v6[1] = v8;
  uint64_t v9 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v5);
  uint64_t v10 = v23;
  v23[2] = v9;
  v10[3] = v11;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v25 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v29 = _allocateUninitializedArray<A>(_:)();
  uint64_t v28 = v12;
  uint64_t v13 = SendPaymentSlots.canonicalName.getter(v27);
  uint64_t v14 = v28;
  uint64_t v15 = v13;
  LOBYTE(v13) = v27;
  *uint64_t v28 = v15;
  v14[1] = v16;
  uint64_t v17 = RequestPaymentSlots.canonicalName.getter(v13);
  uint64_t v18 = v28;
  v28[2] = v17;
  v18[3] = v19;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  static RREntity.makeDisambiguationGroup(with:)(v32);
  NLContextUpdate.rrEntities.setter();
  uint64_t v35 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v34 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(v32, v33 & 1, v20);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v38, v39, v40);
}

uint64_t static PaymentsContextProvider.tccAcceptanceContextUpdate(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v18 = a1;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  id v36 = 0;
  uint64_t v26 = 0;
  uint64_t v35 = type metadata accessor for NLContextUpdate();
  uint64_t v32 = *(void *)(v35 - 8);
  uint64_t v33 = v35 - 8;
  v12[0] = (*(void *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v34 = (char *)v12 - v12[0];
  uint64_t v38 = (char *)v12 - v12[0];
  uint64_t v37 = MEMORY[0x270FA5388](v18);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  type metadata accessor for SAAceConfirmationContext();
  id v31 = SAUIAppPunchOut.__allocating_init()();
  id v36 = v31;
  id v13 = (id)*MEMORY[0x263F650D8];
  id v2 = v13;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12[1] = v4;
  id v14 = (id)MEMORY[0x2611B9130](v3);
  swift_bridgeObjectRelease();

  objc_msgSend(v31, sel_setReason_, v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAceSerializable);
  uint64_t v27 = 1;
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v15 = v5;
  id v6 = v31;
  *uint64_t v15 = v31;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.conversationStateAttachments.setter();
  type metadata accessor for MachineUtteranceBuilder();
  uint64_t v22 = MachineUtteranceBuilder.__allocating_init()();
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1);
  uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  App.appIdentifier.getter();
  uint64_t v20 = v8;
  uint64_t v23 = dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = dispatch thunk of MachineUtteranceBuilder.build()();
  uint64_t v25 = v9;
  swift_release();
  NLContextUpdate.nlInput.setter();
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v28 = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForTCCAcceptance()(v10);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v30, v34, v35);

  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v35);
}

uint64_t static PaymentsContextProvider.needsValueContextUpdate(value:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  unsigned int v13 = a1;
  uint64_t v25 = closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:);
  uint64_t v29 = 0;
  char v28 = 0;
  uint64_t v22 = 0;
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v14 - 8;
  unint64_t v17 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v11 - v17;
  uint64_t v29 = (char *)v11 - v17;
  char v28 = MEMORY[0x270FA5388](v13);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v24 = MEMORY[0x263F8D310];
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v18 = v2;
  int v21 = 1;
  uint64_t v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(1);
  uint64_t v4 = v18;
  *uint64_t v18 = v3;
  v4[1] = v5;
  uint64_t v6 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  Swift::String v7 = v18;
  v18[2] = v6;
  v7[3] = v8;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v21 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v27 = static SearchForAccountsSlots.allCases.getter();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchForAccountsSlots]);
  lazy protocol witness table accessor for type [SearchForAccountsSlots] and conformance [A]();
  uint64_t v26 = Sequence.compactMap<A>(_:)();
  v11[1] = v26;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v11[3] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v11[2] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForSearchForAccountNeedsValue(_:)(v13, v9);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, v20, v14);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  void v11[4];
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)@<X0>(char *@<X0>, uint64_t *@<X8>);
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;

  uint64_t v12 = a2;
  unsigned int v13 = a1;
  uint64_t v25 = closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:);
  uint64_t v29 = 0;
  char v28 = 0;
  uint64_t v22 = 0;
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v14 - 8;
  unint64_t v17 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v11 - v17;
  uint64_t v29 = (char *)v11 - v17;
  char v28 = MEMORY[0x270FA5388](v13);
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v24 = MEMORY[0x263F8D310];
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v18 = v2;
  int v21 = 1;
  uint64_t v3 = Constants.NLPaymentConfirmationValue.canonicalName.getter(1);
  uint64_t v4 = v18;
  *uint64_t v18 = v3;
  v4[1] = v5;
  uint64_t v6 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  Swift::String v7 = v18;
  v18[2] = v6;
  v7[3] = v8;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v21 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v27 = static RequestPaymentSlots.allCases.getter();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RequestPaymentSlots]);
  lazy protocol witness table accessor for type [RequestPaymentSlots] and conformance [A]();
  uint64_t v26 = Sequence.compactMap<A>(_:)();
  v11[1] = v26;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  v11[3] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v11[2] = _allocateUninitializedArray<A>(_:)();
  static PaymentsContextProvider.makeSDAForRequestPaymentNeedsValue(_:)(v13, v9);
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, v20, v14);
}

uint64_t static PaymentsContextProvider.domainName.getter()
{
  return Constants.NLConstants.rawValue.getter(0);
}

uint64_t static PaymentsContextProvider.targetDomain.getter()
{
  return Constants.NLConstants.canonicalName.getter(0);
}

uint64_t static PaymentsContextProvider.makeSDAForConfirm(isSend:)@<X0>(unsigned int a1@<W0>, char *a2@<X8>)
{
  char v54 = a2;
  unsigned int v83 = a1;
  uint64_t v75 = 0;
  uint64_t v55 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v56 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  char v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v99 = 0;
  int v98 = 0;
  uint64_t v97 = 0;
  char v96 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = v61 - 8;
  unint64_t v64 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v65 = (char *)v22 - v64;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v67 = v66 - 8;
  uint64_t v69 = v68;
  uint64_t v70 = *(void *)(v68 + 64);
  unint64_t v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v75);
  uint64_t v72 = (char *)v22 - v71;
  unint64_t v73 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (uint64_t)v22 - v73;
  uint64_t v99 = (char *)v22 - v73;
  uint64_t v76 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = v76 - 8;
  unint64_t v79 = (*(void *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v75);
  uint64_t v80 = (uint64_t)v22 - v79;
  unint64_t v81 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v82 = (uint64_t)v22 - v81;
  int v98 = (char *)v22 - v81;
  uint64_t v84 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = v84 - 8;
  unint64_t v87 = (*(void *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  char v6 = MEMORY[0x270FA5388](v83);
  uint64_t v88 = (uint64_t)v22 - v87;
  uint64_t v97 = (char *)v22 - v87;
  char v96 = v6 & 1;
  if (v6)
  {
    type metadata accessor for UsoTaskBuilder_pay_common_Payment();
    uint64_t v53 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    uint64_t v53 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  }
  Swift::String v7 = v65;
  uint64_t v31 = v53;
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v53, v88);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v88, v82);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v80, v82, v76);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v80, v74);
  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v7, v8, v61);
  uint64_t v34 = v69;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v33 = v68 + 16;
  v32(v72, v74, v66);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v42 = 7;
  uint64_t v43 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v43 + v35, v72, v66);
  uint64_t v51 = Logger.logObject.getter();
  int v52 = static os_log_type_t.debug.getter();
  uint64_t v38 = &v94;
  uint64_t v94 = 12;
  unint64_t v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v39 = v95;
  uint64_t v40 = 17;
  uint64_t v45 = swift_allocObject();
  *(unsigned char *)(v45 + 16) = 32;
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 8;
  uint64_t v41 = 32;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v43;
  uint64_t v44 = v9;
  *(void *)(v9 + 16) = v55;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v44;
  uint64_t v48 = v11;
  *(void *)(v11 + 16) = v56;
  *(void *)(v11 + 24) = v12;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v47 = _allocateUninitializedArray<A>(_:)();
  uint64_t v49 = v13;
  swift_retain();
  uint64_t v14 = v45;
  uint64_t v15 = v49;
  *uint64_t v49 = v57;
  v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  swift_retain();
  uint64_t v16 = v46;
  unint64_t v17 = v49;
  v49[2] = v58;
  void v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48;
  uint64_t v19 = v49;
  v49[4] = v59;
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v51, (os_log_type_t)v52))
  {
    uint64_t v20 = v60;
    uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0);
    uint64_t v26 = createStorage<A>(capacity:type:)(1);
    uint64_t v27 = &v93;
    uint64_t v93 = v24;
    char v28 = &v92;
    uint64_t v92 = v25;
    uint64_t v29 = &v91;
    uint64_t v91 = v26;
    serialize(_:at:)(2, &v93);
    serialize(_:at:)(1, v27);
    uint64_t v89 = v57;
    uint64_t v90 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    uint64_t v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      uint64_t v89 = v58;
      uint64_t v90 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v93, (uint64_t)&v92, (uint64_t)&v91);
      v22[1] = 0;
      uint64_t v89 = v59;
      uint64_t v90 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v93, (uint64_t)&v92, (uint64_t)&v91);
      _os_log_impl(&dword_25D85A000, v51, (os_log_type_t)v52, "#PaymentsContextProvider returning SystemOffered for confirm intent %s", v24, v39);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
  v32(v54, v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v82, v76);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v88, v84);
}

uint64_t static PaymentsContextProvider.handleSendPayment(paymentRecord:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a3;
  uint64_t v14 = a1;
  int v15 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v16 = 0;
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v8 - 8;
  unint64_t v11 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v13 = (char *)v6 - v11;
  uint64_t v18 = (char *)v6 - v11;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  int v12 = 1;
  char v16 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v14);
  NLContextUpdate.rrEntities.setter();
  if (v15)
  {
    v6[1] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[0] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSendPayment()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v13, v8);
}

uint64_t static PaymentsContextProvider.makeSDAForSendPayment()@<X0>(char *a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v33 = 0;
  uint64_t v56 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v60 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v28 = 0;
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v40 - 8);
  uint64_t v39 = v40 - 8;
  unint64_t v29 = (*(void *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  unint64_t v35 = (char *)v18 - v29;
  unint64_t v30 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (uint64_t)v18 - v30;
  uint64_t v50 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v46 = *(void *)(v50 - 8);
  uint64_t v47 = v50 - 8;
  uint64_t v44 = v46;
  uint64_t v45 = *(void *)(v46 + 64);
  unint64_t v31 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v33);
  uint64_t v49 = (char *)v18 - v31;
  unint64_t v32 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v41 = (uint64_t)v18 - v32;
  uint64_t v82 = (char *)v18 - v32;
  type metadata accessor for UsoTaskBuilder_pay_common_Payment();
  uint64_t v36 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  uint64_t v81 = v36;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v34 = UsoEntityBuilder_common_Payment.__allocating_init()();
  uint64_t v80 = v34;
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  char v3 = v35;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v36, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v41);
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v3, v4, v40);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v43 = v46 + 16;
  v42(v49, v41, v50);
  unint64_t v48 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v58 = 7;
  uint64_t v59 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v59 + v48, v49, v50);
  unint64_t v71 = Logger.logObject.getter();
  int v72 = static os_log_type_t.debug.getter();
  uint64_t v53 = &v78;
  uint64_t v78 = 12;
  unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v54 = v79;
  uint64_t v55 = 17;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = 8;
  uint64_t v57 = 32;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v59;
  uint64_t v61 = v5;
  *(void *)(v5 + 16) = v56;
  *(void *)(v5 + 24) = v6;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v61;
  uint64_t v68 = v7;
  *(void *)(v7 + 16) = v60;
  *(void *)(v7 + 24) = v8;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v66 = _allocateUninitializedArray<A>(_:)();
  uint64_t v69 = v9;
  swift_retain();
  uint64_t v10 = v63;
  unint64_t v11 = v69;
  *uint64_t v69 = v62;
  v11[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v10;
  swift_retain();
  uint64_t v12 = v65;
  unsigned int v13 = v69;
  v69[2] = v64;
  void v13[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
  swift_retain();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
  int v15 = v69;
  v69[4] = v67;
  void v15[5] = v14;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v71, (os_log_type_t)v72))
  {
    uint64_t v16 = v28;
    uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(1);
    uint64_t v23 = &v77;
    uint64_t v77 = v20;
    uint64_t v24 = &v76;
    uint64_t v76 = v21;
    uint64_t v25 = &v75;
    uint64_t v75 = v22;
    serialize(_:at:)(2, &v77);
    serialize(_:at:)(1, v23);
    unint64_t v73 = v62;
    uint64_t v74 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25);
    uint64_t v26 = v16;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      unint64_t v73 = v64;
      uint64_t v74 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      v18[0] = 0;
      unint64_t v73 = v67;
      uint64_t v74 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      _os_log_impl(&dword_25D85A000, v71, (os_log_type_t)v72, "#PaymentsContextProvider returning SystemPrompted for handle SendPayment intent %s", v20, v54);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v40);
  v42(v27, v41, v50);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v50);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForRequestPayment()@<X0>(char *a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v33 = 0;
  uint64_t v56 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v60 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v28 = 0;
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v40 - 8);
  uint64_t v39 = v40 - 8;
  unint64_t v29 = (*(void *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  unint64_t v35 = (char *)v18 - v29;
  unint64_t v30 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (uint64_t)v18 - v30;
  uint64_t v50 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v46 = *(void *)(v50 - 8);
  uint64_t v47 = v50 - 8;
  uint64_t v44 = v46;
  uint64_t v45 = *(void *)(v46 + 64);
  unint64_t v31 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v33);
  uint64_t v49 = (char *)v18 - v31;
  unint64_t v32 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v41 = (uint64_t)v18 - v32;
  uint64_t v82 = (char *)v18 - v32;
  type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
  uint64_t v36 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  uint64_t v81 = v36;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v34 = UsoEntityBuilder_common_Payment.__allocating_init()();
  uint64_t v80 = v34;
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  char v3 = v35;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v36, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v41);
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v3, v4, v40);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v43 = v46 + 16;
  v42(v49, v41, v50);
  unint64_t v48 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v58 = 7;
  uint64_t v59 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v59 + v48, v49, v50);
  unint64_t v71 = Logger.logObject.getter();
  int v72 = static os_log_type_t.debug.getter();
  uint64_t v53 = &v78;
  uint64_t v78 = 12;
  unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v54 = v79;
  uint64_t v55 = 17;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = 8;
  uint64_t v57 = 32;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v59;
  uint64_t v61 = v5;
  *(void *)(v5 + 16) = v56;
  *(void *)(v5 + 24) = v6;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v61;
  uint64_t v68 = v7;
  *(void *)(v7 + 16) = v60;
  *(void *)(v7 + 24) = v8;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v66 = _allocateUninitializedArray<A>(_:)();
  uint64_t v69 = v9;
  swift_retain();
  uint64_t v10 = v63;
  unint64_t v11 = v69;
  *uint64_t v69 = v62;
  v11[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v10;
  swift_retain();
  uint64_t v12 = v65;
  unsigned int v13 = v69;
  v69[2] = v64;
  void v13[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
  swift_retain();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
  int v15 = v69;
  v69[4] = v67;
  void v15[5] = v14;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v71, (os_log_type_t)v72))
  {
    uint64_t v16 = v28;
    uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(1);
    uint64_t v23 = &v77;
    uint64_t v77 = v20;
    uint64_t v24 = &v76;
    uint64_t v76 = v21;
    uint64_t v25 = &v75;
    uint64_t v75 = v22;
    serialize(_:at:)(2, &v77);
    serialize(_:at:)(1, v23);
    unint64_t v73 = v62;
    uint64_t v74 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25);
    uint64_t v26 = v16;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      unint64_t v73 = v64;
      uint64_t v74 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      v18[0] = 0;
      unint64_t v73 = v67;
      uint64_t v74 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      _os_log_impl(&dword_25D85A000, v71, (os_log_type_t)v72, "#PaymentsContextProvider returning SystemPrompted for handle RequestPayment intent %s", v20, v54);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v40);
  v42(v27, v41, v50);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v50);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.handleSearchForAccounts(account:needsSDA:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a3;
  uint64_t v14 = a1;
  int v15 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v16 = 0;
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v8 - 8;
  unint64_t v11 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v13 = (char *)v6 - v11;
  uint64_t v18 = (char *)v6 - v11;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  int v12 = 1;
  char v16 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  static PaymentsContextProvider.targetDomain.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  static RREntity.makeEntities(for:)(v14);
  NLContextUpdate.rrEntities.setter();
  if (v15)
  {
    v6[1] = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    v6[0] = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSearchForAccount()(v4);
    _finalizeUninitializedArray<A>(_:)();
    NLContextUpdate.nluSystemDialogActs.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v7, v13, v8);
}

uint64_t static PaymentsContextProvider.makeSDAForSearchForAccount()@<X0>(char *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v32 = 0;
  uint64_t v56 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v60 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v29 = 0;
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v40 - 8);
  uint64_t v39 = v40 - 8;
  unint64_t v30 = (*(void *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  unint64_t v35 = (char *)v19 - v30;
  unint64_t v31 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v32);
  uint64_t v37 = (uint64_t)v19 - v31;
  uint64_t v50 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v46 = *(void *)(v50 - 8);
  uint64_t v47 = v50 - 8;
  uint64_t v44 = v46;
  uint64_t v45 = *(void *)(v46 + 64);
  unint64_t v33 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v32);
  uint64_t v49 = (char *)v19 - v33;
  unint64_t v34 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v41 = (uint64_t)v19 - v34;
  uint64_t v81 = (char *)v19 - v34;
  type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
  uint64_t v3 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  uint64_t v4 = v35;
  uint64_t v36 = v3;
  uint64_t v80 = v3;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v3, v37);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v37, v41);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v4, v5, v40);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v43 = v46 + 16;
  v42(v49, v41, v50);
  unint64_t v48 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v58 = 7;
  uint64_t v59 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v59 + v48, v49, v50);
  unint64_t v71 = Logger.logObject.getter();
  int v72 = static os_log_type_t.debug.getter();
  uint64_t v53 = &v78;
  uint64_t v78 = 12;
  unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v54 = v79;
  uint64_t v55 = 17;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = 8;
  uint64_t v57 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v59;
  uint64_t v61 = v6;
  *(void *)(v6 + 16) = v56;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v61;
  uint64_t v68 = v8;
  *(void *)(v8 + 16) = v60;
  *(void *)(v8 + 24) = v9;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v66 = _allocateUninitializedArray<A>(_:)();
  uint64_t v69 = v10;
  swift_retain();
  uint64_t v11 = v63;
  int v12 = v69;
  *uint64_t v69 = v62;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v65;
  uint64_t v14 = v69;
  v69[2] = v64;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  int v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
  char v16 = v69;
  v69[4] = v67;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v71, (os_log_type_t)v72))
  {
    uint64_t v17 = v29;
    uint64_t v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    uint64_t v24 = &v77;
    uint64_t v77 = v21;
    uint64_t v25 = &v76;
    uint64_t v76 = v22;
    uint64_t v26 = &v75;
    uint64_t v75 = v23;
    serialize(_:at:)(2, &v77);
    serialize(_:at:)(1, v24);
    unint64_t v73 = v62;
    uint64_t v74 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    uint64_t v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      unint64_t v73 = v64;
      uint64_t v74 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      v19[0] = 0;
      unint64_t v73 = v67;
      uint64_t v74 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v73, (uint64_t)&v77, (uint64_t)&v76, (uint64_t)&v75);
      _os_log_impl(&dword_25D85A000, v71, (os_log_type_t)v72, "#PaymentsContextProvider returning SystemPrompted for handle Search for Accounts intent %s", v21, v54);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v21, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v40);
  v42(v28, v41, v50);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v50);
  return swift_release();
}

uint64_t closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SearchForAccountsSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  uint64_t result = RequestPaymentSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t static PaymentsContextProvider.makeSDAForSearchForAccountNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint32_t v54 = a2;
  int v79 = a1;
  uint64_t v77 = 0;
  uint64_t v55 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v56 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v93 = 0;
  char v92 = 0;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  uint64_t v60 = 0;
  uint64_t v82 = 0;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = v61 - 8;
  unint64_t v64 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v65 = (char *)v19 - v64;
  unint64_t v66 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v77);
  uint64_t v67 = (uint64_t)v19 - v66;
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v70 = *(void *)(v68 - 8);
  uint64_t v69 = v68 - 8;
  uint64_t v71 = v70;
  uint64_t v73 = *(void *)(v70 + 64);
  unint64_t v72 = (v73 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v77);
  uint64_t v74 = (char *)v19 - v72;
  unint64_t v75 = (v73 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v76 = (uint64_t)v19 - v75;
  uint64_t v93 = (char *)v19 - v75;
  char v92 = v3;
  type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
  uint64_t v78 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  uint64_t v91 = v78;
  type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
  uint64_t v80 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
  uint64_t v90 = v80;
  uint64_t v81 = v79;
  switch((char)v79)
  {
    case 1:
      Builtin::Word v50 = 0;
      type metadata accessor for UsoEntityBuilder_common_PaymentAccountType();
      uint64_t v52 = UsoEntityBuilder_common_PaymentAccountType.__allocating_init()();
      uint64_t v82 = v52;
      object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v50, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.setName(value:)();
      swift_bridgeObjectRelease();
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountType(value:)();
      swift_release();
      swift_release();
      break;
    case 2:
      uint64_t v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setOrganization(value:)();
      swift_bridgeObjectRelease();
      break;
    case 3:
      break;
    default:
      uint64_t v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNickname(value:)();
      swift_bridgeObjectRelease();
      break;
  }
  dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)();
  uint64_t v4 = v65;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v78, v67);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v67, v76);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v4, v5, v61);
  uint64_t v30 = v71;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v29 = v70 + 16;
  v28(v74, v76, v68);
  unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v38 = 7;
  uint64_t v39 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v70 + 32))(v39 + v31, v74, v68);
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  unint64_t v34 = &v88;
  uint64_t v88 = 12;
  unint64_t v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v35 = v89;
  uint64_t v36 = 17;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 32;
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v37 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v39;
  uint64_t v40 = v6;
  *(void *)(v6 + 16) = v55;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v40;
  uint64_t v44 = v8;
  *(void *)(v8 + 16) = v56;
  *(void *)(v8 + 24) = v9;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  uint64_t v45 = v10;
  swift_retain();
  uint64_t v11 = v41;
  int v12 = v45;
  *uint64_t v45 = v57;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v42;
  uint64_t v14 = v45;
  v45[2] = v58;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  int v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  char v16 = v45;
  v45[4] = v59;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    uint64_t v17 = v60;
    uint64_t v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    uint64_t v24 = &v87;
    unint64_t v87 = v21;
    uint64_t v25 = &v86;
    uint64_t v86 = v22;
    uint64_t v26 = &v85;
    uint64_t v85 = v23;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(1, v24);
    unsigned int v83 = v57;
    uint64_t v84 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    uint64_t v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      unsigned int v83 = v58;
      uint64_t v84 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v19[0] = 0;
      unsigned int v83 = v59;
      uint64_t v84 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      _os_log_impl(&dword_25D85A000, v47, (os_log_type_t)v48, "#PaymentsContextProvider returning SystemPrompted for handle Search for Accounts intent %s", v21, v35);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v21, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
  v28(v54, v76, v68);
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v76, v68);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  unsigned int v24 = a1;
  int v23 = a2;
  uint64_t v36 = closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:);
  uint64_t v41 = 0;
  char v40 = 0;
  char v39 = 0;
  uint64_t v33 = 0;
  uint64_t v25 = type metadata accessor for NLContextUpdate();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = v25 - 8;
  unint64_t v28 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v31 = (char *)&v15 - v28;
  uint64_t v41 = (char *)&v15 - v28;
  char v40 = MEMORY[0x270FA5388](v24);
  int v32 = 1;
  char v39 = v3 & 1;
  NLContextUpdate.init()();
  static PaymentsContextProvider.domainName.getter();
  NLContextUpdate.currentDomainName.setter();
  uint64_t v35 = MEMORY[0x263F8D310];
  uint64_t v30 = _allocateUninitializedArray<A>(_:)();
  uint64_t v29 = v4;
  uint64_t v5 = Constants.NLPaymentConfirmationValue.canonicalName.getter(v32);
  uint64_t v6 = v29;
  *uint64_t v29 = v5;
  v6[1] = v7;
  uint64_t v8 = Constants.NLPaymentConfirmationValue.canonicalName.getter(2);
  uint64_t v9 = v29;
  v29[2] = v8;
  v9[3] = v10;
  _finalizeUninitializedArray<A>(_:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.Payments", 0x1AuLL, v32 & 1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  uint64_t v38 = static SendPaymentSlots.allCases.getter();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SendPaymentSlots]);
  lazy protocol witness table accessor for type [SendPaymentSlots] and conformance [A]();
  uint64_t v37 = Sequence.compactMap<A>(_:)();
  uint64_t v21 = v37;
  outlined destroy of [SFCardSection]();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  if (v23)
  {
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    uint64_t v18 = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForVerblessSendPaymentNeedsValue(_:)(v24, v11);
    uint64_t v12 = v18;
  }
  else
  {
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
    uint64_t v16 = _allocateUninitializedArray<A>(_:)();
    static PaymentsContextProvider.makeSDAForSendPaymentNeedsValue(_:)(v24, v13);
    uint64_t v12 = v16;
  }
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v20 = v12;
  NLContextUpdate.nluSystemDialogActs.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v22, v31, v25);
}

uint64_t closure #1 in static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SendPaymentSlots.canonicalName.getter(*a1);
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t static PaymentsContextProvider.makeSDAForVerblessSendPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v52 = a2;
  int v77 = a1;
  uint64_t v75 = 0;
  uint64_t v53 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint32_t v54 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v91 = 0;
  char v90 = 0;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v58 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = v59 - 8;
  unint64_t v62 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v63 = (char *)v19 - v62;
  unint64_t v64 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v75);
  uint64_t v65 = (uint64_t)v19 - v64;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v67 = v66 - 8;
  uint64_t v69 = v68;
  uint64_t v71 = *(void *)(v68 + 64);
  unint64_t v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v75);
  unint64_t v72 = (char *)v19 - v70;
  unint64_t v73 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (uint64_t)v19 - v73;
  uint64_t v91 = (char *)v19 - v73;
  char v90 = v3;
  type metadata accessor for UsoTaskBuilder_noVerb_common_Payment();
  uint64_t v76 = UsoTaskBuilder_noVerb_common_Payment.__allocating_init()();
  uint64_t v89 = v76;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v78 = UsoEntityBuilder_common_Payment.__allocating_init()();
  uint64_t v88 = v78;
  if ((_BYTE)v77)
  {
    if (v77 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      uint64_t v50 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      uint64_t v80 = v50;
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_Payment.setAmount(value:)();
      swift_release();
      swift_release();
    }
    else
    {
      object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_Payment.setMemo(value:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    uint64_t v51 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    uint64_t v79 = v51;
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Payment.setPayee(value:)();
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  uint64_t v4 = v63;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v76, v65);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v65, v74);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v4, v5, v59);
  uint64_t v30 = v69;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v29 = v68 + 16;
  v28(v72, v74, v66);
  unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v38 = 7;
  uint64_t v39 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v39 + v31, v72, v66);
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  uint64_t v34 = &v86;
  uint64_t v86 = 12;
  unint64_t v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v35 = v87;
  uint64_t v36 = 17;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 32;
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v37 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v39;
  uint64_t v40 = v6;
  *(void *)(v6 + 16) = v53;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v40;
  uint64_t v44 = v8;
  *(void *)(v8 + 16) = v54;
  *(void *)(v8 + 24) = v9;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  uint64_t v45 = v10;
  swift_retain();
  uint64_t v11 = v41;
  uint64_t v12 = v45;
  *uint64_t v45 = v55;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v42;
  uint64_t v14 = v45;
  v45[2] = v56;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  uint64_t v16 = v45;
  v45[4] = v57;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    uint64_t v17 = v58;
    uint64_t v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    unsigned int v24 = &v85;
    uint64_t v85 = v21;
    uint64_t v25 = &v84;
    uint64_t v84 = v22;
    uint64_t v26 = &v83;
    uint64_t v83 = v23;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(1, v24);
    uint64_t v81 = v55;
    uint64_t v82 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    uint64_t v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v81 = v56;
      uint64_t v82 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v19[0] = 0;
      uint64_t v81 = v57;
      uint64_t v82 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      _os_log_impl(&dword_25D85A000, v47, (os_log_type_t)v48, "#PaymentsContextProvider returning SystemPrompted for handle verbless Send Payment intent %s", v21, v35);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v21, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v59);
  v28(v52, v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForSendPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v52 = a2;
  int v77 = a1;
  uint64_t v75 = 0;
  uint64_t v53 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint32_t v54 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v91 = 0;
  char v90 = 0;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v58 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = v59 - 8;
  unint64_t v62 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v63 = (char *)v19 - v62;
  unint64_t v64 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v75);
  uint64_t v65 = (uint64_t)v19 - v64;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v67 = v66 - 8;
  uint64_t v69 = v68;
  uint64_t v71 = *(void *)(v68 + 64);
  unint64_t v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v75);
  unint64_t v72 = (char *)v19 - v70;
  unint64_t v73 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (uint64_t)v19 - v73;
  uint64_t v91 = (char *)v19 - v73;
  char v90 = v3;
  type metadata accessor for UsoTaskBuilder_pay_common_Payment();
  uint64_t v76 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
  uint64_t v89 = v76;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v78 = UsoEntityBuilder_common_Payment.__allocating_init()();
  uint64_t v88 = v78;
  if ((_BYTE)v77)
  {
    if (v77 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      uint64_t v50 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      uint64_t v80 = v50;
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_Payment.setAmount(value:)();
      swift_release();
      swift_release();
    }
    else
    {
      object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_Payment.setMemo(value:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    uint64_t v51 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    uint64_t v79 = v51;
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Payment.setPayee(value:)();
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  uint64_t v4 = v63;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v76, v65);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v65, v74);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v4, v5, v59);
  uint64_t v30 = v69;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v29 = v68 + 16;
  v28(v72, v74, v66);
  unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v38 = 7;
  uint64_t v39 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v39 + v31, v72, v66);
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  uint64_t v34 = &v86;
  uint64_t v86 = 12;
  unint64_t v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v35 = v87;
  uint64_t v36 = 17;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 32;
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v37 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v39;
  uint64_t v40 = v6;
  *(void *)(v6 + 16) = v53;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v40;
  uint64_t v44 = v8;
  *(void *)(v8 + 16) = v54;
  *(void *)(v8 + 24) = v9;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  uint64_t v45 = v10;
  swift_retain();
  uint64_t v11 = v41;
  uint64_t v12 = v45;
  *uint64_t v45 = v55;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v42;
  uint64_t v14 = v45;
  v45[2] = v56;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  uint64_t v16 = v45;
  v45[4] = v57;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    uint64_t v17 = v58;
    uint64_t v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    unsigned int v24 = &v85;
    uint64_t v85 = v21;
    uint64_t v25 = &v84;
    uint64_t v84 = v22;
    uint64_t v26 = &v83;
    uint64_t v83 = v23;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(1, v24);
    uint64_t v81 = v55;
    uint64_t v82 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    uint64_t v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v81 = v56;
      uint64_t v82 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v19[0] = 0;
      uint64_t v81 = v57;
      uint64_t v82 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      _os_log_impl(&dword_25D85A000, v47, (os_log_type_t)v48, "#PaymentsContextProvider returning SystemPrompted for handle Send Payment intent %s", v21, v35);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v21, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v59);
  v28(v52, v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForRequestPaymentNeedsValue(_:)@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v52 = a2;
  int v77 = a1;
  uint64_t v75 = 0;
  uint64_t v53 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint32_t v54 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v91 = 0;
  char v90 = 0;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v58 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = v59 - 8;
  unint64_t v62 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v63 = (char *)v19 - v62;
  unint64_t v64 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_SystemPrompted() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v75);
  uint64_t v65 = (uint64_t)v19 - v64;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v67 = v66 - 8;
  uint64_t v69 = v68;
  uint64_t v71 = *(void *)(v68 + 64);
  unint64_t v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v75);
  unint64_t v72 = (char *)v19 - v70;
  unint64_t v73 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (uint64_t)v19 - v73;
  uint64_t v91 = (char *)v19 - v73;
  char v90 = v3;
  type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
  uint64_t v76 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
  uint64_t v89 = v76;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v78 = UsoEntityBuilder_common_Payment.__allocating_init()();
  uint64_t v88 = v78;
  if ((_BYTE)v77)
  {
    if (v77 == 1)
    {
      type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
      uint64_t v50 = UsoEntityBuilder_common_CurrencyAmount.__allocating_init()();
      uint64_t v80 = v50;
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_Payment.setAmount(value:)();
      swift_release();
      swift_release();
    }
    else
    {
      object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._object;
      dispatch thunk of UsoEntityBuilder_common_Payment.setMemo(value:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
    uint64_t v51 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
    uint64_t v79 = v51;
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Payment.setPayer(value:)();
    swift_release();
    swift_release();
  }
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  uint64_t v4 = v63;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v76, v65);
  Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)(v65, v74);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v4, v5, v59);
  uint64_t v30 = v69;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v29 = v68 + 16;
  v28(v72, v74, v66);
  unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v38 = 7;
  uint64_t v39 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v39 + v31, v72, v66);
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  uint64_t v34 = &v86;
  uint64_t v86 = 12;
  unint64_t v32 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v35 = v87;
  uint64_t v36 = 17;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 32;
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v37 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v39;
  uint64_t v40 = v6;
  *(void *)(v6 + 16) = v53;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v40;
  uint64_t v44 = v8;
  *(void *)(v8 + 16) = v54;
  *(void *)(v8 + 24) = v9;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  uint64_t v45 = v10;
  swift_retain();
  uint64_t v11 = v41;
  uint64_t v12 = v45;
  *uint64_t v45 = v55;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v42;
  uint64_t v14 = v45;
  v45[2] = v56;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  uint64_t v16 = v45;
  v45[4] = v57;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    uint64_t v17 = v58;
    uint64_t v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    unsigned int v24 = &v85;
    uint64_t v85 = v21;
    uint64_t v25 = &v84;
    uint64_t v84 = v22;
    uint64_t v26 = &v83;
    uint64_t v83 = v23;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(1, v24);
    uint64_t v81 = v55;
    uint64_t v82 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26);
    uint64_t v27 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v81 = v56;
      uint64_t v82 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v19[0] = 0;
      uint64_t v81 = v57;
      uint64_t v82 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      _os_log_impl(&dword_25D85A000, v47, (os_log_type_t)v48, "#PaymentsContextProvider returning SystemPrompted for handle Request Payment intent %s", v21, v35);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v21, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v59);
  v28(v52, v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
  swift_release();
  return swift_release();
}

uint64_t static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v45 = a1;
  int v39 = a2;
  uint64_t v51 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:);
  uint64_t v55 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v37 = partial apply for closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:);
  uint64_t v78 = 0;
  char v77 = 0;
  uint64_t v38 = 0;
  uint64_t v73 = 0;
  uint64_t v44 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v43 = v44 - 8;
  unint64_t v40 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  char v3 = (char *)v23 - v40;
  uint64_t v41 = (char *)v23 - v40;
  uint64_t v78 = MEMORY[0x270FA5388](v45);
  char v77 = v4 & 1;
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v3, v5, v44);
  swift_bridgeObjectRetain();
  uint64_t v53 = 7;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v45;
  uint64_t v66 = Logger.logObject.getter();
  int v67 = static os_log_type_t.debug.getter();
  int v48 = &v75;
  uint64_t v75 = 12;
  unint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v49 = v76;
  uint64_t v50 = 17;
  uint64_t v58 = swift_allocObject();
  *(unsigned char *)(v58 + 16) = 32;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 8;
  uint64_t v52 = 32;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v54;
  uint64_t v56 = v6;
  *(void *)(v6 + 16) = v51;
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v56;
  uint64_t v63 = v8;
  *(void *)(v8 + 16) = v55;
  *(void *)(v8 + 24) = v9;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v61 = _allocateUninitializedArray<A>(_:)();
  unint64_t v64 = v10;
  swift_retain();
  uint64_t v11 = v58;
  uint64_t v12 = v64;
  *unint64_t v64 = v57;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v60;
  uint64_t v14 = v64;
  v64[2] = v59;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63;
  uint64_t v16 = v64;
  v64[4] = v62;
  v16[5] = v15;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v66, (os_log_type_t)v67))
  {
    uint64_t v17 = v38;
    uint64_t v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v30 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = createStorage<A>(capacity:type:)(1);
    unint64_t v32 = &v72;
    unint64_t v72 = v29;
    unint64_t v33 = &v71;
    uint64_t v71 = v30;
    uint64_t v34 = &v70;
    uint64_t v70 = v31;
    serialize(_:at:)(2, &v72);
    serialize(_:at:)(1, v32);
    uint64_t v68 = v57;
    uint64_t v69 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)v32, (uint64_t)v33, (uint64_t)v34);
    uint64_t v35 = v17;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v68 = v59;
      uint64_t v69 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v72, (uint64_t)&v71, (uint64_t)&v70);
      uint64_t v26 = 0;
      uint64_t v19 = v26;
      uint64_t v68 = v62;
      uint64_t v69 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v68, (uint64_t)&v72, (uint64_t)&v71, (uint64_t)&v70);
      uint64_t v25 = v19;
      _os_log_impl(&dword_25D85A000, v66, (os_log_type_t)v67, "#PaymentsContextProvider creating SDAs for contact disambiguation %s", v29, v49);
      destroyStorage<A>(_:count:)(v30, 0, v28);
      destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v29, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = v25;
    }
  }
  else
  {
    uint64_t v18 = v38;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v27 = v18;
  }
  uint64_t v20 = v27;

  (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v44);
  uint64_t v74 = v45;
  v23[2] = v23;
  MEMORY[0x270FA5388](v23);
  void v23[3] = &v23[-4];
  LOBYTE(v23[-2]) = v21 & 1;
  v23[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v23[5] = type metadata accessor for UsoTaskBuilder();
  lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  uint64_t result = Sequence.compactMap<A>(_:)();
  uint64_t v24 = result;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    v23[1] = v24;
    uint64_t v73 = v24;
    static PaymentsContextProvider.makeDisambiguationAct(for:)(v24, v36);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static PaymentsContextProvider.makeSDAForTCCAcceptance()@<X0>(char *a1@<X8>)
{
  return static PaymentsContextProvider.makeSDAForSearchForAccount()(a1);
}

uint64_t static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char *a6@<X8>)
{
  uint64_t v73 = a6;
  uint64_t v101 = a1;
  uint64_t v104 = a2;
  uint64_t v111 = a3;
  uint64_t v102 = a4;
  int v103 = a5;
  uint64_t v105 = 0;
  uint64_t v74 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v75 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint32_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  char v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  uint64_t v132 = 0;
  uint64_t v131 = 0;
  uint64_t v130 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  char v127 = 0;
  uint64_t v126 = 0;
  uint64_t v125 = 0;
  uint64_t v124 = 0;
  uint64_t v79 = 0;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v80 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = v80 - 8;
  unint64_t v83 = (*(void *)(v81 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v84 = (char *)v30 - v83;
  uint64_t v85 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v87 = *(void *)(v85 - 8);
  uint64_t v86 = v85 - 8;
  uint64_t v88 = v87;
  uint64_t v89 = *(void *)(v87 + 64);
  unint64_t v90 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v105);
  uint64_t v91 = (char *)v30 - v90;
  unint64_t v92 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v93 = (uint64_t)v30 - v92;
  uint64_t v134 = (char *)v30 - v92;
  uint64_t v94 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = v94 - 8;
  unint64_t v97 = (*(void *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v105);
  uint64_t v98 = (uint64_t)v30 - v97;
  unint64_t v99 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v100 = (uint64_t)v30 - v99;
  uint64_t v133 = (char *)v30 - v99;
  uint64_t v106 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v107 = *(void *)(v106 - 8);
  uint64_t v108 = v106 - 8;
  unint64_t v109 = (*(void *)(v107 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v105);
  uint64_t v110 = (uint64_t)v30 - v109;
  uint64_t v132 = (char *)v30 - v109;
  uint64_t v131 = v10;
  uint64_t v130 = v11;
  uint64_t v128 = v12;
  uint64_t v129 = v13;
  char v127 = v14 & 1;
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    uint64_t v69 = 0;
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    uint64_t v72 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    uint64_t v113 = v72;
    type metadata accessor for UsoEntityBuilder_common_Payment();
    uint64_t v71 = UsoEntityBuilder_common_Payment.__allocating_init()();
    uint64_t v112 = v71;
    uint64_t v70 = App.toUsoEntityBuilder(locale:)(v104);
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
    swift_retain();
    uint64_t v126 = v72;
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      uint64_t v65 = 0;
      type metadata accessor for UsoTaskBuilder_pay_common_Payment();
      uint64_t v68 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
      uint64_t v115 = v68;
      type metadata accessor for UsoEntityBuilder_common_Payment();
      uint64_t v67 = UsoEntityBuilder_common_Payment.__allocating_init()();
      uint64_t v114 = v67;
      uint64_t v66 = App.toUsoEntityBuilder(locale:)(v104);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
      swift_retain();
      uint64_t v126 = v68;
      swift_release();
      swift_release();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
      uint64_t v63 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
      uint64_t v125 = v63;
      uint64_t v64 = App.toUsoEntityBuilder(locale:)(v104);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      if (v103)
      {
        type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
        uint64_t v62 = UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
        uint64_t v116 = v62;
        dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setReference(value:)();
        swift_retain();
        uint64_t v126 = v62;
      }
      else
      {
        type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
        uint64_t v61 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
        uint64_t v124 = v61;
        dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)();
        swift_retain();
        uint64_t v126 = v61;
      }
      swift_release();
      swift_release();
    }
  }
  uint64_t v15 = v84;
  uint64_t v39 = v126;
  swift_retain();
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v39, v110);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v110, v100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v98, v100, v94);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v98, v93);
  uint64_t v16 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v15, v16, v80);
  uint64_t v42 = v88;
  unint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  uint64_t v41 = v87 + 16;
  v40(v91, v93, v85);
  unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v50 = 7;
  uint64_t v51 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v51 + v43, v91, v85);
  uint64_t v59 = Logger.logObject.getter();
  int v60 = static os_log_type_t.debug.getter();
  unint64_t v46 = &v122;
  uint64_t v122 = 12;
  unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v47 = v123;
  uint64_t v48 = 17;
  uint64_t v53 = swift_allocObject();
  *(unsigned char *)(v53 + 16) = 32;
  uint64_t v54 = swift_allocObject();
  *(unsigned char *)(v54 + 16) = 8;
  uint64_t v49 = 32;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v51;
  uint64_t v52 = v17;
  *(void *)(v17 + 16) = v74;
  *(void *)(v17 + 24) = v18;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v52;
  uint64_t v56 = v19;
  *(void *)(v19 + 16) = v75;
  *(void *)(v19 + 24) = v20;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v55 = _allocateUninitializedArray<A>(_:)();
  uint64_t v57 = v21;
  swift_retain();
  uint64_t v22 = v53;
  uint64_t v23 = v57;
  *uint64_t v57 = v76;
  v23[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
  swift_retain();
  uint64_t v24 = v54;
  uint64_t v25 = v57;
  v57[2] = v77;
  v25[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  swift_retain();
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
  uint64_t v27 = v57;
  v57[4] = v78;
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v59, (os_log_type_t)v60))
  {
    uint64_t v28 = v79;
    unint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v33 = createStorage<A>(capacity:type:)(0);
    uint64_t v34 = createStorage<A>(capacity:type:)(1);
    uint64_t v35 = &v121;
    uint64_t v121 = v32;
    uint64_t v36 = &v120;
    uint64_t v120 = v33;
    uint64_t v37 = &v119;
    uint64_t v119 = v34;
    serialize(_:at:)(2, &v121);
    serialize(_:at:)(1, v35);
    uint64_t v117 = v76;
    uint64_t v118 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37);
    uint64_t v38 = v28;
    if (v28)
    {
      __break(1u);
    }
    else
    {
      uint64_t v117 = v77;
      uint64_t v118 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v121, (uint64_t)&v120, (uint64_t)&v119);
      v30[0] = 0;
      uint64_t v117 = v78;
      uint64_t v118 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v117, (uint64_t)&v121, (uint64_t)&v120, (uint64_t)&v119);
      _os_log_impl(&dword_25D85A000, v59, (os_log_type_t)v60, "#PaymentsContextProvider returning SystemOffered for confirm intent %s", v32, v47);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v32, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v81 + 8))(v84, v80);
  v40(v73, v93, v85);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v93, v85);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v100, v94);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v110, v106);
  return swift_release();
}

uint64_t closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v18 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  int v25 = a5;
  unint64_t v44 = 0;
  unint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v38 = 0;
  uint64_t v16 = 0;
  uint64_t v33 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v30 = *(void *)(v33 - 8);
  uint64_t v31 = v33 - 8;
  unint64_t v15 = (*(void *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  unint64_t v32 = (char *)&v14 - v15;
  unint64_t v44 = (char *)&v14 - v15;
  unint64_t v17 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_UsoGraph() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v16);
  uint64_t v26 = (uint64_t)&v14 - v17;
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v34 = *(void *)(v37 - 8);
  uint64_t v35 = v37 - 8;
  unint64_t v19 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v18);
  uint64_t v27 = (char *)&v14 - v19;
  unint64_t v20 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = (uint64_t *)MEMORY[0x270FA5388](v6);
  uint64_t v36 = (char *)&v14 - v20;
  unint64_t v43 = (char *)&v14 - v20;
  uint64_t v21 = *v8;
  uint64_t v42 = v21;
  uint64_t v41 = v9;
  uint64_t v39 = v10;
  uint64_t v40 = v11;
  unsigned int v28 = 1;
  char v38 = v12 & 1;
  Siri_Nlu_External_UserStatedTask.init()();
  static PaymentsContextProvider.createUsoGraph(for:locale:intentType:isRequestAccount:)(v22, v25 & 1, v26);
  Siri_Nlu_External_UserStatedTask.task.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v27, v36, v37);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v29, v32, v33);
  (*(void (**)(uint64_t, void, void, uint64_t))(v30 + 56))(v29, 0, v28, v33);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v37);
}

uint64_t partial apply for closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40) & 1, a2);
}

uint64_t static PaymentsContextProvider.createUsoGraph(for:locale:intentType:isRequestAccount:)@<X0>(uint64_t a1@<X1>, char a2@<W4>, uint64_t a3@<X8>)
{
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    type metadata accessor for UsoEntityBuilder_common_Payment();
    UsoEntityBuilder_common_Payment.__allocating_init()();
    App.toUsoEntityBuilder(locale:)(a1);
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
    UsoTaskBuilder.asUsoGraph()(a3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for UsoTaskBuilder_pay_common_Payment();
      UsoTaskBuilder_pay_common_Payment.__allocating_init()();
      type metadata accessor for UsoEntityBuilder_common_Payment();
      UsoEntityBuilder_common_Payment.__allocating_init()();
      App.toUsoEntityBuilder(locale:)(a1);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
      UsoTaskBuilder.asUsoGraph()(a3);
      swift_release();
      return swift_release();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
      UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
      App.toUsoEntityBuilder(locale:)(a1);
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
      swift_release();
      if (a2)
      {
        type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
        UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
        dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setReference(value:)();
      }
      else
      {
        type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
        UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
        dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)();
      }
      UsoTaskBuilder.asUsoGraph()(a3);
      swift_release();
      return swift_release();
    }
  }
}

uint64_t static PaymentsContextProvider.makeSDAForAppDisambiguation(choices:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v39 = a1;
  uint64_t v34 = 0;
  uint64_t v64 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  uint64_t v68 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v32 = 0;
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v48 - 8);
  uint64_t v47 = v48 - 8;
  unint64_t v33 = (*(void *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v40 = (char *)v22 - v33;
  uint64_t v58 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v54 = *(void *)(v58 - 8);
  uint64_t v55 = v58 - 8;
  uint64_t v52 = v54;
  uint64_t v53 = *(void *)(v54 + 64);
  unint64_t v35 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v34);
  uint64_t v57 = (char *)v22 - v35;
  unint64_t v36 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v49 = (uint64_t)v22 - v36;
  unint64_t v90 = (char *)v22 - v36;
  uint64_t v44 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v41 = *(void *)(v44 - 8);
  uint64_t v42 = v44 - 8;
  unint64_t v37 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v39);
  uint64_t v45 = (uint64_t)v22 - v37;
  unint64_t v38 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v43 = (char *)v22 - v38;
  uint64_t v89 = (char *)v22 - v38;
  uint64_t v88 = v6;
  Siri_Nlu_External_SystemGaveOptions.init()();
  swift_bridgeObjectRetain();
  MEMORY[0x2611B7F10](v39);
  uint64_t v7 = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v45, v43, v44);
  Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)(v45, v49);
  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v7, v8, v48);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  uint64_t v51 = v54 + 16;
  v50(v57, v49, v58);
  unint64_t v56 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v66 = 7;
  uint64_t v67 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v67 + v56, v57, v58);
  uint64_t v79 = Logger.logObject.getter();
  int v80 = static os_log_type_t.debug.getter();
  uint64_t v61 = &v86;
  uint64_t v86 = 12;
  unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v62 = v87;
  uint64_t v63 = 17;
  uint64_t v71 = swift_allocObject();
  *(unsigned char *)(v71 + 16) = 32;
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 8;
  uint64_t v65 = 32;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v67;
  uint64_t v69 = v9;
  *(void *)(v9 + 16) = v64;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v69;
  uint64_t v76 = v11;
  *(void *)(v11 + 16) = v68;
  *(void *)(v11 + 24) = v12;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v74 = _allocateUninitializedArray<A>(_:)();
  char v77 = v13;
  swift_retain();
  uint64_t v14 = v71;
  unint64_t v15 = v77;
  *char v77 = v70;
  v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  swift_retain();
  uint64_t v16 = v73;
  unint64_t v17 = v77;
  v77[2] = v72;
  void v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v76;
  unint64_t v19 = v77;
  v77[4] = v75;
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v79, (os_log_type_t)v80))
  {
    uint64_t v20 = v32;
    uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0);
    uint64_t v26 = createStorage<A>(capacity:type:)(1);
    uint64_t v27 = &v85;
    uint64_t v85 = v24;
    unsigned int v28 = &v84;
    uint64_t v84 = v25;
    uint64_t v29 = &v83;
    uint64_t v83 = v26;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(1, v27);
    uint64_t v81 = v70;
    uint64_t v82 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    uint64_t v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      uint64_t v81 = v72;
      uint64_t v82 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v22[0] = 0;
      uint64_t v81 = v75;
      uint64_t v82 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      _os_log_impl(&dword_25D85A000, v79, (os_log_type_t)v80, "#PaymentsContextProvider returning SystemGaveOptions for confirm intent %s", v24, v62);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v48);
  v50(v31, v49, v58);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v49, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v44);
}

unint64_t type metadata accessor for SAAceConfirmationContext()
{
  uint64_t v2 = lazy cache variable for type metadata for SAAceConfirmationContext;
  if (!lazy cache variable for type metadata for SAAceConfirmationContext)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAceConfirmationContext);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t implicit closure #1 in static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t sub_25D999534()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #1 in static PaymentsContextProvider.makeSDAForAppConfirmation(_:locale:intentType:isRequestAccount:)(v2);
}

uint64_t static PaymentsContextProvider.makeSDAForConfirmSearchForAccount(isRequest:)@<X0>(unsigned int a1@<W0>, char *a2@<X8>)
{
  uint64_t v54 = a2;
  unsigned int v83 = a1;
  uint64_t v75 = 0;
  uint64_t v55 = partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForConfirm(isSend:);
  unint64_t v56 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v99 = 0;
  uint64_t v98 = 0;
  unint64_t v97 = 0;
  char v96 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = v61 - 8;
  unint64_t v64 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v65 = (char *)v22 - v64;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v67 = v66 - 8;
  uint64_t v69 = v68;
  uint64_t v70 = *(void *)(v68 + 64);
  unint64_t v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v75);
  uint64_t v72 = (char *)v22 - v71;
  unint64_t v73 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (uint64_t)v22 - v73;
  unint64_t v99 = (char *)v22 - v73;
  uint64_t v76 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = v76 - 8;
  unint64_t v79 = (*(void *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v75);
  uint64_t v80 = (uint64_t)v22 - v79;
  unint64_t v81 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v82 = (uint64_t)v22 - v81;
  uint64_t v98 = (char *)v22 - v81;
  uint64_t v84 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = v84 - 8;
  unint64_t v87 = (*(void *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  char v6 = MEMORY[0x270FA5388](v83);
  uint64_t v88 = (uint64_t)v22 - v87;
  unint64_t v97 = (char *)v22 - v87;
  char v96 = v6 & 1;
  if (v6)
  {
    type metadata accessor for UsoTaskBuilder_request_common_PaymentAccount();
    uint64_t v53 = UsoTaskBuilder_request_common_PaymentAccount.__allocating_init()();
  }
  else
  {
    type metadata accessor for UsoTaskBuilder_summarise_common_PaymentAccount();
    uint64_t v53 = UsoTaskBuilder_summarise_common_PaymentAccount.__allocating_init()();
  }
  uint64_t v7 = v65;
  uint64_t v31 = v53;
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(v53, v88);
  swift_release();
  static Siri_Nlu_External_SystemOffered.from(_:)(v88, v82);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v80, v82, v76);
  Siri_Nlu_External_SystemDialogAct.init(systemOffered:)(v80, v74);
  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v7, v8, v61);
  uint64_t v34 = v69;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v33 = v68 + 16;
  v32(v72, v74, v66);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v42 = 7;
  uint64_t v43 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v43 + v35, v72, v66);
  uint64_t v51 = Logger.logObject.getter();
  int v52 = static os_log_type_t.debug.getter();
  unint64_t v38 = &v94;
  uint64_t v94 = 12;
  unint64_t v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v39 = v95;
  uint64_t v40 = 17;
  uint64_t v45 = swift_allocObject();
  *(unsigned char *)(v45 + 16) = 32;
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 8;
  uint64_t v41 = 32;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v43;
  uint64_t v44 = v9;
  *(void *)(v9 + 16) = v55;
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v44;
  uint64_t v48 = v11;
  *(void *)(v11 + 16) = v56;
  *(void *)(v11 + 24) = v12;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v47 = _allocateUninitializedArray<A>(_:)();
  uint64_t v49 = v13;
  swift_retain();
  uint64_t v14 = v45;
  unint64_t v15 = v49;
  *uint64_t v49 = v57;
  v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  swift_retain();
  uint64_t v16 = v46;
  unint64_t v17 = v49;
  v49[2] = v58;
  void v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48;
  unint64_t v19 = v49;
  v49[4] = v59;
  v19[5] = v18;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v51, (os_log_type_t)v52))
  {
    uint64_t v20 = v60;
    uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0);
    uint64_t v26 = createStorage<A>(capacity:type:)(1);
    uint64_t v27 = &v93;
    uint64_t v93 = v24;
    unsigned int v28 = &v92;
    uint64_t v92 = v25;
    uint64_t v29 = &v91;
    uint64_t v91 = v26;
    serialize(_:at:)(2, &v93);
    serialize(_:at:)(1, v27);
    uint64_t v89 = v57;
    uint64_t v90 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
    uint64_t v30 = v20;
    if (v20)
    {
      __break(1u);
    }
    else
    {
      uint64_t v89 = v58;
      uint64_t v90 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v93, (uint64_t)&v92, (uint64_t)&v91);
      v22[1] = 0;
      uint64_t v89 = v59;
      uint64_t v90 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v93, (uint64_t)&v92, (uint64_t)&v91);
      _os_log_impl(&dword_25D85A000, v51, (os_log_type_t)v52, "#PaymentsContextProvider returning SystemOffered for confirm Search for Accounts intent %s", v24, v39);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
  v32(v54, v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v82, v76);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v88, v84);
}

uint64_t implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for INPerson();
  return MEMORY[0x2611B9350](a1, v1);
}

uint64_t closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(id *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  id v20 = 0;
  char v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  id v20 = *a1;
  char v19 = a2 & 1;
  type metadata accessor for UsoEntityBuilder_common_Payment();
  uint64_t v18 = UsoEntityBuilder_common_Payment.__allocating_init()();
  type metadata accessor for UsoEntityBuilder_common_PaymentAccount();
  uint64_t v17 = UsoEntityBuilder_common_PaymentAccount.__allocating_init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  uint64_t v16 = UsoEntityBuilder_common_Person.__allocating_init()();
  INPerson.uniqueContactIdentifier.getter();
  dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v20, sel_personHandle);
  if (v15)
  {
    id v8 = v15;
    id v3 = v15;
    outlined destroy of SFRichText?(&v15);
    id v9 = objc_msgSend(v8, sel_value);
    if (v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v4;

      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = 0;
    }

    uint64_t v10 = v7;
  }
  else
  {
    outlined destroy of SFRichText?(&v15);
    uint64_t v10 = 0;
  }
  if (v10)
  {
    type metadata accessor for UsoEntityBuilder_common_ContactAddress();
    UsoEntityBuilder_common_ContactAddress.__allocating_init()();
    dispatch thunk of UsoEntityBuilder_common_ContactAddress.setValue(value:)();
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_retain();
  dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setHolder(value:)();
  swift_release();
  swift_retain();
  if (a2)
  {
    dispatch thunk of UsoEntityBuilder_common_Payment.setPayee(value:)();
    swift_release();
    type metadata accessor for UsoTaskBuilder_pay_common_Payment();
    uint64_t v13 = UsoTaskBuilder_pay_common_Payment.__allocating_init()();
    dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
    swift_retain();
    *a3 = v13;
  }
  else
  {
    dispatch thunk of UsoEntityBuilder_common_Payment.setPayer(value:)();
    swift_release();
    type metadata accessor for UsoTaskBuilder_requestMoney_common_Payment();
    uint64_t v14 = UsoTaskBuilder_requestMoney_common_Payment.__allocating_init()();
    dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
    swift_retain();
    *a3 = v14;
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t *static PaymentsContextProvider.makeDisambiguationAct(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v45 = a1;
  uint64_t v57 = 0;
  unint64_t v56 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  uint64_t v52 = 0;
  uint64_t v46 = v51;
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v48 = 0;
  uint64_t v36 = 0;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v15 - 8;
  unint64_t v18 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  char v19 = (char *)&v9 - v18;
  uint64_t v57 = (char *)&v9 - v18;
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v20 - 8;
  unint64_t v23 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v36);
  uint64_t v24 = (char *)&v9 - v23;
  unint64_t v25 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v26 = (char *)&v9 - v25;
  unint64_t v56 = (char *)&v9 - v25;
  uint64_t v35 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v27 = *(void *)(v35 - 8);
  uint64_t v28 = v35 - 8;
  unint64_t v29 = (*(void *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v36);
  uint64_t v30 = (char *)&v9 - v29;
  unint64_t v31 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v32 = (char *)&v9 - v31;
  uint64_t v55 = (char *)&v9 - v31;
  unint64_t v33 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_UsoGraph() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v36);
  uint64_t v34 = (uint64_t)&v9 - v33;
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = v37 - 8;
  uint64_t v41 = *(void *)(v38 + 64);
  unint64_t v40 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v36);
  uint64_t v42 = (char *)&v9 - v40;
  unint64_t v43 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v44 = (char *)&v9 - v43;
  uint64_t v54 = (char *)&v9 - v43;
  uint64_t v53 = v7;
  uint64_t v52 = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  uint64_t v50 = v45;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTaskBuilder]);
  lazy protocol witness table accessor for type [UsoTaskBuilder] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UsoTaskBuilder]>);
    IndexingIterator.next()();
    uint64_t v13 = v49;
    if (!v49) {
      break;
    }
    uint64_t v12 = v13;
    uint64_t v11 = v13;
    uint64_t v48 = v13;
    Siri_Nlu_External_UserStatedTask.init()();
    UsoTaskBuilder.asUsoGraph()(v34);
    Siri_Nlu_External_UserStatedTask.task.setter();
    Siri_Nlu_External_UserDialogAct.init()();
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v42, v44, v37);
    Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v30, v32, v35);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    Array.append(_:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v35);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v37);
    swift_release();
  }
  outlined destroy of [SFCardSection]();
  Siri_Nlu_External_SystemGaveOptions.init()();
  uint64_t v10 = &v52;
  uint64_t v9 = v52;
  swift_bridgeObjectRetain();
  MEMORY[0x2611B7F10](v9);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v20);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v14, v19, v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  uint64_t result = v10;
  outlined destroy of [SFCardSection]();
  return result;
}

uint64_t sub_25D99AC54()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AC80()
{
  return swift_deallocObject();
}

uint64_t sub_25D99ACAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D99ACEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AD2C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99ADF8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AE24()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AE50()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AE90()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AED0()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99AF9C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AFC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99AFF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B034()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B074()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99B140()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B16C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B198()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B1D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B218()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99B2E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B310()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B33C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B37C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B440()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99B50C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B538()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B564()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B5A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B5E4()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99B6B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B6DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B708()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B748()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B80C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99B8D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B904()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B930()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B970()
{
  return swift_deallocObject();
}

uint64_t sub_25D99B9B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)()
{
  return implicit closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(*(void *)(v0 + 16));
}

uint64_t sub_25D99B9F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BA24()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BA50()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BA90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static PaymentsContextProvider.makeSDAForDisambiguatePerson(persons:isSend:)(a1, *(unsigned char *)(v2 + 16) & 1, a2);
}

uint64_t sub_25D99BAFC()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99BBC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BBF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BC20()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BC60()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BCA0()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99BD6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BD98()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BDC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BE04()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BE44()
{
  uint64_t v2 = *(void *)(type metadata accessor for Siri_Nlu_External_SystemDialogAct() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D99BF10()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BF3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BF68()
{
  return swift_deallocObject();
}

uint64_t sub_25D99BFA8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [UsoTaskBuilder] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoTaskBuilder]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UsoTaskBuilder] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for PaymentsContextProvider()
{
  return &type metadata for PaymentsContextProvider;
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, v22 & 1);
  id v8 = v21;
  uint64_t v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    uint64_t v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](PaymentsLabelCATs.accountType(accountTypeLabel:), 0);
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)()
{
  uint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  id v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t PaymentsLabelCATs.accountType(accountTypeLabel:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AccountType", 0x19uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountTypeLabel", 0x10uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:completion:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  unint64_t v33 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v34 = (char *)v22 - v33;
  uint64_t v45 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = v5;
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  uint64_t v41 = v4;
  int v37 = 1;
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v38 = _allocateUninitializedArray<A>(_:)();
  uint64_t v39 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v37 & 1);
  *uint64_t v39 = v9;
  swift_retain();
  if (v40)
  {
    uint64_t v29 = v40;
    uint64_t v28 = v40;
    uint64_t v10 = type metadata accessor for DialogCurrency();
    uint64_t v11 = v39;
    uint64_t v12 = v28;
    v39[2]._object = (void *)v10;
    v11[1]._uint64_t countAndFlagsBits = v12;
  }
  else
  {
    uint64_t v21 = v39;
    v39[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  uint64_t v23 = v39 + 4;
  unsigned int v24 = 1;
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  Swift::String v14 = v30;
  uint64_t v15 = v34;
  v39[3] = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v25 = type metadata accessor for SpeakableString();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = v25 - 8;
  if ((*(unsigned int (**)(char *, void))(v26 + 48))(v34, v24) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v34);
    uint64_t v20 = v39;
    v39[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v23->_countAndFlagsBits;
    v39[5]._object = (void *)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 32))(boxed_opaque_existential_1, v34, v25);
  }
  uint64_t v18 = v38;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  void v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:), 0);
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)()
{
  uint64_t v17 = v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v16 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  swift_retain();
  if (v17)
  {
    uint64_t v14 = v15[7];
    v16[2]._object = (void *)type metadata accessor for DialogCurrency();
    v16[1]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    v16[1]._uint64_t countAndFlagsBits = 0;
    v16[1]._object = 0;
    v16[2]._uint64_t countAndFlagsBits = 0;
    v16[2]._object = 0;
  }
  uint64_t v11 = (void *)v15[10];
  uint64_t v10 = (const void *)v15[8];
  v16[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v12 = type metadata accessor for SpeakableString();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v13 + 48))(v11, 1) == 1)
  {
    outlined destroy of SpeakableString?(v15[10]);
    v16[4]._uint64_t countAndFlagsBits = 0;
    v16[4]._object = 0;
    v16[5]._uint64_t countAndFlagsBits = 0;
    v16[5]._object = 0;
  }
  else
  {
    uint64_t v9 = v15[10];
    v16[5]._object = (void *)v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v16[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v9, v12);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v15[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v15[13] = v4;
  *uint64_t v4 = v15[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v15[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t PaymentsLabelCATs.amountDisambiguation(amountType:paymentAmount:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v36 = a1;
  uint64_t v28 = a2;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  unint64_t v29 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = (char *)v19 - v29;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v38 = v4;
  uint64_t v37 = v3;
  int v33 = 1;
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountDisambiguation", 0x22uLL, 1);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v34 = _allocateUninitializedArray<A>(_:)();
  Swift::String v35 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v33 & 1);
  *Swift::String v35 = v6;
  swift_retain();
  if (v36)
  {
    uint64_t v26 = v36;
    uint64_t v25 = v36;
    uint64_t v7 = type metadata accessor for DialogCurrency();
    uint64_t v8 = v35;
    uint64_t v9 = v25;
    v35[2]._object = (void *)v7;
    v8[1]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    uint64_t v18 = v35;
    v35[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  uint64_t v20 = v35 + 4;
  unsigned int v21 = 1;
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentAmount", 0xDuLL, 1);
  uint64_t v11 = v28;
  uint64_t v12 = v30;
  v35[3] = v10;
  outlined init with copy of SpeakableString?(v11, v12);
  uint64_t v22 = type metadata accessor for SpeakableString();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = v22 - 8;
  if ((*(unsigned int (**)(char *, void))(v23 + 48))(v30, v21) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v30);
    uint64_t v17 = v35;
    v35[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v20->_countAndFlagsBits;
    v35[5]._object = (void *)v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v30, v22);
  }
  uint64_t v15 = v34;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountType(amountType:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    uint64_t v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    Swift::String v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.amountType(amountType:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](PaymentsLabelCATs.amountType(amountType:), 0);
}

uint64_t PaymentsLabelCATs.amountType(amountType:)()
{
  uint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t PaymentsLabelCATs.amountType(amountType:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#AmountType", 0x18uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v39);
  int v33 = (char *)v26 - v32;
  unint64_t v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)v26 - v34;
  uint64_t v51 = v7;
  uint64_t v50 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  uint64_t v47 = v4;
  unsigned int v40 = 1;
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v37 = _allocateUninitializedArray<A>(_:)();
  uint64_t v38 = v11;
  Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v40 & 1);
  unint64_t v13 = v39;
  Swift::String v14 = v41;
  *uint64_t v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  uint64_t v42 = type metadata accessor for SpeakableString();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  uint64_t v45 = *(unsigned int (**)(char *, void))(v43 + 48);
  uint64_t v46 = v43 + 48;
  if (v45(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    uint64_t v25 = v38;
    v38[1]._uint64_t countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._uint64_t countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    uint64_t v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  uint64_t v27 = v38 + 4;
  unsigned int v28 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  uint64_t v18 = v29;
  unsigned int v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, void, uint64_t))v45)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    uint64_t v24 = v38;
    v38[4]._uint64_t countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._uint64_t countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  uint64_t v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:), 0);
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)()
{
  Swift::String v17 = (void *)v0[11];
  uint64_t v16 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v15 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v16, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(void *, uint64_t))(v19 + 48);
  if (v20(v17, 1) == 1)
  {
    outlined destroy of SpeakableString?(v14[11]);
    v15[1]._uint64_t countAndFlagsBits = 0;
    v15[1]._object = 0;
    v15[2]._uint64_t countAndFlagsBits = 0;
    v15[2]._object = 0;
  }
  else
  {
    uint64_t v13 = v14[11];
    v15[2]._object = (void *)v18;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v13, v18);
  }
  Swift::String v12 = (void *)v14[10];
  uint64_t v11 = (const void *)v14[8];
  v15[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v20)(v12, 1, v18) == 1)
  {
    outlined destroy of SpeakableString?(v14[10]);
    v15[4]._uint64_t countAndFlagsBits = 0;
    v15[4]._object = 0;
    v15[5]._uint64_t countAndFlagsBits = 0;
    v15[5]._object = 0;
  }
  else
  {
    uint64_t v10 = v14[10];
    v15[5]._object = (void *)v18;
    uint64_t v4 = __swift_allocate_boxed_opaque_existential_1(&v15[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(v4, v10, v18);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v8 = KeyValuePairs.init(dictionaryLiteral:)();
  v14[13] = v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v5 = (void *)swift_task_alloc();
  v14[14] = v5;
  *uint64_t v5 = v14[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  uint64_t v6 = v14[6];
  return v9(v6, v1._countAndFlagsBits, v1._object, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  Swift::String v35 = a1;
  uint64_t v27 = a2;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v35);
  uint64_t v29 = (char *)v23 - v28;
  unint64_t v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)v23 - v30;
  uint64_t v45 = v6;
  uint64_t v44 = v7;
  uint64_t v43 = v3;
  unsigned int v36 = 1;
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#FinancialAccountDisambiguation", 0x2CuLL, 1);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v33 = _allocateUninitializedArray<A>(_:)();
  unint64_t v34 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v36 & 1);
  uint64_t v10 = v35;
  uint64_t v11 = v37;
  *unint64_t v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v38 = type metadata accessor for SpeakableString();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  uint64_t v41 = *(unsigned int (**)(char *, void))(v39 + 48);
  uint64_t v42 = v39 + 48;
  if (v41(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    uint64_t v22 = v34;
    v34[1]._uint64_t countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._uint64_t countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    Swift::String v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  uint64_t v24 = v34 + 4;
  unsigned int v25 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
  uint64_t v15 = v27;
  uint64_t v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, void, uint64_t))v41)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    uint64_t v21 = v34;
    v34[4]._uint64_t countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._uint64_t countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  uint64_t v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.payToday(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsLabelCATs.payToday()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsLabelCATs.payToday(), 0);
}

uint64_t PaymentsLabelCATs.payToday()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#PayToday", 0x16uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsLabel#PayToday", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsLabelCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsLabelCATs;
  if (!type metadata singleton initialization cache for PaymentsLabelCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for PaymentsLabelCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t PaymentsLabelCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PaymentsLabelCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t PaymentsLabelCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  Swift::String v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  uint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t ObjC metadata update function for PaymentsLabelCATs()
{
  return type metadata accessor for PaymentsLabelCATs();
}

uint64_t *SignpostName.makeIntentFromParse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeIntentFromParse != -1) {
    swift_once();
  }
  return &static SignpostName.makeIntentFromParse;
}

uint64_t static Signpost.begin(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  int v19 = a3;
  unint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v24 = type metadata accessor for OSSignpostID();
  uint64_t v21 = *(void *)(v24 - 8);
  uint64_t v22 = v24 - 8;
  unint64_t v12 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (uint64_t)&v11 - v12;
  unint64_t v13 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v11 - v13;
  unint64_t v28 = (char *)&v11 - v13;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  char v27 = v8;
  static Signpost.generateSignpostID()();
  int v14 = static os_signpost_type_t.begin.getter();
  id v15 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  id v9 = v15;
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v20, v23, v24);
  Signpost.OpenSignpost.init(signpostID:name:)(v20, v17, v18, v19, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v24);
}

uint64_t *SignpostName.resolveApp.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveApp != -1) {
    swift_once();
  }
  return &static SignpostName.resolveApp;
}

uint64_t *SignpostName.makeSendPaymentFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentFlowProducers != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentFlowProducers;
}

uint64_t *SignpostName.makeRequestPaymentFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentFlowProducers != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentFlowProducers;
}

uint64_t *SignpostName.makeRequestPaymentIntentHandledResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentIntentHandledResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentIntentHandledResponse;
}

uint64_t *SignpostName.makeRequestPaymentContinueInAppResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentContinueInAppResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentContinueInAppResponse;
}

uint64_t *SignpostName.makeRequestPaymentFailureHandlingIntentResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentFailureHandlingIntentResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentFailureHandlingIntentResponse;
}

uint64_t *SignpostName.makeDisambiguationItemContainer.unsafeMutableAddressor()
{
  if (one-time initialization token for makeDisambiguationItemContainer != -1) {
    swift_once();
  }
  return &static SignpostName.makeDisambiguationItemContainer;
}

uint64_t *SignpostName.parseDisambiguationResult.unsafeMutableAddressor()
{
  if (one-time initialization token for parseDisambiguationResult != -1) {
    swift_once();
  }
  return &static SignpostName.parseDisambiguationResult;
}

uint64_t *SignpostName.makePromptForDisambiguation.unsafeMutableAddressor()
{
  if (one-time initialization token for makePromptForDisambiguation != -1) {
    swift_once();
  }
  return &static SignpostName.makePromptForDisambiguation;
}

uint64_t *SignpostName.transformContactQueryToINPersons.unsafeMutableAddressor()
{
  if (one-time initialization token for transformContactQueryToINPersons != -1) {
    swift_once();
  }
  return &static SignpostName.transformContactQueryToINPersons;
}

uint64_t *SignpostName.parseResponseValueNeedsValue.unsafeMutableAddressor()
{
  if (one-time initialization token for parseResponseValueNeedsValue != -1) {
    swift_once();
  }
  return &static SignpostName.parseResponseValueNeedsValue;
}

uint64_t one-time initialization function for paymentsLog()
{
  type metadata accessor for OS_os_log();
  LogConst.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  LogConst.Category.siriPayments.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Signpost.paymentsLog = result;
  return result;
}

uint64_t *Signpost.paymentsLog.unsafeMutableAddressor()
{
  if (one-time initialization token for paymentsLog != -1) {
    swift_once();
  }
  return &static Signpost.paymentsLog;
}

void *static Signpost.paymentsLog.getter()
{
  uint64_t v2 = (void *)*Signpost.paymentsLog.unsafeMutableAddressor();
  id v0 = v2;
  return v2;
}

uint64_t static Signpost.generateSignpostID()()
{
  id v0 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  return OSSignpostID.init(log:)();
}

uint64_t Signpost.OpenSignpost.init(signpostID:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a5, a1);
  uint64_t result = type metadata accessor for Signpost.OpenSignpost();
  uint64_t v7 = a5 + *(int *)(result + 20);
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(unsigned char *)(v7 + 16) = a4;
  return result;
}

uint64_t static Signpost.begin(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v32 = a8;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  int v35 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a5;
  int v27 = a6;
  uint64_t v23 = a7;
  uint64_t v48 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = type metadata accessor for OSSignpostID();
  uint64_t v37 = *(void *)(v40 - 8);
  uint64_t v38 = v40 - 8;
  unint64_t v21 = (*(void *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v33);
  uint64_t v36 = (uint64_t)&v21 - v21;
  unint64_t v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v39 = (char *)&v21 - v22;
  uint64_t v48 = (char *)&v21 - v22;
  uint64_t v45 = v10;
  uint64_t v46 = v11;
  char v47 = v12;
  uint64_t v42 = v13;
  uint64_t v43 = v14;
  char v44 = v15;
  uint64_t v41 = v16;
  static Signpost.generateSignpostID()();
  int v29 = static os_signpost_type_t.begin.getter();
  id v31 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  id v17 = v31;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  outlined init with copy of GlobalsProviding(v23, v18);
  uint64_t v19 = v25;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v30 = v19;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v36, v39, v40);
  Signpost.OpenSignpost.init(signpostID:name:)(v36, v33, v34, v35, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v40);
}

void static Signpost.event(_:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  int v11 = a3;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v15 - 8);
  uint64_t v13 = v15 - 8;
  unint64_t v7 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)&v6 - v7;
  uint64_t v17 = MEMORY[0x270FA5388](v9);
  uint64_t v18 = v3;
  char v19 = v4;
  int v8 = static os_signpost_type_t.event.getter();
  id v16 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  id v5 = v16;
  default argument 4 of os_signpost(_:dso:log:name:signpostID:)();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v15);
}

uint64_t default argument 4 of os_signpost(_:dso:log:name:signpostID:)()
{
  return static OSSignpostID.exclusive.getter();
}

Swift::Void __swiftcall Signpost.OpenSignpost.end()()
{
  uint64_t v11 = 0;
  v3[1] = 0;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v9 - 8);
  uint64_t v7 = v9 - 8;
  v3[0] = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  int v8 = (char *)v3 - v3[0];
  uint64_t v11 = v0;
  int v5 = static os_signpost_type_t.end.getter();
  id v10 = (id)*Signpost.paymentsLog.unsafeMutableAddressor();
  id v1 = v10;
  uint64_t v2 = v3[2] + *(int *)(type metadata accessor for Signpost.OpenSignpost() + 20);
  v3[3] = *(void *)v2;
  v3[4] = *(void *)(v2 + 8);
  int v4 = *(unsigned __int8 *)(v2 + 16);
  (*(void (**)(char *))(v6 + 16))(v8);
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v9);
}

void one-time initialization function for checkAuthorizationStatus()
{
  SignpostName.init(name:)();
  static SignpostName.checkAuthorizationStatus = v0;
  qword_26A69EC30 = v1;
  byte_26A69EC38 = v2;
}

uint64_t *SignpostName.checkAuthorizationStatus.unsafeMutableAddressor()
{
  if (one-time initialization token for checkAuthorizationStatus != -1) {
    swift_once();
  }
  return &static SignpostName.checkAuthorizationStatus;
}

void one-time initialization function for findFlowForX()
{
  SignpostName.init(name:)();
  static SignpostName.findFlowForX = v0;
  qword_26A69EC48 = v1;
  byte_26A69EC50 = v2;
}

uint64_t *SignpostName.findFlowForX.unsafeMutableAddressor()
{
  if (one-time initialization token for findFlowForX != -1) {
    swift_once();
  }
  return &static SignpostName.findFlowForX;
}

uint64_t static SignpostName.findFlowForX.getter()
{
  return *SignpostName.findFlowForX.unsafeMutableAddressor();
}

void one-time initialization function for emitIntentSignal()
{
  SignpostName.init(name:)();
  static SignpostName.emitIntentSignal = v0;
  qword_26A69EC60 = v1;
  byte_26A69EC68 = v2;
}

uint64_t *SignpostName.emitIntentSignal.unsafeMutableAddressor()
{
  if (one-time initialization token for emitIntentSignal != -1) {
    swift_once();
  }
  return &static SignpostName.emitIntentSignal;
}

uint64_t static SignpostName.emitIntentSignal.getter()
{
  return *SignpostName.emitIntentSignal.unsafeMutableAddressor();
}

void one-time initialization function for makeIntentFromParse()
{
  SignpostName.init(name:)();
  static SignpostName.makeIntentFromParse = v0;
  qword_26A69EC78 = v1;
  byte_26A69EC80 = v2;
}

void one-time initialization function for makeSendPaymentFlowProducers()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentFlowProducers = v0;
  qword_26A69EC90 = v1;
  byte_26A69EC98 = v2;
}

void one-time initialization function for makeRequestPaymentFlowProducers()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentFlowProducers = v0;
  qword_26A69ECA8 = v1;
  byte_26A69ECB0 = v2;
}

void one-time initialization function for makeSearchForAccountsFlowProducers()
{
  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsFlowProducers = v0;
  qword_26A69ECC0 = v1;
  byte_26A69ECC8 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsFlowProducers.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsFlowProducers != -1) {
    swift_once();
  }
  return &static SignpostName.makeSearchForAccountsFlowProducers;
}

void one-time initialization function for makeSendPaymentIntentHandledResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentIntentHandledResponse = v0;
  qword_26A69ECD8 = v1;
  byte_26A69ECE0 = v2;
}

uint64_t *SignpostName.makeSendPaymentIntentHandledResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentIntentHandledResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentIntentHandledResponse;
}

void one-time initialization function for makeSendPaymentIntentPromptForValue()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentIntentPromptForValue = v0;
  qword_26A69ECF0 = v1;
  byte_26A69ECF8 = v2;
}

uint64_t *SignpostName.makeSendPaymentIntentPromptForValue.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentIntentPromptForValue != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentIntentPromptForValue;
}

void one-time initialization function for makeSendPaymentPromptForConfirm()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentPromptForConfirm = v0;
  qword_26A69ED08 = v1;
  byte_26A69ED10 = v2;
}

uint64_t *SignpostName.makeSendPaymentPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentPromptForConfirm != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentPromptForConfirm;
}

void one-time initialization function for makeSendPaymentErrorResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentErrorResponse = v0;
  qword_26A69ED20 = v1;
  byte_26A69ED28 = v2;
}

uint64_t *SignpostName.makeSendPaymentErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentErrorResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentErrorResponse;
}

void one-time initialization function for makeSendPaymentContinueInAppResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentContinueInAppResponse = v0;
  qword_26A69ED38 = v1;
  byte_26A69ED40 = v2;
}

uint64_t *SignpostName.makeSendPaymentContinueInAppResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentContinueInAppResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentContinueInAppResponse;
}

void one-time initialization function for makeSendPaymentFailureHandlingIntentResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeSendPaymentFailureHandlingIntentResponse = v0;
  qword_26A69ED50 = v1;
  byte_26A69ED58 = v2;
}

uint64_t *SignpostName.makeSendPaymentFailureHandlingIntentResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSendPaymentFailureHandlingIntentResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeSendPaymentFailureHandlingIntentResponse;
}

void one-time initialization function for makeRequestPaymentIntentHandledResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentIntentHandledResponse = v0;
  qword_26A69ED68 = v1;
  byte_26A69ED70 = v2;
}

void one-time initialization function for makeRequestPaymentIntentPromptForValue()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentIntentPromptForValue = v0;
  qword_26A69ED80 = v1;
  byte_26A69ED88 = v2;
}

uint64_t *SignpostName.makeRequestPaymentIntentPromptForValue.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentIntentPromptForValue != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentIntentPromptForValue;
}

void one-time initialization function for makeRequestPaymentPromptForConfirm()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentPromptForConfirm = v0;
  qword_26A69ED98 = v1;
  byte_26A69EDA0 = v2;
}

uint64_t *SignpostName.makeRequestPaymentPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentPromptForConfirm != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentPromptForConfirm;
}

void one-time initialization function for makeRequestPaymentErrorResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentErrorResponse = v0;
  qword_26A69EDB0 = v1;
  byte_26A69EDB8 = v2;
}

uint64_t *SignpostName.makeRequestPaymentErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeRequestPaymentErrorResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeRequestPaymentErrorResponse;
}

void one-time initialization function for makeRequestPaymentContinueInAppResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentContinueInAppResponse = v0;
  qword_26A69EDC8 = v1;
  byte_26A69EDD0 = v2;
}

void one-time initialization function for makeRequestPaymentFailureHandlingIntentResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeRequestPaymentFailureHandlingIntentResponse = v0;
  qword_26A69EDE0 = v1;
  byte_26A69EDE8 = v2;
}

void one-time initialization function for makeConfirmationRejectedResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeConfirmationRejectedResponse = v0;
  qword_26A69EDF8 = v1;
  byte_26A69EE00 = v2;
}

uint64_t *SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeConfirmationRejectedResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeConfirmationRejectedResponse;
}

void one-time initialization function for makeSearchForAccountsPromptForConfirm()
{
  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsPromptForConfirm = v0;
  qword_26A69EE10 = v1;
  byte_26A69EE18 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsPromptForConfirm.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsPromptForConfirm != -1) {
    swift_once();
  }
  return &static SignpostName.makeSearchForAccountsPromptForConfirm;
}

void one-time initialization function for makeSearchForAccountsErrorResponse()
{
  SignpostName.init(name:)();
  static SignpostName.makeSearchForAccountsErrorResponse = v0;
  qword_26A69EE28 = v1;
  byte_26A69EE30 = v2;
}

uint64_t *SignpostName.makeSearchForAccountsErrorResponse.unsafeMutableAddressor()
{
  if (one-time initialization token for makeSearchForAccountsErrorResponse != -1) {
    swift_once();
  }
  return &static SignpostName.makeSearchForAccountsErrorResponse;
}

void one-time initialization function for parseResponseValueNeedsValue()
{
  SignpostName.init(name:)();
  static SignpostName.parseResponseValueNeedsValue = v0;
  qword_26A69EE40 = v1;
  byte_26A69EE48 = v2;
}

void one-time initialization function for sendPaymentConfirmIntent()
{
  SignpostName.init(name:)();
  static SignpostName.sendPaymentConfirmIntent = v0;
  qword_26A69EE58 = v1;
  byte_26A69EE60 = v2;
}

uint64_t *SignpostName.sendPaymentConfirmIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for sendPaymentConfirmIntent != -1) {
    swift_once();
  }
  return &static SignpostName.sendPaymentConfirmIntent;
}

void one-time initialization function for sendPaymentHandleIntent()
{
  SignpostName.init(name:)();
  static SignpostName.sendPaymentHandleIntent = v0;
  qword_26A69EE70 = v1;
  byte_26A69EE78 = v2;
}

uint64_t *SignpostName.sendPaymentHandleIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for sendPaymentHandleIntent != -1) {
    swift_once();
  }
  return &static SignpostName.sendPaymentHandleIntent;
}

void one-time initialization function for resolvePayee()
{
  SignpostName.init(name:)();
  static SignpostName.resolvePayee = v0;
  qword_26A69EE88 = v1;
  byte_26A69EE90 = v2;
}

uint64_t *SignpostName.resolvePayee.unsafeMutableAddressor()
{
  if (one-time initialization token for resolvePayee != -1) {
    swift_once();
  }
  return &static SignpostName.resolvePayee;
}

void one-time initialization function for resolveCurrencyAmount()
{
  SignpostName.init(name:)();
  static SignpostName.resolveCurrencyAmount = v0;
  qword_26A69EEA0 = v1;
  byte_26A69EEA8 = v2;
}

uint64_t *SignpostName.resolveCurrencyAmount.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveCurrencyAmount != -1) {
    swift_once();
  }
  return &static SignpostName.resolveCurrencyAmount;
}

void one-time initialization function for resolveNote()
{
  SignpostName.init(name:)();
  static SignpostName.resolveNote = v0;
  qword_26A69EEB8 = v1;
  byte_26A69EEC0 = v2;
}

uint64_t *SignpostName.resolveNote.unsafeMutableAddressor()
{
  if (one-time initialization token for resolveNote != -1) {
    swift_once();
  }
  return &static SignpostName.resolveNote;
}

void one-time initialization function for searchForAccountHandleIntent()
{
  SignpostName.init(name:)();
  static SignpostName.searchForAccountHandleIntent = v0;
  qword_26A69EED0 = v1;
  byte_26A69EED8 = v2;
}

uint64_t *SignpostName.searchForAccountHandleIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for searchForAccountHandleIntent != -1) {
    swift_once();
  }
  return &static SignpostName.searchForAccountHandleIntent;
}

void one-time initialization function for confirmationViewBuilder()
{
  SignpostName.init(name:)();
  static SignpostName.confirmationViewBuilder = v0;
  qword_26A69EEE8 = v1;
  byte_26A69EEF0 = v2;
}

uint64_t *SignpostName.confirmationViewBuilder.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmationViewBuilder != -1) {
    swift_once();
  }
  return &static SignpostName.confirmationViewBuilder;
}

void one-time initialization function for idiomSensitiveViewBuilder()
{
  SignpostName.init(name:)();
  static SignpostName.idiomSensitiveViewBuilder = v0;
  qword_26A69EF00 = v1;
  byte_26A69EF08 = v2;
}

uint64_t *SignpostName.idiomSensitiveViewBuilder.unsafeMutableAddressor()
{
  if (one-time initialization token for idiomSensitiveViewBuilder != -1) {
    swift_once();
  }
  return &static SignpostName.idiomSensitiveViewBuilder;
}

void one-time initialization function for buildPunchoutForApp()
{
  SignpostName.init(name:)();
  static SignpostName.buildPunchoutForApp = v0;
  qword_26A69EF18 = v1;
  byte_26A69EF20 = v2;
}

uint64_t *SignpostName.buildPunchoutForApp.unsafeMutableAddressor()
{
  if (one-time initialization token for buildPunchoutForApp != -1) {
    swift_once();
  }
  return &static SignpostName.buildPunchoutForApp;
}

void one-time initialization function for makeDisambiguationItemContainer()
{
  SignpostName.init(name:)();
  static SignpostName.makeDisambiguationItemContainer = v0;
  qword_26A69EF30 = v1;
  byte_26A69EF38 = v2;
}

void one-time initialization function for parseDisambiguationResult()
{
  SignpostName.init(name:)();
  static SignpostName.parseDisambiguationResult = v0;
  qword_26A69EF48 = v1;
  byte_26A69EF50 = v2;
}

void one-time initialization function for makePromptForDisambiguation()
{
  SignpostName.init(name:)();
  static SignpostName.makePromptForDisambiguation = v0;
  qword_26A69EF60 = v1;
  byte_26A69EF68 = v2;
}

void one-time initialization function for toSiriKitIntent()
{
  SignpostName.init(name:)();
  static SignpostName.toSiriKitIntent = v0;
  qword_26A69EF78 = v1;
  byte_26A69EF80 = v2;
}

uint64_t *SignpostName.toSiriKitIntent.unsafeMutableAddressor()
{
  if (one-time initialization token for toSiriKitIntent != -1) {
    swift_once();
  }
  return &static SignpostName.toSiriKitIntent;
}

void one-time initialization function for transformContactQueryToINPersons()
{
  SignpostName.init(name:)();
  static SignpostName.transformContactQueryToINPersons = v0;
  qword_26A69EF90 = v1;
  byte_26A69EF98 = v2;
}

void one-time initialization function for resolveApp()
{
  SignpostName.init(name:)();
  static SignpostName.resolveApp = v0;
  qword_26A69EFA8 = v1;
  byte_26A69EFB0 = v2;
}

unint64_t type metadata accessor for OS_os_log()
{
  uint64_t v2 = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for Signpost.OpenSignpost()
{
  uint64_t v1 = type metadata singleton initialization cache for Signpost.OpenSignpost;
  if (!type metadata singleton initialization cache for Signpost.OpenSignpost) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

void one-time initialization function for searchForAccountsAppResolution()
{
  SignpostName.init(name:)();
  static SignpostName.searchForAccountsAppResolution = v0;
  qword_26A69EFC0 = v1;
  byte_26A69EFC8 = v2;
}

uint64_t *SignpostName.searchForAccountsAppResolution.unsafeMutableAddressor()
{
  if (one-time initialization token for searchForAccountsAppResolution != -1) {
    swift_once();
  }
  return &static SignpostName.searchForAccountsAppResolution;
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

unint64_t initializeBufferWithCopyOfBuffer for Signpost.OpenSignpost(void *a1, uint64_t *a2, uint64_t a3)
{
  int v12 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    uint64_t v3 = type metadata accessor for OSSignpostID();
    (*(void (**)(void *, uint64_t *))(*(void *)(v3 - 8) + 16))(a1, a2);
    int v4 = (char *)a1 + *(int *)(a3 + 20);
    int v5 = (char *)a2 + *(int *)(a3 + 20);
    *(_OWORD *)int v4 = *(_OWORD *)v5;
    v4[16] = v5[16];
    return (unint64_t)a1;
  }
}

uint64_t destroy for Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
}

__n128 initializeWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, a2);
  int v4 = (__n128 *)(a2 + *(int *)(a3 + 20));
  __n128 result = *v4;
  uint64_t v6 = (__n128 *)(a1 + *(int *)(a3 + 20));
  *uint64_t v6 = *v4;
  v6[1].n128_u8[0] = v4[1].n128_u8[0];
  return result;
}

uint64_t assignWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24))(a1, a2);
  uint64_t result = a1;
  uint64_t v5 = a2 + *(int *)(a3 + 20);
  uint64_t v6 = a1 + *(int *)(a3 + 20);
  *(void *)uint64_t v6 = *(void *)v5;
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)(v5 + 16);
  return result;
}

__n128 initializeWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a1, a2);
  int v4 = (__n128 *)(a2 + *(int *)(a3 + 20));
  __n128 result = *v4;
  uint64_t v6 = (__n128 *)(a1 + *(int *)(a3 + 20));
  *uint64_t v6 = *v4;
  v6[1].n128_u8[0] = v4[1].n128_u8[0];
  return result;
}

uint64_t assignWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a1, a2);
  uint64_t result = a1;
  uint64_t v5 = a2 + *(int *)(a3 + 20);
  uint64_t v6 = a1 + *(int *)(a3 + 20);
  *(void *)uint64_t v6 = *(void *)v5;
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)(v5 + 16);
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9A18D8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9A1960(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for Signpost.OpenSignpost()
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for SignpostName(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 17)) {
      int v3 = *(_DWORD *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SignpostName(uint64_t result, int a2, int a3)
{
  int v3 = (unsigned char *)(result + 17);
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 16) = 0;
    if (a3) {
      *int v3 = 1;
    }
  }
  else if (a3)
  {
    *int v3 = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignpostName()
{
  return &type metadata for SignpostName;
}

uint64_t SendPaymentNeedsValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  id v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  int v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  id v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSendPaymentIntent();
  unint64_t v1 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  char v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  unint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SendPaymentNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SendPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  uint64_t v40 = 0;
  uint64_t v27 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v28 = 0;
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v35 - 8);
  uint64_t v34 = v35 - 8;
  unint64_t v31 = (*(void *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (char *)&v12 - v31;
  uint64_t v32 = (char *)&v12 - v31;
  uint64_t v52 = MEMORY[0x270FA5388](v30);
  uint64_t v51 = v4;
  uint64_t v50 = v5;
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v3, v6, v35);
  uint64_t v42 = Logger.logObject.getter();
  int v41 = static os_log_type_t.debug.getter();
  uint64_t v38 = &v48;
  uint64_t v48 = 2;
  unint64_t v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v39 = v49;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v42, (os_log_type_t)v41))
  {
    uint64_t v7 = v28;
    id v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = 0;
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(v15);
    uint64_t v22 = &v47;
    char v47 = v16;
    uint64_t v23 = &v46;
    uint64_t v46 = v17;
    uint64_t v20 = &v45;
    uint64_t v45 = v18;
    unsigned int v19 = 0;
    serialize(_:at:)(0, &v47);
    serialize(_:at:)(v19, v22);
    uint64_t v44 = v43;
    unint64_t v21 = &v12;
    MEMORY[0x270FA5388](&v12);
    int v8 = v23;
    uint64_t v9 = &v12 - 6;
    uint64_t v24 = &v12 - 6;
    void v9[2] = (uint64_t)v22;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v42, (os_log_type_t)v41, "#SendPaymentNeedsValueStrategy actionForInput.", v16, v39);
      uint64_t v13 = 0;
      destroyStorage<A>(_:count:)(v17, 0, v14);
      destroyStorage<A>(_:count:)(v18, v13, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v16, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
  swift_retain();
  BaseStrategy.actionForInput(_:)(v30, v26);
  return swift_release();
}

uint64_t SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 224) = v2;
  *(void *)(v3 + 216) = a2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 136) = v3;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0;
  *(unsigned char *)(v3 + 384) = 0;
  *(unsigned char *)(v3 + 392) = 0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(void *)(v3 + 232) = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  *(void *)(v3 + 240) = v9;
  *(void *)(v3 + 248) = *(void *)(v9 + 64);
  *(void *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 264) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 272) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 280) = v5;
  *(void *)(v3 + 288) = *(void *)(v5 - 8);
  *(void *)(v3 + 296) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 304) = v6;
  *(void *)(v3 + 312) = *(void *)(v6 - 8);
  *(void *)(v3 + 320) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v3 + 328) = v7;
  *(void *)(v3 + 336) = *(void *)(v7 - 8);
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 352) = swift_task_alloc();
  *(void *)(v3 + 144) = a2;
  *(void *)(v3 + 152) = v2;
  return MEMORY[0x270FA2498](SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:), 0);
}

uint64_t SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v62 = *(void *)(v0 + 336);
  uint64_t v63 = *(void *)(v0 + 328);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  unint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v64(v1, v2, v63);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v65 = *(unsigned int *)(v0 + 388);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v68 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v67, v66))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v58 = createStorage<A>(capacity:type:)(0);
    uint64_t v59 = createStorage<A>(capacity:type:)(0);
    *(void *)(v61 + 176) = buf;
    *(void *)(v61 + 184) = v58;
    *(void *)(v61 + 192) = v59;
    serialize(_:at:)(0, (unsigned char **)(v61 + 176));
    serialize(_:at:)(0, (unsigned char **)(v61 + 176));
    *(void *)(v61 + 200) = v68;
    uint64_t v60 = (void *)swift_task_alloc();
    v60[2] = v61 + 176;
    v60[3] = v61 + 184;
    v60[4] = v61 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v67, v66, "#SendPaymentNeedsValueStrategy makePromptForValue", buf, v65);
    destroyStorage<A>(_:count:)(v58, 0, v56);
    destroyStorage<A>(_:count:)(v59, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v61 + 352);
  uint64_t v48 = *(void *)(v61 + 328);
  uint64_t v51 = *(void *)(v61 + 320);
  uint64_t v52 = *(void *)(v61 + 304);
  uint64_t v46 = *(void *)(v61 + 336);
  uint64_t v50 = *(void *)(v61 + 312);

  uint32_t v49 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v49(v47, v48);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v53(v51, v52);
  v4.SiriPaymentsIntents::SendPaymentSlots value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SendPaymentSlots value = v4.value;
  *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v61 + 386) = v4;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    uint64_t v11 = *(void *)(v61 + 344);
    uint64_t v27 = *(void *)(v61 + 328);
    uint64_t v31 = *(void *)(v61 + 256);
    uint64_t v32 = *(void *)(v61 + 232);
    uint64_t v29 = *(void *)(v61 + 216);
    uint64_t v28 = *(void *)(v61 + 240);
    uint64_t v12 = Logger.payments.unsafeMutableAddressor();
    v64(v11, v12, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v31, v29, v32);
    unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v34 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))(v34 + v30, v31, v32);
    oslog = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    *(void *)(v61 + 168) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v61 + 396);
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 32;
    uint64_t v37 = swift_allocObject();
    *(unsigned char *)(v37 + 16) = 8;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = partial apply for implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v35 + 24) = v34;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v38 + 24) = v35;
    _allocateUninitializedArray<A>(_:)();
    uint32_t v39 = v13;
    swift_retain();
    *uint32_t v39 = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[1] = v36;
    swift_retain();
    v39[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[3] = v37;
    swift_retain();
    v39[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v41))
    {
      uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      uint64_t v26 = createStorage<A>(capacity:type:)(1);
      uint64_t v69 = v24;
      uint64_t v70 = v25;
      uint64_t v71 = v26;
      serialize(_:at:)(2, &v69);
      serialize(_:at:)(1, &v69);
      uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v73 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
      uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v73 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
      uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v73 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
      _os_log_impl(&dword_25D85A000, oslog, v41, "#SendPaymentNeedsValueStrategy unknown parameter: %s", v24, size);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v17 = *(void *)(v61 + 344);
    uint64_t v18 = *(void *)(v61 + 328);
    uint64_t v19 = *(void *)(v61 + 320);
    uint64_t v20 = *(void *)(v61 + 304);

    v49(v17, v18);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v22 = ParameterIdentifier.name.getter();
    uint64_t v21 = v14;
    v53(v19, v20);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v15 = v22;
    *(void *)(v15 + 8) = v21;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0;
    *(unsigned char *)(v15 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = *(uint64_t (**)(void))(*(void *)(v61 + 136) + 8);
    return v16();
  }
  else
  {
    uint64_t v45 = *(void *)(v61 + 272);
    uint64_t v44 = *(void *)(v61 + 224);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v61 + 384) = v4;
    id v42 = (id)ParameterResolutionRecord.intent.getter();
    id v43 = objc_msgSend(v42, sel_verb);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    char v5 = String.isEmpty.getter();
    *(unsigned char *)(v61 + 387) = v5 & 1;
    *(unsigned char *)(v61 + 392) = v5 & 1;
    swift_bridgeObjectRelease();

    swift_retain();
    *(void *)(v61 + 360) = *(void *)(v44 + 16);
    swift_retain();
    swift_release();
    *(unsigned char *)(v61 + 385) = value;
    lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
    lazy protocol witness table accessor for type SendPaymentSlots and conformance SendPaymentSlots();
    Slot<>.propertyName.getter((uint64_t)&type metadata for SendPaymentSlots, (uint64_t)&protocol witness table for SendPaymentSlots);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 56))(v45, 0, 1);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v61 + 368) = v7;
    *uint64_t v7 = *(void *)(v61 + 136);
    v7[1] = SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    uint64_t v8 = *(void *)(v61 + 296);
    uint64_t v9 = *(void *)(v61 + 272);
    return SendPaymentCATs.promptForSlotValue(slot:)(v8, v9);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  SiriPaymentsIntents::SendPaymentSlots_optional v4 = (void *)*v1;
  v4[17] = *v1;
  v4[47] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[34]);
    swift_release();
    uint64_t v2 = SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v8 = *(unsigned char *)(v0 + 387);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 386);
  uint64_t v12 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v9 = *(uint64_t **)(v0 + 208);
  *(void *)(v0 + 136) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, v0 + 16);
  swift_release();
  char v5 = *(void *)(v0 + 40);
  SiriPaymentsIntents::SendPaymentSlots_optional v4 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:isVerbless:)(v7, v8 & 1, v13);
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v13, 0, 1);
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v9[3] = type metadata accessor for AceOutput();
  v9[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v9);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v13);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 136) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v2();
}

uint64_t implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.name.getter();
  uint64_t v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  return v8;
}

uint64_t SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 568) = v3;
  *(void *)(v4 + 560) = a3;
  *(void *)(v4 + 552) = a2;
  *(void *)(v4 + 544) = a1;
  *(void *)(v4 + 264) = v4;
  *(void *)(v4 + 272) = 0;
  *(void *)(v4 + 280) = 0;
  *(void *)(v4 + 288) = 0;
  *(unsigned char *)(v4 + 840) = 0;
  *(void *)(v4 + 368) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 448) = 0;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  *(void *)(v4 + 576) = v5;
  uint64_t v12 = *(void *)(v5 - 8);
  *(void *)(v4 + 584) = v12;
  *(void *)(v4 + 592) = *(void *)(v12 + 64);
  *(void *)(v4 + 600) = swift_task_alloc();
  *(void *)(v4 + 608) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  *(void *)(v4 + 616) = v6;
  *(void *)(v4 + 624) = *(void *)(v6 - 8);
  *(void *)(v4 + 632) = swift_task_alloc();
  *(void *)(v4 + 640) = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  *(void *)(v4 + 648) = v7;
  uint64_t v13 = *(void *)(v7 - 8);
  *(void *)(v4 + 656) = v13;
  *(void *)(v4 + 664) = *(void *)(v13 + 64);
  *(void *)(v4 + 672) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Input();
  *(void *)(v4 + 680) = v8;
  uint64_t v14 = *(void *)(v8 - 8);
  *(void *)(v4 + 688) = v14;
  *(void *)(v4 + 696) = *(void *)(v14 + 64);
  *(void *)(v4 + 704) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 712) = v9;
  *(void *)(v4 + 720) = *(void *)(v9 - 8);
  *(void *)(v4 + 728) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v4 + 736) = v10;
  *(void *)(v4 + 744) = *(void *)(v10 - 8);
  *(void *)(v4 + 752) = swift_task_alloc();
  *(void *)(v4 + 760) = swift_task_alloc();
  *(void *)(v4 + 768) = swift_task_alloc();
  *(void *)(v4 + 776) = swift_task_alloc();
  *(void *)(v4 + 784) = swift_task_alloc();
  *(void *)(v4 + 792) = swift_task_alloc();
  *(void *)(v4 + 800) = swift_task_alloc();
  *(void *)(v4 + 808) = swift_task_alloc();
  *(void *)(v4 + 816) = swift_task_alloc();
  *(void *)(v4 + 824) = swift_task_alloc();
  *(void *)(v4 + 832) = swift_task_alloc();
  *(void *)(v4 + 272) = a2;
  *(void *)(v4 + 280) = a3;
  *(void *)(v4 + 288) = v3;
  return MEMORY[0x270FA2498](SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:), 0);
}

uint64_t SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v352 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = *(void *)(v1 + 832);
  uint64_t v298 = *(void *)(v1 + 744);
  uint64_t v299 = *(void *)(v1 + 736);
  *(void *)(v1 + 264) = v1;
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v300 = *(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16);
  v300(v2, v3, v299);
  oslog = Logger.logObject.getter();
  os_log_type_t v302 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 296) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v1 + 844);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v304 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v302))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v295 = createStorage<A>(capacity:type:)(0);
    uint64_t v296 = createStorage<A>(capacity:type:)(0);
    *(void *)(v1 + 512) = buf;
    *(void *)(v1 + 520) = v295;
    *(void *)(v1 + 528) = v296;
    serialize(_:at:)(0, (unsigned char **)(v1 + 512));
    serialize(_:at:)(0, (unsigned char **)(v1 + 512));
    *(void *)(v1 + 536) = v304;
    uint64_t v297 = (void *)swift_task_alloc();
    v297[2] = v1 + 512;
    v297[3] = v1 + 520;
    v297[4] = v1 + 528;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v302, "#SendPaymentNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v295, 0, v293);
    destroyStorage<A>(_:count:)(v296, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v284 = *(void *)(v1 + 832);
  uint64_t v285 = *(void *)(v1 + 736);
  uint64_t v288 = *(void *)(v1 + 728);
  uint64_t v289 = *(void *)(v1 + 712);
  uint64_t v283 = *(void *)(v1 + 744);
  uint64_t v287 = *(void *)(v1 + 720);

  v286 = *(void (**)(uint64_t, uint64_t))(v283 + 8);
  v286(v284, v285);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  uint64_t v290 = *(void (**)(uint64_t, uint64_t))(v287 + 8);
  v290(v288, v289);
  v5.SiriPaymentsIntents::SendPaymentSlots value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SendPaymentSlots value = v5.value;
  if (v5.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    uint64_t v43 = *(void *)(v1 + 752);
    uint64_t v61 = *(void *)(v1 + 736);
    uint64_t v65 = *(void *)(v1 + 672);
    uint64_t v66 = *(void *)(v1 + 648);
    uint64_t v63 = *(void *)(v1 + 560);
    uint64_t v62 = *(void *)(v1 + 656);
    uint64_t v44 = Logger.payments.unsafeMutableAddressor();
    v300(v43, v44, v61);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v65, v63, v66);
    unint64_t v64 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    uint64_t v68 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))(v68 + v64, v65, v66);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    *(void *)(v1 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v67 = *(_DWORD *)(v1 + 848);
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = 32;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 8;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = partial apply for implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v69 + 24) = v68;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v72 + 24) = v69;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v73 = v45;
    swift_retain();
    *uint64_t v73 = partial apply for closure #1 in OSLogArguments.append(_:);
    v73[1] = v70;
    swift_retain();
    v73[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v73[3] = v71;
    swift_retain();
    v73[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v73[5] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v58 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v59 = createStorage<A>(capacity:type:)(0);
      uint64_t v60 = createStorage<A>(capacity:type:)(1);
      uint64_t v305 = v58;
      uint64_t v306 = v59;
      uint64_t v307 = v60;
      serialize(_:at:)(2, &v305);
      serialize(_:at:)(1, &v305);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      _os_log_impl(&dword_25D85A000, v74, v75, "#SendPaymentNeedsValueStrategy unknown parameter: %s", v58, v67);
      destroyStorage<A>(_:count:)(v59, 0, v57);
      destroyStorage<A>(_:count:)(v60, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v58, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v55 = *(void *)(v1 + 752);
    uint64_t v51 = *(void *)(v1 + 736);
    uint64_t v56 = *(void *)(v1 + 728);
    uint64_t v52 = *(void *)(v1 + 712);

    v286(v55, v51);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v54 = ParameterIdentifier.name.getter();
    uint64_t v53 = v46;
    v290(v56, v52);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v47 = v54;
    *(void *)(v47 + 8) = v53;
    *(void *)(v47 + 16) = 0;
    *(void *)(v47 + 24) = 0;
    *(void *)(v47 + 32) = 0;
    *(void *)(v47 + 40) = 0;
    *(unsigned char *)(v47 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
    return v48();
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + 824);
    uint64_t v268 = *(void *)(v1 + 736);
    uint64_t v272 = *(void *)(v1 + 704);
    uint64_t v273 = *(void *)(v1 + 680);
    uint64_t v270 = *(void *)(v1 + 552);
    uint64_t v269 = *(void *)(v1 + 688);
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v1 + 840) = v5;
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    v300(v6, v7, v268);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v269 + 16))(v272, v270, v273);
    unint64_t v271 = (*(unsigned __int8 *)(v269 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80);
    uint64_t v275 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v269 + 32))(v275 + v271, v272, v273);
    log = Logger.logObject.getter();
    os_log_type_t v282 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v274 = *(_DWORD *)(v1 + 852);
    uint64_t v277 = swift_allocObject();
    *(unsigned char *)(v277 + 16) = 32;
    uint64_t v278 = swift_allocObject();
    *(unsigned char *)(v278 + 16) = 8;
    uint64_t v276 = swift_allocObject();
    *(void *)(v276 + 16) = partial apply for implicit closure #2 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v276 + 24) = v275;
    uint64_t v279 = swift_allocObject();
    *(void *)(v279 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v279 + 24) = v276;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v280 = v8;
    swift_retain();
    *uint64_t v280 = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[1] = v277;
    swift_retain();
    v280[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[3] = v278;
    swift_retain();
    v280[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[5] = v279;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v282))
    {
      uint64_t v265 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v266 = createStorage<A>(capacity:type:)(0);
      uint64_t v267 = createStorage<A>(capacity:type:)(1);
      uint64_t v347 = v265;
      uint64_t v348 = v266;
      uint64_t v349 = v267;
      serialize(_:at:)(2, &v347);
      serialize(_:at:)(1, &v347);
      uint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v277;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      uint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v278;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      uint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v279;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      _os_log_impl(&dword_25D85A000, log, v282, "#SendPaymentNeedsValueStrategy Parse: %s", v265, v274);
      destroyStorage<A>(_:count:)(v266, 0, v264);
      destroyStorage<A>(_:count:)(v267, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v265, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v246 = *(void *)(v1 + 824);
    uint64_t v9 = *(void *)(v1 + 816);
    uint64_t v247 = *(void *)(v1 + 736);
    uint64_t v252 = *(void *)(v1 + 672);
    uint64_t v253 = *(void *)(v1 + 648);
    uint64_t v249 = *(void *)(v1 + 560);
    uint64_t v248 = *(void *)(v1 + 656);

    v286(v246, v247);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v300(v9, v10, v247);
    uint64_t v250 = *(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 16);
    v250(v252, v249, v253);
    int v251 = *(_DWORD *)(v248 + 80);
    uint64_t v256 = swift_allocObject();
    uint64_t v254 = *(void (**)(unint64_t, uint64_t, uint64_t))(v248 + 32);
    v254(v256 + ((v251 + 16) & ~(unint64_t)v251), v252, v253);
    uint64_t v262 = Logger.logObject.getter();
    os_log_type_t v263 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 320) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v255 = *(_DWORD *)(v1 + 856);
    uint64_t v258 = swift_allocObject();
    *(unsigned char *)(v258 + 16) = 32;
    uint64_t v259 = swift_allocObject();
    *(unsigned char *)(v259 + 16) = 8;
    uint64_t v257 = swift_allocObject();
    *(void *)(v257 + 16) = partial apply for implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v257 + 24) = v256;
    uint64_t v260 = swift_allocObject();
    *(void *)(v260 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v260 + 24) = v257;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v261 = v11;
    swift_retain();
    *uint64_t v261 = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[1] = v258;
    swift_retain();
    v261[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[3] = v259;
    swift_retain();
    v261[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[5] = v260;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v262, v263))
    {
      uint64_t v243 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v242 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v244 = createStorage<A>(capacity:type:)(0);
      uint64_t v245 = createStorage<A>(capacity:type:)(1);
      unint64_t v342 = v243;
      uint64_t v343 = v244;
      uint64_t v344 = v245;
      serialize(_:at:)(2, &v342);
      serialize(_:at:)(1, &v342);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v258;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v259;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v260;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      _os_log_impl(&dword_25D85A000, v262, v263, "#SendPaymentNeedsValueStrategy parseResponseValue for slot: %s", v243, v255);
      destroyStorage<A>(_:count:)(v244, 0, v242);
      destroyStorage<A>(_:count:)(v245, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v243, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v237 = *(void *)(v1 + 816);
    uint64_t v238 = *(void *)(v1 + 736);
    uint64_t v240 = *(void *)(v1 + 640);
    uint64_t v241 = *(void *)(v1 + 616);
    uint64_t v239 = *(void *)(v1 + 624);

    v286(v237, v238);
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v239 + 88))(v240, v241) == *MEMORY[0x263F6FF70])
    {
      uint64_t v12 = *(void *)(v1 + 808);
      uint64_t v222 = *(void *)(v1 + 736);
      uint64_t v221 = *(void *)(v1 + 640);
      uint64_t v223 = *(void *)(v1 + 608);
      uint64_t v225 = *(void *)(v1 + 600);
      uint64_t v226 = *(void *)(v1 + 576);
      uint64_t v220 = *(void *)(v1 + 584);
      (*(void (**)(void))(*(void *)(v1 + 624) + 96))();
      uint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 32);
      v227(v223, v221, v226);
      *(void *)(v1 + 392) = v223;
      uint64_t v13 = Logger.payments.unsafeMutableAddressor();
      v300(v12, v13, v222);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 16))(v225, v223, v226);
      unint64_t v224 = (*(unsigned __int8 *)(v220 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80);
      uint64_t v229 = swift_allocObject();
      v227(v229 + v224, v225, v226);
      uint64_t v235 = Logger.logObject.getter();
      os_log_type_t v236 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 400) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v228 = *(_DWORD *)(v1 + 872);
      uint64_t v231 = swift_allocObject();
      *(unsigned char *)(v231 + 16) = 32;
      uint64_t v232 = swift_allocObject();
      *(unsigned char *)(v232 + 16) = 8;
      uint64_t v230 = swift_allocObject();
      *(void *)(v230 + 16) = partial apply for implicit closure #4 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
      *(void *)(v230 + 24) = v229;
      uint64_t v233 = swift_allocObject();
      *(void *)(v233 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v233 + 24) = v230;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v234 = v14;
      swift_retain();
      void *v234 = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[1] = v231;
      swift_retain();
      v234[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[3] = v232;
      swift_retain();
      v234[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[5] = v233;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v235, v236))
      {
        id v217 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v218 = createStorage<A>(capacity:type:)(0);
        uint64_t v219 = createStorage<A>(capacity:type:)(1);
        uint64_t v337 = v217;
        uint64_t v338 = v218;
        uint64_t v339 = v219;
        serialize(_:at:)(2, &v337);
        serialize(_:at:)(1, &v337);
        unint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        unint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v232;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        unint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v233;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        _os_log_impl(&dword_25D85A000, v235, v236, "#SendPaymentNeedsValueStrategy parseResponseValue, directInvocation: %s", v217, v228);
        destroyStorage<A>(_:count:)(v218, 0, v216);
        destroyStorage<A>(_:count:)(v219, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v217, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v211 = *(void *)(v1 + 808);
      uint64_t v212 = *(void *)(v1 + 736);

      v286(v211, v212);
      uint64_t v213 = Parse.DirectInvocation.identifier.getter();
      uint64_t v214 = v15;
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      swift_bridgeObjectRetain();
      uint64_t v325 = v213;
      uint64_t v326 = v214;
      char v215 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v215)
      {
        swift_bridgeObjectRelease();
        if (Parse.DirectInvocation.userData.getter())
        {
          *(void *)(v1 + 248) = PaymentsDirectInvocations.Keys.rawValue.getter(1);
          *(void *)(v1 + 256) = v16;
          MEMORY[0x2611B90F0]();
          outlined destroy of String.UTF8View();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)(v1 + 216) = 0;
          *(void *)(v1 + 224) = 0;
          *(void *)(v1 + 232) = 0;
          *(void *)(v1 + 240) = 0;
        }
        if (*(void *)(v1 + 240))
        {
          type metadata accessor for INPerson();
          if (swift_dynamicCast()) {
            uint64_t v210 = *(void **)(v1 + 504);
          }
          else {
            uint64_t v210 = 0;
          }
          unint64_t v209 = v210;
        }
        else
        {
          outlined destroy of FlowActivity?(v1 + 216);
          unint64_t v209 = 0;
        }
        uint64_t v20 = *(void *)(v1 + 792);
        uint64_t v184 = *(void *)(v1 + 736);
        *(void *)(v1 + 448) = v209;
        uint64_t v21 = Logger.payments.unsafeMutableAddressor();
        v300(v20, v21, v184);
        id v22 = v209;
        uint64_t v186 = swift_allocObject();
        *(void *)(v186 + 16) = v209;
        default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
        swift_bridgeObjectRelease();
        int v191 = Logger.logObject.getter();
        os_log_type_t v192 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 456) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v185 = *(_DWORD *)(v1 + 880);
        uint64_t v187 = swift_allocObject();
        *(unsigned char *)(v187 + 16) = 64;
        uint64_t v188 = swift_allocObject();
        *(unsigned char *)(v188 + 16) = 8;
        uint64_t v189 = swift_allocObject();
        *(void *)(v189 + 16) = partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v189 + 24) = v186;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v190 = v23;
        swift_retain();
        *uint64_t v190 = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[1] = v187;
        swift_retain();
        v190[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[3] = v188;
        swift_retain();
        v190[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[5] = v189;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v191, v192))
        {
          uint64_t v181 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v182 = createStorage<A>(capacity:type:)(1);
          uint64_t v183 = createStorage<A>(capacity:type:)(0);
          uint64_t v332 = v181;
          uint64_t v333 = v182;
          uint64_t v334 = v183;
          serialize(_:at:)(2, &v332);
          serialize(_:at:)(1, &v332);
          uint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v187;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          uint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v188;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          uint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v189;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          _os_log_impl(&dword_25D85A000, v191, v192, "#SendPaymentNeedsValueStrategy Received payee value %@ from DirectInvocation", v181, v185);
          destroyStorage<A>(_:count:)(v182, 1, v180);
          destroyStorage<A>(_:count:)(v183, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v181, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v171 = *(void *)(v1 + 792);
        uint64_t v172 = *(void *)(v1 + 784);
        uint64_t v175 = *(void *)(v1 + 736);

        v286(v171, v175);
        id v174 = (id)ParameterResolutionRecord.intent.getter();
        id v24 = v209;
        uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
        id v173 = (id)MEMORY[0x2611B9130](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v174, sel_setValue_forKeyPath_, v209, v173);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v26 = Logger.payments.unsafeMutableAddressor();
        v300(v172, v26, v175);
        uint64_t v178 = Logger.logObject.getter();
        os_log_type_t v177 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 464) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v176 = *(_DWORD *)(v1 + 884);
        uint64_t v179 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v178, v177))
        {
          uint64_t v167 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v168 = createStorage<A>(capacity:type:)(0);
          uint64_t v169 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 472) = v167;
          *(void *)(v1 + 480) = v168;
          *(void *)(v1 + 488) = v169;
          serialize(_:at:)(0, (unsigned char **)(v1 + 472));
          serialize(_:at:)(0, (unsigned char **)(v1 + 472));
          *(void *)(v1 + 496) = v179;
          uint64_t v170 = (void *)swift_task_alloc();
          v170[2] = v1 + 472;
          v170[3] = v1 + 480;
          v170[4] = v1 + 488;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v178, v177, "#SendPaymentNeedsValueStrategy Returning successful IntentPromptAnswer", v167, v176);
          destroyStorage<A>(_:count:)(v168, 0, v166);
          destroyStorage<A>(_:count:)(v169, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v167, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v158 = *(void *)(v1 + 784);
        uint64_t v159 = *(void *)(v1 + 736);
        uint64_t v164 = *(void *)(v1 + 608);
        uint64_t v165 = *(void *)(v1 + 576);
        uint64_t v162 = *(void *)(v1 + 544);
        uint64_t v163 = *(void *)(v1 + 584);

        v286(v158, v159);
        id v160 = (id)ParameterResolutionRecord.intent.getter();
        *(void *)(v1 + 200) = &type metadata for SendPaymentSlots;
        *(void *)(v1 + 208) = &protocol witness table for SendPaymentSlots;
        *(unsigned char *)(v1 + 176) = value;
        unint64_t v161 = type metadata accessor for INSendPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((void *)(v1 + 176), v161, &v331);
        __swift_destroy_boxed_opaque_existential_0(v1 + 176);

        ParameterResolutionRecord.intent.getter();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 56))(v162, 0, 1);
        (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v164, v165);
      }
      else
      {
        uint64_t v17 = *(void *)(v1 + 800);
        uint64_t v204 = *(void *)(v1 + 736);
        swift_bridgeObjectRelease();
        uint64_t v18 = Logger.payments.unsafeMutableAddressor();
        v300(v17, v18, v204);
        uint64_t v207 = Logger.logObject.getter();
        os_log_type_t v206 = static os_log_type_t.error.getter();
        *(void *)(v1 + 408) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v205 = *(_DWORD *)(v1 + 876);
        uint64_t v208 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v207, v206))
        {
          uint64_t v200 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v201 = createStorage<A>(capacity:type:)(0);
          uint64_t v202 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 416) = v200;
          *(void *)(v1 + 424) = v201;
          *(void *)(v1 + 432) = v202;
          serialize(_:at:)(0, (unsigned char **)(v1 + 416));
          serialize(_:at:)(0, (unsigned char **)(v1 + 416));
          *(void *)(v1 + 440) = v208;
          uint64_t v203 = (void *)swift_task_alloc();
          v203[2] = v1 + 416;
          v203[3] = v1 + 424;
          v203[4] = v1 + 432;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v207, v206, "#SendPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Direct Invocation. Reprompt with previous state", v200, v205);
          destroyStorage<A>(_:count:)(v201, 0, v199);
          destroyStorage<A>(_:count:)(v202, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v200, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v193 = *(void *)(v1 + 800);
        uint64_t v194 = *(void *)(v1 + 736);
        uint64_t v197 = *(void *)(v1 + 608);
        uint64_t v198 = *(void *)(v1 + 576);
        uint64_t v195 = *(void *)(v1 + 544);
        uint64_t v196 = *(void *)(v1 + 584);

        v286(v193, v194);
        uint64_t v327 = 0;
        uint64_t v328 = 0;
        uint64_t v329 = 0;
        uint64_t v330 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INSendPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 56))(v195, 0, 1);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v197, v198);
      }
    }
    else
    {
      uint64_t v154 = *(void *)(v1 + 632);
      uint64_t v155 = *(void *)(v1 + 616);
      uint64_t v151 = *(void *)(v1 + 568);
      uint64_t v153 = *(void *)(v1 + 624);
      Input.parse.getter();
      id v152 = (id)ParameterResolutionRecord.intent.getter();
      swift_retain();
      outlined init with copy of GlobalsProviding(v151 + 104, v1 + 16);
      swift_release();
      uint64_t v150 = *(void *)(v1 + 40);
      uint64_t v149 = *(void *)(v1 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v150);
      (*(void (**)(uint64_t))(v149 + 24))(v150);
      swift_retain();
      outlined init with copy of GlobalsProviding(v151 + 64, v1 + 96);
      swift_release();
      id v157 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v152, (uint64_t)&protocol witness table for INSendPaymentIntent, v1 + 56, v1 + 96);
      __swift_destroy_boxed_opaque_existential_0(v1 + 96);
      __swift_destroy_boxed_opaque_existential_0(v1 + 56);
      __swift_destroy_boxed_opaque_existential_0(v1 + 16);

      uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
      v156(v154, v155);
      if (v157)
      {
        self;
        uint64_t v148 = swift_dynamicCastObjCClass();
        if (v148)
        {
          uint64_t v147 = (void *)v148;
        }
        else
        {

          uint64_t v147 = 0;
        }
        uint64_t v146 = v147;
      }
      else
      {
        uint64_t v146 = 0;
      }
      if (v146)
      {
        uint64_t v28 = *(void *)(v1 + 776);
        uint64_t v136 = *(void *)(v1 + 736);
        *(void *)(v1 + 368) = v146;
        uint64_t v29 = Logger.payments.unsafeMutableAddressor();
        v300(v28, v29, v136);
        id v30 = v146;
        uint64_t v138 = swift_allocObject();
        *(void *)(v138 + 16) = v146;
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 376) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v137 = *(_DWORD *)(v1 + 864);
        uint64_t v140 = swift_allocObject();
        *(unsigned char *)(v140 + 16) = 64;
        uint64_t v141 = swift_allocObject();
        *(unsigned char *)(v141 + 16) = 8;
        uint64_t v139 = swift_allocObject();
        *(void *)(v139 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v139 + 24) = v138;
        uint64_t v142 = swift_allocObject();
        *(void *)(v142 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(void *)(v142 + 24) = v139;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v143 = v31;
        swift_retain();
        *uint64_t v143 = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[1] = v140;
        swift_retain();
        v143[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[3] = v141;
        swift_retain();
        v143[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[5] = v142;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v144, v145))
        {
          uint64_t v133 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v134 = createStorage<A>(capacity:type:)(1);
          uint64_t v135 = createStorage<A>(capacity:type:)(0);
          v320 = v133;
          uint64_t v321 = v134;
          uint64_t v322 = v135;
          serialize(_:at:)(2, &v320);
          serialize(_:at:)(1, &v320);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v140;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v142;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          _os_log_impl(&dword_25D85A000, v144, v145, "#SendPaymentNeedsValueStrategy Converted PaymentsIntent to SiriKit intent: %@", v133, v137);
          destroyStorage<A>(_:count:)(v134, 1, v132);
          destroyStorage<A>(_:count:)(v135, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v133, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v130 = *(void *)(v1 + 776);
        uint64_t v131 = *(void *)(v1 + 736);

        v286(v130, v131);
        if (value)
        {
          if (value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
          {
            id v126 = (id)ParameterResolutionRecord.intent.getter();
            id v125 = objc_msgSend(v146, sel_currencyAmount);
            uint64_t v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
            id v124 = (id)MEMORY[0x2611B9130](v33);
            swift_bridgeObjectRelease();
            objc_msgSend(v126, sel_setValue_forKeyPath_, v125, v124);

            swift_unknownObjectRelease();
          }
          else
          {
            id v122 = (id)ParameterResolutionRecord.intent.getter();
            id v123 = objc_msgSend(v146, sel_note);
            if (v123)
            {
              uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v119 = v34;

              uint64_t v120 = v118;
              uint64_t v121 = v119;
            }
            else
            {
              uint64_t v120 = 0;
              uint64_t v121 = 0;
            }
            if (v121)
            {
              uint64_t v116 = MEMORY[0x2611B9130](v120);
              swift_bridgeObjectRelease();
              uint64_t v117 = v116;
            }
            else
            {
              uint64_t v117 = 0;
            }
            uint64_t v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
            id v115 = (id)MEMORY[0x2611B9130](v35);
            swift_bridgeObjectRelease();
            objc_msgSend(v122, sel_setValue_forKeyPath_, v117, v115);

            swift_unknownObjectRelease();
          }
        }
        else
        {
          id v129 = (id)ParameterResolutionRecord.intent.getter();
          id v128 = objc_msgSend(v146, sel_payee);
          uint64_t v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
          id v127 = (id)MEMORY[0x2611B9130](v32);
          swift_bridgeObjectRelease();
          objc_msgSend(v129, sel_setValue_forKeyPath_, v128, v127);

          swift_unknownObjectRelease();
        }
        uint64_t v36 = *(void *)(v1 + 768);
        uint64_t v102 = *(void *)(v1 + 736);
        uint64_t v104 = *(void *)(v1 + 672);
        uint64_t v105 = *(void *)(v1 + 648);
        uint64_t v103 = *(void *)(v1 + 560);
        uint64_t v37 = Logger.payments.unsafeMutableAddressor();
        v300(v36, v37, v102);
        v250(v104, v103, v105);
        uint64_t v107 = swift_allocObject();
        v254(v107 + ((v251 + 16) & ~(unint64_t)v251), v104, v105);
        uint64_t v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 384) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v106 = *(_DWORD *)(v1 + 868);
        uint64_t v109 = swift_allocObject();
        *(unsigned char *)(v109 + 16) = 32;
        uint64_t v110 = swift_allocObject();
        *(unsigned char *)(v110 + 16) = 8;
        uint64_t v108 = swift_allocObject();
        *(void *)(v108 + 16) = partial apply for implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v108 + 24) = v107;
        uint64_t v111 = swift_allocObject();
        *(void *)(v111 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v111 + 24) = v108;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v112 = v38;
        swift_retain();
        *uint64_t v112 = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[1] = v109;
        swift_retain();
        v112[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[3] = v110;
        swift_retain();
        v112[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[5] = v111;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v113, v114))
        {
          unint64_t v99 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v100 = createStorage<A>(capacity:type:)(0);
          uint64_t v101 = createStorage<A>(capacity:type:)(1);
          v315 = v99;
          uint64_t v316 = v100;
          uint64_t v317 = v101;
          serialize(_:at:)(2, &v315);
          serialize(_:at:)(1, &v315);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v109;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v110;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v111;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          _os_log_impl(&dword_25D85A000, v113, v114, "#SendPaymentNeedsValueStrategy Returning intent: %s", v99, v106);
          destroyStorage<A>(_:count:)(v100, 0, v98);
          destroyStorage<A>(_:count:)(v101, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v99, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v91 = *(void *)(v1 + 768);
        uint64_t v92 = *(void *)(v1 + 736);
        uint64_t v96 = *(void *)(v1 + 640);
        uint64_t v97 = *(void *)(v1 + 616);
        uint64_t v95 = *(void *)(v1 + 544);

        v286(v91, v92);
        id v93 = (id)ParameterResolutionRecord.intent.getter();
        *(void *)(v1 + 160) = &type metadata for SendPaymentSlots;
        *(void *)(v1 + 168) = &protocol witness table for SendPaymentSlots;
        *(unsigned char *)(v1 + 136) = value;
        unint64_t v94 = type metadata accessor for INSendPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((void *)(v1 + 136), v94, &v314);
        __swift_destroy_boxed_opaque_existential_0(v1 + 136);

        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 56))(v95, 0, 1);
        v156(v96, v97);
      }
      else
      {
        uint64_t v40 = *(void *)(v1 + 760);
        uint64_t v86 = *(void *)(v1 + 736);
        uint64_t v41 = Logger.payments.unsafeMutableAddressor();
        v300(v40, v41, v86);
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        *(void *)(v1 + 328) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v87 = *(_DWORD *)(v1 + 860);
        uint64_t v90 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v89, v88))
        {
          uint64_t v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v83 = createStorage<A>(capacity:type:)(0);
          uint64_t v84 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 336) = v82;
          *(void *)(v1 + 344) = v83;
          *(void *)(v1 + 352) = v84;
          serialize(_:at:)(0, (unsigned char **)(v1 + 336));
          serialize(_:at:)(0, (unsigned char **)(v1 + 336));
          *(void *)(v1 + 360) = v90;
          uint64_t v85 = (void *)swift_task_alloc();
          v85[2] = v1 + 336;
          v85[3] = v1 + 344;
          v85[4] = v1 + 352;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v89, v88, "#SendPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Send response. Reprompt with previous state", v82, v87);
          destroyStorage<A>(_:count:)(v83, 0, v81);
          destroyStorage<A>(_:count:)(v84, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v82, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v76 = *(void *)(v1 + 760);
        uint64_t v77 = *(void *)(v1 + 736);
        uint64_t v79 = *(void *)(v1 + 640);
        uint64_t v80 = *(void *)(v1 + 616);
        uint64_t v78 = *(void *)(v1 + 544);

        v286(v76, v77);
        uint64_t v310 = 0;
        uint64_t v311 = 0;
        uint64_t v312 = 0;
        uint64_t v313 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INSendPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INSendPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 56))(v78, 0, 1);
        v156(v79, v80);
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
    return v50();
  }
}

uint64_t implicit closure #2 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v4 = type metadata accessor for Parse();
  unint64_t v2 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

void *implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(void *a1)
{
  id v1 = a1;
  if (a1) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t SendPaymentNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SendPaymentNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SendPaymentNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  uint64_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SendPaymentNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SendPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SendPaymentNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66308](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SendPaymentNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66310](a1, a2, v6, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for SendPaymentNeedsValueStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SendPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = v7;
  *(void *)(v7 + 16) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v8;
  uint64_t v9 = type metadata accessor for SendPaymentNeedsValueStrategy();
  *uint64_t v8 = *(void *)(v11 + 16);
  v8[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v9, a7);
}

uint64_t sub_25D9A9470()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);

  return implicit closure #1 in SendPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)();
}

uint64_t sub_25D9A95AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A95D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9604()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9644()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9684()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9A9754()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9780()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A97AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A97EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A982C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  type metadata accessor for Input();

  return implicit closure #2 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_25D9A9960()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A998C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A99B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A99F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9A38()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D9A9B08()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9B34()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9B60()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9BA0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9BE0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9C20()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9C4C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9C78()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9CB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9CF8()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);

  return implicit closure #7 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_25D9A9E34()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9E60()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9E8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9ECC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9A9F0C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #4 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(v2);
}

uint64_t sub_25D9AA040()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA06C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA098()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA0D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA118()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_25D9AA160()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA18C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AA1B8()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentNeedsValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentNeedsValueStrategy;
  if (!type metadata singleton initialization cache for SendPaymentNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SendPaymentNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy();
}

uint64_t SendPaymentHandleIntentStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSendPaymentIntent();
  unint64_t v1 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SendPaymentHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  void v3[5] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  void v3[5] = v2;
  return MEMORY[0x270FA2498](SendPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:), 0);
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 56) = buf;
    *(void *)(v14 + 64) = v11;
    *(void *)(v14 + 72) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 56));
    serialize(_:at:)(0, (unsigned char **)(v14 + 56));
    *(void *)(v14 + 80) = v20;
    unint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 56;
    void v13[3] = v14 + 64;
    v13[4] = v14 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#SendPaymentHandleIntentStrategy makeIntentExecutionBehavior", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v8 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 16) + 8);
  return v3(v8);
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[53] = v2;
  v3[52] = a2;
  v3[51] = a1;
  v3[39] = v3;
  unsigned char v3[40] = 0;
  v3[41] = 0;
  v3[43] = 0;
  v3[49] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[55] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[56] = v4;
  v3[57] = *(void *)(v4 - 8);
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  v3[60] = v5;
  uint64_t v8 = *(void *)(v5 - 8);
  v3[61] = v8;
  v3[62] = *(void *)(v8 + 64);
  v3[63] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[64] = v6;
  v3[65] = *(void *)(v6 - 8);
  v3[66] = swift_task_alloc();
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[69] = swift_task_alloc();
  unsigned char v3[40] = a2;
  v3[41] = v2;
  return MEMORY[0x270FA2498](SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0);
}

uint64_t SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v51 = v0;
  uint64_t v29 = *(void *)(v0 + 552);
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v30 = *(void *)(v0 + 520);
  uint64_t v31 = *(void *)(v0 + 512);
  uint64_t v35 = *(void *)(v0 + 504);
  uint64_t v33 = *(void *)(v0 + 488);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v32 = *(void *)(v0 + 416);
  *(void *)(v0 + 312) = v0;
  uint64_t v2 = SignpostName.sendPaymentHandleIntent.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v29);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  *(void *)(v0 + 560) = v4;
  *(void *)(v0 + 568) = (v30 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v4(v1, v3, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v35, v32, v36);
  unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v38 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 32))(v38 + v34, v35, v36);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 336) = 12;
  *(void *)(v0 + 576) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 584) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 592) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v37 = *(_DWORD *)(v0 + 672);
  uint64_t v40 = swift_allocObject();
  *(unsigned char *)(v40 + 16) = 32;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 8;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = partial apply for implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(void *)(v39 + 24) = v38;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v42 + 24) = v39;
  *(void *)(v0 + 600) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v43 = v5;
  swift_retain();
  *uint64_t v43 = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[1] = v40;
  swift_retain();
  v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[3] = v41;
  swift_retain();
  v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[5] = v42;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v44, v45))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(0);
    uint64_t v27 = createStorage<A>(capacity:type:)(1);
    uint64_t v46 = buf;
    uint64_t v47 = v26;
    uint64_t v48 = v27;
    serialize(_:at:)(2, &v46);
    serialize(_:at:)(1, &v46);
    uint32_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v50 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    uint32_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v50 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    uint32_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v50 = v42;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    _os_log_impl(&dword_25D85A000, v44, v45, "#SendPaymentHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v37);
    destroyStorage<A>(_:count:)(v26, 0, v24);
    destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v20 = v28[68];
  uint64_t v21 = v28[64];
  uint64_t v19 = v28[65];

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v28[76] = v6;
  v28[77] = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v20, v21);
  id v22 = (id)IntentResolutionRecord.intentResponse.getter();
  id v23 = objc_msgSend(v22, sel_code);
  v28[43] = v23;

  if (v23 == (id)3)
  {
    uint64_t v17 = v28[53];
    swift_retain();
    v28[78] = *(void *)(v17 + 16);
    swift_retain();
    swift_release();
    IntentResolutionRecord.app.getter();
    uint64_t v18 = App.sirikitApp.getter();
    v28[79] = v18;
    swift_release();
    uint64_t v7 = (void *)swift_task_alloc();
    v28[80] = v7;
    *uint64_t v7 = v28[39];
    v7[1] = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v8 = v28[59];
    return SendPaymentCATs.intentHandledResponse(app:)(v8, v18);
  }
  else
  {
    uint64_t v13 = v28[53];
    swift_retain();
    outlined init with copy of GlobalsProviding(v13 + 144, (uint64_t)(v28 + 2));
    swift_release();
    uint64_t v14 = v28[5];
    uint64_t v15 = v28[6];
    __swift_project_boxed_opaque_existential_1(v28 + 2, v14);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 48) + **(int **)(v15 + 48));
    uint64_t v10 = (void *)swift_task_alloc();
    v28[82] = v10;
    *uint64_t v10 = v28[39];
    v10[1] = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v11 = v28[54];
    uint64_t v12 = v28[52];
    return v16(v11, v12, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 312) = *v1;
  *(void *)(v4 + 648) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint32_t v32;
  os_log_type_t v33;
  NSObject *oslog;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  uint64_t v72 = v0;
  *(void *)(v0 + 312) = v0;
  uint64_t v65 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v66 = objc_msgSend(v65, sel_paymentRecord);
  if (v66)
  {
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 560);
    uint64_t v1 = *(void *)(v64 + 536);
    uint64_t v53 = *(void *)(v64 + 512);
    *(void *)(v64 + 392) = v66;

    uint64_t v2 = Logger.payments.unsafeMutableAddressor();
    v54(v1, v2, v53);
    uint64_t v3 = v66;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v66;
    uint64_t v62 = Logger.logObject.getter();
    uint64_t v63 = static os_log_type_t.debug.getter();
    *(void *)(v64 + 400) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v64 + 680);
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = 64;
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = 8;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v57 + 24) = v56;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v60 + 24) = v57;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v61 = v4;
    swift_retain();
    *uint64_t v61 = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[1] = v58;
    swift_retain();
    unsigned char v61[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[3] = v59;
    swift_retain();
    v61[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[5] = v60;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v5 = *(void *)(v64 + 648);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint32_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v51 = createStorage<A>(capacity:type:)(1);
      uint64_t v52 = createStorage<A>(capacity:type:)(0);
      uint32_t v67 = buf;
      uint64_t v68 = v51;
      uint64_t v69 = v52;
      serialize(_:at:)(2, &v67);
      serialize(_:at:)(1, &v67);
      uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v71 = v58;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
      if (v5) {
        return result;
      }
      uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v71 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
      uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v71 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
      _os_log_impl(&dword_25D85A000, v62, v63, "#SendPaymentConfirmIntentStrategy intent contained paymentRecord: %@", buf, size);
      destroyStorage<A>(_:count:)(v51, 1, v49);
      destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v64 + 608);
    uint64_t v48 = *(void *)(v64 + 552);
    uint64_t v36 = *(void *)(v64 + 536);
    uint32_t v37 = *(void *)(v64 + 512);
    uint64_t v46 = *(void *)(v64 + 472);
    uint64_t v47 = *(void *)(v64 + 448);
    uint64_t v44 = *(void *)(v64 + 440);
    uint64_t v41 = *(void *)(v64 + 424);
    uint64_t v43 = *(uint64_t **)(v64 + 408);
    os_log_type_t v45 = *(void *)(v64 + 456);

    v38(v36, v37);
    swift_retain();
    outlined init with copy of GlobalsProviding(v41 + 104, v64 + 176);
    swift_release();
    uint64_t v40 = *(void *)(v64 + 200);
    uint64_t v39 = *(void *)(v64 + 208);
    __swift_project_boxed_opaque_existential_1((void *)(v64 + 176), v40);
    (*(void (**)(uint64_t))(v39 + 16))(v40);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    type metadata accessor for SAAceView();
    _allocateUninitializedArray<A>(_:)();
    swift_retain();
    uint64_t v42 = BaseStrategy.ttsEnabled.getter();
    swift_release();
    static PaymentsContextProvider.handleSendPayment(paymentRecord:needsSDA:)(v66, v42 & 1, v44);
    uint64_t v7 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 56))(v44, 0, 1);
    *(void *)(v64 + 256) = 0;
    *(void *)(v64 + 264) = 0;
    *(void *)(v64 + 272) = 0;
    *(void *)(v64 + 280) = 0;
    *(void *)(v64 + 288) = 0;
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v43[3] = type metadata accessor for AceOutput();
    v43[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v43);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v64 + 256);
    outlined destroy of NLContextUpdate?(v44);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v64 + 216);
    __swift_destroy_boxed_opaque_existential_0(v64 + 176);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)(v64 + 312) + 8);
    return v8();
  }
  else
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 560);
    uint64_t v9 = *(void *)(v64 + 528);
    uint64_t v30 = *(void *)(v64 + 512);

    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v31(v9, v10, v30);
    oslog = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.error.getter();
    *(void *)(v64 + 352) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v32 = *(_DWORD *)(v64 + 676);
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v33))
    {
      uint64_t v11 = *(void *)(v64 + 648);
      uint64_t v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v27 = createStorage<A>(capacity:type:)(0);
      uint64_t v28 = createStorage<A>(capacity:type:)(0);
      *(void *)(v64 + 360) = v26;
      *(void *)(v64 + 368) = v27;
      *(void *)(v64 + 376) = v28;
      serialize(_:at:)(0, (unsigned char **)(v64 + 360));
      serialize(_:at:)(0, (unsigned char **)(v64 + 360));
      *(void *)(v64 + 384) = v35;
      uint64_t v29 = (void *)swift_task_alloc();
      v29[2] = v64 + 360;
      v29[3] = v64 + 368;
      v29[4] = v64 + 376;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v11) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, oslog, v33, "#SendPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", v26, v32);
      destroyStorage<A>(_:count:)(v27, 0, v25);
      destroyStorage<A>(_:count:)(v28, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v26, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v64 + 608);
    uint64_t v24 = *(void *)(v64 + 552);
    uint64_t v15 = *(void *)(v64 + 528);
    uint64_t v16 = *(void *)(v64 + 512);
    id v22 = *(void *)(v64 + 472);
    id v23 = *(void *)(v64 + 448);
    uint64_t v21 = *(void *)(v64 + 456);

    v17(v15, v16);
    type metadata accessor for INSendPaymentIntent();
    uint64_t v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v12;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v13 = v19;
    *(void *)(v13 + 8) = v18;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 12;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)(v64 + 312) + 8);
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 312) = *v1;
  *(void *)(v4 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[57];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[54];
  v0[39] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[69];
    outlined destroy of TemplatingResult?(v24[54]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[37] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[38] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[39] + 8);
  }
  else
  {
    id v23 = v24[69];
    uint64_t v21 = v24[58];
    id v22 = v24[56];
    uint64_t v19 = v24[55];
    uint64_t v17 = v24[53];
    uint64_t v18 = (uint64_t *)v24[51];
    uint64_t v20 = v24[57];
    (*(void (**)(void))(v20 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    uint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v19, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v19);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[39] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 552);
  *(void *)(v0 + 312) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 312) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 552);
  *(void *)(v0 + 312) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 312) + 8);
  return v1();
}

uint64_t implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t SendPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[34] = v4;
  v3[35] = *(void *)(v4 - 8);
  v3[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[37] = v5;
  v3[38] = *(void *)(v5 - 8);
  v3[39] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  unsigned char v3[40] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v2;
  return MEMORY[0x270FA2498](SendPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:), 0);
}

uint64_t SendPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)()
{
  uint64_t v21 = *(void *)(v0 + 320);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 296);
  *(void *)(v0 + 176) = v0;
  uint64_t v2 = SignpostName.makeSendPaymentContinueInAppResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v21);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v1, v3, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(unsigned int *)(v0 + 352);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    *(void *)(v20 + 208) = buf;
    *(void *)(v20 + 216) = v17;
    *(void *)(v20 + 224) = v18;
    serialize(_:at:)(0, (unsigned char **)(v20 + 208));
    serialize(_:at:)(0, (unsigned char **)(v20 + 208));
    *(void *)(v20 + 232) = v27;
    uint64_t v19 = (void *)swift_task_alloc();
    void v19[2] = v20 + 208;
    void v19[3] = v20 + 216;
    v19[4] = v20 + 224;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v26, v25, "#SendPaymentHandleIntentStrategy makeContinueInAppResponse", buf, v24);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v20 + 312);
  uint64_t v9 = *(void *)(v20 + 296);
  uint64_t v10 = *(void *)(v20 + 256);
  uint64_t v7 = *(void *)(v20 + 304);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  outlined init with copy of GlobalsProviding(v10 + 144, v20 + 16);
  swift_release();
  uint64_t v12 = *(void *)(v20 + 40);
  uint64_t v13 = *(void *)(v20 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v20 + 16), v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v11 = IntentResolutionRecord.app.getter();
  *(void *)(v20 + 328) = v11;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 40)
                                                                            + **(int **)(v13 + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v20 + 336) = v4;
  *uint64_t v4 = *(void *)(v20 + 176);
  v4[1] = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  uint64_t v5 = *(void *)(v20 + 288);
  return v14(v5, 1, v11, v12, v13);
}

uint64_t SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[26] = v3;
  v3[27] = 0;
  v3[28] = 0;
  v3[22] = 0;
  v3[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[35] = v4;
  v3[36] = *(void *)(v4 - 8);
  v3[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[38] = v5;
  v3[39] = *(void *)(v5 - 8);
  unsigned char v3[40] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[41] = swift_task_alloc();
  v3[27] = a2;
  v3[28] = v2;
  return MEMORY[0x270FA2498](SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0);
}

uint64_t SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v43 = v0;
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 320);
  uint64_t v25 = *(void *)(v0 + 312);
  uint64_t v26 = *(void *)(v0 + 304);
  *(void *)(v0 + 208) = v0;
  uint64_t v1 = SignpostName.makeSendPaymentFailureHandlingIntentResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  id v23 = (id)IntentResolutionRecord.intentResponse.getter();
  id v24 = objc_msgSend(v23, sel_code);

  uint64_t v27 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)v24);
  uint64_t v28 = v2;
  *(void *)(v0 + 336) = v2;
  *(void *)(v0 + 176) = v27;
  *(void *)(v0 + 184) = v2;
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v3, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 232) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v29 = *(_DWORD *)(v0 + 360);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v4;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v38 = buf;
    uint64_t v39 = v18;
    uint64_t v40 = v19;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25D85A000, v36, v37, "#SendPaymentHandleIntentStrategy makeFailureHandlingIntentResponse with code %s", buf, v29);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = v20[40];
  uint64_t v11 = v20[38];
  uint64_t v12 = v20[32];
  uint64_t v9 = v20[39];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 144, (uint64_t)(v20 + 2));
  swift_release();
  uint64_t v13 = v20[5];
  uint64_t v14 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v13);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 48) + **(int **)(v14 + 48));
  uint64_t v5 = (void *)swift_task_alloc();
  v20[43] = v5;
  *uint64_t v5 = v20[26];
  v5[1] = SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  uint64_t v6 = v20[34];
  uint64_t v7 = v20[31];
  return v15(v6, v7, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 208) = *v1;
  *(void *)(v4 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  else
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[36];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[34];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[41];
    outlined destroy of TemplatingResult?(v24[34]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[25] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  else
  {
    uint64_t v21 = v24[41];
    uint64_t v22 = v24[37];
    uint64_t v20 = v24[35];
    id v23 = v24[33];
    uint64_t v17 = v24[32];
    uint64_t v18 = (uint64_t *)v24[30];
    uint64_t v19 = v24[36];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    uint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 328);
  *(void *)(v0 + 208) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 208) + 8);
  return v1();
}

uint64_t SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:), 0);
}

uint64_t SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 248);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 168) = buf;
    *(void *)(v15 + 176) = v12;
    *(void *)(v15 + 184) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    *(void *)(v15 + 192) = v21;
    uint64_t v14 = (void *)swift_task_alloc();
    void v14[2] = v15 + 168;
    v14[3] = v15 + 176;
    v14[4] = v15 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#SendPaymentHandleIntentStrategy makePreHandleIntentOutput", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v15 + 264);
  uint64_t v8 = *(void *)(v15 + 248);
  uint64_t v9 = *(void *)(v15 + 208);
  uint64_t v6 = *(void *)(v15 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(void *)(v15 + 272) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v15 + 280) = v3;
  *uint64_t v3 = *(void *)(v15 + 136);
  v3[1] = SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:);
  uint64_t v4 = *(void *)(v15 + 240);
  return SendPaymentCATs.preHandleIntentResponse()(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:);
  }
  else
  {
    swift_release();
    uint64_t v2 = SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = v0[30];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[28];
  uint64_t v11 = v0[27];
  uint64_t v6 = v0[26];
  uint64_t v7 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v11, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[17] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 136) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v1();
}

uint64_t SendPaymentHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SendPaymentHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SendPaymentHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  os_log_type_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t sub_25D9AF83C()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);

  return implicit closure #1 in SendPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t sub_25D9AF978()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AF9A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AF9D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFA10()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFA50()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFA90()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFABC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFAE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFB28()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFB68()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFBA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFBD4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFC00()
{
  return swift_deallocObject();
}

uint64_t sub_25D9AFC40()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentHandleIntentStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentHandleIntentStrategy;
  if (!type metadata singleton initialization cache for SendPaymentHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type INSendPaymentIntentResponse and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject)
  {
    type metadata accessor for INSendPaymentIntentResponse();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSendPaymentIntentResponse and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriKitPaymentsIntent.simpleClassName.getter()
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  DefaultStringInterpolation.appendInterpolation(_:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IN", 2uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  lazy protocol witness table accessor for type String and conformance String();
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  return v3;
}

uint64_t SiriKitPaymentsIntent.clone()()
{
  id v1 = v0;
  objc_msgSend(v0, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  return v3;
}

_OWORD *SiriKitPaymentsIntent.value(forSlot:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v18 = a1;
  uint64_t v17 = v3;
  id v4 = v3;
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v9 + 32))(v10);
  id v11 = (id)MEMORY[0x2611B9130](v5);
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v3, sel_valueForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any((uint64_t)v13, (uint64_t)&v14);
    swift_unknownObjectRelease();
  }
  else
  {
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  return outlined init with take of Any?(&v14, a3);
}

uint64_t INSearchForAccountsIntentResponse.paymentRecord.getter()
{
  return 0;
}

uint64_t protocol witness for SiriKitPaymentsIntentResponse.paymentRecord.getter in conformance INSearchForAccountsIntentResponse()
{
  return INSearchForAccountsIntentResponse.paymentRecord.getter();
}

Swift::Void __swiftcall PersonProvidingIntent.updatePerson(with:parameterName:)(Swift::OpaquePointer with, Swift::String parameterName)
{
  Swift::String rawValue = with._rawValue;
  uint64_t countAndFlagsBits = parameterName._countAndFlagsBits;
  object = parameterName._object;
  uint64_t v215 = v2;
  uint64_t v216 = v3;
  id v217 = partial apply for implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:);
  uint64_t v218 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v222 = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  uint64_t v223 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
  unint64_t v224 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v228 = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  uint64_t v229 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
  uint64_t v230 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v234 = partial apply for implicit closure #4 in PersonProvidingIntent.updatePerson(with:parameterName:);
  uint64_t v235 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  os_log_type_t v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v286 = 0;
  uint64_t v284 = 0;
  uint64_t v285 = 0;
  uint64_t v283 = 0;
  uint64_t v239 = 0;
  uint64_t v287 = v2;
  uint64_t v243 = type metadata accessor for Logger();
  uint64_t v244 = *(void *)(v243 - 8);
  uint64_t v245 = v243 - 8;
  unint64_t v246 = (*(void *)(v244 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](rawValue);
  uint64_t v247 = (char *)v92 - v246;
  unint64_t v248 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v249 = (char *)v92 - v248;
  unint64_t v250 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  int v251 = (char *)v92 - v250;
  unint64_t v252 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v253 = (char *)v92 - v252;
  uint64_t v286 = v11;
  uint64_t v284 = v12;
  uint64_t v285 = v13;
  uint64_t v283 = v4;
  self;
  if (swift_dynamicCastObjCClass())
  {
    long long v14 = v253;
    uint64_t v15 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v14, v15, v243);
    swift_bridgeObjectRetain();
    uint64_t v204 = 7;
    uint64_t v197 = swift_allocObject();
    *(void *)(v197 + 16) = rawValue;
    swift_retain();
    uint64_t v203 = 32;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v197;
    uint64_t v205 = v16;
    *(void *)(v16 + 16) = v228;
    *(void *)(v16 + 24) = v17;
    swift_release();
    uint64_t v213 = Logger.logObject.getter();
    int v214 = static os_log_type_t.debug.getter();
    uint64_t v200 = &v260;
    uint64_t v260 = 12;
    unint64_t v198 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v199 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v201 = v261;
    uint64_t v202 = 17;
    uint64_t v207 = swift_allocObject();
    *(unsigned char *)(v207 + 16) = 32;
    uint64_t v208 = swift_allocObject();
    *(unsigned char *)(v208 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v205;
    uint64_t v206 = v18;
    *(void *)(v18 + 16) = v229;
    *(void *)(v18 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v206;
    uint64_t v210 = v20;
    *(void *)(v20 + 16) = v230;
    *(void *)(v20 + 24) = v21;
    uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v209 = _allocateUninitializedArray<A>(_:)();
    uint64_t v211 = v22;
    swift_retain();
    uint64_t v23 = v207;
    uint64_t v24 = v211;
    *uint64_t v211 = v231;
    v24[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
    swift_retain();
    uint64_t v25 = v208;
    uint64_t v26 = v211;
    v211[2] = v232;
    void v26[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
    swift_retain();
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v210;
    uint64_t v28 = v211;
    v211[4] = v233;
    uint64_t v28[5] = v27;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v213, (os_log_type_t)v214))
    {
      uint64_t v29 = v239;
      uint64_t v190 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v191 = createStorage<A>(capacity:type:)(0);
      uint64_t v192 = createStorage<A>(capacity:type:)(1);
      uint64_t v193 = &v259;
      uint64_t v259 = v190;
      uint64_t v194 = &v258;
      uint64_t v258 = v191;
      uint64_t v195 = &v257;
      uint64_t v257 = v192;
      serialize(_:at:)(2, &v259);
      serialize(_:at:)(1, v193);
      uint32_t v255 = v231;
      uint64_t v256 = v207;
      closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)v193, (uint64_t)v194, (uint64_t)v195);
      uint64_t v196 = v29;
      if (v29)
      {
        __break(1u);
      }
      else
      {
        uint32_t v255 = v232;
        uint64_t v256 = v208;
        closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v259, (uint64_t)&v258, (uint64_t)&v257);
        uint64_t v187 = 0;
        uint64_t v31 = v187;
        uint32_t v255 = v233;
        uint64_t v256 = v210;
        closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v259, (uint64_t)&v258, (uint64_t)&v257);
        uint64_t v186 = v31;
        _os_log_impl(&dword_25D85A000, v213, (os_log_type_t)v214, "#PersonProvidingIntent Updating INSendPaymentIntent with participants: %s", v190, v201);
        destroyStorage<A>(_:count:)(v191, 0, v189);
        destroyStorage<A>(_:count:)(v192, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v190, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v188 = v186;
      }
    }
    else
    {
      uint64_t v30 = v239;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v188 = v30;
    }
    uint64_t v184 = v188;

    (*(void (**)(char *, uint64_t))(v244 + 8))(v253, v243);
    id v32 = v254;
    swift_bridgeObjectRetain();
    type metadata accessor for INPerson();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Swift::String v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
    uint64_t v181 = v33._object;
    id v182 = (id)MEMORY[0x2611B9130](v33._countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v254, sel_setValue_forKeyPath_, isa, v182);

    swift_unknownObjectRelease();
    uint64_t v185 = v184;
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v34 = v251;
      uint64_t v35 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v34, v35, v243);
      swift_bridgeObjectRetain();
      uint64_t v170 = 7;
      uint64_t v163 = swift_allocObject();
      *(void *)(v163 + 16) = rawValue;
      swift_retain();
      uint64_t v169 = 32;
      uint64_t v36 = swift_allocObject();
      uint64_t v37 = v163;
      uint64_t v171 = v36;
      *(void *)(v36 + 16) = v222;
      *(void *)(v36 + 24) = v37;
      swift_release();
      uint64_t v179 = Logger.logObject.getter();
      int v180 = static os_log_type_t.debug.getter();
      uint64_t v166 = &v267;
      uint64_t v267 = 12;
      unint64_t v164 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v165 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v167 = v268;
      uint64_t v168 = 17;
      uint64_t v173 = swift_allocObject();
      *(unsigned char *)(v173 + 16) = 32;
      uint64_t v174 = swift_allocObject();
      *(unsigned char *)(v174 + 16) = 8;
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v171;
      uint64_t v172 = v38;
      *(void *)(v38 + 16) = v223;
      *(void *)(v38 + 24) = v39;
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = v172;
      uint64_t v176 = v40;
      *(void *)(v40 + 16) = v224;
      *(void *)(v40 + 24) = v41;
      uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v175 = _allocateUninitializedArray<A>(_:)();
      os_log_type_t v177 = v42;
      swift_retain();
      uint64_t v43 = v173;
      uint64_t v44 = v177;
      NSObject *v177 = v225;
      v44[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
      swift_retain();
      uint64_t v45 = v174;
      uint64_t v46 = v177;
      v177[2] = v226;
      v46[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
      swift_retain();
      uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
      uint64_t v48 = v177;
      v177[4] = v227;
      v48[5] = v47;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v179, (os_log_type_t)v180))
      {
        uint64_t v49 = v239;
        uint64_t v156 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v157 = createStorage<A>(capacity:type:)(0);
        uint64_t v158 = createStorage<A>(capacity:type:)(1);
        uint64_t v159 = &v266;
        uint64_t v266 = v156;
        id v160 = &v265;
        uint64_t v265 = v157;
        unint64_t v161 = &v264;
        uint64_t v264 = v158;
        serialize(_:at:)(2, &v266);
        serialize(_:at:)(1, v159);
        uint64_t v262 = v225;
        uint64_t v263 = v173;
        closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)v159, (uint64_t)v160, (uint64_t)v161);
        uint64_t v162 = v49;
        if (v49)
        {
          __break(1u);
        }
        else
        {
          uint64_t v262 = v226;
          uint64_t v263 = v174;
          closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)&v266, (uint64_t)&v265, (uint64_t)&v264);
          uint64_t v153 = 0;
          uint64_t v51 = v153;
          uint64_t v262 = v227;
          uint64_t v263 = v176;
          closure #1 in osLogInternal(_:log:type:)(&v262, (uint64_t)&v266, (uint64_t)&v265, (uint64_t)&v264);
          uint64_t v152 = v51;
          _os_log_impl(&dword_25D85A000, v179, (os_log_type_t)v180, "#PersonProvidingIntent Updating INRequestPaymentIntent with participants: %s", v156, v167);
          destroyStorage<A>(_:count:)(v157, 0, v155);
          destroyStorage<A>(_:count:)(v158, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v156, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v154 = v152;
        }
      }
      else
      {
        uint64_t v50 = v239;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v154 = v50;
      }
      uint64_t v151 = v154;

      (*(void (**)(char *, uint64_t))(v244 + 8))(v251, v243);
      id v52 = v254;
      swift_bridgeObjectRetain();
      type metadata accessor for INPerson();
      Class v150 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Swift::String v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1);
      uint64_t v148 = v53._object;
      id v149 = (id)MEMORY[0x2611B9130](v53._countAndFlagsBits);
      swift_bridgeObjectRelease();
      objc_msgSend(v254, sel_setValue_forKeyPath_, v150, v149);

      swift_unknownObjectRelease();
      uint64_t v185 = v151;
    }
    else
    {
      uint64_t v54 = v249;
      uint64_t v55 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v54, v55, v243);
      id v56 = v254;
      uint64_t v137 = 7;
      uint64_t v57 = (void *)swift_allocObject();
      uint64_t v58 = v216;
      id v59 = v254;
      uint64_t v138 = v57;
      v57[2] = v215;
      v57[3] = v58;
      v57[4] = v59;
      uint64_t v146 = Logger.logObject.getter();
      int v147 = static os_log_type_t.error.getter();
      uint64_t v133 = &v281;
      uint64_t v281 = 12;
      unint64_t v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v132 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v134 = v282;
      uint64_t v135 = 17;
      uint64_t v140 = swift_allocObject();
      *(unsigned char *)(v140 + 16) = 32;
      uint64_t v141 = swift_allocObject();
      *(unsigned char *)(v141 + 16) = 8;
      uint64_t v136 = 32;
      uint64_t v60 = swift_allocObject();
      uint64_t v61 = v138;
      uint64_t v139 = v60;
      *(void *)(v60 + 16) = v217;
      *(void *)(v60 + 24) = v61;
      uint64_t v62 = swift_allocObject();
      uint64_t v63 = v139;
      uint64_t v143 = v62;
      *(void *)(v62 + 16) = v218;
      *(void *)(v62 + 24) = v63;
      uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v142 = _allocateUninitializedArray<A>(_:)();
      uint64_t v144 = v64;
      swift_retain();
      uint64_t v65 = v140;
      uint64_t v66 = v144;
      *uint64_t v144 = v219;
      v66[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
      swift_retain();
      uint64_t v67 = v141;
      uint64_t v68 = v144;
      v144[2] = v220;
      v68[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
      swift_retain();
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v143;
      uint64_t v70 = v144;
      v144[4] = v221;
      v70[5] = v69;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v146, (os_log_type_t)v147))
      {
        uint64_t v71 = v239;
        id v124 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v125 = createStorage<A>(capacity:type:)(0);
        uint64_t v126 = createStorage<A>(capacity:type:)(1);
        id v127 = &v273;
        uint64_t v273 = v124;
        id v128 = &v272;
        uint64_t v272 = v125;
        id v129 = &v271;
        uint64_t v271 = v126;
        serialize(_:at:)(2, &v273);
        serialize(_:at:)(1, v127);
        uint64_t v269 = v219;
        uint64_t v270 = v140;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)v127, (uint64_t)v128, (uint64_t)v129);
        uint64_t v130 = v71;
        if (v71)
        {
          __break(1u);
        }
        else
        {
          uint64_t v269 = v220;
          uint64_t v270 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
          uint64_t v121 = 0;
          uint64_t v73 = v121;
          uint64_t v269 = v221;
          uint64_t v270 = v143;
          closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
          uint64_t v120 = v73;
          _os_log_impl(&dword_25D85A000, v146, (os_log_type_t)v147, "#PersonProvidingIntent Found unsupported intent type: %s, logging error but not throwing.", v124, v134);
          destroyStorage<A>(_:count:)(v125, 0, v123);
          destroyStorage<A>(_:count:)(v126, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v124, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v122 = v120;
        }
      }
      else
      {
        uint64_t v72 = v239;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v122 = v72;
      }
      uint64_t v119 = v122;

      (*(void (**)(char *, uint64_t))(v244 + 8))(v249, v243);
      uint64_t v185 = v119;
    }
  }
  uint64_t v74 = v247;
  uint64_t v101 = v185;
  uint64_t v75 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v74, v75, v243);
  id v76 = v254;
  uint64_t v108 = 7;
  uint64_t v77 = (void *)swift_allocObject();
  uint64_t v78 = v216;
  id v79 = v254;
  uint64_t v109 = v77;
  v77[2] = v215;
  v77[3] = v78;
  v77[4] = v79;
  uint64_t v117 = Logger.logObject.getter();
  int v118 = static os_log_type_t.debug.getter();
  uint64_t v104 = &v279;
  uint64_t v279 = 12;
  unint64_t v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v105 = v280;
  uint64_t v106 = 17;
  uint64_t v111 = swift_allocObject();
  *(unsigned char *)(v111 + 16) = 32;
  uint64_t v112 = swift_allocObject();
  *(unsigned char *)(v112 + 16) = 8;
  uint64_t v107 = 32;
  uint64_t v80 = swift_allocObject();
  uint64_t v81 = v109;
  uint64_t v110 = v80;
  *(void *)(v80 + 16) = v234;
  *(void *)(v80 + 24) = v81;
  uint64_t v82 = swift_allocObject();
  uint64_t v83 = v110;
  uint64_t v114 = v82;
  *(void *)(v82 + 16) = v235;
  *(void *)(v82 + 24) = v83;
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v113 = _allocateUninitializedArray<A>(_:)();
  id v115 = v84;
  swift_retain();
  uint64_t v85 = v111;
  uint64_t v86 = v115;
  *id v115 = v236;
  v86[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v85;
  swift_retain();
  uint64_t v87 = v112;
  os_log_type_t v88 = v115;
  v115[2] = v237;
  v88[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87;
  swift_retain();
  uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v114;
  uint64_t v90 = v115;
  v115[4] = v238;
  v90[5] = v89;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    uint64_t v91 = v101;
    unint64_t v94 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v95 = createStorage<A>(capacity:type:)(0);
    uint64_t v96 = createStorage<A>(capacity:type:)(1);
    uint64_t v97 = &v278;
    uint64_t v278 = v94;
    uint64_t v98 = &v277;
    uint64_t v277 = v95;
    unint64_t v99 = &v276;
    uint64_t v276 = v96;
    serialize(_:at:)(2, &v278);
    serialize(_:at:)(1, v97);
    uint32_t v274 = v236;
    uint64_t v275 = v111;
    closure #1 in osLogInternal(_:log:type:)(&v274, (uint64_t)v97, (uint64_t)v98, (uint64_t)v99);
    uint64_t v100 = v91;
    if (v91)
    {
      __break(1u);
    }
    else
    {
      uint32_t v274 = v237;
      uint64_t v275 = v112;
      closure #1 in osLogInternal(_:log:type:)(&v274, (uint64_t)&v278, (uint64_t)&v277, (uint64_t)&v276);
      v92[1] = 0;
      uint32_t v274 = v238;
      uint64_t v275 = v114;
      closure #1 in osLogInternal(_:log:type:)(&v274, (uint64_t)&v278, (uint64_t)&v277, (uint64_t)&v276);
      _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v118, "#PersonProvidingIntent Updated intent: %s", v94, v105);
      destroyStorage<A>(_:count:)(v95, 0, v93);
      destroyStorage<A>(_:count:)(v96, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v94, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v244 + 8))(v247, v243);
}

uint64_t implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_typeName);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return 0;
}

uint64_t sub_25D9B19C8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)()
{
  return implicit closure #3 in PersonProvidingIntent.updatePerson(with:parameterName:)(*(void **)(v0 + 32));
}

uint64_t INSendPaymentIntent.catFamily.getter()
{
  uint64_t v3 = 0;
  void v2[2] = 0;
  v2[0] = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  v2[1] = (char *)v2 - v2[0];
  uint64_t v3 = v0;
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

id INSendPaymentIntent.person.getter()
{
  id v1 = objc_msgSend(v0, sel_payee);

  return v1;
}

uint64_t INSendPaymentIntent.personKeyPath.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1)._countAndFlagsBits;
}

void INSendPaymentIntent.personSlot.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for SendPaymentSlots;
  *(void *)(a1 + 32) = &protocol witness table for SendPaymentSlots;
  *(unsigned char *)a1 = 0;
}

id protocol witness for PersonProvidingIntent.person.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.person.getter();
}

uint64_t protocol witness for PersonProvidingIntent.personKeyPath.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.personKeyPath.getter();
}

void protocol witness for PersonProvidingIntent.personSlot.getter in conformance INSendPaymentIntent(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for PersonProvidingIntent.catFamily.getter in conformance INSendPaymentIntent()
{
  return INSendPaymentIntent.catFamily.getter();
}

uint64_t protocol witness for ReferenceResolving.updateIntent(with:contactResolver:) in conformance INSendPaymentIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ReferenceResolving.updateIntent(with:contactResolver:)(a1, a2, a3, a4, a5);
}

uint64_t ReferenceResolving.updateIntent(with:contactResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v53)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  unint64_t v64 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v65 = a4;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[ContactQuery], [INPerson]>);
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v44 = v46 - 8;
  unint64_t v37 = (*(void *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v16 - v37;
  uint64_t v51 = type metadata accessor for ContactQuery();
  uint64_t v48 = *(void *)(v51 - 8);
  uint64_t v49 = v51 - 8;
  unint64_t v39 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v40);
  uint64_t v50 = (char *)&v16 - v39;
  unint64_t v64 = (char *)&v16 - v39;
  uint64_t v62 = v5;
  uint64_t v63 = v6;
  uint64_t v61 = v7;
  uint64_t v60 = v8;
  ContactQuery.init()();
  swift_bridgeObjectRetain();
  ContactQuery.id.setter();
  static Transformer<>.transformer(contactResolver:)(v42);
  Swift::String v53 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  uint64_t v47 = v9;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v46);
  uint64_t v52 = _allocateUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v10, v50, v51);
  uint64_t v11 = v52;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v54 = v11;
  id v59 = v11;
  v53(&v58, &v59);
  uint64_t v55 = 0;
  uint64_t v32 = v58;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v30 = 0;
  unint64_t v31 = type metadata accessor for INPerson();
  Array.subscript.getter();
  id v33 = v56;
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v33, sel_siriMatches);
  if (v34)
  {
    id v29 = v34;
    id v25 = v34;
    uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v24 = v27;

  uint64_t v28 = v24;
  uint64_t v23 = v24;
  uint64_t v57 = v24;
  id v12 = v38;
  swift_bridgeObjectRetain();
  if (v23)
  {
    uint64_t v22 = v23;
    uint64_t v19 = v23;
    type metadata accessor for INPerson();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v21 = isa;
  }
  else
  {
    Class v21 = 0;
  }
  Class v18 = v21;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v36 + 8) + 24))(v35);
  uint64_t v16 = v14;
  id v17 = (id)MEMORY[0x2611B9130](v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_setValue_forKeyPath_, v18, v17);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v51);
}

uint64_t INRequestPaymentIntent.catFamily.getter()
{
  uint64_t v3 = 0;
  void v2[2] = 0;
  v2[0] = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  v2[1] = (char *)v2 - v2[0];
  uint64_t v3 = v0;
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

id INRequestPaymentIntent.person.getter()
{
  id v1 = objc_msgSend(v0, sel_payer);

  return v1;
}

uint64_t INRequestPaymentIntent.personKeyPath.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
}

void INRequestPaymentIntent.personSlot.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for RequestPaymentSlots;
  *(void *)(a1 + 32) = &protocol witness table for RequestPaymentSlots;
  *(unsigned char *)a1 = 0;
}

id protocol witness for PersonProvidingIntent.person.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.person.getter();
}

uint64_t protocol witness for PersonProvidingIntent.personKeyPath.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.personKeyPath.getter();
}

void protocol witness for PersonProvidingIntent.personSlot.getter in conformance INRequestPaymentIntent(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for PersonProvidingIntent.catFamily.getter in conformance INRequestPaymentIntent()
{
  return INRequestPaymentIntent.catFamily.getter();
}

uint64_t ReferenceResolving.runReferenceResolution(_:_:hasReferenceNode:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a1;
  uint64_t v58 = a2;
  int v57 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v55 = 0;
  uint64_t v48 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v79 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  char v76 = 0;
  uint64_t v75 = 0;
  uint64_t v49 = 0;
  uint64_t v80 = a4;
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = v50 - 8;
  unint64_t v53 = (*(void *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v50);
  uint64_t v54 = (char *)v20 - v53;
  unint64_t v56 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v55);
  uint64_t v66 = (uint64_t)v20 - v56;
  uint64_t v68 = type metadata accessor for RREntity();
  uint64_t v64 = *(void *)(v68 - 8);
  uint64_t v65 = v68 - 8;
  unint64_t v60 = (*(void *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (void *)MEMORY[0x270FA5388](v59);
  uint64_t v61 = (uint64_t)v20 - v60;
  id v79 = (char *)v20 - v60;
  uint64_t v78 = v6;
  uint64_t v77 = v7;
  unsigned int v67 = 1;
  char v76 = v8 & 1;
  uint64_t v75 = v5;
  uint64_t v63 = v6[3];
  uint64_t v62 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v63);
  (*(void (**)(uint64_t))(v62 + 16))(v63);
  if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v64 + 48))(v66, v67, v68) == 1) {
    return outlined destroy of RREntity?(v66);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v61, v66, v68);
  if ((static RRUtil.shouldUseRREntity(_:rrEntity:)(v57 & 1, v61) & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v61, v68);
  }
  uint64_t v41 = RREntity.appBundleId.getter();
  uint64_t v44 = v10;
  uint64_t v11 = AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  uint64_t v42 = *(void *)v11;
  uint64_t v43 = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  int v45 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v61, v68);
  }
  id v12 = v54;
  uint64_t v13 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v12, v13, v50);
  unint64_t v39 = Logger.logObject.getter();
  int v38 = static os_log_type_t.debug.getter();
  uint64_t v36 = &v73;
  uint64_t v73 = 2;
  unint64_t v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v37 = v74;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v40 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v39, (os_log_type_t)v38))
  {
    uint64_t v14 = v49;
    uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v23 = 0;
    uint64_t v25 = createStorage<A>(capacity:type:)(0);
    uint64_t v26 = createStorage<A>(capacity:type:)(v23);
    uint64_t v30 = &v72;
    uint64_t v72 = v24;
    unint64_t v31 = &v71;
    uint64_t v71 = v25;
    uint64_t v28 = &v70;
    uint64_t v70 = v26;
    unsigned int v27 = 0;
    serialize(_:at:)(0, &v72);
    serialize(_:at:)(v27, v30);
    uint64_t v69 = v40;
    id v29 = v20;
    MEMORY[0x270FA5388](v20);
    uint64_t v15 = v31;
    uint64_t v16 = &v20[-6];
    uint64_t v32 = &v20[-6];
    v16[2] = v30;
    v16[3] = v15;
    void v16[4] = v17;
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v14)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v39, (os_log_type_t)v38, "#ReferenceResolution Found common_Person entity, resolving to intent", v24, v37);
      uint64_t v21 = 0;
      destroyStorage<A>(_:count:)(v25, 0, v22);
      destroyStorage<A>(_:count:)(v26, v21, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v50);
  uint64_t v18 = RREntity.id.getter();
  v20[1] = v19;
  (*(void (**)(uint64_t))(v47 + 16))(v18);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v61, v68);
}

uint64_t static RRUtil.shouldUseRREntity(_:rrEntity:)(int a1, uint64_t a2)
{
  int v12 = a1;
  uint64_t v6 = a2;
  char v14 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = type metadata accessor for RREntity();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v8 = v7 - 8;
  unint64_t v9 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v4 - v9;
  char v14 = v12 & 1;
  uint64_t v13 = v2;
  (*(void (**)(void))(v10 + 16))();
  if (v12) {
    int v5 = 1;
  }
  else {
    int v5 = RREntity.isConversational.getter();
  }
  int v4 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v7);
  return v4 & 1;
}

uint64_t sub_25D9B2C7C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2CA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2CD4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2D14()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2D54()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in PersonProvidingIntent.updatePerson(with:parameterName:)()
{
  return implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 32));
}

uint64_t sub_25D9B2DB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2DE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2E10()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2E50()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2E90()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2ED0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2F10()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2F3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2F68()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2FA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B2FE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B3028()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B3068()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B3094()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B30C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B3100()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of RREntity?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

ValueMetadata *type metadata accessor for RRUtil()
{
  return &type metadata for RRUtil;
}

uint64_t static RREntity.makeEntities(for:)(void *a1)
{
  uint64_t v17 = a1;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  unint64_t v10 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v16 = (uint64_t)&v7 - v10;
  uint64_t v11 = type metadata accessor for RREntity();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v11 - 8;
  unint64_t v14 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v17);
  uint64_t v15 = (char *)&v7 - v14;
  uint64_t v20 = (char *)&v7 - v14;
  uint64_t v19 = v2;
  id v3 = v2;
  RREntity.init(from:)(v17, v16);
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11) == 1)
  {
    outlined destroy of RREntity?(v16);
    return _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v15, v16, v11);
    uint64_t v7 = _allocateUninitializedArray<A>(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v4, v15, v11);
    uint64_t v5 = v7;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v8 = v5;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return v8;
  }
}

{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;

  uint64_t v17 = a1;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  unint64_t v10 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v16 = (uint64_t)&v7 - v10;
  uint64_t v11 = type metadata accessor for RREntity();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v11 - 8;
  unint64_t v14 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v17);
  uint64_t v15 = (char *)&v7 - v14;
  uint64_t v20 = (char *)&v7 - v14;
  uint64_t v19 = v2;
  id v3 = v2;
  RREntity.init(from:)(v17, v16);
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11) == 1)
  {
    outlined destroy of RREntity?(v16);
    return _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v15, v16, v11);
    uint64_t v7 = _allocateUninitializedArray<A>(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v4, v15, v11);
    uint64_t v5 = v7;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v8 = v5;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return v8;
  }
}

uint64_t static RREntity.makeDisambiguationGroup(with:)(uint64_t a1)
{
  uint64_t v100 = a1;
  uint64_t v98 = 0;
  uint64_t v69 = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  uint64_t v70 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3;
  uint64_t v71 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v125 = 0;
  uint64_t v124 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v121 = 0;
  unint64_t v102 = v120;
  memset(v120, 0, sizeof(v120));
  unint64_t v103 = 0;
  uint64_t v106 = 0;
  id v105 = 0;
  uint64_t v75 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = v75 - 8;
  unint64_t v78 = (*(void *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  id v79 = (char *)v30 - v78;
  uint64_t v1 = type metadata accessor for GroupIdentifier();
  unint64_t v80 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v81 = (uint64_t)v30 - v80;
  unint64_t v82 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v98);
  uint64_t v83 = (uint64_t)v30 - v82;
  uint64_t v97 = type metadata accessor for RREntity();
  uint64_t v84 = *(void *)(v97 - 8);
  uint64_t v85 = v97 - 8;
  unint64_t v86 = (*(void *)(v84 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v98);
  uint64_t v87 = (char *)v30 - v86;
  unint64_t v88 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v89 = (char *)v30 - v88;
  uint64_t v125 = (char *)v30 - v88;
  uint64_t v95 = type metadata accessor for UUID();
  uint64_t v91 = *(void *)(v95 - 8);
  uint64_t v92 = v95 - 8;
  unint64_t v90 = (*(void *)(v91 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v100);
  uint64_t v93 = (char *)v30 - v90;
  uint64_t v124 = v4;
  UUID.init()();
  uint64_t v94 = UUID.uuidString.getter();
  uint64_t v96 = v5;
  uint64_t v122 = v94;
  uint64_t v123 = v5;
  (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v95);
  uint64_t v99 = swift_allocObject();
  uint64_t v121 = v99 + 16;
  uint64_t v6 = _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v100;
  *(void *)(v99 + 16) = v6;
  uint64_t v118 = v7;
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  unint64_t v8 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  MEMORY[0x2611B9280](&v119, v101, v8);
  uint64_t v117 = v119;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[INPerson]>);
  EnumeratedSequence.makeIterator()();
  for (uint64_t i = v103; ; uint64_t i = v58)
  {
    uint64_t v66 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[INPerson]>.Iterator);
    EnumeratedSequence.Iterator.next()();
    uint64_t v67 = v115;
    id v68 = v116;
    if (!v116) {
      break;
    }
    uint64_t v64 = v67;
    id v65 = v68;
    unint64_t v9 = v66;
    uint64_t v61 = v68;
    uint64_t v60 = v67;
    uint64_t v106 = v67;
    id v105 = v68;
    id v10 = v68;
    swift_bridgeObjectRetain();
    GroupIdentifier.init(id:seq:)();
    uint64_t v11 = default argument 2 of RREntity.init(from:groupId:appBundleId:)();
    RREntity.init(from:groupId:appBundleId:)(v61, v81, v11, v12, v83);
    uint64_t v62 = v9;
    id v63 = v9;
    if (v9)
    {
      v30[0] = 0;

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v83, 1, 1, v97);
      uint64_t v59 = (void *)v30[0];
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v83, 0, 1, v97);
      uint64_t v59 = v62;
    }
    uint64_t v58 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v83, 1, v97) == 1)
    {
      outlined destroy of RREntity?(v83);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v89, v83, v97);
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v87, v89, v97);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v97);
    }
  }
  uint64_t v13 = v79;
  outlined destroy of [SFCardSection]();
  uint64_t v14 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v13, v14, v75);
  swift_retain();
  swift_retain();
  uint64_t v46 = 32;
  uint64_t v47 = 7;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v99;
  uint64_t v48 = v15;
  *(void *)(v15 + 16) = v69;
  *(void *)(v15 + 24) = v16;
  swift_release();
  unint64_t v56 = Logger.logObject.getter();
  int v57 = static os_log_type_t.debug.getter();
  uint64_t v43 = &v113;
  uint64_t v113 = 12;
  unint64_t v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v44 = v114;
  uint64_t v45 = 17;
  uint64_t v50 = swift_allocObject();
  *(unsigned char *)(v50 + 16) = 32;
  uint64_t v51 = swift_allocObject();
  *(unsigned char *)(v51 + 16) = 8;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v48;
  uint64_t v49 = v17;
  *(void *)(v17 + 16) = v70;
  *(void *)(v17 + 24) = v18;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v49;
  uint64_t v53 = v19;
  *(void *)(v19 + 16) = v71;
  *(void *)(v19 + 24) = v20;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v52 = _allocateUninitializedArray<A>(_:)();
  uint64_t v54 = v21;
  swift_retain();
  uint64_t v22 = v50;
  uint64_t v23 = v54;
  *uint64_t v54 = v72;
  v23[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
  swift_retain();
  uint64_t v24 = v51;
  uint64_t v25 = v54;
  v54[2] = v73;
  v25[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  swift_retain();
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v53;
  unsigned int v27 = v54;
  v54[4] = v74;
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v56, (os_log_type_t)v57))
  {
    uint64_t v28 = v66;
    unint64_t v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v35 = createStorage<A>(capacity:type:)(0);
    uint64_t v36 = createStorage<A>(capacity:type:)(1);
    uint32_t v37 = &v111;
    uint64_t v111 = v34;
    int v38 = &v110;
    uint64_t v110 = v35;
    unint64_t v39 = &v109;
    uint64_t v109 = v36;
    serialize(_:at:)(2, &v111);
    serialize(_:at:)(1, v37);
    uint64_t v107 = v72;
    uint64_t v108 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)v37, (uint64_t)v38, (uint64_t)v39);
    uint64_t v40 = v28;
    if (v28)
    {
      __break(1u);
    }
    else
    {
      uint64_t v107 = v73;
      uint64_t v108 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v111, (uint64_t)&v110, (uint64_t)&v109);
      uint64_t v32 = 0;
      uint64_t v107 = v74;
      uint64_t v108 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v107, (uint64_t)&v111, (uint64_t)&v110, (uint64_t)&v109);
      _os_log_impl(&dword_25D85A000, v56, (os_log_type_t)v57, "#RREntity.makeDisambiguationGroup returning entities: %s", v34, v44);
      destroyStorage<A>(_:count:)(v35, 0, v33);
      destroyStorage<A>(_:count:)(v36, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v34, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v76 + 8))(v79, v75);
  v30[1] = &v112;
  swift_beginAccess();
  uint64_t v31 = *(void *)(v99 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t static RREntity.makeDisambiguationGroup(with:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = a1;
  uint64_t v79 = a2;
  uint64_t v73 = 0;
  uint64_t v59 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v117 = 0;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  uint64_t v114 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v111 = 0;
  uint64_t v92 = v110;
  memset(v110, 0, sizeof(v110));
  uint64_t v104 = 0;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  uint64_t v93 = 0;
  uint64_t v95 = 0;
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = v60 - 8;
  unint64_t v63 = (*(void *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v60);
  uint64_t v64 = (char *)&v19 - v63;
  unint64_t v65 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v66 = (char *)&v19 - v65;
  uint64_t v89 = type metadata accessor for RREntity();
  uint64_t v67 = *(void *)(v89 - 8);
  uint64_t v68 = v89 - 8;
  unint64_t v69 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v73);
  uint64_t v70 = (char *)&v19 - v69;
  unint64_t v71 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v72 = (char *)&v19 - v71;
  uint64_t v117 = (char *)&v19 - v71;
  uint64_t v74 = type metadata accessor for GroupIdentifier();
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = v74 - 8;
  unint64_t v77 = (*(void *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  unint64_t v78 = (char *)&v19 - v77;
  uint64_t v116 = (char *)&v19 - v77;
  uint64_t v85 = type metadata accessor for UUID();
  uint64_t v81 = *(void *)(v85 - 8);
  uint64_t v82 = v85 - 8;
  unint64_t v80 = (*(void *)(v81 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v90);
  uint64_t v83 = (char *)&v19 - v80;
  uint64_t v115 = v4;
  uint64_t v114 = v5;
  UUID.init()();
  uint64_t v84 = UUID.uuidString.getter();
  uint64_t v86 = v6;
  uint64_t v112 = v84;
  uint64_t v113 = v6;
  uint64_t v87 = *(void (**)(char *, uint64_t))(v81 + 8);
  uint64_t v88 = v81 + 8;
  v87(v83, v85);
  uint64_t v111 = Array.init()();
  uint64_t v108 = v90;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  unint64_t v7 = lazy protocol witness table accessor for type [App] and conformance [A]();
  MEMORY[0x2611B9280](&v109, v91, v7);
  uint64_t v107 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[App]>);
  EnumeratedSequence.makeIterator()();
  uint64_t v94 = v93;
  while (1)
  {
    uint64_t v56 = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[App]>.Iterator);
    EnumeratedSequence.Iterator.next()();
    uint64_t v57 = v105;
    uint64_t v58 = v106;
    if (!v106) {
      break;
    }
    uint64_t v54 = v57;
    uint64_t v55 = v58;
    uint64_t v50 = v58;
    uint64_t v51 = v57;
    uint64_t v104 = v57;
    uint64_t v103 = v58;
    uint64_t v52 = App.toUsoEntityBuilder(locale:)(v79);
    uint64_t v102 = v52;
    uint64_t v53 = MEMORY[0x2611B8260]();
    if (v53)
    {
      uint64_t v49 = v53;
      uint64_t v48 = v53;
      uint64_t v95 = v53;
      swift_bridgeObjectRetain();
      GroupIdentifier.init(id:seq:)();
      UUID.init()();
      uint64_t v44 = UUID.uuidString.getter();
      uint64_t v45 = v8;
      v87(v83, v85);
      unint64_t v9 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
      uint64_t v46 = *(void *)v9;
      uint64_t v47 = *((void *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_retain();
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v66, v78, v74);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v66, 0, 1, v74);
      unint64_t v17 = 0xF000000000000000;
      uint64_t v18 = v66;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v70, v72, v89);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v72, v89);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v74);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v94 = v56;
    }
    else
    {
      id v10 = v64;
      uint64_t v11 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v10, v11, v60);
      unint64_t v42 = Logger.logObject.getter();
      int v41 = static os_log_type_t.error.getter();
      unint64_t v39 = &v100;
      uint64_t v100 = 2;
      unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v40 = v101;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v43 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v42, (os_log_type_t)v41))
      {
        uint64_t v12 = v56;
        uint64_t v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v25 = 0;
        uint64_t v27 = createStorage<A>(capacity:type:)(0);
        uint64_t v28 = createStorage<A>(capacity:type:)(v25);
        uint64_t v32 = (uint64_t *)&v99;
        uint64_t v99 = v26;
        uint64_t v33 = &v98;
        uint64_t v98 = v27;
        uint64_t v30 = &v97;
        uint64_t v97 = v28;
        unsigned int v29 = 0;
        serialize(_:at:)(0, &v99);
        serialize(_:at:)(v29, (unsigned char **)v32);
        uint64_t v96 = v43;
        uint64_t v31 = &v19;
        MEMORY[0x270FA5388](&v19);
        uint64_t v13 = v33;
        uint64_t v14 = &v19 - 6;
        unint64_t v34 = &v19 - 6;
        void v14[2] = v32;
        v14[3] = v13;
        v14[4] = v15;
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        uint64_t v36 = v12;
        if (v12)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v42, (os_log_type_t)v41, "#RREntity.makeDisambiguationGroup apps failed to convert UsoEntityBuilder to UsoEntity", v26, v40);
          uint64_t v22 = 0;
          destroyStorage<A>(_:count:)(v27, 0, v24);
          destroyStorage<A>(_:count:)(v28, v22, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v26, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
          uint64_t v23 = v36;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = v56;
      }
      uint64_t v21 = v23;

      (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v60);
      swift_release();
      swift_release();
      uint64_t v94 = v21;
    }
  }
  outlined destroy of [SFCardSection]();
  uint64_t v19 = &v111;
  uint64_t v20 = v111;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t RREntity.isConversational.getter()
{
  uint64_t v17 = 0;
  uint64_t v6 = 0;
  uint64_t v12 = type metadata accessor for RRMetadata();
  uint64_t v10 = *(void *)(v12 - 8);
  uint64_t v11 = v12 - 8;
  unint64_t v5 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = (char *)&v4 - v5;
  uint64_t v17 = v0;
  uint64_t v1 = RREntity.metadata.getter();
  uint64_t v14 = &v16;
  uint64_t v16 = v1;
  unsigned int v7 = *MEMORY[0x263F74248];
  uint64_t v2 = type metadata accessor for RRDataSourceMetadataValue();
  (*(void (**)(char *, void))(*(void *)(v2 - 8) + 104))(v13, v7);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x263F74100], v12);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRMetadata]);
  unint64_t v9 = lazy protocol witness table accessor for type [RRMetadata] and conformance [A]();
  lazy protocol witness table accessor for type RRMetadata and conformance RRMetadata();
  int v15 = Sequence<>.contains(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v12);
  outlined destroy of [SFCardSection]();
  return v15 & 1;
}

void RREntity.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  unint64_t v65 = a1;
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  id v73 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  unint64_t v45 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v46 = (char *)v28 - v45;
  uint64_t v63 = 0;
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v59 - 8);
  uint64_t v56 = v59 - 8;
  unint64_t v47 = (*(void *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v63);
  uint64_t v57 = (char *)v28 - v47;
  uint64_t v48 = type metadata accessor for RREntity();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v48 - 8;
  unint64_t v51 = (*(void *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v65);
  uint64_t v52 = (char *)v28 - v51;
  unint64_t v53 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v54 = (char *)v28 - v53;
  uint64_t v75 = (char *)v28 - v53;
  uint64_t v74 = v5;
  UUID.init()();
  uint64_t v58 = UUID.uuidString.getter();
  uint64_t v60 = v6;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
  unsigned int v7 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
  uint64_t v61 = *(void *)v7;
  uint64_t v62 = *((void *)v7 + 1);
  swift_bridgeObjectRetain();
  type metadata accessor for UsoEntity();
  uint64_t v8 = v64;
  uint64_t v9 = static UsoEntity.from(_:)(v65);
  uint64_t v66 = v8;
  uint64_t v67 = v9;
  uint64_t v68 = v8;
  if (v8)
  {
    id v40 = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v11 = v40;
    id v73 = v40;
    Builtin::Word v30 = 0;
    v28[6] = 1;
    uint64_t v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[3] = &v71;
    uint64_t v71 = v12;
    uint64_t v72 = v13;
    unsigned int v29 = "";
    int v31 = 1;
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, 1);
    v28[1] = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentAccount();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[2] = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v28[5] = v71;
    v28[4] = v72;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v36 = String.init(stringInterpolation:)();
    uint64_t v37 = v16;
    uint64_t v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v33 = &v69;
    uint64_t v69 = v17;
    uint64_t v70 = v18;
    Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[7] = v19._object;
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity_common_PaymentAccount();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    object = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v35 = v69;
    uint64_t v34 = v70;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v39 = String.init(stringInterpolation:)();
    uint64_t v38 = v21;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v22 = swift_allocError();
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v22;
    uint64_t v26 = v39;
    uint64_t v41 = v25;
    *(void *)uint64_t v27 = v36;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v26;
    *(void *)(v27 + 24) = v24;
    *(void *)(v27 + 32) = 0;
    *(void *)(v27 + 40) = 0;
    *(unsigned char *)(v27 + 48) = 5;
    swift_willThrow();
  }
  else
  {
    uint64_t v42 = v67;
    uint64_t v43 = 0;
    uint64_t v10 = type metadata accessor for GroupIdentifier();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 56))(v46, 1);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v54, v52, v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v44, v54, v48);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v54, v48);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void v28[8];
  char *v29;
  Builtin::Word v30;
  int v31;
  void *object;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char *v75;

  uint64_t v44 = a2;
  unint64_t v65 = a1;
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  id v73 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  unint64_t v45 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v46 = (char *)v28 - v45;
  uint64_t v63 = 0;
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v59 - 8);
  uint64_t v56 = v59 - 8;
  unint64_t v47 = (*(void *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v63);
  uint64_t v57 = (char *)v28 - v47;
  uint64_t v48 = type metadata accessor for RREntity();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v48 - 8;
  unint64_t v51 = (*(void *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v65);
  uint64_t v52 = (char *)v28 - v51;
  unint64_t v53 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v54 = (char *)v28 - v53;
  uint64_t v75 = (char *)v28 - v53;
  uint64_t v74 = v5;
  UUID.init()();
  uint64_t v58 = UUID.uuidString.getter();
  uint64_t v60 = v6;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
  unsigned int v7 = AppUtil.usoAppBundleId.unsafeMutableAddressor();
  uint64_t v61 = *(void *)v7;
  uint64_t v62 = *((void *)v7 + 1);
  swift_bridgeObjectRetain();
  type metadata accessor for UsoEntity();
  uint64_t v8 = v64;
  uint64_t v9 = static UsoEntity.from(_:)(v65);
  uint64_t v66 = v8;
  uint64_t v67 = v9;
  uint64_t v68 = v8;
  if (v8)
  {
    id v40 = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v11 = v40;
    id v73 = v40;
    Builtin::Word v30 = 0;
    v28[6] = 1;
    uint64_t v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[3] = &v71;
    uint64_t v71 = v12;
    uint64_t v72 = v13;
    unsigned int v29 = "";
    int v31 = 1;
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, 1);
    v28[1] = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INPaymentRecord();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[2] = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v28[5] = v71;
    v28[4] = v72;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v36 = String.init(stringInterpolation:)();
    uint64_t v37 = v16;
    uint64_t v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v33 = &v69;
    uint64_t v69 = v17;
    uint64_t v70 = v18;
    Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    v28[7] = v19._object;
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity_common_Payment();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, v31 & 1);
    object = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v35 = v69;
    uint64_t v34 = v70;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v39 = String.init(stringInterpolation:)();
    uint64_t v38 = v21;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v22 = swift_allocError();
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v22;
    uint64_t v26 = v39;
    uint64_t v41 = v25;
    *(void *)uint64_t v27 = v36;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v26;
    *(void *)(v27 + 24) = v24;
    *(void *)(v27 + 32) = 0;
    *(void *)(v27 + 40) = 0;
    *(unsigned char *)(v27 + 48) = 5;
    swift_willThrow();
  }
  else
  {
    uint64_t v42 = v67;
    uint64_t v43 = 0;
    uint64_t v10 = type metadata accessor for GroupIdentifier();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 56))(v46, 1);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v54, v52, v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v44, v54, v48);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v54, v48);
  }
}

uint64_t sub_25D9B61FC()
{
  return swift_deallocObject();
}

uint64_t default argument 2 of RREntity.init(from:groupId:appBundleId:)()
{
  uint64_t v1 = *(void *)AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

void RREntity.init(from:groupId:appBundleId:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v77)(uint64_t *__return_ptr, id *);
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char *v91;

  uint64_t v54 = a5;
  id v75 = a1;
  uint64_t v59 = a2;
  uint64_t v58 = a3;
  uint64_t v67 = a4;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v84 = 0;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  unint64_t v55 = (*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)v35 - v55;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<INPerson, UsoEntity>);
  uint64_t v70 = *(void *)(v73 - 8);
  uint64_t v71 = v73 - 8;
  unint64_t v57 = (*(void *)(v70 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v72 = (char *)v35 - v57;
  uint64_t v60 = type metadata accessor for RREntity();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = v60 - 8;
  unint64_t v63 = (*(void *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v60);
  uint64_t v64 = (char *)v35 - v63;
  unint64_t v65 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v35 - v63);
  uint64_t v66 = (char *)v35 - v65;
  uint64_t v91 = (char *)v35 - v65;
  uint64_t v90 = a1;
  uint64_t v89 = v8;
  uint64_t v87 = v9;
  uint64_t v88 = v10;
  uint64_t v11 = INPerson.uniqueContactIdentifier.getter();
  uint64_t v12 = v72;
  uint64_t v68 = v11;
  uint64_t v69 = v13;
  swift_bridgeObjectRetain();
  uint64_t v14 = Transformer<>.transformer.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v12, v14, v73);
  unint64_t v77 = (void (*)(uint64_t *__return_ptr, id *))Transformer.transform.getter();
  uint64_t v74 = v15;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v73);
  uint64_t v16 = v76;
  uint64_t v86 = v75;
  v77(&v85, &v86);
  unint64_t v78 = v16;
  uint64_t v79 = v16;
  if (v16)
  {
    id v46 = v79;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v17 = v46;
    uint64_t v84 = v46;
    Builtin::Word v47 = 0;
    v35[5] = 1;
    uint64_t v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v35[2] = &v82;
    uint64_t v82 = v18;
    uint64_t v83 = v19;
    uint64_t v36 = "";
    int v37 = 1;
    Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v47, 1);
    v35[0] = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    type metadata accessor for INPerson();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    v35[1] = v21._object;
    DefaultStringInterpolation.appendLiteral(_:)(v21);
    swift_bridgeObjectRelease();
    v35[4] = v82;
    v35[3] = v83;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v42 = String.init(stringInterpolation:)();
    uint64_t v43 = v22;
    uint64_t v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v39 = &v80;
    unint64_t v80 = v23;
    uint64_t v81 = v24;
    Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    v35[6] = v25._object;
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    type metadata accessor for UsoEntity();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v36, v47, v37 & 1);
    object = v26._object;
    DefaultStringInterpolation.appendLiteral(_:)(v26);
    swift_bridgeObjectRelease();
    uint64_t v41 = v80;
    uint64_t v40 = v81;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v45 = String.init(stringInterpolation:)();
    uint64_t v44 = v27;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint64_t v28 = swift_allocError();
    uint64_t v29 = v43;
    uint64_t v30 = v44;
    uint64_t v31 = v28;
    uint64_t v32 = v45;
    uint64_t v48 = v31;
    *(void *)uint64_t v33 = v42;
    *(void *)(v33 + 8) = v29;
    *(void *)(v33 + 16) = v32;
    *(void *)(v33 + 24) = v30;
    *(void *)(v33 + 32) = 0;
    *(void *)(v33 + 40) = 0;
    *(unsigned char *)(v33 + 48) = 5;
    swift_willThrow();

    swift_bridgeObjectRelease();
    uint64_t v34 = type metadata accessor for GroupIdentifier();
    (*(void (**)(uint64_t))(*(void *)(v34 - 8) + 8))(v59);
  }
  else
  {
    uint64_t v49 = v85;
    swift_release();
    uint64_t v50 = 0;
    uint64_t v53 = type metadata accessor for GroupIdentifier();
    uint64_t v51 = *(void *)(v53 - 8);
    uint64_t v52 = v53 - 8;
    (*(void (**)(char *, uint64_t))(v51 + 16))(v56, v59);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v56, 0, 1, v53);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v66, v64, v60);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v54, v66, v60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v53);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v60);
  }
}

uint64_t sub_25D9B6ACC()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
  unint64_t v1 = lazy protocol witness table accessor for type [RREntity] and conformance [A]();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [RREntity] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [RREntity] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D9B6BF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B6C1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B6C48()
{
  return swift_deallocObject();
}

uint64_t sub_25D9B6C88()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [RRMetadata] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [RRMetadata] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RRMetadata] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RRMetadata]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [RRMetadata] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RRMetadata and conformance RRMetadata()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata;
  if (!lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata)
  {
    type metadata accessor for RRMetadata();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RRMetadata and conformance RRMetadata);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for INPaymentRecord()
{
  uint64_t v2 = lazy cache variable for type metadata for INPaymentRecord;
  if (!lazy cache variable for type metadata for INPaymentRecord)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPaymentRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v39);
  uint64_t v33 = (char *)v26 - v32;
  unint64_t v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)v26 - v34;
  uint64_t v51 = v7;
  uint64_t v50 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  uint64_t v47 = v4;
  unsigned int v40 = 1;
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v37 = _allocateUninitializedArray<A>(_:)();
  uint64_t v38 = v11;
  Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v40 & 1);
  uint64_t v13 = v39;
  uint64_t v14 = v41;
  *uint64_t v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  uint64_t v42 = type metadata accessor for SpeakableString();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  uint64_t v45 = *(unsigned int (**)(char *, void))(v43 + 48);
  uint64_t v46 = v43 + 48;
  if (v45(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    Swift::String v25 = v38;
    v38[1]._uint64_t countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._uint64_t countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    uint64_t v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  uint64_t v27 = v38 + 4;
  unsigned int v28 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  uint64_t v18 = v29;
  uint64_t v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, void, uint64_t))v45)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    uint64_t v24 = v38;
    v38[4]._uint64_t countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._uint64_t countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    Swift::String v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  uint64_t v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.confirmSlotValue(slot:slotValue:), 0);
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)()
{
  Swift::String v17 = (void *)v0[11];
  uint64_t v16 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v15 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v16, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  uint64_t v19 = *(void *)(v18 - 8);
  Swift::String v20 = *(unsigned int (**)(void *, uint64_t))(v19 + 48);
  if (v20(v17, 1) == 1)
  {
    outlined destroy of SpeakableString?(v14[11]);
    v15[1]._uint64_t countAndFlagsBits = 0;
    v15[1]._object = 0;
    v15[2]._uint64_t countAndFlagsBits = 0;
    v15[2]._object = 0;
  }
  else
  {
    uint64_t v13 = v14[11];
    v15[2]._object = (void *)v18;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v13, v18);
  }
  Swift::String v12 = (void *)v14[10];
  uint64_t v11 = (const void *)v14[8];
  v15[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v20)(v12, 1, v18) == 1)
  {
    outlined destroy of SpeakableString?(v14[10]);
    v15[4]._uint64_t countAndFlagsBits = 0;
    v15[4]._object = 0;
    v15[5]._uint64_t countAndFlagsBits = 0;
    v15[5]._object = 0;
  }
  else
  {
    uint64_t v10 = v14[10];
    v15[5]._object = (void *)v18;
    uint64_t v4 = __swift_allocate_boxed_opaque_existential_1(&v15[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(v4, v10, v18);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v8 = KeyValuePairs.init(dictionaryLiteral:)();
  v14[13] = v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v5 = (void *)swift_task_alloc();
  v14[14] = v5;
  *uint64_t v5 = v14[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  uint64_t v6 = v14[6];
  return v9(v6, v1._countAndFlagsBits, v1._object, v8);
}

uint64_t SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  Swift::String v35 = a1;
  uint64_t v27 = a2;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v35);
  uint64_t v29 = (char *)v23 - v28;
  unint64_t v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)v23 - v30;
  uint64_t v45 = v6;
  uint64_t v44 = v7;
  uint64_t v43 = v3;
  unsigned int v36 = 1;
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ConfirmSlotValue", 0x22uLL, 1);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v33 = _allocateUninitializedArray<A>(_:)();
  unint64_t v34 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v36 & 1);
  uint64_t v10 = v35;
  uint64_t v11 = v37;
  *unint64_t v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v38 = type metadata accessor for SpeakableString();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  uint64_t v41 = *(unsigned int (**)(char *, void))(v39 + 48);
  uint64_t v42 = v39 + 48;
  if (v41(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    uint64_t v22 = v34;
    v34[1]._uint64_t countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._uint64_t countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    Swift::String v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  uint64_t v24 = v34 + 4;
  unsigned int v25 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotValue", 9uLL, 1);
  uint64_t v15 = v27;
  uint64_t v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, void, uint64_t))v41)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    uint64_t v21 = v34;
    v34[4]._uint64_t countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._uint64_t countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  uint64_t v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  Swift::String v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  Swift::String v9 = v23;
  *Swift::String v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.disambiguateSlotValue(slot:), 0);
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)()
{
  uint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.disambiguateSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#DisambiguateSlotValue", 0x27uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v35 = (char *)v22 - v28;
  uint64_t v43 = MEMORY[0x270FA5388](v33);
  uint64_t v42 = v5;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  uint64_t v39 = v4;
  unsigned int v34 = 1;
  Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  uint64_t v32 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v34 & 1);
  uint64_t v10 = v33;
  uint64_t v11 = v35;
  *uint64_t v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = v36 - 8;
  if ((*(unsigned int (**)(char *, void))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    uint64_t v21 = v32;
    v32[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    uint64_t v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    uint64_t v24 = v25;
    uint64_t v23 = v25;
    uint64_t v15 = type metadata accessor for SirikitApp();
    uint64_t v16 = v32;
    uint64_t v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._uint64_t countAndFlagsBits = v17;
  }
  else
  {
    Swift::String v20 = v32;
    v32[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  uint64_t v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  void v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.errorWithCode(errorCode:app:), 0);
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)()
{
  uint64_t v15 = (void *)v0[10];
  Swift::String v14 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  unint64_t v13 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v17 + 48))(v15, 1) == 1)
  {
    outlined destroy of SpeakableString?(v12[10]);
    v13[1]._uint64_t countAndFlagsBits = 0;
    v13[1]._object = 0;
    v13[2]._uint64_t countAndFlagsBits = 0;
    v13[2]._object = 0;
  }
  else
  {
    uint64_t v11 = v12[10];
    v13[2]._object = (void *)v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v13[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v11, v16);
  }
  uint64_t v10 = v12[8];
  void v13[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v9 = v12[8];
    v13[5]._object = (void *)type metadata accessor for SirikitApp();
    v13[4]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    v13[4]._uint64_t countAndFlagsBits = 0;
    v13[4]._object = 0;
    v13[5]._uint64_t countAndFlagsBits = 0;
    v13[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v12[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v12[13] = v4;
  *uint64_t v4 = v12[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v12[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.errorWithCode(errorCode:app:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  Swift::String v29 = a1;
  uint64_t v23 = a2;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = (char *)v19 - v24;
  uint64_t v37 = MEMORY[0x270FA5388](v29);
  uint64_t v36 = v4;
  uint64_t v35 = v3;
  unsigned int v30 = 1;
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCode", 0x1FuLL, 1);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  unint64_t v28 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v30 & 1);
  uint64_t v7 = v29;
  uint64_t v8 = v31;
  *unint64_t v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  uint64_t v32 = type metadata accessor for SpeakableString();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v32 - 8;
  if ((*(unsigned int (**)(char *, void))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    uint64_t v18 = v28;
    v28[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    uint64_t v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    uint64_t v21 = v23;
    uint64_t v20 = v23;
    uint64_t v12 = type metadata accessor for SirikitApp();
    unint64_t v13 = v28;
    uint64_t v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    uint64_t v17 = v28;
    v28[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  uint64_t v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = (char *)v22 - v28;
  uint64_t v43 = MEMORY[0x270FA5388](v33);
  uint64_t v42 = v5;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  uint64_t v39 = v4;
  unsigned int v34 = 1;
  Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  uint64_t v32 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v34 & 1);
  uint64_t v10 = v33;
  Swift::String v11 = v35;
  *uint64_t v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = v36 - 8;
  if ((*(unsigned int (**)(char *, void))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    uint64_t v21 = v32;
    v32[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    uint64_t v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    uint64_t v24 = v25;
    uint64_t v23 = v25;
    uint64_t v15 = type metadata accessor for SirikitApp();
    uint64_t v16 = v32;
    uint64_t v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._uint64_t countAndFlagsBits = v17;
  }
  else
  {
    uint64_t v20 = v32;
    v32[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  uint64_t v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  void v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:), 0);
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)()
{
  uint64_t v15 = (void *)v0[10];
  Swift::String v14 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  unint64_t v13 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v17 + 48))(v15, 1) == 1)
  {
    outlined destroy of SpeakableString?(v12[10]);
    v13[1]._uint64_t countAndFlagsBits = 0;
    v13[1]._object = 0;
    v13[2]._uint64_t countAndFlagsBits = 0;
    v13[2]._object = 0;
  }
  else
  {
    uint64_t v11 = v12[10];
    v13[2]._object = (void *)v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v13[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v11, v16);
  }
  uint64_t v10 = v12[8];
  void v13[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v9 = v12[8];
    v13[5]._object = (void *)type metadata accessor for SirikitApp();
    v13[4]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    v13[4]._uint64_t countAndFlagsBits = 0;
    v13[4]._object = 0;
    v13[5]._uint64_t countAndFlagsBits = 0;
    v13[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v12[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v12[13] = v4;
  *uint64_t v4 = v12[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v12[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  Swift::String v29 = a1;
  uint64_t v23 = a2;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = (char *)v19 - v24;
  uint64_t v37 = MEMORY[0x270FA5388](v29);
  uint64_t v36 = v4;
  uint64_t v35 = v3;
  unsigned int v30 = 1;
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#ErrorWithCodeForApplePay", 0x2AuLL, 1);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  unint64_t v28 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v30 & 1);
  uint64_t v7 = v29;
  uint64_t v8 = v31;
  *unint64_t v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  uint64_t v32 = type metadata accessor for SpeakableString();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v32 - 8;
  if ((*(unsigned int (**)(char *, void))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    uint64_t v18 = v28;
    v28[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    uint64_t v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    uint64_t v21 = v23;
    uint64_t v20 = v23;
    uint64_t v12 = type metadata accessor for SirikitApp();
    unint64_t v13 = v28;
    uint64_t v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    uint64_t v17 = v28;
    v28[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  uint64_t v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:completion:)(uint64_t a1, uint64_t a2, char a3)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  *uint64_t v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v7[2]._object = (void *)type metadata accessor for SirikitApp();
    v7[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v7[1]._uint64_t countAndFlagsBits = 0;
    v7[1]._object = 0;
    v7[2]._uint64_t countAndFlagsBits = 0;
    v7[2]._object = 0;
  }
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if (a3)
  {
    v7[4]._uint64_t countAndFlagsBits = 0;
    v7[4]._object = 0;
    v7[5]._uint64_t countAndFlagsBits = 0;
    v7[5]._object = 0;
  }
  else
  {
    v7[5]._object = (void *)MEMORY[0x263F8D538];
    v7[4]._uint64_t countAndFlagsBits = a2;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 25) = a4;
  *(void *)(v5 + 72) = a3;
  *(void *)(v5 + 64) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 32) = v5;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 24) = a4 & 1;
  *(void *)(v5 + 48) = v4;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:), 0);
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)()
{
  uint64_t v13 = v0[8];
  v0[4] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v12 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v13)
  {
    uint64_t v10 = *(void *)(v11 + 64);
    v12[2]._object = (void *)type metadata accessor for SirikitApp();
    v12[1]._uint64_t countAndFlagsBits = v10;
  }
  else
  {
    v12[1]._uint64_t countAndFlagsBits = 0;
    v12[1]._object = 0;
    v12[2]._uint64_t countAndFlagsBits = 0;
    v12[2]._object = 0;
  }
  char v9 = *(unsigned char *)(v11 + 25);
  void v12[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if (v9)
  {
    v12[4]._uint64_t countAndFlagsBits = 0;
    v12[4]._object = 0;
    v12[5]._uint64_t countAndFlagsBits = 0;
    v12[5]._object = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(v11 + 72);
    v12[5]._object = (void *)MEMORY[0x263F8D538];
    v12[4]._uint64_t countAndFlagsBits = v3;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  *(void *)(v11 + 96) = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v11 + 104) = v4;
  *uint64_t v4 = *(void *)(v11 + 32);
  v4[1] = SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:);
  uint64_t v5 = *(void *)(v11 + 56);
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 32) = *v1;
  *(void *)(v4 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 32) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 32) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 32) + 8);
  return v1();
}

uint64_t SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(uint64_t a1, uint64_t a2, char a3)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#IntentHandledResponse", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  *uint64_t v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v7[2]._object = (void *)type metadata accessor for SirikitApp();
    v7[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v7[1]._uint64_t countAndFlagsBits = 0;
    v7[1]._object = 0;
    v7[2]._uint64_t countAndFlagsBits = 0;
    v7[2]._object = 0;
  }
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bankAccounts", 0xCuLL, 1);
  if (a3)
  {
    v7[4]._uint64_t countAndFlagsBits = 0;
    v7[4]._object = 0;
    v7[5]._uint64_t countAndFlagsBits = 0;
    v7[5]._object = 0;
  }
  else
  {
    v7[5]._object = (void *)MEMORY[0x263F8D538];
    v7[4]._uint64_t countAndFlagsBits = a2;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:completion:)(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  Swift::String v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v39);
  uint64_t v33 = (char *)v26 - v32;
  unint64_t v34 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)v26 - v34;
  uint64_t v51 = v7;
  uint64_t v50 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  uint64_t v47 = v4;
  unsigned int v40 = 1;
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v37 = _allocateUninitializedArray<A>(_:)();
  uint64_t v38 = v11;
  Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v40 & 1);
  uint64_t v13 = v39;
  uint64_t v14 = v41;
  *uint64_t v38 = v12;
  outlined init with copy of SpeakableString?(v13, v14);
  uint64_t v42 = type metadata accessor for SpeakableString();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  uint64_t v45 = *(unsigned int (**)(char *, void))(v43 + 48);
  uint64_t v46 = v43 + 48;
  if (v45(v41, v40) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v41);
    Swift::String v25 = v38;
    v38[1]._uint64_t countAndFlagsBits = 0;
    v25[1]._object = 0;
    v25[2]._uint64_t countAndFlagsBits = 0;
    v25[2]._object = 0;
  }
  else
  {
    uint64_t v15 = v38;
    v38[2]._object = (void *)v42;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v41, v42);
  }
  uint64_t v27 = v38 + 4;
  unsigned int v28 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  uint64_t v18 = v29;
  unsigned int v19 = v33;
  v38[3] = v17;
  outlined init with copy of SpeakableString?(v18, v19);
  if (((unsigned int (*)(char *, void, uint64_t))v45)(v33, v28, v42) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v33);
    unint64_t v24 = v38;
    v38[4]._uint64_t countAndFlagsBits = 0;
    v24[4]._object = 0;
    v24[5]._uint64_t countAndFlagsBits = 0;
    v24[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v27->_countAndFlagsBits;
    v38[5]._object = (void *)v42;
    uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(v21, v33, v42);
  }
  uint64_t v22 = v37;
  _finalizeUninitializedArray<A>(_:)();
  v26[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v26[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.labelForEnum(accountType:balanceType:), 0);
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)()
{
  Swift::String v17 = (void *)v0[11];
  uint64_t v16 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  v0[12] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v15 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v16, v17);
  uint64_t v18 = type metadata accessor for SpeakableString();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(void *, uint64_t))(v19 + 48);
  if (v20(v17, 1) == 1)
  {
    outlined destroy of SpeakableString?(v14[11]);
    v15[1]._uint64_t countAndFlagsBits = 0;
    v15[1]._object = 0;
    v15[2]._uint64_t countAndFlagsBits = 0;
    v15[2]._object = 0;
  }
  else
  {
    uint64_t v13 = v14[11];
    v15[2]._object = (void *)v18;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v15[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v13, v18);
  }
  Swift::String v12 = (void *)v14[10];
  uint64_t v11 = (const void *)v14[8];
  v15[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v20)(v12, 1, v18) == 1)
  {
    outlined destroy of SpeakableString?(v14[10]);
    v15[4]._uint64_t countAndFlagsBits = 0;
    v15[4]._object = 0;
    v15[5]._uint64_t countAndFlagsBits = 0;
    v15[5]._object = 0;
  }
  else
  {
    uint64_t v10 = v14[10];
    v15[5]._object = (void *)v18;
    uint64_t v4 = __swift_allocate_boxed_opaque_existential_1(&v15[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(v4, v10, v18);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v8 = KeyValuePairs.init(dictionaryLiteral:)();
  v14[13] = v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v5 = (void *)swift_task_alloc();
  v14[14] = v5;
  *uint64_t v5 = v14[2];
  v5[1] = PaymentsLabelCATs.financialAccountDisambiguation(accountType:accountNumber:);
  uint64_t v6 = v14[6];
  return v9(v6, v1._countAndFlagsBits, v1._object, v8);
}

uint64_t SearchForAccountsCATs.labelForEnum(accountType:balanceType:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  Swift::String v35 = a1;
  uint64_t v27 = a2;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v35);
  Swift::String v29 = (char *)v23 - v28;
  unint64_t v30 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)v23 - v30;
  uint64_t v45 = v6;
  uint64_t v44 = v7;
  uint64_t v43 = v3;
  unsigned int v36 = 1;
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForEnum", 0x1EuLL, 1);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v33 = _allocateUninitializedArray<A>(_:)();
  unint64_t v34 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v36 & 1);
  uint64_t v10 = v35;
  uint64_t v11 = v37;
  *unint64_t v34 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v38 = type metadata accessor for SpeakableString();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  uint64_t v41 = *(unsigned int (**)(char *, void))(v39 + 48);
  uint64_t v42 = v39 + 48;
  if (v41(v37, v36) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v37);
    uint64_t v22 = v34;
    v34[1]._uint64_t countAndFlagsBits = 0;
    v22[1]._object = 0;
    v22[2]._uint64_t countAndFlagsBits = 0;
    v22[2]._object = 0;
  }
  else
  {
    Swift::String v12 = v34;
    v34[2]._object = (void *)v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(boxed_opaque_existential_1, v37, v38);
  }
  unint64_t v24 = v34 + 4;
  unsigned int v25 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  uint64_t v15 = v27;
  uint64_t v16 = v29;
  v34[3] = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(char *, void, uint64_t))v41)(v29, v25, v38) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v29);
    uint64_t v21 = v34;
    v34[4]._uint64_t countAndFlagsBits = 0;
    v21[4]._object = 0;
    v21[5]._uint64_t countAndFlagsBits = 0;
    v21[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v24->_countAndFlagsBits;
    v34[5]._object = (void *)v38;
    uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v18, v29, v38);
  }
  uint64_t v19 = v33;
  _finalizeUninitializedArray<A>(_:)();
  v23[0] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v23[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  Swift::String v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.labelForResponseSlot(slot:), 0);
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)()
{
  uint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.labelForResponseSlot(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelForResponseSlot", 0x26uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.labelOtherBalanceType(enumValue:), 0);
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.labelOtherBalanceType(enumValue:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#LabelOtherBalanceType", 0x27uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enumValue", 9uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:completion:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.noResultsResponse(app:), 0);
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)()
{
  uint64_t v11 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v11)
  {
    uint64_t v8 = v9[6];
    v10[2]._object = (void *)type metadata accessor for SirikitApp();
    v10[1]._uint64_t countAndFlagsBits = v8;
  }
  else
  {
    v10[1]._uint64_t countAndFlagsBits = 0;
    v10[1]._object = 0;
    v10[2]._uint64_t countAndFlagsBits = 0;
    v10[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[9] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v3 = (void *)swift_task_alloc();
  v9[10] = v3;
  *uint64_t v3 = v9[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  uint64_t v4 = v9[5];
  return v7(v4, v1._countAndFlagsBits, v1._object, v6);
}

uint64_t SearchForAccountsCATs.noResultsResponse(app:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#NoResultsResponse", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptCancelled(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptCancelled()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  void v2[3] = 0;
  void v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.promptCancelled(), 0);
}

uint64_t SearchForAccountsCATs.promptCancelled()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.promptForSlotValue(slot:), 0);
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.promptForSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptForSlotValue", 0x24uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  void v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  *uint64_t v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  void v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.slotDisplayValue(slot:), 0);
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.slotDisplayValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#SlotDisplayValue", 0x22uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:completion:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  unint64_t v33 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v34 = (char *)v22 - v33;
  uint64_t v45 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = v5;
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  uint64_t v41 = v4;
  int v37 = 1;
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v38 = _allocateUninitializedArray<A>(_:)();
  uint64_t v39 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, v37 & 1);
  *uint64_t v39 = v9;
  swift_retain();
  if (v40)
  {
    uint64_t v29 = v40;
    uint64_t v28 = v40;
    uint64_t v10 = type metadata accessor for SirikitApp();
    uint64_t v11 = v39;
    uint64_t v12 = v28;
    v39[2]._object = (void *)v10;
    v11[1]._uint64_t countAndFlagsBits = v12;
  }
  else
  {
    uint64_t v21 = v39;
    v39[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  uint64_t v23 = v39 + 4;
  unsigned int v24 = 1;
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  Swift::String v14 = v30;
  uint64_t v15 = v34;
  v39[3] = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v25 = type metadata accessor for SpeakableString();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = v25 - 8;
  if ((*(unsigned int (**)(char *, void))(v26 + 48))(v34, v24) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v34);
    uint64_t v20 = v39;
    v39[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v23->_countAndFlagsBits;
    v39[5]._object = (void *)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 32))(boxed_opaque_existential_1, v34, v25);
  }
  uint64_t v18 = v38;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  void v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  void v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsCATs.unsupportedSlotValue(app:slot:), 0);
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)()
{
  uint64_t v17 = v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v16 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v17)
  {
    uint64_t v14 = v15[7];
    v16[2]._object = (void *)type metadata accessor for SirikitApp();
    v16[1]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    v16[1]._uint64_t countAndFlagsBits = 0;
    v16[1]._object = 0;
    v16[2]._uint64_t countAndFlagsBits = 0;
    v16[2]._object = 0;
  }
  uint64_t v11 = (void *)v15[10];
  uint64_t v10 = (const void *)v15[8];
  v16[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v12 = type metadata accessor for SpeakableString();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v13 + 48))(v11, 1) == 1)
  {
    outlined destroy of SpeakableString?(v15[10]);
    v16[4]._uint64_t countAndFlagsBits = 0;
    v16[4]._object = 0;
    v16[5]._uint64_t countAndFlagsBits = 0;
    v16[5]._object = 0;
  }
  else
  {
    uint64_t v9 = v15[10];
    v16[5]._object = (void *)v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v16[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v9, v12);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v15[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v15[13] = v4;
  *uint64_t v4 = v15[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v15[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t SearchForAccountsCATs.unsupportedSlotValue(app:slot:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v36 = a1;
  uint64_t v28 = a2;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  unint64_t v29 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = (char *)v19 - v29;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v38 = v4;
  uint64_t v37 = v3;
  int v33 = 1;
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#UnsupportedSlotValue", 0x26uLL, 1);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v34 = _allocateUninitializedArray<A>(_:)();
  Swift::String v35 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, v33 & 1);
  *Swift::String v35 = v6;
  swift_retain();
  if (v36)
  {
    uint64_t v26 = v36;
    uint64_t v25 = v36;
    uint64_t v7 = type metadata accessor for SirikitApp();
    uint64_t v8 = v35;
    uint64_t v9 = v25;
    v35[2]._object = (void *)v7;
    v8[1]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    uint64_t v18 = v35;
    v35[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  uint64_t v20 = v35 + 4;
  unsigned int v21 = 1;
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  uint64_t v11 = v28;
  uint64_t v12 = v30;
  v35[3] = v10;
  outlined init with copy of SpeakableString?(v11, v12);
  uint64_t v22 = type metadata accessor for SpeakableString();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = v22 - 8;
  if ((*(unsigned int (**)(char *, void))(v23 + 48))(v30, v21) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v30);
    uint64_t v17 = v35;
    v35[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v20->_countAndFlagsBits;
    v35[5]._object = (void *)v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v30, v22);
  }
  uint64_t v15 = v34;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForAccountsCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return SearchForAccountsCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t SearchForAccountsCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  uint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.slotDisplayValue(slot:) in conformance SearchForAccountsCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsCATs.slotDisplayValue(slot:)(a1, a2);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.labelForResponseSlot(slot:) in conformance SearchForAccountsCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsCATs.labelForResponseSlot(slot:)(a1, a2);
}

uint64_t type metadata accessor for SearchForAccountsCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsCATs;
  if (!type metadata singleton initialization cache for SearchForAccountsCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t ObjC metadata update function for SearchForAccountsCATs()
{
  return type metadata accessor for SearchForAccountsCATs();
}

uint64_t INCurrencyAmount.formattedString.getter()
{
  id v14 = objc_msgSend(v0, sel_amount);
  if (!v14) {
    return 0;
  }
  id v13 = objc_msgSend(v0, sel_currencyCode);
  if (v13)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v1;

    uint64_t v11 = v9;
    uint64_t v12 = v10;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  if (!v12)
  {

    return 0;
  }
  type metadata accessor for NSNumberFormatter();
  id v7 = SAUIAppPunchOut.__allocating_init()();
  objc_msgSend(v7, sel_setNumberStyle_, 2);
  swift_bridgeObjectRetain();
  id v6 = (id)MEMORY[0x2611B9130](v11, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setCurrencyCode_, v6);

  id v8 = objc_msgSend(v7, sel_stringFromNumber_, v14);
  if (v8)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t RequestPaymentConfirmIntentStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  id v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v1 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentConfirmIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentConfirmIntentStrategy.actionForInput(_:confirmParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_release();
}

uint64_t RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[12] = a2;
  v4[11] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 144);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v20 = *(unsigned int *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    *(void *)(v17 + 56) = buf;
    *(void *)(v17 + 64) = v14;
    *(void *)(v17 + 72) = v15;
    serialize(_:at:)(0, (unsigned char **)(v17 + 56));
    serialize(_:at:)(0, (unsigned char **)(v17 + 56));
    *(void *)(v17 + 80) = v23;
    uint64_t v16 = (void *)swift_task_alloc();
    v16[2] = v17 + 56;
    v16[3] = v17 + 64;
    void v16[4] = v17 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v22, v21, "#RequestPaymentConfirmIntentStrategy parseConfirmationResponse", buf, v20);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v17 + 160);
  uint64_t v6 = *(void *)(v17 + 144);
  uint64_t v10 = *(void *)(v17 + 136);
  uint64_t v8 = *(void *)(v17 + 120);
  uint64_t v11 = *(void *)(v17 + 112);
  uint64_t v5 = *(void *)(v17 + 152);
  uint64_t v7 = *(void *)(v17 + 128);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v6);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for INRequestPaymentIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v17 + 16) + 8);
  return v3();
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[114] = v2;
  v3[113] = a2;
  v3[112] = a1;
  v3[74] = v3;
  v3[75] = 0;
  v3[76] = 0;
  v3[78] = 0;
  v3[85] = 0;
  v3[92] = 0;
  v3[98] = 0;
  v3[72] = 0;
  v3[73] = 0;
  v3[99] = 0;
  v3[100] = 0;
  v3[101] = 0;
  v3[102] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[115] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v3[116] = v4;
  v3[117] = *(void *)(v4 - 8);
  v3[118] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[119] = v5;
  v3[120] = *(void *)(v5 - 8);
  v3[121] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  v3[124] = swift_task_alloc();
  v3[125] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[126] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[127] = v6;
  v3[128] = *(void *)(v6 - 8);
  v3[129] = swift_task_alloc();
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  v3[132] = swift_task_alloc();
  v3[133] = swift_task_alloc();
  v3[134] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[135] = swift_task_alloc();
  v3[75] = a2;
  v3[76] = v2;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  uint64_t v210 = v0;
  uint64_t v197 = *(void *)(v0 + 1080);
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v198 = *(void *)(v0 + 1024);
  uint64_t v199 = *(void *)(v0 + 1016);
  *(void *)(v0 + 592) = v0;
  uint64_t v2 = SignpostName.makeRequestPaymentPromptForConfirm.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v197);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v200 = *(void (**)(uint64_t, uint64_t, uint64_t))(v198 + 16);
  v200(v1, v3, v199);
  uint64_t v203 = Logger.logObject.getter();
  os_log_type_t v202 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 616) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v201 = *(unsigned int *)(v0 + 1248);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v204 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v203, v202))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v193 = createStorage<A>(capacity:type:)(0);
    uint64_t v194 = createStorage<A>(capacity:type:)(0);
    *(void *)(v196 + 864) = buf;
    *(void *)(v196 + 872) = v193;
    *(void *)(v196 + 880) = v194;
    serialize(_:at:)(0, (unsigned char **)(v196 + 864));
    serialize(_:at:)(0, (unsigned char **)(v196 + 864));
    *(void *)(v196 + 888) = v204;
    uint64_t v195 = (void *)swift_task_alloc();
    v195[2] = v196 + 864;
    v195[3] = v196 + 872;
    v195[4] = v196 + 880;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v203, v202, "#RequestPaymentConfirmIntentStrategy makePromptForConfirmation", buf, v201);
    destroyStorage<A>(_:count:)(v193, 0, v191);
    destroyStorage<A>(_:count:)(v194, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v186 = *(void *)(v196 + 1072);
  uint64_t v187 = *(void *)(v196 + 1016);
  uint64_t v185 = *(void *)(v196 + 1024);

  uint64_t v188 = *(void (**)(uint64_t, uint64_t))(v185 + 8);
  v188(v186, v187);
  *(void *)(v196 + 1088) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  id v189 = (id)IntentResolutionRecord.intentResponse.getter();
  id v4 = v189;
  *(void *)(v196 + 624) = v189;
  id v190 = objc_msgSend(v189, sel_paymentRecord);

  *(void *)(v196 + 632) = v190;
  if (*(void *)(v196 + 632))
  {
    outlined destroy of SFRichText?((id *)(v196 + 632));
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v196 + 632));
    IntentResolutionRecord.app.getter();
    LOBYTE(v184) = App.isFirstParty.getter();
    swift_release();
    if (v184)
    {
      uint64_t v5 = *(void *)(v196 + 1064);
      uint64_t v179 = *(void *)(v196 + 1016);
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      v200(v5, v6, v179);
      os_log_t oslog = (os_log_t)Logger.logObject.getter();
      LOBYTE(v18String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = static os_log_type_t.debug.getter();
      *(void *)(v196 + 824) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v196 + 1268);
      uint64_t v183 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, (os_log_type_t)v181))
      {
        uint64_t v175 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v176 = createStorage<A>(capacity:type:)(0);
        uint64_t v177 = createStorage<A>(capacity:type:)(0);
        *(void *)(v196 + 832) = v175;
        *(void *)(v196 + 840) = v176;
        *(void *)(v196 + 848) = v177;
        serialize(_:at:)(0, (unsigned char **)(v196 + 832));
        serialize(_:at:)(0, (unsigned char **)(v196 + 832));
        *(void *)(v196 + 856) = v183;
        uint64_t v178 = (void *)swift_task_alloc();
        v178[2] = v196 + 832;
        v178[3] = v196 + 840;
        v178[4] = v196 + 848;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, oslog, (os_log_type_t)v181, "#RequestPaymentConfirmIntentStrategy makePromptForConfirmation 1P app did not contain payment record, creating our own here", v175, size);
        destroyStorage<A>(_:count:)(v176, 0, v174);
        destroyStorage<A>(_:count:)(v177, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v175, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v165 = *(void *)(v196 + 1064);
      uint64_t v166 = *(void *)(v196 + 1016);

      v188(v165, v166);
      type metadata accessor for INRequestPaymentIntentResponse();
      v213.value.super.id isa = 0;
      id isa = INRequestPaymentIntentResponse.__allocating_init(code:userActivity:)(INRequestPaymentIntentResponseCodeReady, v213).super.super.isa;
      id v7 = isa;
      uint64_t v8 = *(void **)(v196 + 624);
      *(void *)(v196 + 624) = isa;

      type metadata accessor for INPaymentRecord();
      id v168 = (id)IntentResolutionRecord.intent.getter();
      LOBYTE(payee) = objc_msgSend(v168, sel_payer);

      id v170 = (id)IntentResolutionRecord.intent.getter();
      payer.value.super.id isa = (Class)objc_msgSend(v170, sel_currencyAmount);

      payer.is_nil = objc_msgSend(self, sel_applePayPaymentMethod);
      id v172 = (id)IntentResolutionRecord.intent.getter();
      id v173 = objc_msgSend(v172, sel_note);
      if (v173)
      {
        *(void *)&long long v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BYTE8(v163) = v9;

        INCurrencyAmount_optional v164 = (INCurrencyAmount_optional)v163;
      }
      else
      {
        memset(&v164, 0, sizeof(v164));
      }

      v212.is_nil = payee;
      v214.is_nil = 0;
      v212.value.super.id isa = 0;
      v214.value.super.id isa = (Class)1;
      id v162 = (id)INPaymentRecord.__allocating_init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(v212, payer, v164, v214, v54, v55, v56);
      objc_msgSend(isa, sel_setPaymentRecord_);
    }
  }
  id v160 = *(id *)(v196 + 624);
  id v10 = v160;
  id v11 = objc_msgSend(v160, sel_paymentRecord);
  *(void *)(v196 + 1096) = v11;
  unint64_t v161 = v11;
  if (v11)
  {
    uint64_t v12 = *(void *)(v196 + 1056);
    uint64_t v150 = *(void *)(v196 + 1016);
    *(void *)(v196 + 680) = v11;

    uint64_t v13 = Logger.payments.unsafeMutableAddressor();
    v200(v12, v13, v150);
    id v14 = v161;
    uint64_t v152 = swift_allocObject();
    *(void *)(v152 + 16) = v161;
    log = Logger.logObject.getter();
    os_log_type_t v159 = static os_log_type_t.debug.getter();
    *(void *)(v196 + 688) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v151 = *(_DWORD *)(v196 + 1256);
    uint64_t v154 = swift_allocObject();
    *(unsigned char *)(v154 + 16) = 64;
    uint64_t v155 = swift_allocObject();
    *(unsigned char *)(v155 + 16) = 8;
    uint64_t v153 = swift_allocObject();
    *(void *)(v153 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v153 + 24) = v152;
    uint64_t v156 = swift_allocObject();
    *(void *)(v156 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v156 + 24) = v153;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v157 = v15;
    swift_retain();
    *uint64_t v157 = partial apply for closure #1 in OSLogArguments.append(_:);
    v157[1] = v154;
    swift_retain();
    v157[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v157[3] = v155;
    swift_retain();
    v157[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v157[5] = v156;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v159))
    {
      int v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v148 = createStorage<A>(capacity:type:)(1);
      uint64_t v149 = createStorage<A>(capacity:type:)(0);
      uint64_t v205 = v147;
      uint64_t v206 = v148;
      uint64_t v207 = v149;
      serialize(_:at:)(2, &v205);
      serialize(_:at:)(1, &v205);
      uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v209 = v154;
      closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
      uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v209 = v155;
      closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
      uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v209 = v156;
      closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
      _os_log_impl(&dword_25D85A000, log, v159, "#RequestPaymentConfirmIntentStrategy intent contained paymentRecord: %@", v147, v151);
      destroyStorage<A>(_:count:)(v148, 1, v146);
      destroyStorage<A>(_:count:)(v149, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v147, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v143 = *(void *)(v196 + 1056);
    uint64_t v144 = *(void *)(v196 + 1016);

    v188(v143, v144);
    id v16 = objc_msgSend(v161, sel_payer);
    *(void *)(v196 + 1104) = v16;
    uint64_t v145 = v16;
    if (v16)
    {
      *(void *)(v196 + 736) = v16;
      id v17 = objc_msgSend(v161, sel_currencyAmount);
      *(void *)(v196 + 1112) = v17;
      uint64_t v142 = v17;
      if (v17)
      {
        *(void *)(v196 + 784) = v17;
        id v141 = objc_msgSend(v161, sel_note);
        if (v141)
        {
          uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v138 = v18;

          uint64_t v139 = v137;
          uint64_t v140 = v138;
        }
        else
        {
          uint64_t v139 = 0;
          uint64_t v140 = 0;
        }
        *(void *)(v196 + 1120) = v140;
        uint64_t v130 = *(void *)(v196 + 912);
        *(void *)(v196 + 576) = v139;
        *(void *)(v196 + 584) = v140;
        id v19 = objc_msgSend(v161, sel_feeAmount);
        *(void *)(v196 + 1128) = v19;
        id v129 = v19;
        *(void *)(v196 + 792) = v19;
        type metadata accessor for PaymentsDialogConcept.Builder();
        uint64_t v133 = (void *)PaymentsDialogConcept.Builder.__allocating_init()();
        *(void *)(v196 + 1136) = v133;
        *(void *)(v196 + 800) = v133;
        type metadata accessor for DialogPerson();
        id v20 = v145;
        swift_retain();
        outlined init with copy of GlobalsProviding(v130 + 104, v196 + 136);
        swift_release();
        uint64_t v132 = *(void *)(v196 + 160);
        uint64_t v131 = *(void *)(v196 + 168);
        __swift_project_boxed_opaque_existential_1((void *)(v196 + 136), v132);
        (*(void (**)(uint64_t))(v131 + 16))(v132);
        __swift_project_boxed_opaque_existential_1((void *)(v196 + 176), *(void *)(v196 + 200));
        dispatch thunk of DeviceState.siriLocale.getter();
        uint64_t v135 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v196 + 176);
        __swift_destroy_boxed_opaque_existential_0(v196 + 136);
        swift_retain();
        uint32_t v134 = (void *)((char *)v133 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
        swift_beginAccess();
        *uint32_t v134 = v135;
        swift_release();
        swift_endAccess();
        swift_release();
        type metadata accessor for DialogCurrency.Builder();
        DialogCurrency.Builder.__allocating_init()();
        id v21 = objc_msgSend(v142, sel_amount);
        id v136 = v21;
        if (v21)
        {
          objc_msgSend(v21, sel_doubleValue);
        }
        dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
        swift_release();
        id v128 = objc_msgSend(v142, sel_currencyCode);
        if (v128)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v126 = v22;

          uint64_t v127 = v126;
        }
        else
        {
          uint64_t v127 = 0;
        }
        if (v127)
        {
          uint64_t v125 = *(void *)(v196 + 1000);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v23 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 56))(v125, 0, 1);
        }
        else
        {
          uint64_t v105 = *(void *)(v196 + 1000);
          uint64_t v38 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v105, 1);
        }
        uint64_t v123 = *(void *)(v196 + 1000);
        dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
        outlined destroy of SpeakableString?(v123);
        swift_release();
        uint64_t v124 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
        swift_release();
        swift_retain();
        swift_beginAccess();
        v133[2] = v124;
        swift_release();
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRetain();
        if (v140)
        {
          uint64_t v122 = *(void *)(v196 + 992);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v24 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 56))(v122, 0, 1);
        }
        else
        {
          uint64_t v106 = *(void *)(v196 + 992);
          uint64_t v37 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v106, 1);
        }
        uint64_t v121 = *(const void **)(v196 + 992);
        uint64_t v119 = *(void **)(v196 + 984);
        outlined init with copy of SpeakableString?(v121, v119);
        uint64_t v120 = (char *)v133 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
        swift_beginAccess();
        outlined assign with take of SpeakableString?(v119, v120);
        swift_endAccess();
        outlined destroy of SpeakableString?((uint64_t)v121);
        DialogCurrency.Builder.__allocating_init()();
        id v25 = v129;
        if (v129)
        {
          id v118 = objc_msgSend(v129, sel_amount);

          if (v118)
          {
            objc_msgSend(v118, sel_doubleValue);
          }
        }
        dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
        swift_release();
        id v26 = v129;
        if (v129
          && ((id v117 = objc_msgSend(v129, sel_currencyCode)) == 0
            ? (uint64_t v116 = 0)
            : (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v115 = v27, v117, v116 = v115),
              v129,
              v116))
        {
          uint64_t v114 = *(void *)(v196 + 976);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v28 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 56))(v114, 0, 1);
        }
        else
        {
          uint64_t v107 = *(void *)(v196 + 976);
          uint64_t v36 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v107, 1);
        }
        uint64_t v110 = *(void *)(v196 + 976);
        dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
        outlined destroy of SpeakableString?(v110);
        swift_release();
        uint64_t v111 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
        swift_release();
        swift_retain();
        swift_beginAccess();
        v133[4] = v111;
        swift_release();
        swift_endAccess();
        swift_release();
        IntentResolutionRecord.app.getter();
        uint64_t v112 = App.sirikitApp.getter();
        swift_release();
        swift_retain();
        swift_beginAccess();
        v133[3] = v112;
        swift_release();
        swift_endAccess();
        swift_release();
        uint64_t v113 = PaymentsDialogConcept.Builder.build()();
        *(void *)(v196 + 1144) = v113;
        *(void *)(v196 + 808) = v113;
        if (static RFFeatureFlags.ResponseFramework.SMART.getter())
        {
          uint64_t v109 = *(void **)(v196 + 624);
          *(void *)(v196 + 1152) = v109;
          id v29 = v109;
          uint64_t v30 = (void *)swift_task_alloc();
          *(void *)(v196 + 1160) = v30;
          *uint64_t v30 = *(void *)(v196 + 592);
          v30[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
          uint64_t v31 = *(void *)(v196 + 904);
          uint64_t v32 = *(void *)(v196 + 896);
          return RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(v32, v31, v113, (uint64_t)v109);
        }
        else
        {
          uint64_t v108 = *(void *)(v196 + 912);
          swift_retain();
          *(void *)(v196 + 1176) = *(void *)(v108 + 16);
          swift_retain();
          swift_release();
          swift_retain();
          char v34 = (void *)swift_task_alloc();
          *(void *)(v196 + 1184) = v34;
          *char v34 = *(void *)(v196 + 592);
          v34[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
          uint64_t v35 = *(void *)(v196 + 968);
          return RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(v35, v113);
        }
      }
      uint64_t v39 = *(void *)(v196 + 1048);
      uint64_t v100 = *(void *)(v196 + 1016);
      uint64_t v40 = Logger.payments.unsafeMutableAddressor();
      v200(v39, v40, v100);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      *(void *)(v196 + 744) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v101 = *(_DWORD *)(v196 + 1264);
      uint64_t v104 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v103, v102))
      {
        uint64_t v96 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v97 = createStorage<A>(capacity:type:)(0);
        uint64_t v98 = createStorage<A>(capacity:type:)(0);
        *(void *)(v196 + 752) = v96;
        *(void *)(v196 + 760) = v97;
        *(void *)(v196 + 768) = v98;
        serialize(_:at:)(0, (unsigned char **)(v196 + 752));
        serialize(_:at:)(0, (unsigned char **)(v196 + 752));
        *(void *)(v196 + 776) = v104;
        uint64_t v99 = (void *)swift_task_alloc();
        v99[2] = v196 + 752;
        v99[3] = v196 + 760;
        v99[4] = v196 + 768;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v103, v102, "#RequestPaymentConfirmIntentStrategy found no currencyAmount in paymentRecord, throwing exception", v96, v101);
        destroyStorage<A>(_:count:)(v97, 0, v95);
        destroyStorage<A>(_:count:)(v98, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v96, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v94 = *(void *)(v196 + 1080);
      uint64_t v89 = *(void *)(v196 + 1048);
      uint64_t v90 = *(void *)(v196 + 1016);

      v188(v89, v90);
      Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1);
      type metadata accessor for INRequestPaymentIntent();
      id v93 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v91 = v42;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(Swift::String *)uint64_t v43 = v41;
      *(void *)(v43 + 16) = v92;
      *(void *)(v43 + 24) = v91;
      *(void *)(v43 + 32) = 0;
      *(void *)(v43 + 40) = 0;
      *(unsigned char *)(v43 + 48) = 8;
      swift_willThrow();

      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v94);
    }
    else
    {
      uint64_t v44 = *(void *)(v196 + 1040);
      uint64_t v84 = *(void *)(v196 + 1016);
      uint64_t v45 = Logger.payments.unsafeMutableAddressor();
      v200(v44, v45, v84);
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.error.getter();
      *(void *)(v196 + 696) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v85 = *(_DWORD *)(v196 + 1260);
      uint64_t v88 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v87, v86))
      {
        unint64_t v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v81 = createStorage<A>(capacity:type:)(0);
        uint64_t v82 = createStorage<A>(capacity:type:)(0);
        *(void *)(v196 + 704) = v80;
        *(void *)(v196 + 712) = v81;
        *(void *)(v196 + 720) = v82;
        serialize(_:at:)(0, (unsigned char **)(v196 + 704));
        serialize(_:at:)(0, (unsigned char **)(v196 + 704));
        *(void *)(v196 + 728) = v88;
        uint64_t v83 = (void *)swift_task_alloc();
        v83[2] = v196 + 704;
        v83[3] = v196 + 712;
        v83[4] = v196 + 720;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v87, v86, "#RequestPaymentConfirmIntentStrategy found no payer in paymentRecord, throwing exception", v80, v85);
        destroyStorage<A>(_:count:)(v81, 0, v79);
        destroyStorage<A>(_:count:)(v82, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v80, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v78 = *(void *)(v196 + 1080);
      uint64_t v73 = *(void *)(v196 + 1040);
      uint64_t v74 = *(void *)(v196 + 1016);

      v188(v73, v74);
      Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1);
      type metadata accessor for INRequestPaymentIntent();
      id v77 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v47;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(Swift::String *)uint64_t v48 = v46;
      *(void *)(v48 + 16) = v76;
      *(void *)(v48 + 24) = v75;
      *(void *)(v48 + 32) = 0;
      *(void *)(v48 + 40) = 0;
      *(unsigned char *)(v48 + 48) = 8;
      swift_willThrow();

      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v78);
    }
  }
  else
  {
    uint64_t v49 = *(void *)(v196 + 1032);
    uint64_t v68 = *(void *)(v196 + 1016);

    uint64_t v50 = Logger.payments.unsafeMutableAddressor();
    v200(v49, v50, v68);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    *(void *)(v196 + 640) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v69 = *(_DWORD *)(v196 + 1252);
    uint64_t v72 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v71, v70))
    {
      uint64_t v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v65 = createStorage<A>(capacity:type:)(0);
      uint64_t v66 = createStorage<A>(capacity:type:)(0);
      *(void *)(v196 + 648) = v64;
      *(void *)(v196 + 656) = v65;
      *(void *)(v196 + 664) = v66;
      serialize(_:at:)(0, (unsigned char **)(v196 + 648));
      serialize(_:at:)(0, (unsigned char **)(v196 + 648));
      *(void *)(v196 + 672) = v72;
      uint64_t v67 = (void *)swift_task_alloc();
      void v67[2] = v196 + 648;
      v67[3] = v196 + 656;
      v67[4] = v196 + 664;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, v71, v70, "#RequestPaymentConfirmIntentStrategy created no paymentRecord for intent response, throwing exception", v64, v69);
      destroyStorage<A>(_:count:)(v65, 0, v63);
      destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v64, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = *(void *)(v196 + 1080);
    uint64_t v57 = *(void *)(v196 + 1032);
    uint64_t v58 = *(void *)(v196 + 1016);

    v188(v57, v58);
    type metadata accessor for INRequestPaymentIntent();
    id v61 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v51;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v52 = v60;
    *(void *)(v52 + 8) = v59;
    *(void *)(v52 + 16) = 0;
    *(void *)(v52 + 24) = 0;
    *(void *)(v52 + 32) = 0;
    *(void *)(v52 + 40) = 0;
    *(unsigned char *)(v52 + 48) = 12;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v62);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v53 = *(uint64_t (**)(void))(*(void *)(v196 + 592) + 8);
  return v53();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  id v4 = *v1 + 16;
  *(void *)(v5 + 592) = *v1;
  *(void *)(v5 + 1168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {

    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = *(id *)(v0 + 1128);
  id v4 = *(id *)(v0 + 1112);
  uint64_t v5 = *(id *)(v0 + 1104);
  uint64_t v6 = *(id *)(v0 + 1096);
  id v7 = *(void *)(v0 + 1080);
  *(void *)(v0 + 592) = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 592) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  id v4 = *v1;
  *(void *)(v4 + 592) = *v1;
  *(void *)(v4 + 1192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[10];
  void *v20;
  uint64_t v21;

  id v20 = v0;
  uint64_t v1 = v0[118];
  char v9 = v0[114];
  v0[74] = v0;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v1);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 24, (uint64_t)(v0 + 27));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 104, (uint64_t)(v0 + 32));
  swift_release();
  id v7 = v0[35];
  uint64_t v6 = v0[36];
  __swift_project_boxed_opaque_existential_1(v0 + 32, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  swift_retain();
  uint64_t v8 = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  id v10 = type metadata accessor for RequestPaymentCATs();
  void v19[3] = v10;
  v19[4] = &protocol witness table for RequestPaymentCATs;
  v19[0] = v8;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 27), (uint64_t)&v18, (uint64_t)v19, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  id v17 = IntentResolutionRecord.app.getter();
  v0[150] = v17;
  id v16 = IntentResolutionRecord.intent.getter();
  v0[151] = v16;
  uint64_t v13 = (void *)v0[78];
  v0[152] = v13;
  uint64_t v2 = v13;
  swift_retain();
  id v11 = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  v0[40] = v10;
  v0[41] = &protocol witness table for RequestPaymentCATs;
  id v14 = (uint64_t)(v0 + 37);
  v0[37] = v11;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v12 + 1224) = v3;
  uint64_t v15 = type metadata accessor for INRequestPaymentIntent();
  id v4 = type metadata accessor for INRequestPaymentIntentResponse();
  *uint64_t v3 = *(void *)(v12 + 592);
  v3[1] = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(v17, v16, (uint64_t)v13, v14, v15, v4, (uint64_t)&protocol witness table for INRequestPaymentIntent, (uint64_t)&protocol witness table for INRequestPaymentIntentResponse);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 1232);
  uint64_t v15 = *(id *)(v0 + 1128);
  id v16 = *(id *)(v0 + 1112);
  id v17 = *(id *)(v0 + 1104);
  uint64_t v18 = *(id *)(v0 + 1096);
  id v19 = *(void *)(v0 + 1080);
  uint64_t v13 = *(void *)(v0 + 968);
  uint64_t v12 = *(void *)(v0 + 960);
  id v14 = *(void *)(v0 + 952);
  id v10 = *(void *)(v0 + 944);
  char v9 = *(void *)(v0 + 936);
  id v11 = *(void *)(v0 + 928);
  uint64_t v8 = *(void *)(v0 + 920);
  uint64_t v6 = *(void *)(v0 + 912);
  id v7 = *(uint64_t **)(v0 + 896);
  *(void *)(v0 + 592) = v0;
  *(void *)(v0 + 816) = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, v0 + 336);
  swift_release();
  uint64_t v5 = *(void *)(v0 + 360);
  id v4 = *(void *)(v0 + 368);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v11);
  *(void *)(v0 + 416) = 0;
  *(void *)(v0 + 424) = 0;
  *(void *)(v0 + 432) = 0;
  *(void *)(v0 + 440) = 0;
  *(void *)(v0 + 448) = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 416);
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0(v0 + 376);
  __swift_destroy_boxed_opaque_existential_0(v0 + 336);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 592) + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 1152);
  id v4 = *(id *)(v0 + 1128);
  uint64_t v5 = *(id *)(v0 + 1112);
  uint64_t v6 = *(id *)(v0 + 1104);
  id v7 = *(id *)(v0 + 1096);
  uint64_t v8 = *(void *)(v0 + 1080);
  *(void *)(v0 + 592) = v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 592) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = *(id *)(v0 + 1128);
  id v4 = *(id *)(v0 + 1112);
  uint64_t v5 = *(id *)(v0 + 1104);
  uint64_t v6 = *(id *)(v0 + 1096);
  id v7 = *(void *)(v0 + 1080);
  *(void *)(v0 + 592) = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 592) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = *(id *)(v0 + 1216);
  id v4 = *(id *)(v0 + 1208);
  id v11 = *(id *)(v0 + 1128);
  uint64_t v12 = *(id *)(v0 + 1112);
  uint64_t v13 = *(id *)(v0 + 1104);
  id v14 = *(id *)(v0 + 1096);
  uint64_t v15 = *(void *)(v0 + 1080);
  char v9 = *(void *)(v0 + 968);
  uint64_t v8 = *(void *)(v0 + 960);
  id v10 = *(void *)(v0 + 952);
  id v7 = *(void *)(v0 + 944);
  uint64_t v5 = *(void *)(v0 + 936);
  uint64_t v6 = *(void *)(v0 + 928);
  *(void *)(v0 + 592) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 296);

  swift_release();
  outlined destroy of ConfirmationViewBuilder(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 592) + 8);
  return v1();
}

uint64_t RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  char v9 = (void *)*v2;
  uint64_t v7 = *v2 + 16;
  uint64_t v8 = *v2 + 296;
  v9[74] = *v2;
  v9[154] = a1;
  v9[155] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {
    uint64_t v5 = *(void **)(v7 + 1200);
    uint64_t v6 = *(void **)(v7 + 1192);
    __swift_destroy_boxed_opaque_existential_0(v8);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v7);
    uint64_t v3 = RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

INRequestPaymentIntentResponse __swiftcall INRequestPaymentIntentResponse.__allocating_init(code:userActivity:)(INRequestPaymentIntentResponseCode code, NSUserActivity_optional userActivity)
{
  Class isa = userActivity.value.super.isa;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INRequestPaymentIntentResponse)@nonobjc INRequestPaymentIntentResponse.init(code:userActivity:)(code, isa);
}

INPaymentRecord_optional __swiftcall INPaymentRecord.__allocating_init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(INPerson_optional payee, INPerson_optional payer, INCurrencyAmount_optional currencyAmount, INPaymentMethod_optional paymentMethod, Swift::String_optional note, INPaymentStatus status, INCurrencyAmount_optional feeAmount)
{
  Class isa = payee.value.super.isa;
  uint64_t v10 = *(void **)&payee.is_nil;
  Class v11 = payer.value.super.isa;
  uint64_t v12 = *(void **)&payer.is_nil;
  Class v13 = currencyAmount.value.super.isa;
  uint64_t v14 = *(void *)&currencyAmount.is_nil;
  Class v15 = paymentMethod.value.super.isa;
  id v16 = *(void **)&paymentMethod.is_nil;
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v8 = (objc_class *)@nonobjc INPaymentRecord.init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(isa, v10, v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16);
  result.value.super.Class isa = v8;
  result.is_nil = v9;
  return result;
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[47] = v4;
  v5[46] = a4;
  v5[45] = a3;
  v5[44] = a2;
  v5[43] = a1;
  v5[37] = v5;
  v5[38] = 0;
  v5[39] = 0;
  unsigned char v5[40] = 0;
  v5[41] = 0;
  v5[42] = 0;
  type metadata accessor for CATOption();
  v5[48] = swift_task_alloc();
  v5[38] = a2;
  v5[39] = a3;
  unsigned char v5[40] = a4;
  v5[41] = v4;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)()
{
  uint64_t v4 = v0[45];
  v0[37] = v0;
  type metadata accessor for RequestPaymentCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  v0[49] = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 400) = v1;
  *uint64_t v1 = *(void *)(v3 + 296);
  v1[1] = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  return RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[5];
  void *v23;
  uint64_t v24;
  unint64_t v25;
  _UNKNOWN **v26;
  _UNKNOWN **v27;

  uint64_t v23 = v0;
  uint64_t v1 = v0[51];
  uint64_t v12 = v0[47];
  v0[37] = v0;
  v0[42] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 104, (uint64_t)(v0 + 22));
  swift_release();
  Swift::Bool v9 = v0[25];
  uint64_t v8 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  swift_retain();
  uint64_t v10 = *(void *)(v12 + 16);
  swift_retain();
  swift_release();
  Class v13 = type metadata accessor for RequestPaymentCATs();
  void v22[3] = v13;
  v22[4] = &protocol witness table for RequestPaymentCATs;
  v22[0] = v10;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v21, (uint64_t)v22, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  id v20 = IntentResolutionRecord.app.getter();
  v0[53] = v20;
  id v16 = IntentResolutionRecord.intent.getter();
  v0[54] = v16;
  swift_retain();
  Class v11 = *(void *)(v12 + 16);
  swift_retain();
  swift_release();
  v0[30] = v13;
  v0[31] = &protocol witness table for RequestPaymentCATs;
  id v17 = (uint64_t)(v0 + 27);
  v0[27] = v11;
  swift_retain();
  uint64_t v14 = *(void *)(v12 + 16);
  swift_retain();
  swift_release();
  v0[35] = v13;
  v0[36] = &protocol witness table for RequestPaymentCATs;
  uint64_t v18 = (uint64_t)(v0 + 32);
  v0[32] = v14;
  id v2 = (void *)swift_task_alloc();
  v15[55] = v2;
  id v19 = type metadata accessor for INRequestPaymentIntent();
  uint64_t v3 = type metadata accessor for INRequestPaymentIntentResponse();
  *id v2 = v15[37];
  v2[1] = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  uint64_t v4 = v15[51];
  uint64_t v5 = v15[46];
  uint64_t v6 = v15[43];
  id v25 = v3;
  id v26 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v27 = &protocol witness table for INRequestPaymentIntentResponse;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(v6, v20, v16, v5, v4, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = *v1 + 216;
  id v7 = *v1 + 256;
  *(void *)(v8 + 296) = *v1;
  *(void *)(v8 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  }
  else
  {
    uint64_t v4 = *(void **)(v5 + 416);
    __swift_destroy_boxed_opaque_existential_0(v7);
    __swift_destroy_boxed_opaque_existential_0(v6);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
    id v2 = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 408);
  *(void *)(v0 + 296) = v0;

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(*(void *)(v0 + 296) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 296) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 296) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[54];
  uint64_t v4 = (id)v0[51];
  v0[37] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[37] + 8);
  return v1();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[37] = *v2;
  v5[51] = a1;
  v5[52] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = RequestPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:response:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[33] = v3;
  v4[32] = a3;
  v4[31] = a1;
  v4[26] = v4;
  v4[27] = 0;
  v4[28] = 0;
  v4[29] = 0;
  v4[22] = 0;
  v4[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v4[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v4[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v4[36] = v5;
  v4[37] = *(void *)(v5 - 8);
  v4[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[39] = v6;
  v4[40] = *(void *)(v6 - 8);
  v4[41] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v4[42] = swift_task_alloc();
  v4[27] = a2;
  v4[28] = a3;
  v4[29] = v3;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)()
{
  uint64_t v43 = v0;
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 312);
  *(void *)(v0 + 208) = v0;
  uint64_t v1 = SignpostName.makeRequestPaymentErrorResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  id v23 = (id)IntentResolutionRecord.intentResponse.getter();
  id v24 = objc_msgSend(v23, sel_code);

  uint64_t v27 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)v24);
  uint64_t v28 = v2;
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 176) = v27;
  *(void *)(v0 + 184) = v2;
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v3, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v29 = *(_DWORD *)(v0 + 368);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v4;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v38 = buf;
    uint64_t v39 = v18;
    uint64_t v40 = v19;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    Swift::String v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    Swift::String v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    Swift::String v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25D85A000, v36, v37, "#RequestPaymentConfirmIntentStrategy makeErrorResponse, code %s", buf, v29);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = v20[41];
  uint64_t v11 = v20[39];
  uint64_t v12 = v20[33];
  uint64_t v9 = v20[40];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 144, (uint64_t)(v20 + 2));
  swift_release();
  uint64_t v13 = v20[5];
  uint64_t v14 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v13);
  Class v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 48) + **(int **)(v14 + 48));
  uint64_t v5 = (void *)swift_task_alloc();
  v20[44] = v5;
  *uint64_t v5 = v20[26];
  v5[1] = RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  uint64_t v6 = v20[35];
  uint64_t v7 = v20[32];
  return v15(v6, v7, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 208) = *v1;
  *(void *)(v4 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  }
  else
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[37];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[35];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[42];
    outlined destroy of TemplatingResult?(v24[35]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[25] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  else
  {
    uint64_t v21 = v24[42];
    uint64_t v22 = v24[38];
    id v20 = v24[36];
    id v23 = v24[34];
    id v17 = v24[33];
    uint64_t v18 = (uint64_t *)v24[31];
    uint64_t v19 = v24[37];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    Class v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 336);
  *(void *)(v0 + 208) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 208) + 8);
  return v1();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[34] = v6;
  v3[35] = *(void *)(v6 - 8);
  v3[36] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[37] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)()
{
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 272);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v17);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v3, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v20 = *(unsigned int *)(v0 + 328);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    *(void *)(v16 + 168) = buf;
    *(void *)(v16 + 176) = v13;
    *(void *)(v16 + 184) = v14;
    serialize(_:at:)(0, (unsigned char **)(v16 + 168));
    serialize(_:at:)(0, (unsigned char **)(v16 + 168));
    *(void *)(v16 + 192) = v23;
    Class v15 = (void *)swift_task_alloc();
    v15[2] = v16 + 168;
    v15[3] = v16 + 176;
    v15[4] = v16 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v22, v21, "#RequestPaymentConfirmIntentStrategy makeConfirmationRejectedResponse", buf, v20);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v16 + 288);
  uint64_t v9 = *(void *)(v16 + 272);
  uint64_t v10 = *(void *)(v16 + 208);
  uint64_t v7 = *(void *)(v16 + 280);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  *(void *)(v16 + 304) = *(void *)(v10 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v16 + 312) = v4;
  *uint64_t v4 = *(void *)(v16 + 136);
  v4[1] = RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  uint64_t v5 = *(void *)(v16 + 264);
  return RequestPaymentCATs.promptCancelled()(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  }
  else
  {
    swift_release();
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v11 = v0[37];
  uint64_t v12 = v0[33];
  uint64_t v9 = v0[32];
  uint64_t v10 = v0[31];
  uint64_t v13 = v0[30];
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[28];
  uint64_t v14 = v0[27];
  uint64_t v5 = v0[26];
  uint64_t v6 = (uint64_t *)v0[25];
  v0[17] = v0;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v13);
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v14, v13, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v8);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  void v6[3] = type metadata accessor for AceOutput();
  v6[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v6);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v10);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[17] + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 296);
  *(void *)(v0 + 136) = v0;
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v1();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 48) = buf;
    *(void *)(v14 + 56) = v11;
    *(void *)(v14 + 64) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    *(void *)(v14 + 72) = v20;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 48;
    void v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#RequestPaymentConfirmIntentStrategy makeRepromptOnEmptyParse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v7 = *(uint64_t **)(v14 + 80);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 16) + 8);
  return v3();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 48) = buf;
    *(void *)(v14 + 56) = v11;
    *(void *)(v14 + 64) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    *(void *)(v14 + 72) = v20;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 48;
    void v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#RequestPaymentConfirmIntentStrategy makeRepromptOnLowConfidence", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v7 = *(uint64_t **)(v14 + 80);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 16) + 8);
  return v3();
}

uint64_t RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:), 0);
}

uint64_t RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 248);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 168) = buf;
    *(void *)(v15 + 176) = v12;
    *(void *)(v15 + 184) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    *(void *)(v15 + 192) = v21;
    uint64_t v14 = (void *)swift_task_alloc();
    void v14[2] = v15 + 168;
    v14[3] = v15 + 176;
    v14[4] = v15 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#RequestPaymentConfirmIntentStrategy makeFlowCancelledResponse", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v15 + 264);
  uint64_t v8 = *(void *)(v15 + 248);
  uint64_t v9 = *(void *)(v15 + 208);
  uint64_t v6 = *(void *)(v15 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(void *)(v15 + 272) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v15 + 280) = v3;
  *uint64_t v3 = *(void *)(v15 + 136);
  v3[1] = RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:);
  uint64_t v4 = *(void *)(v15 + 240);
  return RequestPaymentCATs.promptCancelled()(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentHandleIntentStrategy.makePreHandleIntentOutput(rchRecord:);
  }
  else
  {
    swift_release();
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = v0[30];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[28];
  uint64_t v11 = v0[27];
  uint64_t v6 = v0[26];
  uint64_t v7 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v11, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[17] + 8);
  return v2();
}

uint64_t RequestPaymentConfirmIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return RequestPaymentConfirmIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentConfirmIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  os_log_type_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.actionForInput(_:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RequestPaymentConfirmIntentStrategy.actionForInput(_:confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance RequestPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(a1, a2, a3);
}

id @nonobjc INRequestPaymentIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_msgSend(v2, sel_initWithCode_userActivity_, a1);

  return v5;
}

id @nonobjc INPaymentRecord.init(payee:payer:currencyAmount:paymentMethod:note:status:feeAmount:)(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a6)
  {
    uint64_t v10 = MEMORY[0x2611B9130](a5);
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  id v9 = objc_msgSend(v17, sel_initWithPayee_payer_currencyAmount_paymentMethod_note_status_feeAmount_, a1, a2, a3, a4, a8);

  return v9;
}

uint64_t sub_25D9C81C4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C8204()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C8230()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C825C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C829C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C82DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C831C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C8348()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C8374()
{
  return swift_deallocObject();
}

uint64_t sub_25D9C83B4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentConfirmIntentStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentConfirmIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t PaymentsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v33 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v46 = 0;
  uint32_t v29 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  uint64_t v30 = 0;
  uint64_t v38 = *v4;
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v41 - 8);
  uint64_t v40 = v41 - 8;
  unint64_t v35 = (*(void *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v5 = (char *)v15 - v35;
  uint64_t v37 = (char *)v15 - v35;
  uint64_t v62 = MEMORY[0x270FA5388](v34);
  uint64_t v61 = v6;
  uint64_t v60 = *(void *)(v38 + 80);
  uint64_t v58 = v7;
  uint64_t v59 = v8;
  uint64_t v57 = v36;
  uint64_t v56 = *(void *)(v38 + 88);
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v5, v9, v41);
  uint64_t v48 = Logger.logObject.getter();
  int v47 = static os_log_type_t.debug.getter();
  uint64_t v44 = &v54;
  uint64_t v54 = 2;
  unint64_t v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v45 = v55;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v49 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v48, (os_log_type_t)v47))
  {
    uint64_t v10 = v30;
    os_log_type_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = 0;
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v21 = createStorage<A>(capacity:type:)(v18);
    uint64_t v25 = &v53;
    uint64_t v53 = v19;
    uint64_t v26 = &v52;
    uint64_t v52 = v20;
    uint64_t v23 = &v51;
    uint64_t v51 = v21;
    unsigned int v22 = 0;
    serialize(_:at:)(0, &v53);
    serialize(_:at:)(v22, v25);
    uint64_t v50 = v49;
    uint64_t v24 = v15;
    MEMORY[0x270FA5388](v15);
    uint64_t v11 = v26;
    uint64_t v12 = &v15[-6];
    uint64_t v27 = &v15[-6];
    void v12[2] = v25;
    void v12[3] = v11;
    v12[4] = v13;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v10)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v48, (os_log_type_t)v47, "#PaymentsHandleIntentStrategy makeIntentExecutionBehavior", v19, v45);
      uint64_t v16 = 0;
      destroyStorage<A>(_:count:)(v20, 0, v17);
      destroyStorage<A>(_:count:)(v21, v16, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v41);
  swift_retain();
  type metadata accessor for SiriKitIntentExecutionBehavior();
  v15[1] = static SiriKitIntentExecutionBehavior.standard()();
  v31();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66378](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66380](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66358](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66350](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66370](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66368](a1, a2, v6, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66348](a1, a2, v6, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsHandleIntentStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for PaymentsHandleIntentStrategy();
  *id v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return MEMORY[0x270F68198](a1, a2, v6, a4);
}

uint64_t type metadata accessor for PaymentsHandleIntentStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in PaymentsHandleIntentStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(uint64_t a1)
{
  uint64_t v64 = a1;
  uint64_t v62 = 0;
  uint64_t v51 = partial apply for implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:);
  uint64_t v52 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v78 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v57 - 8;
  unint64_t v60 = (*(void *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v57);
  uint64_t v61 = (char *)&v20 - v60;
  unint64_t v63 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v62);
  uint64_t v69 = (uint64_t)&v20 - v63;
  uint64_t v70 = type metadata accessor for RREntity();
  uint64_t v67 = *(void *)(v70 - 8);
  uint64_t v68 = v70 - 8;
  unint64_t v65 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v64);
  uint64_t v66 = (char *)&v20 - v65;
  uint64_t v82 = (char *)&v20 - v65;
  uint64_t v81 = v2;
  uint64_t v80 = v1;
  ReferenceResolutionClient.resolvePositionEntity(from:useCase:)(v2, 0, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v69, 1, v70) == 1)
  {
    uint64_t v21 = 0;
    outlined destroy of RREntity?(v69);
    return v21;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v66, v69, v70);
    uint64_t v4 = RREntity.usoEntity.getter();
    id v5 = v61;
    uint64_t v32 = v4;
    type metadata accessor for UsoEntity_common_App();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v33 = v79;
    uint64_t v78 = v79;
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v5, v6, v57);
    swift_retain();
    uint64_t v40 = 7;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v33;
    uint64_t v49 = Logger.logObject.getter();
    int v50 = static os_log_type_t.debug.getter();
    uint64_t v36 = &v76;
    uint64_t v76 = 12;
    unint64_t v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v35 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v37 = v77;
    uint64_t v38 = 17;
    uint64_t v43 = swift_allocObject();
    *(unsigned char *)(v43 + 16) = 32;
    uint64_t v44 = swift_allocObject();
    *(unsigned char *)(v44 + 16) = 8;
    uint64_t v39 = 32;
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = v41;
    uint64_t v42 = v7;
    *(void *)(v7 + 16) = v51;
    *(void *)(v7 + 24) = v8;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v42;
    uint64_t v46 = v9;
    *(void *)(v9 + 16) = v52;
    *(void *)(v9 + 24) = v10;
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v45 = _allocateUninitializedArray<A>(_:)();
    int v47 = v11;
    swift_retain();
    uint64_t v12 = v43;
    uint64_t v13 = v47;
    *int v47 = v53;
    v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
    swift_retain();
    uint64_t v14 = v44;
    uint64_t v15 = v47;
    v47[2] = v54;
    v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
    swift_retain();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
    uint64_t v17 = v47;
    v47[4] = v55;
    v17[5] = v16;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      uint64_t v18 = v56;
      uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      uint64_t v27 = createStorage<A>(capacity:type:)(1);
      uint64_t v28 = &v75;
      uint64_t v75 = v25;
      uint32_t v29 = &v74;
      uint64_t v74 = v26;
      uint64_t v30 = &v73;
      uint64_t v73 = v27;
      serialize(_:at:)(2, &v75);
      serialize(_:at:)(1, v28);
      uint64_t v71 = v53;
      uint64_t v72 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v28, (uint64_t)v29, (uint64_t)v30);
      uint64_t v31 = v18;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        uint64_t v71 = v54;
        uint64_t v72 = v44;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        uint64_t v23 = 0;
        uint64_t v71 = v55;
        uint64_t v72 = v46;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        _os_log_impl(&dword_25D85A000, v49, (os_log_type_t)v50, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_App: %s", v25, v37);
        destroyStorage<A>(_:count:)(v26, 0, v24);
        destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v25, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v70);
    return v33;
  }
}

uint64_t ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)(uint64_t a1)
{
  uint64_t v63 = a1;
  uint64_t v61 = 0;
  int v50 = partial apply for implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:);
  uint64_t v51 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v78 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v56 - 8;
  unint64_t v59 = (*(void *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v56);
  unint64_t v60 = (char *)&v20 - v59;
  unint64_t v62 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v61);
  uint64_t v68 = (uint64_t)&v20 - v62;
  uint64_t v70 = type metadata accessor for RREntity();
  uint64_t v66 = *(void *)(v70 - 8);
  uint64_t v67 = v70 - 8;
  unint64_t v64 = (*(void *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v63);
  unint64_t v65 = (char *)&v20 - v64;
  uint64_t v82 = (char *)&v20 - v64;
  uint64_t v81 = v2;
  uint64_t v80 = v1;
  unsigned int v69 = 1;
  ReferenceResolutionClient.resolvePositionEntity(from:useCase:)(v2, 1, v3);
  if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v66 + 48))(v68, v69, v70) == 1)
  {
    uint64_t v20 = 0;
    outlined destroy of RREntity?(v68);
    return v20;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v65, v68, v70);
    uint64_t v4 = RREntity.usoEntity.getter();
    id v5 = v60;
    uint64_t v31 = v4;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v32 = v79;
    uint64_t v78 = v79;
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v5, v6, v56);
    swift_retain();
    uint64_t v39 = 7;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v32;
    uint64_t v48 = Logger.logObject.getter();
    int v49 = static os_log_type_t.debug.getter();
    unint64_t v35 = &v76;
    uint64_t v76 = 12;
    unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v36 = v77;
    uint64_t v37 = 17;
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + 16) = 32;
    uint64_t v43 = swift_allocObject();
    *(unsigned char *)(v43 + 16) = 8;
    uint64_t v38 = 32;
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = v40;
    uint64_t v41 = v7;
    *(void *)(v7 + 16) = v50;
    *(void *)(v7 + 24) = v8;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v41;
    uint64_t v45 = v9;
    *(void *)(v9 + 16) = v51;
    *(void *)(v9 + 24) = v10;
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v44 = _allocateUninitializedArray<A>(_:)();
    uint64_t v46 = v11;
    swift_retain();
    uint64_t v12 = v42;
    uint64_t v13 = v46;
    *uint64_t v46 = v52;
    v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
    swift_retain();
    uint64_t v14 = v43;
    uint64_t v15 = v46;
    v46[2] = v53;
    v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
    swift_retain();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
    uint64_t v17 = v46;
    v46[4] = v54;
    v17[5] = v16;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      uint64_t v18 = v55;
      uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      uint64_t v26 = createStorage<A>(capacity:type:)(1);
      uint64_t v27 = &v75;
      uint64_t v75 = v24;
      uint64_t v28 = &v74;
      uint64_t v74 = v25;
      uint32_t v29 = &v73;
      uint64_t v73 = v26;
      serialize(_:at:)(2, &v75);
      serialize(_:at:)(1, v27);
      uint64_t v71 = v52;
      uint64_t v72 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29);
      uint64_t v30 = v18;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        uint64_t v71 = v53;
        uint64_t v72 = v43;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        uint64_t v22 = 0;
        uint64_t v71 = v54;
        uint64_t v72 = v45;
        closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
        _os_log_impl(&dword_25D85A000, v48, (os_log_type_t)v49, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_Person: %s", v24, v36);
        destroyStorage<A>(_:count:)(v25, 0, v23);
        destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v70);
    return v32;
  }
}

BOOL static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase(unsigned char *a1, unsigned char *a2)
{
  return static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t ReferenceResolutionClient.resolveCommonPerson()@<X0>(void *a1@<X8>)
{
  type metadata accessor for UsoEntityBuilder_common_Person();
  UsoEntityBuilder_common_Person.__allocating_init()();
  uint64_t v4 = MEMORY[0x2611B8260]();
  swift_release();
  if (v4)
  {
    ReferenceResolutionClient.resolveEntity(referenceEntity:)(v4, a1);
    return swift_release();
  }
  else
  {
    uint64_t v2 = type metadata accessor for RREntity();
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1);
  }
}

uint64_t ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v308 = a2;
  uint64_t v396 = a1;
  uint64_t v397 = 0;
  uint64_t v309 = partial apply for implicit closure #3 in LSApplicationIntentSupportResolver.doesAppSupportIntent(appBundleId:intentName:);
  uint64_t v310 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v312 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  long long v314 = partial apply for implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
  v315 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_4;
  uint64_t v316 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v320 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v321 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v322 = partial apply for implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
  v323 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  uint64_t v324 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v325 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v326 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  uint64_t v327 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v328 = partial apply for implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:);
  uint64_t v329 = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  uint64_t v330 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  long long v331 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v332 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v333 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v465 = 0;
  v464 = 0;
  uint64_t v463 = 0;
  uint64_t v462 = 0;
  id v461 = 0;
  uint64_t v334 = 0;
  v466 = 0;
  uint64_t v440 = 0;
  uint64_t v430 = 0;
  uint64_t v422 = 0;
  v467 = 0;
  unint64_t v335 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](0);
  uint64_t v336 = (uint64_t)v115 - v335;
  unint64_t v337 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v338 = (uint64_t)v115 - v337;
  unint64_t v339 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v340 = (uint64_t)v115 - v339;
  uint64_t v341 = type metadata accessor for Logger();
  uint64_t v342 = *(void *)(v341 - 8);
  uint64_t v343 = v341 - 8;
  unint64_t v344 = (*(void *)(v342 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v397);
  uint64_t v345 = (char *)v115 - v344;
  unint64_t v346 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v347 = (char *)v115 - v346;
  unint64_t v348 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v349 = (char *)v115 - v348;
  unint64_t v350 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v351 = (char *)v115 - v350;
  unint64_t v352 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v353 = (char *)v115 - v352;
  unint64_t v354 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v355 = (char *)v115 - v354;
  unint64_t v356 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v17);
  uint64_t v357 = (char *)v115 - v356;
  uint64_t v358 = type metadata accessor for RRCandidate();
  uint64_t v360 = *(void *)(v358 - 8);
  uint64_t v359 = v358 - 8;
  uint64_t v361 = v360;
  uint64_t v362 = *(void *)(v360 + 64);
  unint64_t v363 = (v362 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v397);
  v364 = (char *)v115 - v363;
  unint64_t v365 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v19);
  uint64_t v366 = (char *)v115 - v365;
  v467 = (char *)v115 - v365;
  uint64_t v367 = type metadata accessor for RRResult();
  uint64_t v369 = *(void *)(v367 - 8);
  uint64_t v368 = v367 - 8;
  uint64_t v370 = v369;
  uint64_t v371 = *(void *)(v369 + 64);
  unint64_t v372 = (v371 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v367);
  unint64_t v373 = (id *)((char *)v115 - v372);
  unint64_t v374 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = MEMORY[0x270FA5388]((char *)v115 - v372);
  unint64_t v375 = (void *)((char *)v115 - v374);
  unint64_t v376 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v22);
  unint64_t v377 = (char *)v115 - v376;
  v466 = (char *)v115 - v376;
  unint64_t v378 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v397);
  uint64_t v399 = (uint64_t)v115 - v378;
  uint64_t v402 = type metadata accessor for RRQuery();
  uint64_t v400 = *(void *)(v402 - 8);
  uint64_t v401 = v402 - 8;
  unint64_t v379 = (*(void *)(v400 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v402);
  uint64_t v403 = (void *)((char *)v115 - v379);
  uint64_t v405 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  unint64_t v380 = (*(void *)(*(void *)(v405 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = MEMORY[0x270FA5388](v405);
  uint64_t v406 = (id *)((char *)v115 - v380);
  unint64_t v381 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v24);
  uint64_t v404 = (id *)((char *)v115 - v381);
  v465 = (char *)v115 - v381;
  uint64_t v389 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64);
  unint64_t v382 = (v389 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = MEMORY[0x270FA5388](v397);
  v383 = (char *)v115 - v382;
  unint64_t v384 = (v389 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v385 = (char *)v115 - v384;
  unint64_t v386 = (v389 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v387 = (char *)v115 - v386;
  unint64_t v388 = (v389 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint32_t v390 = (char *)v115 - v388;
  unint64_t v391 = (v389 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v29);
  uint64_t v392 = (char *)v115 - v391;
  v464 = (char *)v115 - v391;
  uint64_t v463 = v30;
  uint64_t v462 = v2;
  uint64_t v393 = type metadata accessor for RREntity();
  uint64_t v31 = *(void *)(v393 - 8);
  uint64_t v394 = *(void (**)(char *, uint64_t))(v31 + 56);
  uint64_t v395 = v31 + 56;
  unsigned int v398 = 1;
  v394(v392, 1);
  swift_retain();
  uint64_t v32 = v400;
  *uint64_t v403 = v396;
  (*(void (**)(void))(v32 + 104))();
  uint64_t v33 = type metadata accessor for RRFilter();
  (*(void (**)(uint64_t, void))(*(void *)(v33 - 8) + 56))(v399, v398);
  dispatch thunk of ReferenceResolutionClient.resolve(reference:filter:)();
  outlined destroy of RRFilter?(v399);
  (*(void (**)(void *, uint64_t))(v400 + 8))(v403, v402);
  outlined init with copy of Result<RRResult, Error>(v404, v406);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v303 = *(void (**)(char *, id *, uint64_t))(v369 + 32);
    uint64_t v304 = v369 + 32;
    v303(v377, v406, v367);
    v466 = v377;
    uint64_t v305 = *(void (**)(uint64_t *))(v369 + 16);
    uint64_t v306 = v369 + 16;
    v305(v375);
    int v307 = (*(uint64_t (**)(uint64_t *, uint64_t))(v369 + 88))(v375, v367);
    if (v307 == *MEMORY[0x263F742B8])
    {
      unint64_t v34 = v357;
      (*(void (**)(uint64_t *, uint64_t))(v369 + 96))(v375, v367);
      uint64_t v281 = v361;
      uint64_t v284 = *(void (**)(char *, uint64_t *, uint64_t))(v360 + 32);
      uint64_t v283 = v360 + 32;
      v284(v366, v375, v358);
      v467 = v366;
      uint64_t v35 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v34, v35, v341);
      (*(void (**)(char *, char *, uint64_t))(v360 + 16))(v364, v366, v358);
      unint64_t v282 = (*(unsigned __int8 *)(v281 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80);
      uint64_t v292 = 7;
      uint64_t v285 = swift_allocObject();
      v284((char *)(v285 + v282), (uint64_t *)v364, v358);
      swift_retain();
      uint64_t v291 = 32;
      uint64_t v36 = swift_allocObject();
      uint64_t v37 = v285;
      uint64_t v293 = v36;
      *(void *)(v36 + 16) = v328;
      *(void *)(v36 + 24) = v37;
      swift_release();
      uint64_t v301 = Logger.logObject.getter();
      int v302 = static os_log_type_t.debug.getter();
      uint64_t v288 = &v412;
      uint64_t v412 = 12;
      unint64_t v286 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v287 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v289 = v413;
      uint64_t v290 = 17;
      uint64_t v295 = swift_allocObject();
      *(unsigned char *)(v295 + 16) = 32;
      uint64_t v296 = swift_allocObject();
      *(unsigned char *)(v296 + 16) = 8;
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v293;
      uint64_t v294 = v38;
      *(void *)(v38 + 16) = v329;
      *(void *)(v38 + 24) = v39;
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = v294;
      uint64_t v298 = v40;
      *(void *)(v40 + 16) = v330;
      *(void *)(v40 + 24) = v41;
      uint64_t v300 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v297 = _allocateUninitializedArray<A>(_:)();
      uint64_t v299 = v42;
      swift_retain();
      uint64_t v43 = v295;
      uint64_t v44 = v299;
      *uint64_t v299 = v331;
      v44[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
      swift_retain();
      uint64_t v45 = v296;
      uint64_t v46 = v299;
      v299[2] = v332;
      v46[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
      swift_retain();
      uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v298;
      uint64_t v48 = v299;
      v299[4] = v333;
      v48[5] = v47;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v301, (os_log_type_t)v302))
      {
        uint64_t v49 = v334;
        uint32_t v274 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v275 = createStorage<A>(capacity:type:)(0);
        uint64_t v276 = createStorage<A>(capacity:type:)(1);
        uint64_t v277 = &v411;
        uint64_t v411 = v274;
        uint64_t v278 = &v410;
        uint64_t v410 = v275;
        uint64_t v279 = &v409;
        uint64_t v409 = v276;
        serialize(_:at:)(2, &v411);
        serialize(_:at:)(1, v277);
        uint64_t v407 = v331;
        uint64_t v408 = v295;
        closure #1 in osLogInternal(_:log:type:)(&v407, (uint64_t)v277, (uint64_t)v278, (uint64_t)v279);
        uint64_t v280 = v49;
        if (v49)
        {
          __break(1u);
        }
        else
        {
          uint64_t v407 = v332;
          uint64_t v408 = v296;
          closure #1 in osLogInternal(_:log:type:)(&v407, (uint64_t)&v411, (uint64_t)&v410, (uint64_t)&v409);
          uint64_t v272 = 0;
          uint64_t v407 = v333;
          uint64_t v408 = v298;
          closure #1 in osLogInternal(_:log:type:)(&v407, (uint64_t)&v411, (uint64_t)&v410, (uint64_t)&v409);
          _os_log_impl(&dword_25D85A000, v301, (os_log_type_t)v302, "#ReferenceResolution Found a candidate %s", v274, v289);
          destroyStorage<A>(_:count:)(v275, 0, v273);
          destroyStorage<A>(_:count:)(v276, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v274, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v342 + 8))(v357, v341);
      RRCandidate.entity.getter();
      ((void (*)(char *, void, uint64_t, uint64_t))v394)(v390, 0, 1, v393);
      outlined assign with take of RREntity?(v390, v392);
      (*(void (**)(char *, uint64_t))(v360 + 8))(v366, v358);
      goto LABEL_57;
    }
    if (v307 == *MEMORY[0x263F742C8])
    {
      unint64_t v64 = v353;
      (*(void (**)(uint64_t *, uint64_t))(v369 + 96))(v375, v367);
      uint64_t v233 = *v375;
      uint64_t v430 = v233;
      uint64_t v65 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v64, v65, v341);
      uint64_t v239 = Logger.logObject.getter();
      int v238 = static os_log_type_t.debug.getter();
      os_log_type_t v236 = &v428;
      uint64_t v428 = 2;
      unint64_t v234 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v235 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v237 = v429;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v240 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v239, (os_log_type_t)v238))
      {
        uint64_t v66 = v334;
        uint64_t v223 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v222 = 0;
        uint64_t v224 = createStorage<A>(capacity:type:)(0);
        uint64_t v225 = createStorage<A>(capacity:type:)(v222);
        uint64_t v229 = &v426;
        uint64_t v426 = v223;
        uint64_t v230 = &v425;
        uint64_t v425 = v224;
        uint64_t v227 = &v424;
        uint64_t v424 = v225;
        unsigned int v226 = 0;
        serialize(_:at:)(0, &v426);
        serialize(_:at:)(v226, v229);
        uint64_t v423 = v240;
        uint32_t v228 = v115;
        MEMORY[0x270FA5388](v115);
        uint64_t v67 = v230;
        uint64_t v68 = &v115[-6];
        uint64_t v231 = &v115[-6];
        void v68[2] = v229;
        v68[3] = v67;
        v68[4] = v69;
        uint64_t v232 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v66)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v239, (os_log_type_t)v238, "#ReferenceResolution Found ambiguous entities -> returning the first one", v223, v237);
          uint64_t v220 = 0;
          destroyStorage<A>(_:count:)(v224, 0, v221);
          destroyStorage<A>(_:count:)(v225, v220, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v223, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v342 + 8))(v353, v341);
      swift_bridgeObjectRetain();
      uint64_t v219 = &v427;
      uint64_t v427 = v233;
      uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v360 + 48))(v338, 1, v358) == 1)
      {
        outlined destroy of RRCandidate?(v338);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v394)(v385, 1, 1, v393);
      }
      else
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v338, v358);
        ((void (*)(char *, void, uint64_t, uint64_t))v394)(v385, 0, 1, v393);
      }
      outlined assign with take of RREntity?(v385, v392);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    if (v307 == *MEMORY[0x263F742C0])
    {
      int v50 = v355;
      (*(void (**)(uint64_t *, uint64_t))(v369 + 96))(v375, v367);
      uint64_t v254 = *v375;
      uint64_t v422 = v254;
      uint64_t v51 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v50, v51, v341);
      swift_bridgeObjectRetain();
      uint64_t v261 = 7;
      uint64_t v262 = swift_allocObject();
      *(void *)(v262 + 16) = v254;
      uint64_t v270 = Logger.logObject.getter();
      int v271 = static os_log_type_t.debug.getter();
      uint64_t v257 = &v420;
      uint64_t v420 = 12;
      unint64_t v255 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v256 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v258 = v421;
      uint64_t v259 = 17;
      uint64_t v264 = swift_allocObject();
      *(unsigned char *)(v264 + 16) = 0;
      uint64_t v265 = swift_allocObject();
      *(unsigned char *)(v265 + 16) = 8;
      uint64_t v260 = 32;
      uint64_t v52 = swift_allocObject();
      uint64_t v53 = v262;
      uint64_t v263 = v52;
      *(void *)(v52 + 16) = v322;
      *(void *)(v52 + 24) = v53;
      uint64_t v54 = swift_allocObject();
      uint64_t v55 = v263;
      uint64_t v267 = v54;
      *(void *)(v54 + 16) = v323;
      *(void *)(v54 + 24) = v55;
      uint64_t v269 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v266 = _allocateUninitializedArray<A>(_:)();
      uint32_t v268 = v56;
      swift_retain();
      uint64_t v57 = v264;
      uint64_t v58 = v268;
      *uint32_t v268 = v324;
      v58[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v57;
      swift_retain();
      uint64_t v59 = v265;
      unint64_t v60 = v268;
      v268[2] = v325;
      v60[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
      swift_retain();
      uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v267;
      unint64_t v62 = v268;
      v268[4] = v326;
      v62[5] = v61;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v270, (os_log_type_t)v271))
      {
        uint64_t v63 = v334;
        uint64_t v247 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v246 = 0;
        uint64_t v248 = createStorage<A>(capacity:type:)(0);
        uint64_t v249 = createStorage<A>(capacity:type:)(v246);
        unint64_t v250 = &v418;
        uint64_t v418 = v247;
        int v251 = &v417;
        uint64_t v417 = v248;
        unint64_t v252 = &v416;
        uint64_t v416 = v249;
        serialize(_:at:)(0, &v418);
        serialize(_:at:)(1, v250);
        uint64_t v414 = v324;
        uint64_t v415 = v264;
        closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)v250, (uint64_t)v251, (uint64_t)v252);
        uint64_t v253 = v63;
        if (v63)
        {
          __break(1u);
        }
        else
        {
          uint64_t v414 = v325;
          uint64_t v415 = v265;
          closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v416);
          uint64_t v244 = 0;
          uint64_t v414 = v326;
          uint64_t v415 = v267;
          closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v416);
          _os_log_impl(&dword_25D85A000, v270, (os_log_type_t)v271, "#ReferenceResolution Found %ld candidates. Using the first one", v247, v258);
          uint64_t v243 = 0;
          destroyStorage<A>(_:count:)(v248, 0, v245);
          destroyStorage<A>(_:count:)(v249, v243, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v247, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v342 + 8))(v355, v341);
      swift_bridgeObjectRetain();
      uint64_t v242 = &v419;
      uint64_t v419 = v254;
      uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v360 + 48))(v340, 1, v358) == 1)
      {
        outlined destroy of RRCandidate?(v340);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v394)(v387, 1, 1, v393);
      }
      else
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v340, v358);
        ((void (*)(char *, void, uint64_t, uint64_t))v394)(v387, 0, 1, v393);
      }
      outlined assign with take of RREntity?(v387, v392);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    if (v307 != *MEMORY[0x263F742D0])
    {
      if (v307 == *MEMORY[0x263F742D8])
      {
        uint32_t v77 = v349;
        uint64_t v78 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v77, v78, v341);
        uint64_t v188 = Logger.logObject.getter();
        int v187 = static os_log_type_t.debug.getter();
        uint64_t v185 = &v445;
        uint64_t v445 = 2;
        unint64_t v183 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v184 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v186 = v446;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v189 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v188, (os_log_type_t)v187))
        {
          uint64_t v79 = v334;
          id v173 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v172 = 0;
          uint64_t v174 = createStorage<A>(capacity:type:)(0);
          uint64_t v175 = createStorage<A>(capacity:type:)(v172);
          uint64_t v179 = &v444;
          uint64_t v444 = v173;
          int v180 = &v443;
          uint64_t v443 = v174;
          uint64_t v177 = &v442;
          uint64_t v442 = v175;
          unsigned int v176 = 0;
          serialize(_:at:)(0, &v444);
          serialize(_:at:)(v176, v179);
          uint64_t v441 = v189;
          uint64_t v178 = v115;
          MEMORY[0x270FA5388](v115);
          uint64_t v80 = v180;
          uint64_t v81 = &v115[-6];
          int v181 = &v115[-6];
          v81[2] = v179;
          v81[3] = v80;
          v81[4] = v82;
          uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v79)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25D85A000, v188, (os_log_type_t)v187, "#ReferenceResolution No matches found", v173, v186);
            uint64_t v170 = 0;
            destroyStorage<A>(_:count:)(v174, 0, v171);
            destroyStorage<A>(_:count:)(v175, v170, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v173, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v342 + 8))(v349, v341);
      }
      else
      {
        uint64_t v83 = v347;
        uint64_t v84 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v83, v84, v341);
        ((void (*)(id *, char *, uint64_t))v305)(v373, v377, v367);
        unint64_t v151 = (*(unsigned __int8 *)(v370 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v370 + 80);
        uint64_t v159 = 7;
        uint64_t v152 = swift_allocObject();
        v303((char *)(v152 + v151), v373, v367);
        swift_retain();
        uint64_t v158 = 32;
        uint64_t v85 = swift_allocObject();
        uint64_t v86 = v152;
        uint64_t v160 = v85;
        *(void *)(v85 + 16) = v314;
        *(void *)(v85 + 24) = v86;
        swift_release();
        id v168 = Logger.logObject.getter();
        int v169 = static os_log_type_t.error.getter();
        uint64_t v155 = &v452;
        uint64_t v452 = 12;
        unint64_t v153 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v154 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v156 = v453;
        uint64_t v157 = 17;
        uint64_t v162 = swift_allocObject();
        *(unsigned char *)(v162 + 16) = 32;
        uint64_t v163 = swift_allocObject();
        *(unsigned char *)(v163 + 16) = 8;
        uint64_t v87 = swift_allocObject();
        uint64_t v88 = v160;
        uint64_t v161 = v87;
        *(void *)(v87 + 16) = v315;
        *(void *)(v87 + 24) = v88;
        uint64_t v89 = swift_allocObject();
        uint64_t v90 = v161;
        uint64_t v165 = v89;
        *(void *)(v89 + 16) = v316;
        *(void *)(v89 + 24) = v90;
        uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v164 = _allocateUninitializedArray<A>(_:)();
        uint64_t v166 = v91;
        swift_retain();
        uint64_t v92 = v162;
        id v93 = v166;
        *uint64_t v166 = v317;
        v93[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
        swift_retain();
        uint64_t v94 = v163;
        uint64_t v95 = v166;
        v166[2] = v318;
        v95[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v94;
        swift_retain();
        uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v165;
        uint64_t v97 = v166;
        v166[4] = v319;
        v97[5] = v96;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v168, (os_log_type_t)v169))
        {
          uint64_t v98 = v334;
          uint64_t v144 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v145 = createStorage<A>(capacity:type:)(0);
          uint64_t v146 = createStorage<A>(capacity:type:)(1);
          int v147 = &v451;
          v451 = v144;
          uint64_t v148 = &v450;
          uint64_t v450 = v145;
          uint64_t v149 = &v449;
          uint64_t v449 = v146;
          serialize(_:at:)(2, &v451);
          serialize(_:at:)(1, v147);
          v447 = v317;
          uint64_t v448 = v162;
          closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)v147, (uint64_t)v148, (uint64_t)v149);
          uint64_t v150 = v98;
          if (v98)
          {
            __break(1u);
          }
          else
          {
            v447 = v318;
            uint64_t v448 = v163;
            closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v451, (uint64_t)&v450, (uint64_t)&v449);
            uint64_t v142 = 0;
            v447 = v319;
            uint64_t v448 = v165;
            closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v451, (uint64_t)&v450, (uint64_t)&v449);
            _os_log_impl(&dword_25D85A000, v168, (os_log_type_t)v169, "#ReferenceResolution Received unknown result type %s", v144, v156);
            destroyStorage<A>(_:count:)(v145, 0, v143);
            destroyStorage<A>(_:count:)(v146, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v144, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v342 + 8))(v347, v341);
        (*(void (**)(uint64_t *, uint64_t))(v369 + 8))(v375, v367);
      }
      goto LABEL_57;
    }
    uint64_t v70 = v351;
    (*(void (**)(uint64_t *, uint64_t))(v369 + 96))(v375, v367);
    uint64_t v210 = *v375;
    uint64_t v440 = v210;
    uint64_t v71 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v70, v71, v341);
    uint64_t v216 = Logger.logObject.getter();
    int v215 = static os_log_type_t.debug.getter();
    NSUserActivity_optional v213 = &v438;
    uint64_t v438 = 2;
    unint64_t v211 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v212 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v214 = v439;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v217 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v216, (os_log_type_t)v215))
    {
      uint64_t v72 = v334;
      uint64_t v200 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v199 = 0;
      uint64_t v201 = createStorage<A>(capacity:type:)(0);
      uint64_t v202 = createStorage<A>(capacity:type:)(v199);
      uint64_t v206 = &v434;
      uint64_t v434 = v200;
      uint64_t v207 = &v433;
      uint64_t v433 = v201;
      uint64_t v204 = &v432;
      uint64_t v432 = v202;
      unsigned int v203 = 0;
      serialize(_:at:)(0, &v434);
      serialize(_:at:)(v203, v206);
      uint64_t v431 = v217;
      uint64_t v205 = v115;
      MEMORY[0x270FA5388](v115);
      uint64_t v73 = v207;
      uint64_t v74 = &v115[-6];
      uint64_t v208 = &v115[-6];
      v74[2] = v206;
      v74[3] = v73;
      v74[4] = v75;
      uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v72)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v216, (os_log_type_t)v215, "#ReferenceResolution Found ambiguous entities -> returning the first one", v200, v214);
        uint64_t v197 = 0;
        destroyStorage<A>(_:count:)(v201, 0, v198);
        destroyStorage<A>(_:count:)(v202, v197, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v200, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v342 + 8))(v351, v341);
    swift_bridgeObjectRetain();
    uint64_t v195 = &v436;
    uint64_t v436 = v210;
    uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[RRCandidate]]);
    lazy protocol witness table accessor for type [[RRCandidate]] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    uint64_t v196 = v437;
    if (v437)
    {
      uint64_t v193 = v196;
      uint64_t v192 = v196;
      swift_bridgeObjectRetain();
      uint64_t v191 = &v435;
      uint64_t v435 = v192;
      uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RRCandidate]);
      lazy protocol witness table accessor for type [RRCandidate] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v360 + 48))(v336, 1, v358) != 1)
      {
        RRCandidate.entity.getter();
        (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v336, v358);
        ((void (*)(char *, void, uint64_t, uint64_t))v394)(v383, 0, 1, v393);
LABEL_43:
        outlined assign with take of RREntity?(v383, v392);
        swift_bridgeObjectRelease();
LABEL_57:
        (*(void (**)(char *, uint64_t))(v369 + 8))(v377, v367);
        goto LABEL_64;
      }
      outlined destroy of RRCandidate?(v336);
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v394)(v383, 1, 1, v393);
    goto LABEL_43;
  }
  uint64_t v99 = v345;
  id v124 = *v406;
  id v461 = v124;
  uint64_t v100 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v342 + 16))(v99, v100, v341);
  id v101 = v124;
  uint64_t v131 = 7;
  uint64_t v132 = swift_allocObject();
  *(void *)(v132 + 16) = v124;
  uint64_t v140 = Logger.logObject.getter();
  int v141 = static os_log_type_t.error.getter();
  uint64_t v127 = &v459;
  uint64_t v459 = 12;
  unint64_t v125 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v126 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v128 = v460;
  uint64_t v129 = 17;
  uint64_t v134 = swift_allocObject();
  *(unsigned char *)(v134 + 16) = 32;
  uint64_t v135 = swift_allocObject();
  *(unsigned char *)(v135 + 16) = 8;
  uint64_t v130 = 32;
  uint64_t v102 = swift_allocObject();
  uint64_t v103 = v132;
  uint64_t v133 = v102;
  *(void *)(v102 + 16) = v309;
  *(void *)(v102 + 24) = v103;
  uint64_t v104 = swift_allocObject();
  uint64_t v105 = v133;
  uint64_t v137 = v104;
  *(void *)(v104 + 16) = v310;
  *(void *)(v104 + 24) = v105;
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v136 = _allocateUninitializedArray<A>(_:)();
  uint64_t v138 = v106;
  swift_retain();
  uint64_t v107 = v134;
  uint64_t v108 = v138;
  void *v138 = v311;
  v108[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v107;
  swift_retain();
  uint64_t v109 = v135;
  uint64_t v110 = v138;
  v138[2] = v312;
  void v110[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
  swift_retain();
  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v137;
  uint64_t v112 = v138;
  v138[4] = v313;
  v112[5] = v111;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v140, (os_log_type_t)v141))
  {
    uint64_t v113 = v334;
    id v117 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v118 = createStorage<A>(capacity:type:)(0);
    uint64_t v119 = createStorage<A>(capacity:type:)(1);
    uint64_t v120 = &v458;
    v458 = v117;
    uint64_t v121 = &v457;
    uint64_t v457 = v118;
    uint64_t v122 = &v456;
    uint64_t v456 = v119;
    serialize(_:at:)(2, &v458);
    serialize(_:at:)(1, v120);
    v454 = v311;
    uint64_t v455 = v134;
    closure #1 in osLogInternal(_:log:type:)(&v454, (uint64_t)v120, (uint64_t)v121, (uint64_t)v122);
    uint64_t v123 = v113;
    if (v113)
    {
      __break(1u);
    }
    else
    {
      v454 = v312;
      uint64_t v455 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v454, (uint64_t)&v458, (uint64_t)&v457, (uint64_t)&v456);
      v115[1] = 0;
      v454 = v313;
      uint64_t v455 = v137;
      closure #1 in osLogInternal(_:log:type:)(&v454, (uint64_t)&v458, (uint64_t)&v457, (uint64_t)&v456);
      _os_log_impl(&dword_25D85A000, v140, (os_log_type_t)v141, "#ReferenceResolution Received a failure: %s -> nil", v117, v128);
      destroyStorage<A>(_:count:)(v118, 0, v116);
      destroyStorage<A>(_:count:)(v119, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v117, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v342 + 8))(v345, v341);
LABEL_64:
  outlined init with copy of RREntity?(v392, v308);
  outlined destroy of Result<RRResult, Error>(v404);
  return outlined destroy of RREntity?((uint64_t)v392);
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = type metadata accessor for RRCandidate();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
}

uint64_t implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for RRCandidate();
  return MEMORY[0x2611B9380](a1, v1);
}

uint64_t implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = type metadata accessor for RRResult();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
}

uint64_t ReferenceResolutionClient.resolvePositionEntity(from:useCase:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v47 = a1;
  int v63 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = v47;
  uint64_t v65 = v4;
  uint64_t v73 = 0;
  uint64_t v48 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  char v89 = 0;
  uint64_t v88 = 0;
  uint64_t v49 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = v50 - 8;
  unint64_t v53 = (*(void *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v50);
  uint64_t v54 = (char *)&v17 - v53;
  unint64_t v55 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v56 = (char *)&v17 - v55;
  uint64_t v57 = type metadata accessor for RREntity();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v57 - 8;
  unint64_t v60 = (*(void *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v73);
  uint64_t v61 = (char *)&v17 - v60;
  uint64_t v91 = (char *)&v17 - v60;
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v66 = *(void *)(v68 - 8);
  uint64_t v67 = v68 - 8;
  unint64_t v62 = (*(void *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v68);
  uint64_t v69 = (char *)&v17 - v62;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  unint64_t v64 = (*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v75 = (uint64_t)&v17 - v64;
  uint64_t v90 = v5;
  unsigned int v74 = 1;
  char v89 = v7 & 1;
  uint64_t v88 = v65;
  uint64_t v8 = USOParse.userParse.getter();
  uint64_t v72 = MEMORY[0x2611B7D70](v8);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v68);
  swift_bridgeObjectRetain();
  uint64_t v71 = &v87;
  uint64_t v87 = v72;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v76 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = v76 - 8;
  if ((*(unsigned int (**)(uint64_t, void))(v77 + 48))(v75, v74) == 1)
  {
    uint64_t v37 = 0;
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v75);
    uint64_t v45 = v37;
  }
  else
  {
    uint64_t v44 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
    uint64_t v45 = v44;
  }
  uint64_t v43 = v45;
  if (v45)
  {
    uint64_t v42 = v43;
    uint64_t v40 = v43;
    uint64_t v80 = v43;
    uint64_t v41 = ReferenceResolutionClient.extractPositionEntity(task:useCase:)(v43, v63 & 1);
    if (v41)
    {
      uint64_t v39 = v41;
      uint64_t v38 = v41;
      uint64_t v79 = v41;
      ReferenceResolutionClient.resolveEntity(referenceEntity:)(v41, v56);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v61, v56, v57);
        (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v46, v61, v57);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v46, 0, 1, v57);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
        swift_release();
        return swift_release();
      }
      outlined destroy of RREntity?((uint64_t)v56);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  uint64_t v11 = v54;
  uint64_t v12 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v11, v12, v50);
  uint64_t v35 = Logger.logObject.getter();
  int v34 = static os_log_type_t.debug.getter();
  uint64_t v32 = &v85;
  uint64_t v85 = 2;
  unint64_t v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v33 = v86;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v36 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v35, (os_log_type_t)v34))
  {
    uint64_t v13 = v49;
    uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = 0;
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(v19);
    uint64_t v26 = &v84;
    uint64_t v84 = v20;
    uint64_t v27 = &v83;
    uint64_t v83 = v21;
    uint64_t v24 = &v82;
    uint64_t v82 = v22;
    unsigned int v23 = 0;
    serialize(_:at:)(0, &v84);
    serialize(_:at:)(v23, v26);
    uint64_t v81 = v36;
    uint64_t v25 = &v17;
    MEMORY[0x270FA5388](&v17);
    uint64_t v14 = v27;
    uint64_t v15 = &v17 - 6;
    uint64_t v28 = &v17 - 6;
    void v15[2] = (uint64_t)v26;
    v15[3] = (uint64_t)v14;
    v15[4] = v16;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v13)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v35, (os_log_type_t)v34, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v20, v33);
      uint64_t v17 = 0;
      destroyStorage<A>(_:count:)(v21, 0, v18);
      destroyStorage<A>(_:count:)(v22, v17, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v46, 1, 1, v57);
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)()
{
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person?);
  uint64_t v1 = Optional.debugDescription.getter();
  outlined destroy of ContiguousArray<A1>();
  return v1;
}

uint64_t implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)()
{
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_App?);
  uint64_t v1 = Optional.debugDescription.getter();
  outlined destroy of ContiguousArray<A1>();
  return v1;
}

uint64_t sub_25D9CE110()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)()
{
  return implicit closure #1 in ReferenceResolutionClient.resolveAppDisambiguationReference(from:)();
}

uint64_t ReferenceResolutionClient.extractPositionEntity(task:useCase:)(uint64_t a1, int a2)
{
  uint64_t v128 = a1;
  int v137 = a2;
  uint64_t v3 = v2;
  uint64_t v4 = v128;
  uint64_t v136 = v3;
  uint64_t v129 = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
  uint64_t v130 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v134 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v177 = 0;
  char v176 = 0;
  uint64_t v175 = 0;
  uint64_t v135 = 0;
  uint64_t v162 = 0;
  uint64_t v159 = 0;
  uint64_t v156 = 0;
  uint64_t v154 = 0;
  uint64_t v138 = type metadata accessor for Logger();
  uint64_t v139 = *(void *)(v138 - 8);
  uint64_t v140 = v138 - 8;
  uint64_t v142 = *(void *)(v139 + 64);
  unint64_t v141 = (v142 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v138);
  uint64_t v143 = (char *)&v28 - v141;
  unint64_t v144 = v141;
  MEMORY[0x270FA5388]((char *)&v28 - v141);
  uint64_t v145 = (char *)&v28 - v144;
  uint64_t v177 = v4;
  char v176 = v5 & 1;
  uint64_t v175 = v6;
  UsoTask.eraseToAny.getter();
  if (!v174) {
    goto LABEL_45;
  }
  uint64_t v127 = v166;
  outlined init with copy of Any?((uint64_t)v173, (uint64_t)v166);
  uint64_t v126 = 0;
  type metadata accessor for UsoTask_noVerb_uso_NoEntity();
  if (swift_dynamicCast())
  {
    uint64_t v124 = v165;
    uint64_t v156 = v165;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    uint64_t v125 = v155;
    if (v155)
    {
      uint64_t v123 = v125;
      uint64_t v121 = v125;
      uint64_t v154 = v125;
      swift_release();
      swift_retain();
      uint64_t v122 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
      swift_release();
      uint64_t v153 = v122;
      BOOL v120 = v122 != 0;
      BOOL v119 = v120;
      outlined destroy of ContiguousArray<A1>();
      if (v119)
      {
        char v7 = v145;
        uint64_t v8 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v7, v8, v138);
        swift_retain();
        id v117 = Logger.logObject.getter();
        int v118 = static os_log_type_t.debug.getter();
        uint64_t v105 = &v151;
        uint64_t v151 = 12;
        unint64_t v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v104 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v106 = v152;
        uint64_t v107 = 17;
        uint64_t v109 = 7;
        uint64_t v111 = swift_allocObject();
        *(unsigned char *)(v111 + 16) = 32;
        uint64_t v112 = swift_allocObject();
        *(unsigned char *)(v112 + 16) = 8;
        uint64_t v108 = 32;
        uint64_t v9 = swift_allocObject();
        uint64_t v10 = v121;
        uint64_t v110 = v9;
        *(void *)(v9 + 16) = v129;
        *(void *)(v9 + 24) = v10;
        uint64_t v11 = swift_allocObject();
        uint64_t v12 = v110;
        uint64_t v114 = v11;
        *(void *)(v11 + 16) = v130;
        *(void *)(v11 + 24) = v12;
        uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v113 = _allocateUninitializedArray<A>(_:)();
        uint64_t v115 = v13;
        swift_retain();
        uint64_t v14 = v111;
        uint64_t v15 = v115;
        *uint64_t v115 = v131;
        v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
        swift_retain();
        uint64_t v16 = v112;
        uint64_t v17 = v115;
        void v115[2] = v132;
        void v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
        swift_retain();
        uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v114;
        uint64_t v19 = v115;
        v115[4] = v133;
        v19[5] = v18;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v117, (os_log_type_t)v118))
        {
          uint64_t v20 = v135;
          uint64_t v96 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v97 = createStorage<A>(capacity:type:)(0);
          uint64_t v98 = createStorage<A>(capacity:type:)(1);
          uint64_t v99 = &v150;
          uint64_t v150 = v96;
          uint64_t v100 = &v149;
          uint64_t v149 = v97;
          id v101 = &v148;
          uint64_t v148 = v98;
          serialize(_:at:)(2, &v150);
          serialize(_:at:)(1, v99);
          uint64_t v146 = v131;
          uint64_t v147 = v111;
          closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101);
          uint64_t v102 = v20;
          if (v20)
          {
            __break(1u);
          }
          else
          {
            uint64_t v146 = v132;
            uint64_t v147 = v112;
            closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
            uint64_t v94 = 0;
            uint64_t v146 = v133;
            uint64_t v147 = v114;
            closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
            _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v118, "#ReferenceResolution Found positional reference, returning: %s", v96, v106);
            destroyStorage<A>(_:count:)(v97, 0, v95);
            destroyStorage<A>(_:count:)(v98, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v96, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v139 + 8))(v145, v138);
        swift_retain();
        uint64_t v92 = CodeGenBase.entity.getter();
        swift_release();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
        outlined destroy of FlowActivity?((uint64_t)v173);
        return v92;
      }
    }
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
    outlined destroy of FlowActivity?((uint64_t)v173);
    goto LABEL_46;
  }
  uint64_t v91 = 0;
  type metadata accessor for UsoTask_pay_common_Payment();
  if (swift_dynamicCast())
  {
    uint64_t v90 = v164;
    uint64_t v159 = v164;
    if (static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.__derived_enum_equals(_:_:)(v137 & 1, 0))
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      uint64_t v89 = v157;
      swift_release();
      if (v89)
      {
        uint64_t v88 = v89;
        uint64_t v85 = v89;
        uint64_t v86 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        uint64_t v87 = v86;
      }
      else
      {
        uint64_t v87 = 0;
      }
      uint64_t v82 = v87;
      uint64_t v83 = ReferenceResolutionClient.helper(app:)(v87);
      swift_release();
      uint64_t v84 = v83;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      uint64_t v81 = v158;
      swift_release();
      if (v81
        && (v80 = v81, uint64_t v78 = v81, v79 = dispatch thunk of UsoEntity_common_Payment.payee.getter(), swift_release(), v79))
      {
        uint64_t v77 = v79;
        uint64_t v74 = v79;
        uint64_t v75 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter();
        swift_release();
        uint64_t v76 = v75;
      }
      else
      {
        uint64_t v76 = 0;
      }
      uint64_t v72 = v76;
      uint64_t v73 = ReferenceResolutionClient.helper(person:)(v76);
      swift_release();
      uint64_t v84 = v73;
    }
    uint64_t v71 = v84;
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
    outlined destroy of FlowActivity?((uint64_t)v173);
    return v71;
  }
  uint64_t v70 = 0;
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
LABEL_45:
    outlined destroy of FlowActivity?((uint64_t)v173);
LABEL_46:
    uint64_t v21 = v143;
    uint64_t v22 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v21, v22, v138);
    uint64_t v48 = Logger.logObject.getter();
    int v47 = static os_log_type_t.debug.getter();
    uint64_t v45 = &v171;
    uint64_t v171 = 2;
    unint64_t v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v46 = v172;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v49 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v48, (os_log_type_t)v47))
    {
      uint64_t v23 = v135;
      uint32_t v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v32 = 0;
      uint64_t v34 = createStorage<A>(capacity:type:)(0);
      uint64_t v35 = createStorage<A>(capacity:type:)(v32);
      uint64_t v39 = &v170;
      uint64_t v170 = v33;
      uint64_t v40 = &v169;
      uint64_t v169 = v34;
      uint64_t v37 = &v168;
      uint64_t v168 = v35;
      unsigned int v36 = 0;
      serialize(_:at:)(0, &v170);
      serialize(_:at:)(v36, v39);
      uint64_t v167 = v49;
      uint64_t v38 = &v28;
      MEMORY[0x270FA5388](&v28);
      uint64_t v24 = v40;
      uint64_t v25 = &v28 - 6;
      uint64_t v41 = &v28 - 6;
      v25[2] = (uint64_t)v39;
      v25[3] = (uint64_t)v24;
      v25[4] = v26;
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v23)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v48, (os_log_type_t)v47, "#ReferenceResolution Found no positional reference, returning nil", v33, v46);
        uint64_t v30 = 0;
        destroyStorage<A>(_:count:)(v34, 0, v31);
        destroyStorage<A>(_:count:)(v35, v30, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v33, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v29 = 0;

    (*(void (**)(char *, uint64_t))(v139 + 8))(v143, v138);
    return v29;
  }
  uint64_t v69 = v163;
  uint64_t v162 = v163;
  if (static ReferenceResolutionClient.PaymentsReferenceResolutionUseCase.__derived_enum_equals(_:_:)(v137 & 1, 0))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Target.target.getter();
    uint64_t v68 = v160;
    swift_release();
    if (v68)
    {
      uint64_t v67 = v68;
      uint64_t v64 = v68;
      uint64_t v65 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      uint64_t v66 = v65;
    }
    else
    {
      uint64_t v66 = 0;
    }
    uint64_t v61 = v66;
    uint64_t v62 = ReferenceResolutionClient.helper(app:)(v66);
    swift_release();
    uint64_t v63 = v62;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Target.target.getter();
    uint64_t v60 = v161;
    swift_release();
    if (v60
      && (v59 = v60, uint64_t v57 = v60, v58 = dispatch thunk of UsoEntity_common_Payment.payer.getter(), swift_release(), v58))
    {
      uint64_t v56 = v58;
      uint64_t v53 = v58;
      uint64_t v54 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter();
      swift_release();
      uint64_t v55 = v54;
    }
    else
    {
      uint64_t v55 = 0;
    }
    uint64_t v51 = v55;
    uint64_t v52 = ReferenceResolutionClient.helper(person:)(v55);
    swift_release();
    uint64_t v63 = v52;
  }
  uint64_t v50 = v63;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
  outlined destroy of FlowActivity?((uint64_t)v173);
  return v50;
}

uint64_t implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)()
{
  swift_retain();
  CodeGenBase.entity.getter();
  swift_release();
  uint64_t v1 = UsoEntity.debugString.getter();
  swift_release();
  return v1;
}

uint64_t ReferenceResolutionClient.helper(app:)(uint64_t a1)
{
  uint64_t v93 = a1;
  uint64_t v79 = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
  uint64_t v80 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v84 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  uint64_t v85 = 0;
  uint64_t v102 = 0;
  uint64_t v86 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = v86 - 8;
  unint64_t v89 = (*(void *)(v87 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v93);
  uint64_t v90 = (char *)&v26 - v89;
  unint64_t v91 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v92 = (char *)&v26 - v91;
  uint64_t v110 = v4;
  uint64_t v109 = v1;
  swift_retain();
  if (v93)
  {
    uint64_t v78 = v93;
    uint64_t v76 = v93;
    uint64_t v102 = v93;
    swift_retain();
    uint64_t v77 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    uint64_t v101 = v77;
    BOOL v75 = v77 != 0;
    BOOL v74 = v75;
    outlined destroy of ContiguousArray<A1>();
    if (v74)
    {
      char v5 = v92;
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v5, v6, v86);
      swift_retain();
      uint64_t v72 = Logger.logObject.getter();
      int v73 = static os_log_type_t.debug.getter();
      uint64_t v60 = &v99;
      uint64_t v99 = 12;
      unint64_t v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v61 = v100;
      uint64_t v62 = 17;
      uint64_t v64 = 7;
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = 32;
      uint64_t v67 = swift_allocObject();
      *(unsigned char *)(v67 + 16) = 8;
      uint64_t v63 = 32;
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = v76;
      uint64_t v65 = v7;
      *(void *)(v7 + 16) = v79;
      *(void *)(v7 + 24) = v8;
      uint64_t v9 = swift_allocObject();
      uint64_t v10 = v65;
      uint64_t v69 = v9;
      *(void *)(v9 + 16) = v80;
      *(void *)(v9 + 24) = v10;
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v68 = _allocateUninitializedArray<A>(_:)();
      uint64_t v70 = v11;
      swift_retain();
      uint64_t v12 = v66;
      uint64_t v13 = v70;
      char *v70 = v81;
      v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
      swift_retain();
      uint64_t v14 = v67;
      uint64_t v15 = v70;
      v70[2] = v82;
      v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
      swift_retain();
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
      uint64_t v17 = v70;
      v70[4] = v83;
      v17[5] = v16;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        uint64_t v18 = v85;
        uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v52 = createStorage<A>(capacity:type:)(0);
        uint64_t v53 = createStorage<A>(capacity:type:)(1);
        uint64_t v54 = &v98;
        uint64_t v98 = v51;
        uint64_t v55 = &v97;
        uint64_t v97 = v52;
        uint64_t v56 = &v96;
        uint64_t v96 = v53;
        serialize(_:at:)(2, &v98);
        serialize(_:at:)(1, v54);
        uint64_t v94 = v81;
        uint64_t v95 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)v54, (uint64_t)v55, (uint64_t)v56);
        uint64_t v57 = v18;
        if (v18)
        {
          __break(1u);
        }
        else
        {
          uint64_t v94 = v82;
          uint64_t v95 = v67;
          closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
          uint64_t v49 = 0;
          uint64_t v94 = v83;
          uint64_t v95 = v69;
          closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
          _os_log_impl(&dword_25D85A000, v72, (os_log_type_t)v73, "#ReferenceResolution Found positional reference, returning: %s", v51, v61);
          destroyStorage<A>(_:count:)(v52, 0, v50);
          destroyStorage<A>(_:count:)(v53, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v51, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v87 + 8))(v92, v86);
      swift_retain();
      uint64_t v47 = CodeGenBase.entity.getter();
      swift_release();
      swift_release();
      return v47;
    }
    swift_release();
  }
  uint64_t v19 = v90;
  uint64_t v20 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v19, v20, v86);
  uint64_t v45 = Logger.logObject.getter();
  int v44 = static os_log_type_t.debug.getter();
  uint64_t v42 = &v107;
  uint64_t v107 = 2;
  unint64_t v40 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v43 = v108;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v46 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v45, (os_log_type_t)v44))
  {
    uint64_t v21 = v85;
    uint64_t v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v29 = 0;
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    uint64_t v32 = createStorage<A>(capacity:type:)(v29);
    unsigned int v36 = &v106;
    uint32_t v106 = v30;
    uint64_t v37 = &v105;
    uint64_t v105 = v31;
    uint64_t v34 = &v104;
    uint64_t v104 = v32;
    unsigned int v33 = 0;
    serialize(_:at:)(0, &v106);
    serialize(_:at:)(v33, v36);
    uint64_t v103 = v46;
    uint64_t v35 = &v26;
    MEMORY[0x270FA5388](&v26);
    uint64_t v22 = v37;
    uint64_t v23 = &v26 - 6;
    uint64_t v38 = &v26 - 6;
    void v23[2] = (uint64_t)v36;
    void v23[3] = (uint64_t)v22;
    v23[4] = v24;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v45, (os_log_type_t)v44, "#ReferenceResolution Found no positional reference, returning nil", v30, v43);
      uint64_t v27 = 0;
      destroyStorage<A>(_:count:)(v31, 0, v28);
      destroyStorage<A>(_:count:)(v32, v27, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v30, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = 0;

  (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v86);
  return v26;
}

uint64_t ReferenceResolutionClient.helper(person:)(uint64_t a1)
{
  uint64_t v93 = a1;
  uint64_t v79 = partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:);
  uint64_t v80 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v84 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  uint64_t v85 = 0;
  uint64_t v102 = 0;
  uint64_t v86 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = v86 - 8;
  unint64_t v89 = (*(void *)(v87 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v93);
  uint64_t v90 = (char *)&v26 - v89;
  unint64_t v91 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v92 = (char *)&v26 - v91;
  uint64_t v110 = v4;
  uint64_t v109 = v1;
  swift_retain();
  if (v93)
  {
    uint64_t v78 = v93;
    uint64_t v76 = v93;
    uint64_t v102 = v93;
    swift_retain();
    uint64_t v77 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    uint64_t v101 = v77;
    BOOL v75 = v77 != 0;
    BOOL v74 = v75;
    outlined destroy of ContiguousArray<A1>();
    if (v74)
    {
      char v5 = v92;
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v5, v6, v86);
      swift_retain();
      uint64_t v72 = Logger.logObject.getter();
      int v73 = static os_log_type_t.debug.getter();
      uint64_t v60 = &v99;
      uint64_t v99 = 12;
      unint64_t v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v61 = v100;
      uint64_t v62 = 17;
      uint64_t v64 = 7;
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = 32;
      uint64_t v67 = swift_allocObject();
      *(unsigned char *)(v67 + 16) = 8;
      uint64_t v63 = 32;
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = v76;
      uint64_t v65 = v7;
      *(void *)(v7 + 16) = v79;
      *(void *)(v7 + 24) = v8;
      uint64_t v9 = swift_allocObject();
      uint64_t v10 = v65;
      uint64_t v69 = v9;
      *(void *)(v9 + 16) = v80;
      *(void *)(v9 + 24) = v10;
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v68 = _allocateUninitializedArray<A>(_:)();
      uint64_t v70 = v11;
      swift_retain();
      uint64_t v12 = v66;
      uint64_t v13 = v70;
      char *v70 = v81;
      v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
      swift_retain();
      uint64_t v14 = v67;
      uint64_t v15 = v70;
      v70[2] = v82;
      v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
      swift_retain();
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
      uint64_t v17 = v70;
      v70[4] = v83;
      v17[5] = v16;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        uint64_t v18 = v85;
        uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v52 = createStorage<A>(capacity:type:)(0);
        uint64_t v53 = createStorage<A>(capacity:type:)(1);
        uint64_t v54 = &v98;
        uint64_t v98 = v51;
        uint64_t v55 = &v97;
        uint64_t v97 = v52;
        uint64_t v56 = &v96;
        uint64_t v96 = v53;
        serialize(_:at:)(2, &v98);
        serialize(_:at:)(1, v54);
        uint64_t v94 = v81;
        uint64_t v95 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)v54, (uint64_t)v55, (uint64_t)v56);
        uint64_t v57 = v18;
        if (v18)
        {
          __break(1u);
        }
        else
        {
          uint64_t v94 = v82;
          uint64_t v95 = v67;
          closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
          uint64_t v49 = 0;
          uint64_t v94 = v83;
          uint64_t v95 = v69;
          closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
          _os_log_impl(&dword_25D85A000, v72, (os_log_type_t)v73, "#ReferenceResolution Found positional reference, returning: %s", v51, v61);
          destroyStorage<A>(_:count:)(v52, 0, v50);
          destroyStorage<A>(_:count:)(v53, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v51, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v87 + 8))(v92, v86);
      swift_retain();
      uint64_t v47 = CodeGenBase.entity.getter();
      swift_release();
      swift_release();
      return v47;
    }
    swift_release();
  }
  uint64_t v19 = v90;
  uint64_t v20 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v19, v20, v86);
  uint64_t v45 = Logger.logObject.getter();
  int v44 = static os_log_type_t.debug.getter();
  uint64_t v42 = &v107;
  uint64_t v107 = 2;
  unint64_t v40 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v43 = v108;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v46 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v45, (os_log_type_t)v44))
  {
    uint64_t v21 = v85;
    uint64_t v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v29 = 0;
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    uint64_t v32 = createStorage<A>(capacity:type:)(v29);
    unsigned int v36 = &v106;
    uint32_t v106 = v30;
    uint64_t v37 = &v105;
    uint64_t v105 = v31;
    uint64_t v34 = &v104;
    uint64_t v104 = v32;
    unsigned int v33 = 0;
    serialize(_:at:)(0, &v106);
    serialize(_:at:)(v33, v36);
    uint64_t v103 = v46;
    uint64_t v35 = &v26;
    MEMORY[0x270FA5388](&v26);
    uint64_t v22 = v37;
    uint64_t v23 = &v26 - 6;
    uint64_t v38 = &v26 - 6;
    void v23[2] = (uint64_t)v36;
    void v23[3] = (uint64_t)v22;
    v23[4] = v24;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v45, (os_log_type_t)v44, "#ReferenceResolution Found no positional reference, returning nil", v30, v43);
      uint64_t v27 = 0;
      destroyStorage<A>(_:count:)(v31, 0, v28);
      destroyStorage<A>(_:count:)(v32, v27, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v30, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = 0;

  (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v86);
  return v26;
}

uint64_t protocol witness for ReferenceResolutionProviding.resolveCommonPerson() in conformance ReferenceResolutionClient@<X0>(void *a1@<X8>)
{
  return ReferenceResolutionClient.resolveCommonPerson()(a1);
}

uint64_t protocol witness for ReferenceResolutionProviding.resolvePersonDisambiguationReference(from:) in conformance ReferenceResolutionClient(uint64_t a1)
{
  return ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)(a1);
}

uint64_t protocol witness for ReferenceResolutionProviding.resolveAppDisambiguationReference(from:) in conformance ReferenceResolutionClient(uint64_t a1)
{
  return ReferenceResolutionClient.resolveAppDisambiguationReference(from:)(a1);
}

uint64_t sub_25D9D08AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D08D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0904()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0944()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0984()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)()
{
  return implicit closure #1 in ReferenceResolutionClient.resolvePersonDisambiguationReference(from:)();
}

uint64_t sub_25D9D09CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D09F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0A24()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0A64()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
  if (!lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
  if (!lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of RRFilter?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RRFilter();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *outlined init with copy of Result<RRResult, Error>(id *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v5 = *a1;
    id v3 = *a1;
    *a2 = v5;
  }
  else
  {
    uint64_t v2 = type metadata accessor for RRResult();
    (*(void (**)(void *, id *))(*(void *)(v2 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t sub_25D9D0CA4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0CE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0D10()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0D3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D0D7C()
{
  return swift_deallocObject();
}

void *outlined init with copy of RREntity?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for RREntity();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

id *outlined destroy of Result<RRResult, Error>(id *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    uint64_t v1 = type metadata accessor for RRResult();
    (*(void (**)(id *))(*(void *)(v1 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t sub_25D9D0F7C()
{
  uint64_t v2 = *(void *)(type metadata accessor for RRResult() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RRResult();
  uint64_t v3 = v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return implicit closure #3 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(v3, a1);
}

uint64_t sub_25D9D10C0()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_4()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for RRResult();
  unint64_t v1 = lazy protocol witness table accessor for type RRResult and conformance RRResult();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type RRResult and conformance RRResult()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RRResult and conformance RRResult;
  if (!lazy protocol witness table cache variable for type RRResult and conformance RRResult)
  {
    type metadata accessor for RRResult();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RRResult and conformance RRResult);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D9D11E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D120C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1238()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1278()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [[RRCandidate]] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[RRCandidate]]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[RRCandidate]] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void *outlined assign with take of RREntity?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for RREntity();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type [RRCandidate] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [RRCandidate] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RRCandidate] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RRCandidate]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [RRCandidate] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of RRCandidate?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RRCandidate();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D9D16A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)()
{
  return implicit closure #2 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(*(void *)(v0 + 16));
}

uint64_t sub_25D9D16E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1714()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1740()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1780()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D17C0()
{
  uint64_t v2 = *(void *)(type metadata accessor for RRCandidate() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RRCandidate();
  uint64_t v3 = v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return implicit closure #1 in ReferenceResolutionClient.resolveEntity(referenceEntity:)(v3, a1);
}

uint64_t sub_25D9D1904()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate;
  if (!lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate)
  {
    type metadata accessor for RRCandidate();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D9D1A24()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1A50()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1A7C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1ABC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)()
{
  return implicit closure #1 in ReferenceResolutionClient.extractPositionEntity(task:useCase:)();
}

uint64_t sub_25D9D1B04()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1B30()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1B5C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1B9C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1BDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1C08()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1C34()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1C74()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1CB4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1CE0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1D0C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9D1D4C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return &type metadata for ReferenceResolutionClient.PaymentsReferenceResolutionUseCase;
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return lazy protocol witness table accessor for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [ReferenceResolutionClient.PaymentsReferenceResolutionUseCase] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in ReferenceResolutionClient.PaymentsReferenceResolutionUseCase()
{
  return lazy protocol witness table accessor for type ReferenceResolutionClient.PaymentsReferenceResolutionUseCase and conformance ReferenceResolutionClient.PaymentsReferenceResolutionUseCase();
}

uint64_t SendPaymentConfirmIntentStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSendPaymentIntent();
  unint64_t v1 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SendPaymentConfirmIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[12] = a2;
  v4[11] = a1;
  v4[2] = v4;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 144);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v20 = *(unsigned int *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    *(void *)(v17 + 56) = buf;
    *(void *)(v17 + 64) = v14;
    *(void *)(v17 + 72) = v15;
    serialize(_:at:)(0, (unsigned char **)(v17 + 56));
    serialize(_:at:)(0, (unsigned char **)(v17 + 56));
    *(void *)(v17 + 80) = v23;
    uint64_t v16 = (void *)swift_task_alloc();
    v16[2] = v17 + 56;
    v16[3] = v17 + 64;
    void v16[4] = v17 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v22, v21, "#SendPaymentConfirmIntentStrategy parseConfirmationResponse", buf, v20);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v17 + 160);
  uint64_t v6 = *(void *)(v17 + 144);
  uint64_t v10 = *(void *)(v17 + 136);
  uint64_t v8 = *(void *)(v17 + 120);
  uint64_t v11 = *(void *)(v17 + 112);
  uint64_t v5 = *(void *)(v17 + 152);
  uint64_t v7 = *(void *)(v17 + 128);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v6);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for INSendPaymentIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v17 + 16) + 8);
  return v3();
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[111] = v2;
  v3[110] = a2;
  v3[109] = a1;
  v3[77] = v3;
  v3[78] = 0;
  v3[79] = 0;
  v3[86] = 0;
  v3[93] = 0;
  v3[99] = 0;
  v3[75] = 0;
  v3[76] = 0;
  v3[100] = 0;
  v3[101] = 0;
  v3[102] = 0;
  v3[103] = 0;
  v3[104] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[112] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v3[113] = v4;
  v3[114] = *(void *)(v4 - 8);
  v3[115] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[116] = v5;
  v3[117] = *(void *)(v5 - 8);
  v3[118] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  v3[121] = swift_task_alloc();
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[124] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[125] = v6;
  v3[126] = *(void *)(v6 - 8);
  v3[127] = swift_task_alloc();
  v3[128] = swift_task_alloc();
  v3[129] = swift_task_alloc();
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[132] = swift_task_alloc();
  v3[78] = a2;
  v3[79] = v2;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  uint64_t v179 = v0;
  uint64_t v166 = *(void *)(v0 + 1056);
  uint64_t v1 = *(void *)(v0 + 1048);
  uint64_t v167 = *(void *)(v0 + 1008);
  uint64_t v168 = *(void *)(v0 + 1000);
  *(void *)(v0 + 616) = v0;
  uint64_t v2 = SignpostName.makeSendPaymentPromptForConfirm.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v166);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v169 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 16);
  v169(v1, v3, v168);
  uint32_t v172 = Logger.logObject.getter();
  os_log_type_t v171 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 640) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v170 = *(unsigned int *)(v0 + 1216);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v173 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v172, v171))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v162 = createStorage<A>(capacity:type:)(0);
    uint64_t v163 = createStorage<A>(capacity:type:)(0);
    *(void *)(v165 + 840) = buf;
    *(void *)(v165 + 848) = v162;
    *(void *)(v165 + 856) = v163;
    serialize(_:at:)(0, (unsigned char **)(v165 + 840));
    serialize(_:at:)(0, (unsigned char **)(v165 + 840));
    *(void *)(v165 + 864) = v173;
    uint64_t v164 = (void *)swift_task_alloc();
    v164[2] = v165 + 840;
    v164[3] = v165 + 848;
    v164[4] = v165 + 856;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v172, v171, "#SendPaymentConfirmIntentStrategy makePromptForConfirmation", buf, v170);
    destroyStorage<A>(_:count:)(v162, 0, v160);
    destroyStorage<A>(_:count:)(v163, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v155 = *(void *)(v165 + 1048);
  uint64_t v156 = *(void *)(v165 + 1000);
  uint64_t v154 = *(void *)(v165 + 1008);

  uint64_t v157 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
  v157(v155, v156);
  *(void *)(v165 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  id v158 = (id)IntentResolutionRecord.intentResponse.getter();
  id v4 = objc_msgSend(v158, sel_paymentRecord);
  *(void *)(v165 + 1072) = v4;
  uint64_t v159 = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v165 + 1040);
    uint64_t v144 = *(void *)(v165 + 1000);
    *(void *)(v165 + 688) = v4;

    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    v169(v5, v6, v144);
    id v7 = v159;
    uint64_t v146 = swift_allocObject();
    *(void *)(v146 + 16) = v159;
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v153 = static os_log_type_t.debug.getter();
    *(void *)(v165 + 696) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v165 + 1224);
    uint64_t v148 = swift_allocObject();
    *(unsigned char *)(v148 + 16) = 64;
    uint64_t v149 = swift_allocObject();
    *(unsigned char *)(v149 + 16) = 8;
    uint64_t v147 = swift_allocObject();
    *(void *)(v147 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v147 + 24) = v146;
    uint64_t v150 = swift_allocObject();
    *(void *)(v150 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v150 + 24) = v147;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v151 = v8;
    swift_retain();
    void *v151 = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[1] = v148;
    swift_retain();
    v151[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v151[3] = v149;
    swift_retain();
    v151[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[5] = v150;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v153))
    {
      unint64_t v141 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v142 = createStorage<A>(capacity:type:)(1);
      uint64_t v143 = createStorage<A>(capacity:type:)(0);
      uint64_t v174 = v141;
      uint64_t v175 = v142;
      uint64_t v176 = v143;
      serialize(_:at:)(2, &v174);
      serialize(_:at:)(1, &v174);
      uint64_t v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v178 = v148;
      closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
      uint64_t v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v178 = v149;
      closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
      uint64_t v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v178 = v150;
      closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
      _os_log_impl(&dword_25D85A000, oslog, v153, "#SendPaymentConfirmIntentStrategy intent contained paymentRecord: %@", v141, size);
      destroyStorage<A>(_:count:)(v142, 1, v140);
      destroyStorage<A>(_:count:)(v143, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v141, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v137 = *(void *)(v165 + 1040);
    uint64_t v138 = *(void *)(v165 + 1000);

    v157(v137, v138);
    id v9 = objc_msgSend(v159, sel_payee);
    *(void *)(v165 + 1080) = v9;
    uint64_t v139 = v9;
    if (v9)
    {
      *(void *)(v165 + 744) = v9;
      id v10 = objc_msgSend(v159, sel_currencyAmount);
      *(void *)(v165 + 1088) = v10;
      uint64_t v136 = v10;
      if (v10)
      {
        *(void *)(v165 + 792) = v10;
        id v135 = objc_msgSend(v159, sel_note);
        if (v135)
        {
          uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v132 = v11;

          uint64_t v133 = v131;
          uint64_t v134 = v132;
        }
        else
        {
          uint64_t v133 = 0;
          uint64_t v134 = 0;
        }
        *(void *)(v165 + 1096) = v134;
        uint64_t v124 = *(void *)(v165 + 888);
        *(void *)(v165 + 600) = v133;
        *(void *)(v165 + 608) = v134;
        id v12 = objc_msgSend(v159, sel_feeAmount);
        *(void *)(v165 + 1104) = v12;
        id v123 = v12;
        *(void *)(v165 + 800) = v12;
        type metadata accessor for PaymentsDialogConcept.Builder();
        uint64_t v127 = (void *)PaymentsDialogConcept.Builder.__allocating_init()();
        *(void *)(v165 + 1112) = v127;
        *(void *)(v165 + 808) = v127;
        type metadata accessor for DialogPerson();
        id v13 = v139;
        swift_retain();
        outlined init with copy of GlobalsProviding(v124 + 104, v165 + 136);
        swift_release();
        uint64_t v126 = *(void *)(v165 + 160);
        uint64_t v125 = *(void *)(v165 + 168);
        __swift_project_boxed_opaque_existential_1((void *)(v165 + 136), v126);
        (*(void (**)(uint64_t))(v125 + 16))(v126);
        __swift_project_boxed_opaque_existential_1((void *)(v165 + 176), *(void *)(v165 + 200));
        dispatch thunk of DeviceState.siriLocale.getter();
        uint64_t v129 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v165 + 176);
        __swift_destroy_boxed_opaque_existential_0(v165 + 136);
        swift_retain();
        uint64_t v128 = (void *)((char *)v127 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
        swift_beginAccess();
        uint64_t *v128 = v129;
        swift_release();
        swift_endAccess();
        swift_release();
        type metadata accessor for DialogCurrency.Builder();
        DialogCurrency.Builder.__allocating_init()();
        id v14 = objc_msgSend(v136, sel_amount);
        id v130 = v14;
        if (v14)
        {
          objc_msgSend(v14, sel_doubleValue);
        }
        dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
        swift_release();
        id v122 = objc_msgSend(v136, sel_currencyCode);
        if (v122)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v120 = v15;

          uint64_t v121 = v120;
        }
        else
        {
          uint64_t v121 = 0;
        }
        if (v121)
        {
          uint64_t v119 = *(void *)(v165 + 984);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v16 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 56))(v119, 0, 1);
        }
        else
        {
          uint64_t v95 = *(void *)(v165 + 984);
          uint64_t v31 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v95, 1);
        }
        uint64_t v117 = *(void *)(v165 + 984);
        dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
        outlined destroy of SpeakableString?(v117);
        swift_release();
        uint64_t v118 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
        swift_release();
        swift_retain();
        swift_beginAccess();
        v127[2] = v118;
        swift_release();
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRetain();
        if (v134)
        {
          uint64_t v116 = *(void *)(v165 + 976);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v17 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 56))(v116, 0, 1);
        }
        else
        {
          uint64_t v96 = *(void *)(v165 + 976);
          uint64_t v30 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v96, 1);
        }
        uint64_t v115 = *(const void **)(v165 + 976);
        uint64_t v113 = *(void **)(v165 + 968);
        outlined init with copy of SpeakableString?(v115, v113);
        uint64_t v114 = (char *)v127 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
        swift_beginAccess();
        outlined assign with take of SpeakableString?(v113, v114);
        swift_endAccess();
        outlined destroy of SpeakableString?((uint64_t)v115);
        id v18 = v123;
        if (v123)
        {
          *(void *)(v165 + 832) = v123;
          DialogCurrency.Builder.__allocating_init()();
          id v112 = objc_msgSend(v123, sel_amount);
          if (v112)
          {
            objc_msgSend(v112, sel_doubleValue);
          }
          dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
          swift_release();
          id v111 = objc_msgSend(v123, sel_currencyCode);
          if (v111)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v109 = v19;

            uint64_t v110 = v109;
          }
          else
          {
            uint64_t v110 = 0;
          }
          if (v110)
          {
            uint64_t v108 = *(void *)(v165 + 960);
            String.toSpeakableString.getter();
            swift_bridgeObjectRelease();
            uint64_t v20 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 56))(v108, 0, 1);
          }
          else
          {
            uint64_t v105 = *(void *)(v165 + 960);
            uint64_t v21 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v105, 1);
          }
          uint64_t v106 = *(void *)(v165 + 960);
          dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
          outlined destroy of SpeakableString?(v106);
          swift_release();
          uint64_t v107 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
          swift_release();
          swift_retain();
          swift_beginAccess();
          v127[4] = v107;
          swift_release();
          swift_endAccess();
          swift_release();
        }
        swift_bridgeObjectRetain();
        if (v134)
        {
          uint64_t v104 = *(void *)(v165 + 952);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v22 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 56))(v104, 0, 1);
        }
        else
        {
          uint64_t v97 = *(void *)(v165 + 952);
          uint64_t v29 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v97, 1);
        }
        uint64_t v99 = *(void **)(v165 + 968);
        uint64_t v101 = *(const void **)(v165 + 952);
        outlined init with copy of SpeakableString?(v101, v99);
        uint32_t v100 = (char *)v127 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo;
        swift_beginAccess();
        outlined assign with take of SpeakableString?(v99, v100);
        swift_endAccess();
        outlined destroy of SpeakableString?((uint64_t)v101);
        IntentResolutionRecord.app.getter();
        uint64_t v102 = App.sirikitApp.getter();
        swift_release();
        swift_retain();
        swift_beginAccess();
        v127[3] = v102;
        swift_release();
        swift_endAccess();
        swift_release();
        uint64_t v103 = PaymentsDialogConcept.Builder.build()();
        *(void *)(v165 + 1120) = v103;
        *(void *)(v165 + 816) = v103;
        if (static RFFeatureFlags.ResponseFramework.SMART.getter())
        {
          uint64_t v23 = (void *)swift_task_alloc();
          *(void *)(v165 + 1128) = v23;
          *uint64_t v23 = *(void *)(v165 + 616);
          v23[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
          uint64_t v24 = *(void *)(v165 + 880);
          uint64_t v25 = *(void *)(v165 + 872);
          return SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(v25, v24, v103);
        }
        else
        {
          uint64_t v98 = *(void *)(v165 + 888);
          swift_retain();
          *(void *)(v165 + 1144) = *(void *)(v98 + 16);
          swift_retain();
          swift_release();
          swift_retain();
          uint64_t v27 = (void *)swift_task_alloc();
          *(void *)(v165 + 1152) = v27;
          *uint64_t v27 = *(void *)(v165 + 616);
          v27[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
          uint64_t v28 = *(void *)(v165 + 944);
          return SendPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(v28, v103);
        }
      }
      uint64_t v32 = *(void *)(v165 + 1032);
      uint64_t v90 = *(void *)(v165 + 1000);
      uint64_t v33 = Logger.payments.unsafeMutableAddressor();
      v169(v32, v33, v90);
      log = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.error.getter();
      *(void *)(v165 + 752) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v91 = *(_DWORD *)(v165 + 1232);
      uint64_t v94 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v92))
      {
        uint64_t v86 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v87 = createStorage<A>(capacity:type:)(0);
        uint64_t v88 = createStorage<A>(capacity:type:)(0);
        *(void *)(v165 + 760) = v86;
        *(void *)(v165 + 768) = v87;
        *(void *)(v165 + 776) = v88;
        serialize(_:at:)(0, (unsigned char **)(v165 + 760));
        serialize(_:at:)(0, (unsigned char **)(v165 + 760));
        *(void *)(v165 + 784) = v94;
        unint64_t v89 = (void *)swift_task_alloc();
        v89[2] = v165 + 760;
        v89[3] = v165 + 768;
        v89[4] = v165 + 776;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v92, "#SendPaymentConfirmIntentStrategy found no currencyAmount in paymentRecord, throwing exception", v86, v91);
        destroyStorage<A>(_:count:)(v87, 0, v85);
        destroyStorage<A>(_:count:)(v88, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v86, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v84 = *(void *)(v165 + 1056);
      uint64_t v79 = *(void *)(v165 + 1032);
      uint64_t v80 = *(void *)(v165 + 1000);

      v157(v79, v80);
      Swift::String v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1);
      type metadata accessor for INSendPaymentIntent();
      id v83 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v35;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(Swift::String *)uint64_t v36 = v34;
      *(void *)(v36 + 16) = v82;
      *(void *)(v36 + 24) = v81;
      *(void *)(v36 + 32) = 0;
      *(void *)(v36 + 40) = 0;
      *(unsigned char *)(v36 + 48) = 8;
      swift_willThrow();

      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v84);
    }
    else
    {
      uint64_t v37 = *(void *)(v165 + 1024);
      uint64_t v74 = *(void *)(v165 + 1000);
      uint64_t v38 = Logger.payments.unsafeMutableAddressor();
      v169(v37, v38, v74);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      *(void *)(v165 + 704) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v75 = *(_DWORD *)(v165 + 1228);
      uint64_t v78 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v77, v76))
      {
        uint64_t v70 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v71 = createStorage<A>(capacity:type:)(0);
        uint64_t v72 = createStorage<A>(capacity:type:)(0);
        *(void *)(v165 + 712) = v70;
        *(void *)(v165 + 720) = v71;
        *(void *)(v165 + 728) = v72;
        serialize(_:at:)(0, (unsigned char **)(v165 + 712));
        serialize(_:at:)(0, (unsigned char **)(v165 + 712));
        *(void *)(v165 + 736) = v78;
        int v73 = (void *)swift_task_alloc();
        v73[2] = v165 + 712;
        void v73[3] = v165 + 720;
        v73[4] = v165 + 728;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v77, v76, "#SendPaymentConfirmIntentStrategy found no payee in paymentRecord, throwing exception", v70, v75);
        destroyStorage<A>(_:count:)(v71, 0, v69);
        destroyStorage<A>(_:count:)(v72, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v70, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void *)(v165 + 1056);
      uint64_t v63 = *(void *)(v165 + 1024);
      uint64_t v64 = *(void *)(v165 + 1000);

      v157(v63, v64);
      Swift::String v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payee", 5uLL, 1);
      type metadata accessor for INSendPaymentIntent();
      id v67 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v40;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(Swift::String *)uint64_t v41 = v39;
      *(void *)(v41 + 16) = v66;
      *(void *)(v41 + 24) = v65;
      *(void *)(v41 + 32) = 0;
      *(void *)(v41 + 40) = 0;
      *(unsigned char *)(v41 + 48) = 8;
      swift_willThrow();

      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v68);
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v165 + 1016);
    uint64_t v58 = *(void *)(v165 + 1000);

    uint64_t v43 = Logger.payments.unsafeMutableAddressor();
    v169(v42, v43, v58);
    uint32_t v61 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    *(void *)(v165 + 648) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v59 = *(_DWORD *)(v165 + 1220);
    uint64_t v62 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v61, v60))
    {
      uint64_t v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v55 = createStorage<A>(capacity:type:)(0);
      uint64_t v56 = createStorage<A>(capacity:type:)(0);
      *(void *)(v165 + 656) = v54;
      *(void *)(v165 + 664) = v55;
      *(void *)(v165 + 672) = v56;
      serialize(_:at:)(0, (unsigned char **)(v165 + 656));
      serialize(_:at:)(0, (unsigned char **)(v165 + 656));
      *(void *)(v165 + 680) = v62;
      uint64_t v57 = (void *)swift_task_alloc();
      v57[2] = v165 + 656;
      v57[3] = v165 + 664;
      v57[4] = v165 + 672;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, v61, v60, "#SendPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", v54, v59);
      destroyStorage<A>(_:count:)(v55, 0, v53);
      destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v54, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v165 + 1056);
    uint64_t v47 = *(void *)(v165 + 1016);
    uint64_t v48 = *(void *)(v165 + 1000);

    v157(v47, v48);
    type metadata accessor for INSendPaymentIntent();
    id v51 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v44;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v45 = v50;
    *(void *)(v45 + 8) = v49;
    *(void *)(v45 + 16) = 0;
    *(void *)(v45 + 24) = 0;
    *(void *)(v45 + 32) = 0;
    *(void *)(v45 + 40) = 0;
    *(unsigned char *)(v45 + 48) = 12;
    swift_willThrow();

    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v52);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = *(uint64_t (**)(void))(*(void *)(v165 + 616) + 8);
  return v46();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  id v4 = *v1;
  *(void *)(v4 + 616) = *v1;
  *(void *)(v4 + 1136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = (id)v0[138];
  id v4 = (id)v0[136];
  uint64_t v5 = (id)v0[135];
  uint64_t v6 = (id)v0[134];
  id v7 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[77] + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  id v4 = *v1;
  *(void *)(v4 + 616) = *v1;
  *(void *)(v4 + 1160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  char has_malloc_size;
  void *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[10];
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v5 = v0[115];
  id v9 = v0[111];
  v0[77] = v0;
  has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v5);
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 24, (uint64_t)(v0 + 27));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v9 + 104, (uint64_t)(v0 + 32));
  swift_release();
  id v7 = v0[35];
  uint64_t v6 = v0[36];
  __swift_project_boxed_opaque_existential_1(v0 + 32, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  swift_retain();
  uint64_t v8 = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  id v10 = type metadata accessor for SendPaymentCATs();
  void v19[3] = v10;
  v19[4] = &protocol witness table for SendPaymentCATs;
  v19[0] = v8;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 27), (uint64_t)&v18, (uint64_t)v19, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  uint64_t v17 = IntentResolutionRecord.app.getter();
  v0[146] = v17;
  uint64_t v16 = IntentResolutionRecord.intent.getter();
  v0[147] = v16;
  id v13 = IntentResolutionRecord.intentResponse.getter();
  v0[148] = v13;
  swift_retain();
  uint64_t v11 = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  v0[40] = v10;
  v0[41] = &protocol witness table for SendPaymentCATs;
  id v14 = (uint64_t)(v0 + 37);
  v0[37] = v11;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v12 + 1192) = v2;
  uint64_t v15 = type metadata accessor for INSendPaymentIntent();
  uint64_t v3 = type metadata accessor for INSendPaymentIntentResponse();
  *uint64_t v2 = *(void *)(v12 + 616);
  v2[1] = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(v17, v16, v13, v14, v15, v3, (uint64_t)&protocol witness table for INSendPaymentIntent, (uint64_t)&protocol witness table for INSendPaymentIntentResponse);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[150];
  uint64_t v15 = (id)v0[138];
  uint64_t v16 = (id)v0[136];
  uint64_t v17 = (id)v0[135];
  id v18 = (id)v0[134];
  uint64_t v19 = v0[132];
  id v13 = v0[118];
  id v12 = v0[117];
  id v14 = v0[116];
  id v10 = v0[115];
  id v9 = v0[114];
  uint64_t v11 = v0[113];
  uint64_t v8 = v0[112];
  uint64_t v6 = v0[111];
  id v7 = (uint64_t *)v0[109];
  v0[77] = v0;
  v0[103] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 42));
  swift_release();
  uint64_t v5 = v0[45];
  id v4 = v0[46];
  __swift_project_boxed_opaque_existential_1(v0 + 42, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v11);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[77] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = (id)v0[138];
  id v4 = (id)v0[136];
  uint64_t v5 = (id)v0[135];
  uint64_t v6 = (id)v0[134];
  id v7 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[77] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = (id)v0[138];
  id v4 = (id)v0[136];
  uint64_t v5 = (id)v0[135];
  uint64_t v6 = (id)v0[134];
  id v7 = v0[132];
  v0[77] = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[77] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = (id)v0[148];
  id v4 = (id)v0[147];
  uint64_t v11 = (id)v0[138];
  id v12 = (id)v0[136];
  id v13 = (id)v0[135];
  id v14 = (id)v0[134];
  uint64_t v15 = v0[132];
  id v9 = v0[118];
  uint64_t v8 = v0[117];
  id v10 = v0[116];
  id v7 = v0[115];
  uint64_t v5 = v0[114];
  uint64_t v6 = v0[113];
  v0[77] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[77] + 8);
  return v1();
}

uint64_t SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  id v9 = (void *)*v2;
  uint64_t v7 = *v2 + 16;
  uint64_t v8 = *v2 + 296;
  v9[77] = *v2;
  v9[150] = a1;
  v9[151] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  else
  {
    uint64_t v5 = *(void **)(v7 + 1168);
    uint64_t v6 = *(void **)(v7 + 1160);
    __swift_destroy_boxed_opaque_existential_0(v8);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v7);
    uint64_t v3 = SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[45] = v3;
  v4[44] = a3;
  v4[43] = a2;
  v4[42] = a1;
  v4[37] = v4;
  v4[38] = 0;
  v4[39] = 0;
  v4[40] = 0;
  v4[41] = 0;
  type metadata accessor for CATOption();
  v4[46] = swift_task_alloc();
  v4[38] = a2;
  v4[39] = a3;
  v4[40] = v3;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)()
{
  uint64_t v4 = v0[44];
  v0[37] = v0;
  type metadata accessor for SendPaymentCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  v0[47] = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 384) = v1;
  *uint64_t v1 = *(void *)(v3 + 296);
  v1[1] = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  return SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[5];
  void *v23;
  uint64_t v24;
  unint64_t v25;
  _UNKNOWN **v26;
  _UNKNOWN **v27;

  uint64_t v23 = v0;
  uint64_t v1 = v0[49];
  uint64_t v11 = v0[45];
  v0[37] = v0;
  v0[41] = v1;
  swift_retain();
  outlined init with copy of GlobalsProviding(v11 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v11 + 104, (uint64_t)(v0 + 22));
  swift_release();
  uint64_t v8 = v0[25];
  uint64_t v7 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  swift_retain();
  id v9 = *(void *)(v11 + 16);
  swift_retain();
  swift_release();
  id v12 = type metadata accessor for SendPaymentCATs();
  void v22[3] = v12;
  v22[4] = &protocol witness table for SendPaymentCATs;
  v22[0] = v9;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v21, (uint64_t)v22, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v20 = IntentResolutionRecord.app.getter();
  v0[51] = v20;
  uint64_t v15 = IntentResolutionRecord.intent.getter();
  v0[52] = v15;
  uint64_t v16 = IntentResolutionRecord.intentResponse.getter();
  v0[53] = v16;
  swift_retain();
  uint64_t v10 = *(void *)(v11 + 16);
  swift_retain();
  swift_release();
  v0[30] = v12;
  v0[31] = &protocol witness table for SendPaymentCATs;
  uint64_t v17 = (uint64_t)(v0 + 27);
  v0[27] = v10;
  swift_retain();
  id v13 = *(void *)(v11 + 16);
  swift_retain();
  swift_release();
  v0[35] = v12;
  v0[36] = &protocol witness table for SendPaymentCATs;
  id v18 = (uint64_t)(v0 + 32);
  v0[32] = v13;
  uint64_t v2 = (void *)swift_task_alloc();
  v14[54] = v2;
  uint64_t v19 = type metadata accessor for INSendPaymentIntent();
  uint64_t v3 = type metadata accessor for INSendPaymentIntentResponse();
  *uint64_t v2 = v14[37];
  v2[1] = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  uint64_t v4 = v14[49];
  uint64_t v5 = v14[42];
  uint64_t v25 = v3;
  uint64_t v26 = &protocol witness table for INSendPaymentIntent;
  uint64_t v27 = &protocol witness table for INSendPaymentIntentResponse;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(v5, v20, v15, v16, v4, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  id v9 = *v1;
  uint64_t v6 = *v1 + 16;
  uint64_t v7 = *v1 + 216;
  uint64_t v8 = *v1 + 256;
  *(void *)(v9 + 296) = *v1;
  *(void *)(v9 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  }
  else
  {
    uint64_t v4 = *(void **)(v6 + 408);
    uint64_t v5 = *(void **)(v6 + 400);
    __swift_destroy_boxed_opaque_existential_0(v8);
    __swift_destroy_boxed_opaque_existential_0(v7);

    swift_release();
    outlined destroy of ConfirmationViewBuilder(v6);
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 392);
  *(void *)(v0 + 296) = v0;

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 296) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 296) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 296) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  uint64_t v3 = (id)v0[53];
  uint64_t v4 = (id)v0[52];
  uint64_t v5 = (id)v0[49];
  v0[37] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[37] + 8);
  return v1();
}

uint64_t SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[37] = *v2;
  v5[49] = a1;
  v5[50] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = SendPaymentConfirmIntentStrategy.makeModernizedPaymentConfirmationView(confirmParameters:paymentsConcept:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[33] = v3;
  v4[32] = a3;
  v4[31] = a1;
  v4[26] = v4;
  v4[27] = 0;
  v4[28] = 0;
  v4[29] = 0;
  v4[22] = 0;
  v4[23] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v4[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v4[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v4[36] = v5;
  v4[37] = *(void *)(v5 - 8);
  v4[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[39] = v6;
  v4[40] = *(void *)(v6 - 8);
  v4[41] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v4[42] = swift_task_alloc();
  v4[27] = a2;
  v4[28] = a3;
  v4[29] = v3;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)()
{
  uint64_t v43 = v0;
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 312);
  *(void *)(v0 + 208) = v0;
  uint64_t v1 = SignpostName.makeSendPaymentErrorResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSendPaymentIntent, INSendPaymentIntentResponse>);
  id v23 = (id)IntentResolutionRecord.intentResponse.getter();
  id v24 = objc_msgSend(v23, sel_code);

  uint64_t v27 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)v24);
  uint64_t v28 = v2;
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 176) = v27;
  *(void *)(v0 + 184) = v2;
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v3, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v29 = *(_DWORD *)(v0 + 368);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v4;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v38 = buf;
    uint64_t v39 = v18;
    uint64_t v40 = v19;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25D85A000, v36, v37, "#SendPaymentConfirmIntentStrategy makeErrorResponse, response had %s", buf, v29);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = v20[41];
  uint64_t v11 = v20[39];
  uint64_t v12 = v20[33];
  uint64_t v9 = v20[40];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_retain();
  outlined init with copy of GlobalsProviding(v12 + 144, (uint64_t)(v20 + 2));
  swift_release();
  uint64_t v13 = v20[5];
  uint64_t v14 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v13);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 48) + **(int **)(v14 + 48));
  uint64_t v5 = (void *)swift_task_alloc();
  v20[44] = v5;
  *uint64_t v5 = v20[26];
  v5[1] = SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  uint64_t v6 = v20[35];
  uint64_t v7 = v20[32];
  return v15(v6, v7, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 208) = *v1;
  *(void *)(v4 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  }
  else
  {
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[37];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[35];
  v0[26] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[42];
    outlined destroy of TemplatingResult?(v24[35]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[25] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  else
  {
    uint64_t v21 = v24[42];
    uint64_t v22 = v24[38];
    uint64_t v20 = v24[36];
    id v23 = v24[34];
    uint64_t v17 = v24[33];
    uint64_t v18 = (uint64_t *)v24[31];
    uint64_t v19 = v24[37];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    uint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[26] + 8);
  }
  return v5();
}

uint64_t SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[34] = v6;
  v3[35] = *(void *)(v6 - 8);
  v3[36] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[37] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)()
{
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 272);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = SignpostName.makeConfirmationRejectedResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v17);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v3, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v20 = *(unsigned int *)(v0 + 328);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    *(void *)(v16 + 168) = buf;
    *(void *)(v16 + 176) = v13;
    *(void *)(v16 + 184) = v14;
    serialize(_:at:)(0, (unsigned char **)(v16 + 168));
    serialize(_:at:)(0, (unsigned char **)(v16 + 168));
    *(void *)(v16 + 192) = v23;
    uint64_t v15 = (void *)swift_task_alloc();
    void v15[2] = v16 + 168;
    v15[3] = v16 + 176;
    v15[4] = v16 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v22, v21, "#SendPaymentConfirmIntentStrategy makeConfirmationRejectedResponse", buf, v20);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v16 + 288);
  uint64_t v9 = *(void *)(v16 + 272);
  uint64_t v10 = *(void *)(v16 + 208);
  uint64_t v7 = *(void *)(v16 + 280);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  *(void *)(v16 + 304) = *(void *)(v10 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v16 + 312) = v4;
  *uint64_t v4 = *(void *)(v16 + 136);
  v4[1] = SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  uint64_t v5 = *(void *)(v16 + 264);
  return SendPaymentCATs.promptCancelled()(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  }
  else
  {
    swift_release();
    uint64_t v2 = SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  char has_malloc_size;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v12 = v0[37];
  uint64_t v13 = v0[33];
  uint64_t v10 = v0[32];
  uint64_t v11 = v0[31];
  uint64_t v14 = v0[30];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[28];
  uint64_t v15 = v0[27];
  uint64_t v6 = v0[26];
  uint64_t v7 = (uint64_t *)v0[25];
  v0[17] = v0;
  has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v14);
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v15, v14, v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v9);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v15);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v11);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[17] + 8);
  return v2();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 48) = buf;
    *(void *)(v14 + 56) = v11;
    *(void *)(v14 + 64) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    *(void *)(v14 + 72) = v20;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 48;
    void v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#SendPaymentConfirmIntentStrategy makeRepromptOnEmptyParse", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v7 = *(uint64_t **)(v14 + 80);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 16) + 8);
  return v3();
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 48) = buf;
    *(void *)(v14 + 56) = v11;
    *(void *)(v14 + 64) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    *(void *)(v14 + 72) = v20;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 48;
    void v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#SendPaymentConfirmIntentStrategy makeRepromptOnLowConfidence", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v7 = *(uint64_t **)(v14 + 80);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  AceOutput.init(commands:flowActivity:)();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 16) + 8);
  return v3();
}

uint64_t SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[26] = v2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:), 0);
}

uint64_t SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 248);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 168) = buf;
    *(void *)(v15 + 176) = v12;
    *(void *)(v15 + 184) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    serialize(_:at:)(0, (unsigned char **)(v15 + 168));
    *(void *)(v15 + 192) = v21;
    uint64_t v14 = (void *)swift_task_alloc();
    void v14[2] = v15 + 168;
    v14[3] = v15 + 176;
    v14[4] = v15 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#SendPaymentConfirmIntentStrategy makeFlowCancelledResponse", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v15 + 264);
  uint64_t v8 = *(void *)(v15 + 248);
  uint64_t v9 = *(void *)(v15 + 208);
  uint64_t v6 = *(void *)(v15 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(void *)(v15 + 272) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v15 + 280) = v3;
  *uint64_t v3 = *(void *)(v15 + 136);
  v3[1] = RequestPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:);
  uint64_t v4 = *(void *)(v15 + 240);
  return SendPaymentCATs.promptCancelled()(v4);
}

uint64_t SendPaymentConfirmIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SendPaymentConfirmIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SendPaymentConfirmIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  os_log_type_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeConfirmationRejectedResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeFlowCancelledResponse(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance SendPaymentConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SendPaymentConfirmIntentStrategy.makeErrorResponse(error:confirmParameters:)(a1, a2, a3);
}

uint64_t sub_25D9DA944()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DA984()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DA9B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DA9DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAA1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAA5C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAA9C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAAC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAAF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9DAB34()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SendPaymentConfirmIntentStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for SendPaymentConfirmIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t SAClientBoundCommand.data.getter()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  id v18 = 0;
  os_log_type_t v19 = v0;
  id v16 = objc_msgSend(v0, sel_dictionary);
  if (!v16) {
    return Data.init()();
  }
  id v18 = v16;
  id v20 = 0;
  id v13 = self;
  id v1 = v16;
  id v17 = 0;
  id v15 = objc_msgSend(v13, sel_dataWithPropertyList_format_options_error_, v16, 200, 0, &v17);
  id v14 = v17;
  id v2 = v17;
  uint64_t v3 = v20;
  id v20 = v14;

  swift_unknownObjectRelease();
  if (v15)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v4;
    outlined copy of Data._Representation(v11, v4);
    uint64_t v21 = v11;
    unint64_t v22 = v10;

    outlined destroy of Data((uint64_t)&v21);
    return v11;
  }
  else
  {
    id v7 = v20;
    id v8 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v6 = v8;
    uint64_t v9 = Data.init()();

    return v9;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.init(confirmLabel:cancelLabel:noteLabel:feeLabel:confirmDI:cancelDI:appId:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  a9[10] = a12;
  a9[11] = a13;
  a9[12] = a14;
  a9[13] = a15;
  return result;
}

void *SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(intent:response:confirmation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a4, a1);
  uint64_t v12 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  uint64_t v8 = *(int *)(v12 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a4 + v8, a2);
  return memcpy((void *)(a4 + *(int *)(v12 + 24)), a3, 0x70uLL);
}

void *SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(intent:response:confirmation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a4, a1);
  uint64_t v12 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  uint64_t v8 = *(int *)(v12 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a4 + v8, a2);
  return memcpy((void *)(a4 + *(int *)(v12 + 24)), a3, 0x70uLL);
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.init(primaryButtonDI:primaryButtonLabel:secondaryButtonDI:secondaryButtonLabel:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t one-time initialization function for bundleName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SiriPaymentsUIPlugin", 0x14uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static SiriPaymentsSnippetModel.bundleName = (__int128)v1;
  return result;
}

long long *SiriPaymentsSnippetModel.bundleName.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleName != -1) {
    swift_once();
  }
  return &static SiriPaymentsSnippetModel.bundleName;
}

uint64_t static SiriPaymentsSnippetModel.bundleName.getter()
{
  uint64_t v1 = *(void *)SiriPaymentsSnippetModel.bundleName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intent", 6uLL, 1);
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("response", 8uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmation", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intent", 6uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("response", 8uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmation", 0xCuLL, 1)._countAndFlagsBits;
  }
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v44 = &v63;
  uint64_t v40 = a1;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  unint64_t v37 = (*(void *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)v8 - v37;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  uint64_t v48 = *(void *)(v53 - 8);
  uint64_t v49 = v53 - 8;
  unint64_t v39 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v53);
  uint64_t v55 = (char *)v8 - v39;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys>);
  uint64_t v41 = *(void *)(v52 - 8);
  uint64_t v42 = v52 - 8;
  unint64_t v43 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v40);
  uint64_t v47 = (char *)v8 - v43;
  *uint64_t v44 = (uint64_t)v2;
  uint64_t v62 = v1;
  uint64_t v45 = v2[3];
  uint64_t v46 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v45);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v55, v50, v53);
  id v51 = &v61;
  char v61 = 0;
  lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>();
  uint64_t v3 = v54;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v56 = v3;
  uint64_t v57 = v3;
  if (v3)
  {
    uint64_t v9 = v57;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v55, v53);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    uint64_t v10 = v9;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v55, v53);
    uint64_t v30 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v50 + *(int *)(v30 + 20), v34);
    uint64_t v31 = &v60;
    char v60 = 1;
    lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>();
    uint64_t v4 = v56;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v32 = v4;
    uint64_t v33 = v4;
    if (v4)
    {
      v8[2] = v33;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      uint64_t v11 = (uint64_t *)(v50 + *(int *)(v30 + 24));
      uint64_t v14 = *v11;
      uint64_t v15 = v11[1];
      uint64_t v13 = v11[2];
      uint64_t v12 = v11[3];
      uint64_t v16 = v11[4];
      uint64_t v17 = v11[5];
      uint64_t v18 = v11[6];
      uint64_t v19 = v11[7];
      uint64_t v20 = v11[8];
      unint64_t v21 = v11[9];
      uint64_t v22 = v11[10];
      unint64_t v23 = v11[11];
      uint64_t v24 = v11[12];
      uint64_t v25 = v11[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      outlined copy of Data._Representation(v22, v23);
      uint64_t v5 = v12;
      swift_bridgeObjectRetain();
      uint64_t v27 = v59;
      v59[0] = v14;
      v59[1] = v15;
      v59[2] = v13;
      v59[3] = v5;
      v59[4] = v16;
      v59[5] = v17;
      v59[6] = v18;
      v59[7] = v19;
      v59[8] = v20;
      v59[9] = v21;
      v59[10] = v22;
      v59[11] = v23;
      v59[12] = v24;
      v59[13] = v25;
      uint64_t v26 = &v58;
      char v58 = 2;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
      uint64_t v6 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v28 = v6;
      uint64_t v29 = v6;
      if (v6) {
        v8[1] = v29;
      }
      outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v59);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    }
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v56 = a1;
  id v83 = 0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  unint64_t v45 = (*(void *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)&v26 - v45;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v47 - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v47);
  id v51 = (char *)&v26 - v50;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys>);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  unint64_t v55 = (*(void *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v52);
  char v60 = (char *)&v26 - v55;
  uint64_t v57 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  unint64_t v58 = (*(void *)(*(void *)(v57 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v56);
  uint64_t v59 = (uint64_t)&v26 - v58;
  char v84 = 0;
  id v83 = v2;
  uint64_t v62 = v2[3];
  uint64_t v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
  uint64_t v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v64 = v3;
  uint64_t v65 = v3;
  if (v3)
  {
    uint64_t v30 = v65;
  }
  else
  {
    uint64_t v38 = &v82;
    char v82 = 0;
    lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>();
    uint64_t v4 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v39 = v4;
    uint64_t v40 = v4;
    if (v4)
    {
      uint64_t v29 = v40;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
      uint64_t v30 = v29;
    }
    else
    {
      int v34 = 1;
      char v84 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v59, v51, v47);
      uint64_t v35 = &v81;
      char v81 = v34;
      lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>();
      uint64_t v5 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v36 = v5;
      uint64_t v37 = v5;
      if (v5)
      {
        uint64_t v28 = v37;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
        uint64_t v30 = v28;
      }
      else
      {
        uint64_t v6 = v59 + *(int *)(v57 + 20);
        char v84 = 3;
        (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v6, v46, v42);
        uint64_t v31 = &v66;
        char v66 = 2;
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
        uint64_t v7 = v36;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v32 = v7;
        uint64_t v33 = v7;
        if (!v7)
        {
          uint64_t v8 = v52;
          uint64_t v9 = v60;
          uint64_t v10 = v53;
          uint64_t v11 = v68;
          uint64_t v12 = v69;
          uint64_t v13 = v70;
          uint64_t v14 = v71;
          uint64_t v15 = v72;
          uint64_t v16 = v73;
          uint64_t v17 = v74;
          uint64_t v18 = v75;
          uint64_t v19 = v76;
          uint64_t v20 = v77;
          uint64_t v21 = v78;
          uint64_t v22 = v79;
          uint64_t v23 = v80;
          uint64_t v24 = (void *)(v59 + *(int *)(v57 + 24));
          char v84 = 7;
          *uint64_t v24 = v67;
          v24[1] = v11;
          v24[2] = v12;
          v24[3] = v13;
          v24[4] = v14;
          v24[5] = v15;
          v24[6] = v16;
          v24[7] = v17;
          v24[8] = v18;
          v24[9] = v19;
          v24[10] = v20;
          v24[11] = v21;
          v24[12] = v22;
          v24[13] = v23;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v8);
          outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v59, v41);
          __swift_destroy_boxed_opaque_existential_0(v56);
          return outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v59);
        }
        uint64_t v27 = v33;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
        uint64_t v30 = v27;
      }
    }
  }
  uint64_t v26 = v30;
  uint64_t result = __swift_destroy_boxed_opaque_existential_0(v56);
  if (v84) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v59, v47);
  }
  if ((v84 & 2) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v59 + *(int *)(v57 + 20), v42);
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v44 = &v63;
  uint64_t v40 = a1;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  unint64_t v37 = (*(void *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)v8 - v37;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  uint64_t v48 = *(void *)(v53 - 8);
  uint64_t v49 = v53 - 8;
  unint64_t v39 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v53);
  unint64_t v55 = (char *)v8 - v39;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys>);
  uint64_t v41 = *(void *)(v52 - 8);
  uint64_t v42 = v52 - 8;
  unint64_t v43 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v40);
  uint64_t v47 = (char *)v8 - v43;
  *uint64_t v44 = (uint64_t)v2;
  uint64_t v62 = v1;
  uint64_t v45 = v2[3];
  uint64_t v46 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v45);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v55, v50, v53);
  id v51 = &v61;
  char v61 = 0;
  lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>();
  uint64_t v3 = v54;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v56 = v3;
  uint64_t v57 = v3;
  if (v3)
  {
    uint64_t v9 = v57;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v55, v53);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    uint64_t v10 = v9;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v55, v53);
    uint64_t v30 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v50 + *(int *)(v30 + 20), v34);
    uint64_t v31 = &v60;
    char v60 = 1;
    lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>();
    uint64_t v4 = v56;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v32 = v4;
    uint64_t v33 = v4;
    if (v4)
    {
      v8[2] = v33;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      uint64_t v11 = (uint64_t *)(v50 + *(int *)(v30 + 24));
      uint64_t v14 = *v11;
      uint64_t v15 = v11[1];
      uint64_t v13 = v11[2];
      uint64_t v12 = v11[3];
      uint64_t v16 = v11[4];
      uint64_t v17 = v11[5];
      uint64_t v18 = v11[6];
      uint64_t v19 = v11[7];
      uint64_t v20 = v11[8];
      unint64_t v21 = v11[9];
      uint64_t v22 = v11[10];
      unint64_t v23 = v11[11];
      uint64_t v24 = v11[12];
      uint64_t v25 = v11[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      outlined copy of Data._Representation(v22, v23);
      uint64_t v5 = v12;
      swift_bridgeObjectRetain();
      uint64_t v27 = v59;
      v59[0] = v14;
      v59[1] = v15;
      v59[2] = v13;
      v59[3] = v5;
      v59[4] = v16;
      v59[5] = v17;
      v59[6] = v18;
      v59[7] = v19;
      v59[8] = v20;
      v59[9] = v21;
      v59[10] = v22;
      v59[11] = v23;
      v59[12] = v24;
      v59[13] = v25;
      uint64_t v26 = &v58;
      char v58 = 2;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
      uint64_t v6 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v28 = v6;
      uint64_t v29 = v6;
      if (v6) {
        v8[1] = v29;
      }
      outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v59);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v52);
    }
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v56 = a1;
  id v83 = 0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  unint64_t v45 = (*(void *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)&v26 - v45;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v47 - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v47);
  id v51 = (char *)&v26 - v50;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys>);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  unint64_t v55 = (*(void *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v52);
  char v60 = (char *)&v26 - v55;
  uint64_t v57 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  unint64_t v58 = (*(void *)(*(void *)(v57 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v56);
  uint64_t v59 = (uint64_t)&v26 - v58;
  char v84 = 0;
  id v83 = v2;
  uint64_t v62 = v2[3];
  uint64_t v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
  uint64_t v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v64 = v3;
  uint64_t v65 = v3;
  if (v3)
  {
    uint64_t v30 = v65;
  }
  else
  {
    uint64_t v38 = &v82;
    char v82 = 0;
    lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>();
    uint64_t v4 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v39 = v4;
    uint64_t v40 = v4;
    if (v4)
    {
      uint64_t v29 = v40;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
      uint64_t v30 = v29;
    }
    else
    {
      int v34 = 1;
      char v84 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v59, v51, v47);
      uint64_t v35 = &v81;
      char v81 = v34;
      lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>();
      uint64_t v5 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v36 = v5;
      uint64_t v37 = v5;
      if (v5)
      {
        uint64_t v28 = v37;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
        uint64_t v30 = v28;
      }
      else
      {
        uint64_t v6 = v59 + *(int *)(v57 + 20);
        char v84 = 3;
        (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v6, v46, v42);
        uint64_t v31 = &v66;
        char v66 = 2;
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel();
        uint64_t v7 = v36;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v32 = v7;
        uint64_t v33 = v7;
        if (!v7)
        {
          uint64_t v8 = v52;
          uint64_t v9 = v60;
          uint64_t v10 = v53;
          uint64_t v11 = v68;
          uint64_t v12 = v69;
          uint64_t v13 = v70;
          uint64_t v14 = v71;
          uint64_t v15 = v72;
          uint64_t v16 = v73;
          uint64_t v17 = v74;
          uint64_t v18 = v75;
          uint64_t v19 = v76;
          uint64_t v20 = v77;
          uint64_t v21 = v78;
          uint64_t v22 = v79;
          uint64_t v23 = v80;
          uint64_t v24 = (void *)(v59 + *(int *)(v57 + 24));
          char v84 = 7;
          *uint64_t v24 = v67;
          v24[1] = v11;
          v24[2] = v12;
          v24[3] = v13;
          v24[4] = v14;
          v24[5] = v15;
          v24[6] = v16;
          v24[7] = v17;
          v24[8] = v18;
          v24[9] = v19;
          v24[10] = v20;
          v24[11] = v21;
          v24[12] = v22;
          v24[13] = v23;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v8);
          outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v59, v41);
          __swift_destroy_boxed_opaque_existential_0(v56);
          return outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v59);
        }
        uint64_t v27 = v33;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v52);
        uint64_t v30 = v27;
      }
    }
  }
  uint64_t v26 = v30;
  uint64_t result = __swift_destroy_boxed_opaque_existential_0(v56);
  if (v84) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v59, v47);
  }
  if ((v84 & 2) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v59 + *(int *)(v57 + 20), v42);
  }
  return result;
}

BOOL static SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    case 4:
      uint64_t v4 = 4;
      break;
    case 5:
      uint64_t v4 = 5;
      break;
    case 6:
      uint64_t v4 = 6;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    case 4:
      uint64_t v3 = 4;
      break;
    case 5:
      uint64_t v3 = 5;
      break;
    case 6:
      uint64_t v3 = 6;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmLabel", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelLabel", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  char v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noteLabel", 9uLL, 1);
  swift_bridgeObjectRetain();
  char v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 2;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeLabel", 8uLL, 1);
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 3;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmDI", 9uLL, 1);
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelDI", 8uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 5;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appId", 5uLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v9 = 6;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 7;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(intValue:)()
{
  return 7;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelLabel", 0xBuLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noteLabel", 9uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeLabel", 8uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmDI", 9uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancelDI", 8uLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appId", 5uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirmLabel", 0xCuLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.PaymentConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v41 = a1;
  uint64_t v65 = 0;
  uint64_t v64 = 0;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys>);
  uint64_t v42 = *(void *)(v52 - 8);
  uint64_t v43 = v52 - 8;
  unint64_t v44 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v47 = (char *)v11 - v44;
  uint64_t v65 = (void *)MEMORY[0x270FA5388](v41);
  uint64_t v64 = v1;
  uint64_t v45 = v65[3];
  uint64_t v46 = v65[4];
  __swift_project_boxed_opaque_existential_1(v65, v45);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v2 = v49;
  uint64_t v50 = *v48;
  uint64_t v51 = v48[1];
  swift_bridgeObjectRetain();
  char v63 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v53 = v2;
  uint64_t v54 = v2;
  if (v2)
  {
    uint64_t v16 = v54;
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
    uint64_t v17 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v53;
    uint64_t v37 = v48[2];
    uint64_t v38 = v48[3];
    swift_bridgeObjectRetain();
    char v62 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v39 = v3;
    uint64_t v40 = v3;
    if (v3)
    {
      uint64_t v15 = v40;
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
      uint64_t v17 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v39;
      uint64_t v33 = v48[4];
      uint64_t v34 = v48[5];
      swift_bridgeObjectRetain();
      char v61 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v35 = v4;
      uint64_t v36 = v4;
      if (v4)
      {
        uint64_t v14 = v36;
        swift_bridgeObjectRelease();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
        uint64_t v17 = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v35;
        uint64_t v29 = v48[6];
        uint64_t v30 = v48[7];
        swift_bridgeObjectRetain();
        char v60 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        uint64_t v31 = v5;
        uint64_t v32 = v5;
        if (v5)
        {
          uint64_t v13 = v32;
          swift_bridgeObjectRelease();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
          uint64_t v17 = v13;
        }
        else
        {
          swift_bridgeObjectRelease();
          long long v67 = *((_OWORD *)v48 + 4);
          outlined retain of Data((uint64_t)&v67);
          uint64_t v25 = &v59;
          long long v59 = v67;
          uint64_t v24 = &v58;
          char v58 = 4;
          unint64_t v6 = lazy protocol witness table accessor for type Data and conformance Data();
          uint64_t v7 = v31;
          unint64_t v26 = v6;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          uint64_t v27 = v7;
          uint64_t v28 = v7;
          if (v7)
          {
            uint64_t v12 = v28;
            outlined destroy of Data((uint64_t)&v59);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
            uint64_t v17 = v12;
          }
          else
          {
            outlined destroy of Data((uint64_t)&v59);
            long long v66 = *((_OWORD *)v48 + 5);
            outlined retain of Data((uint64_t)&v66);
            uint64_t v8 = v27;
            long long v57 = v66;
            char v56 = 5;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            uint64_t v22 = v8;
            uint64_t v23 = v8;
            if (v8)
            {
              v11[1] = v23;
              outlined destroy of Data((uint64_t)&v57);
              return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
            }
            else
            {
              outlined destroy of Data((uint64_t)&v57);
              uint64_t v9 = v22;
              uint64_t v18 = v48[12];
              uint64_t v19 = v48[13];
              swift_bridgeObjectRetain();
              char v55 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              uint64_t v20 = v9;
              uint64_t v21 = v9;
              if (v9) {
                v11[0] = v21;
              }
              swift_bridgeObjectRelease();
              return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v47, v52);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *SiriPaymentsSnippetModel.PaymentConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v86 = v111;
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  uint64_t v110 = 0;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys>);
  uint64_t v90 = *(void *)(v89 - 8);
  uint64_t v91 = v89 - 8;
  unint64_t v92 = (*(void *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v88);
  uint64_t v93 = (char *)v39 - v92;
  char v117 = 0;
  uint64_t v110 = v2;
  uint64_t v95 = v2[3];
  uint64_t v96 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v95);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
  uint64_t v3 = v94;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v97 = v3;
  uint64_t v98 = v3;
  if (v3)
  {
    uint64_t v43 = v98;
  }
  else
  {
    char v109 = 0;
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v82 = 0;
    uint64_t v83 = v4;
    uint64_t v84 = v5;
    uint64_t v85 = 0;
    uint64_t v76 = v5;
    uint64_t v75 = v4;
    int v77 = 1;
    char v117 = 1;
    swift_bridgeObjectRetain();
    v111[0] = v75;
    v111[1] = v76;
    char v108 = v77;
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v78 = 0;
    uint64_t v79 = v6;
    uint64_t v80 = v7;
    uint64_t v81 = 0;
    uint64_t v70 = v7;
    uint64_t v69 = v6;
    char v117 = 3;
    swift_bridgeObjectRetain();
    v112[0] = v69;
    v112[1] = v70;
    char v107 = 2;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v71 = 0;
    uint64_t v72 = v8;
    uint64_t v73 = v9;
    uint64_t v74 = 0;
    uint64_t v64 = v9;
    char v63 = (uint64_t *)v8;
    char v117 = 7;
    swift_bridgeObjectRetain();
    v113[0] = v63;
    v113[1] = v64;
    char v106 = 3;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v65 = 0;
    uint64_t v66 = v10;
    uint64_t v67 = v11;
    uint64_t v68 = 0;
    uint64_t v58 = v11;
    uint64_t v57 = v10;
    char v117 = 15;
    swift_bridgeObjectRetain();
    v114[0] = v57;
    v114[1] = v58;
    long long v59 = &v103;
    char v103 = 4;
    unint64_t v12 = lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v13 = v65;
    unint64_t v60 = v12;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v61 = v13;
    uint64_t v62 = v13;
    if (v13)
    {
      uint64_t v42 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v89);
      uint64_t v43 = v42;
    }
    else
    {
      uint64_t v53 = v104;
      unint64_t v54 = v105;
      char v117 = 31;
      outlined copy of Data._Representation(v104, v105);
      uint64_t v14 = v61;
      uint64_t v115 = v53;
      v86[9] = v54;
      char v100 = 5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v55 = v14;
      uint64_t v56 = v14;
      if (v14)
      {
        uint64_t v41 = v56;
        outlined consume of Data._Representation(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v89);
        uint64_t v43 = v41;
      }
      else
      {
        uint64_t v47 = v101;
        unint64_t v48 = v102;
        char v117 = 63;
        outlined copy of Data._Representation(v101, v102);
        uint64_t v15 = v86;
        unint64_t v16 = v48;
        uint64_t v17 = v55;
        v86[10] = v47;
        v15[11] = v16;
        char v99 = 6;
        uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v49 = v17;
        uint64_t v50 = v18;
        uint64_t v51 = v19;
        uint64_t v52 = v17;
        if (!v17)
        {
          uint64_t v46 = v51;
          uint64_t v45 = v50;
          unint64_t v44 = v111;
          char v117 = 127;
          swift_bridgeObjectRetain();
          uint64_t v20 = v93;
          uint64_t v21 = v86;
          uint64_t v22 = v90;
          uint64_t v23 = v89;
          uint64_t v24 = v46;
          v86[12] = v45;
          v21[13] = v24;
          (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v23);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v53, v54);
          outlined copy of Data._Representation(v47, v48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v47, v48);
          outlined consume of Data._Representation(v53, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_0(v88);
          outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel((uint64_t)v44);
          uint64_t v25 = v76;
          uint64_t v26 = v69;
          uint64_t v27 = v70;
          uint64_t v28 = v64;
          uint64_t v29 = v57;
          uint64_t v30 = v58;
          uint64_t v31 = v53;
          unint64_t v32 = v54;
          uint64_t v33 = v47;
          unint64_t v34 = v48;
          uint64_t v35 = v45;
          uint64_t v36 = v87;
          uint64_t v37 = v46;
          uint64_t result = v63;
          *uint64_t v87 = v75;
          v36[1] = v25;
          v36[2] = v26;
          v36[3] = v27;
          v36[4] = (uint64_t)result;
          uint64_t v36[5] = v28;
          v36[6] = v29;
          v36[7] = v30;
          v36[8] = v31;
          v36[9] = v32;
          v36[10] = v33;
          v36[11] = v34;
          v36[12] = v35;
          v36[13] = v37;
          return result;
        }
        uint64_t v40 = v52;
        outlined consume of Data._Representation(v47, v48);
        outlined consume of Data._Representation(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v89);
        uint64_t v43 = v40;
      }
    }
  }
  v39[1] = v43;
  uint64_t result = (uint64_t *)__swift_destroy_boxed_opaque_existential_0(v88);
  if (v117)
  {
    uint64_t result = v111;
    outlined destroy of String.UTF8View();
  }
  if ((v117 & 2) != 0)
  {
    uint64_t result = v112;
    outlined destroy of String.UTF8View();
  }
  if ((v117 & 4) != 0)
  {
    uint64_t result = v113;
    outlined destroy of String.UTF8View();
  }
  if ((v117 & 8) != 0)
  {
    uint64_t result = v114;
    outlined destroy of String.UTF8View();
  }
  if ((v117 & 0x10) != 0)
  {
    uint64_t result = &v115;
    outlined destroy of Data((uint64_t)&v115);
  }
  if ((v117 & 0x20) != 0)
  {
    uint64_t result = (uint64_t *)v116;
    outlined destroy of Data((uint64_t)v116);
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDescription", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("prompt", 6uLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    char v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("prompt", 6uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDescription", 0xEuLL, 1)._countAndFlagsBits;
  }
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a1;
  uint64_t v21 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys>);
  uint64_t v15 = *(void *)(v23 - 8);
  uint64_t v16 = v23 - 8;
  unint64_t v17 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v10 - v17;
  uint64_t v35 = (void *)MEMORY[0x270FA5388](v14);
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  uint64_t v18 = v35[3];
  uint64_t v19 = v35[4];
  __swift_project_boxed_opaque_existential_1(v35, v18);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  uint64_t v26 = &v31;
  uint64_t v31 = v21;
  uint64_t v22 = &v30;
  char v30 = 0;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppDescription]);
  lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]();
  uint64_t v7 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v27 = v7;
  uint64_t v28 = v7;
  if (v7)
  {
    v10[1] = v28;
    outlined destroy of [SFCardSection]();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v23);
  }
  else
  {
    outlined destroy of [SFCardSection]();
    uint64_t v8 = v27;
    swift_bridgeObjectRetain();
    char v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[3] = v8;
    uint64_t v11 = v8;
    if (v8) {
      v10[0] = v11;
    }
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v23);
  }
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationModel.init(from:)(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v36 = 0;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys>);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = v23 - 8;
  unint64_t v26 = (*(void *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = (char *)v6 - v26;
  char v38 = 0;
  uint64_t v36 = (void *)MEMORY[0x270FA5388](v22);
  uint64_t v29 = v36[3];
  uint64_t v30 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v29);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
  uint64_t v1 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v31 = v1;
  uint64_t v32 = v1;
  if (v1)
  {
    uint64_t v8 = v32;
  }
  else
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppDescription]);
    uint64_t v18 = &v34;
    char v34 = 0;
    lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]();
    uint64_t v2 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v20 = v2;
    uint64_t v21 = v2;
    if (!v2)
    {
      uint64_t v12 = v35;
      int v13 = 1;
      char v38 = 1;
      swift_bridgeObjectRetain();
      v37[0] = v12;
      char v33 = v13;
      uint64_t v3 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v14 = 0;
      uint64_t v15 = v3;
      uint64_t v16 = v4;
      uint64_t v17 = 0;
      uint64_t v11 = v4;
      uint64_t v10 = v3;
      uint64_t v9 = v37;
      char v38 = 3;
      swift_bridgeObjectRetain();
      v37[1] = v10;
      v37[2] = v11;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0(v22);
      outlined destroy of SiriPaymentsSnippetModel.AppDisambiguationModel();
      return v12;
    }
    uint64_t v7 = v21;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    uint64_t v8 = v7;
  }
  void v6[3] = v8;
  __swift_destroy_boxed_opaque_existential_0(v22);
  if (v38) {
    outlined destroy of [SFCardSection]();
  }
  return v6[2];
}

BOOL static SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("primaryButtonDI", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("primaryButtonLabel", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryButtonDI", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryButtonLabel", 0x14uLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("primaryButtonLabel", 0x12uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryButtonDI", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryButtonLabel", 0x14uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("primaryButtonDI", 0xFuLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationModel.encode(to:)(uint64_t a1)
{
  uint64_t v22 = a1;
  unint64_t v44 = 0;
  uint64_t v43 = 0;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys>);
  uint64_t v23 = *(void *)(v31 - 8);
  uint64_t v24 = v31 - 8;
  unint64_t v25 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v28 = (char *)v8 - v25;
  unint64_t v44 = (void *)MEMORY[0x270FA5388](v22);
  uint64_t v43 = v1;
  uint64_t v26 = v44[3];
  uint64_t v27 = v44[4];
  __swift_project_boxed_opaque_existential_1(v44, v26);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v46 = *v29;
  outlined retain of Data((uint64_t)&v46);
  char v33 = &v42;
  long long v42 = v46;
  uint64_t v30 = &v41;
  char v41 = 0;
  unint64_t v2 = lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v3 = v32;
  unint64_t v34 = v2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v35 = v3;
  uint64_t v36 = v3;
  if (v3)
  {
    uint64_t v10 = v36;
    outlined destroy of Data((uint64_t)&v42);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v31);
    uint64_t v11 = v10;
  }
  else
  {
    outlined destroy of Data((uint64_t)&v42);
    uint64_t v4 = v35;
    uint64_t v18 = *((void *)v29 + 2);
    uint64_t v19 = *((void *)v29 + 3);
    swift_bridgeObjectRetain();
    char v40 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v20 = v4;
    uint64_t v21 = v4;
    if (v4)
    {
      uint64_t v9 = v21;
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v31);
      uint64_t v11 = v9;
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v45 = v29[2];
      outlined retain of Data((uint64_t)&v45);
      uint64_t v5 = v20;
      long long v39 = v45;
      char v38 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v16 = v5;
      uint64_t v17 = v5;
      if (v5)
      {
        v8[2] = v17;
        outlined destroy of Data((uint64_t)&v39);
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v31);
      }
      else
      {
        outlined destroy of Data((uint64_t)&v39);
        uint64_t v6 = v16;
        uint64_t v12 = *((void *)v29 + 6);
        uint64_t v13 = *((void *)v29 + 7);
        swift_bridgeObjectRetain();
        char v37 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        uint64_t v14 = v6;
        uint64_t v15 = v6;
        if (v6) {
          v8[1] = v15;
        }
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v31);
      }
    }
  }
  return result;
}

void *SiriPaymentsSnippetModel.BinaryConfirmationModel.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v69 = 0;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys>);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = v51 - 8;
  unint64_t v54 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v55 = (char *)&v20 - v54;
  char v73 = 0;
  uint64_t v69 = (void *)MEMORY[0x270FA5388](v50);
  uint64_t v57 = v69[3];
  uint64_t v58 = v69[4];
  __swift_project_boxed_opaque_existential_1(v69, v57);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys();
  uint64_t v2 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v59 = v2;
  uint64_t v60 = v2;
  if (v2)
  {
    uint64_t v24 = v60;
  }
  else
  {
    long long v45 = &v66;
    char v66 = 0;
    unint64_t v3 = lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v4 = v59;
    unint64_t v46 = v3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v47 = v4;
    uint64_t v48 = v4;
    if (v4)
    {
      uint64_t v23 = v48;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v38 = v67;
      unint64_t v39 = v68;
      int v40 = 1;
      char v73 = 1;
      outlined copy of Data._Representation(v67, v68);
      uint64_t v5 = v47;
      v70[0] = v38;
      v70[1] = v39;
      char v65 = v40;
      uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v41 = v5;
      uint64_t v42 = v6;
      uint64_t v43 = v7;
      uint64_t v44 = v5;
      if (v5)
      {
        uint64_t v22 = v44;
        outlined consume of Data._Representation(v38, v39);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
        uint64_t v24 = v22;
      }
      else
      {
        uint64_t v35 = v43;
        uint64_t v34 = v42;
        char v73 = 3;
        swift_bridgeObjectRetain();
        v71[0] = v34;
        v71[1] = v35;
        char v62 = 2;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v28 = v63;
        unint64_t v29 = v64;
        char v73 = 7;
        outlined copy of Data._Representation(v63, v64);
        uint64_t v8 = v36;
        v72[0] = v28;
        v72[1] = v29;
        char v61 = 3;
        uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v30 = v8;
        uint64_t v31 = v9;
        uint64_t v32 = v10;
        uint64_t v33 = v8;
        if (!v8)
        {
          uint64_t v27 = v32;
          uint64_t v26 = v31;
          unint64_t v25 = v70;
          char v73 = 15;
          swift_bridgeObjectRetain();
          v72[2] = v26;
          v72[3] = v27;
          (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
          outlined copy of Data._Representation(v38, v39);
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v28, v29);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v28, v29);
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v38, v39);
          __swift_destroy_boxed_opaque_existential_0(v50);
          uint64_t result = (void *)outlined destroy of SiriPaymentsSnippetModel.BinaryConfirmationModel((uint64_t)v25);
          unint64_t v12 = v39;
          uint64_t v13 = v34;
          uint64_t v14 = v35;
          uint64_t v15 = v28;
          unint64_t v16 = v29;
          uint64_t v17 = v26;
          uint64_t v18 = v49;
          uint64_t v19 = v27;
          *uint64_t v49 = v38;
          v18[1] = v12;
          void v18[2] = v13;
          v18[3] = v14;
          v18[4] = v15;
          v18[5] = v16;
          v18[6] = v17;
          v18[7] = v19;
          return result;
        }
        uint64_t v21 = v33;
        outlined consume of Data._Representation(v28, v29);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v38, v39);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
        uint64_t v24 = v21;
      }
    }
  }
  uint64_t v20 = v24;
  uint64_t result = (void *)__swift_destroy_boxed_opaque_existential_0(v50);
  if (v73)
  {
    uint64_t result = v70;
    outlined destroy of Data((uint64_t)v70);
  }
  if ((v73 & 2) != 0)
  {
    uint64_t result = v71;
    outlined destroy of String.UTF8View();
  }
  if ((v73 & 4) != 0)
  {
    uint64_t result = v72;
    outlined destroy of Data((uint64_t)v72);
  }
  return result;
}

uint64_t static SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1);
  swift_bridgeObjectRetain();
  char v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1)._countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

BOOL static SiriPaymentsSnippetModel.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestPaymentConfirmation", 0x1AuLL, 1);
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sendPaymentConfirmation", 0x17uLL, 1);
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDisambiguation", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binaryConfirmation", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sendPaymentConfirmation", 0x17uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appDisambiguation", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binaryConfirmation", 0x12uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requestPaymentConfirmation", 0x1AuLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t SiriPaymentsSnippetModel.encode(to:)(uint64_t a1)
{
  uint64_t v69 = a1;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys>);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = v41 - 8;
  unint64_t v44 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v41);
  long long v45 = (char *)&v8 - v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.AppDisambiguationCodingKeys>);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = v46 - 8;
  unint64_t v49 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v46);
  uint64_t v50 = (char *)&v8 - v49;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys>);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = v51 - 8;
  unint64_t v54 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v8 - v54;
  uint64_t v64 = 0;
  uint64_t v56 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  unint64_t v57 = (*(void *)(*(void *)(v56 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v56);
  uint64_t v58 = (uint64_t)&v8 - v57;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys>);
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = v59 - 8;
  unint64_t v62 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (char *)&v8 - v62;
  uint64_t v65 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  unint64_t v66 = (*(void *)(*(void *)(v65 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v64);
  uint64_t v67 = (uint64_t)&v8 - v66;
  uint64_t v78 = type metadata accessor for SiriPaymentsSnippetModel();
  unint64_t v68 = (*(void *)(*(void *)(v78 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v78);
  uint64_t v79 = (uint64_t *)((char *)&v8 - v68);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriPaymentsSnippetModel.CodingKeys>);
  uint64_t v71 = *(void *)(v70 - 8);
  uint64_t v72 = v70 - 8;
  unint64_t v73 = (*(void *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (void *)MEMORY[0x270FA5388](v69);
  uint64_t v74 = (char *)&v8 - v73;
  uint64_t v88 = v2;
  uint64_t v87 = v1;
  uint64_t v75 = v2[3];
  uint64_t v76 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v75);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of SiriPaymentsSnippetModel(v77, v79);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
      outlined init with take of SiriPaymentsSnippetModel.SendPaymentConfirmationModel((uint64_t)v79, v58);
      uint64_t v33 = &v82;
      char v82 = 1;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      uint64_t v4 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v34 = v4;
      uint64_t v35 = v4;
      if (!v4)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
        outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v58);
        uint64_t v36 = v34;
        goto LABEL_10;
      }
      uint64_t v10 = v35;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v51);
      outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v58);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v74, v70);
      uint64_t v12 = v10;
      break;
    case 2:
      uint64_t v27 = *v79;
      uint64_t v28 = v79[1];
      uint64_t v29 = v79[2];
      uint64_t v26 = &v84;
      char v84 = 2;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v30 = v83;
      v83[0] = v27;
      v83[1] = v28;
      v83[2] = v29;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
      uint64_t v5 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v31 = v5;
      uint64_t v32 = v5;
      if (!v5)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v31;
        goto LABEL_10;
      }
      uint64_t v9 = v32;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v74, v70);
      uint64_t v12 = v9;
      break;
    case 3:
      uint64_t v15 = *v79;
      unint64_t v16 = v79[1];
      uint64_t v17 = v79[2];
      uint64_t v18 = v79[3];
      uint64_t v19 = v79[4];
      unint64_t v20 = v79[5];
      uint64_t v21 = v79[6];
      uint64_t v22 = v79[7];
      uint64_t v14 = &v86;
      char v86 = 3;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v23 = v85;
      v85[0] = v15;
      v85[1] = v16;
      v85[2] = v17;
      v85[3] = v18;
      v85[4] = v19;
      v85[5] = v20;
      v85[6] = v21;
      v85[7] = v22;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel();
      uint64_t v6 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v24 = v6;
      uint64_t v25 = v6;
      if (!v6)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
        outlined consume of Data._Representation(v15, v16);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v19, v20);
        swift_bridgeObjectRelease();
        uint64_t v36 = v24;
        goto LABEL_10;
      }
      uint64_t v8 = v25;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
      outlined consume of Data._Representation(v15, v16);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v19, v20);
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v74, v70);
      break;
    default:
      outlined init with take of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel((uint64_t)v79, v67);
      uint64_t v37 = &v81;
      char v81 = 0;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      uint64_t v3 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v38 = v3;
      uint64_t v39 = v3;
      if (v3)
      {
        uint64_t v11 = v39;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v59);
        outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v67);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v74, v70);
        uint64_t v12 = v11;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v59);
        outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v67);
        uint64_t v36 = v38;
LABEL_10:
        uint64_t v13 = v36;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v74, v70);
      }
      break;
  }
  return result;
}

uint64_t SiriPaymentsSnippetModel.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v132 = v155;
  uint64_t v96 = a2;
  uint64_t v121 = a1;
  uint64_t v158 = 0;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys>);
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = v97 - 8;
  unint64_t v100 = (*(void *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v97);
  uint64_t v101 = (char *)v40 - v100;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.AppDisambiguationCodingKeys>);
  uint64_t v103 = *(void *)(v102 - 8);
  uint64_t v104 = v102 - 8;
  unint64_t v105 = (*(void *)(v103 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v102);
  char v106 = (char *)v40 - v105;
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys>);
  uint64_t v108 = *(void *)(v107 - 8);
  uint64_t v109 = v107 - 8;
  unint64_t v110 = (*(void *)(v108 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v107);
  id v111 = (char *)v40 - v110;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys>);
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v114 = v112 - 8;
  unint64_t v115 = (*(void *)(v113 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v112);
  uint64_t v116 = (char *)v40 - v115;
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriPaymentsSnippetModel.CodingKeys>);
  uint64_t v118 = *(void *)(v117 - 8);
  uint64_t v119 = v117 - 8;
  unint64_t v120 = (*(void *)(v118 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v117);
  uint64_t v134 = (char *)v40 - v120;
  uint64_t v122 = type metadata accessor for SiriPaymentsSnippetModel();
  unint64_t v123 = (*(void *)(*(void *)(v122 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v121);
  uint64_t v124 = (char *)v40 - v123;
  unint64_t v125 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v126 = (char *)v40 - v125;
  unint64_t v127 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v128 = (char *)v40 - v127;
  unint64_t v129 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  id v130 = (char *)v40 - v129;
  unint64_t v131 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (void *)MEMORY[0x270FA5388](v8);
  uint64_t v133 = (char *)v40 - v131;
  v132[10] = v10;
  uint64_t v136 = v10[3];
  uint64_t v137 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v136);
  lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
  uint64_t v11 = v135;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v138 = v11;
  uint64_t v139 = v11;
  if (v11)
  {
    uint64_t v57 = v139;
    goto LABEL_30;
  }
  uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
  unint64_t v92 = &v157;
  v132[5] = v12;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SiriPaymentsSnippetModel.CodingKeys]);
  lazy protocol witness table accessor for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]();
  uint64_t v13 = ArraySlice.init<A>(_:)();
  uint64_t v14 = v132;
  v132[6] = v13;
  v14[7] = v15;
  v14[8] = v16;
  v14[9] = v17;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<SiriPaymentsSnippetModel.CodingKeys>);
  unint64_t v94 = lazy protocol witness table accessor for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>();
  Collection<>.popFirst()();
  int v95 = v156;
  if (v156 == 4) {
    goto LABEL_20;
  }
  int v90 = v95;
  int v83 = v95;
  uint64_t v88 = v132[6];
  uint64_t v84 = v132[7];
  uint64_t v85 = v132[8];
  uint64_t v86 = v132[9];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v87 = v155;
  v155[0] = v88;
  v155[1] = v84;
  v155[2] = v85;
  v132[3] = v86;
  int v89 = Collection.isEmpty.getter();
  outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
  swift_unknownObjectRelease();
  if ((v89 & 1) == 0)
  {
LABEL_20:
    uint64_t v51 = 0;
    uint64_t v55 = type metadata accessor for DecodingError();
    int v49 = 1;
    uint64_t v56 = swift_allocError();
    unint64_t v54 = v38;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v50 = (char *)v54 + *(int *)(v39 + 48);
    *unint64_t v54 = v122;
    uint64_t v52 = KeyedDecodingContainer.codingPath.getter();
    uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid number of keys found, expected one.", 0x2BuLL, v49 & 1)._countAndFlagsBits;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v55 - 8) + 104))(v54, *MEMORY[0x263F8DCB0]);
    swift_willThrow();
    outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
    uint64_t v57 = v56;
LABEL_30:
    v40[1] = v57;
    return __swift_destroy_boxed_opaque_existential_0(v121);
  }
  uint64_t v82 = v83;
  switch((char)v83)
  {
    case 1:
      uint64_t v72 = &v141;
      char v141 = v83;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
      uint64_t v20 = v138;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v73 = v20;
      uint64_t v74 = v20;
      if (v20)
      {
        uint64_t v46 = v74;
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v46;
      }
      else
      {
        uint64_t v69 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v21 = v73;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v70 = v21;
        uint64_t v71 = v21;
        if (!v21)
        {
          swift_storeEnumTagMultiPayload();
          outlined init with take of SiriPaymentsSnippetModel(v128, v133);
          (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v107);
          uint64_t v75 = v70;
          goto LABEL_19;
        }
        uint64_t v45 = v71;
        (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v107);
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v45;
      }
      goto LABEL_30;
    case 2:
      unint64_t v66 = &v145;
      char v145 = v83;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
      uint64_t v22 = v138;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v67 = v22;
      uint64_t v68 = v22;
      if (v22)
      {
        uint64_t v44 = v68;
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v44;
      }
      else
      {
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
        uint64_t v23 = v67;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v64 = v23;
        uint64_t v65 = v23;
        if (!v23)
        {
          uint64_t v24 = v126;
          uint64_t v25 = v143;
          uint64_t v26 = v144;
          *(void *)uint64_t v126 = v142;
          *((void *)v24 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v25;
          *((void *)v24 + 2) = v26;
          swift_storeEnumTagMultiPayload();
          outlined init with take of SiriPaymentsSnippetModel(v126, v133);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v106, v102);
          uint64_t v75 = v64;
          goto LABEL_19;
        }
        uint64_t v43 = v65;
        (*(void (**)(char *, uint64_t))(v103 + 8))(v106, v102);
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v43;
      }
      goto LABEL_30;
    case 3:
      uint64_t v61 = &v154;
      char v154 = v83;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys();
      uint64_t v27 = v138;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v62 = v27;
      uint64_t v63 = v27;
      if (v27)
      {
        uint64_t v42 = v63;
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v42;
      }
      else
      {
        lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel();
        uint64_t v28 = v62;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v59 = v28;
        uint64_t v60 = v28;
        if (!v28)
        {
          uint64_t v29 = v124;
          uint64_t v30 = v147;
          uint64_t v31 = v148;
          uint64_t v32 = v149;
          uint64_t v33 = v150;
          uint64_t v34 = v151;
          uint64_t v35 = v152;
          uint64_t v36 = v153;
          *(void *)uint64_t v124 = v146;
          *((void *)v29 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v30;
          *((void *)v29 + 2) = v31;
          *((void *)v29 + 3) = v32;
          *((void *)v29 + 4) = v33;
          *((void *)v29 + 5) = v34;
          *((void *)v29 + 6) = v35;
          *((void *)v29 + 7) = v36;
          swift_storeEnumTagMultiPayload();
          outlined init with take of SiriPaymentsSnippetModel(v124, v133);
          (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v97);
          uint64_t v75 = v59;
          goto LABEL_19;
        }
        uint64_t v41 = v60;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v97);
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v41;
      }
      goto LABEL_30;
    default:
      uint64_t v79 = &v140;
      char v140 = v83;
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
      uint64_t v18 = v138;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v80 = v18;
      uint64_t v81 = v18;
      if (v18)
      {
        uint64_t v48 = v81;
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v48;
        goto LABEL_30;
      }
      uint64_t v76 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      uint64_t v19 = v80;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v77 = v19;
      uint64_t v78 = v19;
      if (v19)
      {
        uint64_t v47 = v78;
        (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v112);
        outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
        uint64_t v57 = v47;
        goto LABEL_30;
      }
      swift_storeEnumTagMultiPayload();
      outlined init with take of SiriPaymentsSnippetModel(v130, v133);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v112);
      uint64_t v75 = v77;
LABEL_19:
      uint64_t v58 = v75;
      outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v134, v117);
      outlined init with copy of SiriPaymentsSnippetModel((uint64_t *)v133, v96);
      __swift_destroy_boxed_opaque_existential_0(v121);
      uint64_t result = outlined destroy of SiriPaymentsSnippetModel((uint64_t)v133);
      break;
  }
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationModel.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(char *a1, char *a2)
{
  return static SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t *protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.PaymentConfirmationModel.init(from:)(a1, __src);
  if (!v2) {
    return (uint64_t *)memcpy(a2, __src, 0x70uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return SiriPaymentsSnippetModel.PaymentConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.AppDisambiguationModel.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v4;
    a2[2] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.AppDisambiguationModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys(char *a1, char *a2)
{
  return static SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void *protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.BinaryConfirmationModel.init(from:)(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x40uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return SiriPaymentsSnippetModel.BinaryConfirmationModel.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return static SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.AppDisambiguationCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriPaymentsSnippetModel.CodingKeys(char *a1, char *a2)
{
  return static SiriPaymentsSnippetModel.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.CodingKeys.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return SiriPaymentsSnippetModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriPaymentsSnippetModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriPaymentsSnippetModel.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static SnippetPluginModel.bundleName.getter in conformance SiriPaymentsSnippetModel()
{
  return static SiriPaymentsSnippetModel.bundleName.getter();
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance SiriPaymentsSnippetModel()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)() & 1;
}

uint64_t AppDescription.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appBundleId", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    char v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t AppDescription.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t AppDescription.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appBundleId", 0xBuLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName", 7uLL, 1)._countAndFlagsBits;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance SiriPaymentsSnippetModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return SiriPaymentsSnippetModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriPaymentsSnippetModel(uint64_t a1)
{
  return SiriPaymentsSnippetModel.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AppDescription.CodingKeys()
{
  return AppDescription.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppDescription.CodingKeys()
{
  return AppDescription.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppDescription.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AppDescription.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppDescription.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppDescription.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t AppDescription.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AppDescription.CodingKeys>);
  uint64_t v17 = *(void *)(v26 - 8);
  uint64_t v18 = v26 - 8;
  unint64_t v19 = (*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = (char *)v12 - v19;
  uint64_t v33 = (void *)MEMORY[0x270FA5388](v16);
  *(void *)&long long v31 = v5;
  *((void *)&v31 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v6;
  *(void *)&long long v32 = v7;
  *((void *)&v32 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v8;
  uint64_t v20 = v33[3];
  uint64_t v21 = v33[4];
  __swift_project_boxed_opaque_existential_1(v33, v20);
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = v23;
  swift_bridgeObjectRetain();
  char v30 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v27 = v9;
  uint64_t v28 = v9;
  if (v9)
  {
    void v12[2] = v28;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v26);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v27;
    swift_bridgeObjectRetain();
    char v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[4] = v10;
    uint64_t v13 = v10;
    if (v10) {
      v12[1] = v13;
    }
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v26);
  }
}

uint64_t AppDescription.init(from:)(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v34 = 0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AppDescription.CodingKeys>);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = v22 - 8;
  unint64_t v25 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = (char *)v7 - v25;
  char v36 = 0;
  uint64_t v34 = (void *)MEMORY[0x270FA5388](v21);
  uint64_t v28 = v34[3];
  uint64_t v29 = v34[4];
  __swift_project_boxed_opaque_existential_1(v34, v28);
  lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
  uint64_t v1 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v30 = v1;
  uint64_t v31 = v1;
  if (v1)
  {
    v7[5] = v31;
    v7[2] = v31;
    __swift_destroy_boxed_opaque_existential_0(v21);
    if (v36) {
      outlined destroy of String.UTF8View();
    }
    return v7[0];
  }
  else
  {
    char v33 = 0;
    uint64_t v2 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = 0;
    uint64_t v18 = v2;
    uint64_t v19 = v3;
    uint64_t v20 = 0;
    uint64_t v11 = v3;
    uint64_t v10 = v2;
    int v12 = 1;
    char v36 = 1;
    swift_bridgeObjectRetain();
    v35[0] = v10;
    v35[1] = v11;
    char v32 = v12;
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = 0;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v16 = 0;
    uint64_t v9 = v5;
    uint64_t v8 = v4;
    v7[6] = v35;
    char v36 = 3;
    swift_bridgeObjectRetain();
    v35[2] = v8;
    v35[3] = v9;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v21);
    outlined destroy of DIIdentifier();
    return v10;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AppDescription@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AppDescription.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppDescription(uint64_t a1)
{
  return AppDescription.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t static SABaseCommand.from(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  void v23[2] = 0;
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  id v24 = 0;
  uint64_t v18 = self;
  outlined copy of Data._Representation(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  type metadata accessor for NSPropertyListMutabilityOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v23[0] = 0;
  id v21 = objc_msgSend(v18, sel_propertyListWithData_options_format_error_, isa, v23[1], 0, v23);
  id v19 = v23[0];
  id v2 = v23[0];
  uint64_t v3 = v24;
  id v24 = v19;

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if (swift_dynamicCast()) {
      uint64_t v15 = v22;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15)
    {
      swift_unknownObjectRelease();
      id v12 = self;
      swift_bridgeObjectRetain();
      Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v12, sel_aceObjectWithDictionary_, v13);

      if (v14)
      {
        self;
        uint64_t v11 = swift_dynamicCastObjCClass();
        if (v11)
        {
          uint64_t v10 = v11;
        }
        else
        {

          uint64_t v10 = 0;
        }
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v9 = 0;
      }
      swift_bridgeObjectRelease();
      if (v9) {
        return v9;
      }
      else {
        return 0;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  else
  {
    id v6 = v24;
    id v7 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v5 = v7;

    return 0;
  }
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v48 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v48 & 0x20000) != 0)
  {
    uint64_t v44 = *a2;
    swift_retain();
    *a1 = v44;
    return *a1 + ((v48 + 16) & ~(unint64_t)v48);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v5 - 8) + 16))(a1, a2);
        uint64_t v18 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v17 = (char *)a1 + *(int *)(v18 + 20);
        uint64_t v16 = (char *)a2 + *(int *)(v18 + 20);
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(void *)(v6 - 8) + 16))(v17, v16);
        uint64_t v28 = (uint64_t *)((char *)a1 + *(int *)(v18 + 24));
        uint64_t v27 = (uint64_t *)((char *)a2 + *(int *)(v18 + 24));
        *uint64_t v28 = *v27;
        uint64_t v19 = v27[1];
        swift_bridgeObjectRetain();
        v28[1] = v19;
        v28[2] = v27[2];
        uint64_t v20 = v27[3];
        swift_bridgeObjectRetain();
        v28[3] = v20;
        v28[4] = v27[4];
        uint64_t v21 = v27[5];
        swift_bridgeObjectRetain();
        uint64_t v28[5] = v21;
        v28[6] = v27[6];
        uint64_t v22 = v27[7];
        swift_bridgeObjectRetain();
        v28[7] = v22;
        uint64_t v23 = v27[8];
        unint64_t v24 = v27[9];
        outlined copy of Data._Representation(v23, v24);
        void v28[8] = v23;
        v28[9] = v24;
        uint64_t v25 = v27[10];
        unint64_t v26 = v27[11];
        outlined copy of Data._Representation(v25, v26);
        v28[10] = v25;
        v28[11] = v26;
        v28[12] = v27[12];
        uint64_t v29 = v27[13];
        swift_bridgeObjectRetain();
        v28[13] = v29;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v14 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v14;
        a1[1] = a2[1];
        uint64_t v15 = a2[2];
        swift_bridgeObjectRetain();
        a1[2] = v15;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v8 = *a2;
        unint64_t v9 = a2[1];
        outlined copy of Data._Representation(*a2, v9);
        *a1 = v8;
        a1[1] = v9;
        a1[2] = a2[2];
        uint64_t v10 = a2[3];
        swift_bridgeObjectRetain();
        a1[3] = v10;
        uint64_t v11 = a2[4];
        unint64_t v12 = a2[5];
        outlined copy of Data._Representation(v11, v12);
        a1[4] = v11;
        a1[5] = v12;
        a1[6] = a2[6];
        uint64_t v13 = a2[7];
        swift_bridgeObjectRetain();
        a1[7] = v13;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
        (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v3 - 8) + 16))(a1, a2);
        uint64_t v32 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
        uint64_t v31 = (char *)a1 + *(int *)(v32 + 20);
        uint64_t v30 = (char *)a2 + *(int *)(v32 + 20);
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 16))(v31, v30);
        uint64_t v42 = (uint64_t *)((char *)a1 + *(int *)(v32 + 24));
        uint64_t v41 = (uint64_t *)((char *)a2 + *(int *)(v32 + 24));
        *uint64_t v42 = *v41;
        uint64_t v33 = v41[1];
        swift_bridgeObjectRetain();
        v42[1] = v33;
        v42[2] = v41[2];
        uint64_t v34 = v41[3];
        swift_bridgeObjectRetain();
        v42[3] = v34;
        v42[4] = v41[4];
        uint64_t v35 = v41[5];
        swift_bridgeObjectRetain();
        v42[5] = v35;
        v42[6] = v41[6];
        uint64_t v36 = v41[7];
        swift_bridgeObjectRetain();
        v42[7] = v36;
        uint64_t v37 = v41[8];
        unint64_t v38 = v41[9];
        outlined copy of Data._Representation(v37, v38);
        v42[8] = v37;
        v42[9] = v38;
        uint64_t v39 = v41[10];
        unint64_t v40 = v41[11];
        outlined copy of Data._Representation(v39, v40);
        v42[10] = v39;
        v42[11] = v40;
        v42[12] = v41[12];
        uint64_t v43 = v41[13];
        swift_bridgeObjectRetain();
        v42[13] = v43;
        swift_storeEnumTagMultiPayload();
        break;
    }
    return (unint64_t)a1;
  }
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  uint64_t v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  uint64_t v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel.SendPaymentConfirmationModel) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t destroy for SiriPaymentsSnippetModel(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    uint64_t v3 = result;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
        (*(void (**)(uint64_t))(*(void *)(v4 - 8) + 8))(a1);
        uint64_t v12 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
        uint64_t v11 = a1 + *(int *)(v12 + 20);
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
        (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v11);
        uint64_t v13 = a1 + *(int *)(v12 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v13 + 64), *(void *)(v13 + 72));
        outlined consume of Data._Representation(*(void *)(v13 + 80), *(void *)(v13 + 88));
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 1:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(a1);
        uint64_t v9 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v8 = a1 + *(int *)(v9 + 20);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v8);
        uint64_t v10 = a1 + *(int *)(v9 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v10 + 64), *(void *)(v10 + 72));
        outlined consume of Data._Representation(*(void *)(v10 + 80), *(void *)(v10 + 88));
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 2:
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 3:
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for SiriPaymentsSnippetModel(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v4 - 8) + 16))(a1, a2);
      uint64_t v17 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      uint64_t v16 = (char *)a1 + *(int *)(v17 + 20);
      uint64_t v15 = (char *)a2 + *(int *)(v17 + 20);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 16))(v16, v15);
      uint64_t v27 = (uint64_t *)((char *)a1 + *(int *)(v17 + 24));
      unint64_t v26 = (uint64_t *)((char *)a2 + *(int *)(v17 + 24));
      *uint64_t v27 = *v26;
      uint64_t v18 = v26[1];
      swift_bridgeObjectRetain();
      v27[1] = v18;
      void v27[2] = v26[2];
      uint64_t v19 = v26[3];
      swift_bridgeObjectRetain();
      v27[3] = v19;
      v27[4] = v26[4];
      uint64_t v20 = v26[5];
      swift_bridgeObjectRetain();
      v27[5] = v20;
      v27[6] = v26[6];
      uint64_t v21 = v26[7];
      swift_bridgeObjectRetain();
      v27[7] = v21;
      uint64_t v22 = v26[8];
      unint64_t v23 = v26[9];
      outlined copy of Data._Representation(v22, v23);
      v27[8] = v22;
      v27[9] = v23;
      uint64_t v24 = v26[10];
      unint64_t v25 = v26[11];
      outlined copy of Data._Representation(v24, v25);
      v27[10] = v24;
      v27[11] = v25;
      v27[12] = v26[12];
      uint64_t v28 = v26[13];
      swift_bridgeObjectRetain();
      v27[13] = v28;
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v13 = *a2;
      swift_bridgeObjectRetain();
      *a1 = v13;
      a1[1] = a2[1];
      uint64_t v14 = a2[2];
      swift_bridgeObjectRetain();
      a1[2] = v14;
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      a1[2] = a2[2];
      uint64_t v9 = a2[3];
      swift_bridgeObjectRetain();
      a1[3] = v9;
      uint64_t v10 = a2[4];
      unint64_t v11 = a2[5];
      outlined copy of Data._Representation(v10, v11);
      a1[4] = v10;
      a1[5] = v11;
      a1[6] = a2[6];
      uint64_t v12 = a2[7];
      swift_bridgeObjectRetain();
      a1[7] = v12;
      swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v2 - 8) + 16))(a1, a2);
      uint64_t v31 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      uint64_t v30 = (char *)a1 + *(int *)(v31 + 20);
      uint64_t v29 = (char *)a2 + *(int *)(v31 + 20);
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 16))(v30, v29);
      uint64_t v41 = (uint64_t *)((char *)a1 + *(int *)(v31 + 24));
      unint64_t v40 = (uint64_t *)((char *)a2 + *(int *)(v31 + 24));
      *uint64_t v41 = *v40;
      uint64_t v32 = v40[1];
      swift_bridgeObjectRetain();
      v41[1] = v32;
      v41[2] = v40[2];
      uint64_t v33 = v40[3];
      swift_bridgeObjectRetain();
      v41[3] = v33;
      v41[4] = v40[4];
      uint64_t v34 = v40[5];
      swift_bridgeObjectRetain();
      v41[5] = v34;
      v41[6] = v40[6];
      uint64_t v35 = v40[7];
      swift_bridgeObjectRetain();
      v41[7] = v35;
      uint64_t v36 = v40[8];
      unint64_t v37 = v40[9];
      outlined copy of Data._Representation(v36, v37);
      v41[8] = v36;
      v41[9] = v37;
      uint64_t v38 = v40[10];
      unint64_t v39 = v40[11];
      outlined copy of Data._Representation(v38, v39);
      v41[10] = v38;
      v41[11] = v39;
      v41[12] = v40[12];
      uint64_t v42 = v40[13];
      swift_bridgeObjectRetain();
      v41[13] = v42;
      swift_storeEnumTagMultiPayload();
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for SiriPaymentsSnippetModel(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of SiriPaymentsSnippetModel((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v4 - 8) + 16))(a1, a2);
        uint64_t v17 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v16 = (char *)a1 + *(int *)(v17 + 20);
        uint64_t v15 = (char *)a2 + *(int *)(v17 + 20);
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 16))(v16, v15);
        uint64_t v27 = (uint64_t *)((char *)a1 + *(int *)(v17 + 24));
        unint64_t v26 = (uint64_t *)((char *)a2 + *(int *)(v17 + 24));
        *uint64_t v27 = *v26;
        uint64_t v18 = v26[1];
        swift_bridgeObjectRetain();
        v27[1] = v18;
        void v27[2] = v26[2];
        uint64_t v19 = v26[3];
        swift_bridgeObjectRetain();
        v27[3] = v19;
        v27[4] = v26[4];
        uint64_t v20 = v26[5];
        swift_bridgeObjectRetain();
        v27[5] = v20;
        v27[6] = v26[6];
        uint64_t v21 = v26[7];
        swift_bridgeObjectRetain();
        v27[7] = v21;
        uint64_t v22 = v26[8];
        unint64_t v23 = v26[9];
        outlined copy of Data._Representation(v22, v23);
        v27[8] = v22;
        v27[9] = v23;
        uint64_t v24 = v26[10];
        unint64_t v25 = v26[11];
        outlined copy of Data._Representation(v24, v25);
        v27[10] = v24;
        v27[11] = v25;
        v27[12] = v26[12];
        uint64_t v28 = v26[13];
        swift_bridgeObjectRetain();
        v27[13] = v28;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v13 = *a2;
        swift_bridgeObjectRetain();
        *a1 = v13;
        a1[1] = a2[1];
        uint64_t v14 = a2[2];
        swift_bridgeObjectRetain();
        a1[2] = v14;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
        outlined copy of Data._Representation(*a2, v8);
        *a1 = v7;
        a1[1] = v8;
        a1[2] = a2[2];
        uint64_t v9 = a2[3];
        swift_bridgeObjectRetain();
        a1[3] = v9;
        uint64_t v10 = a2[4];
        unint64_t v11 = a2[5];
        outlined copy of Data._Representation(v10, v11);
        a1[4] = v10;
        a1[5] = v11;
        a1[6] = a2[6];
        uint64_t v12 = a2[7];
        swift_bridgeObjectRetain();
        a1[7] = v12;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
        (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v2 - 8) + 16))(a1, a2);
        uint64_t v31 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
        uint64_t v30 = (char *)a1 + *(int *)(v31 + 20);
        uint64_t v29 = (char *)a2 + *(int *)(v31 + 20);
        uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 16))(v30, v29);
        uint64_t v41 = (uint64_t *)((char *)a1 + *(int *)(v31 + 24));
        unint64_t v40 = (uint64_t *)((char *)a2 + *(int *)(v31 + 24));
        *uint64_t v41 = *v40;
        uint64_t v32 = v40[1];
        swift_bridgeObjectRetain();
        v41[1] = v32;
        v41[2] = v40[2];
        uint64_t v33 = v40[3];
        swift_bridgeObjectRetain();
        v41[3] = v33;
        v41[4] = v40[4];
        uint64_t v34 = v40[5];
        swift_bridgeObjectRetain();
        v41[5] = v34;
        v41[6] = v40[6];
        uint64_t v35 = v40[7];
        swift_bridgeObjectRetain();
        v41[7] = v35;
        uint64_t v36 = v40[8];
        unint64_t v37 = v40[9];
        outlined copy of Data._Representation(v36, v37);
        v41[8] = v36;
        v41[9] = v37;
        uint64_t v38 = v40[10];
        unint64_t v39 = v40[11];
        outlined copy of Data._Representation(v38, v39);
        v41[10] = v38;
        v41[11] = v39;
        v41[12] = v40[12];
        uint64_t v42 = v40[13];
        swift_bridgeObjectRetain();
        v41[13] = v42;
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for SiriPaymentsSnippetModel()
{
  uint64_t v1 = type metadata singleton initialization cache for SiriPaymentsSnippetModel;
  if (!type metadata singleton initialization cache for SiriPaymentsSnippetModel) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

char *initializeWithTake for SiriPaymentsSnippetModel(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 32))(a1, a2);
      uint64_t v10 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      uint64_t v9 = &a1[*(int *)(v10 + 20)];
      unint64_t v8 = &a2[*(int *)(v10 + 20)];
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v6 - 8) + 32))(v9, v8);
      memcpy(&a1[*(int *)(v10 + 24)], &a2[*(int *)(v10 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 32))(a1, a2);
    uint64_t v13 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    uint64_t v12 = &a1[*(int *)(v13 + 20)];
    unint64_t v11 = &a2[*(int *)(v13 + 20)];
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 32))(v12, v11);
    memcpy(&a1[*(int *)(v13 + 24)], &a2[*(int *)(v13 + 24)], 0x70uLL);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for SiriPaymentsSnippetModel(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriPaymentsSnippetModel((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 32))(a1, a2);
        uint64_t v10 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v9 = &a1[*(int *)(v10 + 20)];
        unint64_t v8 = &a2[*(int *)(v10 + 20)];
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(char *, char *))(*(void *)(v6 - 8) + 32))(v9, v8);
        memcpy(&a1[*(int *)(v10 + 24)], &a2[*(int *)(v10 + 24)], 0x70uLL);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      }
    }
    else
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 32))(a1, a2);
      uint64_t v13 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      uint64_t v12 = &a1[*(int *)(v13 + 20)];
      unint64_t v11 = &a2[*(int *)(v13 + 20)];
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 32))(v12, v11);
      memcpy(&a1[*(int *)(v13 + 24)], &a2[*(int *)(v13 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel()
{
  uint64_t v3 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  if (v0 <= 0x3F)
  {
    uint64_t v3 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    if (v1 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v3;
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(void *a1, uint64_t *a2, uint64_t a3)
{
  int v25 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v25 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    swift_retain();
    *a1 = v20;
    return *a1 + ((v25 + 16) & ~(unint64_t)v25);
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(void *, uint64_t *))(*(void *)(v3 - 8) + 16))(a1, a2);
    unint64_t v8 = (char *)a1 + *(int *)(a3 + 20);
    uint64_t v7 = (char *)a2 + *(int *)(a3 + 20);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 16))(v8, v7);
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v18 = (void *)((char *)a1 + v5);
    uint64_t v17 = (uint64_t *)((char *)a2 + v5);
    *(void *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    v18[1] = v9;
    void v18[2] = v17[2];
    uint64_t v10 = v17[3];
    swift_bridgeObjectRetain();
    v18[3] = v10;
    v18[4] = v17[4];
    uint64_t v11 = v17[5];
    swift_bridgeObjectRetain();
    v18[5] = v11;
    v18[6] = v17[6];
    uint64_t v12 = v17[7];
    swift_bridgeObjectRetain();
    v18[7] = v12;
    uint64_t v13 = v17[8];
    unint64_t v14 = v17[9];
    outlined copy of Data._Representation(v13, v14);
    v18[8] = v13;
    v18[9] = v14;
    uint64_t v15 = v17[10];
    unint64_t v16 = v17[11];
    outlined copy of Data._Representation(v15, v16);
    v18[10] = v15;
    void v18[11] = v16;
    v18[12] = v17[12];
    uint64_t v19 = v17[13];
    swift_bridgeObjectRetain();
    v18[13] = v19;
    return (unint64_t)a1;
  }
}

uint64_t destroy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  uint64_t v5 = *(int *)(a2 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 8))(a1 + v5);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v8 + 64), *(void *)(v8 + 72));
  outlined consume of Data._Representation(*(void *)(v8 + 80), *(void *)(v8 + 88));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1 + v6, a2 + v6);
  uint64_t v17 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v19 = (void *)(a1 + *(int *)(a3 + 24));
  *uint64_t v19 = *v17;
  uint64_t v9 = v17[1];
  swift_bridgeObjectRetain();
  v19[1] = v9;
  void v19[2] = v17[2];
  uint64_t v10 = v17[3];
  swift_bridgeObjectRetain();
  void v19[3] = v10;
  v19[4] = v17[4];
  uint64_t v11 = v17[5];
  swift_bridgeObjectRetain();
  v19[5] = v11;
  v19[6] = v17[6];
  uint64_t v12 = v17[7];
  swift_bridgeObjectRetain();
  v19[7] = v12;
  uint64_t v13 = v17[8];
  unint64_t v14 = v17[9];
  outlined copy of Data._Representation(v13, v14);
  v19[8] = v13;
  v19[9] = v14;
  uint64_t v15 = v17[10];
  unint64_t v16 = v17[11];
  outlined copy of Data._Representation(v15, v16);
  v19[10] = v15;
  v19[11] = v16;
  v19[12] = v17[12];
  uint64_t v20 = v17[13];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  v19[13] = v20;
  return result;
}

uint64_t assignWithCopy for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24))(a1, a2);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1 + v10, a2 + v10);
  uint64_t v21 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v22 = (void *)(a1 + *(int *)(a3 + 24));
  *uint64_t v22 = *v21;
  uint64_t v13 = v21[1];
  swift_bridgeObjectRetain();
  v22[1] = v13;
  swift_bridgeObjectRelease();
  void v22[2] = v21[2];
  uint64_t v14 = v21[3];
  swift_bridgeObjectRetain();
  void v22[3] = v14;
  swift_bridgeObjectRelease();
  v22[4] = v21[4];
  uint64_t v15 = v21[5];
  swift_bridgeObjectRetain();
  v22[5] = v15;
  swift_bridgeObjectRelease();
  v22[6] = v21[6];
  uint64_t v16 = v21[7];
  swift_bridgeObjectRetain();
  v22[7] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = v21[8];
  unint64_t v18 = v21[9];
  outlined copy of Data._Representation(v17, v18);
  uint64_t v5 = v22[8];
  unint64_t v6 = v22[9];
  v22[8] = v17;
  v22[9] = v18;
  outlined consume of Data._Representation(v5, v6);
  uint64_t v19 = v21[10];
  unint64_t v20 = v21[11];
  outlined copy of Data._Representation(v19, v20);
  uint64_t v7 = v22[10];
  unint64_t v8 = v22[11];
  v22[10] = v19;
  v22[11] = v20;
  outlined consume of Data._Representation(v7, v8);
  v22[12] = v21[12];
  uint64_t v23 = v21[13];
  swift_bridgeObjectRetain();
  v22[13] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1 + v6, a2 + v6);
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0x70uLL);
  return a1;
}

uint64_t assignWithTake for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a1, a2);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1 + v12, a2 + v12);
  uint64_t v15 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v16 = (void *)(a1 + *(int *)(a3 + 24));
  void *v16 = *v15;
  v16[1] = v15[1];
  swift_bridgeObjectRelease();
  v16[2] = v15[2];
  v16[3] = v15[3];
  swift_bridgeObjectRelease();
  void v16[4] = v15[4];
  v16[5] = v15[5];
  swift_bridgeObjectRelease();
  v16[6] = v15[6];
  v16[7] = v15[7];
  swift_bridgeObjectRelease();
  uint64_t v5 = v15[9];
  uint64_t v6 = v16[8];
  unint64_t v7 = v16[9];
  v16[8] = v15[8];
  v16[9] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = v15[11];
  uint64_t v9 = v16[10];
  unint64_t v10 = v16[11];
  v16[10] = v15[10];
  v16[11] = v8;
  outlined consume of Data._Representation(v9, v10);
  v16[12] = v15[12];
  v16[13] = v15[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9E80FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  if (a2 == *(_DWORD *)(*(void *)(v10 - 8) + 84))
  {
    return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 48))(a1, a2, v10);
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    if (a2 == *(_DWORD *)(*(void *)(v5 - 8) + 84))
    {
      return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    }
    else if (a2 == 0x7FFFFFFF)
    {
      int v4 = -1;
      if (*(void *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL) {
        int v4 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
      }
      return (v4 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9E82F0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  if (a3 == *(_DWORD *)(*(void *)(v9 - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(v9 - 8) + 56))(a1, a2, a2, v9);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  if (a3 == *(_DWORD *)(*(void *)(result - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(result - 8) + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  }
  if (a3 == 0x7FFFFFFF) {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  uint64_t v3 = type metadata accessor for CodableIntent<INRequestPaymentIntent>();
  if (v0 <= 0x3F)
  {
    uint64_t v3 = type metadata accessor for CodableIntentResponse<INRequestPaymentIntentResponse>();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for CodableIntent<INRequestPaymentIntent>()
{
  uint64_t v4 = lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>;
  if (!lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>)
  {
    type metadata accessor for INRequestPaymentIntent();
    unint64_t v3 = type metadata accessor for CodableIntent();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CodableIntentResponse<INRequestPaymentIntentResponse>()
{
  uint64_t v4 = lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>;
  if (!lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>)
  {
    type metadata accessor for INRequestPaymentIntentResponse();
    unint64_t v3 = type metadata accessor for CodableIntentResponse();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      return v1;
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(void *a1, uint64_t *a2, uint64_t a3)
{
  int v25 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v25 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    swift_retain();
    *a1 = v20;
    return *a1 + ((v25 + 16) & ~(unint64_t)v25);
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    (*(void (**)(void *, uint64_t *))(*(void *)(v3 - 8) + 16))(a1, a2);
    uint64_t v8 = (char *)a1 + *(int *)(a3 + 20);
    unint64_t v7 = (char *)a2 + *(int *)(a3 + 20);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 16))(v8, v7);
    uint64_t v5 = *(int *)(a3 + 24);
    unint64_t v18 = (void *)((char *)a1 + v5);
    uint64_t v17 = (uint64_t *)((char *)a2 + v5);
    *(void *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    v18[1] = v9;
    void v18[2] = v17[2];
    uint64_t v10 = v17[3];
    swift_bridgeObjectRetain();
    v18[3] = v10;
    v18[4] = v17[4];
    uint64_t v11 = v17[5];
    swift_bridgeObjectRetain();
    v18[5] = v11;
    v18[6] = v17[6];
    uint64_t v12 = v17[7];
    swift_bridgeObjectRetain();
    v18[7] = v12;
    uint64_t v13 = v17[8];
    unint64_t v14 = v17[9];
    outlined copy of Data._Representation(v13, v14);
    v18[8] = v13;
    v18[9] = v14;
    uint64_t v15 = v17[10];
    unint64_t v16 = v17[11];
    outlined copy of Data._Representation(v15, v16);
    v18[10] = v15;
    void v18[11] = v16;
    v18[12] = v17[12];
    uint64_t v19 = v17[13];
    swift_bridgeObjectRetain();
    v18[13] = v19;
    return (unint64_t)a1;
  }
}

uint64_t destroy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  uint64_t v5 = *(int *)(a2 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 8))(a1 + v5);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v8 + 64), *(void *)(v8 + 72));
  outlined consume of Data._Representation(*(void *)(v8 + 80), *(void *)(v8 + 88));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1 + v6, a2 + v6);
  uint64_t v17 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v19 = (void *)(a1 + *(int *)(a3 + 24));
  *uint64_t v19 = *v17;
  uint64_t v9 = v17[1];
  swift_bridgeObjectRetain();
  v19[1] = v9;
  void v19[2] = v17[2];
  uint64_t v10 = v17[3];
  swift_bridgeObjectRetain();
  void v19[3] = v10;
  v19[4] = v17[4];
  uint64_t v11 = v17[5];
  swift_bridgeObjectRetain();
  v19[5] = v11;
  v19[6] = v17[6];
  uint64_t v12 = v17[7];
  swift_bridgeObjectRetain();
  v19[7] = v12;
  uint64_t v13 = v17[8];
  unint64_t v14 = v17[9];
  outlined copy of Data._Representation(v13, v14);
  v19[8] = v13;
  v19[9] = v14;
  uint64_t v15 = v17[10];
  unint64_t v16 = v17[11];
  outlined copy of Data._Representation(v15, v16);
  v19[10] = v15;
  v19[11] = v16;
  v19[12] = v17[12];
  uint64_t v20 = v17[13];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  v19[13] = v20;
  return result;
}

uint64_t assignWithCopy for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24))(a1, a2);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1 + v10, a2 + v10);
  uint64_t v21 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v22 = (void *)(a1 + *(int *)(a3 + 24));
  *uint64_t v22 = *v21;
  uint64_t v13 = v21[1];
  swift_bridgeObjectRetain();
  v22[1] = v13;
  swift_bridgeObjectRelease();
  void v22[2] = v21[2];
  uint64_t v14 = v21[3];
  swift_bridgeObjectRetain();
  void v22[3] = v14;
  swift_bridgeObjectRelease();
  v22[4] = v21[4];
  uint64_t v15 = v21[5];
  swift_bridgeObjectRetain();
  v22[5] = v15;
  swift_bridgeObjectRelease();
  v22[6] = v21[6];
  uint64_t v16 = v21[7];
  swift_bridgeObjectRetain();
  v22[7] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = v21[8];
  unint64_t v18 = v21[9];
  outlined copy of Data._Representation(v17, v18);
  uint64_t v5 = v22[8];
  unint64_t v6 = v22[9];
  v22[8] = v17;
  v22[9] = v18;
  outlined consume of Data._Representation(v5, v6);
  uint64_t v19 = v21[10];
  unint64_t v20 = v21[11];
  outlined copy of Data._Representation(v19, v20);
  uint64_t v7 = v22[10];
  unint64_t v8 = v22[11];
  v22[10] = v19;
  v22[11] = v20;
  outlined consume of Data._Representation(v7, v8);
  v22[12] = v21[12];
  uint64_t v23 = v21[13];
  swift_bridgeObjectRetain();
  v22[13] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1 + v6, a2 + v6);
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0x70uLL);
  return a1;
}

uint64_t assignWithTake for SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(a1, a2);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1 + v12, a2 + v12);
  uint64_t v15 = (void *)(a2 + *(int *)(a3 + 24));
  uint64_t v16 = (void *)(a1 + *(int *)(a3 + 24));
  void *v16 = *v15;
  v16[1] = v15[1];
  swift_bridgeObjectRelease();
  v16[2] = v15[2];
  v16[3] = v15[3];
  swift_bridgeObjectRelease();
  void v16[4] = v15[4];
  v16[5] = v15[5];
  swift_bridgeObjectRelease();
  v16[6] = v15[6];
  v16[7] = v15[7];
  swift_bridgeObjectRelease();
  uint64_t v5 = v15[9];
  uint64_t v6 = v16[8];
  unint64_t v7 = v16[9];
  v16[8] = v15[8];
  v16[9] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = v15[11];
  uint64_t v9 = v16[10];
  unint64_t v10 = v16[11];
  v16[10] = v15[10];
  v16[11] = v8;
  outlined consume of Data._Representation(v9, v10);
  v16[12] = v15[12];
  v16[13] = v15[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9E9214(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  if (a2 == *(_DWORD *)(*(void *)(v10 - 8) + 84))
  {
    return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 48))(a1, a2, v10);
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    if (a2 == *(_DWORD *)(*(void *)(v5 - 8) + 84))
    {
      return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    }
    else if (a2 == 0x7FFFFFFF)
    {
      int v4 = -1;
      if (*(void *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL) {
        int v4 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
      }
      return (v4 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_25D9E9408(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  if (a3 == *(_DWORD *)(*(void *)(v9 - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(v9 - 8) + 56))(a1, a2, a2, v9);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  if (a3 == *(_DWORD *)(*(void *)(result - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(result - 8) + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  }
  if (a3 == 0x7FFFFFFF) {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  uint64_t v3 = type metadata accessor for CodableIntent<INSendPaymentIntent>();
  if (v0 <= 0x3F)
  {
    uint64_t v3 = type metadata accessor for CodableIntentResponse<INSendPaymentIntentResponse>();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for CodableIntent<INSendPaymentIntent>()
{
  uint64_t v4 = lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>;
  if (!lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>)
  {
    type metadata accessor for INSendPaymentIntent();
    unint64_t v3 = type metadata accessor for CodableIntent();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CodableIntentResponse<INSendPaymentIntentResponse>()
{
  uint64_t v4 = lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>;
  if (!lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>)
  {
    type metadata accessor for INSendPaymentIntentResponse();
    unint64_t v3 = type metadata accessor for CodableIntentResponse();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      return v1;
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys;
}

uint64_t destroy for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SiriPaymentsSnippetModel.PaymentConfirmationModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v4;
  a1[4] = a2[4];
  uint64_t v5 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v5;
  a1[6] = a2[6];
  uint64_t v6 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v6;
  uint64_t v7 = a2[8];
  unint64_t v8 = a2[9];
  outlined copy of Data._Representation(v7, v8);
  a1[8] = v7;
  a1[9] = v8;
  uint64_t v9 = a2[10];
  unint64_t v10 = a2[11];
  outlined copy of Data._Representation(v9, v10);
  a1[10] = v9;
  a1[11] = v10;
  a1[12] = a2[12];
  uint64_t v13 = a2[13];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  a1[13] = v13;
  return result;
}

void *assignWithCopy for SiriPaymentsSnippetModel.PaymentConfirmationModel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v7 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v7;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v8;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v9;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[8];
  unint64_t v12 = a2[9];
  outlined copy of Data._Representation(v11, v12);
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  outlined consume of Data._Representation(v2, v3);
  uint64_t v13 = a2[10];
  unint64_t v14 = a2[11];
  outlined copy of Data._Representation(v13, v14);
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  a1[10] = v13;
  a1[11] = v14;
  outlined consume of Data._Representation(v4, v5);
  a1[12] = a2[12];
  uint64_t v16 = a2[13];
  swift_bridgeObjectRetain();
  a1[13] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy112_8(void *a1, const void *a2)
{
}

void *assignWithTake for SiriPaymentsSnippetModel.PaymentConfirmationModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  uint64_t v2 = a2[9];
  uint64_t v3 = a1[8];
  unint64_t v4 = a1[9];
  a1[8] = a2[8];
  a1[9] = v2;
  outlined consume of Data._Representation(v3, v4);
  uint64_t v5 = a2[11];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  a1[10] = a2[10];
  a1[11] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 112))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 8))) {
        int v3 = *(void *)(a1 + 8);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 112) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 112) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 8) = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.PaymentConfirmationModel()
{
  return &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF9) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 6) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 249;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 7;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF9)
  {
    unsigned int v5 = ((a3 + 6) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF9)
  {
    unsigned int v4 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys;
}

void *initializeBufferWithCopyOfBuffer for SiriPaymentsSnippetModel.AppDisambiguationModel(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  a1[2] = v6;
  return result;
}

uint64_t destroy for SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SiriPaymentsSnippetModel.AppDisambiguationModel(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

void *assignWithTake for SiriPaymentsSnippetModel.AppDisambiguationModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)a1)) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.AppDisambiguationModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)__n128 result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 24) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 24) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)__n128 result = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys;
}

uint64_t destroy for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v5;
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  outlined copy of Data._Representation(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  swift_bridgeObjectRetain();
  __n128 result = a1;
  a1[7] = v10;
  return result;
}

uint64_t *assignWithCopy for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  outlined copy of Data._Representation(*a2, v8);
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  outlined consume of Data._Representation(v2, v3);
  a1[2] = a2[2];
  uint64_t v9 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  outlined consume of Data._Representation(v4, v5);
  a1[6] = a2[6];
  uint64_t v13 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy64_8(void *a1, const void *a2)
{
}

uint64_t *assignWithTake for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[5];
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v4 = *(void *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (*(void *)(a1 + 24) < 0x100000000uLL) {
        int v3 = *(void *)(a1 + 24);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)__n128 result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 64) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 64) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 24) = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.BinaryConfirmationModel()
{
  return &type metadata for SiriPaymentsSnippetModel.BinaryConfirmationModel;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.CodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys(unsigned __int8 *a1, int a2)
{
  if (a2)
  {
    int v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v6 = v2;
    }
    if (v6 == 1)
    {
      int v5 = *a1;
    }
    else if (v6 == 2)
    {
      int v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      int v5 = *(_DWORD *)a1;
    }
    if (v5) {
      int v4 = v5 - 1;
    }
    else {
      int v4 = -1;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys(unsigned char *result, int a2, int a3)
{
  int v5 = 0;
  if (a3)
  {
    int v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v4 = v3;
    }
    int v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *__n128 result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)__n128 result = a2;
      }
      else
      {
        *(_DWORD *)__n128 result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *__n128 result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)__n128 result = 0;
    }
    else
    {
      *(_DWORD *)__n128 result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.AppDisambiguationCodingKeys;
}

ValueMetadata *type metadata accessor for SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return &type metadata for SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys;
}

ValueMetadata *type metadata accessor for AppDescription()
{
  return &type metadata for AppDescription;
}

ValueMetadata *type metadata accessor for AppDescription.CodingKeys()
{
  return &type metadata for AppDescription.CodingKeys;
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.BinaryConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.BinaryConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.AppDisambiguationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel and conformance SiriPaymentsSnippetModel.AppDisambiguationModel();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for Equatable in AppDescription.CodingKeys()
{
  return lazy protocol witness table accessor for type AppDescription.CodingKeys and conformance AppDescription.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.CodingKeys and conformance SiriPaymentsSnippetModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.AppDisambiguationCodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationCodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationCodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.BinaryConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys and conformance SiriPaymentsSnippetModel.AppDisambiguationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.SendPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Equatable in SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys and conformance SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.CodingKeys();
}

unint64_t base witness table accessor for Decodable in SiriPaymentsSnippetModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
}

unint64_t base witness table accessor for Encodable in SiriPaymentsSnippetModel()
{
  return lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
}

unint64_t lazy protocol witness table accessor for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SiriPaymentsSnippetModel.CodingKeys]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SiriPaymentsSnippetModel.CodingKeys] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<SiriPaymentsSnippetModel.CodingKeys>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<SiriPaymentsSnippetModel.CodingKeys> and conformance ArraySlice<A>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ArraySlice<SiriPaymentsSnippetModel.CodingKeys>()
{
}

uint64_t outlined init with take of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1);
  uint64_t v6 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  uint64_t v5 = *(int *)(v6 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a2 + v5, a1 + v5);
  memcpy((void *)(a2 + *(int *)(v6 + 24)), (const void *)(a1 + *(int *)(v6 + 24)), 0x70uLL);
  return a2;
}

uint64_t outlined init with take of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1);
  uint64_t v6 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  uint64_t v5 = *(int *)(v6 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a2 + v5, a1 + v5);
  memcpy((void *)(a2 + *(int *)(v6 + 24)), (const void *)(a1 + *(int *)(v6 + 24)), 0x70uLL);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INRequestPaymentIntent> and conformance CodableIntent<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INRequestPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel.PaymentConfirmationModel and conformance SiriPaymentsSnippetModel.PaymentConfirmationModel);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.PaymentConfirmationModel(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>;
  if (!lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntent<INSendPaymentIntent> and conformance CodableIntent<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>;
  if (!lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIntentResponse<INSendPaymentIntentResponse> and conformance CodableIntentResponse<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of Data(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type [AppDescription] and conformance <A> [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AppDescription]);
    lazy protocol witness table accessor for type AppDescription and conformance AppDescription();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AppDescription]);
    lazy protocol witness table accessor for type AppDescription and conformance AppDescription();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [AppDescription] and conformance <A> [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AppDescription and conformance AppDescription()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription and conformance AppDescription;
  if (!lazy protocol witness table cache variable for type AppDescription and conformance AppDescription)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription and conformance AppDescription);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AppDescription and conformance AppDescription;
  if (!lazy protocol witness table cache variable for type AppDescription and conformance AppDescription)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppDescription and conformance AppDescription);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SiriPaymentsSnippetModel.AppDisambiguationModel()
{
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.BinaryConfirmationModel(uint64_t a1)
{
  return a1;
}

uint64_t PaymentsError.errorDescription.getter()
{
  outlined init with take of PaymentsError(v0, &__dst);
  switch(v66)
  {
    case 1:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unable to extract ", 0x12uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v3);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from provided userData", 0x17uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v57 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v57;
      break;
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid parameter: ", 0x1FuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v5);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for intent: ", 0xDuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v56 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v56;
      break;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid unsupported reason: ", 0x28uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for intent: ", 0xDuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v9);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v55 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v55;
      break;
    case 4:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IntentHandler encountered invalid intent type: ", 0x2FuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v54 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v54;
      break;
    case 5:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered error when transforming from ", 0x29uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v53 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v53;
      break;
    case 6:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occurred when executing CAT: ", 0x23uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v16);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v52 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v52;
      break;
    case 7:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered unexpected parse type: ", 0x23uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v18);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v51 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v51;
      break;
    case 8:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid slot ", 0x19uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v20);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for intent ", 0xCuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v21);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v50 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v50;
      break;
    case 9:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid value ", 0x1AuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v23);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for slot ", 0xAuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v24);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" in intent ", 0xBuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v25);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v49 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v49;
      break;
    case 10:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert PaymentsNLIntent to ", 0x26uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v27);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v48 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v48;
      break;
    case 11:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get slot description for ", 0x23uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v29);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v47 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v47;
      break;
    case 12:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get paymentRecord for ", 0x20uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v31);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v46 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v46;
      break;
    case 13:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to resolve disambiguation selection from personID: ", 0x3AuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      String.init<A>(describing:)();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      Swift::String v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v45 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v45;
      break;
    case 14:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered unknown parameter: ", 0x1FuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v35);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v44 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v44;
      break;
    case 15:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to obtain TCC confirmation response from user input for intent ", 0x46uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v37);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v43 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v43;
      break;
    case 16:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid intent type while trying to create error template: ", 0x47uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v39);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v42 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v42;
      break;
    case 17:
      if (__dst || v61 || v62 || v63 || v64 || v65)
      {
        if (__dst != 1 || v61 || v62 || v63 || v64 || v65)
        {
          if (__dst != 2 || v61 || v62 || v63 || v64 || v65)
          {
            if (__dst != 3 || v61 || v62 || v63 || v64 || v65)
            {
              if (__dst != 4 || v61 || v62 || v63 || v64 || v65)
              {
                if (__dst != 5 || v61 || v62 || v63 || v64 || v65)
                {
                  if (__dst != 6 || v61 || v62 || v63 || v64 || v65)
                  {
                    if (__dst != 7 || v61 || v62 || v63 || v64 || v65)
                    {
                      if (__dst != 8 || v61 || v62 || v63 || v64 || v65)
                      {
                        if (__dst != 9 || v61 || v62 || v63 || v64 || v65)
                        {
                          if (__dst != 10 || v61 || v62 || v63 || v64 || v65)
                          {
                            if (__dst != 11 || v61 || v62 || v63 || v64 || v65)
                            {
                              __break(1u);
                              goto LABEL_75;
                            }
                            uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("The child override should have been invoked", 0x2BuLL, 1)._countAndFlagsBits;
                          }
                          else
                          {
                            uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to obtain an app identifier during app resolution", 0x38uLL, 1)._countAndFlagsBits;
                          }
                        }
                        else
                        {
                          uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered an unspecified error", 0x20uLL, 1)._countAndFlagsBits;
                        }
                      }
                      else
                      {
                        uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert disambiguation item to INObject", 0x31uLL, 1)._countAndFlagsBits;
                      }
                    }
                    else
                    {
                      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received unexpected disambiguation item type", 0x2CuLL, 1)._countAndFlagsBits;
                    }
                  }
                  else
                  {
                    uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get contactID from USO Identifiers", 0x2CuLL, 1)._countAndFlagsBits;
                  }
                }
                else
                {
                  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to get NLUUserDialogAct from parse", 0x29uLL, 1)._countAndFlagsBits;
                }
              }
              else
              {
                uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert Parse to PaymentsNLIntent.", 0x2CuLL, 1)._countAndFlagsBits;
              }
            }
            else
            {
              uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to cast Any itemToConfirm to [INPerson]", 0x2EuLL, 1)._countAndFlagsBits;
            }
          }
          else
          {
            uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to cast Any disambiguation items to [INPerson]", 0x35uLL, 1)._countAndFlagsBits;
          }
        }
        else
        {
          uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encountered invalid SiriKit intent", 0x22uLL, 1)._countAndFlagsBits;
        }
      }
      else
      {
        uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to convert direct invocation", 0x23uLL, 1)._countAndFlagsBits;
      }
      break;
    default:
LABEL_75:
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received direct invocation we cannot handle: ", 0x2DuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v1);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v58 = String.init(stringInterpolation:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v58;
      break;
  }
  return countAndFlagsBits;
}

void *outlined init with take of PaymentsError(const void *a1, void *__dst)
{
  return __dst;
}

unint64_t base witness table accessor for Error in PaymentsError()
{
  return lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance PaymentsError()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance PaymentsError()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance PaymentsError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance PaymentsError()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t protocol witness for Error._domain.getter in conformance PaymentsError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance PaymentsError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PaymentsError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PaymentsError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t destroy for PaymentsError(uint64_t a1)
{
  return outlined consume of PaymentsError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t initializeWithCopy for PaymentsError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  int v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of PaymentsError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t result = a1;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return result;
}

uint64_t outlined copy of PaymentsError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7)
  {
    uint64_t v8 = a7;
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    switch(v8)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        uint64_t result = swift_bridgeObjectRetain();
        break;
      case 2:
      case 3:
      case 5:
      case 8:
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        break;
      case 9:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        break;
      case 15:
      case 16:
        uint64_t result = swift_bridgeObjectRetain();
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t assignWithCopy for PaymentsError(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  int v16 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of PaymentsError(*(void *)a2, v11, v12, v13, v14, v15, v16);
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = *(unsigned __int8 *)(a1 + 48);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  *(unsigned char *)(a1 + 48) = v16;
  outlined consume of PaymentsError(v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy49_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for PaymentsError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  char v9 = *((unsigned char *)a2 + 48);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  int v16 = *(unsigned __int8 *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of PaymentsError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaymentsError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xEF && *(unsigned char *)(a1 + 49))
    {
      int v4 = *(_DWORD *)a1 + 238;
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 *)(a1 + 48) ^ 0xFF;
      if (v2 >= 0xEE) {
        unsigned int v2 = -1;
      }
      int v4 = v2;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned char *)(result + 49);
  if (a2 > 0xEE)
  {
    *(void *)(result + 40) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 239;
    *(unsigned char *)(result + 48) = 0;
    if (a3 >= 0xEF) {
      *uint64_t v3 = 1;
    }
  }
  else
  {
    if (a3 >= 0xEF) {
      *uint64_t v3 = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PaymentsError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) < 0x11u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return *(void *)a1 + 17;
  }
}

uint64_t destructiveInjectEnumTag for PaymentsError(uint64_t result, unsigned int a2)
{
  if (a2 < 0x11)
  {
    *(unsigned char *)(result + 48) = a2;
  }
  else
  {
    *(void *)uint64_t result = a2 - 17;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(unsigned char *)(result + 48) = 17;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentsError()
{
  return &type metadata for PaymentsError;
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  void v4[8] = a3;
  v4[6] = v4;
  v4[2] = 0;
  v4[3] = 0;
  v4[7] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[7] = a3;
  return MEMORY[0x270FA2498](PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:), 0);
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)()
{
  v0[6] = v0;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v1;
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation(_:)();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  uint64_t v10 = String.init(stringInterpolation:)();
  uint64_t v9 = v4;
  v0[10] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v8[11] = v5;
  *uint64_t v5 = v8[6];
  v5[1] = PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:);
  uint64_t v6 = v8[8];
  return MEMORY[0x270F63B80](v10, v9, v6);
}

uint64_t PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 48) = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  Swift::String v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 48) + 8);
  return v2(a1);
}

uint64_t protocol witness for PaymentsAppListing.listApps(intentID:siriAuthorizationRestriction:) in conformance PaymentsAppLister<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v5;
  uint64_t v6 = *(void *)(a4 + 16);
  *uint64_t v5 = *(void *)(v9 + 16);
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsAppLister.listApps(intentID:siriAuthorizationRestriction:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for PaymentsAppLister()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UsoTask.eraseToAny.getter()
{
  return swift_release();
}

unint64_t UsoTask.siriKitIntentType.getter()
{
  uint64_t v121 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v122 = partial apply for closure #1 in osLogInternal(_:log:type:);
  unint64_t v123 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v124 = partial apply for closure #1 in osLogInternal(_:log:type:);
  unint64_t v125 = &protocol witness table for INSearchForAccountsIntent;
  uint64_t v126 = &protocol witness table for INSendPaymentIntent;
  unint64_t v127 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v168 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = type metadata accessor for Logger();
  uint64_t v130 = *(void *)(v129 - 8);
  uint64_t v131 = v129 - 8;
  unint64_t v132 = (*(void *)(v130 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v129);
  uint64_t v133 = (char *)&v29 - v132;
  unint64_t v134 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v29 - v132);
  uint64_t v135 = (char *)&v29 - v134;
  unint64_t v136 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v29 - v134);
  uint64_t v137 = (char *)&v29 - v136;
  unint64_t v138 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v29 - v136);
  uint64_t v139 = (char *)&v29 - v138;
  uint64_t v168 = v0;
  UsoTask.eraseToAny.getter();
  if (v167)
  {
    unint64_t v120 = v159;
    outlined init with copy of Any?((uint64_t)v166, (uint64_t)v159);
    uint64_t v119 = 0;
    type metadata accessor for UsoTask_requestMoney_common_Payment();
    if (swift_dynamicCast())
    {
      uint64_t v4 = v139;
      uint64_t v111 = v158;
      uint64_t v5 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v4, v5, v129);
      uint64_t v117 = Logger.logObject.getter();
      int v116 = static os_log_type_t.debug.getter();
      uint64_t v114 = &v144;
      uint64_t v144 = 2;
      unint64_t v112 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v113 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v115 = v145;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v118 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v117, (os_log_type_t)v116))
      {
        uint64_t v6 = v128;
        uint64_t v101 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v100 = 0;
        uint64_t v102 = createStorage<A>(capacity:type:)(0);
        uint64_t v103 = createStorage<A>(capacity:type:)(v100);
        uint64_t v107 = &v143;
        uint64_t v143 = v101;
        uint64_t v108 = &v142;
        uint64_t v142 = v102;
        unint64_t v105 = &v141;
        uint64_t v141 = v103;
        unsigned int v104 = 0;
        serialize(_:at:)(0, &v143);
        serialize(_:at:)(v104, v107);
        uint64_t v140 = v118;
        char v106 = &v29;
        MEMORY[0x270FA5388](&v29);
        uint64_t v7 = v108;
        uint64_t v8 = &v29 - 6;
        uint64_t v109 = &v29 - 6;
        v8[2] = (unint64_t)v107;
        void v8[3] = (unint64_t)v7;
        v8[4] = v9;
        uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v6)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v116, "#UsoTask siriKitIntentType returning Request intent", v101, v115);
          uint64_t v98 = 0;
          destroyStorage<A>(_:count:)(v102, 0, v99);
          destroyStorage<A>(_:count:)(v103, v98, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v101, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v130 + 8))(v139, v129);
      unint64_t v95 = type metadata accessor for INRequestPaymentIntent();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v159);
      outlined destroy of FlowActivity?((uint64_t)v166);
      unint64_t v96 = v95;
      uint64_t v97 = v127;
      return v96;
    }
    uint64_t v94 = 0;
    type metadata accessor for UsoTask_pay_common_Payment();
    if ((swift_dynamicCast() & 1) != 0
      || (uint64_t v93 = 0, type metadata accessor for UsoTask_noVerb_common_Payment(), (swift_dynamicCast() & 1) != 0))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v159);
      outlined destroy of FlowActivity?((uint64_t)v166);
      uint64_t v10 = v137;
      uint64_t v11 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v10, v11, v129);
      uint64_t v91 = Logger.logObject.getter();
      int v90 = static os_log_type_t.debug.getter();
      uint64_t v88 = &v150;
      uint64_t v150 = 2;
      unint64_t v86 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v87 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v89 = v151;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v92 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v91, (os_log_type_t)v90))
      {
        uint64_t v12 = v128;
        uint64_t v76 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v75 = 0;
        uint64_t v77 = createStorage<A>(capacity:type:)(0);
        uint64_t v78 = createStorage<A>(capacity:type:)(v75);
        uint64_t v82 = &v149;
        uint64_t v149 = v76;
        int v83 = &v148;
        uint64_t v148 = v77;
        uint64_t v80 = &v147;
        uint64_t v147 = v78;
        unsigned int v79 = 0;
        serialize(_:at:)(0, &v149);
        serialize(_:at:)(v79, v82);
        uint64_t v146 = v92;
        uint64_t v81 = &v29;
        MEMORY[0x270FA5388](&v29);
        uint64_t v13 = v83;
        uint64_t v14 = &v29 - 6;
        uint64_t v84 = &v29 - 6;
        void v14[2] = (unint64_t)v82;
        v14[3] = (unint64_t)v13;
        v14[4] = v15;
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v12)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v91, (os_log_type_t)v90, "#UsoTask siriKitIntentType returning Send intent", v76, v89);
          uint64_t v73 = 0;
          destroyStorage<A>(_:count:)(v77, 0, v74);
          destroyStorage<A>(_:count:)(v78, v73, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v76, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v130 + 8))(v137, v129);
      unint64_t v96 = type metadata accessor for INSendPaymentIntent();
      uint64_t v97 = v126;
      return v96;
    }
    uint64_t v72 = 0;
    type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
    if ((swift_dynamicCast() & 1) != 0
      || (uint64_t v71 = 0, type metadata accessor for UsoTask_request_common_PaymentAccount(), (swift_dynamicCast() & 1) != 0)
      || (uint64_t v70 = 0, type metadata accessor for UsoTask_summarise_common_PaymentAccount(),
                     (swift_dynamicCast() & 1) != 0))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v159);
      outlined destroy of FlowActivity?((uint64_t)v166);
      int v16 = v135;
      uint64_t v17 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v16, v17, v129);
      uint64_t v68 = Logger.logObject.getter();
      int v67 = static os_log_type_t.debug.getter();
      uint64_t v65 = &v156;
      uint64_t v156 = 2;
      unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v66 = v157;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v69 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v68, (os_log_type_t)v67))
      {
        uint64_t v18 = v128;
        uint64_t v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v52 = 0;
        uint64_t v54 = createStorage<A>(capacity:type:)(0);
        uint64_t v55 = createStorage<A>(capacity:type:)(v52);
        uint64_t v59 = &v155;
        uint64_t v155 = v53;
        uint64_t v60 = &v154;
        uint64_t v154 = v54;
        uint64_t v57 = &v153;
        uint64_t v153 = v55;
        unsigned int v56 = 0;
        serialize(_:at:)(0, &v155);
        serialize(_:at:)(v56, v59);
        uint64_t v152 = v69;
        uint64_t v58 = &v29;
        MEMORY[0x270FA5388](&v29);
        Swift::String v19 = v60;
        Swift::String v20 = &v29 - 6;
        uint64_t v61 = &v29 - 6;
        void v20[2] = (unint64_t)v59;
        v20[3] = (unint64_t)v19;
        v20[4] = v21;
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v18)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v68, (os_log_type_t)v67, "#UsoTask siriKitIntentType returning SearchForAccounts intent", v53, v66);
          uint64_t v50 = 0;
          destroyStorage<A>(_:count:)(v54, 0, v51);
          destroyStorage<A>(_:count:)(v55, v50, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v53, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v130 + 8))(v135, v129);
      unint64_t v96 = type metadata accessor for INSearchForAccountsIntent();
      uint64_t v97 = v125;
      return v96;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v159);
  }
  Swift::String v22 = v133;
  uint64_t v23 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v22, v23, v129);
  uint64_t v48 = Logger.logObject.getter();
  int v47 = static os_log_type_t.debug.getter();
  uint64_t v45 = &v164;
  uint64_t v164 = 2;
  unint64_t v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v46 = v165;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v49 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v48, (os_log_type_t)v47))
  {
    uint64_t v24 = v128;
    Swift::String v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = 0;
    uint64_t v34 = createStorage<A>(capacity:type:)(0);
    uint64_t v35 = createStorage<A>(capacity:type:)(v32);
    Swift::String v39 = &v163;
    uint64_t v163 = v33;
    Swift::String v40 = &v162;
    uint64_t v162 = v34;
    Swift::String v37 = &v161;
    uint64_t v161 = v35;
    unsigned int v36 = 0;
    serialize(_:at:)(0, &v163);
    serialize(_:at:)(v36, v39);
    uint64_t v160 = v49;
    Swift::String v38 = &v29;
    MEMORY[0x270FA5388](&v29);
    Swift::String v25 = v40;
    Swift::String v26 = &v29 - 6;
    uint64_t v41 = &v29 - 6;
    v26[2] = (unint64_t)v39;
    void v26[3] = (unint64_t)v25;
    v26[4] = v27;
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v24)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v48, (os_log_type_t)v47, "#UsoTask siriKitIntentType no known supported task type found, returning nil", v33, v46);
      uint64_t v30 = 0;
      destroyStorage<A>(_:count:)(v34, 0, v31);
      destroyStorage<A>(_:count:)(v35, v30, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v33, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v29 = 0;

  (*(void (**)(char *, uint64_t))(v130 + 8))(v133, v129);
  outlined destroy of FlowActivity?((uint64_t)v166);
  unint64_t v96 = v29;
  uint64_t v97 = (_UNKNOWN **)v29;
  return v96;
}

long long *String.APPLE_CARD_APPLY_LAUNCH_URL.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_APPLY_LAUNCH_URL != -1) {
    swift_once();
  }
  return &static String.APPLE_CARD_APPLY_LAUNCH_URL;
}

long long *String.APPLE_CARD_INFO_LAUNCH_URL.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_INFO_LAUNCH_URL != -1) {
    swift_once();
  }
  return &static String.APPLE_CARD_INFO_LAUNCH_URL;
}

uint64_t Constants.DirectInvocationPayloadKeys.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("itemIdentifier", 0xEuLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("buttonPressed", 0xDuLL, 1)._countAndFlagsBits;
  }
}

uint64_t Constants.DirectInvocationButtonType.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("reject", 6uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("confirm", 7uLL, 1)._countAndFlagsBits;
  }
}

long long *Constants.intentAppIDAssociatedKey.unsafeMutableAddressor()
{
  if (one-time initialization token for intentAppIDAssociatedKey != -1) {
    swift_once();
  }
  return &static Constants.intentAppIDAssociatedKey;
}

uint64_t UsoIdentifierNamespace.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("personRelationship", 0x12uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneType", 9uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("emailType", 9uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("contactAttributes", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("contactType", 0xBuLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("item_id", 7uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

long long *String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor()
{
  if (one-time initialization token for NOT_YET_IMPLEMENTED != -1) {
    swift_once();
  }
  return &static String.NOT_YET_IMPLEMENTED;
}

long long *String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor()
{
  if (one-time initialization token for APPLE_CARD_WEB_PAGE_LINK != -1) {
    swift_once();
  }
  return &static String.APPLE_CARD_WEB_PAGE_LINK;
}

uint64_t Constants.IntentTypeCATCode.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("request", 7uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("search", 6uLL, 1)._countAndFlagsBits;
  }
}

uint64_t Constants.DirectInvocationPayloadIdentifiers.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.DirectInvocation.Payments.ItemSelection", 0x36uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.DirectInvocation.Payments.buttonPress", 0x34uLL, 1)._countAndFlagsBits;
  }
}

uint64_t static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)(uint64_t a1, char a2)
{
  if (a2)
  {
    return 3;
  }
  else
  {
    if (a1)
    {
      uint64_t v3 = a1;
      char v2 = 1;
    }
    else
    {
      uint64_t v3 = 0;
      char v2 = 0;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
          return 3;
        case 1:
          return 1;
        case 2:
          return 2;
        case 3:
          return 0;
        default:
          JUMPOUT(0);
      }
    }
    return 3;
  }
}

uint64_t Constants.PaymentAccountBalanceType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("money", 5uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("points", 6uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("miles", 5uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t static Constants.PaymentAccountType.fromINAccountType(_:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if (v1)
  {
    return 0;
  }
  else
  {
    switch(v2)
    {
      case 0:
        unsigned int v4 = 0;
        break;
      case 1:
        unsigned int v4 = 1;
        break;
      case 2:
        unsigned int v4 = 2;
        break;
      case 3:
        unsigned int v4 = 3;
        break;
      case 4:
        unsigned int v4 = 4;
        break;
      case 5:
        unsigned int v4 = 5;
        break;
      case 6:
        unsigned int v4 = 6;
        break;
      case 7:
        unsigned int v4 = 7;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v4;
}

uint64_t Constants.PaymentAccountType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("checking", 8uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("credit", 6uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("debit", 5uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("investment", 0xAuLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("mortgage", 8uLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("prepaid", 7uLL, 1)._countAndFlagsBits;
      break;
    case 7:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("saving", 6uLL, 1)._countAndFlagsBits;
      break;
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("savings", 7uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t Constants.PaymentAccountType.asCATIDForLoc.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_CHECKING", 0x15uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_CREDIT", 0x13uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_DEBIT", 0x12uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_INVESTMENT", 0x17uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_MORTGAGE", 0x15uLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_PREPAID", 0x14uLL, 1)._countAndFlagsBits;
      break;
    case 7:
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_TYPE_SAVING", 0x13uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = 0;
      break;
  }
  return countAndFlagsBits;
}

uint64_t Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BALANCE_TYPE_MONEY", 0x12uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BALANCE_TYPE_POINTS", 0x13uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BALANCE_TYPE_UNKNOWN", 0x14uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BALANCE_TYPE_MILES", 0x12uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

long long *String.EMPTY.unsafeMutableAddressor()
{
  if (one-time initialization token for EMPTY != -1) {
    swift_once();
  }
  return &static String.EMPTY;
}

SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional __swiftcall Constants.DirectInvocationButtonType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "confirm";
  *(void *)(v2 + 8) = 7;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "reject";
  *(void *)(v2 + 32) = 6;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional)2;
}

uint64_t Constants.DirectInvocationButtonType.confirmationResponse.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    unsigned int v5 = *MEMORY[0x263F6FC90];
    uint64_t v4 = type metadata accessor for ConfirmationResponse();
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 - 8) + 104))(a2, v5);
  }
  else
  {
    unsigned int v6 = *MEMORY[0x263F6FC98];
    uint64_t v2 = type metadata accessor for ConfirmationResponse();
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 104))(a2, v6);
  }
}

uint64_t Constants.NLConstants.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConfirmation", 0x14uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payments", 8uLL, 1)._countAndFlagsBits;
  }
}

uint64_t Constants.NLConstants.canonicalName.getter(char a1)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.nl.", 0x12uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  Constants.NLConstants.rawValue.getter(a1 & 1);
  String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t Constants.NLPaymentConfirmationValue.canonicalName.getter(char a1)
{
  Constants.NLPaymentConfirmationValue.associatedSemantic.getter();
  Constants.NLPaymentConfirmationValue.rawValue.getter(a1);
  String.uppercased()();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_", 1uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v4._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v4._object = v1;
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  uint64_t countAndFlagsBits = Constants.NLConstants.boundValue(_:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t one-time initialization function for EMPTY()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.EMPTY = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for NOT_YET_IMPLEMENTED()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Not yet implemented", 0x13uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.NOT_YET_IMPLEMENTED = (__int128)v1;
  return result;
}

uint64_t static String.NOT_YET_IMPLEMENTED.getter()
{
  uint64_t v1 = *(void *)String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for WATCH_APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.NanoPassbook", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.WATCH_APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *String.WATCH_APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for WATCH_APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static String.WATCH_APP_BUNDLE_ID;
}

uint64_t one-time initialization function for APP_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Passbook", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.APP_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *String.APP_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for APP_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static String.APP_BUNDLE_ID;
}

uint64_t one-time initialization function for APP_NAME_EN()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("passbook", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.APP_NAME_EN = (__int128)v1;
  return result;
}

long long *String.APP_NAME_EN.unsafeMutableAddressor()
{
  if (one-time initialization token for APP_NAME_EN != -1) {
    swift_once();
  }
  return &static String.APP_NAME_EN;
}

uint64_t one-time initialization function for PASSKIT_EXTENSION_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsExtension", 0x29uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.PASSKIT_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *String.PASSKIT_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSKIT_EXTENSION_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static String.PASSKIT_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for PASSKIT_UI_EXTENSION_BUNDLE_ID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.PassKit.PassKitIntentsUIExtension", 0x2BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.PASSKIT_UI_EXTENSION_BUNDLE_ID = (__int128)v1;
  return result;
}

long long *String.PASSKIT_UI_EXTENSION_BUNDLE_ID.unsafeMutableAddressor()
{
  if (one-time initialization token for PASSKIT_UI_EXTENSION_BUNDLE_ID != -1) {
    swift_once();
  }
  return &static String.PASSKIT_UI_EXTENSION_BUNDLE_ID;
}

uint64_t one-time initialization function for APPLE_CARD_INFO_LAUNCH_URL()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("wallet://discovery/card/40cc8cf6-f7d2-407b-9426-0986d1f39178?referrer=cid%3Dapy-410-100001", 0x5AuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.APPLE_CARD_INFO_LAUNCH_URL = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for APPLE_CARD_APPLY_LAUNCH_URL()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("wallet://setup/feature/ccs?referrer=cid%3Dapy-410-100002", 0x38uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.APPLE_CARD_APPLY_LAUNCH_URL = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for APPLE_CARD_WEB_PAGE_LINK()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("https://www.apple.com/apple-card/", 0x21uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static String.APPLE_CARD_WEB_PAGE_LINK = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for intentAppIDAssociatedKey()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentAppIDAssociatedKey", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Constants.intentAppIDAssociatedKey = (__int128)v1;
  return result;
}

uint64_t static Constants.defaultPaymentsApp.getter()
{
  return App.__allocating_init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
}

Swift::String __swiftcall Constants.NLConstants.boundValue(_:)(Swift::String a1)
{
  char v8 = v1;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  Constants.NLConstants.canonicalName.getter(v8 & 1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".Value.", 7uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  String.uppercased()();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  uint64_t v5 = String.init(stringInterpolation:)();
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

SiriPaymentsIntents::Constants::NLConstants_optional __swiftcall Constants.NLConstants.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "payments";
  *(void *)(v2 + 8) = 8;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "paymentsConfirmation";
  *(void *)(v2 + 32) = 20;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::NLConstants_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::NLConstants_optional)2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.NLConstants()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.NLConstants()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.NLConstants()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.NLConstants()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::NLConstants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.NLConstants@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::NLConstants_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.NLConstants.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.NLConstants@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.NLConstants.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Constants.NLPaymentConfirmationValue.associatedSemantic.getter()
{
  return 1;
}

uint64_t Constants.NLPaymentConfirmationValue.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("yes", 3uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no", 2uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancel", 6uLL, 1)._countAndFlagsBits;
  }
}

unint64_t lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants;
  if (!lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants;
  if (!lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLConstants and conformance Constants.NLConstants);
    return WitnessTable;
  }
  return v2;
}

SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional __swiftcall Constants.NLPaymentConfirmationValue.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "yes";
  *(void *)(v2 + 8) = 3;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "no";
  *(void *)(v2 + 32) = 2;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "cancel";
  *(void *)(v2 + 56) = 6;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_yes;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_no;
      goto LABEL_8;
    case 2:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_NLPaymentConfirmationValue_cancel;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional)3;
}

uint64_t static Constants.NLPaymentConfirmationValue.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.NLPaymentConfirmationValue()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue;
  if (!lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.NLPaymentConfirmationValue()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.NLPaymentConfirmationValue()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.NLPaymentConfirmationValue()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.NLPaymentConfirmationValue@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.NLPaymentConfirmationValue.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.NLPaymentConfirmationValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.NLPaymentConfirmationValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.NLPaymentConfirmationValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.NLPaymentConfirmationValue.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance Constants.NLPaymentConfirmationValue()
{
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional __swiftcall Constants.PaymentAccountType.init(from:)(Swift::String_optional from)
{
  uint64_t countAndFlagsBits = from.value._countAndFlagsBits;
  object = from.value._object;
  uint64_t v77 = 0;
  uint64_t v71 = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  uint64_t v72 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  v101._uint64_t countAndFlagsBits = 0;
  v101._object = 0;
  uint64_t v76 = 0;
  uint64_t v78 = type metadata accessor for Logger();
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v80 = v78 - 8;
  unint64_t v81 = (*(void *)(v79 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v82 = (char *)&v26 - v81;
  uint64_t v84 = type metadata accessor for CharacterSet();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = v84 - 8;
  unint64_t v87 = (*(void *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](object);
  uint64_t v88 = (char *)&v26 - v87;
  uint64_t v102 = v2;
  uint64_t v103 = v1;
  swift_bridgeObjectRetain();
  if (!object) {
    goto LABEL_12;
  }
  uint64_t v69 = countAndFlagsBits;
  uint64_t v70 = object;
  v38._object = object;
  v38._uint64_t countAndFlagsBits = countAndFlagsBits;
  swift_bridgeObjectRetain();
  Swift::String v101 = v38;
  unint64_t v43 = &v100;
  Swift::String v100 = v38;
  uint64_t v58 = 7;
  int v40 = 1;
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("account", 7uLL, 1);
  uint64_t v42 = &v99;
  Swift::String v99 = v3;
  uint64_t v39 = 0;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v40 & 1);
  uint64_t v41 = &v98;
  Swift::String v98 = v4;
  unint64_t v47 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v46 = MEMORY[0x263F8D310];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v45 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v44 = v5;
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  uint64_t v48 = v97;
  v97[0] = v45;
  v97[1] = v44;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v6 = StringProtocol.trimmingCharacters(in:)();
  SiriPaymentsIntents::Constants::NLPaymentConfirmationValue_optional v7 = v82;
  uint64_t v49 = v6;
  uint64_t v50 = v8;
  (*(void (**)(char *, uint64_t))(v85 + 8))(v88, v84);
  outlined destroy of String.UTF8View();
  Swift::String v51 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v101 = v51;
  swift_bridgeObjectRelease();
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v7, v9, v78);
  uint64_t v57 = 32;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v51._object;
  uint64_t v59 = v10;
  *(void *)(v10 + 16) = v51._countAndFlagsBits;
  *(void *)(v10 + 24) = v11;
  int v67 = Logger.logObject.getter();
  int v68 = static os_log_type_t.debug.getter();
  uint64_t v54 = &v95;
  uint64_t v95 = 12;
  unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v53 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v55 = v96;
  uint64_t v56 = 17;
  uint64_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 32;
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = 8;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v59;
  uint64_t v60 = v12;
  *(void *)(v12 + 16) = v71;
  *(void *)(v12 + 24) = v13;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v60;
  uint64_t v64 = v14;
  *(void *)(v14 + 16) = v72;
  *(void *)(v14 + 24) = v15;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  uint64_t v65 = v16;
  swift_retain();
  uint64_t v17 = v61;
  uint64_t v18 = v65;
  *uint64_t v65 = v73;
  v18[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = v62;
  Swift::String v20 = v65;
  unsigned char v65[2] = v74;
  v20[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  unint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v64;
  Swift::String v22 = v65;
  v65[4] = v75;
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v67, (os_log_type_t)v68))
  {
    uint64_t v23 = v76;
    uint64_t v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = createStorage<A>(capacity:type:)(1);
    uint64_t v34 = &v94;
    uint64_t v94 = v31;
    uint64_t v35 = &v93;
    uint64_t v93 = v32;
    unsigned int v36 = &v92;
    uint64_t v92 = v33;
    serialize(_:at:)(2, &v94);
    serialize(_:at:)(1, v34);
    int v90 = v73;
    uint64_t v91 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36);
    uint64_t v37 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      int v90 = v74;
      uint64_t v91 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v94, (uint64_t)&v93, (uint64_t)&v92);
      uint64_t v29 = 0;
      int v90 = v75;
      uint64_t v91 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v94, (uint64_t)&v93, (uint64_t)&v92);
      _os_log_impl(&dword_25D85A000, v67, (os_log_type_t)v68, "#PaymentAccountType initializing against cleaned candidate %s", v31, v55);
      destroyStorage<A>(_:count:)(v32, 0, v30);
      destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v31, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v79 + 8))(v82, v78);
  LOBYTE(v24) = Constants.PaymentAccountType.init(rawValue:)(v51);
  int v28 = v24;
  if (v24 == 9)
  {
    outlined destroy of String.UTF8View();
LABEL_12:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)9;
  }
  char v104 = v28;
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)v28;
}

uint64_t sub_25D9F46D4()
{
  return swift_deallocObject();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional __swiftcall Constants.PaymentAccountType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "unknown";
  *(void *)(v2 + 8) = 7;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "checking";
  *(void *)(v2 + 32) = 8;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "credit";
  *(void *)(v2 + 56) = 6;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "debit";
  *(void *)(v2 + 80) = 5;
  *(unsigned char *)(v2 + 88) = 2;
  *(void *)(v2 + 96) = "investment";
  *(void *)(v2 + 104) = 10;
  *(unsigned char *)(v2 + 112) = 2;
  *(void *)(v2 + 120) = "mortgage";
  *(void *)(v2 + 128) = 8;
  *(unsigned char *)(v2 + 136) = 2;
  *(void *)(v2 + 144) = "prepaid";
  *(void *)(v2 + 152) = 7;
  *(unsigned char *)(v2 + 160) = 2;
  *(void *)(v2 + 168) = "saving";
  *(void *)(v2 + 176) = 6;
  *(unsigned char *)(v2 + 184) = 2;
  *(void *)(v2 + 192) = "savings";
  *(void *)(v2 + 200) = 7;
  *(unsigned char *)(v2 + 208) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_unknown;
LABEL_20:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_checking;
      goto LABEL_20;
    case 2:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_credit;
      goto LABEL_20;
    case 3:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_debit;
      goto LABEL_20;
    case 4:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_investment;
      goto LABEL_20;
    case 5:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_mortgage;
      goto LABEL_20;
    case 6:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_prepaid;
      goto LABEL_20;
    case 7:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_saving;
      goto LABEL_20;
    case 8:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountType_savings;
      goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountType_optional)9;
}

uint64_t Constants.PaymentAccountType.asINAccountType.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 2;
      break;
    case 3:
      uint64_t v2 = 3;
      break;
    case 4:
      uint64_t v2 = 4;
      break;
    case 5:
      uint64_t v2 = 5;
      break;
    case 6:
      uint64_t v2 = 6;
      break;
    case 7:
    case 8:
      uint64_t v2 = 7;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t static Constants.PaymentAccountType.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  v1[4] = 4;
  v1[5] = 5;
  v1[6] = 6;
  v1[7] = 7;
  v1[8] = 8;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional __swiftcall Constants.DirectInvocationPayloadKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "buttonPressed";
  *(void *)(v2 + 8) = 13;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "itemIdentifier";
  *(void *)(v2 + 32) = 14;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional)2;
}

uint64_t static Constants.DirectInvocationPayloadKeys.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional __swiftcall Constants.DirectInvocationPayloadIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "com.apple.siri.DirectInvocation.Payments.buttonPress";
  *(void *)(v2 + 8) = 52;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "com.apple.siri.DirectInvocation.Payments.ItemSelection";
  *(void *)(v2 + 32) = 54;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional)2;
}

uint64_t static Constants.DirectInvocationPayloadIdentifiers.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t static Constants.DirectInvocationButtonType.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.PaymentAccountType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.PaymentAccountType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.PaymentAccountType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.PaymentAccountType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::PaymentAccountType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.PaymentAccountType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::PaymentAccountType_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.PaymentAccountType.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.PaymentAccountType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.PaymentAccountType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.PaymentAccountType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.PaymentAccountType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationPayloadKeys()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationPayloadKeys()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationPayloadKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationPayloadKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationPayloadKeys@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationPayloadKeys_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.DirectInvocationPayloadKeys.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationPayloadKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.DirectInvocationPayloadKeys.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationPayloadKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.DirectInvocationPayloadKeys.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationPayloadIdentifiers()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationPayloadIdentifiers@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationPayloadIdentifiers_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.DirectInvocationPayloadIdentifiers.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationPayloadIdentifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.DirectInvocationPayloadIdentifiers.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationPayloadIdentifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.DirectInvocationPayloadIdentifiers.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.DirectInvocationButtonType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.DirectInvocationButtonType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.DirectInvocationButtonType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.DirectInvocationButtonType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.DirectInvocationButtonType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::DirectInvocationButtonType_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.DirectInvocationButtonType.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.DirectInvocationButtonType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.DirectInvocationButtonType.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.DirectInvocationButtonType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.DirectInvocationButtonType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t Constants.PaymentAccountBalanceType.asINBalanceType.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 2;
      break;
    case 3:
      uint64_t v2 = 0;
      break;
    default:
      uint64_t v2 = 3;
      break;
  }
  return v2;
}

SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional __swiftcall Constants.PaymentAccountBalanceType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "miles";
  *(void *)(v2 + 8) = 5;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "money";
  *(void *)(v2 + 32) = 5;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "points";
  *(void *)(v2 + 56) = 6;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "unknown";
  *(void *)(v2 + 80) = 7;
  *(unsigned char *)(v2 + 88) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_miles;
LABEL_10:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_money;
      goto LABEL_10;
    case 2:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_points;
      goto LABEL_10;
    case 3:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_PaymentAccountBalanceType_unknown;
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional)4;
}

uint64_t static Constants.PaymentAccountBalanceType.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  v1[3] = 3;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.PaymentAccountBalanceType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.PaymentAccountBalanceType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.PaymentAccountBalanceType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.PaymentAccountBalanceType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.PaymentAccountBalanceType@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::PaymentAccountBalanceType_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.PaymentAccountBalanceType.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.PaymentAccountBalanceType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.PaymentAccountBalanceType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.PaymentAccountBalanceType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.PaymentAccountBalanceType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t static Constants.IntentTypeCATCode.from(_:)()
{
  if (swift_dynamicCastMetatype())
  {
    return 0;
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      return 1;
    }
    else
    {
      type metadata accessor for INSearchForAccountsIntent();
      if (swift_dynamicCastMetatype()) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

SiriPaymentsIntents::Constants::IntentTypeCATCode_optional __swiftcall Constants.IntentTypeCATCode.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "request";
  *(void *)(v2 + 8) = 7;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "send";
  *(void *)(v2 + 32) = 4;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "search";
  *(void *)(v2 + 56) = 6;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_IntentTypeCATCode_request;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_IntentTypeCATCode_send;
      goto LABEL_8;
    case 2:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_Constants_IntentTypeCATCode_search;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::Constants::IntentTypeCATCode_optional)3;
}

uint64_t static Constants.IntentTypeCATCode.allCases.getter()
{
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v1 = 0;
  v1[1] = 1;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

SiriPaymentsIntents::UsoIdentifierNamespace_optional __swiftcall UsoIdentifierNamespace.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "item_id";
  *(void *)(v2 + 8) = 7;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "personRelationship";
  *(void *)(v2 + 32) = 18;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "phoneType";
  *(void *)(v2 + 56) = 9;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "emailType";
  *(void *)(v2 + 80) = 9;
  *(unsigned char *)(v2 + 88) = 2;
  *(void *)(v2 + 96) = "contactAttributes";
  *(void *)(v2 + 104) = 17;
  *(unsigned char *)(v2 + 112) = 2;
  *(void *)(v2 + 120) = "contactType";
  *(void *)(v2 + 128) = 11;
  *(unsigned char *)(v2 + 136) = 2;
  *(void *)(v2 + 144) = "name";
  *(void *)(v2 + 152) = 4;
  *(unsigned char *)(v2 + 160) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_itemId;
LABEL_16:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_personRelationship;
      goto LABEL_16;
    case 2:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_phoneType;
      goto LABEL_16;
    case 3:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_emailType;
      goto LABEL_16;
    case 4:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_contactAttributes;
      goto LABEL_16;
    case 5:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_contactType;
      goto LABEL_16;
    case 6:
      v7.SiriPaymentsIntents::SendPaymentSlots value = SiriPaymentsIntents_UsoIdentifierNamespace_name;
      goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  return (SiriPaymentsIntents::UsoIdentifierNamespace_optional)7;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Constants.IntentTypeCATCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Constants.IntentTypeCATCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Constants.IntentTypeCATCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Constants.IntentTypeCATCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::Constants::IntentTypeCATCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Constants.IntentTypeCATCode@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::Constants::IntentTypeCATCode_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = Constants.IntentTypeCATCode.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Constants.IntentTypeCATCode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Constants.IntentTypeCATCode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Constants.IntentTypeCATCode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Constants.IntentTypeCATCode.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriPaymentsIntents::UsoIdentifierNamespace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<W0>(Swift::String *a1@<X0>, SiriPaymentsIntents::UsoIdentifierNamespace_optional *a2@<X8>)
{
  result.SiriPaymentsIntents::SendPaymentSlots value = UsoIdentifierNamespace.init(rawValue:)(*a1).value;
  a2->SiriPaymentsIntents::SendPaymentSlots value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25D9F62EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9F6318()
{
  return swift_deallocObject();
}

uint64_t sub_25D9F6344()
{
  return swift_deallocObject();
}

uint64_t sub_25D9F6384()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType;
  if (!lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

ValueMetadata *type metadata accessor for Constants.NLConstants()
{
  return &type metadata for Constants.NLConstants;
}

ValueMetadata *type metadata accessor for Constants.NLPaymentConfirmationValue()
{
  return &type metadata for Constants.NLPaymentConfirmationValue;
}

uint64_t getEnumTagSinglePayload for Constants.PaymentAccountType(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF7) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 8) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 9;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Constants.PaymentAccountType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF7)
  {
    unsigned int v5 = ((a3 + 8) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF7)
  {
    unsigned int v4 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Constants.PaymentAccountType()
{
  return &type metadata for Constants.PaymentAccountType;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationPayloadKeys()
{
  return &type metadata for Constants.DirectInvocationPayloadKeys;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationPayloadIdentifiers()
{
  return &type metadata for Constants.DirectInvocationPayloadIdentifiers;
}

ValueMetadata *type metadata accessor for Constants.DirectInvocationButtonType()
{
  return &type metadata for Constants.DirectInvocationButtonType;
}

ValueMetadata *type metadata accessor for Constants.PaymentAccountBalanceType()
{
  return &type metadata for Constants.PaymentAccountBalanceType;
}

ValueMetadata *type metadata accessor for Constants.IntentTypeCATCode()
{
  return &type metadata for Constants.IntentTypeCATCode;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

unint64_t base witness table accessor for Equatable in UsoIdentifierNamespace()
{
  return lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.IntentTypeCATCode()
{
  return lazy protocol witness table accessor for type [Constants.IntentTypeCATCode] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.IntentTypeCATCode] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.IntentTypeCATCode]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.IntentTypeCATCode] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.IntentTypeCATCode()
{
  return lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.PaymentAccountBalanceType()
{
  return lazy protocol witness table accessor for type [Constants.PaymentAccountBalanceType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.PaymentAccountBalanceType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.PaymentAccountBalanceType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.PaymentAccountBalanceType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.PaymentAccountBalanceType()
{
  return lazy protocol witness table accessor for type Constants.PaymentAccountBalanceType and conformance Constants.PaymentAccountBalanceType();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationButtonType()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationButtonType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationButtonType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationButtonType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationButtonType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationButtonType()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationButtonType and conformance Constants.DirectInvocationButtonType();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationPayloadIdentifiers()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationPayloadIdentifiers]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadIdentifiers] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationPayloadIdentifiers()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationPayloadIdentifiers and conformance Constants.DirectInvocationPayloadIdentifiers();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.DirectInvocationPayloadKeys()
{
  return lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadKeys] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.DirectInvocationPayloadKeys] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.DirectInvocationPayloadKeys]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.DirectInvocationPayloadKeys] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.DirectInvocationPayloadKeys()
{
  return lazy protocol witness table accessor for type Constants.DirectInvocationPayloadKeys and conformance Constants.DirectInvocationPayloadKeys();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.PaymentAccountType()
{
  return lazy protocol witness table accessor for type [Constants.PaymentAccountType] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.PaymentAccountType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.PaymentAccountType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.PaymentAccountType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in Constants.PaymentAccountType()
{
  return lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
}

unint64_t base witness table accessor for Hashable in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

unint64_t base witness table accessor for Equatable in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

unint64_t base witness table accessor for Equatable in Constants.NLConstants()
{
  return lazy protocol witness table accessor for type Constants.NLConstants and conformance Constants.NLConstants();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type [Constants.NLPaymentConfirmationValue] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [Constants.NLPaymentConfirmationValue] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Constants.NLPaymentConfirmationValue]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Constants.NLPaymentConfirmationValue] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for TerminalNodeValueType in Constants.NLPaymentConfirmationValue()
{
  return lazy protocol witness table accessor for type Constants.NLPaymentConfirmationValue and conformance Constants.NLPaymentConfirmationValue();
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init()()
{
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  uint64_t v16 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v13 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  int v8 = v42;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v42);
  uint64_t v9 = &v41;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v40;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v39;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  int v28 = &v43;
  uint64_t v44 = v12;
  uint64_t v45 = &protocol witness table for Globals;
  uint64_t v43 = v0;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v27 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v38 = v27;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  uint64_t v14 = v37;
  outlined init with copy of GlobalsProviding((uint64_t)v28, (uint64_t)v37);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  swift_retain();
  uint64_t v26 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v14, v15, v27);
  uint64_t v36 = v26;
  Swift::String v25 = v35;
  outlined init with copy of GlobalsProviding((uint64_t)v28, (uint64_t)v35);
  Swift::UInt v1 = swift_retain();
  NSJSONWritingOptions.init(rawValue:)(v1);
  Swift::String v20 = v34;
  v34[3] = &type metadata for CommonLabelsProvider;
  v34[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v2 = type metadata accessor for SiriKitContactResolver();
  unint64_t v21 = v33;
  void v33[3] = v2;
  v33[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v33);
  SiriKitContactResolver.init()();
  swift_retain();
  Swift::String v22 = &v32;
  uint64_t v32 = v26;
  swift_retain();
  uint64_t v18 = v44;
  uint64_t v17 = v45;
  __swift_project_boxed_opaque_existential_1(v28, v44);
  int v3 = (void (*)(uint64_t))v17[2];
  uint64_t v19 = &v30;
  v3(v18);
  uint64_t v23 = v31;
  v31[3] = &type metadata for SearchForAccountsViewBuilder;
  v31[4] = &protocol witness table for SearchForAccountsViewBuilder;
  v31[0] = swift_allocObject();
  SearchForAccountsViewBuilder.init(catFamily:deviceState:)(v27, (uint64_t)v19, (void *)(v31[0] + 16));
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v29 = SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)((uint64_t)v25, v27, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23, v24, v4);
  swift_retain();
  uint64_t v46 = v29;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  swift_release();
  return v29;
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:viewBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  uint64_t v27 = a4;
  uint64_t v25 = a5;
  uint64_t v22 = a6;
  uint64_t v26 = a7;
  uint64_t v20 = a8;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v43 = a7;
  uint64_t v23 = *(void *)(a7 - 8);
  uint64_t v24 = a7 - 8;
  unint64_t v15 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = (uint64_t)&v15 - v15;
  uint64_t v41 = MEMORY[0x270FA5388](a1);
  uint64_t v40 = v9;
  uint64_t v39 = v10;
  uint64_t v38 = v11;
  uint64_t v37 = v12;
  uint64_t v36 = v13;
  swift_retain();
  uint64_t v42 = v8;
  uint64_t v16 = v35;
  outlined init with copy of GlobalsProviding(v22, (uint64_t)v35);
  outlined init with take of CommonLabelsProviding(v16, (void *)(v8 + 184));
  swift_release();
  unint64_t v21 = v34;
  outlined init with copy of GlobalsProviding(v30, (uint64_t)v34);
  swift_retain();
  uint64_t v17 = v33;
  outlined init with copy of GlobalsProviding(v28, (uint64_t)v33);
  uint64_t v18 = v32;
  outlined init with copy of GlobalsProviding(v27, (uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v25, v26);
  uint64_t v31 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v21, v29, (uint64_t)v17, (uint64_t)v18, v19, v26, v20);
  swift_retain();
  uint64_t v42 = v31;
  __swift_destroy_boxed_opaque_existential_0(v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v26);
  __swift_destroy_boxed_opaque_existential_0(v27);
  __swift_destroy_boxed_opaque_existential_0(v28);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v30);
  swift_release();
  return v31;
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[7] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  void v3[5] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  void v3[5] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:), 0);
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 72);
  id v18 = *(id *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  swift_retain();
  id v3 = v18;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v18;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 96);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 32;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(void *)(v21 + 24) = v20;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v26 + 24) = v21;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 32;
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  *(void *)(v23 + 24) = v22;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v29 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v4;
  swift_retain();
  *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v24;
  swift_retain();
  void v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v25;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v30[5] = v26;
  swift_retain();
  v30[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[7] = v27;
  swift_retain();
  v30[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[9] = v28;
  swift_retain();
  v30[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[11] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    uint64_t v14 = createStorage<A>(capacity:type:)(2);
    uint64_t v33 = buf;
    uint64_t v34 = v13;
    uint64_t v35 = v14;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(2, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_25D85A000, v31, v32, "#SearchForAccountsHandleIntentStrategy makeIntentExecutionBehavior app: %s, intent: %s", buf, size);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = v15[11];
  uint64_t v8 = v15[9];
  uint64_t v7 = v15[10];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v10 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  unsigned int v5 = *(uint64_t (**)(uint64_t))(v15[2] + 8);
  return v5(v10);
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[75] = v2;
  v3[74] = a2;
  v3[73] = a1;
  v3[59] = v3;
  v3[60] = 0;
  v3[61] = 0;
  v3[63] = 0;
  v3[69] = 0;
  v3[71] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[77] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[78] = v4;
  v3[79] = *(void *)(v4 - 8);
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  v3[82] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v3[83] = v5;
  uint64_t v8 = *(void *)(v5 - 8);
  v3[84] = v8;
  v3[85] = *(void *)(v8 + 64);
  v3[86] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[87] = v6;
  v3[88] = *(void *)(v6 - 8);
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[92] = swift_task_alloc();
  v3[60] = a2;
  v3[61] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0);
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v100 = v0;
  uint64_t v72 = *(void *)(v0 + 736);
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v73 = *(void *)(v0 + 704);
  uint64_t v74 = *(void *)(v0 + 696);
  uint64_t v79 = *(void *)(v0 + 688);
  uint64_t v77 = *(void *)(v0 + 672);
  uint64_t v80 = *(void *)(v0 + 664);
  uint64_t v76 = *(void *)(v0 + 592);
  *(void *)(v0 + 472) = v0;
  uint64_t v2 = SignpostName.searchForAccountHandleIntent.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v72);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  v75(v1, v3, v74);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v79, v76, v80);
  unint64_t v78 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  uint64_t v82 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 32))(v82 + v78, v79, v80);
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 496) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v81 = *(_DWORD *)(v0 + 880);
  uint64_t v84 = swift_allocObject();
  *(unsigned char *)(v84 + 16) = 32;
  uint64_t v85 = swift_allocObject();
  *(unsigned char *)(v85 + 16) = 8;
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(void *)(v83 + 24) = v82;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v86 + 24) = v83;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  unint64_t v87 = v4;
  swift_retain();
  *unint64_t v87 = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[1] = v84;
  swift_retain();
  v87[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[3] = v85;
  swift_retain();
  v87[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[5] = v86;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v88, v89))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v69 = createStorage<A>(capacity:type:)(0);
    uint64_t v70 = createStorage<A>(capacity:type:)(1);
    uint64_t v95 = buf;
    uint64_t v96 = v69;
    uint64_t v97 = v70;
    serialize(_:at:)(2, &v95);
    serialize(_:at:)(1, &v95);
    Swift::String v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v84;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    Swift::String v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v85;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    Swift::String v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v86;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    _os_log_impl(&dword_25D85A000, v88, v89, "#SearchForAccountsHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v81);
    destroyStorage<A>(_:count:)(v69, 0, v67);
    destroyStorage<A>(_:count:)(v70, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v62 = *(void *)(v71 + 728);
  uint64_t v63 = *(void *)(v71 + 696);
  uint64_t v61 = *(void *)(v71 + 704);

  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v64(v62, v63);
  id v65 = (id)IntentResolutionRecord.intentResponse.getter();
  id v66 = objc_msgSend(v65, sel_code);
  *(void *)(v71 + 504) = v66;

  if (v66 == (id)3)
  {
    id v59 = (id)IntentResolutionRecord.intentResponse.getter();
    id v60 = objc_msgSend(v59, sel_accounts);
    if (v60)
    {
      type metadata accessor for INPaymentAccount();
      uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = v57;
    }
    else
    {
      uint64_t v58 = 0;
    }

    uint64_t v56 = Optional<A>.emptyToNil.getter(v58);
    *(void *)(v71 + 744) = v56;
    if (v56)
    {
      uint64_t v5 = *(void *)(v71 + 720);
      uint64_t v45 = *(void *)(v71 + 696);
      *(void *)(v71 + 552) = v56;
      swift_bridgeObjectRelease();
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      v75(v5, v6, v45);
      swift_bridgeObjectRetain();
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v56;
      swift_retain();
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      *(void *)(v48 + 24) = v46;
      swift_release();
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      *(void *)(v71 + 560) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v71 + 888);
      uint64_t v50 = swift_allocObject();
      *(unsigned char *)(v50 + 16) = 32;
      uint64_t v51 = swift_allocObject();
      *(unsigned char *)(v51 + 16) = 8;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
      *(void *)(v49 + 24) = v48;
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v52 + 24) = v49;
      _allocateUninitializedArray<A>(_:)();
      unint64_t v53 = v7;
      swift_retain();
      *unint64_t v53 = partial apply for closure #1 in OSLogArguments.append(_:);
      v53[1] = v50;
      swift_retain();
      v53[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v53[3] = v51;
      swift_retain();
      v53[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v53[5] = v52;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v55))
      {
        uint64_t v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v43 = createStorage<A>(capacity:type:)(0);
        uint64_t v44 = createStorage<A>(capacity:type:)(1);
        int v90 = v42;
        uint64_t v91 = v43;
        uint64_t v92 = v44;
        serialize(_:at:)(2, &v90);
        serialize(_:at:)(1, &v90);
        uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v94 = v50;
        closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
        uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v94 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
        uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v94 = v52;
        closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
        _os_log_impl(&dword_25D85A000, oslog, v55, "#SearchForAccountsHandleIntentStrategy intent contained accounts: %s", v42, size);
        destroyStorage<A>(_:count:)(v43, 0, v41);
        destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v42, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v36 = *(void *)(v71 + 720);
      uint64_t v37 = *(void *)(v71 + 696);
      uint64_t v38 = *(void *)(v71 + 600);

      v64(v36, v37);
      swift_retain();
      *(void *)(v71 + 752) = *(void *)(v38 + 16);
      swift_retain();
      swift_release();
      IntentResolutionRecord.app.getter();
      uint64_t v39 = App.sirikitApp.getter();
      *(void *)(v71 + 760) = v39;
      swift_release();
      *(void *)(v71 + 768) = type metadata accessor for INPaymentAccount();
      double v40 = (double)MEMORY[0x2611B9380](v56);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v71 + 776) = v8;
      *uint64_t v8 = *(void *)(v71 + 472);
      v8[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      uint64_t v9 = *(void *)(v71 + 656);
      return SearchForAccountsCATs.intentHandledResponse(app:bankAccounts:)(v9, v39, *(uint64_t *)&v40, 0);
    }
    else
    {
      uint64_t v11 = *(void *)(v71 + 712);
      uint64_t v31 = *(void *)(v71 + 696);
      swift_bridgeObjectRelease();
      uint64_t v12 = Logger.payments.unsafeMutableAddressor();
      v75(v11, v12, v31);
      log = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      *(void *)(v71 + 512) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v32 = *(_DWORD *)(v71 + 884);
      uint64_t v35 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v33))
      {
        uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v28 = createStorage<A>(capacity:type:)(0);
        uint64_t v29 = createStorage<A>(capacity:type:)(0);
        *(void *)(v71 + 520) = v27;
        *(void *)(v71 + 528) = v28;
        *(void *)(v71 + 536) = v29;
        serialize(_:at:)(0, (unsigned char **)(v71 + 520));
        serialize(_:at:)(0, (unsigned char **)(v71 + 520));
        *(void *)(v71 + 544) = v35;
        uint64_t v30 = (void *)swift_task_alloc();
        void v30[2] = v71 + 520;
        v30[3] = v71 + 528;
        v30[4] = v71 + 536;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v33, "#SearchForAccountsHandleIntentStrategy could not find accounts in the intent", v27, v32);
        destroyStorage<A>(_:count:)(v28, 0, v26);
        destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v27, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v71 + 712);
      uint64_t v23 = *(void *)(v71 + 696);
      uint64_t v24 = *(void *)(v71 + 600);

      v64(v22, v23);
      swift_retain();
      *(void *)(v71 + 832) = *(void *)(v24 + 16);
      swift_retain();
      swift_release();
      IntentResolutionRecord.app.getter();
      uint64_t v25 = App.sirikitApp.getter();
      *(void *)(v71 + 840) = v25;
      swift_release();
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v71 + 848) = v13;
      *uint64_t v13 = *(void *)(v71 + 472);
      v13[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      uint64_t v14 = *(void *)(v71 + 648);
      return SearchForAccountsCATs.noResultsResponse(app:)(v14, v25);
    }
  }
  else
  {
    uint64_t v18 = *(void *)(v71 + 600);
    swift_retain();
    outlined init with copy of GlobalsProviding(v18 + 144, v71 + 16);
    swift_release();
    uint64_t v19 = *(void *)(v71 + 40);
    uint64_t v20 = *(void *)(v71 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v71 + 16), v19);
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 48) + **(int **)(v20 + 48));
    unint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v71 + 864) = v15;
    *unint64_t v15 = *(void *)(v71 + 472);
    v15[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v16 = *(void *)(v71 + 608);
    uint64_t v17 = *(void *)(v71 + 592);
    return v21(v16, v17, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 472) = *v1;
  *(void *)(v4 + 784) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0[93];
  uint64_t v1 = v0[75];
  v0[59] = v0;
  outlined init with copy of GlobalsProviding(v1 + 184, (uint64_t)(v0 + 37));
  uint64_t v7 = v0[40];
  uint64_t v8 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v7);
  uint64_t v5 = IntentResolutionRecord.app.getter();
  v0[99] = v5;
  uint64_t v6 = IntentResolutionRecord.intent.getter();
  v0[100] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 808) = v2;
  *uint64_t v2 = *(void *)(v4 + 472);
  v2[1] = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v9(v10, v5, v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0[102];
  unint64_t v15 = v0[92];
  uint64_t v13 = v0[82];
  uint64_t v12 = v0[79];
  uint64_t v14 = v0[78];
  uint64_t v11 = v0[77];
  uint64_t v7 = v0[75];
  uint64_t v10 = (uint64_t *)v0[73];
  v0[59] = v0;
  v0[71] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  swift_retain();
  outlined init with copy of GlobalsProviding(v7 + 104, (uint64_t)(v0 + 42));
  swift_release();
  uint64_t v6 = v0[45];
  uint64_t v5 = v0[46];
  __swift_project_boxed_opaque_existential_1(v0 + 42, v6);
  (*(void (**)(uint64_t))(v5 + 16))(v6);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  Array.subscript.getter();
  uint64_t v9 = (id)v0[72];
  swift_retain();
  uint64_t v8 = BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.handleSearchForAccounts(account:needsSDA:)(v9, v8 & 1, v11);

  uint64_t v2 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 56))(v11, 0, 1);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v10[3] = type metadata accessor for AceOutput();
  void v10[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0[59] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 472) = *v1;
  *(void *)(v4 + 856) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[92];
  uint64_t v10 = v0[81];
  uint64_t v9 = v0[79];
  uint64_t v11 = v0[78];
  uint64_t v8 = v0[77];
  uint64_t v6 = v0[75];
  uint64_t v7 = (uint64_t *)v0[73];
  v0[59] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 22));
  swift_release();
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v8, 1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  v0[35] = 0;
  v0[36] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 32));
  outlined destroy of NLContextUpdate?(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[59] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 472) = *v1;
  *(void *)(v4 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    uint64_t v2 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[76];
  v0[59] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[92];
    outlined destroy of TemplatingResult?(v24[76]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[57] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[58] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[59] + 8);
  }
  else
  {
    uint64_t v23 = v24[92];
    uint64_t v21 = v24[80];
    uint64_t v22 = v24[78];
    uint64_t v19 = v24[77];
    uint64_t v17 = v24[75];
    uint64_t v18 = (uint64_t *)v24[73];
    uint64_t v20 = v24[79];
    (*(void (**)(void))(v20 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    unint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v19, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v19);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[59] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 736);
  *(void *)(v0 + 472) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 472) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 736);
  *(void *)(v0 + 472) = v0;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 472) + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = (void *)v0[100];
  uint64_t v7 = v0[92];
  uint64_t v5 = v0[82];
  uint64_t v4 = v0[79];
  uint64_t v6 = v0[78];
  v0[59] = v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[59] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 736);
  *(void *)(v0 + 472) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 472) + 8);
  return v1();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[59] = *v2;
  v6[102] = a1;
  v6[103] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {

    swift_release();
    uint64_t v3 = SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[8] = v2;
  v3[7] = a2;
  v3[6] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  v3[9] = v4;
  uint64_t v7 = *(void *)(v4 - 8);
  v3[10] = v7;
  v3[11] = *(void *)(v7 + 64);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0);
}

uint64_t SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v21, v18, v22);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 32))(v24 + v20, v21, v22);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 136);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 64;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  *(void *)(v25 + 24) = v24;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v28 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v29 = v3;
  swift_retain();
  *uint64_t v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint32_t v32 = buf;
    uint64_t v33 = v13;
    uint64_t v34 = v14;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(1, &v32);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_25D85A000, v30, v31, "#SearchForAccountsHandleIntentStrategy makeFailureHandlingIntentResponse response: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 1, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = v15[15];
  uint64_t v10 = v15[13];
  uint64_t v8 = v15[14];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  uint64_t v4 = (void *)swift_task_alloc();
  v15[16] = v4;
  *uint64_t v4 = v15[2];
  v4[1] = SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  uint64_t v5 = v15[7];
  uint64_t v6 = v15[6];
  return SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(v6, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  uint64_t v5 = v4 + 16;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  return v2();
}

uint64_t implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t SearchForAccountsHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)()
{
  return SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)();
}

uint64_t SearchForAccountsHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)()
{
  if (!"SiriPaymentsIntents.SearchForAccountsHandleIntentStrategy")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriPaymentsIntents.SearchForAccountsHandleIntentStrategy", 57, (unint64_t)"init(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)", 75, 2, (unint64_t)"SiriPaymentsIntents/SearchForAccountsHandleIntentStrategy.swift", 63, 2, v1, 0x10uLL, 7uLL);
  __break(1u);
  return result;
}

uint64_t SearchForAccountsHandleIntentStrategy.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_0(v0 + 184);
}

uint64_t SearchForAccountsHandleIntentStrategy.deinit()
{
  uint64_t v1 = BaseStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v1 + 184);
  return v1;
}

uint64_t SearchForAccountsHandleIntentStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_25D9FC674()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_25D9FC6BC()
{
  return swift_deallocObject();
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF) {
      goto LABEL_12;
    }
    unsigned int v5 = (a3 + 1);
  }
  else
  {
    int v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      unsigned int v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      int v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL) {
        unsigned int v5 = (v6 | (a3 >> 12)) + 8487393;
      }
      else {
        unsigned int v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
      }
    }
  }
  uint64_t v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  uint64_t v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0) {
    return a1(&v8, v4);
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  unint64_t v26 = a6;
  uint64_t v27 = a7;
  int v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = a11;
  os_log_type_t v31 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  uint32_t v32 = partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:);
  uint64_t v33 = "Fatal error";
  uint64_t v34 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v35 = "Swift/StaticString.swift";
  uint64_t v36 = "Not enough bits to represent the passed value";
  uint64_t v37 = "Swift/Integers.swift";
  uint64_t v38 = "UnsafeBufferPointer with negative count";
  uint64_t v39 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v40 = 0;
  unint64_t v42 = a6;
  uint64_t v43 = a7;
  char v44 = a8;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  unint64_t v47 = a10;
  unint64_t v48 = a11;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = &v18;
        uint64_t v11 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v32);
        uint64_t v16 = v31;
        uint64_t v17 = &v41;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v11, (uint64_t)v14, v12);
        return (uint64_t)v19;
      }
      v14[0] = 2;
      uint64_t v15 = 148;
      LODWORD(v16) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v14[0] = 2;
    uint64_t v15 = 3455;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v49 = v24;
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v18 = v49;
  if (!v49)
  {
    v14[0] = 2;
    uint64_t v15 = 136;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18, v25, v26, v27, v28, v22, v23, v29, v21, v30);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  unint64_t v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  os_log_type_t v31 = partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:);
  uint32_t v32 = "Fatal error";
  uint64_t v33 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v34 = "Swift/StaticString.swift";
  uint64_t v35 = "Not enough bits to represent the passed value";
  uint64_t v36 = "Swift/Integers.swift";
  uint64_t v37 = "UnsafeBufferPointer with negative count";
  uint64_t v38 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v39 = 0;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  unint64_t v45 = a8;
  unint64_t v46 = a10;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = &v17;
        uint64_t v10 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v31);
        uint64_t v15 = v30;
        uint64_t v16 = &v40;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v10, (uint64_t)v13, v11);
        return (uint64_t)v19;
      }
      v13[0] = 2;
      uint64_t v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    uint64_t v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v47 = v24;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v18 = v47;
  if (!v47)
  {
    v13[0] = 2;
    uint64_t v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18, v25, v26, v27, v22, v23, v28, v29);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF) {
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                }
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_25D9FD7A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD7D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD7FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD83C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD87C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD8A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD8D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD914()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FD954()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);

  return implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t sub_25D9FDA90()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDABC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDAE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDB28()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDB68()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDBA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDBE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDC14()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDC40()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDC80()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDCC0()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);

  return implicit closure #1 in SearchForAccountsHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t sub_25D9FDDFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDE28()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDE54()
{
  return swift_deallocObject();
}

uint64_t sub_25D9FDE94()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsHandleIntentStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsHandleIntentStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsHandleIntentStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3, *(void *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t RequestPaymentUnsupportedValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unsigned int v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  void v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v1 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  unsigned int v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 624) = v2;
  *(void *)(v3 + 616) = a2;
  *(void *)(v3 + 608) = a1;
  *(void *)(v3 + 488) = v3;
  *(void *)(v3 + 496) = 0;
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 880) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 536) = 0;
  *(void *)(v3 + 472) = 0;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 544) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 560) = 0;
  *(void *)(v3 + 568) = 0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(void *)(v3 + 632) = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  *(void *)(v3 + 640) = v9;
  *(void *)(v3 + 648) = *(void *)(v9 + 64);
  *(void *)(v3 + 656) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 664) = swift_task_alloc();
  *(void *)(v3 + 672) = swift_task_alloc();
  *(void *)(v3 + 680) = swift_task_alloc();
  type metadata accessor for Locale();
  *(void *)(v3 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 696) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(void *)(v3 + 704) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 712) = v5;
  *(void *)(v3 + 720) = *(void *)(v5 - 8);
  *(void *)(v3 + 728) = swift_task_alloc();
  *(void *)(v3 + 736) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 744) = v6;
  *(void *)(v3 + 752) = *(void *)(v6 - 8);
  *(void *)(v3 + 760) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v3 + 768) = v7;
  *(void *)(v3 + 776) = *(void *)(v7 - 8);
  *(void *)(v3 + 784) = swift_task_alloc();
  *(void *)(v3 + 792) = swift_task_alloc();
  *(void *)(v3 + 496) = a2;
  *(void *)(v3 + 504) = v2;
  return MEMORY[0x270FA2498](RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0);
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v71 = v0;
  uint64_t v1 = *(void *)(v0 + 792);
  uint64_t v59 = *(void *)(v0 + 776);
  uint64_t v60 = *(void *)(v0 + 768);
  *(void *)(v0 + 488) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v1, v2, v60);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 512) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v62 = *(unsigned int *)(v0 + 884);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v65 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v64, v63))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v55 = createStorage<A>(capacity:type:)(0);
    uint64_t v56 = createStorage<A>(capacity:type:)(0);
    *(void *)(v58 + 576) = buf;
    *(void *)(v58 + 584) = v55;
    *(void *)(v58 + 592) = v56;
    serialize(_:at:)(0, (unsigned char **)(v58 + 576));
    serialize(_:at:)(0, (unsigned char **)(v58 + 576));
    *(void *)(v58 + 600) = v65;
    uint64_t v57 = (void *)swift_task_alloc();
    v57[2] = v58 + 576;
    v57[3] = v58 + 584;
    v57[4] = v58 + 592;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v64, v63, "RequestPaymentUnsupportedValueStrategy makeUnsupportedValueOutput", buf, v62);
    destroyStorage<A>(_:count:)(v55, 0, v53);
    destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v58 + 792);
  uint64_t v46 = *(void *)(v58 + 768);
  uint64_t v49 = *(void *)(v58 + 760);
  uint64_t v50 = *(void *)(v58 + 744);
  uint64_t v44 = *(void *)(v58 + 776);
  uint64_t v48 = *(void *)(v58 + 752);

  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v47(v45, v46);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v51(v49, v50);
  v4.SiriPaymentsIntents::SendPaymentSlots value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v58 + 88String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = v4;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    uint64_t v9 = *(void *)(v58 + 784);
    uint64_t v25 = *(void *)(v58 + 768);
    uint64_t v29 = *(void *)(v58 + 656);
    uint64_t v30 = *(void *)(v58 + 632);
    uint64_t v27 = *(void *)(v58 + 616);
    uint64_t v26 = *(void *)(v58 + 640);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v61(v9, v10, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v29, v27, v30);
    unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v32 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v32 + v28, v29, v30);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    *(void *)(v58 + 520) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v58 + 888);
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 32;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    *(void *)(v33 + 24) = v32;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v36 + 24) = v33;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v37 = v11;
    swift_retain();
    *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[1] = v34;
    swift_retain();
    v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v37[3] = v35;
    swift_retain();
    v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v39))
    {
      uint64_t v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v23 = createStorage<A>(capacity:type:)(0);
      uint64_t v24 = createStorage<A>(capacity:type:)(1);
      id v66 = v22;
      uint64_t v67 = v23;
      uint64_t v68 = v24;
      serialize(_:at:)(2, &v66);
      serialize(_:at:)(1, &v66);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      _os_log_impl(&dword_25D85A000, oslog, v39, "#RequestPaymentUnsupportedValueStrategy unknown parameter: %s", v22, size);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v22, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v15 = *(void *)(v58 + 784);
    uint64_t v16 = *(void *)(v58 + 768);
    uint64_t v17 = *(void *)(v58 + 760);
    uint64_t v18 = *(void *)(v58 + 744);

    v47(v15, v16);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v20 = ParameterIdentifier.name.getter();
    uint64_t v19 = v12;
    v51(v17, v18);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v13 = v20;
    *(void *)(v13 + 8) = v19;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)(v58 + 488) + 8);
    return v14();
  }
  else
  {
    uint64_t v40 = *(void *)(v58 + 624);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v58 + 880) = v4;
    swift_retain();
    outlined init with copy of GlobalsProviding(v40 + 144, v58 + 16);
    swift_release();
    uint64_t v41 = *(void *)(v58 + 40);
    uint64_t v42 = *(void *)(v58 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + 16), v41);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 56) + **(int **)(v42 + 56));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v58 + 800) = v5;
    *uint64_t v5 = *(void *)(v58 + 488);
    v5[1] = RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v6 = *(void *)(v58 + 704);
    uint64_t v7 = *(void *)(v58 + 616);
    return v43(v6, v7, v41, v42);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  SiriPaymentsIntents::RequestPaymentSlots_optional v4 = *v1;
  *(void *)(v4 + 488) = *v1;
  *(void *)(v4 + 808) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    uint64_t v2 = RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v1 = v0[90];
  uint64_t v2 = v0[89];
  uint64_t v3 = v0[88];
  v0[61] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(*(void *)(v49 + 704));
    __swift_destroy_boxed_opaque_existential_0(v49 + 16);
    ParameterResolutionRecord.app.getter();
    uint64_t v38 = App.sirikitApp.getter();
    *(void *)(v49 + 816) = v38;
    *(void *)(v49 + 528) = v38;
    swift_release();
    os_log_type_t v39 = (id)ParameterResolutionRecord.intent.getter();
    *(void *)(v49 + 824) = v39;
    *(void *)(v49 + 536) = v39;
    uint64_t v40 = objc_msgSend(v39, sel_note);
    if (v40)
    {
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v7;

      uint64_t v36 = v34;
      uint64_t v37 = v35;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    *(void *)(v49 + 832) = v37;
    *(void *)(v49 + 472) = v36;
    *(void *)(v49 + 480) = v37;
    type metadata accessor for PaymentsDialogConcept.Builder();
    uint64_t v32 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(void *)(v49 + 840) = v32;
    *(void *)(v49 + 544) = v32;
    uint64_t v33 = objc_msgSend(v39, sel_payer);
    if (v33)
    {
      uint64_t v27 = *(void *)(v49 + 624);
      *(void *)(v49 + 568) = v33;
      type metadata accessor for DialogPerson();
      uint64_t v8 = v33;
      swift_retain();
      outlined init with copy of GlobalsProviding(v27 + 104, v49 + 176);
      swift_release();
      uint64_t v29 = *(void *)(v49 + 200);
      unint64_t v28 = *(void *)(v49 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v49 + 176), v29);
      (*(void (**)(uint64_t))(v28 + 16))(v29);
      __swift_project_boxed_opaque_existential_1((void *)(v49 + 216), *(void *)(v49 + 240));
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v31 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      __swift_destroy_boxed_opaque_existential_0(v49 + 216);
      __swift_destroy_boxed_opaque_existential_0(v49 + 176);
      swift_retain();
      uint64_t v30 = (uint64_t *)(v32 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
      swift_beginAccess();
      *uint64_t v30 = v31;
      swift_release();
      swift_endAccess();
      swift_release();
    }
    uint64_t v26 = objc_msgSend(v39, sel_currencyAmount);
    if (v26)
    {
      *(void *)(v49 + 560) = v26;
      type metadata accessor for DialogCurrency.Builder();
      DialogCurrency.Builder.__allocating_init()();
      uint64_t v25 = objc_msgSend(v26, sel_amount);
      if (v25)
      {
        objc_msgSend(v25, sel_doubleValue);
      }
      dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
      swift_release();
      uint64_t v24 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
      swift_release();
      swift_retain();
      swift_beginAccess();
      *(void *)(v32 + 16) = v24;
      swift_release();
      swift_endAccess();
      swift_release();
    }
    swift_bridgeObjectRetain();
    if (v37)
    {
      uint64_t v23 = *(void *)(v49 + 680);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 56))(v23, 0, 1);
    }
    else
    {
      uint64_t v15 = *(void *)(v49 + 680);
      uint64_t v14 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v15, 1);
    }
    uint64_t v20 = *(unsigned char *)(v49 + 881);
    uint64_t v18 = *(const void **)(v49 + 680);
    uint64_t v16 = *(void **)(v49 + 672);
    uint64_t v21 = *(void *)(v49 + 664);
    uint64_t v19 = *(void *)(v49 + 624);
    outlined init with copy of SpeakableString?(v18, v16);
    uint64_t v17 = (void *)(v32 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
    swift_beginAccess();
    outlined assign with take of SpeakableString?(v16, v17);
    swift_endAccess();
    outlined destroy of SpeakableString?((uint64_t)v18);
    swift_retain();
    swift_retain();
    swift_beginAccess();
    *(void *)(v32 + 24) = v38;
    swift_release();
    swift_endAccess();
    swift_release();
    uint64_t v22 = PaymentsDialogConcept.Builder.build()();
    *(void *)(v49 + 848) = v22;
    *(void *)(v49 + 552) = v22;
    swift_retain();
    *(void *)(v49 + 856) = *(void *)(v19 + 16);
    swift_retain();
    swift_release();
    RequestPaymentSlots.rawValue.getter(v20);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 56))(v21, 0, 1);
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v49 + 864) = v11;
    *uint64_t v11 = *(void *)(v49 + 488);
    v11[1] = SendPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v12 = *(void *)(v49 + 728);
    uint64_t v13 = *(void *)(v49 + 664);
    return RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(v12, v13, v22);
  }
  else
  {
    uint64_t v47 = *(void *)(v49 + 736);
    uint64_t v48 = *(void *)(v49 + 712);
    uint64_t v45 = *(void *)(v49 + 696);
    uint64_t v43 = *(void *)(v49 + 624);
    uint64_t v44 = *(uint64_t **)(v49 + 608);
    uint64_t v46 = *(void *)(v49 + 720);
    (*(void (**)(void))(v46 + 32))();
    __swift_destroy_boxed_opaque_existential_0(v49 + 16);
    swift_retain();
    outlined init with copy of GlobalsProviding(v43 + 104, v49 + 256);
    swift_release();
    uint64_t v42 = *(void *)(v49 + 280);
    uint64_t v41 = *(void *)(v49 + 288);
    __swift_project_boxed_opaque_existential_1((void *)(v49 + 256), v42);
    (*(void (**)(uint64_t))(v41 + 16))(v42);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    SiriPaymentsIntents::RequestPaymentSlots_optional v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v45, 1);
    *(void *)(v49 + 336) = 0;
    *(void *)(v49 + 344) = 0;
    *(void *)(v49 + 352) = 0;
    *(void *)(v49 + 360) = 0;
    *(void *)(v49 + 368) = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v44[3] = type metadata accessor for AceOutput();
    v44[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v44);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v49 + 336);
    outlined destroy of NLContextUpdate?(v45);
    __swift_destroy_boxed_opaque_existential_0(v49 + 296);
    __swift_destroy_boxed_opaque_existential_0(v49 + 256);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(v49 + 488) + 8);
    return v5();
  }
}

uint64_t implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.name.getter();
  uint64_t v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  return v8;
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 112) = v2;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 240) = 0;
  uint64_t v3 = type metadata accessor for ParameterIdentifier();
  *(void *)(v2 + 160) = v3;
  *(void *)(v2 + 168) = *(void *)(v3 - 8);
  *(void *)(v2 + 176) = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(void *)(v2 + 184) = v4;
  uint64_t v7 = *(void *)(v4 - 8);
  *(void *)(v2 + 192) = v7;
  *(void *)(v2 + 200) = *(void *)(v7 + 64);
  *(void *)(v2 + 208) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v2 + 216) = v5;
  *(void *)(v2 + 224) = *(void *)(v5 - 8);
  *(void *)(v2 + 232) = swift_task_alloc();
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return MEMORY[0x270FA2498](RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0);
}

uint64_t RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v88 = v0;
  uint64_t v57 = *(void *)(v0 + 232);
  uint64_t v60 = *(void *)(v0 + 224);
  uint64_t v61 = *(void *)(v0 + 216);
  uint64_t v66 = *(void *)(v0 + 208);
  uint64_t v62 = *(void *)(v0 + 192);
  uint64_t v67 = *(void *)(v0 + 184);
  uint64_t v63 = *(void *)(v0 + 152);
  *(void *)(v0 + 112) = v0;
  id v58 = (id)ParameterResolutionRecord.intent.getter();
  type metadata accessor for INRequestPaymentIntent();
  id v59 = (id)SiriKitPaymentsIntent.clone()();

  *(void *)(v0 + 136) = v59;
  uint64_t v1 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v57, v1, v61);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v64(v66, v63, v67);
  int v65 = *(_DWORD *)(v62 + 80);
  uint64_t v70 = swift_allocObject();
  uint64_t v68 = *(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32);
  v68(v70 + ((v65 + 16) & ~(unint64_t)v65), v66, v67);
  v64(v66, v63, v67);
  uint64_t v72 = swift_allocObject();
  v68(v72 + ((v65 + 16) & ~(unint64_t)v65), v66, v67);
  uint32_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 144) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 244);
  uint64_t v74 = swift_allocObject();
  *(unsigned char *)(v74 + 16) = 32;
  uint64_t v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 8;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  *(void *)(v71 + 24) = v70;
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v76 + 24) = v71;
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = 32;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 8;
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = partial apply for implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:);
  *(void *)(v73 + 24) = v72;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v79 + 24) = v73;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v80 = v2;
  swift_retain();
  *uint64_t v80 = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[1] = v74;
  swift_retain();
  v80[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  id v80[3] = v75;
  swift_retain();
  v80[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[5] = v76;
  swift_retain();
  v80[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[7] = v77;
  swift_retain();
  v80[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[9] = v78;
  swift_retain();
  v80[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[11] = v79;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v81, v82))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v54 = createStorage<A>(capacity:type:)(0);
    uint64_t v55 = createStorage<A>(capacity:type:)(2);
    uint64_t v83 = buf;
    uint64_t v84 = v54;
    uint64_t v85 = v55;
    serialize(_:at:)(2, &v83);
    serialize(_:at:)(2, &v83);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v87 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v86, (uint64_t)&v83, (uint64_t)&v84, (uint64_t)&v85);
    _os_log_impl(&dword_25D85A000, v81, v82, "#RequestPaymentUnsupportedValueStrategy updating intent for slot '%s' with index '%s'", buf, size);
    destroyStorage<A>(_:count:)(v54, 0, v52);
    destroyStorage<A>(_:count:)(v55, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v43 = *(void *)(v56 + 232);
  uint64_t v44 = *(void *)(v56 + 216);
  uint64_t v46 = *(void *)(v56 + 176);
  uint64_t v47 = *(void *)(v56 + 160);
  uint64_t v42 = *(void *)(v56 + 224);
  uint64_t v45 = *(void *)(v56 + 168);

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v48(v46, v47);
  v4.SiriPaymentsIntents::RequestPaymentSlots value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::RequestPaymentSlots value = v4.value;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    uint64_t v20 = *(void *)(v56 + 176);
    uint64_t v14 = *(void *)(v56 + 160);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v15 = ParameterIdentifier.name.getter();
    uint64_t v16 = v10;
    v48(v20, v14);
    id v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v11;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v16;
    *(void *)(v12 + 16) = v18;
    *(void *)(v12 + 24) = v17;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = v51;
    uint64_t v9 = *(uint64_t (**)(id))(*(void *)(v56 + 112) + 8);
  }
  else
  {
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v56 + 240) = v4;
    if (v4.value)
    {
      if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
      {
        *(void *)(v56 + 48) = 0;
        *(void *)(v56 + 56) = 0;
        *(void *)(v56 + 64) = 0;
        *(void *)(v56 + 72) = 0;
        if (*(void *)(v56 + 72))
        {
          uint64_t v31 = *(void *)(v56 + 72);
          uint64_t v29 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 48), v31);
          uint64_t v30 = *(void *)(v31 - 8);
          uint64_t v32 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v30 + 16))(v32, v29, v31);
          uint64_t v33 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v56 + 48);
          uint64_t v34 = v33;
        }
        else
        {
          uint64_t v34 = 0;
        }
        *(unsigned char *)(v56 + 242) = value;
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        uint64_t v6 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
        id v28 = (id)MEMORY[0x2611B9130](v6);
        swift_bridgeObjectRelease();
        objc_msgSend(v59, sel_setValue_forKey_, v34, v28);

        swift_unknownObjectRelease();
      }
      else
      {
        *(void *)(v56 + 16) = 0;
        *(void *)(v56 + 24) = 0;
        *(void *)(v56 + 32) = 0;
        *(void *)(v56 + 40) = 0;
        if (*(void *)(v56 + 40))
        {
          uint64_t v24 = *(void *)(v56 + 40);
          uint64_t v22 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 16), v24);
          uint64_t v23 = *(void *)(v24 - 8);
          uint64_t v25 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v23 + 16))(v25, v22, v24);
          uint64_t v26 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
          swift_task_dealloc();
          __swift_destroy_boxed_opaque_existential_0(v56 + 16);
          uint64_t v27 = v26;
        }
        else
        {
          uint64_t v27 = 0;
        }
        *(unsigned char *)(v56 + 24String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForAccounts#PromptCancelled", 0x21uLL, 1) = value;
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
        uint64_t v7 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
        id v21 = (id)MEMORY[0x2611B9130](v7);
        swift_bridgeObjectRelease();
        objc_msgSend(v59, sel_setValue_forKey_, v27, v21);

        swift_unknownObjectRelease();
      }
    }
    else
    {
      *(void *)(v56 + 80) = 0;
      *(void *)(v56 + 88) = 0;
      *(void *)(v56 + 96) = 0;
      *(void *)(v56 + 104) = 0;
      if (*(void *)(v56 + 104))
      {
        uint64_t v38 = *(void *)(v56 + 104);
        uint64_t v36 = __swift_project_boxed_opaque_existential_1((void *)(v56 + 80), v38);
        uint64_t v37 = *(void *)(v38 - 8);
        uint64_t v39 = swift_task_alloc();
        (*(void (**)(uint64_t, void *, uint64_t))(v37 + 16))(v39, v36, v38);
        uint64_t v40 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
        swift_task_dealloc();
        __swift_destroy_boxed_opaque_existential_0(v56 + 80);
        uint64_t v41 = v40;
      }
      else
      {
        uint64_t v41 = 0;
      }
      *(unsigned char *)(v56 + 243) = 0;
      lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
      lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
      uint64_t v5 = Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
      id v35 = (id)MEMORY[0x2611B9130](v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v59, sel_setValue_forKey_, v41, v35);

      swift_unknownObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = v59;
    uint64_t v9 = *(uint64_t (**)(id))(*(void *)(v56 + 112) + 8);
  }
  return v9(v8);
}

uint64_t implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.multicardinalIndex.getter();
  int v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  uint64_t v10 = v8;
  char v11 = v9 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  return Optional.debugDescription.getter();
}

uint64_t RequestPaymentUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return RequestPaymentUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  id v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *unint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance RequestPaymentUnsupportedValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for RequestPaymentUnsupportedValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F664F0](a1, a2, v6, a4);
}

uint64_t sub_25DA01E04()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);

  return implicit closure #1 in RequestPaymentUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)();
}

uint64_t sub_25DA01F40()
{
  return swift_deallocObject();
}

uint64_t sub_25DA01F6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA01F98()
{
  return swift_deallocObject();
}

uint64_t sub_25DA01FD8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA02018()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DA020E8()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);

  return implicit closure #2 in RequestPaymentUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)();
}

uint64_t sub_25DA02224()
{
  return swift_deallocObject();
}

uint64_t sub_25DA02250()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0227C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA022BC()
{
  return swift_deallocObject();
}

uint64_t sub_25DA022FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DA02328()
{
  return swift_deallocObject();
}

uint64_t sub_25DA02354()
{
  return swift_deallocObject();
}

uint64_t sub_25DA02394()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentUnsupportedValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t SearchForAccountsUnsupportedValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  void v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v1 = type metadata accessor for INSearchForAccountsIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  id v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SearchForAccountsUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 264) = v2;
  *(void *)(v3 + 256) = a2;
  *(void *)(v3 + 248) = a1;
  *(void *)(v3 + 168) = v3;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 416) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 280) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 288) = v4;
  *(void *)(v3 + 296) = *(void *)(v4 - 8);
  *(void *)(v3 + 304) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 312) = v5;
  *(void *)(v3 + 320) = *(void *)(v5 - 8);
  *(void *)(v3 + 328) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 336) = v6;
  *(void *)(v3 + 344) = *(void *)(v6 - 8);
  *(void *)(v3 + 352) = swift_task_alloc();
  *(void *)(v3 + 360) = swift_task_alloc();
  *(void *)(v3 + 368) = swift_task_alloc();
  *(void *)(v3 + 176) = a2;
  *(void *)(v3 + 184) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:), 0);
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v91 = v0;
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v74 = *(void *)(v0 + 344);
  uint64_t v75 = *(void *)(v0 + 336);
  *(void *)(v0 + 168) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
  v76(v1, v2, v75);
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 192) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v77 = *(unsigned int *)(v0 + 420);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v80 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v79, v78))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v70 = createStorage<A>(capacity:type:)(0);
    uint64_t v71 = createStorage<A>(capacity:type:)(0);
    *(void *)(v73 + 216) = buf;
    *(void *)(v73 + 224) = v70;
    *(void *)(v73 + 232) = v71;
    serialize(_:at:)(0, (unsigned char **)(v73 + 216));
    serialize(_:at:)(0, (unsigned char **)(v73 + 216));
    *(void *)(v73 + 240) = v80;
    uint64_t v72 = (void *)swift_task_alloc();
    v72[2] = v73 + 216;
    v72[3] = v73 + 224;
    void v72[4] = v73 + 232;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v79, v78, "#SearchForAccountsUnsupportedValueStrategy makeUnsupportedValueOutput", buf, v77);
    destroyStorage<A>(_:count:)(v70, 0, v68);
    destroyStorage<A>(_:count:)(v71, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v60 = *(void *)(v73 + 368);
  uint64_t v61 = *(void *)(v73 + 336);
  uint64_t v64 = *(void *)(v73 + 328);
  uint64_t v65 = *(void *)(v73 + 312);
  uint64_t v59 = *(void *)(v73 + 344);
  uint64_t v63 = *(void *)(v73 + 320);

  uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v62(v60, v61);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(void *)(v73 + 376) = v3;
  *(void *)(v73 + 136) = rawValue._countAndFlagsBits;
  *(void *)(v73 + 144) = v3;
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
  swift_bridgeObjectRetain();
  v4.SiriPaymentsIntents::SearchForAccountsSlots value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SearchForAccountsSlots value = v4.value;
  if (v4.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    uint64_t v13 = *(void *)(v73 + 352);
    uint64_t v30 = *(void *)(v73 + 336);
    uint64_t v14 = Logger.payments.unsafeMutableAddressor();
    v76(v13, v14, v30);
    swift_bridgeObjectRetain();
    uint64_t v32 = swift_allocObject();
    *(Swift::String *)(v32 + 16) = rawValue;
    log = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    *(void *)(v73 + 200) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v31 = *(_DWORD *)(v73 + 424);
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 32;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v33 + 24) = v32;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v36 + 24) = v33;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v37 = v15;
    swift_retain();
    *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[1] = v34;
    swift_retain();
    v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v37[3] = v35;
    swift_retain();
    v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v39))
    {
      uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v28 = createStorage<A>(capacity:type:)(0);
      uint64_t v29 = createStorage<A>(capacity:type:)(1);
      uint32_t v81 = v27;
      uint64_t v82 = v28;
      uint64_t v83 = v29;
      serialize(_:at:)(2, &v81);
      serialize(_:at:)(1, &v81);
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v85 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v85 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v85 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      _os_log_impl(&dword_25D85A000, log, v39, "#SearchForAccountsUnsupportedValueStrategy makeUnsupportedValueOutput parameter name %s was not a known slot", v27, v31);
      destroyStorage<A>(_:count:)(v28, 0, v26);
      destroyStorage<A>(_:count:)(v29, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v27, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v22 = *(void *)(v73 + 352);
    uint64_t v23 = *(void *)(v73 + 336);

    v62(v22, v23);
    swift_bridgeObjectRetain();
    *(void *)(v73 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v73 + 160) = v16;
    Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v25 = String.init(stringInterpolation:)();
    uint64_t v24 = v19;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v20 = rawValue;
    *(void *)(v20 + 16) = v25;
    *(void *)(v20 + 24) = v24;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 40) = 0;
    *(unsigned char *)(v20 + 48) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(*(void *)(v73 + 168) + 8);
    return v21();
  }
  else
  {
    uint64_t v5 = *(void *)(v73 + 360);
    uint64_t v49 = *(void *)(v73 + 336);
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v73 + 416) = v4;
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    v76(v5, v6, v49);
    uint64_t v51 = swift_allocObject();
    *(unsigned char *)(v51 + 16) = value;
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    *(void *)(v73 + 208) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v73 + 428);
    uint64_t v53 = swift_allocObject();
    *(unsigned char *)(v53 + 16) = 32;
    uint64_t v54 = swift_allocObject();
    *(unsigned char *)(v54 + 16) = 8;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = partial apply for implicit closure #2 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v52 + 24) = v51;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v55 + 24) = v52;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v56 = v7;
    swift_retain();
    void *v56 = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[1] = v53;
    swift_retain();
    v56[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[3] = v54;
    swift_retain();
    v56[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[5] = v55;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v58))
    {
      uint64_t v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v47 = createStorage<A>(capacity:type:)(0);
      uint64_t v48 = createStorage<A>(capacity:type:)(1);
      uint64_t v86 = v46;
      uint64_t v87 = v47;
      uint64_t v88 = v48;
      serialize(_:at:)(2, &v86);
      serialize(_:at:)(1, &v86);
      uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v55;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      _os_log_impl(&dword_25D85A000, oslog, v58, "#SearchForAccountsUnsupportedValueStrategy Slot: %s", v46, size);
      destroyStorage<A>(_:count:)(v47, 0, v45);
      destroyStorage<A>(_:count:)(v48, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v46, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v40 = *(void *)(v73 + 360);
    uint64_t v41 = *(void *)(v73 + 336);
    uint64_t v43 = *(void *)(v73 + 280);
    uint64_t v42 = *(void *)(v73 + 264);

    v62(v40, v41);
    swift_retain();
    *(void *)(v73 + 384) = *(void *)(v42 + 16);
    swift_retain();
    swift_release();
    ParameterResolutionRecord.app.getter();
    uint64_t v44 = App.sirikitApp.getter();
    *(void *)(v73 + 392) = v44;
    swift_release();
    SearchForAccountsSlots.rawValue.getter(value);
    SpeakableString.init(print:speak:)();
    uint64_t v8 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 56))(v43, 0, 1);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v73 + 400) = v9;
    *uint64_t v9 = *(void *)(v73 + 168);
    v9[1] = SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v10 = *(void *)(v73 + 304);
    uint64_t v11 = *(void *)(v73 + 280);
    return SearchForAccountsCATs.unsupportedSlotValue(app:slot:)(v10, v44, v11);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  SiriPaymentsIntents::SearchForAccountsSlots_optional v4 = (void *)*v1;
  v4[21] = *v1;
  v4[51] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[35]);
    swift_release();
    swift_release();
    uint64_t v2 = SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = v0[38];
  uint64_t v8 = v0[37];
  uint64_t v9 = v0[36];
  uint64_t v11 = v0[34];
  uint64_t v6 = v0[33];
  unint64_t v7 = (uint64_t *)v0[31];
  v0[21] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v5 = v0[5];
  SiriPaymentsIntents::SearchForAccountsSlots_optional v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v11, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[21] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 168) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 168) + 8);
  return v2();
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  v2[10] = a1;
  void v2[2] = v2;
  void v2[3] = 0;
  v2[4] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  void v2[3] = a1;
  v2[4] = v1;
  return MEMORY[0x270FA2498](SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0);
}

uint64_t SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 48) = buf;
    *(void *)(v14 + 56) = v11;
    *(void *)(v14 + 64) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    serialize(_:at:)(0, (unsigned char **)(v14 + 48));
    *(void *)(v14 + 72) = v20;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 48;
    void v13[3] = v14 + 56;
    v13[4] = v14 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#SearchForAccountsUnsupportedValueStrategy makeUpdatedIntentForUnsupportedValue", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  uint64_t v8 = ParameterResolutionRecord.intent.getter();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 16) + 8);
  return v3(v8);
}

uint64_t SearchForAccountsUnsupportedValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SearchForAccountsUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t SearchForAccountsUnsupportedValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  uint64_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return SearchForAccountsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance SearchForAccountsUnsupportedValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F664F0](a1, a2, v6, a4);
}

uint64_t sub_25DA04BF8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04C38()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04C64()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04C90()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04CD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04D10()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04D3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04D68()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04D94()
{
  return swift_deallocObject();
}

uint64_t sub_25DA04DD4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsUnsupportedValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsUnsupportedValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t RequestPaymentNeedsValueStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  void v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v1 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  uint64_t v40 = 0;
  uint64_t v27 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v28 = 0;
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v35 - 8);
  uint64_t v34 = v35 - 8;
  unint64_t v31 = (*(void *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (char *)&v12 - v31;
  uint64_t v32 = (char *)&v12 - v31;
  uint64_t v52 = MEMORY[0x270FA5388](v30);
  uint64_t v51 = v4;
  uint64_t v50 = v5;
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v3, v6, v35);
  uint64_t v42 = Logger.logObject.getter();
  int v41 = static os_log_type_t.debug.getter();
  uint64_t v38 = &v48;
  uint64_t v48 = 2;
  unint64_t v36 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v39 = v49;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v42, (os_log_type_t)v41))
  {
    uint64_t v7 = v28;
    uint64_t v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = 0;
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(v15);
    uint64_t v22 = &v47;
    uint64_t v47 = v16;
    uint64_t v23 = &v46;
    uint64_t v46 = v17;
    uint64_t v20 = &v45;
    uint64_t v45 = v18;
    unsigned int v19 = 0;
    serialize(_:at:)(0, &v47);
    serialize(_:at:)(v19, v22);
    uint64_t v44 = v43;
    uint64_t v21 = &v12;
    MEMORY[0x270FA5388](&v12);
    uint64_t v8 = v23;
    uint64_t v9 = &v12 - 6;
    uint64_t v24 = &v12 - 6;
    void v9[2] = (uint64_t)v22;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v42, (os_log_type_t)v41, "#RequestPaymentNeedsValueStrategy actionForInput.", v16, v39);
      uint64_t v13 = 0;
      destroyStorage<A>(_:count:)(v17, 0, v14);
      destroyStorage<A>(_:count:)(v18, v13, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v16, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
  swift_retain();
  BaseStrategy.actionForInput(_:)(v30, v26);
  return swift_release();
}

uint64_t RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 224) = v2;
  *(void *)(v3 + 216) = a2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 136) = v3;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0;
  *(unsigned char *)(v3 + 384) = 0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(void *)(v3 + 232) = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  *(void *)(v3 + 240) = v9;
  *(void *)(v3 + 248) = *(void *)(v9 + 64);
  *(void *)(v3 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 264) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 272) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 280) = v5;
  *(void *)(v3 + 288) = *(void *)(v5 - 8);
  *(void *)(v3 + 296) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 304) = v6;
  *(void *)(v3 + 312) = *(void *)(v6 - 8);
  *(void *)(v3 + 320) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v3 + 328) = v7;
  *(void *)(v3 + 336) = *(void *)(v7 - 8);
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 352) = swift_task_alloc();
  *(void *)(v3 + 144) = a2;
  *(void *)(v3 + 152) = v2;
  return MEMORY[0x270FA2498](RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:), 0);
}

uint64_t RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v71 = v0;
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v59 = *(void *)(v0 + 336);
  uint64_t v60 = *(void *)(v0 + 328);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v61(v1, v2, v60);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v62 = *(unsigned int *)(v0 + 388);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v65 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v64, v63))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v55 = createStorage<A>(capacity:type:)(0);
    uint64_t v56 = createStorage<A>(capacity:type:)(0);
    *(void *)(v58 + 176) = buf;
    *(void *)(v58 + 184) = v55;
    *(void *)(v58 + 192) = v56;
    serialize(_:at:)(0, (unsigned char **)(v58 + 176));
    serialize(_:at:)(0, (unsigned char **)(v58 + 176));
    *(void *)(v58 + 200) = v65;
    uint64_t v57 = (void *)swift_task_alloc();
    v57[2] = v58 + 176;
    v57[3] = v58 + 184;
    v57[4] = v58 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v64, v63, "#RequestPaymentNeedsValueStrategy makePromptForValue", buf, v62);
    destroyStorage<A>(_:count:)(v55, 0, v53);
    destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v58 + 352);
  uint64_t v45 = *(void *)(v58 + 328);
  uint64_t v48 = *(void *)(v58 + 320);
  uint64_t v49 = *(void *)(v58 + 304);
  uint64_t v43 = *(void *)(v58 + 336);
  uint64_t v47 = *(void *)(v58 + 312);

  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v46(v44, v45);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v50(v48, v49);
  v4.SiriPaymentsIntents::RequestPaymentSlots value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::RequestPaymentSlots value = v4.value;
  *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v58 + 386) = v4;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    uint64_t v10 = *(void *)(v58 + 344);
    uint64_t v26 = *(void *)(v58 + 328);
    uint64_t v30 = *(void *)(v58 + 256);
    uint64_t v31 = *(void *)(v58 + 232);
    uint64_t v28 = *(void *)(v58 + 216);
    uint64_t v27 = *(void *)(v58 + 240);
    uint64_t v11 = Logger.payments.unsafeMutableAddressor();
    v61(v10, v11, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v30, v28, v31);
    unint64_t v29 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v33 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v33 + v29, v30, v31);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    *(void *)(v58 + 168) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v58 + 392);
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 32;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 8;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = partial apply for implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v34 + 24) = v33;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v37 + 24) = v34;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v38 = v12;
    swift_retain();
    *uint64_t v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v40))
    {
      uint64_t v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = createStorage<A>(capacity:type:)(1);
      uint64_t v66 = v23;
      uint64_t v67 = v24;
      uint64_t v68 = v25;
      serialize(_:at:)(2, &v66);
      serialize(_:at:)(1, &v66);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v70 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
      _os_log_impl(&dword_25D85A000, oslog, v40, "#RequestPaymentNeedsValueFlowStrategy unknown parameter: %s", v23, size);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v23, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v16 = *(void *)(v58 + 344);
    uint64_t v17 = *(void *)(v58 + 328);
    uint64_t v18 = *(void *)(v58 + 320);
    uint64_t v19 = *(void *)(v58 + 304);

    v46(v16, v17);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v21 = ParameterIdentifier.name.getter();
    uint64_t v20 = v13;
    v50(v18, v19);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v20;
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 40) = 0;
    *(unsigned char *)(v14 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(*(void *)(v58 + 136) + 8);
    return v15();
  }
  else
  {
    uint64_t v42 = *(void *)(v58 + 272);
    uint64_t v41 = *(void *)(v58 + 224);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v58 + 384) = v4;
    swift_retain();
    *(void *)(v58 + 360) = *(void *)(v41 + 16);
    swift_retain();
    swift_release();
    *(unsigned char *)(v58 + 385) = value;
    lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
    lazy protocol witness table accessor for type RequestPaymentSlots and conformance RequestPaymentSlots();
    Slot<>.propertyName.getter((uint64_t)&type metadata for RequestPaymentSlots, (uint64_t)&protocol witness table for RequestPaymentSlots);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 56))(v42, 0, 1);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v58 + 368) = v6;
    *uint64_t v6 = *(void *)(v58 + 136);
    v6[1] = RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    uint64_t v7 = *(void *)(v58 + 296);
    uint64_t v8 = *(void *)(v58 + 272);
    return RequestPaymentCATs.promptForSlotValue(slot:)(v7, v8);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  SiriPaymentsIntents::RequestPaymentSlots_optional v4 = (void *)*v1;
  v4[17] = *v1;
  v4[47] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[34]);
    swift_release();
    uint64_t v2 = RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v7 = *(unsigned __int8 *)(v0 + 386);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v8 = *(uint64_t **)(v0 + 208);
  *(void *)(v0 + 136) = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, v0 + 16);
  swift_release();
  uint64_t v5 = *(void *)(v0 + 40);
  SiriPaymentsIntents::RequestPaymentSlots_optional v4 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  static PaymentsContextProvider.needsValueContextUpdate(value:)(v7, v12);
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v12, 0, 1);
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  void v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 96);
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 136) = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v2();
}

uint64_t implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)&v2 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v8 = ParameterIdentifier.name.getter();
  uint64_t v9 = v0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  return v8;
}

uint64_t RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 568) = v3;
  *(void *)(v4 + 560) = a3;
  *(void *)(v4 + 552) = a2;
  *(void *)(v4 + 544) = a1;
  *(void *)(v4 + 264) = v4;
  *(void *)(v4 + 272) = 0;
  *(void *)(v4 + 280) = 0;
  *(void *)(v4 + 288) = 0;
  *(unsigned char *)(v4 + 840) = 0;
  *(void *)(v4 + 368) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 448) = 0;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  *(void *)(v4 + 576) = v5;
  uint64_t v12 = *(void *)(v5 - 8);
  *(void *)(v4 + 584) = v12;
  *(void *)(v4 + 592) = *(void *)(v12 + 64);
  *(void *)(v4 + 600) = swift_task_alloc();
  *(void *)(v4 + 608) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  *(void *)(v4 + 616) = v6;
  *(void *)(v4 + 624) = *(void *)(v6 - 8);
  *(void *)(v4 + 632) = swift_task_alloc();
  *(void *)(v4 + 640) = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  *(void *)(v4 + 648) = v7;
  uint64_t v13 = *(void *)(v7 - 8);
  *(void *)(v4 + 656) = v13;
  *(void *)(v4 + 664) = *(void *)(v13 + 64);
  *(void *)(v4 + 672) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Input();
  *(void *)(v4 + 680) = v8;
  uint64_t v14 = *(void *)(v8 - 8);
  *(void *)(v4 + 688) = v14;
  *(void *)(v4 + 696) = *(void *)(v14 + 64);
  *(void *)(v4 + 704) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 712) = v9;
  *(void *)(v4 + 720) = *(void *)(v9 - 8);
  *(void *)(v4 + 728) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v4 + 736) = v10;
  *(void *)(v4 + 744) = *(void *)(v10 - 8);
  *(void *)(v4 + 752) = swift_task_alloc();
  *(void *)(v4 + 760) = swift_task_alloc();
  *(void *)(v4 + 768) = swift_task_alloc();
  *(void *)(v4 + 776) = swift_task_alloc();
  *(void *)(v4 + 784) = swift_task_alloc();
  *(void *)(v4 + 792) = swift_task_alloc();
  *(void *)(v4 + 800) = swift_task_alloc();
  *(void *)(v4 + 808) = swift_task_alloc();
  *(void *)(v4 + 816) = swift_task_alloc();
  *(void *)(v4 + 824) = swift_task_alloc();
  *(void *)(v4 + 832) = swift_task_alloc();
  *(void *)(v4 + 272) = a2;
  *(void *)(v4 + 280) = a3;
  *(void *)(v4 + 288) = v3;
  return MEMORY[0x270FA2498](RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:), 0);
}

uint64_t RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v352 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = *(void *)(v1 + 832);
  uint64_t v298 = *(void *)(v1 + 744);
  uint64_t v299 = *(void *)(v1 + 736);
  *(void *)(v1 + 264) = v1;
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v300 = *(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 16);
  v300(v2, v3, v299);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v302 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 296) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v1 + 844);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v304 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v302))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v295 = createStorage<A>(capacity:type:)(0);
    uint64_t v296 = createStorage<A>(capacity:type:)(0);
    *(void *)(v1 + 512) = buf;
    *(void *)(v1 + 520) = v295;
    *(void *)(v1 + 528) = v296;
    serialize(_:at:)(0, (unsigned char **)(v1 + 512));
    serialize(_:at:)(0, (unsigned char **)(v1 + 512));
    *(void *)(v1 + 536) = v304;
    uint64_t v297 = (void *)swift_task_alloc();
    v297[2] = v1 + 512;
    v297[3] = v1 + 520;
    v297[4] = v1 + 528;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v302, "#RequestPaymentNeedsValueStrategy parseValueResponse.", buf, size);
    destroyStorage<A>(_:count:)(v295, 0, v293);
    destroyStorage<A>(_:count:)(v296, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v284 = *(void *)(v1 + 832);
  uint64_t v285 = *(void *)(v1 + 736);
  uint64_t v288 = *(void *)(v1 + 728);
  uint64_t v289 = *(void *)(v1 + 712);
  uint64_t v283 = *(void *)(v1 + 744);
  uint64_t v287 = *(void *)(v1 + 720);

  unint64_t v286 = *(void (**)(uint64_t, uint64_t))(v283 + 8);
  v286(v284, v285);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  uint64_t v290 = *(void (**)(uint64_t, uint64_t))(v287 + 8);
  v290(v288, v289);
  v5.SiriPaymentsIntents::RequestPaymentSlots value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::RequestPaymentSlots value = v5.value;
  if (v5.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    uint64_t v43 = *(void *)(v1 + 752);
    uint64_t v61 = *(void *)(v1 + 736);
    uint64_t v65 = *(void *)(v1 + 672);
    uint64_t v66 = *(void *)(v1 + 648);
    uint64_t v63 = *(void *)(v1 + 560);
    uint64_t v62 = *(void *)(v1 + 656);
    uint64_t v44 = Logger.payments.unsafeMutableAddressor();
    v300(v43, v44, v61);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v65, v63, v66);
    unint64_t v64 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    uint64_t v68 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))(v68 + v64, v65, v66);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    *(void *)(v1 + 304) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v67 = *(_DWORD *)(v1 + 848);
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = 32;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 8;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = partial apply for implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v69 + 24) = v68;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v72 + 24) = v69;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v73 = v45;
    swift_retain();
    *uint64_t v73 = partial apply for closure #1 in OSLogArguments.append(_:);
    v73[1] = v70;
    swift_retain();
    v73[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v73[3] = v71;
    swift_retain();
    v73[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v73[5] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v58 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v59 = createStorage<A>(capacity:type:)(0);
      uint64_t v60 = createStorage<A>(capacity:type:)(1);
      uint64_t v305 = v58;
      uint64_t v306 = v59;
      uint64_t v307 = v60;
      serialize(_:at:)(2, &v305);
      serialize(_:at:)(1, &v305);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      uint64_t v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v309 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v305, (uint64_t)&v306, (uint64_t)&v307);
      _os_log_impl(&dword_25D85A000, v74, v75, "#RequestPaymentNeedsValueStrategy unknown parameter: %s", v58, v67);
      destroyStorage<A>(_:count:)(v59, 0, v57);
      destroyStorage<A>(_:count:)(v60, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v58, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v55 = *(void *)(v1 + 752);
    uint64_t v51 = *(void *)(v1 + 736);
    uint64_t v56 = *(void *)(v1 + 728);
    uint64_t v52 = *(void *)(v1 + 712);

    v286(v55, v51);
    ParameterResolutionRecord.parameter.getter();
    uint64_t v54 = ParameterIdentifier.name.getter();
    uint64_t v53 = v46;
    v290(v56, v52);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v47 = v54;
    *(void *)(v47 + 8) = v53;
    *(void *)(v47 + 16) = 0;
    *(void *)(v47 + 24) = 0;
    *(void *)(v47 + 32) = 0;
    *(void *)(v47 + 40) = 0;
    *(unsigned char *)(v47 + 48) = 14;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
    return v48();
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + 824);
    uint64_t v268 = *(void *)(v1 + 736);
    uint64_t v272 = *(void *)(v1 + 704);
    uint64_t v273 = *(void *)(v1 + 680);
    uint64_t v270 = *(void *)(v1 + 552);
    uint64_t v269 = *(void *)(v1 + 688);
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v1 + 840) = v5;
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    v300(v6, v7, v268);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v269 + 16))(v272, v270, v273);
    unint64_t v271 = (*(unsigned __int8 *)(v269 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80);
    uint64_t v275 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v269 + 32))(v275 + v271, v272, v273);
    log = Logger.logObject.getter();
    os_log_type_t v282 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 312) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v274 = *(_DWORD *)(v1 + 852);
    uint64_t v277 = swift_allocObject();
    *(unsigned char *)(v277 + 16) = 32;
    uint64_t v278 = swift_allocObject();
    *(unsigned char *)(v278 + 16) = 8;
    uint64_t v276 = swift_allocObject();
    *(void *)(v276 + 16) = partial apply for implicit closure #2 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    *(void *)(v276 + 24) = v275;
    uint64_t v279 = swift_allocObject();
    *(void *)(v279 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v279 + 24) = v276;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v280 = v8;
    swift_retain();
    *uint64_t v280 = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[1] = v277;
    swift_retain();
    v280[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[3] = v278;
    swift_retain();
    v280[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v280[5] = v279;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v282))
    {
      uint64_t v265 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v266 = createStorage<A>(capacity:type:)(0);
      uint64_t v267 = createStorage<A>(capacity:type:)(1);
      uint64_t v347 = v265;
      uint64_t v348 = v266;
      uint64_t v349 = v267;
      serialize(_:at:)(2, &v347);
      serialize(_:at:)(1, &v347);
      unint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v277;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      unint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v278;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      unint64_t v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v351 = v279;
      closure #1 in osLogInternal(_:log:type:)(&v350, (uint64_t)&v347, (uint64_t)&v348, (uint64_t)&v349);
      _os_log_impl(&dword_25D85A000, log, v282, "#RequestPaymentNeedsValueStrategy Parse: %s", v265, v274);
      destroyStorage<A>(_:count:)(v266, 0, v264);
      destroyStorage<A>(_:count:)(v267, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v265, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v246 = *(void *)(v1 + 824);
    uint64_t v9 = *(void *)(v1 + 816);
    uint64_t v247 = *(void *)(v1 + 736);
    uint64_t v252 = *(void *)(v1 + 672);
    uint64_t v253 = *(void *)(v1 + 648);
    uint64_t v249 = *(void *)(v1 + 560);
    uint64_t v248 = *(void *)(v1 + 656);

    v286(v246, v247);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v300(v9, v10, v247);
    unint64_t v250 = *(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 16);
    v250(v252, v249, v253);
    int v251 = *(_DWORD *)(v248 + 80);
    uint64_t v256 = swift_allocObject();
    uint64_t v254 = *(void (**)(unint64_t, uint64_t, uint64_t))(v248 + 32);
    v254(v256 + ((v251 + 16) & ~(unint64_t)v251), v252, v253);
    uint64_t v262 = Logger.logObject.getter();
    os_log_type_t v263 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 320) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v255 = *(_DWORD *)(v1 + 856);
    uint64_t v258 = swift_allocObject();
    *(unsigned char *)(v258 + 16) = 32;
    uint64_t v259 = swift_allocObject();
    *(unsigned char *)(v259 + 16) = 8;
    uint64_t v257 = swift_allocObject();
    *(void *)(v257 + 16) = partial apply for implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:);
    *(void *)(v257 + 24) = v256;
    uint64_t v260 = swift_allocObject();
    *(void *)(v260 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v260 + 24) = v257;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v261 = v11;
    swift_retain();
    *uint64_t v261 = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[1] = v258;
    swift_retain();
    v261[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[3] = v259;
    swift_retain();
    v261[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v261[5] = v260;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v262, v263))
    {
      uint64_t v243 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v242 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v244 = createStorage<A>(capacity:type:)(0);
      uint64_t v245 = createStorage<A>(capacity:type:)(1);
      uint64_t v342 = v243;
      uint64_t v343 = v244;
      uint64_t v344 = v245;
      serialize(_:at:)(2, &v342);
      serialize(_:at:)(1, &v342);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v258;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v259;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      uint64_t v345 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v346 = v260;
      closure #1 in osLogInternal(_:log:type:)(&v345, (uint64_t)&v342, (uint64_t)&v343, (uint64_t)&v344);
      _os_log_impl(&dword_25D85A000, v262, v263, "#RequestPaymentNeedsValueStrategy parseResponseValue for slot: %s", v243, v255);
      destroyStorage<A>(_:count:)(v244, 0, v242);
      destroyStorage<A>(_:count:)(v245, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v243, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v237 = *(void *)(v1 + 816);
    uint64_t v238 = *(void *)(v1 + 736);
    uint64_t v240 = *(void *)(v1 + 640);
    uint64_t v241 = *(void *)(v1 + 616);
    uint64_t v239 = *(void *)(v1 + 624);

    v286(v237, v238);
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v239 + 88))(v240, v241) == *MEMORY[0x263F6FF70])
    {
      uint64_t v12 = *(void *)(v1 + 808);
      uint64_t v222 = *(void *)(v1 + 736);
      uint64_t v221 = *(void *)(v1 + 640);
      uint64_t v223 = *(void *)(v1 + 608);
      uint64_t v225 = *(void *)(v1 + 600);
      uint64_t v226 = *(void *)(v1 + 576);
      uint64_t v220 = *(void *)(v1 + 584);
      (*(void (**)(void))(*(void *)(v1 + 624) + 96))();
      uint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 32);
      v227(v223, v221, v226);
      *(void *)(v1 + 392) = v223;
      uint64_t v13 = Logger.payments.unsafeMutableAddressor();
      v300(v12, v13, v222);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 16))(v225, v223, v226);
      unint64_t v224 = (*(unsigned __int8 *)(v220 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80);
      uint64_t v229 = swift_allocObject();
      v227(v229 + v224, v225, v226);
      unint64_t v235 = Logger.logObject.getter();
      os_log_type_t v236 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 400) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v228 = *(_DWORD *)(v1 + 872);
      uint64_t v231 = swift_allocObject();
      *(unsigned char *)(v231 + 16) = 32;
      uint64_t v232 = swift_allocObject();
      *(unsigned char *)(v232 + 16) = 8;
      uint64_t v230 = swift_allocObject();
      *(void *)(v230 + 16) = partial apply for implicit closure #4 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
      *(void *)(v230 + 24) = v229;
      uint64_t v233 = swift_allocObject();
      *(void *)(v233 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v233 + 24) = v230;
      _allocateUninitializedArray<A>(_:)();
      unint64_t v234 = v14;
      swift_retain();
      void *v234 = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[1] = v231;
      swift_retain();
      v234[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[3] = v232;
      swift_retain();
      v234[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v234[5] = v233;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v235, v236))
      {
        uint64_t v217 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v218 = createStorage<A>(capacity:type:)(0);
        uint64_t v219 = createStorage<A>(capacity:type:)(1);
        unint64_t v337 = v217;
        uint64_t v338 = v218;
        uint64_t v339 = v219;
        serialize(_:at:)(2, &v337);
        serialize(_:at:)(1, &v337);
        uint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        uint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v232;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        uint64_t v340 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v341 = v233;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v337, (uint64_t)&v338, (uint64_t)&v339);
        _os_log_impl(&dword_25D85A000, v235, v236, "#RequestPaymentNeedsValueStrategy parseResponseValue, directInvocation: %s", v217, v228);
        destroyStorage<A>(_:count:)(v218, 0, v216);
        destroyStorage<A>(_:count:)(v219, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v217, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v211 = *(void *)(v1 + 808);
      uint64_t v212 = *(void *)(v1 + 736);

      v286(v211, v212);
      uint64_t v213 = Parse.DirectInvocation.identifier.getter();
      uint64_t v214 = v15;
      swift_bridgeObjectRetain();
      PaymentsDirectInvocations.Identifiers.rawValue.getter(3);
      swift_bridgeObjectRetain();
      uint64_t v325 = v213;
      uint64_t v326 = v214;
      char v215 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v215)
      {
        swift_bridgeObjectRelease();
        if (Parse.DirectInvocation.userData.getter())
        {
          *(void *)(v1 + 248) = PaymentsDirectInvocations.Keys.rawValue.getter(1);
          *(void *)(v1 + 256) = v16;
          MEMORY[0x2611B90F0]();
          outlined destroy of String.UTF8View();
          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)(v1 + 216) = 0;
          *(void *)(v1 + 224) = 0;
          *(void *)(v1 + 232) = 0;
          *(void *)(v1 + 240) = 0;
        }
        if (*(void *)(v1 + 240))
        {
          type metadata accessor for INPerson();
          if (swift_dynamicCast()) {
            uint64_t v210 = *(void **)(v1 + 504);
          }
          else {
            uint64_t v210 = 0;
          }
          uint64_t v209 = v210;
        }
        else
        {
          outlined destroy of FlowActivity?(v1 + 216);
          uint64_t v209 = 0;
        }
        uint64_t v20 = *(void *)(v1 + 792);
        uint64_t v184 = *(void *)(v1 + 736);
        *(void *)(v1 + 448) = v209;
        uint64_t v21 = Logger.payments.unsafeMutableAddressor();
        v300(v20, v21, v184);
        id v22 = v209;
        uint64_t v186 = swift_allocObject();
        *(void *)(v186 + 16) = v209;
        default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
        swift_bridgeObjectRelease();
        uint64_t v191 = Logger.logObject.getter();
        os_log_type_t v192 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 456) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v185 = *(_DWORD *)(v1 + 880);
        uint64_t v187 = swift_allocObject();
        *(unsigned char *)(v187 + 16) = 64;
        uint64_t v188 = swift_allocObject();
        *(unsigned char *)(v188 + 16) = 8;
        uint64_t v189 = swift_allocObject();
        *(void *)(v189 + 16) = partial apply for implicit closure #5 in SendPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v189 + 24) = v186;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v190 = v23;
        swift_retain();
        *uint64_t v190 = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[1] = v187;
        swift_retain();
        v190[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[3] = v188;
        swift_retain();
        v190[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v190[5] = v189;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v191, v192))
        {
          int v181 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v182 = createStorage<A>(capacity:type:)(1);
          uint64_t v183 = createStorage<A>(capacity:type:)(0);
          uint64_t v332 = v181;
          uint64_t v333 = v182;
          uint64_t v334 = v183;
          serialize(_:at:)(2, &v332);
          serialize(_:at:)(1, &v332);
          unint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v187;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          unint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v188;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          unint64_t v335 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v336 = v189;
          closure #1 in osLogInternal(_:log:type:)(&v335, (uint64_t)&v332, (uint64_t)&v333, (uint64_t)&v334);
          _os_log_impl(&dword_25D85A000, v191, v192, "#RequestPaymentNeedsValueStrategy Received payer value %@ from DirectInvocation", v181, v185);
          destroyStorage<A>(_:count:)(v182, 1, v180);
          destroyStorage<A>(_:count:)(v183, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v181, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v171 = *(void *)(v1 + 792);
        uint64_t v172 = *(void *)(v1 + 784);
        uint64_t v175 = *(void *)(v1 + 736);

        v286(v171, v175);
        id v174 = (id)ParameterResolutionRecord.intent.getter();
        id v24 = v209;
        uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
        id v173 = (id)MEMORY[0x2611B9130](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v174, sel_setValue_forKeyPath_, v209, v173);

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v26 = Logger.payments.unsafeMutableAddressor();
        v300(v172, v26, v175);
        uint64_t v178 = Logger.logObject.getter();
        os_log_type_t v177 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 464) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v176 = *(_DWORD *)(v1 + 884);
        uint64_t v179 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v178, v177))
        {
          uint64_t v167 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v168 = createStorage<A>(capacity:type:)(0);
          uint64_t v169 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 472) = v167;
          *(void *)(v1 + 480) = v168;
          *(void *)(v1 + 488) = v169;
          serialize(_:at:)(0, (unsigned char **)(v1 + 472));
          serialize(_:at:)(0, (unsigned char **)(v1 + 472));
          *(void *)(v1 + 496) = v179;
          uint64_t v170 = (void *)swift_task_alloc();
          v170[2] = v1 + 472;
          v170[3] = v1 + 480;
          v170[4] = v1 + 488;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v178, v177, "#RequestPaymentNeedsValueStrategy Returning successful IntentPromptAnswer", v167, v176);
          destroyStorage<A>(_:count:)(v168, 0, v166);
          destroyStorage<A>(_:count:)(v169, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v167, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v158 = *(void *)(v1 + 784);
        uint64_t v159 = *(void *)(v1 + 736);
        uint64_t v164 = *(void *)(v1 + 608);
        uint64_t v165 = *(void *)(v1 + 576);
        uint64_t v162 = *(void *)(v1 + 544);
        uint64_t v163 = *(void *)(v1 + 584);

        v286(v158, v159);
        id v160 = (id)ParameterResolutionRecord.intent.getter();
        *(void *)(v1 + 200) = &type metadata for RequestPaymentSlots;
        *(void *)(v1 + 208) = &protocol witness table for RequestPaymentSlots;
        *(unsigned char *)(v1 + 176) = value;
        unint64_t v161 = type metadata accessor for INRequestPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((void *)(v1 + 176), v161, &v331);
        __swift_destroy_boxed_opaque_existential_0(v1 + 176);

        ParameterResolutionRecord.intent.getter();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 56))(v162, 0, 1);
        (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v164, v165);
      }
      else
      {
        uint64_t v17 = *(void *)(v1 + 800);
        uint64_t v204 = *(void *)(v1 + 736);
        swift_bridgeObjectRelease();
        uint64_t v18 = Logger.payments.unsafeMutableAddressor();
        v300(v17, v18, v204);
        uint64_t v207 = Logger.logObject.getter();
        os_log_type_t v206 = static os_log_type_t.error.getter();
        *(void *)(v1 + 408) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v205 = *(_DWORD *)(v1 + 876);
        uint64_t v208 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v207, v206))
        {
          uint64_t v200 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v201 = createStorage<A>(capacity:type:)(0);
          uint64_t v202 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 416) = v200;
          *(void *)(v1 + 424) = v201;
          *(void *)(v1 + 432) = v202;
          serialize(_:at:)(0, (unsigned char **)(v1 + 416));
          serialize(_:at:)(0, (unsigned char **)(v1 + 416));
          *(void *)(v1 + 440) = v208;
          unsigned int v203 = (void *)swift_task_alloc();
          v203[2] = v1 + 416;
          v203[3] = v1 + 424;
          v203[4] = v1 + 432;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v207, v206, "#RequestPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Direct Invocation. Reprompt with previous state", v200, v205);
          destroyStorage<A>(_:count:)(v201, 0, v199);
          destroyStorage<A>(_:count:)(v202, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v200, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v193 = *(void *)(v1 + 800);
        uint64_t v194 = *(void *)(v1 + 736);
        uint64_t v197 = *(void *)(v1 + 608);
        uint64_t v198 = *(void *)(v1 + 576);
        uint64_t v195 = *(void *)(v1 + 544);
        uint64_t v196 = *(void *)(v1 + 584);

        v286(v193, v194);
        uint64_t v327 = 0;
        uint64_t v328 = 0;
        uint64_t v329 = 0;
        uint64_t v330 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INRequestPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 56))(v195, 0, 1);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v197, v198);
      }
    }
    else
    {
      uint64_t v154 = *(void *)(v1 + 632);
      uint64_t v155 = *(void *)(v1 + 616);
      uint64_t v151 = *(void *)(v1 + 568);
      uint64_t v153 = *(void *)(v1 + 624);
      Input.parse.getter();
      id v152 = (id)ParameterResolutionRecord.intent.getter();
      swift_retain();
      outlined init with copy of GlobalsProviding(v151 + 104, v1 + 16);
      swift_release();
      uint64_t v150 = *(void *)(v1 + 40);
      uint64_t v149 = *(void *)(v1 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v150);
      (*(void (**)(uint64_t))(v149 + 24))(v150);
      swift_retain();
      outlined init with copy of GlobalsProviding(v151 + 64, v1 + 96);
      swift_release();
      id v157 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v152, (uint64_t)&protocol witness table for INRequestPaymentIntent, v1 + 56, v1 + 96);
      __swift_destroy_boxed_opaque_existential_0(v1 + 96);
      __swift_destroy_boxed_opaque_existential_0(v1 + 56);
      __swift_destroy_boxed_opaque_existential_0(v1 + 16);

      uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
      v156(v154, v155);
      if (v157)
      {
        self;
        uint64_t v148 = swift_dynamicCastObjCClass();
        if (v148)
        {
          uint64_t v147 = (void *)v148;
        }
        else
        {

          uint64_t v147 = 0;
        }
        uint64_t v146 = v147;
      }
      else
      {
        uint64_t v146 = 0;
      }
      if (v146)
      {
        uint64_t v28 = *(void *)(v1 + 776);
        uint64_t v136 = *(void *)(v1 + 736);
        *(void *)(v1 + 368) = v146;
        uint64_t v29 = Logger.payments.unsafeMutableAddressor();
        v300(v28, v29, v136);
        id v30 = v146;
        uint64_t v138 = swift_allocObject();
        *(void *)(v138 + 16) = v146;
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 376) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v137 = *(_DWORD *)(v1 + 864);
        uint64_t v140 = swift_allocObject();
        *(unsigned char *)(v140 + 16) = 64;
        uint64_t v141 = swift_allocObject();
        *(unsigned char *)(v141 + 16) = 8;
        uint64_t v139 = swift_allocObject();
        *(void *)(v139 + 16) = partial apply for implicit closure #4 in SearchForAccountsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v139 + 24) = v138;
        uint64_t v142 = swift_allocObject();
        *(void *)(v142 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(void *)(v142 + 24) = v139;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v143 = v31;
        swift_retain();
        *uint64_t v143 = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[1] = v140;
        swift_retain();
        v143[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[3] = v141;
        swift_retain();
        v143[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v143[5] = v142;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v144, v145))
        {
          uint64_t v133 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v134 = createStorage<A>(capacity:type:)(1);
          uint64_t v135 = createStorage<A>(capacity:type:)(0);
          v320 = v133;
          uint64_t v321 = v134;
          uint64_t v322 = v135;
          serialize(_:at:)(2, &v320);
          serialize(_:at:)(1, &v320);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v140;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v141;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          v323 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v324 = v142;
          closure #1 in osLogInternal(_:log:type:)(&v323, (uint64_t)&v320, (uint64_t)&v321, (uint64_t)&v322);
          _os_log_impl(&dword_25D85A000, v144, v145, "#RequestPaymentNeedsValueStrategy Converted PaymentsIntent to SiriKit intent: %@", v133, v137);
          destroyStorage<A>(_:count:)(v134, 1, v132);
          destroyStorage<A>(_:count:)(v135, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v133, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v130 = *(void *)(v1 + 776);
        uint64_t v131 = *(void *)(v1 + 736);

        v286(v130, v131);
        if (value)
        {
          if (value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
          {
            id v126 = (id)ParameterResolutionRecord.intent.getter();
            id v125 = objc_msgSend(v146, sel_currencyAmount);
            uint64_t v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyAmount", 0xEuLL, 1)._countAndFlagsBits;
            id v124 = (id)MEMORY[0x2611B9130](v33);
            swift_bridgeObjectRelease();
            objc_msgSend(v126, sel_setValue_forKeyPath_, v125, v124);

            swift_unknownObjectRelease();
          }
          else
          {
            id v122 = (id)ParameterResolutionRecord.intent.getter();
            id v123 = objc_msgSend(v146, sel_note);
            if (v123)
            {
              uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v119 = v34;

              uint64_t v120 = v118;
              uint64_t v121 = v119;
            }
            else
            {
              uint64_t v120 = 0;
              uint64_t v121 = 0;
            }
            if (v121)
            {
              uint64_t v116 = MEMORY[0x2611B9130](v120);
              swift_bridgeObjectRelease();
              uint64_t v117 = v116;
            }
            else
            {
              uint64_t v117 = 0;
            }
            uint64_t v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1)._countAndFlagsBits;
            id v115 = (id)MEMORY[0x2611B9130](v35);
            swift_bridgeObjectRelease();
            objc_msgSend(v122, sel_setValue_forKeyPath_, v117, v115);

            swift_unknownObjectRelease();
          }
        }
        else
        {
          id v129 = (id)ParameterResolutionRecord.intent.getter();
          id v128 = objc_msgSend(v146, sel_payer);
          uint64_t v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("payer", 5uLL, 1)._countAndFlagsBits;
          id v127 = (id)MEMORY[0x2611B9130](v32);
          swift_bridgeObjectRelease();
          objc_msgSend(v129, sel_setValue_forKeyPath_, v128, v127);

          swift_unknownObjectRelease();
        }
        uint64_t v36 = *(void *)(v1 + 768);
        uint64_t v102 = *(void *)(v1 + 736);
        uint64_t v104 = *(void *)(v1 + 672);
        uint64_t v105 = *(void *)(v1 + 648);
        uint64_t v103 = *(void *)(v1 + 560);
        uint64_t v37 = Logger.payments.unsafeMutableAddressor();
        v300(v36, v37, v102);
        v250(v104, v103, v105);
        uint64_t v107 = swift_allocObject();
        v254(v107 + ((v251 + 16) & ~(unint64_t)v251), v104, v105);
        unint64_t v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 384) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v106 = *(_DWORD *)(v1 + 868);
        uint64_t v109 = swift_allocObject();
        *(unsigned char *)(v109 + 16) = 32;
        uint64_t v110 = swift_allocObject();
        *(unsigned char *)(v110 + 16) = 8;
        uint64_t v108 = swift_allocObject();
        *(void *)(v108 + 16) = partial apply for implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
        *(void *)(v108 + 24) = v107;
        uint64_t v111 = swift_allocObject();
        *(void *)(v111 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v111 + 24) = v108;
        _allocateUninitializedArray<A>(_:)();
        unint64_t v112 = v38;
        swift_retain();
        *unint64_t v112 = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[1] = v109;
        swift_retain();
        void v112[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[3] = v110;
        swift_retain();
        v112[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v112[5] = v111;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v99 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v100 = createStorage<A>(capacity:type:)(0);
          uint64_t v101 = createStorage<A>(capacity:type:)(1);
          v315 = v99;
          uint64_t v316 = v100;
          uint64_t v317 = v101;
          serialize(_:at:)(2, &v315);
          serialize(_:at:)(1, &v315);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v109;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v110;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v319 = v111;
          closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)&v315, (uint64_t)&v316, (uint64_t)&v317);
          _os_log_impl(&dword_25D85A000, v113, v114, "#RequestPaymentNeedsValueStrategy Returning intent: %s", v99, v106);
          destroyStorage<A>(_:count:)(v100, 0, v98);
          destroyStorage<A>(_:count:)(v101, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v99, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v91 = *(void *)(v1 + 768);
        uint64_t v92 = *(void *)(v1 + 736);
        uint64_t v96 = *(void *)(v1 + 640);
        uint64_t v97 = *(void *)(v1 + 616);
        uint64_t v95 = *(void *)(v1 + 544);

        v286(v91, v92);
        id v93 = (id)ParameterResolutionRecord.intent.getter();
        *(void *)(v1 + 160) = &type metadata for RequestPaymentSlots;
        *(void *)(v1 + 168) = &protocol witness table for RequestPaymentSlots;
        *(unsigned char *)(v1 + 136) = value;
        unint64_t v94 = type metadata accessor for INRequestPaymentIntent();
        SiriKitPaymentsIntent.value(forSlot:)((void *)(v1 + 136), v94, &v314);
        __swift_destroy_boxed_opaque_existential_0(v1 + 136);

        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 56))(v95, 0, 1);
        v156(v96, v97);
      }
      else
      {
        uint64_t v40 = *(void *)(v1 + 760);
        uint64_t v86 = *(void *)(v1 + 736);
        uint64_t v41 = Logger.payments.unsafeMutableAddressor();
        v300(v40, v41, v86);
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        *(void *)(v1 + 328) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v87 = *(_DWORD *)(v1 + 860);
        uint64_t v90 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v89, v88))
        {
          uint64_t v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v83 = createStorage<A>(capacity:type:)(0);
          uint64_t v84 = createStorage<A>(capacity:type:)(0);
          *(void *)(v1 + 336) = v82;
          *(void *)(v1 + 344) = v83;
          *(void *)(v1 + 352) = v84;
          serialize(_:at:)(0, (unsigned char **)(v1 + 336));
          serialize(_:at:)(0, (unsigned char **)(v1 + 336));
          *(void *)(v1 + 360) = v90;
          uint64_t v85 = (void *)swift_task_alloc();
          v85[2] = v1 + 336;
          v85[3] = v1 + 344;
          v85[4] = v1 + 352;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v89, v88, "#RequestPaymentNeedsValueStrategy parseResponseValue failed to interpret user response as expected Send response. Reprompt with previous state", v82, v87);
          destroyStorage<A>(_:count:)(v83, 0, v81);
          destroyStorage<A>(_:count:)(v84, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v82, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v76 = *(void *)(v1 + 760);
        uint64_t v77 = *(void *)(v1 + 736);
        uint64_t v79 = *(void *)(v1 + 640);
        uint64_t v80 = *(void *)(v1 + 616);
        uint64_t v78 = *(void *)(v1 + 544);

        v286(v76, v77);
        uint64_t v310 = 0;
        uint64_t v311 = 0;
        uint64_t v312 = 0;
        uint64_t v313 = 0;
        ParameterResolutionRecord.intent.getter();
        type metadata accessor for INRequestPaymentIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INRequestPaymentIntent>);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 56))(v78, 0, 1);
        v156(v79, v80);
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
    return v50();
  }
}

uint64_t implicit closure #2 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v4 = type metadata accessor for Parse();
  unint64_t v2 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t RequestPaymentNeedsValueStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return RequestPaymentNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentNeedsValueStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  uint64_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance RequestPaymentNeedsValueStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RequestPaymentNeedsValueStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66308](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  *uint64_t v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66310](a1, a2, v6, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance RequestPaymentNeedsValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = v7;
  *(void *)(v7 + 16) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v8;
  uint64_t v9 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  *uint64_t v8 = *(void *)(v11 + 16);
  v8[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v9, a7);
}

uint64_t sub_25DA0C47C()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);

  return implicit closure #1 in RequestPaymentNeedsValueStrategy.makePromptForValue(resolveRecord:)();
}

uint64_t sub_25DA0C5B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C5E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C610()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C650()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C690()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DA0C760()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C78C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C7B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C7F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C838()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  type metadata accessor for Input();

  return implicit closure #2 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_25DA0C96C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C998()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0C9C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CA04()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CA44()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DA0CB14()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CB40()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CB6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CBAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CBEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CC2C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CC58()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CC84()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CCC4()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CD04()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);

  return implicit closure #7 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)();
}

uint64_t sub_25DA0CE40()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CE6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CE98()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CED8()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0CF18()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #4 in RequestPaymentNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(v2);
}

uint64_t sub_25DA0D04C()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D078()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D0A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D0E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D124()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D164()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D190()
{
  return swift_deallocObject();
}

uint64_t sub_25DA0D1BC()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentNeedsValueStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentNeedsValueStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentNeedsValueStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in RequestPaymentNeedsValueStrategy()
{
  return lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy();
}

uint64_t static PaymentIntentCATResponseCode.from(_:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
      case 1:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("READY", 5uLL, 1)._countAndFlagsBits;
      case 2:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IN_PROGRESS", 0xBuLL, 1)._countAndFlagsBits;
      case 3:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SUCCESS", 7uLL, 1)._countAndFlagsBits;
      case 4:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FAILURE", 7uLL, 1)._countAndFlagsBits;
      case 5:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("REQUIRING_APP_LAUNCH", 0x14uLL, 1)._countAndFlagsBits;
      case 6:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
      case 7:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_BELOW_MINIMUM", 0x1DuLL, 1)._countAndFlagsBits;
      case 8:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_ABOVE_MAXIMUM", 0x1DuLL, 1)._countAndFlagsBits;
      case 9:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_CURRENCY_UNSUPPORTED", 0x1DuLL, 1)._countAndFlagsBits;
      case 10:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSUFFICIENT_FUNDS", 0x12uLL, 1)._countAndFlagsBits;
      case 11:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BANK_ACCOUNT", 0xFuLL, 1)._countAndFlagsBits;
      case 12:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NOT_ELIGIBLE", 0xCuLL, 1)._countAndFlagsBits;
      case 13:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TERMS_AND_CONDITIONS_ACCEPTANCE_REQUIRED", 0x28uLL, 1)._countAndFlagsBits;
      default:
        JUMPOUT(0);
    }
  }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

{
  char v1;
  uint64_t v2;

  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
      case 1:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("READY", 5uLL, 1)._countAndFlagsBits;
      case 2:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IN_PROGRESS", 0xBuLL, 1)._countAndFlagsBits;
      case 3:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SUCCESS", 7uLL, 1)._countAndFlagsBits;
      case 4:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FAILURE", 7uLL, 1)._countAndFlagsBits;
      case 5:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("REQUIRING_APP_LAUNCH", 0x14uLL, 1)._countAndFlagsBits;
      case 6:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
      case 7:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_BELOW_MINIMUM", 0x1DuLL, 1)._countAndFlagsBits;
      case 8:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_ABOVE_MAXIMUM", 0x1DuLL, 1)._countAndFlagsBits;
      case 9:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_CURRENCY_UNSUPPORTED", 0x1DuLL, 1)._countAndFlagsBits;
      case 10:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BANK_ACCOUNT", 0xFuLL, 1)._countAndFlagsBits;
      case 11:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NOT_ELIGIBLE", 0xCuLL, 1)._countAndFlagsBits;
      case 12:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TERMS_AND_CONDITIONS_ACCEPTANCE_REQUIRED", 0x28uLL, 1)._countAndFlagsBits;
      default:
        JUMPOUT(0);
    }
  }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

{
  switch(a1)
  {
    case 1:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_BELOW_MINIMUM", 0x1DuLL, 1)._countAndFlagsBits;
    case 2:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_AMOUNT_ABOVE_MAXIMUM", 0x1DuLL, 1)._countAndFlagsBits;
    case 3:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PAYMENTS_CURRENCY_UNSUPPORTED", 0x1DuLL, 1)._countAndFlagsBits;
    default:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
  }
}

{
  switch(a1)
  {
    case 1:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
    case 2:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BANK_ACCOUNT", 0xFuLL, 1)._countAndFlagsBits;
    case 3:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_ACCOUNT", 0xAuLL, 1)._countAndFlagsBits;
    default:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
  }
}

{
  char v1;
  uint64_t v2;

  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
      case 1:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("READY", 5uLL, 1)._countAndFlagsBits;
      case 2:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IN_PROGRESS", 0xBuLL, 1)._countAndFlagsBits;
      case 3:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SUCCESS", 7uLL, 1)._countAndFlagsBits;
      case 4:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FAILURE", 7uLL, 1)._countAndFlagsBits;
      case 5:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("REQUIRING_APP_LAUNCH", 0x14uLL, 1)._countAndFlagsBits;
      case 6:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
      case 7:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ACCOUNT_NOT_FOUND", 0x11uLL, 1)._countAndFlagsBits;
      case 8:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TERMS_AND_CONDITIONS_ACCEPTANCE_REQUIRED", 0x28uLL, 1)._countAndFlagsBits;
      case 9:
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NOT_ELIGIBLE", 0xCuLL, 1)._countAndFlagsBits;
      default:
        JUMPOUT(0);
    }
  }
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t static PaymentIntentCATResponseCode.from(_:)(unint64_t a1)
{
  if (a1 <= 1)
  {
    unint64_t v2 = a1 - 1;
    char v1 = 0;
  }
  else
  {
    unint64_t v2 = a1 - 1;
    char v1 = 1;
  }
  if (v1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNSPECIFIED", 0xBuLL, 1)._countAndFlagsBits;
  }
  switch(v2)
  {
    case 0uLL:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CREDENTIALS_UNVERIFIED", 0x16uLL, 1)._countAndFlagsBits;
      break;
    case 1uLL:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INSUFFICIENT_FUNDS", 0x12uLL, 1)._countAndFlagsBits;
      break;
    case 2uLL:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BANK_ACCOUNT", 0xFuLL, 1)._countAndFlagsBits;
      break;
    case 3uLL:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_ACCOUNT", 0xAuLL, 1)._countAndFlagsBits;
      break;
    default:
      JUMPOUT(0);
  }
  return countAndFlagsBits;
}

ValueMetadata *type metadata accessor for PaymentIntentCATResponseCode()
{
  return &type metadata for PaymentIntentCATResponseCode;
}

uint64_t CommonLabelsProvider.cancel()()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  char v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *char v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return MEMORY[0x270F675E0]();
}

uint64_t CommonLabelsProvider.cancel()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = *v3;
  uint64_t v9 = v4 + 16;
  uint64_t v5 = swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v8(v5);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 8);
    return v6(a1, a2);
  }
}

uint64_t CommonLabelsProvider.no()()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  char v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *char v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return MEMORY[0x270F675D0]();
}

uint64_t CommonLabelsProvider.yes()()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  char v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *char v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return MEMORY[0x270F675D8]();
}

uint64_t CommonLabelsProvider.openApp(_:locale:)(uint64_t a1, uint64_t a2)
{
  v2[8] = a2;
  v2[7] = a1;
  v2[4] = v2;
  v2[5] = 0;
  v2[6] = 0;
  void v2[2] = 0;
  void v2[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[5] = a1;
  v2[6] = a2;
  return MEMORY[0x270FA2498](CommonLabelsProvider.openApp(_:locale:), 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v3;
  v6[4] = *v3;
  v6[13] = v2;
  v6[14] = a1;
  v6[15] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = CommonLabelsProvider.openApp(_:locale:);
  }
  else
  {
    outlined destroy of AppDisplayInfo?(v6[9]);
    uint64_t v4 = CommonLabelsProvider.openApp(_:locale:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t CommonLabelsProvider.openApp(_:locale:)()
{
  uint64_t v8 = *(void *)(v0 + 88);
  *(void *)(v0 + 32) = v0;
  uint64_t v9 = type metadata accessor for AppDisplayInfo();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1);
  type metadata accessor for AppInformationResolver();
  swift_retain();
  AppInformationResolver.__allocating_init(app:)();
  uint64_t v11 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v12 = v1;
  swift_release();
  if (v12)
  {
    uint64_t v6 = *(void **)(v7 + 88);
    uint64_t v5 = *(const void **)(v7 + 80);
    *(void *)(v7 + 16) = v11;
    *(void *)(v7 + 24) = v12;
    App.isFirstParty.getter();
    AppDisplayInfo.init(displayName:isFirstParty:)();
    ((void (*)(const void *, void, uint64_t, uint64_t))v10)(v5, 0, 1, v9);
    outlined assign with take of AppDisplayInfo?(v5, v6);
  }
  outlined init with copy of AppDisplayInfo?(*(const void **)(v7 + 88), *(void **)(v7 + 72));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v7 + 96) = v2;
  *uint64_t v2 = *(void *)(v7 + 32);
  v2[1] = CommonLabelsProvider.openApp(_:locale:);
  uint64_t v3 = *(void *)(v7 + 72);
  return MEMORY[0x270F675F0](v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[11];
  v0[4] = v0;
  outlined destroy of AppDisplayInfo?(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0[4] + 8);
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[14];
  return v2(v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[4] = v0;
  outlined destroy of AppDisplayInfo?(v1);
  outlined destroy of AppDisplayInfo?(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

void *outlined assign with take of AppDisplayInfo?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for AppDisplayInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t protocol witness for CommonLabelsProviding.cancel() in conformance CommonLabelsProvider()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *uint64_t v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.cancel()();
}

uint64_t protocol witness for CommonLabelsProviding.no() in conformance CommonLabelsProvider()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *uint64_t v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.no()();
}

uint64_t protocol witness for CommonLabelsProviding.yes() in conformance CommonLabelsProvider()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *uint64_t v1 = *(void *)(v3 + 16);
  v1[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.yes()();
}

uint64_t protocol witness for CommonLabelsProviding.openApp(_:locale:) in conformance CommonLabelsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = CommonLabelsProvider.cancel();
  return CommonLabelsProvider.openApp(_:locale:)(a1, a2);
}

ValueMetadata *type metadata accessor for CommonLabelsProvider()
{
  return &type metadata for CommonLabelsProvider;
}

uint64_t PaymentsFlow.flowState.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v3, a1);
  return swift_endAccess();
}

void *outlined init with copy of PaymentsFlowState(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    uint64_t v2 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(void *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a2, a1, *(void *)(*(void *)(v6 - 8) + 64));
  }
  return a2;
}

uint64_t type metadata accessor for PaymentsFlowState()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsFlowState;
  if (!type metadata singleton initialization cache for PaymentsFlowState) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t PaymentsFlow.flowState.setter(uint64_t a1)
{
  uint64_t v8 = a1;
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for PaymentsFlowState() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (const void *)MEMORY[0x270FA5388](v8);
  uint64_t v5 = (char *)&v4 - v4;
  outlined init with copy of PaymentsFlowState(v2, (char *)&v4 - v4);
  uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  uint64_t v7 = &v9;
  swift_beginAccess();
  outlined assign with take of PaymentsFlowState(v5, v6);
  swift_endAccess();
  return outlined destroy of PaymentsFlowState(v8);
}

void *outlined assign with take of PaymentsFlowState(const void *a1, void *a2)
{
  if (a2 != a1)
  {
    outlined destroy of PaymentsFlowState((uint64_t)a2);
    uint64_t v4 = type metadata accessor for PaymentsFlowState();
    if (swift_getEnumCaseMultiPayload() <= 2)
    {
      uint64_t v2 = type metadata accessor for Input();
      (*(void (**)(void *, const void *))(*(void *)(v2 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a2, a1, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a2;
}

uint64_t outlined destroy of PaymentsFlowState(uint64_t a1)
{
  type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    uint64_t v1 = type metadata accessor for Input();
    (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t (*PaymentsFlow.flowState.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsFlow.__allocating_init(flowFactory:)(uint64_t a1)
{
  return PaymentsFlow.init(flowFactory:)(a1);
}

uint64_t PaymentsFlow.init(flowFactory:)(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  uint64_t v10 = 0;
  uint64_t v21 = type metadata accessor for PaymentsFlowState();
  unint64_t v9 = (*(void *)(*(void *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v22 = (char *)&v8 - v9;
  uint64_t v15 = type metadata accessor for UnlockDevicePolicy();
  uint64_t v12 = *(void *)(v15 - 8);
  uint64_t v13 = v15 - 8;
  unint64_t v11 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v8 - v11;
  uint64_t v27 = v2;
  uint64_t v26 = v1;
  uint64_t v19 = OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_restrictionGuards;
  uint64_t v18 = type metadata accessor for CommonFlowGuard();
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v16 = v3;
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v15);
  static CommonFlowGuard.disallowInSharingMode.getter();
  uint64_t v4 = v17;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v5 = v4;
  uint64_t v6 = v23;
  *(void *)(v1 + v19) = v5;
  uint64_t v20 = v25;
  outlined init with copy of GlobalsProviding(v6, (uint64_t)v25);
  outlined init with take of CommonLabelsProviding(v20, (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory));
  swift_storeEnumTagMultiPayload();
  outlined init with take of PaymentsFlowState(v22, (void *)(v1 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState));
  __swift_destroy_boxed_opaque_existential_0(v23);
  return v24;
}

void *outlined init with take of PaymentsFlowState(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for PaymentsFlowState();
  if (swift_getEnumCaseMultiPayload() <= 2)
  {
    uint64_t v2 = type metadata accessor for Input();
    (*(void (**)(void *, const void *))(*(void *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a2, a1, *(void *)(*(void *)(v6 - 8) + 64));
  }
  return a2;
}

uint64_t PaymentsFlow.on(input:)(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v102 = 0;
  uint64_t v133 = partial apply for implicit closure #1 in PaymentsFlow.on(input:);
  uint32_t v137 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v92 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v93 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v170 = 0;
  uint64_t v169 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = type metadata accessor for PaymentsFlowState();
  unint64_t v96 = (*(void *)(*(void *)(v95 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  uint64_t v97 = (char *)&v38 - v96;
  unint64_t v98 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v99 = (char *)&v38 - v98;
  unint64_t v100 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v101 = (char *)&v38 - v100;
  uint64_t v126 = type metadata accessor for Input();
  uint64_t v122 = *(void *)(v126 - 8);
  uint64_t v123 = v126 - 8;
  uint64_t v120 = v122;
  uint64_t v121 = *(void *)(v122 + 64);
  unint64_t v103 = (v121 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v102);
  id v125 = (char *)&v38 - v103;
  uint64_t v114 = type metadata accessor for Logger();
  unint64_t v112 = *(void **)(v114 - 8);
  uint64_t v113 = v114 - 8;
  uint64_t v108 = v112[8];
  unint64_t v105 = (v108 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v117);
  uint32_t v106 = (char *)&v38 - v105;
  unint64_t v107 = (v108 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v109 = (char *)&v38 - v107;
  unint64_t v110 = (v108 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v38 - v110;
  uint64_t v111 = (char *)&v38 - v110;
  uint64_t v170 = v7;
  uint64_t v169 = v9;
  uint64_t v10 = Logger.payments.unsafeMutableAddressor();
  id v115 = (void (*)(char *, uint64_t, uint64_t))v112[2];
  uint64_t v116 = v112 + 2;
  v115(v8, v10, v114);
  uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v119 = v122 + 16;
  v118(v125, v117, v126);
  unint64_t v124 = (*(unsigned __int8 *)(v120 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
  uint64_t v135 = 7;
  uint64_t v136 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v122 + 32))(v136 + v124, v125, v126);
  uint64_t v148 = Logger.logObject.getter();
  int v149 = static os_log_type_t.debug.getter();
  id v129 = &v167;
  uint64_t v167 = 12;
  unint64_t v127 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v128 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v130 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v131 = v168;
  uint64_t v132 = 17;
  uint64_t v140 = swift_allocObject();
  *(unsigned char *)(v140 + 16) = 32;
  uint64_t v142 = swift_allocObject();
  *(unsigned char *)(v142 + 16) = 8;
  uint64_t v134 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v136;
  uint64_t v138 = v11;
  *(void *)(v11 + 16) = v133;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v138;
  uint64_t v145 = v13;
  *(void *)(v13 + 16) = v137;
  *(void *)(v13 + 24) = v14;
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v143 = _allocateUninitializedArray<A>(_:)();
  uint64_t v146 = v15;
  swift_retain();
  uint64_t v16 = v140;
  uint64_t v17 = v146;
  void *v146 = v139;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v142;
  uint64_t v19 = v146;
  v146[2] = v141;
  void v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v145;
  uint64_t v21 = v146;
  v146[4] = v144;
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v148, (os_log_type_t)v149))
  {
    uint64_t v22 = v94;
    uint64_t v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v86 = createStorage<A>(capacity:type:)(0);
    uint64_t v87 = createStorage<A>(capacity:type:)(1);
    os_log_type_t v88 = v154;
    v154[0] = v85;
    uint64_t v89 = &v153;
    uint64_t v153 = v86;
    uint64_t v90 = &v152;
    uint64_t v152 = v87;
    serialize(_:at:)(2, v154);
    serialize(_:at:)(1, v88);
    uint64_t v150 = v139;
    uint64_t v151 = v140;
    closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)v88, (uint64_t)v89, (uint64_t)v90);
    uint64_t v91 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v150 = v141;
      uint64_t v151 = v142;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)v154, (uint64_t)&v153, (uint64_t)&v152);
      uint64_t v82 = 0;
      uint64_t v24 = v82;
      uint64_t v150 = v144;
      uint64_t v151 = v145;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)v154, (uint64_t)&v153, (uint64_t)&v152);
      uint64_t v81 = v24;
      _os_log_impl(&dword_25D85A000, v148, (os_log_type_t)v149, "#PaymentsFlow on(input:): %s", v85, v131);
      destroyStorage<A>(_:count:)(v86, 0, v84);
      destroyStorage<A>(_:count:)(v87, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v85, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v83 = v81;
    }
  }
  else
  {
    uint64_t v23 = v94;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v83 = v23;
  }
  uint64_t v76 = v83;

  uint64_t v77 = (void (*)(char *, uint64_t))v112[1];
  uint64_t v78 = v112 + 1;
  v77(v111, v114);
  uint64_t v79 = (const void *)(v104 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  uint64_t v80 = &v166;
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v79, v101);
  swift_endAccess();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v25 = v109;
    outlined destroy of PaymentsFlowState((uint64_t)v101);
    uint64_t v26 = Logger.payments.unsafeMutableAddressor();
    v115(v25, v26, v114);
    uint64_t v74 = Logger.logObject.getter();
    int v73 = static os_log_type_t.debug.getter();
    uint64_t v159 = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v72 = v160;
    os_log_type_t v75 = (unsigned char *)_allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v74, (os_log_type_t)v73))
    {
      uint64_t v27 = v76;
      uint64_t v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v61 = 0;
      uint64_t v63 = createStorage<A>(capacity:type:)(0);
      uint64_t v64 = createStorage<A>(capacity:type:)(v61);
      uint64_t v68 = &v157;
      id v157 = v62;
      uint64_t v69 = &v156;
      uint64_t v156 = v63;
      uint64_t v66 = &v155;
      uint64_t v155 = v64;
      unsigned int v65 = 0;
      serialize(_:at:)(0, &v157);
      serialize(_:at:)(v65, v68);
      v154[1] = v75;
      uint32_t v67 = &v38;
      MEMORY[0x270FA5388](&v38);
      uint64_t v28 = v69;
      uint64_t v29 = &v38 - 6;
      uint64_t v70 = &v38 - 6;
      v29[2] = (uint64_t)v68;
      v29[3] = (uint64_t)v28;
      v29[4] = v30;
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v27)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v74, (os_log_type_t)v73, "#PaymentsFlow moving flow states from .initialized to .runningGuardFlow", v62, v72);
        uint64_t v59 = 0;
        destroyStorage<A>(_:count:)(v63, 0, v60);
        destroyStorage<A>(_:count:)(v64, v59, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v62, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v77(v109, v114);
    v118(v99, v117, v126);
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v99, v97);
    uint64_t v56 = (void *)(v104 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    uint64_t v57 = &v158;
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v97, v56);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v99);
    int v58 = 1;
  }
  else
  {
    uint64_t v31 = v106;
    outlined destroy of PaymentsFlowState((uint64_t)v101);
    uint64_t v32 = Logger.payments.unsafeMutableAddressor();
    v115(v31, v32, v114);
    uint64_t v54 = Logger.logObject.getter();
    int v53 = static os_log_type_t.error.getter();
    v164[1] = (unsigned char *)2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v52 = v165;
    uint64_t v55 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v54, (os_log_type_t)v53))
    {
      uint64_t v33 = v76;
      uint64_t v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v41 = 0;
      uint64_t v43 = createStorage<A>(capacity:type:)(0);
      uint64_t v44 = createStorage<A>(capacity:type:)(v41);
      uint64_t v48 = v164;
      v164[0] = v42;
      uint64_t v49 = &v163;
      uint64_t v163 = v43;
      uint64_t v46 = &v162;
      uint64_t v162 = v44;
      unsigned int v45 = 0;
      serialize(_:at:)(0, v164);
      serialize(_:at:)(v45, v48);
      uint64_t v161 = v55;
      uint64_t v47 = &v38;
      MEMORY[0x270FA5388](&v38);
      uint64_t v34 = v49;
      uint64_t v35 = &v38 - 6;
      uint64_t v50 = &v38 - 6;
      v35[2] = (uint64_t)v48;
      v35[3] = (uint64_t)v34;
      void v35[4] = v36;
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v33)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v54, (os_log_type_t)v53, "#PaymentsFlow on(input:) was invoked while in an unexpected flow state, returning false", v42, v52);
        uint64_t v39 = 0;
        destroyStorage<A>(_:count:)(v43, 0, v40);
        destroyStorage<A>(_:count:)(v44, v39, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v42, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v77(v106, v114);
    int v58 = 0;
  }
  return v58 & 1;
}

uint64_t implicit closure #1 in PaymentsFlow.on(input:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  lazy protocol witness table accessor for type Input and conformance Input();
  return String.init<A>(describing:)();
}

uint64_t sub_25DA10BEC()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PaymentsFlow.on(input:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Input() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #1 in PaymentsFlow.on(input:)(v2);
}

uint64_t PaymentsFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PaymentsFlow.execute()(uint64_t a1)
{
  v2[89] = v1;
  v2[88] = a1;
  v2[33] = v2;
  v2[34] = 0;
  v2[41] = 0;
  v2[45] = 0;
  v2[47] = 0;
  v2[53] = 0;
  v2[54] = 0;
  v2[71] = 0;
  v2[72] = 0;
  uint64_t v3 = type metadata accessor for Parse();
  v2[90] = v3;
  v2[91] = *(void *)(v3 - 8);
  v2[92] = swift_task_alloc();
  v2[93] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Input();
  v2[94] = v4;
  uint64_t v7 = *(void *)(v4 - 8);
  v2[95] = v7;
  v2[96] = *(void *)(v7 + 64);
  v2[97] = swift_task_alloc();
  v2[98] = swift_task_alloc();
  v2[99] = swift_task_alloc();
  v2[100] = swift_task_alloc();
  v2[101] = type metadata accessor for PaymentsFlowState();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[105] = v5;
  v2[106] = *(void *)(v5 - 8);
  v2[107] = swift_task_alloc();
  v2[108] = swift_task_alloc();
  v2[109] = swift_task_alloc();
  v2[110] = swift_task_alloc();
  v2[111] = swift_task_alloc();
  v2[112] = swift_task_alloc();
  v2[113] = swift_task_alloc();
  v2[114] = swift_task_alloc();
  v2[115] = swift_task_alloc();
  v2[116] = swift_task_alloc();
  v2[117] = swift_task_alloc();
  v2[118] = swift_task_alloc();
  v2[34] = v1;
  return MEMORY[0x270FA2498](PaymentsFlow.execute(), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v2;
  uint64_t v5 = (void *)(*v2 + 16);
  v6[33] = *v2;
  v6[128] = a1;
  v6[129] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = PaymentsFlow.execute();
  }
  else
  {
    (*(void (**)(void, void))(v5[89] + 8))(v5[91], v5[88]);
    uint64_t v3 = PaymentsFlow.execute();
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v2;
  uint64_t v5 = (void *)(*v2 + 16);
  v6[33] = *v2;
  v6[133] = a1;
  v6[134] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = PaymentsFlow.execute();
  }
  else
  {
    (*(void (**)(void, void))(v5[89] + 8))(v5[90], v5[88]);
    uint64_t v3 = PaymentsFlow.execute();
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[33] = *v2;
  v5[136] = a1;
  v5[137] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = PaymentsFlow.execute();
  }
  else
  {
    uint64_t v3 = PaymentsFlow.execute();
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t PaymentsFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 944);
  uint64_t v112 = *(void *)(v0 + 848);
  uint64_t v113 = *(void *)(v0 + 840);
  *(void *)(v0 + 264) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16);
  *(void *)(v0 + 952) = v114;
  *(void *)(v0 + 960) = (v112 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v114(v1, v2, v113);
  uint64_t v117 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 280) = 2;
  *(void *)(v0 + 968) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 976) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 984) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v115 = *(unsigned int *)(v0 + 1104);
  *(void *)(v0 + 992) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v118 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v117, v116))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v108 = createStorage<A>(capacity:type:)(0);
    uint64_t v109 = createStorage<A>(capacity:type:)(0);
    *(void *)(v111 + 672) = buf;
    *(void *)(v111 + 680) = v108;
    *(void *)(v111 + 688) = v109;
    serialize(_:at:)(0, (unsigned char **)(v111 + 672));
    serialize(_:at:)(0, (unsigned char **)(v111 + 672));
    *(void *)(v111 + 696) = v118;
    unint64_t v110 = (void *)swift_task_alloc();
    v110[2] = v111 + 672;
    void v110[3] = v111 + 680;
    v110[4] = v111 + 688;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v117, v116, "#PaymentsFlow running execute()", buf, v115);
    destroyStorage<A>(_:count:)(v108, 0, v106);
    destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v100 = *(void *)(v111 + 944);
  uint64_t v101 = *(void *)(v111 + 840);
  unint64_t v105 = *(void **)(v111 + 832);
  uint64_t v103 = *(void *)(v111 + 712);
  uint64_t v99 = *(void *)(v111 + 848);

  uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  *(void *)(v111 + 1000) = v102;
  *(void *)(v111 + 1008) = (v99 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v102(v100, v101);
  uint64_t v104 = (const void *)(v103 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
  swift_beginAccess();
  outlined init with copy of PaymentsFlowState(v104, v105);
  swift_endAccess();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)(v111 + 784);
      uint64_t v41 = *(void *)(v111 + 712);
      (*(void (**)(uint64_t, void, void))(*(void *)(v111 + 760) + 32))(v9, *(void *)(v111 + 832), *(void *)(v111 + 752));
      *(void *)(v111 + 424) = v9;
      outlined init with copy of GlobalsProviding(v41 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v111 + 96);
      uint64_t v42 = *(void *)(v111 + 120);
      uint64_t v43 = *(void *)(v111 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v111 + 96), v42);
      Input.parse.getter();
      uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 16) + **(int **)(v43 + 16));
      uint64_t v10 = (void *)swift_task_alloc();
      uint64_t v11 = v42;
      uint64_t v12 = v43;
      uint64_t v13 = v44;
      *(void *)(v111 + 1016) = v10;
      *uint64_t v10 = *(void *)(v111 + 264);
      v10[1] = PaymentsFlow.execute();
      uint64_t v14 = *(void *)(v111 + 744);
      return v13(v14, v11, v12);
    case 2u:
      uint64_t v16 = *(void *)(v111 + 832);
      uint64_t v17 = *(void *)(v111 + 776);
      uint64_t v18 = *(void *)(v111 + 752);
      uint64_t v37 = *(void *)(v111 + 712);
      uint64_t v19 = *(void *)(v111 + 760) + 32;
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))v19;
      *(void *)(v111 + 1040) = *(void *)v19;
      *(void *)(v111 + 1048) = v19 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v20(v17, v16, v18);
      *(void *)(v111 + 328) = v17;
      outlined init with copy of GlobalsProviding(v37 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v111 + 16);
      uint64_t v38 = *(void *)(v111 + 40);
      uint64_t v39 = *(void *)(v111 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v111 + 16), v38);
      Input.parse.getter();
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 + 16) + **(int **)(v39 + 16));
      uint64_t v21 = (void *)swift_task_alloc();
      uint64_t v11 = v38;
      uint64_t v12 = v39;
      uint64_t v13 = v40;
      *(void *)(v111 + 1056) = v21;
      *uint64_t v21 = *(void *)(v111 + 264);
      v21[1] = PaymentsFlow.execute();
      uint64_t v14 = *(void *)(v111 + 736);
      return v13(v14, v11, v12);
    case 3u:
      uint64_t v3 = *(void *)(v111 + 936);
      uint64_t v94 = *(void *)(v111 + 840);
      uint64_t v4 = Logger.payments.unsafeMutableAddressor();
      v114(v3, v4, v94);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.debug.getter();
      *(void *)(v111 + 632) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v111 + 1148);
      uint64_t v98 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v96))
      {
        uint64_t v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v91 = createStorage<A>(capacity:type:)(0);
        uint64_t v92 = createStorage<A>(capacity:type:)(0);
        *(void *)(v111 + 640) = v90;
        *(void *)(v111 + 648) = v91;
        *(void *)(v111 + 656) = v92;
        serialize(_:at:)(0, (unsigned char **)(v111 + 640));
        serialize(_:at:)(0, (unsigned char **)(v111 + 640));
        *(void *)(v111 + 664) = v98;
        id v93 = (void *)swift_task_alloc();
        v93[2] = v111 + 640;
        v93[3] = v111 + 648;
        v93[4] = v111 + 656;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, oslog, v96, "#PaymentsFlow unexpectedly encountered initialized flow state, ending with complete", v90, size);
        destroyStorage<A>(_:count:)(v91, 0, v89);
        destroyStorage<A>(_:count:)(v92, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v90, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v87 = *(void *)(v111 + 936);
      uint64_t v88 = *(void *)(v111 + 840);

      v102(v87, v88);
      static ExecuteResponse.complete()();
      goto LABEL_22;
    case 4u:
      uint64_t v7 = *(void *)(v111 + 920);
      uint64_t v55 = *(void *)(v111 + 840);
      uint64_t v8 = Logger.payments.unsafeMutableAddressor();
      v114(v7, v8, v55);
      int v58 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      *(void *)(v111 + 528) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v56 = *(_DWORD *)(v111 + 1140);
      uint64_t v59 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v58, v57))
      {
        uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v52 = createStorage<A>(capacity:type:)(0);
        uint64_t v53 = createStorage<A>(capacity:type:)(0);
        *(void *)(v111 + 536) = v51;
        *(void *)(v111 + 544) = v52;
        *(void *)(v111 + 552) = v53;
        serialize(_:at:)(0, (unsigned char **)(v111 + 536));
        serialize(_:at:)(0, (unsigned char **)(v111 + 536));
        *(void *)(v111 + 560) = v59;
        uint64_t v54 = (void *)swift_task_alloc();
        v54[2] = v111 + 536;
        void v54[3] = v111 + 544;
        v54[4] = v111 + 552;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v58, v57, "#PaymentsFlow Apple Card balance request - vending simple output flow", v51, v56);
        destroyStorage<A>(_:count:)(v52, 0, v50);
        destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v51, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void *)(v111 + 920);
      uint64_t v46 = *(void *)(v111 + 840);
      uint64_t v47 = *(void *)(v111 + 712);

      v102(v45, v46);
      outlined init with copy of GlobalsProviding(v47 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v111 + 136);
      uint64_t v49 = *(void *)(v111 + 160);
      uint64_t v48 = *(void *)(v111 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v111 + 136), v49);
      (*(void (**)(uint64_t))(v48 + 72))(v49);
      static ExecuteResponse.complete(next:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v111 + 136);
      goto LABEL_22;
    case 5u:
      uint64_t v22 = *(void *)(v111 + 880);
      uint64_t v32 = *(void *)(v111 + 840);
      uint64_t v23 = Logger.payments.unsafeMutableAddressor();
      v114(v22, v23, v32);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      *(void *)(v111 + 288) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v33 = *(_DWORD *)(v111 + 1108);
      uint64_t v36 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v35, v34))
      {
        uint64_t v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v29 = createStorage<A>(capacity:type:)(0);
        uint64_t v30 = createStorage<A>(capacity:type:)(0);
        *(void *)(v111 + 296) = v28;
        *(void *)(v111 + 304) = v29;
        *(void *)(v111 + 312) = v30;
        serialize(_:at:)(0, (unsigned char **)(v111 + 296));
        serialize(_:at:)(0, (unsigned char **)(v111 + 296));
        *(void *)(v111 + 320) = v36;
        uint64_t v31 = (void *)swift_task_alloc();
        v31[2] = v111 + 296;
        v31[3] = v111 + 304;
        v31[4] = v111 + 312;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v35, v34, "#PaymentsFlow current state is now .finished, ending flow", v28, v33);
        destroyStorage<A>(_:count:)(v29, 0, v27);
        destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v28, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v111 + 880);
      uint64_t v26 = *(void *)(v111 + 840);

      v102(v25, v26);
      static ExecuteResponse.complete()();
      goto LABEL_22;
    default:
      uint64_t v79 = *(void *)(v111 + 928);
      uint64_t v82 = *(void *)(v111 + 840);
      uint64_t v75 = *(void *)(v111 + 800);
      uint64_t v76 = *(void *)(v111 + 712);
      uint64_t v5 = (void (**)(void))(*(void *)(v111 + 760) + 32);
      uint64_t v74 = *v5;
      (*v5)();
      *(void *)(v111 + 568) = v75;
      outlined init with copy of GlobalsProviding(v76 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v111 + 176);
      uint64_t v77 = *(void *)(v111 + 200);
      uint64_t v78 = *(void *)(v111 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v111 + 176), v77);
      uint64_t v80 = *(void *)(v76 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_restrictionGuards);
      swift_bridgeObjectRetain();
      uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 24))(v80, v77);
      swift_bridgeObjectRelease();
      *(void *)(v111 + 576) = v81;
      __swift_destroy_boxed_opaque_existential_0(v111 + 176);
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      v114(v79, v6, v82);
      log = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      *(void *)(v111 + 584) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v83 = *(_DWORD *)(v111 + 1144);
      uint64_t v86 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v84))
      {
        uint64_t v70 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v71 = createStorage<A>(capacity:type:)(0);
        uint64_t v72 = createStorage<A>(capacity:type:)(0);
        *(void *)(v111 + 600) = v70;
        *(void *)(v111 + 608) = v71;
        *(void *)(v111 + 616) = v72;
        serialize(_:at:)(0, (unsigned char **)(v111 + 600));
        serialize(_:at:)(0, (unsigned char **)(v111 + 600));
        *(void *)(v111 + 624) = v86;
        int v73 = (void *)swift_task_alloc();
        v73[2] = v111 + 600;
        void v73[3] = v111 + 608;
        v73[4] = v111 + 616;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v84, "#PaymentsFlow moving flow states from .runningGuardFlows to .ongoing next guard flow", v70, v83);
        destroyStorage<A>(_:count:)(v71, 0, v69);
        destroyStorage<A>(_:count:)(v72, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v70, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v111 + 928);
      uint64_t v61 = *(void *)(v111 + 840);
      uint64_t v67 = *(void *)(v111 + 800);
      uint64_t v64 = *(void *)(v111 + 792);
      uint64_t v68 = *(void *)(v111 + 752);
      uint64_t v62 = *(void *)(v111 + 760);

      v102(v60, v61);
      *(void *)(v111 + 592) = v81;
      uint64_t v65 = swift_allocObject();
      swift_retain();
      swift_weakInit();
      swift_release();
      swift_retain();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v64, v67, v68);
      unint64_t v63 = (*(unsigned __int8 *)(v62 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v65;
      ((void (*)(unint64_t, uint64_t, uint64_t))v74)(v66 + v63, v64, v68);
      swift_release();
      type metadata accessor for GuardFlow();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v67, v68);
LABEL_22:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(void))(*(void *)(v111 + 264) + 8);
      return v24();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint32_t v46;
  os_log_type_t v47;
  NSObject *log;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  void *v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *buf;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v68;
  NSObject *oslog;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void *v79;
  uint64_t v80;

  uint64_t v79 = v0;
  v0[33] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  uint64_t v72 = v0[129];
  int v73 = v0[128];
  if (v73)
  {
    *(void *)(v71 + 432) = v73;
    if (dispatch thunk of AnyFlow.on(input:)())
    {
      uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 952);
      uint64_t v1 = *(void *)(v71 + 912);
      uint64_t v65 = *(void *)(v71 + 840);
      uint64_t v2 = Logger.payments.unsafeMutableAddressor();
      v66(v1, v2, v65);
      os_log_t oslog = Logger.logObject.getter();
      uint64_t v68 = static os_log_type_t.debug.getter();
      *(void *)(v71 + 480) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v71 + 1136);
      uint64_t v70 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v68))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v62 = createStorage<A>(capacity:type:)(0);
        unint64_t v63 = createStorage<A>(capacity:type:)(0);
        *(void *)(v71 + 496) = buf;
        *(void *)(v71 + 504) = v62;
        *(void *)(v71 + 512) = v63;
        serialize(_:at:)(0, (unsigned char **)(v71 + 496));
        serialize(_:at:)(0, (unsigned char **)(v71 + 496));
        *(void *)(v71 + 520) = v70;
        uint64_t v64 = (void *)swift_task_alloc();
        v64[2] = v71 + 496;
        v64[3] = v71 + 504;
        v64[4] = v71 + 512;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t result = Sequence.forEach(_:)();
        if (v72) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, oslog, v68, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, size);
        destroyStorage<A>(_:count:)(v62, 0, v60);
        destroyStorage<A>(_:count:)(v63, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v71 + 1000);
      uint64_t v50 = *(void *)(v71 + 912);
      uint64_t v51 = *(void *)(v71 + 840);
      uint32_t v56 = *(const void **)(v71 + 824);
      uint64_t v54 = *(void **)(v71 + 816);
      int v58 = *(void *)(v71 + 784);
      uint64_t v59 = *(void *)(v71 + 752);
      os_log_type_t v57 = *(void *)(v71 + 712);
      uint64_t v53 = *(void *)(v71 + 760);

      v52(v50, v51);
      (*(void (**)(const void *, uint64_t, uint64_t))(v53 + 16))(v56, v58, v59);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of PaymentsFlowState(v56, v54);
      uint64_t v55 = (void *)(v57 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
      swift_beginAccess();
      outlined assign with take of PaymentsFlowState(v54, v55);
      swift_endAccess();
      outlined destroy of PaymentsFlowState((uint64_t)v56);
      *(void *)(v71 + 488) = v73;
      swift_allocObject();
      swift_retain();
      swift_weakInit();
      swift_release();
      swift_retain();
      swift_release();
      type metadata accessor for AnyFlow();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v58, v59);
    }
    else
    {
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 952);
      uint64_t v4 = *(void *)(v71 + 904);
      uint64_t v44 = *(void *)(v71 + 840);
      uint64_t v5 = Logger.payments.unsafeMutableAddressor();
      v45(v4, v5, v44);
      log = Logger.logObject.getter();
      uint64_t v47 = static os_log_type_t.error.getter();
      *(void *)(v71 + 440) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v46 = *(_DWORD *)(v71 + 1132);
      uint64_t v49 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v47))
      {
        uint64_t v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v41 = createStorage<A>(capacity:type:)(0);
        uint64_t v42 = createStorage<A>(capacity:type:)(0);
        *(void *)(v71 + 448) = v40;
        *(void *)(v71 + 456) = v41;
        *(void *)(v71 + 464) = v42;
        serialize(_:at:)(0, (unsigned char **)(v71 + 448));
        serialize(_:at:)(0, (unsigned char **)(v71 + 448));
        *(void *)(v71 + 472) = v49;
        uint64_t v43 = (void *)swift_task_alloc();
        v43[2] = v71 + 448;
        v43[3] = v71 + 456;
        v43[4] = v71 + 464;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t result = Sequence.forEach(_:)();
        if (v72) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v47, "#PaymentsFlow RCHFlow.on() returned false", v40, v46);
        destroyStorage<A>(_:count:)(v41, 0, v39);
        destroyStorage<A>(_:count:)(v42, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v40, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v71 + 1000);
      uint32_t v33 = *(void *)(v71 + 904);
      os_log_type_t v34 = *(void *)(v71 + 840);
      uint64_t v37 = *(void *)(v71 + 784);
      uint64_t v38 = *(void *)(v71 + 752);
      uint64_t v36 = *(void *)(v71 + 760);

      v35(v33, v34);
      static ExecuteResponse.complete()();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)(v71 + 264) + 8);
    return v10();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v71 + 760) + 8))(*(void *)(v71 + 784), *(void *)(v71 + 752));
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 952);
    uint64_t v6 = *(void *)(v71 + 872);
    uint64_t v22 = *(void *)(v71 + 840);
    uint64_t v25 = *(void *)(v71 + 712);
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    v23(v6, v7, v22);
    swift_retain();
    uint64_t v31 = Logger.logObject.getter();
    uint64_t v32 = static os_log_type_t.error.getter();
    *(void *)(v71 + 344) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v24 = *(_DWORD *)(v71 + 1116);
    uint64_t v27 = swift_allocObject();
    *(unsigned char *)(v27 + 16) = 32;
    uint64_t v28 = swift_allocObject();
    *(unsigned char *)(v28 + 16) = 8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(void *)(v26 + 24) = v25;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v29 + 24) = v26;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v30 = v8;
    swift_retain();
    *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[1] = v27;
    swift_retain();
    void v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[3] = v28;
    swift_retain();
    v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v30[5] = v29;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v20 = createStorage<A>(capacity:type:)(0);
      uint64_t v21 = createStorage<A>(capacity:type:)(1);
      uint64_t v74 = v19;
      uint64_t v75 = v20;
      uint64_t v76 = v21;
      serialize(_:at:)(2, &v74);
      serialize(_:at:)(1, &v74);
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v78 = v27;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      if (v72) {
        return result;
      }
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v78 = v28;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v78 = v29;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      _os_log_impl(&dword_25D85A000, v31, v32, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v19, v24);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v71 + 1000);
    uint64_t v11 = *(void *)(v71 + 872);
    uint64_t v12 = *(void *)(v71 + 840);
    uint64_t v14 = *(void *)(v71 + 712);

    v13(v11, v12);
    outlined init with copy of GlobalsProviding(v14 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v71 + 56);
    uint64_t v17 = *(void *)(v71 + 80);
    uint64_t v15 = *(void *)(v71 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v71 + 56), v17);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v15 + 56) + **(int **)(v15 + 56));
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v71 + 1080) = v9;
    *uint64_t v9 = *(void *)(v71 + 264);
    v9[1] = PaymentsFlow.execute();
    return v16(v17, v15);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, uint64_t, uint64_t);
  uint32_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSObject *log;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint8_t *buf;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v76;
  NSObject *oslog;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  uint64_t v93;

  uint64_t v92 = v0;
  v0[33] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  uint64_t v80 = v0[134];
  uint64_t v81 = v0[133];
  if (v81)
  {
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 952);
    uint64_t v1 = *(void *)(v79 + 896);
    int v73 = *(void *)(v79 + 840);
    *(void *)(v79 + 376) = v81;
    uint64_t v2 = Logger.payments.unsafeMutableAddressor();
    v74(v1, v2, v73);
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v76 = static os_log_type_t.debug.getter();
    *(void *)(v79 + 384) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v79 + 1128);
    uint64_t v78 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v76))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v70 = createStorage<A>(capacity:type:)(0);
      uint64_t v71 = createStorage<A>(capacity:type:)(0);
      *(void *)(v79 + 392) = buf;
      *(void *)(v79 + 400) = v70;
      *(void *)(v79 + 408) = v71;
      serialize(_:at:)(0, (unsigned char **)(v79 + 392));
      serialize(_:at:)(0, (unsigned char **)(v79 + 392));
      *(void *)(v79 + 416) = v78;
      uint64_t v72 = (void *)swift_task_alloc();
      v72[2] = v79 + 392;
      v72[3] = v79 + 400;
      void v72[4] = v79 + 408;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v80) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, oslog, v76, "#PaymentsFlow obtained anyFlow from FlowFactory, pushing it to the next state", buf, size);
      destroyStorage<A>(_:count:)(v70, 0, v68);
      destroyStorage<A>(_:count:)(v71, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v79 + 1000);
    uint64_t v62 = *(void *)(v79 + 896);
    unint64_t v63 = *(void *)(v79 + 840);
    uint64_t v66 = *(void *)(v79 + 776);
    uint64_t v67 = *(void *)(v79 + 752);
    uint64_t v65 = *(void *)(v79 + 760);

    v64(v62, v63);
    static ExecuteResponse.complete(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v79 + 264) + 8);
    return v4();
  }
  else
  {
    uint64_t v52 = *(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 1040);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 952);
    uint64_t v5 = *(void *)(v79 + 888);
    uint64_t v45 = *(void *)(v79 + 840);
    uint64_t v50 = *(void *)(v79 + 792);
    uint64_t v48 = *(void *)(v79 + 776);
    uint64_t v51 = *(void *)(v79 + 752);
    uint64_t v47 = *(void *)(v79 + 760);
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    v46(v5, v6, v45);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v50, v48, v51);
    uint64_t v49 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v54 = swift_allocObject();
    v52(v54 + v49, v50, v51);
    log = Logger.logObject.getter();
    uint64_t v61 = static os_log_type_t.debug.getter();
    *(void *)(v79 + 336) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v53 = *(_DWORD *)(v79 + 1112);
    uint32_t v56 = swift_allocObject();
    *(unsigned char *)(v56 + 16) = 32;
    os_log_type_t v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = 8;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = partial apply for implicit closure #1 in PaymentsFlow.execute();
    *(void *)(v55 + 24) = v54;
    int v58 = swift_allocObject();
    *(void *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v58 + 24) = v55;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v59 = v7;
    swift_retain();
    *uint64_t v59 = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[1] = v56;
    swift_retain();
    v59[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[3] = v57;
    swift_retain();
    v59[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[5] = v58;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v61))
    {
      uint64_t v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v43 = createStorage<A>(capacity:type:)(0);
      uint64_t v44 = createStorage<A>(capacity:type:)(1);
      uint64_t v87 = v42;
      uint64_t v88 = v43;
      uint64_t v89 = v44;
      serialize(_:at:)(2, &v87);
      serialize(_:at:)(1, &v87);
      uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v91 = v56;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
      if (v80) {
        return result;
      }
      uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v91 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
      uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v91 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
      _os_log_impl(&dword_25D85A000, log, v61, "#PaymentsFlow could not determine the proper flow for parse: %s", v42, v53);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v42, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v40 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v40 = v80;
    }
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v79 + 1000);
    uint64_t v23 = *(void *)(v79 + 888);
    uint64_t v24 = *(void *)(v79 + 840);
    uint64_t v27 = *(void *)(v79 + 776);
    uint64_t v28 = *(void *)(v79 + 752);
    uint64_t v26 = *(void *)(v79 + 760);

    v25(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 952);
    uint64_t v8 = *(void *)(v79 + 872);
    uint64_t v29 = *(void *)(v79 + 840);
    uint64_t v32 = *(void *)(v79 + 712);
    uint64_t v9 = Logger.payments.unsafeMutableAddressor();
    v30(v8, v9, v29);
    swift_retain();
    uint64_t v38 = Logger.logObject.getter();
    uint64_t v39 = static os_log_type_t.error.getter();
    *(void *)(v79 + 344) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v31 = *(_DWORD *)(v79 + 1116);
    os_log_type_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 32;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 8;
    uint32_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(void *)(v33 + 24) = v32;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v36 + 24) = v33;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v37 = v10;
    swift_retain();
    *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[1] = v34;
    swift_retain();
    v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v37[3] = v35;
    swift_retain();
    v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      uint64_t v22 = createStorage<A>(capacity:type:)(1);
      uint64_t v82 = v20;
      uint32_t v83 = v21;
      os_log_type_t v84 = v22;
      serialize(_:at:)(2, &v82);
      serialize(_:at:)(1, &v82);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v34;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      if (v40) {
        return result;
      }
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      _os_log_impl(&dword_25D85A000, v38, v39, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v20, v31);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v79 + 1000);
    uint64_t v12 = *(void *)(v79 + 872);
    uint64_t v13 = *(void *)(v79 + 840);
    uint64_t v15 = *(void *)(v79 + 712);

    v14(v12, v13);
    outlined init with copy of GlobalsProviding(v15 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v79 + 56);
    uint64_t v18 = *(void *)(v79 + 80);
    uint64_t v16 = *(void *)(v79 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v79 + 56), v18);
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v16 + 56) + **(int **)(v16 + 56));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v79 + 1080) = v11;
    *uint64_t v11 = *(void *)(v79 + 264);
    v11[1] = PaymentsFlow.execute();
    return v17(v18, v16);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *log;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint8_t *buf;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  NSObject *oslog;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  void *v59;
  uint64_t v60;

  uint64_t v59 = v0;
  uint64_t v1 = v0[136];
  v0[33] = v0;
  uint64_t v47 = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  uint64_t v48 = v0[137];
  if (v47)
  {
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 952);
    uint64_t v2 = *(void *)(v46 + 864);
    uint64_t v35 = *(void *)(v46 + 840);
    uint64_t v38 = *(void *)(v46 + 712);
    *(void *)(v46 + 360) = v47;
    uint64_t v3 = Logger.payments.unsafeMutableAddressor();
    v36(v2, v3, v35);
    swift_retain();
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.debug.getter();
    *(void *)(v46 + 368) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v46 + 1124);
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = 32;
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = 8;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(void *)(v39 + 24) = v38;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v42 + 24) = v39;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v43 = v4;
    swift_retain();
    *uint64_t v43 = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[1] = v40;
    swift_retain();
    v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[3] = v41;
    swift_retain();
    v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v45))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint32_t v33 = createStorage<A>(capacity:type:)(0);
      os_log_type_t v34 = createStorage<A>(capacity:type:)(1);
      uint64_t v54 = buf;
      uint64_t v55 = v33;
      uint32_t v56 = v34;
      serialize(_:at:)(2, &v54);
      serialize(_:at:)(1, &v54);
      os_log_type_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      int v58 = v40;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
      if (v48) {
        return result;
      }
      os_log_type_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      int v58 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
      os_log_type_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      int v58 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
      _os_log_impl(&dword_25D85A000, oslog, v45, "#PaymentsFlow Returning unsupported flow after encountering unexpected state %s", buf, size);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v46 + 1000);
    uint64_t v28 = *(void *)(v46 + 864);
    uint64_t v29 = *(void *)(v46 + 840);

    v30(v28, v29);
    static ExecuteResponse.complete(next:)();
    swift_release();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 952);
    uint64_t v6 = *(void *)(v46 + 856);
    uint64_t v17 = *(void *)(v46 + 840);
    uint64_t v20 = *(void *)(v46 + 712);
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    v18(v6, v7, v17);
    swift_retain();
    log = Logger.logObject.getter();
    uint64_t v27 = static os_log_type_t.error.getter();
    *(void *)(v46 + 352) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v19 = *(_DWORD *)(v46 + 1120);
    uint64_t v22 = swift_allocObject();
    *(unsigned char *)(v22 + 16) = 32;
    uint64_t v23 = swift_allocObject();
    *(unsigned char *)(v23 + 16) = 8;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
    *(void *)(v21 + 24) = v20;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v24 + 24) = v21;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v25 = v8;
    swift_retain();
    *uint64_t v25 = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[1] = v22;
    swift_retain();
    v25[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[3] = v23;
    swift_retain();
    v25[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v27))
    {
      uint64_t v14 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v15 = createStorage<A>(capacity:type:)(0);
      uint64_t v16 = createStorage<A>(capacity:type:)(1);
      uint64_t v49 = v14;
      uint64_t v50 = v15;
      uint64_t v51 = v16;
      serialize(_:at:)(2, &v49);
      serialize(_:at:)(1, &v49);
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v53 = v22;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
      if (v48) {
        return result;
      }
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v53 = v23;
      closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v53 = v24;
      closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
      _os_log_impl(&dword_25D85A000, log, v27, "#PaymentsFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow", v14, v19);
      destroyStorage<A>(_:count:)(v15, 0, v13);
      destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v14, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v46 + 1000);
    uint64_t v10 = *(void *)(v46 + 856);
    uint64_t v11 = *(void *)(v46 + 840);

    v12(v10, v11);
    static ExecuteResponse.complete()();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)(v46 + 264) + 8);
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  void *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;

  uint64_t v38 = v0;
  uint64_t v32 = (void *)v0[129];
  uint64_t v1 = v0[93];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));

  (*(void (**)(void, void))(*(void *)(v31 + 760) + 8))(*(void *)(v31 + 784), *(void *)(v31 + 752));
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 952);
  uint64_t v4 = *(void *)(v31 + 872);
  uint64_t v20 = *(void *)(v31 + 840);
  uint64_t v23 = *(void *)(v31 + 712);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  v21(v4, v5, v20);
  swift_retain();
  uint64_t v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.error.getter();
  *(void *)(v31 + 344) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(_DWORD *)(v31 + 1116);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 32;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v27 + 24) = v24;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v28 = v6;
  swift_retain();
  *uint64_t v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint32_t v33 = v17;
    os_log_type_t v34 = v18;
    uint64_t v35 = v19;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_25D85A000, v29, v30, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v17, v22);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v17, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v31 + 1000);
  uint64_t v9 = *(void *)(v31 + 872);
  uint64_t v10 = *(void *)(v31 + 840);
  uint64_t v12 = *(void *)(v31 + 712);

  v11(v9, v10);
  outlined init with copy of GlobalsProviding(v12 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v31 + 56);
  uint64_t v15 = *(void *)(v31 + 80);
  uint64_t v13 = *(void *)(v31 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v31 + 56), v15);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v13 + 56) + **(int **)(v13 + 56));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v31 + 1080) = v7;
  *uint64_t v7 = *(void *)(v31 + 264);
  v7[1] = PaymentsFlow.execute();
  return v14(v15, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unint64_t, uint64_t, uint64_t);
  uint32_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  NSObject *log;
  os_log_type_t v60;
  uint64_t v61;
  void *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  void *v73;
  uint64_t v74;

  int v73 = v0;
  uint64_t v62 = (void *)v0[134];
  uint64_t v1 = v0[92];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  uint64_t v51 = *(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 1040);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 952);
  uint64_t v4 = *(void *)(v61 + 888);
  uint64_t v44 = *(void *)(v61 + 840);
  uint64_t v49 = *(void *)(v61 + 792);
  uint64_t v47 = *(void *)(v61 + 776);
  uint64_t v50 = *(void *)(v61 + 752);
  uint64_t v46 = *(void *)(v61 + 760);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  v45(v4, v5, v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v49, v47, v50);
  uint64_t v48 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v53 = swift_allocObject();
  v51(v53 + v48, v49, v50);
  log = Logger.logObject.getter();
  uint64_t v60 = static os_log_type_t.debug.getter();
  *(void *)(v61 + 336) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v52 = *(_DWORD *)(v61 + 1112);
  uint64_t v55 = swift_allocObject();
  *(unsigned char *)(v55 + 16) = 32;
  uint32_t v56 = swift_allocObject();
  *(unsigned char *)(v56 + 16) = 8;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = partial apply for implicit closure #1 in PaymentsFlow.execute();
  *(void *)(v54 + 24) = v53;
  os_log_type_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v57 + 24) = v54;
  _allocateUninitializedArray<A>(_:)();
  int v58 = v6;
  swift_retain();
  *int v58 = partial apply for closure #1 in OSLogArguments.append(_:);
  v58[1] = v55;
  swift_retain();
  v58[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v58[3] = v56;
  swift_retain();
  v58[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v58[5] = v57;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v60))
  {
    uint64_t v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v42 = createStorage<A>(capacity:type:)(0);
    uint64_t v43 = createStorage<A>(capacity:type:)(1);
    uint64_t v68 = v41;
    uint64_t v69 = v42;
    uint64_t v70 = v43;
    serialize(_:at:)(2, &v68);
    serialize(_:at:)(1, &v68);
    uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v72 = v55;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v72 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v72 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    _os_log_impl(&dword_25D85A000, log, v60, "#PaymentsFlow could not determine the proper flow for parse: %s", v41, v52);
    destroyStorage<A>(_:count:)(v42, 0, v40);
    destroyStorage<A>(_:count:)(v43, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v41, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v61 + 1000);
  uint64_t v23 = *(void *)(v61 + 888);
  uint64_t v24 = *(void *)(v61 + 840);
  uint64_t v27 = *(void *)(v61 + 776);
  uint64_t v28 = *(void *)(v61 + 752);
  uint64_t v26 = *(void *)(v61 + 760);

  v25(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 952);
  uint64_t v7 = *(void *)(v61 + 872);
  uint64_t v29 = *(void *)(v61 + 840);
  uint64_t v32 = *(void *)(v61 + 712);
  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  v30(v7, v8, v29);
  swift_retain();
  uint64_t v38 = Logger.logObject.getter();
  uint64_t v39 = static os_log_type_t.error.getter();
  *(void *)(v61 + 344) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v31 = *(_DWORD *)(v61 + 1116);
  os_log_type_t v34 = swift_allocObject();
  *(unsigned char *)(v34 + 16) = 32;
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = 8;
  uint32_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
  *(void *)(v33 + 24) = v32;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v36 + 24) = v33;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v37 = v9;
  swift_retain();
  *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[1] = v34;
  swift_retain();
  v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v37[3] = v35;
  swift_retain();
  v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[5] = v36;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(1);
    unint64_t v63 = v20;
    uint64_t v64 = v21;
    uint64_t v65 = v22;
    serialize(_:at:)(2, &v63);
    serialize(_:at:)(1, &v63);
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v67 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v67 = v35;
    closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v67 = v36;
    closure #1 in osLogInternal(_:log:type:)(&v66, (uint64_t)&v63, (uint64_t)&v64, (uint64_t)&v65);
    _os_log_impl(&dword_25D85A000, v38, v39, "#PaymentsFlow flowState machine unexpectedly failed to determine next state for current: %s", v20, v31);
    destroyStorage<A>(_:count:)(v21, 0, v19);
    destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v61 + 1000);
  uint64_t v12 = *(void *)(v61 + 872);
  uint64_t v13 = *(void *)(v61 + 840);
  uint64_t v15 = *(void *)(v61 + 712);

  v14(v12, v13);
  outlined init with copy of GlobalsProviding(v15 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowFactory, v61 + 56);
  uint64_t v18 = *(void *)(v61 + 80);
  uint64_t v16 = *(void *)(v61 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v61 + 56), v18);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v16 + 56) + **(int **)(v16 + 56));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v61 + 1080) = v10;
  *uint64_t v10 = *(void *)(v61 + 264);
  v10[1] = PaymentsFlow.execute();
  return v17(v18, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *log;
  os_log_type_t v23;
  uint64_t v24;
  void *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v25 = *(void **)(v0 + 1096);
  *(void *)(v0 + 264) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);

  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 952);
  uint64_t v1 = *(void *)(v24 + 856);
  uint64_t v13 = *(void *)(v24 + 840);
  uint64_t v16 = *(void *)(v24 + 712);
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  v14(v1, v2, v13);
  swift_retain();
  log = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.error.getter();
  *(void *)(v24 + 352) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v15 = *(_DWORD *)(v24 + 1120);
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 32;
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = 8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for implicit closure #2 in PaymentsFlow.execute();
  *(void *)(v17 + 24) = v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v20 + 24) = v17;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v21 = v3;
  swift_retain();
  *uint64_t v21 = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[1] = v18;
  swift_retain();
  v21[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[3] = v19;
  swift_retain();
  v21[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v23))
  {
    uint64_t v10 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(1);
    uint64_t v26 = v10;
    uint64_t v27 = v11;
    uint64_t v28 = v12;
    serialize(_:at:)(2, &v26);
    serialize(_:at:)(1, &v26);
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v30 = v18;
    closure #1 in osLogInternal(_:log:type:)(&v29, (uint64_t)&v26, (uint64_t)&v27, (uint64_t)&v28);
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v30 = v19;
    closure #1 in osLogInternal(_:log:type:)(&v29, (uint64_t)&v26, (uint64_t)&v27, (uint64_t)&v28);
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v30 = v20;
    closure #1 in osLogInternal(_:log:type:)(&v29, (uint64_t)&v26, (uint64_t)&v27, (uint64_t)&v28);
    _os_log_impl(&dword_25D85A000, log, v23, "#PaymentsFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow", v10, v15);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v10, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v24 + 1000);
  uint64_t v6 = *(void *)(v24 + 856);
  uint64_t v7 = *(void *)(v24 + 840);

  v8(v6, v7);
  static ExecuteResponse.complete()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v24 + 264) + 8);
  return v4();
}

uint64_t closure #1 in PaymentsFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v181 = a1;
  uint64_t v180 = a2;
  uint64_t v178 = a3;
  uint64_t v170 = 0;
  uint64_t v151 = partial apply for implicit closure #1 in closure #1 in PaymentsFlow.execute();
  uint64_t v152 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v155 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v156 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v157 = partial apply for closure #1 in osLogInternal(_:log:type:);
  char v158 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v230 = 0;
  char v229 = 0;
  uint64_t v228 = 0;
  uint64_t v227 = 0;
  uint64_t v179 = 0;
  uint64_t v159 = 0;
  uint64_t v219 = 0;
  uint64_t v160 = type metadata accessor for PaymentsFlowState();
  unint64_t v161 = (*(void *)(*(void *)(v160 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](0);
  uint64_t v162 = (char *)&v52 - v161;
  unint64_t v163 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v164 = (char *)&v52 - v163;
  uint64_t v165 = type metadata accessor for Parse();
  uint64_t v166 = *(void *)(v165 - 8);
  uint64_t v167 = v165 - 8;
  unint64_t v168 = (*(void *)(v166 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v170);
  uint64_t v169 = (char *)&v52 - v168;
  uint64_t v171 = type metadata accessor for USOParse();
  uint64_t v172 = *(void *)(v171 - 8);
  uint64_t v173 = v171 - 8;
  unint64_t v174 = (*(void *)(v172 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v170);
  uint64_t v175 = (char *)&v52 - v174;
  unint64_t v176 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  os_log_type_t v177 = (char *)&v52 - v176;
  uint64_t v230 = (char *)&v52 - v176;
  uint64_t v182 = type metadata accessor for Logger();
  uint64_t v183 = *(void *)(v182 - 8);
  uint64_t v184 = v182 - 8;
  unint64_t v185 = (*(void *)(v183 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v181);
  uint64_t v186 = (char *)&v52 - v185;
  unint64_t v187 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v188 = (char *)&v52 - v187;
  unint64_t v189 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v190 = (char *)&v52 - v189;
  unint64_t v191 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (unsigned __int8 *)MEMORY[0x270FA5388](v11);
  os_log_type_t v192 = (char *)&v52 - v191;
  int v193 = *v13;
  char v229 = v193 & 1;
  uint64_t v194 = v14 + 16;
  uint64_t v228 = v14 + 16;
  uint64_t v227 = v15;
  uint64_t v195 = &v226;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (Strong)
  {
    uint64_t v150 = Strong;
    uint64_t v142 = Strong;
    uint64_t v219 = Strong;
    char v18 = static GuardFlowResult.== infix(_:_:)();
    if (v18)
    {
      Input.parse.getter();
      if ((*(unsigned int (**)(char *, uint64_t))(v166 + 88))(v169, v165) == *MEMORY[0x263F6FF80])
      {
        uint64_t v19 = v177;
        (*(void (**)(char *, uint64_t))(v166 + 96))(v169, v165);
        (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v19, v169, v171);
        int v141 = USOParse.isRequestForAppleCardBalance.getter();
        (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v175, v177, v171);
        if (v141) {
          int v140 = 1;
        }
        else {
          int v140 = USOParse.isRequestForAppleSavings.getter();
        }
        int v139 = v140;
        uint32_t v137 = *(void (**)(char *, uint64_t))(v172 + 8);
        uint64_t v138 = v172 + 8;
        v137(v175, v171);
        if (v139)
        {
          uint64_t v20 = v190;
          uint64_t v21 = Logger.payments.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v20, v21, v182);
          uint64_t v135 = Logger.logObject.getter();
          int v134 = static os_log_type_t.debug.getter();
          uint64_t v132 = &v202;
          uint64_t v202 = 2;
          unint64_t v130 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v133 = v203;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
          uint64_t v136 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v135, (os_log_type_t)v134))
          {
            uint64_t v22 = v159;
            uint64_t v120 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v119 = 0;
            uint64_t v121 = createStorage<A>(capacity:type:)(0);
            uint64_t v122 = createStorage<A>(capacity:type:)(v119);
            uint64_t v126 = &v200;
            uint64_t v200 = v120;
            unint64_t v127 = &v199;
            uint64_t v199 = v121;
            unint64_t v124 = &v198;
            uint64_t v198 = v122;
            unsigned int v123 = 0;
            serialize(_:at:)(0, &v200);
            serialize(_:at:)(v123, v126);
            uint64_t v197 = v136;
            id v125 = &v52;
            MEMORY[0x270FA5388](&v52);
            uint64_t v23 = v127;
            uint64_t v24 = &v52 - 6;
            unint64_t v128 = &v52 - 6;
            v24[2] = (uint64_t)v126;
            v24[3] = (uint64_t)v23;
            v24[4] = v25;
            uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            if (v22)
            {
              __break(1u);
            }
            else
            {
              _os_log_impl(&dword_25D85A000, v135, (os_log_type_t)v134, "#PaymentsFlow guards complete, moving flow states from guard flows to .appleCardBalanceOutput", v120, v133);
              uint64_t v117 = 0;
              destroyStorage<A>(_:count:)(v121, 0, v118);
              destroyStorage<A>(_:count:)(v122, v117, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x2611B9630](v120, MEMORY[0x263F8E778]);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          (*(void (**)(char *, uint64_t))(v183 + 8))(v190, v182);
          swift_storeEnumTagMultiPayload();
          outlined init with copy of PaymentsFlowState(v164, v162);
          uint64_t v115 = (void *)(v142 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
          os_log_type_t v116 = &v201;
          swift_beginAccess();
          outlined assign with take of PaymentsFlowState(v162, v115);
          swift_endAccess();
          outlined destroy of PaymentsFlowState((uint64_t)v164);
          v137(v177, v171);
          return swift_release();
        }
        v137(v177, v171);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v166 + 8))(v169, v165);
      }
      uint64_t v26 = v188;
      uint64_t v27 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v26, v27, v182);
      uint64_t v113 = Logger.logObject.getter();
      int v112 = static os_log_type_t.debug.getter();
      unint64_t v110 = &v209;
      uint64_t v209 = 2;
      unint64_t v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v111 = v210;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v114 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v113, (os_log_type_t)v112))
      {
        uint64_t v28 = v159;
        uint64_t v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v97 = 0;
        uint64_t v99 = createStorage<A>(capacity:type:)(0);
        uint64_t v100 = createStorage<A>(capacity:type:)(v97);
        uint64_t v104 = &v207;
        uint64_t v207 = v98;
        unint64_t v105 = &v206;
        uint64_t v206 = v99;
        uint64_t v102 = &v205;
        uint64_t v205 = v100;
        unsigned int v101 = 0;
        serialize(_:at:)(0, &v207);
        serialize(_:at:)(v101, v104);
        uint64_t v204 = v114;
        uint64_t v103 = &v52;
        MEMORY[0x270FA5388](&v52);
        uint64_t v29 = v105;
        uint64_t v30 = &v52 - 6;
        uint64_t v106 = &v52 - 6;
        void v30[2] = (uint64_t)v104;
        v30[3] = (uint64_t)v29;
        v30[4] = v31;
        uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v28)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v113, (os_log_type_t)v112, "#PaymentsFlow guards complete, moving flow states from guard flows to .readyToRunFlow", v98, v111);
          uint64_t v95 = 0;
          destroyStorage<A>(_:count:)(v99, 0, v96);
          destroyStorage<A>(_:count:)(v100, v95, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v98, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v183 + 8))(v188, v182);
      uint64_t v32 = type metadata accessor for Input();
      (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 16))(v164, v178);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of PaymentsFlowState(v164, v162);
      id v93 = (void *)(v142 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
      uint64_t v94 = &v208;
      swift_beginAccess();
      outlined assign with take of PaymentsFlowState(v162, v93);
      swift_endAccess();
      outlined destroy of PaymentsFlowState((uint64_t)v164);
      return swift_release();
    }
    os_log_type_t v34 = v186;
    uint64_t v35 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v34, v35, v182);
    uint64_t v80 = 17;
    uint64_t v82 = 7;
    uint64_t v83 = swift_allocObject();
    *(unsigned char *)(v83 + 16) = v193 & 1;
    uint64_t v91 = Logger.logObject.getter();
    int v92 = static os_log_type_t.error.getter();
    uint64_t v78 = &v217;
    uint64_t v217 = 12;
    unint64_t v76 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v77 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v79 = v218;
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = 32;
    uint64_t v86 = swift_allocObject();
    *(unsigned char *)(v86 + 16) = 8;
    uint64_t v81 = 32;
    uint64_t v36 = swift_allocObject();
    uint64_t v37 = v83;
    uint64_t v84 = v36;
    *(void *)(v36 + 16) = v151;
    *(void *)(v36 + 24) = v37;
    uint64_t v38 = swift_allocObject();
    uint64_t v39 = v84;
    uint64_t v88 = v38;
    *(void *)(v38 + 16) = v152;
    *(void *)(v38 + 24) = v39;
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v87 = _allocateUninitializedArray<A>(_:)();
    uint64_t v89 = v40;
    swift_retain();
    uint64_t v41 = v85;
    uint64_t v42 = v89;
    *uint64_t v89 = v153;
    v42[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
    swift_retain();
    uint64_t v43 = v86;
    uint64_t v44 = v89;
    v89[2] = v154;
    v44[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
    swift_retain();
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
    uint64_t v46 = v89;
    v89[4] = v155;
    v46[5] = v45;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v91, (os_log_type_t)v92))
    {
      uint64_t v47 = v159;
      uint64_t v69 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v70 = createStorage<A>(capacity:type:)(0);
      uint64_t v71 = createStorage<A>(capacity:type:)(1);
      uint64_t v72 = &v215;
      char v215 = v69;
      int v73 = &v214;
      uint64_t v214 = v70;
      uint64_t v74 = &v213;
      uint64_t v213 = v71;
      serialize(_:at:)(2, &v215);
      serialize(_:at:)(1, v72);
      uint64_t v211 = v153;
      uint64_t v212 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)v72, (uint64_t)v73, (uint64_t)v74);
      uint64_t v75 = v47;
      if (v47)
      {
        __break(1u);
      }
      else
      {
        uint64_t v211 = v154;
        uint64_t v212 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
        uint64_t v67 = 0;
        uint64_t v211 = v155;
        uint64_t v212 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213);
        _os_log_impl(&dword_25D85A000, v91, (os_log_type_t)v92, "#PaymentsFlow GuardFlow yielded an invalid/failing exit value: %s, setting flow state to .finished", v69, v79);
        destroyStorage<A>(_:count:)(v70, 0, v68);
        destroyStorage<A>(_:count:)(v71, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v69, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v183 + 8))(v186, v182);
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v164, v162);
    uint64_t v65 = (void *)(v142 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    uint64_t v66 = &v216;
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v162, v65);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v164);
    return swift_release();
  }
  else
  {
    uint64_t v16 = v192;
    uint64_t v17 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v16, v17, v182);
    uint64_t v148 = Logger.logObject.getter();
    int v147 = static os_log_type_t.error.getter();
    uint64_t v145 = &v224;
    uint64_t v224 = 2;
    unint64_t v143 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v144 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v146 = v225;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v149 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v148, (os_log_type_t)v147))
    {
      uint64_t v48 = v159;
      uint64_t v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v54 = 0;
      uint64_t v56 = createStorage<A>(capacity:type:)(0);
      uint64_t v57 = createStorage<A>(capacity:type:)(v54);
      uint64_t v61 = &v223;
      uint64_t v223 = v55;
      uint64_t v62 = &v222;
      uint64_t v222 = v56;
      uint64_t v59 = &v221;
      uint64_t v221 = v57;
      unsigned int v58 = 0;
      serialize(_:at:)(0, &v223);
      serialize(_:at:)(v58, v61);
      uint64_t v220 = v149;
      uint64_t v60 = &v52;
      MEMORY[0x270FA5388](&v52);
      uint64_t v49 = v62;
      uint64_t v50 = &v52 - 6;
      unint64_t v63 = &v52 - 6;
      v50[2] = (uint64_t)v61;
      void v50[3] = (uint64_t)v49;
      v50[4] = v51;
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v48)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v148, (os_log_type_t)v147, "#PaymentsFlow got deallocated before child completion of guard flow could run", v55, v146);
        uint64_t v52 = 0;
        destroyStorage<A>(_:count:)(v56, 0, v53);
        destroyStorage<A>(_:count:)(v57, v52, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v55, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v183 + 8))(v192, v182);
  }
}

uint64_t implicit closure #1 in closure #1 in PaymentsFlow.execute()()
{
  return String.init<A>(describing:)();
}

uint64_t closure #2 in PaymentsFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a1;
  uint64_t v47 = a2;
  uint64_t v40 = 0;
  uint64_t v38 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  uint64_t v46 = 0;
  uint64_t v39 = 0;
  uint64_t v58 = 0;
  uint64_t v41 = type metadata accessor for PaymentsFlowState();
  unint64_t v42 = (*(void *)(*(void *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](0);
  uint64_t v43 = (char *)&v13 - v42;
  unint64_t v44 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v45 = (char *)&v13 - v44;
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = v49 - 8;
  unint64_t v52 = (*(void *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v48);
  uint64_t v53 = (char *)&v13 - v52;
  uint64_t v67 = v4;
  uint64_t v54 = v5 + 16;
  uint64_t v66 = v5 + 16;
  uint64_t v55 = &v65;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (Strong)
  {
    uint64_t v37 = Strong;
    uint64_t v29 = Strong;
    uint64_t v58 = Strong;
    swift_storeEnumTagMultiPayload();
    outlined init with copy of PaymentsFlowState(v45, v43);
    uint64_t v27 = (void *)(v29 + OBJC_IVAR____TtC19SiriPaymentsIntents12PaymentsFlow_flowState);
    uint64_t v28 = &v57;
    swift_beginAccess();
    outlined assign with take of PaymentsFlowState(v43, v27);
    swift_endAccess();
    outlined destroy of PaymentsFlowState((uint64_t)v45);
    return swift_release();
  }
  else
  {
    uint64_t v6 = v53;
    uint64_t v7 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v6, v7, v49);
    uint64_t v35 = Logger.logObject.getter();
    int v34 = static os_log_type_t.error.getter();
    uint64_t v32 = &v63;
    uint64_t v63 = 2;
    unint64_t v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v33 = v64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v36 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v35, (os_log_type_t)v34))
    {
      uint64_t v9 = v39;
      uint64_t v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v16 = 0;
      uint64_t v18 = createStorage<A>(capacity:type:)(0);
      uint64_t v19 = createStorage<A>(capacity:type:)(v16);
      uint64_t v23 = &v62;
      uint64_t v62 = v17;
      uint64_t v24 = &v61;
      uint64_t v61 = v18;
      uint64_t v21 = &v60;
      uint64_t v60 = v19;
      unsigned int v20 = 0;
      serialize(_:at:)(0, &v62);
      serialize(_:at:)(v20, v23);
      uint64_t v59 = v36;
      uint64_t v22 = &v13;
      MEMORY[0x270FA5388](&v13);
      uint64_t v10 = v24;
      uint64_t v11 = &v13 - 6;
      uint64_t v25 = &v13 - 6;
      void v11[2] = (uint64_t)v23;
      v11[3] = (uint64_t)v10;
      void v11[4] = v12;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v9)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v35, (os_log_type_t)v34, "#PaymentsFlow got deallocated before child completion of guard flow could run", v17, v33);
        uint64_t v14 = 0;
        destroyStorage<A>(_:count:)(v18, 0, v15);
        destroyStorage<A>(_:count:)(v19, v14, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v17, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v53, v49);
  }
}

uint64_t implicit closure #1 in PaymentsFlow.execute()()
{
  uint64_t v4 = type metadata accessor for Parse();
  unint64_t v2 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}