uint64_t one-time initialization function for payments()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logger.payments);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.payments);
  LogConst.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  LogConst.Category.siriPayments.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  v5 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0) {
    return *(void *)a2;
  }
  return v3;
}

long long *LogConst.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1) {
    swift_once();
  }
  return &static LogConst.subsystem;
}

long long *LogConst.Category.siriPayments.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPayments != -1) {
    swift_once();
  }
  return &static LogConst.Category.siriPayments;
}

uint64_t Logger.payments.unsafeMutableAddressor()
{
  if (one-time initialization token for payments != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.payments);
}

uint64_t static Logger.payments.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v1 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
}

uint64_t static Logger.logForCrash(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  v42 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  v46 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v29 = 0;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v34 - 8);
  uint64_t v33 = v34 - 8;
  unint64_t v30 = (*(void *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = (char *)v20 - v30;
  v31 = (char *)v20 - v30;
  uint64_t v66 = MEMORY[0x270FA5388](v35);
  uint64_t v67 = v3;
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v2, v4, v34);
  swift_bridgeObjectRetain();
  uint64_t v43 = 32;
  uint64_t v44 = 7;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v36;
  uint64_t v45 = v5;
  *(void *)(v5 + 16) = v35;
  *(void *)(v5 + 24) = v6;
  v57 = Logger.logObject.getter();
  int v58 = static os_log_type_t.error.getter();
  v39 = &v64;
  uint64_t v64 = 12;
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v40 = v65;
  uint64_t v41 = 17;
  uint64_t v49 = swift_allocObject();
  *(unsigned char *)(v49 + 16) = 32;
  uint64_t v51 = swift_allocObject();
  *(unsigned char *)(v51 + 16) = 8;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v45;
  uint64_t v47 = v7;
  *(void *)(v7 + 16) = v42;
  *(void *)(v7 + 24) = v8;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v47;
  uint64_t v54 = v9;
  *(void *)(v9 + 16) = v46;
  *(void *)(v9 + 24) = v10;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v52 = _allocateUninitializedArray<A>(_:)();
  v55 = v11;
  swift_retain();
  uint64_t v12 = v49;
  v13 = v55;
  *v55 = v48;
  v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
  swift_retain();
  uint64_t v14 = v51;
  v15 = v55;
  v55[2] = v50;
  v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  swift_retain();
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
  v17 = v55;
  v55[4] = v53;
  v17[5] = v16;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v57, (os_log_type_t)v58))
  {
    uint64_t v18 = v29;
    v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v23 = createStorage<A>(capacity:type:)(0);
    uint64_t v24 = createStorage<A>(capacity:type:)(1);
    v25 = &v63;
    v63 = v22;
    v26 = &v62;
    uint64_t v62 = v23;
    v27 = &v61;
    uint64_t v61 = v24;
    serialize(_:at:)(2, &v63);
    serialize(_:at:)(1, v25);
    v59 = v48;
    uint64_t v60 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
    uint64_t v28 = v18;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v59 = v50;
      uint64_t v60 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61);
      v20[1] = 0;
      v59 = v53;
      uint64_t v60 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61);
      _os_log_impl(&dword_25D85A000, v57, (os_log_type_t)v58, "Fatal error: %s", v22, v40);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v22, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v34);
  swift_bridgeObjectRetain();
  return v35;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #1 in static Logger.logForCrash(_:)()
{
}

uint64_t one-time initialization function for subsystem()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri.payments", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static LogConst.subsystem = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for siriPayments()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SiriPayments", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static LogConst.Category.siriPayments = (__int128)v1;
  return result;
}

uint64_t sub_25D85D71C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static Logger.logForCrash(_:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #1 in static Logger.logForCrash(_:)();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
}

uint64_t protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return MEMORY[0x270F67440](a1, a2, a3);
}

uint64_t protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = *v2;
  uint64_t v8 = v3 + 16;
  uint64_t v4 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v5(v4);
}

uint64_t protocol witness for TCCResponseProviding.confirmationRejected(deviceState:catOverrides:) in conformance TCCResponses(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return MEMORY[0x270F67448](a1, a2);
}

uint64_t protocol witness for TCCResponseProviding.confirmationCancelled(deviceState:catOverrides:) in conformance TCCResponses(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return MEMORY[0x270F67450](a1, a2);
}

id protocol witness for SiriKitPaymentsIntentResponse.paymentRecord.getter in conformance INRequestPaymentIntentResponse()
{
  return @nonobjc INRequestPaymentIntentResponse.paymentRecord.getter();
}

id @nonobjc INRequestPaymentIntentResponse.paymentRecord.getter()
{
  id v1 = v0;
  id v3 = objc_msgSend(v0, sel_paymentRecord);

  return v3;
}

uint64_t variable initialization expression of PaymentsFlow.restrictionGuards()
{
  v2[1] = 0;
  uint64_t v7 = type metadata accessor for UnlockDevicePolicy();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v6 = (char *)v2 - v3;
  uint64_t v10 = type metadata accessor for CommonFlowGuard();
  uint64_t v9 = _allocateUninitializedArray<A>(_:)();
  uint64_t v8 = v0;
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v7);
  static CommonFlowGuard.disallowInSharingMode.getter();
  uint64_t result = v9;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t protocol witness for static DisambiguationSnippetProviding.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:) in conformance SiriKitDisambiguationSnippetFactory()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
}

uint64_t protocol witness for static DisambiguationSnippetProviding.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:) in conformance SiriKitDisambiguationSnippetFactory()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance INSiriAuthorizationStatus()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance INSiriAuthorizationStatus()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance INSiriAuthorizationStatus()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance INBalanceType(uint64_t a1@<X8>)
{
  INSiriAuthorizationStatus.init(rawValue:)();
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INBalanceType(void *a1@<X8>)
{
  INBalanceType.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INBalanceType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INPersonHandleType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSPropertyListMutabilityOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INSiriAuthorizationStatus()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONWritingOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONWritingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, NSJSONWritingOptions *a2@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONReadingOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSPropertyListMutabilityOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSPropertyListMutabilityOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONWritingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

NSJSONWritingOptions protocol witness for RawRepresentable.rawValue.getter in conformance NSJSONWritingOptions@<X0>(NSJSONWritingOptions *a1@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1) {
    return static UnsafeMutablePointer.allocate(capacity:)();
  }
  else {
    return 0;
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x2611B9630](v3, a3);
  }
  return result;
}

Swift::Void __swiftcall Array._endMutation()()
{
  *uint64_t v0 = *v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  NSJSONWritingOptions result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  uint64_t v15 = v3;
  __int16 v16 = v4;
  uint64_t v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    uint64_t v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x263F8DBE0];
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = (void *)result;
  uint64_t v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3) {
          __break(1u);
        }
        int64_t v16 = a3 - (void)a2;
      }
      else
      {
        int64_t v16 = 0;
      }
      int64_t v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *uint64_t v17 = a2;
          uint64_t v11 = 0;
          uint64_t v12 = v15;
          char v13 = 1;
          char v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          char v22 = v13 & 1;
          char v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    uint64_t v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *uint64_t v17 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    char v13 = 0;
    char v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  NSJSONWritingOptions result = _StringObject.sharedUTF8.getter();
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v10 = result;
LABEL_21:
  *uint64_t v17 = v10;
  if (a6 < 0)
  {
    uint64_t v9 = 0;
LABEL_25:
    uint64_t v11 = (void *)v9;
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
    char v13 = 0;
    char v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  return __dst;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  Array._endMutation()();
  swift_retain();
  uint64_t v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  NSJSONWritingOptions result = (void *)v5;
  if (!__OFSUB__(v5, 1)) {
    return v6;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    return (void *)specialized ContiguousArray.init()();
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  NSJSONWritingOptions result = (void *)_StringGuts.copyUTF8(into:)();
  uint64_t v6 = result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    NSJSONWritingOptions result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (void *)v7) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v4 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v4;
  if ((result & 1) == 0)
  {
    uint64_t v2 = specialized Array.count.getter(*v3);
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *char v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 24) >> 1 < result + 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(*(void *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  *(void *)(v4 + 16) = v5;
  swift_release();
  uint64_t v6 = *v2;
  swift_retain();
  *(unsigned char *)(v6 + 32 + a1) = a2;
  return swift_release();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v6 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (void)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return (void *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v16 = *(void *)(a4 + 24) >> 1;
  if (a3)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v16;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a4 + 24) >> 1;
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  int64_t v10 = *(void *)(a4 + 16);
  if (v11 < v10) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v11;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * (v6 - (void)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * v9;
    }
    swift_release();
    uint64_t v7 = (char *)v8;
  }
  else
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    swift_retain();
    uint64_t v7 = v5;
  }
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(void *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result) {
    return (char *)memmove(a3, result, a2);
  }
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  size_t v4 = *result;
  *size_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_25D85FD20()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_25D85FD54()
{
  return swift_deallocObject();
}

uint64_t sub_25D85FD80()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_25D85FDCC()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2();
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

uint64_t type metadata accessor for INAccountType()
{
  uint64_t v4 = lazy cache variable for type metadata for INAccountType;
  if (!lazy cache variable for type metadata for INAccountType)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INAccountType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INSiriAuthorizationStatus()
{
  uint64_t v4 = lazy cache variable for type metadata for INSiriAuthorizationStatus;
  if (!lazy cache variable for type metadata for INSiriAuthorizationStatus)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INSiriAuthorizationStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSPropertyListMutabilityOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for NSPropertyListMutabilityOptions;
  if (!lazy cache variable for type metadata for NSPropertyListMutabilityOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPropertyListMutabilityOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INPersonHandleType()
{
  uint64_t v4 = lazy cache variable for type metadata for INPersonHandleType;
  if (!lazy cache variable for type metadata for INPersonHandleType)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INPersonHandleType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for INBalanceType()
{
  uint64_t v4 = lazy cache variable for type metadata for INBalanceType;
  if (!lazy cache variable for type metadata for INBalanceType)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for INBalanceType);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSJSONReadingOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for NSJSONReadingOptions;
  if (!lazy cache variable for type metadata for NSJSONReadingOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONReadingOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for NSJSONWritingOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for NSJSONWritingOptions;
  if (!lazy cache variable for type metadata for NSJSONWritingOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONWritingOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for RawRepresentable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    type metadata accessor for NSJSONWritingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    type metadata accessor for NSJSONWritingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    type metadata accessor for NSJSONWritingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    type metadata accessor for NSJSONWritingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    type metadata accessor for NSJSONWritingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    type metadata accessor for NSJSONReadingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    type metadata accessor for NSJSONReadingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    type metadata accessor for NSJSONReadingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    type metadata accessor for NSJSONReadingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    type metadata accessor for NSJSONReadingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    type metadata accessor for NSPropertyListMutabilityOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    type metadata accessor for NSPropertyListMutabilityOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    type metadata accessor for NSPropertyListMutabilityOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    type metadata accessor for NSPropertyListMutabilityOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions;
  if (!lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions)
  {
    type metadata accessor for NSPropertyListMutabilityOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for Equatable in INSiriAuthorizationStatus()
{
  return lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
}

unint64_t lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    type metadata accessor for INSiriAuthorizationStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    type metadata accessor for INSiriAuthorizationStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus)
  {
    type metadata accessor for INSiriAuthorizationStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSPropertyListMutabilityOptions()
{
  return lazy protocol witness table accessor for type NSPropertyListMutabilityOptions and conformance NSPropertyListMutabilityOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType;
  if (!lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType)
  {
    type metadata accessor for INBalanceType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType;
  if (!lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType)
  {
    type metadata accessor for INBalanceType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INBalanceType and conformance INBalanceType);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType;
  if (!lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType)
  {
    type metadata accessor for INPersonHandleType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType;
  if (!lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType)
  {
    type metadata accessor for INPersonHandleType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INPersonHandleType and conformance INPersonHandleType);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80) & 0x20000) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
}

uint64_t SearchForAccountsContinueInAppStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  int64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  int64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v1 = type metadata accessor for INSearchForAccountsIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  char v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  v19 = v29;
  v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static Device.current.getter();
}

uint64_t default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static AceService.currentAsync.getter();
}

uint64_t default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

uint64_t outlined init with copy of GlobalsProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t default argument 0 of CATWrapper.init(options:globals:)()
{
  return static CATOption.defaultMode.getter();
}

uint64_t default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v6 = 0;
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v5 = (char *)&v3 - v4;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

unint64_t type metadata accessor for INSearchForAccountsIntent()
{
  uint64_t v2 = lazy cache variable for type metadata for INSearchForAccountsIntent;
  if (!lazy cache variable for type metadata for INSearchForAccountsIntent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSearchForAccountsIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INSearchForAccountsIntentResponse()
{
  uint64_t v2 = lazy cache variable for type metadata for INSearchForAccountsIntentResponse;
  if (!lazy cache variable for type metadata for INSearchForAccountsIntentResponse)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSearchForAccountsIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *result)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(*(void *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v1 = swift_allocBox();
    uint64_t result = v2;
    *uint64_t v3 = v1;
  }
  return result;
}

uint64_t SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  v3[27] = v2;
  v3[26] = a2;
  v3[25] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[30] = v4;
  v3[31] = *(void *)(v4 - 8);
  v3[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[33] = v5;
  v3[34] = *(void *)(v5 - 8);
  v3[35] = swift_task_alloc();
  v3[18] = a2;
  v3[19] = v2;
  return MEMORY[0x270FA2498](SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:), 0);
}

uint64_t SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 264);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v2, v22);
  v25 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 160) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v23 = *(unsigned int *)(v0 + 320);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    *(void *)(v20 + 168) = buf;
    *(void *)(v20 + 176) = v17;
    *(void *)(v20 + 184) = v18;
    serialize(_:at:)(0, (unsigned char **)(v20 + 168));
    serialize(_:at:)(0, (unsigned char **)(v20 + 168));
    *(void *)(v20 + 192) = v26;
    v19 = (void *)swift_task_alloc();
    v19[2] = v20 + 168;
    v19[3] = v20 + 176;
    v19[4] = v20 + 184;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v25, v24, "#SearchForAccountsContinueInAppStrategy makeContinueInAppResponse", buf, v23);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v20 + 280);
  uint64_t v10 = *(void *)(v20 + 264);
  uint64_t v13 = *(void *)(v20 + 232);
  uint64_t v11 = *(void *)(v20 + 216);
  uint64_t v8 = *(void *)(v20 + 272);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_retain();
  *(void *)(v20 + 288) = *(void *)(v11 + 16);
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  id v12 = (id)IntentResolutionRecord.intentResponse.getter();
  objc_msgSend(v12, sel_code);

  INRequestPaymentIntentResponseCode.speakable.getter();
  uint64_t v3 = type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 56))(v13, 0, 1);
  IntentResolutionRecord.app.getter();
  uint64_t v14 = App.sirikitApp.getter();
  *(void *)(v20 + 296) = v14;
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v20 + 304) = v4;
  *uint64_t v4 = *(void *)(v20 + 136);
  v4[1] = SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  uint64_t v5 = *(void *)(v20 + 256);
  uint64_t v6 = *(void *)(v20 + 232);
  return SearchForAccountsCATs.errorWithCode(errorCode:app:)(v5, v6, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[17] = *v1;
  v5[39] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  else
  {
    uint64_t v4 = v5[29];
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = v0[32];
  uint64_t v8 = v0[31];
  uint64_t v9 = v0[30];
  uint64_t v11 = v0[28];
  uint64_t v6 = v0[27];
  uint64_t v7 = (uint64_t *)v0[25];
  v0[17] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v11, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[17] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 232);
  *(void *)(v0 + 136) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v1();
}

uint64_t default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return 0;
}

uint64_t default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t SearchForAccountsContinueInAppStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SearchForAccountsContinueInAppStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

uint64_t SearchForAccountsContinueInAppStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t SearchForAccountsContinueInAppStrategy.deinit()
{
  return BaseStrategy.deinit();
}

uint64_t SearchForAccountsContinueInAppStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 16) = *v1;
  uint64_t v5 = v2 + 16;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  return v3();
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0) {
    return (void *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  }
  return result;
}

uint64_t outlined destroy of FlowActivity?(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

uint64_t outlined destroy of NLContextUpdate?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for SearchForAccountsContinueInAppStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsContinueInAppStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsContinueInAppStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SearchForAccountsContinueInAppStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

unint64_t base witness table accessor for ContinueInAppFlowStrategy in SearchForAccountsContinueInAppStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy();
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy)
  {
    type metadata accessor for SearchForAccountsContinueInAppStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy)
  {
    type metadata accessor for SearchForAccountsContinueInAppStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy);
    return WitnessTable;
  }
  return v2;
}

uint64_t ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  memset(__b, 0, sizeof(__b));
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v11);
  outlined init with take of CommonLabelsProviding(v11, __b);
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v10);
  outlined init with take of CommonLabelsProviding(v10, &__b[5]);
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v9);
  outlined init with take of CommonLabelsProviding(v9, &__b[10]);
  outlined init with copy of ConfirmationViewBuilder(__b, a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return outlined destroy of ConfirmationViewBuilder((uint64_t)__b);
}

void *outlined init with take of CommonLabelsProviding(const void *a1, void *__dst)
{
  return __dst;
}

void *outlined init with copy of ConfirmationViewBuilder(void *a1, void *a2)
{
  uint64_t v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  uint64_t v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  uint64_t v4 = a1[13];
  a2[13] = v4;
  a2[14] = a1[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 10), (uint64_t)(a1 + 10));
  return a2;
}

uint64_t outlined destroy of ConfirmationViewBuilder(uint64_t a1)
{
  return a1;
}

BOOL static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(char a1, char a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v4 == v3;
}

uint64_t ConfirmationViewBuilder.WalletAppLaunchAction.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ConfirmationViewBuilder.WalletAppLaunchAction.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction;
  if (!lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction;
  if (!lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction);
    return WitnessTable;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction(char *a1, char *a2)
{
  return static ConfirmationViewBuilder.WalletAppLaunchAction.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return ConfirmationViewBuilder.WalletAppLaunchAction.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return ConfirmationViewBuilder.WalletAppLaunchAction.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConfirmationViewBuilder.WalletAppLaunchAction(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

id static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v28 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v33 = 0;
  char v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v28);
  uint64_t v25 = (char *)&v14 - v24;
  unint64_t v26 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v6 = MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)&v14 - v26;
  uint64_t v33 = (char *)&v14 - v26;
  char v32 = v6;
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  uint64_t v29 = v9;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 56))(v27, 1);
  if ((_BYTE)v28)
  {
    if (v28 == 1)
    {
      uint64_t v12 = String.APPLE_CARD_INFO_LAUNCH_URL.unsafeMutableAddressor();
      uint64_t v17 = *(void *)v12;
      uint64_t v18 = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      URL.init(string:)();
      swift_bridgeObjectRelease();
      outlined assign with take of URL?(v25, v27);
    }
  }
  else
  {
    uint64_t v11 = String.APPLE_CARD_APPLY_LAUNCH_URL.unsafeMutableAddressor();
    uint64_t v19 = *(void *)v11;
    uint64_t v20 = *((void *)v11 + 1);
    swift_bridgeObjectRetain();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    outlined assign with take of URL?(v25, v27);
  }
  uint64_t v15 = static AppUtil.walletApp.getter();
  outlined init with copy of URL?(v27, v25);
  id v16 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(v15, v21, v22, v25, v23);
  outlined destroy of URL?((uint64_t)v25);
  swift_release();
  outlined destroy of URL?((uint64_t)v27);
  return v16;
}

void *outlined init with copy of URL?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

id static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v48 = a1;
  uint64_t v42 = a2;
  uint64_t v39 = a3;
  uint32_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  id v50 = 0;
  uint64_t v49 = 0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  unint64_t v37 = (*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v18 - v37;
  uint64_t v43 = type metadata accessor for Locale();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = v43 - 8;
  unint64_t v46 = (*(void *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v48);
  uint64_t v47 = (char *)&v18 - v46;
  uint64_t v55 = v6;
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  uint64_t v52 = v9;
  uint64_t v51 = v10;
  swift_retain();
  if (v48)
  {
    uint64_t v36 = v48;
    uint64_t v35 = v48;
    uint64_t v49 = v48;
    uint64_t v33 = v41[3];
    uint64_t v32 = v41[4];
    __swift_project_boxed_opaque_existential_1(v41, v33);
    dispatch thunk of DeviceState.siriLocale.getter();
    id v34 = static AppUtil.buildPunchout(for:locale:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    id v50 = v34;
    swift_release();
  }
  else
  {
    type metadata accessor for SAUIAppPunchOut();
    id v50 = SAUIAppPunchOut.__allocating_init()();
  }
  id v28 = v50;
  id v11 = v50;
  outlined init with copy of URL?(v40, v38);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = v29 - 8;
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t))(v30 + 48))(v38, 1) == 1;
  if (v12)
  {
    uint64_t v27 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()((NSURL *)v12);
    unint64_t v26 = v13;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v29);
    uint64_t v27 = v26;
  }
  id v19 = v27;
  objc_msgSend(v28, sel_setPunchOutUri_);

  type metadata accessor for SAUIButton();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v14;
  id v21 = v50;
  id v15 = v50;
  uint64_t v16 = v23;
  void *v20 = v21;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v24 = v16;
  swift_bridgeObjectRetain();
  id v25 = SAUIButton.init(commands:text:)(v24, v42, v39);

  return v25;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *outlined assign with take of URL?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t type metadata accessor for SAUIAppPunchOut()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIAppPunchOut;
  if (!lazy cache variable for type metadata for SAUIAppPunchOut)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
    return ObjCClassMetadata;
  }
  return v2;
}

id static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = a1;
  v10[1] = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  id v15 = a5;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  unint64_t v12 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = (char *)v10 - v12;
  uint64_t v21 = MEMORY[0x270FA5388](v11);
  uint64_t v22 = v5;
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  uint64_t v18 = v8;
  URL.init(string:)();
  id v17 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(0, v13, v14, v16, v15);
  outlined destroy of URL?((uint64_t)v16);
  return v17;
}

id SAUIAppPunchOut.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SAUIAppPunchOut.init()();
}

unint64_t type metadata accessor for SAUIButton()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIButton;
  if (!lazy cache variable for type metadata for SAUIButton)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIButton);
    return ObjCClassMetadata;
  }
  return v2;
}

id static ConfirmationViewBuilder.makeWatchAppLaunchButton(for:buttonText:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for SASTButtonItem();
  id v17 = SAUIAppPunchOut.__allocating_init()();
  uint64_t v18 = App.appIdentifier.getter();
  uint64_t v19 = v4;
  if (v4)
  {
    type metadata accessor for SASTCommandTemplateAction();
    swift_getObjectType();
    id v5 = a4;
    swift_bridgeObjectRetain();
    id v20 = SASTCommandTemplateAction.init(intent:appId:)(a4, v18, v19);
    id v6 = v20;
    objc_msgSend(v17, sel_setAction_, v20);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  type metadata accessor for SAUIDecoratedText();
  id v22 = SAUIAppPunchOut.__allocating_init()();
  swift_bridgeObjectRetain();
  id v11 = (id)MEMORY[0x2611B9130](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setText_, v11);

  id v7 = v22;
  objc_msgSend(v17, sel_setDecoratedLabel_, v22);

  type metadata accessor for SASTItemGroup();
  id v21 = SAUIAppPunchOut.__allocating_init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  unint64_t v12 = v8;
  id v9 = v17;
  *unint64_t v12 = v17;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setTemplateItems_, isa);

  return v21;
}

unint64_t type metadata accessor for SASTButtonItem()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTButtonItem;
  if (!lazy cache variable for type metadata for SASTButtonItem)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTButtonItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIDecoratedText()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIDecoratedText;
  if (!lazy cache variable for type metadata for SAUIDecoratedText)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIDecoratedText);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTItemGroup()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTItemGroup;
  if (!lazy cache variable for type metadata for SASTItemGroup)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTItemGroup);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTCommandTemplateAction()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTCommandTemplateAction;
  if (!lazy cache variable for type metadata for SASTCommandTemplateAction)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTCommandTemplateAction);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[21] = v8;
  v9[20] = a8;
  v9[19] = a7;
  v9[18] = a6;
  v9[17] = a5;
  v9[16] = a4;
  v9[15] = a3;
  v9[14] = a2;
  v9[13] = a1;
  v9[7] = v9;
  v9[8] = 0;
  v9[9] = 0;
  v9[10] = 0;
  v9[11] = 0;
  v9[12] = 0;
  v9[8] = a1;
  v9[9] = a2;
  v9[10] = a3;
  v9[11] = a4;
  v9[12] = v8;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v1 = v0[21];
  v0[7] = v0;
  outlined init with copy of GlobalsProviding(v1 + 40, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  char v22 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  if (v22)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v21[22] = v2;
    *uint64_t v2 = v21[7];
    v2[1] = ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v3 = v21[20];
    uint64_t v4 = v21[19];
    uint64_t v5 = v21[18];
    uint64_t v6 = v21[17];
    uint64_t v7 = v21[16];
    uint64_t v8 = v21[15];
    uint64_t v9 = v21[14];
    uint64_t v10 = v21[13];
    return ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(v10, v9, v8, v7, v6, v5, v4, v3);
  }
  else
  {
    unint64_t v12 = (void *)swift_task_alloc();
    v21[23] = v12;
    *unint64_t v12 = v21[7];
    v12[1] = ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v13 = v21[20];
    uint64_t v14 = v21[19];
    uint64_t v15 = v21[18];
    uint64_t v16 = v21[17];
    uint64_t v17 = v21[16];
    uint64_t v18 = v21[15];
    uint64_t v19 = v21[14];
    uint64_t v20 = v21[13];
    return ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(v20, v19, v18, v17, v16, v15, v14, v13);
  }
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  *(void *)(v7 + 56) = *v2;
  uint64_t v8 = v7 + 56;
  uint64_t v3 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v3 = a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v4(v3);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v7 = *v2;
  *(void *)(v7 + 56) = *v2;
  uint64_t v8 = v7 + 56;
  uint64_t v3 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v3 = a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v4(v3);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[117] = v8;
  v9[116] = a8;
  v9[115] = a7;
  v9[114] = a6;
  v9[113] = a5;
  v9[112] = a4;
  v9[111] = a3;
  v9[110] = a2;
  v9[109] = a1;
  v9[58] = v9;
  v9[59] = 0;
  v9[60] = 0;
  v9[61] = 0;
  v9[62] = 0;
  v9[63] = 0;
  v9[65] = 0;
  v9[66] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  v9[75] = 0;
  v9[76] = 0;
  v9[77] = 0;
  v9[79] = 0;
  v9[44] = 0;
  v9[45] = 0;
  v9[83] = 0;
  v9[84] = 0;
  v9[46] = 0;
  v9[47] = 0;
  v9[86] = 0;
  v9[87] = 0;
  v9[48] = 0;
  v9[49] = 0;
  v9[89] = 0;
  v9[90] = 0;
  v9[91] = 0;
  v9[92] = 0;
  v9[93] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[96] = 0;
  v9[97] = 0;
  v9[52] = 0;
  v9[53] = 0;
  v9[99] = 0;
  v9[100] = 0;
  v9[54] = 0;
  v9[55] = 0;
  v9[102] = 0;
  v9[103] = 0;
  v9[56] = 0;
  v9[57] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[118] = swift_task_alloc();
  v9[119] = swift_task_alloc();
  v9[120] = swift_task_alloc();
  v9[121] = swift_task_alloc();
  v9[122] = swift_task_alloc();
  v9[123] = swift_task_alloc();
  v9[124] = swift_task_alloc();
  v9[125] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TemplatingResult();
  v9[126] = v10;
  v9[127] = *(void *)(v10 - 8);
  v9[128] = swift_task_alloc();
  v9[129] = swift_task_alloc();
  v9[130] = swift_task_alloc();
  v9[131] = swift_task_alloc();
  v9[132] = swift_task_alloc();
  v9[133] = swift_task_alloc();
  v9[134] = swift_task_alloc();
  v9[135] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v9[136] = v11;
  v9[137] = *(void *)(v11 - 8);
  v9[138] = swift_task_alloc();
  v9[139] = swift_task_alloc();
  v9[140] = swift_task_alloc();
  v9[141] = swift_task_alloc();
  v9[142] = swift_task_alloc();
  v9[143] = swift_task_alloc();
  v9[144] = swift_task_alloc();
  v9[145] = swift_task_alloc();
  v9[146] = swift_task_alloc();
  v9[147] = swift_task_alloc();
  v9[148] = swift_task_alloc();
  v9[59] = a1;
  v9[60] = a2;
  v9[61] = a3;
  v9[62] = a4;
  v9[63] = v8;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 1184);
  uint64_t v112 = *(void *)(v0 + 1096);
  uint64_t v113 = *(void *)(v0 + 1088);
  *(void *)(v0 + 464) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16);
  *(void *)(v0 + 1192) = v114;
  *(void *)(v0 + 1200) = (v112 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v114(v1, v2, v113);
  oslog = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 512) = 2;
  *(void *)(v0 + 1208) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1216) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1224) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v0 + 1776);
  *(void *)(v0 + 1232) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v118 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v116))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v108 = createStorage<A>(capacity:type:)(0);
    uint64_t v109 = createStorage<A>(capacity:type:)(0);
    *(void *)(v111 + 840) = buf;
    *(void *)(v111 + 848) = v108;
    *(void *)(v111 + 856) = v109;
    serialize(_:at:)(0, (unsigned char **)(v111 + 840));
    serialize(_:at:)(0, (unsigned char **)(v111 + 840));
    *(void *)(v111 + 864) = v118;
    v110 = (void *)swift_task_alloc();
    v110[2] = v111 + 840;
    v110[3] = v111 + 848;
    v110[4] = v111 + 856;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v116, "#ConfirmationViewBuilder makePaymentConfirmationWatchViews", buf, size);
    destroyStorage<A>(_:count:)(v108, 0, v106);
    destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v103 = *(void *)(v111 + 1184);
  uint64_t v104 = *(void *)(v111 + 1088);
  uint64_t v102 = *(void *)(v111 + 1096);

  v105 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
  *(void *)(v111 + 1240) = v105;
  *(void *)(v111 + 1248) = (v102 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v105(v103, v104);
  if (App.isFirstParty.getter())
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v111 + 1256) = v3;
    *uint64_t v3 = *(void *)(v111 + 464);
    v3[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v4 = *(void *)(v111 + 920);
    uint64_t v5 = *(void *)(v111 + 912);
    uint64_t v6 = *(void *)(v111 + 904);
    uint64_t v7 = *(void *)(v111 + 896);
    uint64_t v8 = *(void *)(v111 + 888);
    uint64_t v9 = *(void *)(v111 + 880);
    uint64_t v10 = *(void *)(v111 + 872);
    return ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(v10, v9, v8, v7, v6, v5, v4);
  }
  type metadata accessor for SASTItemGroup();
  id v98 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v111 + 1264) = v98;
  *(void *)(v111 + 520) = v98;
  *(void *)(v111 + 1272) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_setTemplateItems_, isa);

  uint64_t v100 = App.appIdentifier.getter();
  uint64_t v101 = v12;
  if (v12)
  {
    id v96 = *(id *)(v111 + 880);
    *(void *)(v111 + 448) = v100;
    *(void *)(v111 + 456) = v12;
    type metadata accessor for SASTApplicationBannerItem();
    id v13 = v96;
    swift_bridgeObjectRetain();
    *(void *)(v111 + 832) = SASTApplicationBannerItem.init(intent:appId:)(v96, v100, v101);
    id v97 = objc_msgSend(v98, sel_templateItems);
    if (v97)
    {
      uint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v95 = v94;
    }
    else
    {
      uint64_t v95 = 0;
    }
    if (!v95) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    Array.append(_:)();
    Class v93 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v98, sel_setTemplateItems_);

    swift_bridgeObjectRelease();
  }
  type metadata accessor for SASTColumnDataListItem();
  id v88 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v111 + 1280) = v88;
  *(void *)(v111 + 528) = v88;
  id v89 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v111 + 1288) = v89;
  *(void *)(v111 + 536) = v89;
  id v90 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v111 + 1296) = v90;
  *(void *)(v111 + 544) = v90;
  id v91 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v111 + 1304) = v91;
  *(void *)(v111 + 552) = v91;
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClass();
  id v92 = v14;
  *(void *)(v111 + 1312) = v14;
  if (v14)
  {
    id v15 = v14;
    *(void *)(v111 + 728) = v92;
    *(void *)(v111 + 1320) = type metadata accessor for SAUIDecoratedText();
    id v86 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v111 + 1328) = v86;
    *(void *)(v111 + 736) = v86;
    id v16 = objc_msgSend(v92, sel_payer);
    id v87 = v16;
    if (v16)
    {
      id v81 = objc_msgSend(v16, sel_displayName);
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v83 = v17;

      uint64_t v84 = v82;
      uint64_t v85 = v83;
    }
    else
    {
      uint64_t v84 = 0;
      uint64_t v85 = 0;
    }
    if (v85)
    {
      uint64_t v79 = MEMORY[0x2611B9130](v84);
      swift_bridgeObjectRelease();
      v80 = (void *)v79;
    }
    else
    {
      v80 = 0;
    }
    uint64_t v75 = *(void *)(v111 + 1000);
    uint64_t v74 = *(void *)(v111 + 936);
    objc_msgSend(v86, sel_setText_);

    id v18 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v111 + 1336) = v18;
    *(void *)(v111 + 744) = v18;
    outlined init with copy of GlobalsProviding(v74 + 80, v111 + 176);
    uint64_t v76 = *(void *)(v111 + 200);
    uint64_t v77 = *(void *)(v111 + 208);
    __swift_project_boxed_opaque_existential_1((void *)(v111 + 176), v76);
    RequestPaymentSlots.rawValue.getter(0);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for SpeakableString();
    *(void *)(v111 + 1344) = v19;
    uint64_t v20 = *(void *)(v19 - 8);
    id v21 = *(void (**)(uint64_t, void, uint64_t))(v20 + 56);
    *(void *)(v111 + 1352) = v21;
    *(void *)(v111 + 1360) = (v20 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v21(v75, 0, 1);
    v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 + 16) + **(int **)(v77 + 16));
    char v22 = (void *)swift_task_alloc();
    uint64_t v23 = v76;
    uint64_t v24 = v77;
    id v25 = v78;
    *(void *)(v111 + 1368) = v22;
    void *v22 = *(void *)(v111 + 464);
    v22[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v26 = *(void *)(v111 + 1080);
    uint64_t v27 = *(void *)(v111 + 1000);
    return v25(v26, v27, v23, v24);
  }
  self;
  id v28 = (void *)swift_dynamicCastObjCClass();
  id v73 = v28;
  *(void *)(v111 + 1520) = v28;
  if (v28)
  {
    id v29 = v28;
    *(void *)(v111 + 600) = v73;
    *(void *)(v111 + 1528) = type metadata accessor for SAUIDecoratedText();
    id v71 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v111 + 1536) = v71;
    *(void *)(v111 + 608) = v71;
    id v30 = objc_msgSend(v73, sel_payee);
    id v72 = v30;
    if (v30)
    {
      id v66 = objc_msgSend(v30, sel_displayName);
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v68 = v31;

      uint64_t v69 = v67;
      uint64_t v70 = v68;
    }
    else
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
    }
    if (v70)
    {
      uint64_t v64 = MEMORY[0x2611B9130](v69);
      swift_bridgeObjectRelease();
      uint32_t v65 = (void *)v64;
    }
    else
    {
      uint32_t v65 = 0;
    }
    uint64_t v60 = *(void *)(v111 + 968);
    uint64_t v59 = *(void *)(v111 + 936);
    objc_msgSend(v71, sel_setText_);

    id v32 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v111 + 1544) = v32;
    *(void *)(v111 + 616) = v32;
    outlined init with copy of GlobalsProviding(v59 + 80, v111 + 16);
    uint64_t v61 = *(void *)(v111 + 40);
    uint64_t v62 = *(void *)(v111 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v111 + 16), v61);
    SendPaymentSlots.rawValue.getter(0);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v33 = type metadata accessor for SpeakableString();
    *(void *)(v111 + 1552) = v33;
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(void (**)(uint64_t, void, uint64_t))(v34 + 56);
    *(void *)(v111 + 1560) = v35;
    *(void *)(v111 + 1568) = (v34 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v35(v60, 0, 1);
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 + 16) + **(int **)(v62 + 16));
    uint64_t v36 = (void *)swift_task_alloc();
    uint64_t v23 = v61;
    uint64_t v24 = v62;
    id v25 = v63;
    *(void *)(v111 + 1576) = v36;
    *uint64_t v36 = *(void *)(v111 + 464);
    v36[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v26 = *(void *)(v111 + 1048);
    uint64_t v27 = *(void *)(v111 + 968);
    return v25(v26, v27, v23, v24);
  }
  uint64_t v37 = *(void *)(v111 + 1112);
  uint64_t v54 = *(void *)(v111 + 1088);
  uint64_t v38 = Logger.payments.unsafeMutableAddressor();
  v114(v37, v38, v54);
  log = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  *(void *)(v111 + 560) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v55 = *(_DWORD *)(v111 + 1780);
  uint64_t v58 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(log, v56))
  {
    id v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v51 = createStorage<A>(capacity:type:)(0);
    uint64_t v52 = createStorage<A>(capacity:type:)(0);
    *(void *)(v111 + 568) = v50;
    *(void *)(v111 + 576) = v51;
    *(void *)(v111 + 584) = v52;
    serialize(_:at:)(0, (unsigned char **)(v111 + 568));
    serialize(_:at:)(0, (unsigned char **)(v111 + 568));
    *(void *)(v111 + 592) = v58;
    uint64_t v53 = (void *)swift_task_alloc();
    v53[2] = v111 + 568;
    v53[3] = v111 + 576;
    v53[4] = v111 + 584;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, log, v56, "#ConfirmationViewBuilder makePaymentConfirmationView (Watch) encountered unexpected intent type", v50, v55);
    destroyStorage<A>(_:count:)(v51, 0, v49);
    destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v50, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v111 + 1112);
  uint64_t v46 = *(void *)(v111 + 1088);

  v105(v45, v46);
  *(void *)(v111 + 336) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(void *)(v111 + 344) = v39;
  Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v40);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  DefaultStringInterpolation.appendInterpolation(_:)();
  Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  uint64_t v48 = String.init(stringInterpolation:)();
  uint64_t v47 = v42;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(void *)uint64_t v43 = v48;
  *(void *)(v43 + 8) = v47;
  *(void *)(v43 + 16) = 0;
  *(void *)(v43 + 24) = 0;
  *(void *)(v43 + 32) = 0;
  *(void *)(v43 + 40) = 0;
  *(unsigned char *)(v43 + 48) = 4;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)())(*(void *)(v111 + 464) + 8);
  return v44();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 984));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint32_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  uint32_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  NSObject *log;
  os_log_type_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  id v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint8_t *buf;
  uint64_t v165;
  uint64_t v166;
  id v167;
  id v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, uint64_t);
  id v171;
  uint32_t size;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  NSObject *oslog;
  os_log_type_t v180;
  Class isa;
  Class v182;
  void *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  id v197;
  id v198;
  id v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(uint64_t, uint64_t, uint64_t);
  uint64_t v204;
  uint8_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  void *v220;
  uint64_t v221;

  v220 = v0;
  v196 = (id)v0[167];
  v198 = (id)v0[166];
  v195 = v0[135];
  v193 = v0[127];
  v194 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v197 = (id)MEMORY[0x2611B9130](v1);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
  v0[173] = v2;
  v0[174] = (v193 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v195, v194);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  objc_msgSend(v196, sel_setText_, v197);

  v199 = objc_msgSend(v198, sel_text);
  if (v199)
  {
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v189 = v3;

    v190 = v188;
    v191 = v189;
  }
  else
  {
    v190 = 0;
    v191 = 0;
  }
  v187 = Optional<A>.isNilOrEmpty.getter(v190, v191);
  swift_bridgeObjectRelease();
  if (v187)
  {
    v186 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v184 = *(id *)(v192 + 1328);
    v185 = _allocateUninitializedArray<A>(_:)();
    v183 = v4;
    uint64_t v5 = v184;
    *v183 = v184;
    _finalizeUninitializedArray<A>(_:)();
    v186 = v185;
  }
  if (v186)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v182 = isa;
  }
  else
  {
    v182 = 0;
  }
  v168 = *(id *)(v192 + 1336);
  v171 = *(id *)(v192 + 1328);
  v167 = *(id *)(v192 + 1280);
  v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1192);
  uint64_t v6 = *(void *)(v192 + 1176);
  v169 = *(void *)(v192 + 1088);
  objc_msgSend(v167, sel_setDecoratedRows_);

  uint64_t v7 = v168;
  objc_msgSend(v167, sel_setTitle_, v168);

  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  v170(v6, v8, v169);
  uint64_t v9 = v171;
  v173 = swift_allocObject();
  *(void *)(v173 + 16) = v171;
  oslog = Logger.logObject.getter();
  v180 = static os_log_type_t.debug.getter();
  *(void *)(v192 + 752) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v192 + 1804);
  v175 = swift_allocObject();
  *(unsigned char *)(v175 + 16) = 32;
  v176 = swift_allocObject();
  *(unsigned char *)(v176 + 16) = 8;
  v174 = swift_allocObject();
  *(void *)(v174 + 16) = partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(void *)(v174 + 24) = v173;
  v177 = swift_allocObject();
  *(void *)(v177 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v177 + 24) = v174;
  _allocateUninitializedArray<A>(_:)();
  v178 = v10;
  swift_retain();
  *v178 = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[1] = v175;
  swift_retain();
  v178[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[3] = v176;
  swift_retain();
  v178[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[5] = v177;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v180))
  {
    uint64_t v11 = *(void *)(v192 + 1376);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v165 = createStorage<A>(capacity:type:)(0);
    v166 = createStorage<A>(capacity:type:)(1);
    v215 = buf;
    v216 = v165;
    v217 = v166;
    serialize(_:at:)(2, &v215);
    serialize(_:at:)(1, &v215);
    v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v219 = v175;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
    if (v11) {
      return result;
    }
    v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v219 = v176;
    closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
    v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v219 = v177;
    closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
    _os_log_impl(&dword_25D85A000, oslog, v180, "Placing payer into request person label %s", buf, size);
    destroyStorage<A>(_:count:)(v165, 0, v163);
    destroyStorage<A>(_:count:)(v166, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    v162 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v162 = *(void *)(v192 + 1376);
  }
  v160 = *(id *)(v192 + 1312);
  v159 = *(void (**)(uint64_t, uint64_t))(v192 + 1240);
  v157 = *(void *)(v192 + 1176);
  v158 = *(void *)(v192 + 1088);

  v159(v157, v158);
  v161 = objc_msgSend(v160, sel_currencyAmount);
  if (v161)
  {
    v151 = INCurrencyAmount.formattedString.getter();
    v152 = v13;

    v153 = Optional<A>.emptyToNil.getter(v151, v152);
    v154 = v14;
    swift_bridgeObjectRelease();
    v155 = v153;
    v156 = v154;
  }
  else
  {
    v155 = 0;
    v156 = 0;
  }
  *(void *)(v192 + 1400) = v156;
  if (v156)
  {
    v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1192);
    id v15 = *(void *)(v192 + 1168);
    v140 = *(void *)(v192 + 1088);
    *(void *)(v192 + 432) = v155;
    *(void *)(v192 + 440) = v156;
    id v16 = Logger.payments.unsafeMutableAddressor();
    v141(v15, v16, v140);
    swift_bridgeObjectRetain();
    v143 = swift_allocObject();
    *(void *)(v143 + 16) = v155;
    *(void *)(v143 + 24) = v156;
    log = Logger.logObject.getter();
    v150 = static os_log_type_t.debug.getter();
    *(void *)(v192 + 808) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v142 = *(_DWORD *)(v192 + 1816);
    v145 = swift_allocObject();
    *(unsigned char *)(v145 + 16) = 32;
    v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = 8;
    v144 = swift_allocObject();
    *(void *)(v144 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v144 + 24) = v143;
    v147 = swift_allocObject();
    *(void *)(v147 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v147 + 24) = v144;
    _allocateUninitializedArray<A>(_:)();
    v148 = v17;
    swift_retain();
    *v148 = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[1] = v145;
    swift_retain();
    v148[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[3] = v146;
    swift_retain();
    v148[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[5] = v147;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v150))
    {
      v136 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v137 = createStorage<A>(capacity:type:)(0);
      v138 = createStorage<A>(capacity:type:)(1);
      v210 = v136;
      v211 = v137;
      v212 = v138;
      serialize(_:at:)(2, &v210);
      serialize(_:at:)(1, &v210);
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v145;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      if (v162) {
        return result;
      }
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      _os_log_impl(&dword_25D85A000, log, v150, "Placing amount into request amount label %s", v136, v142);
      destroyStorage<A>(_:count:)(v137, 0, v135);
      destroyStorage<A>(_:count:)(v138, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v136, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v131 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 1352);
    v130 = *(void *)(v192 + 1344);
    v125 = *(void (**)(uint64_t, uint64_t))(v192 + 1240);
    v123 = *(void *)(v192 + 1168);
    v124 = *(void *)(v192 + 1088);
    v129 = *(void *)(v192 + 992);
    v128 = *(void *)(v192 + 936);

    v125(v123, v124);
    v126 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v192 + 1408) = v126;
    *(void *)(v192 + 816) = v126;
    swift_bridgeObjectRetain();
    v127 = (id)MEMORY[0x2611B9130](v155, v156);
    swift_bridgeObjectRelease();
    objc_msgSend(v126, sel_setText_, v127);

    uint64_t v19 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v192 + 1416) = v19;
    *(void *)(v192 + 824) = v19;
    outlined init with copy of GlobalsProviding(v128 + 80, v192 + 296);
    v132 = *(void *)(v192 + 320);
    v133 = *(void *)(v192 + 328);
    __swift_project_boxed_opaque_existential_1((void *)(v192 + 296), v132);
    RequestPaymentSlots.rawValue.getter(1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v131(v129, 0, 1, v130);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v133 + 16) + **(int **)(v133 + 16));
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v192 + 1424) = v20;
    void *v20 = *(void *)(v192 + 464);
    v20[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    id v21 = *(void *)(v192 + 1072);
    char v22 = *(void *)(v192 + 992);
    return v134(v21, v22, v132, v133);
  }
  else
  {
    id v18 = (void *)(*(uint64_t (**)(void))(*(void *)(v192 + 928) + 8))(*(void *)(v192 + 912));
    v139 = v18;
    if (v18 && (v122 = objc_msgSend(v18, sel_feeAmount), v139, v122))
    {
      os_log_type_t v116 = INCurrencyAmount.formattedString.getter();
      v117 = v23;

      uint64_t v118 = Optional<A>.emptyToNil.getter(v116, v117);
      uint64_t v119 = v24;
      swift_bridgeObjectRelease();
      v120 = v118;
      v121 = v119;
    }
    else
    {
      v120 = 0;
      v121 = 0;
    }
    *(void *)(v192 + 1440) = v121;
    if (v121)
    {
      uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1192);
      id v25 = *(void *)(v192 + 1160);
      v105 = *(void *)(v192 + 1088);
      *(void *)(v192 + 416) = v120;
      *(void *)(v192 + 424) = v121;
      uint64_t v26 = Logger.payments.unsafeMutableAddressor();
      v106(v25, v26, v105);
      swift_bridgeObjectRetain();
      uint64_t v108 = swift_allocObject();
      *(void *)(v108 + 16) = v120;
      *(void *)(v108 + 24) = v121;
      v114 = Logger.logObject.getter();
      v115 = static os_log_type_t.debug.getter();
      *(void *)(v192 + 784) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v107 = *(_DWORD *)(v192 + 1812);
      v110 = swift_allocObject();
      *(unsigned char *)(v110 + 16) = 32;
      uint64_t v111 = swift_allocObject();
      *(unsigned char *)(v111 + 16) = 8;
      uint64_t v109 = swift_allocObject();
      *(void *)(v109 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(void *)(v109 + 24) = v108;
      uint64_t v112 = swift_allocObject();
      *(void *)(v112 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v112 + 24) = v109;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v113 = v27;
      swift_retain();
      *uint64_t v113 = partial apply for closure #1 in OSLogArguments.append(_:);
      v113[1] = v110;
      swift_retain();
      v113[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v113[3] = v111;
      swift_retain();
      v113[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v113[5] = v112;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v114, v115))
      {
        uint64_t v101 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v102 = createStorage<A>(capacity:type:)(0);
        uint64_t v103 = createStorage<A>(capacity:type:)(1);
        v205 = v101;
        v206 = v102;
        v207 = v103;
        serialize(_:at:)(2, &v205);
        serialize(_:at:)(1, &v205);
        v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v209 = v110;
        uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
        if (v162) {
          return result;
        }
        v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v209 = v111;
        closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
        v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v209 = v112;
        closure #1 in osLogInternal(_:log:type:)(&v208, (uint64_t)&v205, (uint64_t)&v206, (uint64_t)&v207);
        _os_log_impl(&dword_25D85A000, v114, v115, "Placing fee into request fee label %s", v101, v107);
        destroyStorage<A>(_:count:)(v102, 0, v100);
        destroyStorage<A>(_:count:)(v103, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v101, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      id v96 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 1352);
      uint64_t v95 = *(void *)(v192 + 1344);
      id v90 = *(void (**)(uint64_t, uint64_t))(v192 + 1240);
      id v88 = *(void *)(v192 + 1160);
      id v89 = *(void *)(v192 + 1088);
      uint64_t v94 = *(void *)(v192 + 984);
      Class v93 = *(void *)(v192 + 936);

      v90(v88, v89);
      id v91 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v192 + 1448) = v91;
      *(void *)(v192 + 792) = v91;
      swift_bridgeObjectRetain();
      id v92 = (id)MEMORY[0x2611B9130](v120, v121);
      swift_bridgeObjectRelease();
      objc_msgSend(v91, sel_setText_, v92);

      id v28 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v192 + 1456) = v28;
      *(void *)(v192 + 800) = v28;
      outlined init with copy of GlobalsProviding(v93 + 80, v192 + 256);
      id v97 = *(void *)(v192 + 280);
      id v98 = *(void *)(v192 + 288);
      __swift_project_boxed_opaque_existential_1((void *)(v192 + 256), v97);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v96(v94, 0, 1, v95);
      v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 + 16) + **(int **)(v98 + 16));
      id v29 = (void *)swift_task_alloc();
      *(void *)(v192 + 1464) = v29;
      *id v29 = *(void *)(v192 + 464);
      v29[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      id v30 = *(void *)(v192 + 1064);
      uint64_t v31 = *(void *)(v192 + 984);
      return v99(v30, v31, v97, v98);
    }
    else
    {
      uint64_t v104 = objc_msgSend(*(id *)(v192 + 1312), sel_note);
      if (v104)
      {
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v85 = v32;

        id v86 = v84;
        id v87 = v85;
      }
      else
      {
        id v86 = 0;
        id v87 = 0;
      }
      uint64_t v82 = Optional<A>.emptyToNil.getter(v86, v87);
      uint64_t v83 = v33;
      *(void *)(v192 + 1480) = v33;
      if (v33)
      {
        id v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1192);
        uint64_t v34 = *(void *)(v192 + 1152);
        id v71 = *(void *)(v192 + 1088);
        *(void *)(v192 + 400) = v82;
        *(void *)(v192 + 408) = v33;
        swift_bridgeObjectRelease();
        uint64_t v35 = Logger.payments.unsafeMutableAddressor();
        v72(v34, v35, v71);
        swift_bridgeObjectRetain();
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v82;
        *(void *)(v74 + 24) = v83;
        v80 = Logger.logObject.getter();
        id v81 = static os_log_type_t.debug.getter();
        *(void *)(v192 + 760) = 12;
        UnsignedInteger<>.init<A>(_:)();
        id v73 = *(_DWORD *)(v192 + 1808);
        uint64_t v76 = swift_allocObject();
        *(unsigned char *)(v76 + 16) = 32;
        uint64_t v77 = swift_allocObject();
        *(unsigned char *)(v77 + 16) = 8;
        uint64_t v75 = swift_allocObject();
        *(void *)(v75 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        *(void *)(v75 + 24) = v74;
        v78 = swift_allocObject();
        *(void *)(v78 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v78 + 24) = v75;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v79 = v36;
        swift_retain();
        *uint64_t v79 = partial apply for closure #1 in OSLogArguments.append(_:);
        v79[1] = v76;
        swift_retain();
        v79[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v79[3] = v77;
        swift_retain();
        v79[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v79[5] = v78;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v63 = createStorage<A>(capacity:type:)(0);
          uint64_t v64 = createStorage<A>(capacity:type:)(1);
          v200 = v62;
          v201 = v63;
          v202 = v64;
          serialize(_:at:)(2, &v200);
          serialize(_:at:)(1, &v200);
          v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v204 = v76;
          uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v203, (uint64_t)&v200, (uint64_t)&v201, (uint64_t)&v202);
          if (v162) {
            return result;
          }
          v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v204 = v77;
          closure #1 in osLogInternal(_:log:type:)(&v203, (uint64_t)&v200, (uint64_t)&v201, (uint64_t)&v202);
          v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v204 = v78;
          closure #1 in osLogInternal(_:log:type:)(&v203, (uint64_t)&v200, (uint64_t)&v201, (uint64_t)&v202);
          _os_log_impl(&dword_25D85A000, v80, v81, "Placing note into request note label %s", v62, v73);
          destroyStorage<A>(_:count:)(v63, 0, v61);
          destroyStorage<A>(_:count:)(v64, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v62, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v57 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 1352);
        os_log_type_t v56 = *(void *)(v192 + 1344);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v192 + 1240);
        uint64_t v49 = *(void *)(v192 + 1152);
        id v50 = *(void *)(v192 + 1088);
        uint32_t v55 = *(void *)(v192 + 976);
        uint64_t v54 = *(void *)(v192 + 936);

        v51(v49, v50);
        uint64_t v52 = SAUIAppPunchOut.__allocating_init()();
        *(void *)(v192 + 1488) = v52;
        *(void *)(v192 + 768) = v52;
        swift_bridgeObjectRetain();
        uint64_t v53 = (id)MEMORY[0x2611B9130](v82, v83);
        swift_bridgeObjectRelease();
        objc_msgSend(v52, sel_setText_, v53);

        uint64_t v45 = SAUIAppPunchOut.__allocating_init()();
        *(void *)(v192 + 1496) = v45;
        *(void *)(v192 + 776) = v45;
        outlined init with copy of GlobalsProviding(v54 + 80, v192 + 216);
        uint64_t v58 = *(void *)(v192 + 240);
        uint64_t v59 = *(void *)(v192 + 248);
        __swift_project_boxed_opaque_existential_1((void *)(v192 + 216), v58);
        RequestPaymentSlots.rawValue.getter(2);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        v57(v55, 0, 1, v56);
        uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 + 16) + **(int **)(v59 + 16));
        uint64_t v46 = (void *)swift_task_alloc();
        *(void *)(v192 + 1504) = v46;
        *uint64_t v46 = *(void *)(v192 + 464);
        v46[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        uint64_t v47 = *(void *)(v192 + 1056);
        uint64_t v48 = *(void *)(v192 + 976);
        return v60(v47, v48, v58, v59);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint32_t v65 = *(id *)(v192 + 1328);
        id v66 = *(id *)(v192 + 1312);

        uint64_t v70 = *(id *)(v192 + 1304);
        uint64_t v69 = *(id *)(v192 + 1296);
        uint64_t v68 = *(id *)(v192 + 1288);
        uint64_t v67 = *(void **)(v192 + 1280);
        uint64_t v37 = v67;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v67, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v38 = v68;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v68, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v39 = v69;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v69, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        Swift::String v40 = v70;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v70, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        Swift::String v41 = (void *)swift_task_alloc();
        *(void *)(v192 + 1728) = v41;
        *Swift::String v41 = *(void *)(v192 + 464);
        v41[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        uint64_t v42 = *(void *)(v192 + 896);
        uint64_t v43 = *(void *)(v192 + 880);
        uint64_t v44 = *(void *)(v192 + 872);
        return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v44, v43, v42);
      }
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 976));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint32_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  NSObject *log;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint8_t *buf;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  NSObject *oslog;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  id v110;
  void *v111;
  Class isa;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  void *v129;
  uint64_t v130;

  v129 = v0;
  v114 = (id)v0[177];
  v115 = (id)v0[176];
  uint64_t v108 = (void (*)(uint64_t, uint64_t))v0[173];
  uint64_t v113 = (id)v0[161];
  uint64_t v109 = v0[134];
  v107 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v110 = (id)MEMORY[0x2611B9130](v1);
  v108(v109, v107);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  objc_msgSend(v114, sel_setText_, v110);

  _allocateUninitializedArray<A>(_:)();
  uint64_t v111 = v2;
  uint64_t v3 = v115;
  *uint64_t v111 = v115;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v113, sel_setDecoratedRows_, isa);

  uint64_t v4 = v114;
  objc_msgSend(v113, sel_setTitle_, v114);

  swift_bridgeObjectRelease();
  v117 = *(void *)(v116 + 1432);
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)(v116 + 928) + 8))(*(void *)(v116 + 912));
  uint64_t v118 = v5;
  if (v5 && (uint64_t v106 = objc_msgSend(v5, sel_feeAmount), v118, v106))
  {
    uint64_t v100 = INCurrencyAmount.formattedString.getter();
    uint64_t v101 = v6;

    uint64_t v102 = Optional<A>.emptyToNil.getter(v100, v101);
    uint64_t v103 = v7;
    swift_bridgeObjectRelease();
    uint64_t v104 = v102;
    v105 = v103;
  }
  else
  {
    uint64_t v104 = 0;
    v105 = 0;
  }
  *(void *)(v116 + 1440) = v105;
  if (v105)
  {
    id v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 1192);
    uint64_t v8 = *(void *)(v116 + 1160);
    id v89 = *(void *)(v116 + 1088);
    *(void *)(v116 + 416) = v104;
    *(void *)(v116 + 424) = v105;
    uint64_t v9 = Logger.payments.unsafeMutableAddressor();
    v90(v8, v9, v89);
    swift_bridgeObjectRetain();
    id v92 = swift_allocObject();
    *(void *)(v92 + 16) = v104;
    *(void *)(v92 + 24) = v105;
    oslog = Logger.logObject.getter();
    v99 = static os_log_type_t.debug.getter();
    *(void *)(v116 + 784) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v116 + 1812);
    uint64_t v94 = swift_allocObject();
    *(unsigned char *)(v94 + 16) = 32;
    uint64_t v95 = swift_allocObject();
    *(unsigned char *)(v95 + 16) = 8;
    Class v93 = swift_allocObject();
    *(void *)(v93 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v93 + 24) = v92;
    id v96 = swift_allocObject();
    *(void *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v96 + 24) = v93;
    _allocateUninitializedArray<A>(_:)();
    id v97 = v10;
    swift_retain();
    *id v97 = partial apply for closure #1 in OSLogArguments.append(_:);
    v97[1] = v94;
    swift_retain();
    v97[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v97[3] = v95;
    swift_retain();
    v97[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v97[5] = v96;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v99))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v86 = createStorage<A>(capacity:type:)(0);
      id v87 = createStorage<A>(capacity:type:)(1);
      v124 = buf;
      v125 = v86;
      v126 = v87;
      serialize(_:at:)(2, &v124);
      serialize(_:at:)(1, &v124);
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v94;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      if (v117) {
        return result;
      }
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v128 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
      _os_log_impl(&dword_25D85A000, oslog, v99, "Placing fee into request fee label %s", buf, size);
      destroyStorage<A>(_:count:)(v86, 0, v84);
      destroyStorage<A>(_:count:)(v87, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v80 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v116 + 1352);
    uint64_t v79 = *(void *)(v116 + 1344);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v116 + 1240);
    id v72 = *(void *)(v116 + 1160);
    id v73 = *(void *)(v116 + 1088);
    v78 = *(void *)(v116 + 984);
    uint64_t v77 = *(void *)(v116 + 936);

    v74(v72, v73);
    uint64_t v75 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v116 + 1448) = v75;
    *(void *)(v116 + 792) = v75;
    swift_bridgeObjectRetain();
    uint64_t v76 = (id)MEMORY[0x2611B9130](v104, v105);
    swift_bridgeObjectRelease();
    objc_msgSend(v75, sel_setText_, v76);

    uint64_t v12 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v116 + 1456) = v12;
    *(void *)(v116 + 800) = v12;
    outlined init with copy of GlobalsProviding(v77 + 80, v116 + 256);
    id v81 = *(void *)(v116 + 280);
    uint64_t v82 = *(void *)(v116 + 288);
    __swift_project_boxed_opaque_existential_1((void *)(v116 + 256), v81);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v80(v78, 0, 1, v79);
    uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 + 16) + **(int **)(v82 + 16));
    id v13 = (void *)swift_task_alloc();
    *(void *)(v116 + 1464) = v13;
    *id v13 = *(void *)(v116 + 464);
    v13[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v14 = *(void *)(v116 + 1064);
    id v15 = *(void *)(v116 + 984);
    return v83(v14, v15, v81, v82);
  }
  else
  {
    id v88 = objc_msgSend(*(id *)(v116 + 1312), sel_note);
    if (v88)
    {
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = v16;

      uint64_t v70 = v68;
      id v71 = v69;
    }
    else
    {
      uint64_t v70 = 0;
      id v71 = 0;
    }
    id v66 = Optional<A>.emptyToNil.getter(v70, v71);
    uint64_t v67 = v17;
    *(void *)(v116 + 1480) = v17;
    if (v17)
    {
      os_log_type_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 1192);
      id v18 = *(void *)(v116 + 1152);
      uint32_t v55 = *(void *)(v116 + 1088);
      *(void *)(v116 + 400) = v66;
      *(void *)(v116 + 408) = v17;
      swift_bridgeObjectRelease();
      uint64_t v19 = Logger.payments.unsafeMutableAddressor();
      v56(v18, v19, v55);
      swift_bridgeObjectRetain();
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v66;
      *(void *)(v58 + 24) = v67;
      log = Logger.logObject.getter();
      uint32_t v65 = static os_log_type_t.debug.getter();
      *(void *)(v116 + 760) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v57 = *(_DWORD *)(v116 + 1808);
      uint64_t v60 = swift_allocObject();
      *(unsigned char *)(v60 + 16) = 32;
      uint64_t v61 = swift_allocObject();
      *(unsigned char *)(v61 + 16) = 8;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      *(void *)(v59 + 24) = v58;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v62 + 24) = v59;
      _allocateUninitializedArray<A>(_:)();
      v63 = v20;
      swift_retain();
      unsigned char *v63 = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[1] = v60;
      swift_retain();
      v63[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[3] = v61;
      swift_retain();
      v63[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[5] = v62;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v65))
      {
        uint64_t v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v47 = createStorage<A>(capacity:type:)(0);
        uint64_t v48 = createStorage<A>(capacity:type:)(1);
        uint64_t v119 = v46;
        v120 = v47;
        v121 = v48;
        serialize(_:at:)(2, &v119);
        serialize(_:at:)(1, &v119);
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v123 = v60;
        uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        if (v117) {
          return result;
        }
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v123 = v61;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v123 = v62;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        _os_log_impl(&dword_25D85A000, log, v65, "Placing note into request note label %s", v46, v57);
        destroyStorage<A>(_:count:)(v47, 0, v45);
        destroyStorage<A>(_:count:)(v48, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v46, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      Swift::String v41 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v116 + 1352);
      Swift::String v40 = *(void *)(v116 + 1344);
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v116 + 1240);
      uint64_t v33 = *(void *)(v116 + 1152);
      uint64_t v34 = *(void *)(v116 + 1088);
      uint64_t v39 = *(void *)(v116 + 976);
      uint64_t v38 = *(void *)(v116 + 936);

      v35(v33, v34);
      uint64_t v36 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v116 + 1488) = v36;
      *(void *)(v116 + 768) = v36;
      swift_bridgeObjectRetain();
      uint64_t v37 = (id)MEMORY[0x2611B9130](v66, v67);
      swift_bridgeObjectRelease();
      objc_msgSend(v36, sel_setText_, v37);

      id v29 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v116 + 1496) = v29;
      *(void *)(v116 + 776) = v29;
      outlined init with copy of GlobalsProviding(v38 + 80, v116 + 216);
      uint64_t v42 = *(void *)(v116 + 240);
      uint64_t v43 = *(void *)(v116 + 248);
      __swift_project_boxed_opaque_existential_1((void *)(v116 + 216), v42);
      RequestPaymentSlots.rawValue.getter(2);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v41(v39, 0, 1, v40);
      uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 16) + **(int **)(v43 + 16));
      id v30 = (void *)swift_task_alloc();
      *(void *)(v116 + 1504) = v30;
      *id v30 = *(void *)(v116 + 464);
      v30[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      uint64_t v31 = *(void *)(v116 + 1056);
      id v32 = *(void *)(v116 + 976);
      return v44(v31, v32, v42, v43);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v49 = *(id *)(v116 + 1328);
      id v50 = *(id *)(v116 + 1312);

      uint64_t v54 = *(id *)(v116 + 1304);
      uint64_t v53 = *(id *)(v116 + 1296);
      uint64_t v52 = *(id *)(v116 + 1288);
      uint64_t v51 = *(void **)(v116 + 1280);
      id v21 = v51;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v51, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      char v22 = v52;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v52, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      uint64_t v23 = v53;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v53, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      uint64_t v24 = v54;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v54, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      id v25 = (void *)swift_task_alloc();
      *(void *)(v116 + 1728) = v25;
      char *v25 = *(void *)(v116 + 464);
      v25[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      uint64_t v26 = *(void *)(v116 + 896);
      uint64_t v27 = *(void *)(v116 + 880);
      id v28 = *(void *)(v116 + 872);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v28, v27, v26);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1472) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 968));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint8_t *buf;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  NSObject *oslog;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  void *v66;
  Class isa;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  void *v79;
  uint64_t v80;

  uint64_t v79 = v0;
  uint64_t v69 = (id)v0[182];
  uint64_t v70 = (id)v0[181];
  v63 = (void (*)(uint64_t, uint64_t))v0[173];
  uint64_t v68 = (id)v0[162];
  uint64_t v64 = v0[133];
  uint64_t v62 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  uint32_t v65 = (id)MEMORY[0x2611B9130](v1);
  v63(v64, v62);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  objc_msgSend(v69, sel_setText_, v65);

  _allocateUninitializedArray<A>(_:)();
  id v66 = v2;
  uint64_t v3 = v70;
  *id v66 = v70;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v68, sel_setDecoratedRows_, isa);

  uint64_t v4 = v69;
  objc_msgSend(v68, sel_setTitle_, v69);

  swift_bridgeObjectRelease();
  id v72 = *(void *)(v71 + 1472);
  id v73 = objc_msgSend(*(id *)(v71 + 1312), sel_note);
  if (v73)
  {
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v5;

    uint64_t v60 = v58;
    uint64_t v61 = v59;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  os_log_type_t v56 = Optional<A>.emptyToNil.getter(v60, v61);
  v57 = v6;
  *(void *)(v71 + 1480) = v6;
  if (v6)
  {
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 1192);
    uint64_t v7 = *(void *)(v71 + 1152);
    uint64_t v45 = *(void *)(v71 + 1088);
    *(void *)(v71 + 400) = v56;
    *(void *)(v71 + 408) = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.payments.unsafeMutableAddressor();
    v46(v7, v8, v45);
    swift_bridgeObjectRetain();
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v56;
    *(void *)(v48 + 24) = v57;
    oslog = Logger.logObject.getter();
    uint32_t v55 = static os_log_type_t.debug.getter();
    *(void *)(v71 + 760) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v71 + 1808);
    id v50 = swift_allocObject();
    *(unsigned char *)(v50 + 16) = 32;
    uint64_t v51 = swift_allocObject();
    *(unsigned char *)(v51 + 16) = 8;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(void *)(v49 + 24) = v48;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v52 + 24) = v49;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v53 = v9;
    swift_retain();
    *uint64_t v53 = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[1] = v50;
    swift_retain();
    v53[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[3] = v51;
    swift_retain();
    v53[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v53[5] = v52;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v55))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v37 = createStorage<A>(capacity:type:)(0);
      uint64_t v38 = createStorage<A>(capacity:type:)(1);
      uint64_t v74 = buf;
      uint64_t v75 = v37;
      uint64_t v76 = v38;
      serialize(_:at:)(2, &v74);
      serialize(_:at:)(1, &v74);
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v50;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      if (v72) {
        return result;
      }
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v78 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
      _os_log_impl(&dword_25D85A000, oslog, v55, "Placing note into request note label %s", buf, size);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v31 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 1352);
    id v30 = *(void *)(v71 + 1344);
    id v25 = *(void (**)(uint64_t, uint64_t))(v71 + 1240);
    uint64_t v23 = *(void *)(v71 + 1152);
    uint64_t v24 = *(void *)(v71 + 1088);
    id v29 = *(void *)(v71 + 976);
    id v28 = *(void *)(v71 + 936);

    v25(v23, v24);
    uint64_t v26 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v71 + 1488) = v26;
    *(void *)(v71 + 768) = v26;
    swift_bridgeObjectRetain();
    uint64_t v27 = (id)MEMORY[0x2611B9130](v56, v57);
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setText_, v27);

    uint64_t v19 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v71 + 1496) = v19;
    *(void *)(v71 + 776) = v19;
    outlined init with copy of GlobalsProviding(v28 + 80, v71 + 216);
    id v32 = *(void *)(v71 + 240);
    uint64_t v33 = *(void *)(v71 + 248);
    __swift_project_boxed_opaque_existential_1((void *)(v71 + 216), v32);
    RequestPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v31(v29, 0, 1, v30);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 + 16) + **(int **)(v33 + 16));
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v71 + 1504) = v20;
    void *v20 = *(void *)(v71 + 464);
    v20[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    id v21 = *(void *)(v71 + 1056);
    char v22 = *(void *)(v71 + 976);
    return v34(v21, v22, v32, v33);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = *(id *)(v71 + 1328);
    Swift::String v40 = *(id *)(v71 + 1312);

    uint64_t v44 = *(id *)(v71 + 1304);
    uint64_t v43 = *(id *)(v71 + 1296);
    uint64_t v42 = *(id *)(v71 + 1288);
    Swift::String v41 = *(void **)(v71 + 1280);
    uint64_t v10 = v41;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v41, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v11 = v42;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v42, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v12 = v43;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v43, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    id v13 = v44;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v44, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v71 + 1728) = v14;
    *uint64_t v14 = *(void *)(v71 + 464);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    id v15 = *(void *)(v71 + 896);
    id v16 = *(void *)(v71 + 880);
    uint64_t v17 = *(void *)(v71 + 872);
    return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v17, v16, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1512) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 960));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;

  id v21 = *(id *)(v0 + 1496);
  char v22 = *(id *)(v0 + 1488);
  id v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1384);
  uint64_t v20 = *(id *)(v0 + 1304);
  id v16 = *(void *)(v0 + 1056);
  uint64_t v14 = *(void *)(v0 + 1008);
  *(void *)(v0 + 464) = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v17 = (id)MEMORY[0x2611B9130](v1);
  v15(v16, v14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v0 + 216);
  objc_msgSend(v21, sel_setText_, v17);

  _allocateUninitializedArray<A>(_:)();
  id v18 = v2;
  uint64_t v3 = v22;
  *id v18 = v22;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setDecoratedRows_, isa);

  uint64_t v4 = v21;
  objc_msgSend(v20, sel_setTitle_, v21);

  swift_bridgeObjectRelease();
  uint64_t v23 = *(id *)(v0 + 1328);
  uint64_t v24 = *(id *)(v0 + 1312);

  id v28 = *(id *)(v0 + 1304);
  uint64_t v27 = *(id *)(v0 + 1296);
  uint64_t v26 = *(id *)(v0 + 1288);
  id v25 = *(void **)(v0 + 1280);
  uint64_t v5 = v25;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v6 = v26;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v26, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v7 = v27;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v27, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v8 = v28;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v28, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  v29[216] = v9;
  *uint64_t v9 = v29[58];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v10 = v29[112];
  uint64_t v11 = v29[110];
  uint64_t v12 = v29[109];
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v12, v11, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 952));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  id v61;
  id v62;
  void *v63;
  id v64;
  Class v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint32_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  id v103;
  id v104;
  void *v105;
  id v106;
  Class v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint32_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  id v141;
  id v142;
  void *v143;
  id v144;
  Class v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t);
  uint32_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  NSObject *log;
  os_log_type_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t);
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint8_t *buf;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t, uint64_t);
  id v189;
  uint32_t size;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  NSObject *oslog;
  os_log_type_t v198;
  Class isa;
  Class v200;
  void *v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  id v215;
  id v216;
  id v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t (*v221)(uint64_t, uint64_t, uint64_t);
  uint64_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t (*v231)(uint64_t, uint64_t, uint64_t);
  uint64_t v232;
  uint8_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t (*v236)(uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  void *v238;
  uint64_t v239;

  v238 = v0;
  v214 = (id)v0[193];
  v216 = (id)v0[192];
  v213 = v0[131];
  v211 = v0[127];
  v212 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v215 = (id)MEMORY[0x2611B9130](v1);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v211 + 8);
  v0[199] = v2;
  v0[200] = (v211 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v213, v212);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v214, sel_setText_, v215);

  v217 = objc_msgSend(v216, sel_text);
  if (v217)
  {
    v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v207 = v3;

    v208 = v206;
    v209 = v207;
  }
  else
  {
    v208 = 0;
    v209 = 0;
  }
  v205 = Optional<A>.isNilOrEmpty.getter(v208, v209);
  swift_bridgeObjectRelease();
  if (v205)
  {
    v204 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    v202 = *(id *)(v210 + 1536);
    v203 = _allocateUninitializedArray<A>(_:)();
    v201 = v4;
    uint64_t v5 = v202;
    *v201 = v202;
    _finalizeUninitializedArray<A>(_:)();
    v204 = v203;
  }
  if (v204)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v200 = isa;
  }
  else
  {
    v200 = 0;
  }
  v186 = *(id *)(v210 + 1544);
  v189 = *(id *)(v210 + 1536);
  v185 = *(id *)(v210 + 1280);
  v188 = *(void (**)(uint64_t, uint64_t, uint64_t))(v210 + 1192);
  uint64_t v6 = *(void *)(v210 + 1144);
  v187 = *(void *)(v210 + 1088);
  objc_msgSend(v185, sel_setDecoratedRows_);

  uint64_t v7 = v186;
  objc_msgSend(v185, sel_setTitle_, v186);

  uint64_t v8 = Logger.payments.unsafeMutableAddressor();
  v188(v6, v8, v187);
  uint64_t v9 = v189;
  v191 = swift_allocObject();
  *(void *)(v191 + 16) = v189;
  oslog = Logger.logObject.getter();
  v198 = static os_log_type_t.debug.getter();
  *(void *)(v210 + 624) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v210 + 1784);
  v193 = swift_allocObject();
  *(unsigned char *)(v193 + 16) = 32;
  v194 = swift_allocObject();
  *(unsigned char *)(v194 + 16) = 8;
  v192 = swift_allocObject();
  *(void *)(v192 + 16) = partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(void *)(v192 + 24) = v191;
  v195 = swift_allocObject();
  *(void *)(v195 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v195 + 24) = v192;
  _allocateUninitializedArray<A>(_:)();
  v196 = v10;
  swift_retain();
  *v196 = partial apply for closure #1 in OSLogArguments.append(_:);
  v196[1] = v193;
  swift_retain();
  v196[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v196[3] = v194;
  swift_retain();
  v196[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v196[5] = v195;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v198))
  {
    uint64_t v11 = *(void *)(v210 + 1584);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v183 = createStorage<A>(capacity:type:)(0);
    v184 = createStorage<A>(capacity:type:)(1);
    v233 = buf;
    v234 = v183;
    v235 = v184;
    serialize(_:at:)(2, &v233);
    serialize(_:at:)(1, &v233);
    v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v237 = v193;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)&v233, (uint64_t)&v234, (uint64_t)&v235);
    if (v11) {
      return result;
    }
    v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v237 = v194;
    closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)&v233, (uint64_t)&v234, (uint64_t)&v235);
    v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v237 = v195;
    closure #1 in osLogInternal(_:log:type:)(&v236, (uint64_t)&v233, (uint64_t)&v234, (uint64_t)&v235);
    _os_log_impl(&dword_25D85A000, oslog, v198, "Placing payee into send person label %s", buf, size);
    destroyStorage<A>(_:count:)(v183, 0, v181);
    destroyStorage<A>(_:count:)(v184, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    v180 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v180 = *(void *)(v210 + 1584);
  }
  v178 = *(id *)(v210 + 1520);
  v177 = *(void (**)(uint64_t, uint64_t))(v210 + 1240);
  v175 = *(void *)(v210 + 1144);
  v176 = *(void *)(v210 + 1088);

  v177(v175, v176);
  v179 = objc_msgSend(v178, sel_currencyAmount);
  if (v179)
  {
    v169 = INCurrencyAmount.formattedString.getter();
    v170 = v13;

    v171 = Optional<A>.emptyToNil.getter(v169, v170);
    v172 = v14;
    swift_bridgeObjectRelease();
    v173 = v171;
    v174 = v172;
  }
  else
  {
    v173 = 0;
    v174 = 0;
  }
  *(void *)(v210 + 1608) = v174;
  if (v174)
  {
    v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(v210 + 1192);
    id v15 = *(void *)(v210 + 1136);
    v158 = *(void *)(v210 + 1088);
    *(void *)(v210 + 384) = v173;
    *(void *)(v210 + 392) = v174;
    id v16 = Logger.payments.unsafeMutableAddressor();
    v159(v15, v16, v158);
    swift_bridgeObjectRetain();
    v161 = swift_allocObject();
    *(void *)(v161 + 16) = v173;
    *(void *)(v161 + 24) = v174;
    log = Logger.logObject.getter();
    v168 = static os_log_type_t.debug.getter();
    *(void *)(v210 + 704) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v160 = *(_DWORD *)(v210 + 1800);
    v163 = swift_allocObject();
    *(unsigned char *)(v163 + 16) = 32;
    v164 = swift_allocObject();
    *(unsigned char *)(v164 + 16) = 8;
    v162 = swift_allocObject();
    *(void *)(v162 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v162 + 24) = v161;
    v165 = swift_allocObject();
    *(void *)(v165 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v165 + 24) = v162;
    _allocateUninitializedArray<A>(_:)();
    v166 = v17;
    swift_retain();
    *v166 = partial apply for closure #1 in OSLogArguments.append(_:);
    v166[1] = v163;
    swift_retain();
    v166[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v166[3] = v164;
    swift_retain();
    v166[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v166[5] = v165;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v168))
    {
      v154 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v155 = createStorage<A>(capacity:type:)(0);
      v156 = createStorage<A>(capacity:type:)(1);
      v228 = v154;
      v229 = v155;
      v230 = v156;
      serialize(_:at:)(2, &v228);
      serialize(_:at:)(1, &v228);
      v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v232 = v163;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v231, (uint64_t)&v228, (uint64_t)&v229, (uint64_t)&v230);
      if (v180) {
        return result;
      }
      v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v232 = v164;
      closure #1 in osLogInternal(_:log:type:)(&v231, (uint64_t)&v228, (uint64_t)&v229, (uint64_t)&v230);
      v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v232 = v165;
      closure #1 in osLogInternal(_:log:type:)(&v231, (uint64_t)&v228, (uint64_t)&v229, (uint64_t)&v230);
      _os_log_impl(&dword_25D85A000, log, v168, "Placing amount into send amount label %s", v154, v160);
      destroyStorage<A>(_:count:)(v155, 0, v153);
      destroyStorage<A>(_:count:)(v156, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v154, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v149 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 1560);
    v148 = *(void *)(v210 + 1552);
    v140 = *(void (**)(uint64_t, uint64_t))(v210 + 1240);
    v138 = *(void *)(v210 + 1136);
    v139 = *(void *)(v210 + 1088);
    v147 = *(void *)(v210 + 960);
    v146 = *(void *)(v210 + 936);

    v140(v138, v139);
    v144 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v210 + 1616) = v144;
    *(void *)(v210 + 712) = v144;
    swift_bridgeObjectRetain();
    v141 = (id)MEMORY[0x2611B9130](v173, v174);
    swift_bridgeObjectRelease();
    objc_msgSend(v144, sel_setText_, v141);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    v143 = v19;
    uint64_t v20 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    v142 = static SATextDecorationRegion.from(_:property:)(v173, v174, v20, v21);
    swift_bridgeObjectRelease();
    *v143 = v142;
    _finalizeUninitializedArray<A>(_:)();
    v145 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v144, sel_setRegions_, v145);

    char v22 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v210 + 1624) = v22;
    *(void *)(v210 + 720) = v22;
    outlined init with copy of GlobalsProviding(v146 + 80, v210 + 136);
    v150 = *(void *)(v210 + 160);
    v151 = *(void *)(v210 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v210 + 136), v150);
    SendPaymentSlots.rawValue.getter(1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v149(v147, 0, 1, v148);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v151 + 16) + **(int **)(v151 + 16));
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v210 + 1632) = v23;
    *uint64_t v23 = *(void *)(v210 + 464);
    v23[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v24 = *(void *)(v210 + 1040);
    id v25 = *(void *)(v210 + 960);
    return v152(v24, v25, v150, v151);
  }
  else
  {
    id v18 = (void *)(*(uint64_t (**)(void))(*(void *)(v210 + 928) + 8))(*(void *)(v210 + 912));
    v157 = v18;
    if (v18 && (v137 = objc_msgSend(v18, sel_feeAmount), v157, v137))
    {
      v131 = INCurrencyAmount.formattedString.getter();
      v132 = v26;

      v133 = Optional<A>.emptyToNil.getter(v131, v132);
      v134 = v27;
      swift_bridgeObjectRelease();
      v135 = v133;
      v136 = v134;
    }
    else
    {
      v135 = 0;
      v136 = 0;
    }
    *(void *)(v210 + 1648) = v136;
    if (v136)
    {
      v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v210 + 1192);
      id v28 = *(void *)(v210 + 1128);
      v120 = *(void *)(v210 + 1088);
      *(void *)(v210 + 368) = v135;
      *(void *)(v210 + 376) = v136;
      id v29 = Logger.payments.unsafeMutableAddressor();
      v121(v28, v29, v120);
      swift_bridgeObjectRetain();
      v123 = swift_allocObject();
      *(void *)(v123 + 16) = v135;
      *(void *)(v123 + 24) = v136;
      v129 = Logger.logObject.getter();
      v130 = static os_log_type_t.debug.getter();
      *(void *)(v210 + 680) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v122 = *(_DWORD *)(v210 + 1796);
      v125 = swift_allocObject();
      *(unsigned char *)(v125 + 16) = 32;
      v126 = swift_allocObject();
      *(unsigned char *)(v126 + 16) = 8;
      v124 = swift_allocObject();
      *(void *)(v124 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
      *(void *)(v124 + 24) = v123;
      v127 = swift_allocObject();
      *(void *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v127 + 24) = v124;
      _allocateUninitializedArray<A>(_:)();
      v128 = v30;
      swift_retain();
      *v128 = partial apply for closure #1 in OSLogArguments.append(_:);
      v128[1] = v125;
      swift_retain();
      v128[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v128[3] = v126;
      swift_retain();
      v128[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v128[5] = v127;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v129, v130))
      {
        os_log_type_t v116 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v117 = createStorage<A>(capacity:type:)(0);
        uint64_t v118 = createStorage<A>(capacity:type:)(1);
        v223 = v116;
        v224 = v117;
        v225 = v118;
        serialize(_:at:)(2, &v223);
        serialize(_:at:)(1, &v223);
        v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v227 = v125;
        uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)&v223, (uint64_t)&v224, (uint64_t)&v225);
        if (v180) {
          return result;
        }
        v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v227 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)&v223, (uint64_t)&v224, (uint64_t)&v225);
        v226 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v227 = v127;
        closure #1 in osLogInternal(_:log:type:)(&v226, (uint64_t)&v223, (uint64_t)&v224, (uint64_t)&v225);
        _os_log_impl(&dword_25D85A000, v129, v130, "Placing fee into send fee label %s", v116, v122);
        destroyStorage<A>(_:count:)(v117, 0, v115);
        destroyStorage<A>(_:count:)(v118, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v116, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v111 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 1560);
      v110 = *(void *)(v210 + 1552);
      uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v210 + 1240);
      uint64_t v100 = *(void *)(v210 + 1128);
      uint64_t v101 = *(void *)(v210 + 1088);
      uint64_t v109 = *(void *)(v210 + 952);
      uint64_t v108 = *(void *)(v210 + 936);

      v102(v100, v101);
      uint64_t v106 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v210 + 1656) = v106;
      *(void *)(v210 + 688) = v106;
      swift_bridgeObjectRetain();
      uint64_t v103 = (id)MEMORY[0x2611B9130](v135, v136);
      swift_bridgeObjectRelease();
      objc_msgSend(v106, sel_setText_, v103);

      type metadata accessor for SATextDecorationRegion();
      _allocateUninitializedArray<A>(_:)();
      v105 = v31;
      id v32 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
      uint64_t v104 = static SATextDecorationRegion.from(_:property:)(v135, v136, v32, v33);
      swift_bridgeObjectRelease();
      *v105 = v104;
      _finalizeUninitializedArray<A>(_:)();
      v107 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v106, sel_setRegions_, v107);

      uint64_t v34 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v210 + 1664) = v34;
      *(void *)(v210 + 696) = v34;
      outlined init with copy of GlobalsProviding(v108 + 80, v210 + 96);
      uint64_t v112 = *(void *)(v210 + 120);
      uint64_t v113 = *(void *)(v210 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v210 + 96), v112);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v111(v109, 0, 1, v110);
      v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v113 + 16) + **(int **)(v113 + 16));
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v210 + 1672) = v35;
      *uint64_t v35 = *(void *)(v210 + 464);
      v35[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      uint64_t v36 = *(void *)(v210 + 1032);
      uint64_t v37 = *(void *)(v210 + 952);
      return v114(v36, v37, v112, v113);
    }
    else
    {
      uint64_t v119 = objc_msgSend(*(id *)(v210 + 1520), sel_note);
      if (v119)
      {
        id v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v97 = v38;

        id v98 = v96;
        v99 = v97;
      }
      else
      {
        id v98 = 0;
        v99 = 0;
      }
      uint64_t v94 = Optional<A>.emptyToNil.getter(v98, v99);
      uint64_t v95 = v39;
      *(void *)(v210 + 1688) = v39;
      if (v39)
      {
        uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v210 + 1192);
        Swift::String v40 = *(void *)(v210 + 1120);
        uint64_t v83 = *(void *)(v210 + 1088);
        *(void *)(v210 + 352) = v94;
        *(void *)(v210 + 360) = v39;
        swift_bridgeObjectRelease();
        Swift::String v41 = Logger.payments.unsafeMutableAddressor();
        v84(v40, v41, v83);
        swift_bridgeObjectRetain();
        id v86 = swift_allocObject();
        *(void *)(v86 + 16) = v94;
        *(void *)(v86 + 24) = v95;
        id v92 = Logger.logObject.getter();
        Class v93 = static os_log_type_t.debug.getter();
        *(void *)(v210 + 656) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint64_t v85 = *(_DWORD *)(v210 + 1792);
        id v88 = swift_allocObject();
        *(unsigned char *)(v88 + 16) = 32;
        id v89 = swift_allocObject();
        *(unsigned char *)(v89 + 16) = 8;
        id v87 = swift_allocObject();
        *(void *)(v87 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        *(void *)(v87 + 24) = v86;
        id v90 = swift_allocObject();
        *(void *)(v90 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v90 + 24) = v87;
        _allocateUninitializedArray<A>(_:)();
        id v91 = v42;
        swift_retain();
        *id v91 = partial apply for closure #1 in OSLogArguments.append(_:);
        v91[1] = v88;
        swift_retain();
        v91[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v91[3] = v89;
        swift_retain();
        v91[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v91[5] = v90;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v92, v93))
        {
          uint64_t v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          id v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v75 = createStorage<A>(capacity:type:)(0);
          uint64_t v76 = createStorage<A>(capacity:type:)(1);
          v218 = v74;
          v219 = v75;
          v220 = v76;
          serialize(_:at:)(2, &v218);
          serialize(_:at:)(1, &v218);
          v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v222 = v88;
          uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)&v218, (uint64_t)&v219, (uint64_t)&v220);
          if (v180) {
            return result;
          }
          v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v222 = v89;
          closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)&v218, (uint64_t)&v219, (uint64_t)&v220);
          v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v222 = v90;
          closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)&v218, (uint64_t)&v219, (uint64_t)&v220);
          _os_log_impl(&dword_25D85A000, v92, v93, "Placing note into send note label %s", v74, v85);
          destroyStorage<A>(_:count:)(v75, 0, v73);
          destroyStorage<A>(_:count:)(v76, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v74, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v69 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 1560);
        uint64_t v68 = *(void *)(v210 + 1552);
        uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v210 + 1240);
        uint64_t v58 = *(void *)(v210 + 1120);
        uint64_t v59 = *(void *)(v210 + 1088);
        uint64_t v67 = *(void *)(v210 + 944);
        id v66 = *(void *)(v210 + 936);

        v60(v58, v59);
        uint64_t v64 = SAUIAppPunchOut.__allocating_init()();
        *(void *)(v210 + 1696) = v64;
        *(void *)(v210 + 664) = v64;
        swift_bridgeObjectRetain();
        uint64_t v61 = (id)MEMORY[0x2611B9130](v94, v95);
        swift_bridgeObjectRelease();
        objc_msgSend(v64, sel_setText_, v61);

        type metadata accessor for SATextDecorationRegion();
        _allocateUninitializedArray<A>(_:)();
        v63 = v51;
        uint64_t v52 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
        uint64_t v62 = static SATextDecorationRegion.from(_:property:)(v94, v95, v52, v53);
        swift_bridgeObjectRelease();
        unsigned char *v63 = v62;
        _finalizeUninitializedArray<A>(_:)();
        uint32_t v65 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v64, sel_setRegions_, v65);

        uint64_t v54 = SAUIAppPunchOut.__allocating_init()();
        *(void *)(v210 + 1704) = v54;
        *(void *)(v210 + 672) = v54;
        outlined init with copy of GlobalsProviding(v66 + 80, v210 + 56);
        uint64_t v70 = *(void *)(v210 + 80);
        id v71 = *(void *)(v210 + 88);
        __swift_project_boxed_opaque_existential_1((void *)(v210 + 56), v70);
        SendPaymentSlots.rawValue.getter(2);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        v69(v67, 0, 1, v68);
        id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 + 16) + **(int **)(v71 + 16));
        uint32_t v55 = (void *)swift_task_alloc();
        *(void *)(v210 + 1712) = v55;
        *uint32_t v55 = *(void *)(v210 + 464);
        v55[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        os_log_type_t v56 = *(void *)(v210 + 1024);
        v57 = *(void *)(v210 + 944);
        return v72(v56, v57, v70, v71);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v77 = *(id *)(v210 + 1536);
        v78 = *(id *)(v210 + 1520);

        uint64_t v82 = *(id *)(v210 + 1304);
        id v81 = *(id *)(v210 + 1296);
        v80 = *(id *)(v210 + 1288);
        uint64_t v79 = *(void **)(v210 + 1280);
        uint64_t v43 = v79;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v79, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v44 = v80;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v80, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v45 = v81;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v81, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v46 = v82;
        SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v82, (uint64_t)&protocol witness table for SASTColumnDataListItem);
        swift_unknownObjectRelease();
        uint64_t v47 = (void *)swift_task_alloc();
        *(void *)(v210 + 1728) = v47;
        *uint64_t v47 = *(void *)(v210 + 464);
        v47[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
        uint64_t v48 = *(void *)(v210 + 896);
        uint64_t v49 = *(void *)(v210 + 880);
        id v50 = *(void *)(v210 + 872);
        return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v50, v49, v48);
      }
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1640) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 944));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  id v42;
  id v43;
  void *v44;
  id v45;
  Class v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  NSObject *log;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  id v84;
  id v85;
  void *v86;
  id v87;
  Class v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint8_t *buf;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  NSObject *oslog;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  id v122;
  void *v123;
  Class isa;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  void *v141;
  uint64_t v142;

  v141 = v0;
  v126 = (id)v0[203];
  v127 = (id)v0[202];
  v120 = (void (*)(uint64_t, uint64_t))v0[199];
  v125 = (id)v0[161];
  v121 = v0[130];
  uint64_t v119 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v122 = (id)MEMORY[0x2611B9130](v1);
  v120(v121, v119);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  objc_msgSend(v126, sel_setText_, v122);

  _allocateUninitializedArray<A>(_:)();
  v123 = v2;
  uint64_t v3 = v127;
  *v123 = v127;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v125, sel_setDecoratedRows_, isa);

  uint64_t v4 = v126;
  objc_msgSend(v125, sel_setTitle_, v126);

  swift_bridgeObjectRelease();
  v129 = *(void *)(v128 + 1640);
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)(v128 + 928) + 8))(*(void *)(v128 + 912));
  v130 = v5;
  if (v5 && (uint64_t v118 = objc_msgSend(v5, sel_feeAmount), v130, v118))
  {
    uint64_t v112 = INCurrencyAmount.formattedString.getter();
    uint64_t v113 = v6;

    v114 = Optional<A>.emptyToNil.getter(v112, v113);
    v115 = v7;
    swift_bridgeObjectRelease();
    os_log_type_t v116 = v114;
    v117 = v115;
  }
  else
  {
    os_log_type_t v116 = 0;
    v117 = 0;
  }
  *(void *)(v128 + 1648) = v117;
  if (v117)
  {
    uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 1192);
    uint64_t v8 = *(void *)(v128 + 1128);
    uint64_t v101 = *(void *)(v128 + 1088);
    *(void *)(v128 + 368) = v116;
    *(void *)(v128 + 376) = v117;
    uint64_t v9 = Logger.payments.unsafeMutableAddressor();
    v102(v8, v9, v101);
    swift_bridgeObjectRetain();
    uint64_t v104 = swift_allocObject();
    *(void *)(v104 + 16) = v116;
    *(void *)(v104 + 24) = v117;
    oslog = Logger.logObject.getter();
    uint64_t v111 = static os_log_type_t.debug.getter();
    *(void *)(v128 + 680) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v128 + 1796);
    uint64_t v106 = swift_allocObject();
    *(unsigned char *)(v106 + 16) = 32;
    v107 = swift_allocObject();
    *(unsigned char *)(v107 + 16) = 8;
    v105 = swift_allocObject();
    *(void *)(v105 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v105 + 24) = v104;
    uint64_t v108 = swift_allocObject();
    *(void *)(v108 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v108 + 24) = v105;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v109 = v10;
    swift_retain();
    *uint64_t v109 = partial apply for closure #1 in OSLogArguments.append(_:);
    v109[1] = v106;
    swift_retain();
    v109[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v109[3] = v107;
    swift_retain();
    v109[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v109[5] = v108;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v111))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v98 = createStorage<A>(capacity:type:)(0);
      v99 = createStorage<A>(capacity:type:)(1);
      v136 = buf;
      v137 = v98;
      v138 = v99;
      serialize(_:at:)(2, &v136);
      serialize(_:at:)(1, &v136);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v106;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      if (v129) {
        return result;
      }
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v107;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v108;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      _os_log_impl(&dword_25D85A000, oslog, v111, "Placing fee into send fee label %s", buf, size);
      destroyStorage<A>(_:count:)(v98, 0, v96);
      destroyStorage<A>(_:count:)(v99, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    id v92 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 1560);
    id v91 = *(void *)(v128 + 1552);
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v128 + 1240);
    id v81 = *(void *)(v128 + 1128);
    uint64_t v82 = *(void *)(v128 + 1088);
    id v90 = *(void *)(v128 + 952);
    id v89 = *(void *)(v128 + 936);

    v83(v81, v82);
    id v87 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v128 + 1656) = v87;
    *(void *)(v128 + 688) = v87;
    swift_bridgeObjectRetain();
    uint64_t v84 = (id)MEMORY[0x2611B9130](v116, v117);
    swift_bridgeObjectRelease();
    objc_msgSend(v87, sel_setText_, v84);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    id v86 = v12;
    id v13 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    uint64_t v85 = static SATextDecorationRegion.from(_:property:)(v116, v117, v13, v14);
    swift_bridgeObjectRelease();
    *id v86 = v85;
    _finalizeUninitializedArray<A>(_:)();
    id v88 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v87, sel_setRegions_, v88);

    id v15 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v128 + 1664) = v15;
    *(void *)(v128 + 696) = v15;
    outlined init with copy of GlobalsProviding(v89 + 80, v128 + 96);
    Class v93 = *(void *)(v128 + 120);
    uint64_t v94 = *(void *)(v128 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v128 + 96), v93);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v92(v90, 0, 1, v91);
    uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v94 + 16) + **(int **)(v94 + 16));
    id v16 = (void *)swift_task_alloc();
    *(void *)(v128 + 1672) = v16;
    *id v16 = *(void *)(v128 + 464);
    v16[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v17 = *(void *)(v128 + 1032);
    id v18 = *(void *)(v128 + 952);
    return v95(v17, v18, v93, v94);
  }
  else
  {
    uint64_t v100 = objc_msgSend(*(id *)(v128 + 1520), sel_note);
    if (v100)
    {
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v78 = v19;

      uint64_t v79 = v77;
      v80 = v78;
    }
    else
    {
      uint64_t v79 = 0;
      v80 = 0;
    }
    uint64_t v75 = Optional<A>.emptyToNil.getter(v79, v80);
    uint64_t v76 = v20;
    *(void *)(v128 + 1688) = v20;
    if (v20)
    {
      uint32_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 1192);
      id v21 = *(void *)(v128 + 1120);
      uint64_t v64 = *(void *)(v128 + 1088);
      *(void *)(v128 + 352) = v75;
      *(void *)(v128 + 360) = v20;
      swift_bridgeObjectRelease();
      char v22 = Logger.payments.unsafeMutableAddressor();
      v65(v21, v22, v64);
      swift_bridgeObjectRetain();
      uint64_t v67 = swift_allocObject();
      *(void *)(v67 + 16) = v75;
      *(void *)(v67 + 24) = v76;
      log = Logger.logObject.getter();
      uint64_t v74 = static os_log_type_t.debug.getter();
      *(void *)(v128 + 656) = 12;
      UnsignedInteger<>.init<A>(_:)();
      id v66 = *(_DWORD *)(v128 + 1792);
      uint64_t v69 = swift_allocObject();
      *(unsigned char *)(v69 + 16) = 32;
      uint64_t v70 = swift_allocObject();
      *(unsigned char *)(v70 + 16) = 8;
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      *(void *)(v68 + 24) = v67;
      id v71 = swift_allocObject();
      *(void *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v71 + 24) = v68;
      _allocateUninitializedArray<A>(_:)();
      id v72 = v23;
      swift_retain();
      *id v72 = partial apply for closure #1 in OSLogArguments.append(_:);
      v72[1] = v69;
      swift_retain();
      v72[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v72[3] = v70;
      swift_retain();
      v72[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v72[5] = v71;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v74))
      {
        uint32_t v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        os_log_type_t v56 = createStorage<A>(capacity:type:)(0);
        v57 = createStorage<A>(capacity:type:)(1);
        v131 = v55;
        v132 = v56;
        v133 = v57;
        serialize(_:at:)(2, &v131);
        serialize(_:at:)(1, &v131);
        v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v135 = v69;
        uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
        if (v129) {
          return result;
        }
        v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v135 = v70;
        closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
        v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v135 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
        _os_log_impl(&dword_25D85A000, log, v74, "Placing note into send note label %s", v55, v66);
        destroyStorage<A>(_:count:)(v56, 0, v54);
        destroyStorage<A>(_:count:)(v57, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v55, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      id v50 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 1560);
      uint64_t v49 = *(void *)(v128 + 1552);
      Swift::String v41 = *(void (**)(uint64_t, uint64_t))(v128 + 1240);
      uint64_t v39 = *(void *)(v128 + 1120);
      Swift::String v40 = *(void *)(v128 + 1088);
      uint64_t v48 = *(void *)(v128 + 944);
      uint64_t v47 = *(void *)(v128 + 936);

      v41(v39, v40);
      uint64_t v45 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v128 + 1696) = v45;
      *(void *)(v128 + 664) = v45;
      swift_bridgeObjectRetain();
      uint64_t v42 = (id)MEMORY[0x2611B9130](v75, v76);
      swift_bridgeObjectRelease();
      objc_msgSend(v45, sel_setText_, v42);

      type metadata accessor for SATextDecorationRegion();
      _allocateUninitializedArray<A>(_:)();
      uint64_t v44 = v32;
      uint64_t v33 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
      uint64_t v43 = static SATextDecorationRegion.from(_:property:)(v75, v76, v33, v34);
      swift_bridgeObjectRelease();
      *uint64_t v44 = v43;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v46 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v45, sel_setRegions_, v46);

      uint64_t v35 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v128 + 1704) = v35;
      *(void *)(v128 + 672) = v35;
      outlined init with copy of GlobalsProviding(v47 + 80, v128 + 56);
      uint64_t v51 = *(void *)(v128 + 80);
      uint64_t v52 = *(void *)(v128 + 88);
      __swift_project_boxed_opaque_existential_1((void *)(v128 + 56), v51);
      SendPaymentSlots.rawValue.getter(2);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      v50(v48, 0, 1, v49);
      uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 + 16) + **(int **)(v52 + 16));
      uint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v128 + 1712) = v36;
      *uint64_t v36 = *(void *)(v128 + 464);
      v36[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      uint64_t v37 = *(void *)(v128 + 1024);
      uint64_t v38 = *(void *)(v128 + 944);
      return v53(v37, v38, v51, v52);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v58 = *(id *)(v128 + 1536);
      uint64_t v59 = *(id *)(v128 + 1520);

      v63 = *(id *)(v128 + 1304);
      uint64_t v62 = *(id *)(v128 + 1296);
      uint64_t v61 = *(id *)(v128 + 1288);
      uint64_t v60 = *(void **)(v128 + 1280);
      uint64_t v24 = v60;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v60, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      id v25 = v61;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v61, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      uint64_t v26 = v62;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v62, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      uint64_t v27 = v63;
      SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v63, (uint64_t)&protocol witness table for SASTColumnDataListItem);
      swift_unknownObjectRelease();
      id v28 = (void *)swift_task_alloc();
      *(void *)(v128 + 1728) = v28;
      *id v28 = *(void *)(v128 + 464);
      v28[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
      id v29 = *(void *)(v128 + 896);
      id v30 = *(void *)(v128 + 880);
      uint64_t v31 = *(void *)(v128 + 872);
      return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v31, v30, v29);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 936));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  id v29;
  id v30;
  void *v31;
  id v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint8_t *buf;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSObject *oslog;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  id v71;
  void *v72;
  Class isa;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  void *v85;
  uint64_t v86;

  uint64_t v85 = v0;
  uint64_t v75 = (id)v0[208];
  uint64_t v76 = (id)v0[207];
  uint64_t v69 = (void (*)(uint64_t, uint64_t))v0[199];
  uint64_t v74 = (id)v0[162];
  uint64_t v70 = v0[129];
  uint64_t v68 = v0[126];
  v0[58] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  id v71 = (id)MEMORY[0x2611B9130](v1);
  v69(v70, v68);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  objc_msgSend(v75, sel_setText_, v71);

  _allocateUninitializedArray<A>(_:)();
  id v72 = v2;
  uint64_t v3 = v76;
  *id v72 = v76;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v74, sel_setDecoratedRows_, isa);

  uint64_t v4 = v75;
  objc_msgSend(v74, sel_setTitle_, v75);

  swift_bridgeObjectRelease();
  v78 = *(void *)(v77 + 1680);
  uint64_t v79 = objc_msgSend(*(id *)(v77 + 1520), sel_note);
  if (v79)
  {
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint32_t v65 = v5;

    id v66 = v64;
    uint64_t v67 = v65;
  }
  else
  {
    id v66 = 0;
    uint64_t v67 = 0;
  }
  uint64_t v62 = Optional<A>.emptyToNil.getter(v66, v67);
  v63 = v6;
  *(void *)(v77 + 1688) = v6;
  if (v6)
  {
    uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 1192);
    uint64_t v7 = *(void *)(v77 + 1120);
    uint64_t v51 = *(void *)(v77 + 1088);
    *(void *)(v77 + 352) = v62;
    *(void *)(v77 + 360) = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.payments.unsafeMutableAddressor();
    v52(v7, v8, v51);
    swift_bridgeObjectRetain();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v62;
    *(void *)(v54 + 24) = v63;
    oslog = Logger.logObject.getter();
    uint64_t v61 = static os_log_type_t.debug.getter();
    *(void *)(v77 + 656) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v77 + 1792);
    os_log_type_t v56 = swift_allocObject();
    *(unsigned char *)(v56 + 16) = 32;
    v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = 8;
    uint32_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    *(void *)(v55 + 24) = v54;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v58 + 24) = v55;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v59 = v9;
    swift_retain();
    *uint64_t v59 = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[1] = v56;
    swift_retain();
    v59[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[3] = v57;
    swift_retain();
    v59[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v59[5] = v58;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v61))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      Swift::String v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v43 = createStorage<A>(capacity:type:)(0);
      uint64_t v44 = createStorage<A>(capacity:type:)(1);
      v80 = buf;
      id v81 = v43;
      uint64_t v82 = v44;
      serialize(_:at:)(2, &v80);
      serialize(_:at:)(1, &v80);
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v56;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      if (v78) {
        return result;
      }
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      _os_log_impl(&dword_25D85A000, oslog, v61, "Placing note into send note label %s", buf, size);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v37 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 1560);
    uint64_t v36 = *(void *)(v77 + 1552);
    id v28 = *(void (**)(uint64_t, uint64_t))(v77 + 1240);
    uint64_t v26 = *(void *)(v77 + 1120);
    uint64_t v27 = *(void *)(v77 + 1088);
    uint64_t v35 = *(void *)(v77 + 944);
    uint64_t v34 = *(void *)(v77 + 936);

    v28(v26, v27);
    id v32 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v77 + 1696) = v32;
    *(void *)(v77 + 664) = v32;
    swift_bridgeObjectRetain();
    id v29 = (id)MEMORY[0x2611B9130](v62, v63);
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_setText_, v29);

    type metadata accessor for SATextDecorationRegion();
    _allocateUninitializedArray<A>(_:)();
    uint64_t v31 = v19;
    uint64_t v20 = default argument 1 of static SATextDecorationRegion.from(_:property:)();
    id v30 = static SATextDecorationRegion.from(_:property:)(v62, v63, v20, v21);
    swift_bridgeObjectRelease();
    char *v31 = v30;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_setRegions_, v33);

    char v22 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v77 + 1704) = v22;
    *(void *)(v77 + 672) = v22;
    outlined init with copy of GlobalsProviding(v34 + 80, v77 + 56);
    uint64_t v38 = *(void *)(v77 + 80);
    uint64_t v39 = *(void *)(v77 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v77 + 56), v38);
    SendPaymentSlots.rawValue.getter(2);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v37(v35, 0, 1, v36);
    Swift::String v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 + 16) + **(int **)(v39 + 16));
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v77 + 1712) = v23;
    *uint64_t v23 = *(void *)(v77 + 464);
    v23[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v24 = *(void *)(v77 + 1024);
    id v25 = *(void *)(v77 + 944);
    return v40(v24, v25, v38, v39);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = *(id *)(v77 + 1536);
    uint64_t v46 = *(id *)(v77 + 1520);

    id v50 = *(id *)(v77 + 1304);
    uint64_t v49 = *(id *)(v77 + 1296);
    uint64_t v48 = *(id *)(v77 + 1288);
    uint64_t v47 = *(void **)(v77 + 1280);
    uint64_t v10 = v47;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v47, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v11 = v48;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v48, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v12 = v49;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v49, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    id v13 = v50;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v50, (uint64_t)&protocol witness table for SASTColumnDataListItem);
    swift_unknownObjectRelease();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v77 + 1728) = v14;
    *uint64_t v14 = *(void *)(v77 + 464);
    v14[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
    id v15 = *(void *)(v77 + 896);
    id v16 = *(void *)(v77 + 880);
    uint64_t v17 = *(void *)(v77 + 872);
    return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v17, v16, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 464) = *v1;
  *(void *)(v5 + 1720) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 928));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;

  id v21 = *(id *)(v0 + 1704);
  char v22 = *(id *)(v0 + 1696);
  id v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1592);
  uint64_t v20 = *(id *)(v0 + 1304);
  id v16 = *(void *)(v0 + 1024);
  uint64_t v14 = *(void *)(v0 + 1008);
  *(void *)(v0 + 464) = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v17 = (id)MEMORY[0x2611B9130](v1);
  v15(v16, v14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  objc_msgSend(v21, sel_setText_, v17);

  _allocateUninitializedArray<A>(_:)();
  id v18 = v2;
  uint64_t v3 = v22;
  *id v18 = v22;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setDecoratedRows_, isa);

  uint64_t v4 = v21;
  objc_msgSend(v20, sel_setTitle_, v21);

  swift_bridgeObjectRelease();
  uint64_t v23 = *(id *)(v0 + 1536);
  uint64_t v24 = *(id *)(v0 + 1520);

  id v28 = *(id *)(v0 + 1304);
  uint64_t v27 = *(id *)(v0 + 1296);
  uint64_t v26 = *(id *)(v0 + 1288);
  id v25 = *(void **)(v0 + 1280);
  uint64_t v5 = v25;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v6 = v26;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v26, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v7 = v27;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v27, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v8 = v28;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v28, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  v29[216] = v9;
  *uint64_t v9 = v29[58];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v10 = v29[112];
  uint64_t v11 = v29[110];
  uint64_t v12 = v29[109];
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v12, v11, v10);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  id v22;
  uint32_t size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSObject *oslog;
  os_log_type_t v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;

  uint64_t v45 = v0;
  uint64_t v1 = (void *)v0[217];
  v0[58] = v0;
  v0[79] = v1;
  uint64_t v39 = objc_msgSend(v1, sel_templateItems);
  if (v39)
  {
    uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v37 = v36;
  }
  else
  {
    uint64_t v37 = 0;
  }
  if (!v37) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v2 = *(void **)(v38 + 1264);
  *(void *)(v38 + 640) = v37;
  uint64_t v35 = objc_msgSend(v2, sel_templateItems);
  if (v35)
  {
    uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0;
  }
  if (!v34) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
  lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
  Array.append<A>(contentsOf:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v22 = *(id *)(v38 + 1264);
  id v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 1192);
  uint64_t v4 = *(void *)(v38 + 1104);
  uint64_t v20 = *(void *)(v38 + 1088);
  objc_msgSend(v22, sel_setTemplateItems_);

  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  v21(v4, v5, v20);
  uint64_t v6 = v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  oslog = Logger.logObject.getter();
  uint64_t v31 = static os_log_type_t.debug.getter();
  *(void *)(v38 + 648) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v38 + 1788);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 32;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 8;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  *(void *)(v25 + 24) = v24;
  id v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v28 + 24) = v25;
  _allocateUninitializedArray<A>(_:)();
  id v29 = v7;
  swift_retain();
  *id v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v31))
  {
    uint64_t v8 = *(void *)(v38 + 1744);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    id v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    Swift::String v40 = buf;
    Swift::String v41 = v18;
    uint64_t v42 = v19;
    serialize(_:at:)(2, &v40);
    serialize(_:at:)(1, &v40);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v44 = v26;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v43, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v42);
    if (v8) {
      return result;
    }
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v44 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v43, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v42);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v44 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v43, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v42);
    _os_log_impl(&dword_25D85A000, oslog, v31, "#ConfirmationViewBuilder created SASTItemGroup %s", buf, size);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  id v15 = *(id *)(v38 + 1264);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v38 + 1240);
  uint64_t v12 = *(void *)(v38 + 1104);
  id v13 = *(void *)(v38 + 1088);

  v14(v12, v13);
  uint64_t v9 = v15;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v38 + 1752) = v10;
  *uint64_t v10 = *(void *)(v38 + 464);
  v10[1] = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v11 = *(void *)(v38 + 896);
  return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(v11);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t);
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  uint64_t v6 = (id)v0[220];
  uint64_t v9 = (id)v0[217];
  uint64_t v10 = (id)v0[163];
  uint64_t v11 = (id)v0[162];
  uint64_t v12 = (id)v0[161];
  id v13 = (id)v0[160];
  uint64_t v1 = (void *)v0[158];
  uint64_t v14 = v1;
  v0[58] = v0;
  objc_msgSend(v1, sel_setConfirmationOptions_);

  type metadata accessor for SAAceView();
  uint64_t v8 = _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v2;
  uint64_t v3 = v14;
  *uint64_t v7 = v14;
  _finalizeUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0[58] + 8);
  return v4(v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  uint64_t v4 = (id)v0[167];
  uint64_t v5 = (id)v0[166];
  uint64_t v6 = (id)v0[164];
  uint64_t v7 = (id)v0[163];
  uint64_t v8 = (id)v0[162];
  uint64_t v9 = (id)v0[161];
  uint64_t v10 = (id)v0[160];
  uint64_t v11 = (id)v0[158];
  uint64_t v1 = v0[125];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[177];
  uint64_t v5 = (id)v0[176];
  uint64_t v6 = (id)v0[167];
  uint64_t v7 = (id)v0[166];
  uint64_t v8 = (id)v0[164];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[124];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[182];
  uint64_t v5 = (id)v0[181];
  uint64_t v6 = (id)v0[167];
  uint64_t v7 = (id)v0[166];
  uint64_t v8 = (id)v0[164];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[123];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[187];
  uint64_t v5 = (id)v0[186];
  uint64_t v6 = (id)v0[167];
  uint64_t v7 = (id)v0[166];
  uint64_t v8 = (id)v0[164];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[122];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  uint64_t v4 = (id)v0[193];
  uint64_t v5 = (id)v0[192];
  uint64_t v6 = (id)v0[190];
  uint64_t v7 = (id)v0[163];
  uint64_t v8 = (id)v0[162];
  uint64_t v9 = (id)v0[161];
  uint64_t v10 = (id)v0[160];
  uint64_t v11 = (id)v0[158];
  uint64_t v1 = v0[121];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[203];
  uint64_t v5 = (id)v0[202];
  uint64_t v6 = (id)v0[193];
  uint64_t v7 = (id)v0[192];
  uint64_t v8 = (id)v0[190];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[120];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[208];
  uint64_t v5 = (id)v0[207];
  uint64_t v6 = (id)v0[193];
  uint64_t v7 = (id)v0[192];
  uint64_t v8 = (id)v0[190];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[119];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  uint64_t v4 = (id)v0[213];
  uint64_t v5 = (id)v0[212];
  uint64_t v6 = (id)v0[193];
  uint64_t v7 = (id)v0[192];
  uint64_t v8 = (id)v0[190];
  uint64_t v9 = (id)v0[163];
  uint64_t v10 = (id)v0[162];
  uint64_t v11 = (id)v0[161];
  uint64_t v12 = (id)v0[160];
  id v13 = (id)v0[158];
  uint64_t v1 = v0[118];
  v0[58] = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  uint64_t v1 = (void *)v0[163];
  uint64_t v4 = (id)v0[162];
  uint64_t v5 = (id)v0[161];
  uint64_t v6 = (id)v0[160];
  uint64_t v7 = (id)v0[158];
  v0[58] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[58] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  uint64_t v3 = (id)v0[217];
  uint64_t v4 = (id)v0[163];
  uint64_t v5 = (id)v0[162];
  uint64_t v6 = (id)v0[161];
  uint64_t v7 = (id)v0[160];
  uint64_t v8 = (id)v0[158];
  v0[58] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[58] + 8);
  return v1();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v7 = *v2 + 464;
  *(void *)uint64_t v7 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
  }
  return v4(v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[58] = *v2;
  v5[217] = a1;
  v5[218] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    uint64_t v3 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[58] = *v2;
  v5[220] = a1;
  v5[221] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    uint64_t v3 = ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[105] = v8;
  v9[104] = a8;
  v9[103] = a6;
  v9[102] = a4;
  v9[101] = a3;
  v9[100] = a2;
  v9[99] = a1;
  v9[60] = v9;
  v9[61] = 0;
  v9[62] = 0;
  v9[63] = 0;
  v9[64] = 0;
  v9[65] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  v9[70] = 0;
  v9[71] = 0;
  v9[72] = 0;
  v9[80] = 0;
  v9[84] = 0;
  v9[24] = 0;
  v9[25] = 0;
  v9[30] = 0;
  v9[31] = 0;
  v9[89] = 0;
  v9[91] = 0;
  v9[44] = 0;
  v9[45] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[93] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[106] = swift_task_alloc();
  v9[107] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TemplatingResult();
  v9[108] = v10;
  v9[109] = *(void *)(v10 - 8);
  v9[110] = swift_task_alloc();
  v9[111] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v9[112] = v11;
  v9[113] = *(void *)(v11 - 8);
  v9[114] = swift_task_alloc();
  v9[115] = swift_task_alloc();
  v9[61] = a1;
  v9[62] = a2;
  v9[63] = a3;
  v9[64] = a4;
  v9[65] = v8;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v288 = *(void *)(v0 + 904);
  uint64_t v289 = *(void *)(v0 + 896);
  *(void *)(v0 + 480) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  v290 = *(void (**)(uint64_t, uint64_t, uint64_t))(v288 + 16);
  v290(v1, v2, v289);
  v293 = Logger.logObject.getter();
  os_log_type_t v292 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 528) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v291 = *(unsigned int *)(v0 + 1056);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v294 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v293, v292))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v282 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v284 = createStorage<A>(capacity:type:)(0);
    uint64_t v285 = createStorage<A>(capacity:type:)(0);
    *(void *)(v287 + 760) = buf;
    *(void *)(v287 + 768) = v284;
    *(void *)(v287 + 776) = v285;
    serialize(_:at:)(0, (unsigned char **)(v287 + 760));
    serialize(_:at:)(0, (unsigned char **)(v287 + 760));
    *(void *)(v287 + 784) = v294;
    v286 = (void *)swift_task_alloc();
    v286[2] = v287 + 760;
    v286[3] = v287 + 768;
    v286[4] = v287 + 776;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v293, v292, "#ConfirmationViewBuilder makePaymentConfirmationPhoneView", buf, v291);
    destroyStorage<A>(_:count:)(v284, 0, v282);
    destroyStorage<A>(_:count:)(v285, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v279 = *(void *)(v287 + 920);
  uint64_t v280 = *(void *)(v287 + 896);
  uint64_t v278 = *(void *)(v287 + 904);

  v281 = *(void (**)(uint64_t, uint64_t))(v278 + 8);
  v281(v279, v280);
  if (App.isFirstParty.getter())
  {
    id v3 = *(id *)(v287 + 800);
    uint64_t v277 = App.systemUIExtensionBundleId.getter();
    if (v4)
    {
      uint64_t v275 = MEMORY[0x2611B9130](v277);
      swift_bridgeObjectRelease();
      v276 = (void *)v275;
    }
    else
    {
      v276 = 0;
    }
    id v274 = *(id *)(v287 + 800);
    objc_msgSend(v274, sel__setUiExtensionBundleId_);
  }
  id v272 = (id)static CasinoFactory.makePlaceholderCardSection()();
  *(void *)(v287 + 928) = v272;
  *(void *)(v287 + 536) = v272;
  type metadata accessor for SAAppsLaunchApp();
  id v273 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v287 + 936) = v273;
  *(void *)(v287 + 544) = v273;
  id v5 = v273;
  uint64_t v6 = App.appIdentifier.getter();
  if (v7)
  {
    uint64_t v270 = MEMORY[0x2611B9130](v6);
    swift_bridgeObjectRelease();
    v271 = (void *)v270;
  }
  else
  {
    v271 = 0;
  }
  objc_msgSend(v273, sel_setAppId_);

  type metadata accessor for SFAbstractCommand();
  _allocateUninitializedArray<A>(_:)();
  v264 = v8;
  id v9 = v273;
  uint64_t v263 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
  swift_unknownObjectRelease();
  uint64_t *v264 = v263;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v272, sel_setCommands_, isa);

  type metadata accessor for SFCardSection();
  *(void *)(v287 + 552) = Array.init()();
  type metadata accessor for SFRichTitleCardSection();
  id v266 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v287 + 944) = v266;
  *(void *)(v287 + 560) = v266;
  type metadata accessor for SFRowCardSection();
  id v267 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v287 + 952) = v267;
  *(void *)(v287 + 568) = v267;
  id v268 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v287 + 960) = v268;
  *(void *)(v287 + 576) = v268;
  *(void *)(v287 + 96) = 0;
  *(void *)(v287 + 104) = 0;
  *(void *)(v287 + 584) = 0;
  *(void *)(v287 + 592) = 0;
  self;
  id v269 = (id)swift_dynamicCastObjCClass();
  if (v269)
  {
    id v10 = v269;
    *(void *)(v287 + 728) = v269;
    id v11 = v266;
    _allocateUninitializedArray<A>(_:)();
    v260 = v12;
    *(void *)(v287 + 320) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v287 + 328) = v13;
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    *(void *)(v287 + 336) = SiriKitPaymentsIntent.simpleClassName.getter();
    *(void *)(v287 + 344) = v15;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".payer", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t *v260 = String.init(stringInterpolation:)();
    v260[1] = v17;
    _finalizeUninitializedArray<A>(_:)();
    Class v261 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v266, sel_setParameterKeyPaths_, v261);

    id v18 = v266;
    id v262 = objc_msgSend(v269, sel_payer);
    if (v262)
    {
      id v255 = objc_msgSend(v262, sel_displayName);
      uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v257 = v19;

      uint64_t v258 = v256;
      uint64_t v259 = v257;
    }
    else
    {
      uint64_t v258 = 0;
      uint64_t v259 = 0;
    }
    if (v259)
    {
      uint64_t v253 = MEMORY[0x2611B9130](v258);
      swift_bridgeObjectRelease();
      v254 = (void *)v253;
    }
    else
    {
      v254 = 0;
    }
    objc_msgSend(v266, sel_setTitle_);

    id v252 = objc_msgSend(v269, sel_currencyAmount);
    if (v252)
    {
      *(void *)(v287 + 744) = v252;
      id v20 = v266;
      id v251 = objc_msgSend(v266, sel_parameterKeyPaths);
      if (v251)
      {
        uint64_t v249 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v250 = v249;
      }
      else
      {
        uint64_t v250 = 0;
      }
      *(void *)(v287 + 752) = v250;
      if (*(void *)(v287 + 752))
      {
        *(void *)(v287 + 448) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v287 + 456) = v21;
        Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        *(void *)(v287 + 464) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(void *)(v287 + 472) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".currencyAmount", 0xFuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(void *)(v287 + 752))
        {
          Class v244 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v245 = v244;
        }
        else
        {
          Class v245 = 0;
        }
        objc_msgSend(v266, sel_setParameterKeyPaths_);
      }
      else
      {
        uint64_t v248 = *(void *)(v287 + 752);
        swift_bridgeObjectRetain();
        if (v248)
        {
          Class v246 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v247 = v246;
        }
        else
        {
          Class v247 = 0;
        }
        objc_msgSend(v266, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      *(void *)(v287 + 96) = INCurrencyAmount.formattedString.getter();
      *(void *)(v287 + 104) = v25;
      swift_bridgeObjectRelease();
    }
    id v243 = (id)(*(uint64_t (**)(void))(*(void *)(v287 + 832) + 8))(*(void *)(v287 + 824));
    if (v243
      && (id v242 = objc_msgSend(v243, sel_feeAmount), v243, v242))
    {
      uint64_t v236 = INCurrencyAmount.formattedString.getter();
      uint64_t v237 = v26;

      uint64_t v238 = Optional<A>.emptyToNil.getter(v236, v237);
      uint64_t v239 = v27;
      swift_bridgeObjectRelease();
      uint64_t v240 = v238;
      uint64_t v241 = v239;
    }
    else
    {
      uint64_t v240 = 0;
      uint64_t v241 = 0;
    }
    if (v241)
    {
      *(void *)(v287 + 400) = v240;
      *(void *)(v287 + 408) = v241;
      id v28 = v267;
      id v235 = objc_msgSend(v267, sel_parameterKeyPaths);
      if (v235)
      {
        uint64_t v233 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v234 = v233;
      }
      else
      {
        uint64_t v234 = 0;
      }
      *(void *)(v287 + 736) = v234;
      if (*(void *)(v287 + 736))
      {
        *(void *)(v287 + 416) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v287 + 424) = v29;
        Swift::String v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v30);
        swift_bridgeObjectRelease();
        *(void *)(v287 + 432) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(void *)(v287 + 440) = v31;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".feeAmount", 0xAuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(void *)(v287 + 736))
        {
          Class v228 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v229 = v228;
        }
        else
        {
          Class v229 = 0;
        }
        objc_msgSend(v267, sel_setParameterKeyPaths_);
      }
      else
      {
        uint64_t v232 = *(void *)(v287 + 736);
        swift_bridgeObjectRetain();
        if (v232)
        {
          Class v230 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v231 = v230;
        }
        else
        {
          Class v231 = 0;
        }
        objc_msgSend(v267, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      id v33 = @nonobjc SFRichText.__allocating_init(string:)(v240, v241);
      uint64_t v34 = *(void **)(v287 + 584);
      *(void *)(v287 + 584) = v33;

      swift_bridgeObjectRelease();
    }
    id v227 = objc_msgSend(v269, sel_note);
    if (v227)
    {
      uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v224 = v35;

      uint64_t v225 = v223;
      uint64_t v226 = v224;
    }
    else
    {
      uint64_t v225 = 0;
      uint64_t v226 = 0;
    }
    uint64_t v221 = Optional<A>.emptyToNil.getter(v225, v226);
    uint64_t v222 = v36;
    if (v36)
    {
      *(void *)(v287 + 352) = v221;
      *(void *)(v287 + 360) = v36;
      swift_bridgeObjectRelease();
      id v37 = v268;
      _allocateUninitializedArray<A>(_:)();
      v219 = v38;
      *(void *)(v287 + 368) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v287 + 376) = v39;
      Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v40);
      swift_bridgeObjectRelease();
      *(void *)(v287 + 384) = SiriKitPaymentsIntent.simpleClassName.getter();
      *(void *)(v287 + 392) = v41;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      Swift::String v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".note", 5uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t *v219 = String.init(stringInterpolation:)();
      v219[1] = v43;
      _finalizeUninitializedArray<A>(_:)();
      Class v220 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v268, sel_setParameterKeyPaths_, v220);

      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      id v44 = @nonobjc SFRichText.__allocating_init(string:)(v221, v222);
      uint64_t v45 = *(void **)(v287 + 592);
      *(void *)(v287 + 592) = v44;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    self;
    id v218 = (id)swift_dynamicCastObjCClass();
    if (!v218)
    {
      uint64_t v82 = *(void *)(v287 + 912);
      uint64_t v169 = *(void *)(v287 + 896);
      uint64_t v83 = Logger.payments.unsafeMutableAddressor();
      v290(v82, v83, v169);
      oslog = Logger.logObject.getter();
      os_log_type_t v171 = static os_log_type_t.error.getter();
      *(void *)(v287 + 600) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v287 + 1060);
      uint64_t v173 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v171))
      {
        v165 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v166 = createStorage<A>(capacity:type:)(0);
        uint64_t v167 = createStorage<A>(capacity:type:)(0);
        *(void *)(v287 + 608) = v165;
        *(void *)(v287 + 616) = v166;
        *(void *)(v287 + 624) = v167;
        serialize(_:at:)(0, (unsigned char **)(v287 + 608));
        serialize(_:at:)(0, (unsigned char **)(v287 + 608));
        *(void *)(v287 + 632) = v173;
        v168 = (void *)swift_task_alloc();
        v168[2] = v287 + 608;
        v168[3] = v287 + 616;
        v168[4] = v287 + 624;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, oslog, v171, "#ConfirmationViewBuilder makePaymentConfirmationView (Phone) encountered unexpected intent type", v165, size);
        destroyStorage<A>(_:count:)(v166, 0, v164);
        destroyStorage<A>(_:count:)(v167, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v165, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v160 = *(void *)(v287 + 912);
      uint64_t v161 = *(void *)(v287 + 896);

      v281(v160, v161);
      *(void *)(v287 + 112) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v287 + 120) = v84;
      Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v85);
      swift_bridgeObjectRelease();
      swift_getObjectType();
      DefaultStringInterpolation.appendInterpolation(_:)();
      Swift::String v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v163 = String.init(stringInterpolation:)();
      uint64_t v162 = v87;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(void *)uint64_t v88 = v163;
      *(void *)(v88 + 8) = v162;
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      *(void *)(v88 + 32) = 0;
      *(void *)(v88 + 40) = 0;
      *(unsigned char *)(v88 + 48) = 4;
      swift_willThrow();
      outlined destroy of SFRichText?((id *)(v287 + 592));
      outlined destroy of SFRichText?((id *)(v287 + 584));
      outlined destroy of String.UTF8View();

      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v89 = *(uint64_t (**)())(*(void *)(v287 + 480) + 8);
      return v89();
    }
    id v46 = v218;
    *(void *)(v287 + 640) = v218;
    id v47 = v266;
    _allocateUninitializedArray<A>(_:)();
    v215 = v48;
    *(void *)(v287 + 128) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v287 + 136) = v49;
    Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v50);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    *(void *)(v287 + 144) = SiriKitPaymentsIntent.simpleClassName.getter();
    *(void *)(v287 + 152) = v51;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    Swift::String v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".payee", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t *v215 = String.init(stringInterpolation:)();
    v215[1] = v53;
    _finalizeUninitializedArray<A>(_:)();
    Class v216 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v266, sel_setParameterKeyPaths_, v216);

    id v54 = v266;
    id v217 = objc_msgSend(v218, sel_payee);
    if (v217)
    {
      id v210 = objc_msgSend(v217, sel_displayName);
      uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v212 = v55;

      uint64_t v213 = v211;
      uint64_t v214 = v212;
    }
    else
    {
      uint64_t v213 = 0;
      uint64_t v214 = 0;
    }
    if (v214)
    {
      uint64_t v208 = MEMORY[0x2611B9130](v213);
      swift_bridgeObjectRelease();
      v209 = (void *)v208;
    }
    else
    {
      v209 = 0;
    }
    objc_msgSend(v266, sel_setTitle_);

    id v207 = objc_msgSend(v218, sel_currencyAmount);
    if (v207)
    {
      *(void *)(v287 + 712) = v207;
      id v56 = v266;
      id v206 = objc_msgSend(v266, sel_parameterKeyPaths);
      if (v206)
      {
        uint64_t v204 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v205 = v204;
      }
      else
      {
        uint64_t v205 = 0;
      }
      *(void *)(v287 + 720) = v205;
      if (*(void *)(v287 + 720))
      {
        *(void *)(v287 + 288) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v287 + 296) = v57;
        Swift::String v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v58);
        swift_bridgeObjectRelease();
        *(void *)(v287 + 304) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(void *)(v287 + 312) = v59;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".currencyAmount", 0xFuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v60);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(void *)(v287 + 720))
        {
          Class v199 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v200 = v199;
        }
        else
        {
          Class v200 = 0;
        }
        objc_msgSend(v266, sel_setParameterKeyPaths_);
      }
      else
      {
        uint64_t v203 = *(void *)(v287 + 720);
        swift_bridgeObjectRetain();
        if (v203)
        {
          Class v201 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v202 = v201;
        }
        else
        {
          Class v202 = 0;
        }
        objc_msgSend(v266, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      *(void *)(v287 + 96) = INCurrencyAmount.formattedString.getter();
      *(void *)(v287 + 104) = v61;
      swift_bridgeObjectRelease();
    }
    id v198 = (id)(*(uint64_t (**)(void))(*(void *)(v287 + 832) + 8))(*(void *)(v287 + 824));
    if (v198
      && (id v197 = objc_msgSend(v198, sel_feeAmount), v198, v197))
    {
      uint64_t v191 = INCurrencyAmount.formattedString.getter();
      uint64_t v192 = v62;

      uint64_t v193 = Optional<A>.emptyToNil.getter(v191, v192);
      uint64_t v194 = v63;
      swift_bridgeObjectRelease();
      uint64_t v195 = v193;
      uint64_t v196 = v194;
    }
    else
    {
      uint64_t v195 = 0;
      uint64_t v196 = 0;
    }
    if (v196)
    {
      *(void *)(v287 + 240) = v195;
      *(void *)(v287 + 248) = v196;
      id v64 = v267;
      id v190 = objc_msgSend(v267, sel_parameterKeyPaths);
      if (v190)
      {
        uint64_t v188 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v189 = v188;
      }
      else
      {
        uint64_t v189 = 0;
      }
      *(void *)(v287 + 704) = v189;
      if (*(void *)(v287 + 704))
      {
        *(void *)(v287 + 256) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v287 + 264) = v65;
        Swift::String v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v66);
        swift_bridgeObjectRelease();
        *(void *)(v287 + 272) = SiriKitPaymentsIntent.simpleClassName.getter();
        *(void *)(v287 + 280) = v67;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v68 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".feeAmount", 0xAuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v68);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        String.init(stringInterpolation:)();
        specialized Array.append(_:)();
        if (*(void *)(v287 + 704))
        {
          Class v183 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v184 = v183;
        }
        else
        {
          Class v184 = 0;
        }
        objc_msgSend(v267, sel_setParameterKeyPaths_);
      }
      else
      {
        uint64_t v187 = *(void *)(v287 + 704);
        swift_bridgeObjectRetain();
        if (v187)
        {
          Class v185 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v186 = v185;
        }
        else
        {
          Class v186 = 0;
        }
        objc_msgSend(v267, sel_setParameterKeyPaths_);

        outlined destroy of [SFCardSection]();
      }
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      id v69 = @nonobjc SFRichText.__allocating_init(string:)(v195, v196);
      uint64_t v70 = *(void **)(v287 + 584);
      *(void *)(v287 + 584) = v69;

      swift_bridgeObjectRelease();
    }
    id v182 = objc_msgSend(v218, sel_note);
    if (v182)
    {
      uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v179 = v71;

      uint64_t v180 = v178;
      uint64_t v181 = v179;
    }
    else
    {
      uint64_t v180 = 0;
      uint64_t v181 = 0;
    }
    uint64_t v176 = Optional<A>.emptyToNil.getter(v180, v181);
    uint64_t v177 = v72;
    if (v72)
    {
      *(void *)(v287 + 192) = v176;
      *(void *)(v287 + 200) = v72;
      swift_bridgeObjectRelease();
      id v73 = v268;
      _allocateUninitializedArray<A>(_:)();
      v174 = v74;
      *(void *)(v287 + 208) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v287 + 216) = v75;
      Swift::String v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v76);
      swift_bridgeObjectRelease();
      *(void *)(v287 + 224) = SiriKitPaymentsIntent.simpleClassName.getter();
      *(void *)(v287 + 232) = v77;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      Swift::String v78 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".note", 5uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t *v174 = String.init(stringInterpolation:)();
      v174[1] = v79;
      _finalizeUninitializedArray<A>(_:)();
      Class v175 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v268, sel_setParameterKeyPaths_, v175);

      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      id v80 = @nonobjc SFRichText.__allocating_init(string:)(v176, v177);
      id v81 = *(void **)(v287 + 592);
      *(void *)(v287 + 592) = v80;
    }
    swift_bridgeObjectRelease();
  }
  id v91 = v266;
  uint64_t v158 = *(void *)(v287 + 96);
  uint64_t v159 = *(void *)(v287 + 104);
  swift_bridgeObjectRetain();
  if (v159)
  {
    uint64_t v156 = MEMORY[0x2611B9130](v158);
    swift_bridgeObjectRelease();
    v157 = (void *)v156;
  }
  else
  {
    v157 = 0;
  }
  objc_msgSend(v266, sel_setSubtitle_);

  id v92 = v266;
  objc_msgSend(v266, sel_setIsCentered_, 1);

  id v93 = v272;
  *(void *)(v287 + 648) = v272;
  *(void *)(v287 + 968) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  id v94 = v266;
  id v155 = objc_msgSend(v266, sel_title);
  if (v155)
  {
    uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v152 = v95;

    uint64_t v153 = v151;
    uint64_t v154 = v152;
  }
  else
  {
    uint64_t v153 = 0;
    uint64_t v154 = 0;
  }

  uint64_t v149 = Optional<A>.emptyToNil.getter(v153, v154);
  uint64_t v150 = v96;
  swift_bridgeObjectRelease();
  *(void *)(v287 + 160) = v149;
  *(void *)(v287 + 168) = v150;
  BOOL v148 = *(void *)(v287 + 168) != 0;
  outlined destroy of String.UTF8View();
  id v97 = v266;
  if (v148)
  {
    char v147 = 1;
  }
  else
  {
    id v98 = v266;
    id v146 = objc_msgSend(v266, sel_subtitle);
    if (v146)
    {
      uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v143 = v99;

      uint64_t v144 = v142;
      uint64_t v145 = v143;
    }
    else
    {
      uint64_t v144 = 0;
      uint64_t v145 = 0;
    }

    uint64_t v140 = Optional<A>.emptyToNil.getter(v144, v145);
    uint64_t v141 = v100;
    swift_bridgeObjectRelease();
    *(void *)(v287 + 176) = v140;
    *(void *)(v287 + 184) = v141;
    BOOL v139 = *(void *)(v287 + 184) != 0;
    outlined destroy of String.UTF8View();
    char v147 = v139;
  }

  if (v147)
  {
    id v101 = v266;
    *(void *)(v287 + 696) = v266;
    Array.append(_:)();
  }
  v138 = *(void **)(v287 + 592);
  id v102 = v138;
  *(void *)(v287 + 656) = v138;
  BOOL v137 = *(void *)(v287 + 656) != 0;
  outlined destroy of SFRichText?((id *)(v287 + 656));
  if (v137)
  {
    uint64_t v133 = *(void *)(v287 + 856);
    uint64_t v132 = *(void *)(v287 + 840);
    *(void *)(v287 + 976) = type metadata accessor for SFRichText();
    outlined init with copy of GlobalsProviding(v132 + 80, v287 + 56);
    uint64_t v134 = *(void *)(v287 + 80);
    uint64_t v135 = *(void *)(v287 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v287 + 56), v134);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Note", 4uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v103 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v103 - 8) + 56))(v133, 0, 1);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v135 + 8) + **(int **)(v135 + 8));
    uint64_t v104 = (void *)swift_task_alloc();
    uint64_t v105 = v134;
    uint64_t v106 = v135;
    v107 = v136;
    *(void *)(v287 + 984) = v104;
    *uint64_t v104 = *(void *)(v287 + 480);
    v104[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v108 = *(void *)(v287 + 888);
    uint64_t v109 = *(void *)(v287 + 856);
    return v107(v108, v109, v105, v106);
  }
  v110 = *(void **)(v287 + 584);
  id v111 = v110;
  *(void *)(v287 + 664) = v110;
  BOOL v131 = *(void *)(v287 + 664) != 0;
  outlined destroy of SFRichText?((id *)(v287 + 664));
  if (v131)
  {
    uint64_t v127 = *(void *)(v287 + 848);
    uint64_t v126 = *(void *)(v287 + 840);
    *(void *)(v287 + 1000) = type metadata accessor for SFRichText();
    outlined init with copy of GlobalsProviding(v126 + 80, v287 + 16);
    uint64_t v128 = *(void *)(v287 + 40);
    uint64_t v129 = *(void *)(v287 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v287 + 16), v128);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v112 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v112 - 8) + 56))(v127, 0, 1);
    v130 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v129 + 16) + **(int **)(v129 + 16));
    uint64_t v113 = (void *)swift_task_alloc();
    uint64_t v105 = v128;
    uint64_t v106 = v129;
    v107 = v130;
    *(void *)(v287 + 1008) = v113;
    *uint64_t v113 = *(void *)(v287 + 480);
    v113[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v108 = *(void *)(v287 + 880);
    uint64_t v109 = *(void *)(v287 + 848);
    return v107(v108, v109, v105, v106);
  }
  id v121 = *(id *)(v287 + 808);
  id v122 = *(id *)(v287 + 800);
  uint64_t v123 = *(void *)(v287 + 792);
  type metadata accessor for SACardSnippet();
  swift_bridgeObjectRetain();
  id v114 = v122;
  id v115 = v121;
  id v125 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
  *(void *)(v287 + 1024) = v125;

  swift_bridgeObjectRelease();
  *(void *)(v287 + 672) = v125;
  id v116 = v125;
  char v117 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  id v124 = static AceViewProviding.makeSash(app:isDisambiguation:)(v123, v117 & 1);
  objc_msgSend(v125, sel_setSash_);

  id v118 = v125;
  uint64_t v119 = (void *)swift_task_alloc();
  *(void *)(v287 + 1032) = v119;
  *uint64_t v119 = *(void *)(v287 + 480);
  v119[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v120 = *(void *)(v287 + 816);
  return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(v120);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 480) = *v1;
  *(void *)(v5 + 992) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 840));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  id v12;
  id v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;

  id v37 = (void *)v0[120];
  uint64_t v31 = v0[111];
  Swift::String v30 = v0[109];
  Swift::String v32 = v0[108];
  v0[60] = v0;
  id v33 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v34 = v1;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  uint64_t v35 = @nonobjc SFRichText.__allocating_init(string:)(v33, v34);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  objc_msgSend(v37, sel_setLeadingText_, v35);

  uint64_t v36 = (void *)v0[74];
  uint64_t v2 = v36;
  objc_msgSend(v37, sel_setTrailingText_, v36);

  id v3 = v37;
  v0[86] = v37;
  Array.append(_:)();
  uint64_t v4 = (void *)v0[73];
  id v5 = v4;
  v0[83] = v4;
  id v28 = v0[83] != 0;
  outlined destroy of SFRichText?((id *)(v29 + 664));
  if (v28)
  {
    Swift::String v24 = *(void *)(v29 + 848);
    uint64_t v23 = *(void *)(v29 + 840);
    *(void *)(v29 + 1000) = type metadata accessor for SFRichText();
    outlined init with copy of GlobalsProviding(v23 + 80, v29 + 16);
    uint64_t v25 = *(void *)(v29 + 40);
    uint64_t v26 = *(void *)(v29 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v29 + 16), v25);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 56))(v24, 0, 1);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 + 16) + **(int **)(v26 + 16));
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v29 + 1008) = v7;
    *uint64_t v7 = *(void *)(v29 + 480);
    v7[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v8 = *(void *)(v29 + 880);
    id v9 = *(void *)(v29 + 848);
    return v27(v8, v9, v25, v26);
  }
  else
  {
    id v18 = *(id *)(v29 + 808);
    uint64_t v19 = *(id *)(v29 + 800);
    id v20 = *(void *)(v29 + 792);
    type metadata accessor for SACardSnippet();
    swift_bridgeObjectRetain();
    id v11 = v19;
    uint64_t v12 = v18;
    Swift::String v22 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
    *(void *)(v29 + 1024) = v22;

    swift_bridgeObjectRelease();
    *(void *)(v29 + 672) = v22;
    uint64_t v13 = v22;
    Swift::String v14 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    uint64_t v21 = static AceViewProviding.makeSash(app:isDisambiguation:)(v20, v14 & 1);
    objc_msgSend(v22, sel_setSash_);

    uint64_t v15 = v22;
    Swift::String v16 = (void *)swift_task_alloc();
    *(void *)(v29 + 1032) = v16;
    *Swift::String v16 = *(void *)(v29 + 480);
    v16[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
    uint64_t v17 = *(void *)(v29 + 816);
    return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(v17);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 480) = *v1;
  *(void *)(v5 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 832));
    uint64_t v2 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;

  uint64_t v19 = (id)v0[119];
  uint64_t v13 = v0[110];
  uint64_t v12 = v0[109];
  Swift::String v14 = v0[108];
  v0[60] = v0;
  uint64_t v15 = TemplatingResult.resultSectionsAsString.getter();
  Swift::String v16 = v1;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  uint64_t v17 = @nonobjc SFRichText.__allocating_init(string:)(v15, v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v19, sel_setLeadingText_, v17);

  id v18 = (id)v0[73];
  uint64_t v2 = v18;
  objc_msgSend(v19, sel_setTrailingText_, v18);

  id v3 = v19;
  v0[85] = v19;
  Array.append(_:)();
  id v20 = (id)v0[101];
  uint64_t v21 = (id)v0[100];
  Swift::String v22 = v0[99];
  type metadata accessor for SACardSnippet();
  swift_bridgeObjectRetain();
  uint64_t v4 = v21;
  id v5 = v20;
  Swift::String v24 = (id)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
  v0[128] = v24;

  swift_bridgeObjectRelease();
  v0[84] = v24;
  uint64_t v6 = v24;
  uint64_t v7 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  uint64_t v23 = static AceViewProviding.makeSash(app:isDisambiguation:)(v22, v7 & 1);
  objc_msgSend(v24, sel_setSash_);

  uint64_t v8 = v24;
  id v9 = (void *)swift_task_alloc();
  v25[129] = v9;
  *id v9 = v25[60];
  v9[1] = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  id v10 = v25[102];
  return ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(v10);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t);
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  uint64_t v6 = *(id *)(v0 + 1040);
  uint64_t v1 = *(void **)(v0 + 1024);
  id v9 = v1;
  id v10 = *(id *)(v0 + 960);
  id v11 = *(id *)(v0 + 952);
  uint64_t v12 = *(id *)(v0 + 944);
  uint64_t v13 = *(id *)(v0 + 936);
  Swift::String v14 = *(id *)(v0 + 928);
  *(void *)(v0 + 480) = v0;
  objc_msgSend(v1, sel_setConfirmationOptions_);

  type metadata accessor for SAAceView();
  uint64_t v8 = _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v2;
  id v3 = v9;
  *uint64_t v7 = v9;
  _finalizeUninitializedArray<A>(_:)();

  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 480) + 8);
  return v4(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  uint64_t v4 = *(id *)(v0 + 960);
  id v5 = *(id *)(v0 + 952);
  uint64_t v6 = *(id *)(v0 + 944);
  uint64_t v7 = *(id *)(v0 + 936);
  uint64_t v8 = *(id *)(v0 + 928);
  uint64_t v1 = *(void *)(v0 + 856);
  *(void *)(v0 + 480) = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 480) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  uint64_t v4 = *(id *)(v0 + 960);
  id v5 = *(id *)(v0 + 952);
  uint64_t v6 = *(id *)(v0 + 944);
  uint64_t v7 = *(id *)(v0 + 936);
  uint64_t v8 = *(id *)(v0 + 928);
  uint64_t v1 = *(void *)(v0 + 848);
  *(void *)(v0 + 480) = v0;
  outlined destroy of SpeakableString?(v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 480) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v3 = *(id *)(v0 + 1024);
  uint64_t v4 = *(id *)(v0 + 960);
  id v5 = *(id *)(v0 + 952);
  uint64_t v6 = *(id *)(v0 + 944);
  uint64_t v7 = *(id *)(v0 + 936);
  uint64_t v8 = *(id *)(v0 + 928);
  *(void *)(v0 + 480) = v0;

  outlined destroy of SFRichText?((id *)(v0 + 592));
  outlined destroy of SFRichText?((id *)(v0 + 584));
  outlined destroy of String.UTF8View();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 480) + 8);
  return v1();
}

uint64_t ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  id v5 = (void *)*v2;
  v5[60] = *v2;
  v5[130] = a1;
  v5[131] = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    id v3 = ConfirmationViewBuilder.makePaymentConfirmationPhoneView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[79] = v8;
  v9[78] = v22;
  v9[77] = a8;
  v9[76] = a7;
  v9[75] = a6;
  v9[74] = a5;
  v9[73] = a4;
  v9[72] = a3;
  v9[71] = a2;
  v9[70] = a1;
  v9[46] = v9;
  v9[47] = 0;
  v9[48] = 0;
  v9[49] = 0;
  v9[50] = 0;
  v9[51] = 0;
  v9[52] = 0;
  v9[53] = 0;
  v9[26] = 0;
  v9[27] = 0;
  v9[28] = 0;
  v9[29] = 0;
  v9[54] = 0;
  v9[55] = 0;
  v9[57] = 0;
  v9[59] = 0;
  v9[30] = 0;
  v9[31] = 0;
  v9[32] = 0;
  v9[33] = 0;
  v9[65] = 0;
  v9[66] = 0;
  v9[67] = 0;
  v9[68] = 0;
  v9[69] = 0;
  uint64_t v10 = type metadata accessor for Logger();
  v9[80] = v10;
  v9[81] = *(void *)(v10 - 8);
  v9[82] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  v9[83] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  v9[84] = swift_task_alloc();
  type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  v9[85] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v9[86] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v9[87] = v11;
  v9[88] = *(void *)(v11 - 8);
  v9[89] = swift_task_alloc();
  v9[90] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  v9[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  v9[92] = swift_task_alloc();
  type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  v9[93] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OutputGenerationManifest();
  v9[94] = v12;
  v9[95] = *(void *)(v12 - 8);
  v9[96] = swift_task_alloc();
  v9[97] = swift_task_alloc();
  v9[98] = type metadata accessor for SiriPaymentsSnippetModel();
  v9[99] = swift_task_alloc();
  v9[100] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v9[101] = swift_task_alloc();
  v9[102] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for TemplatingResult();
  v9[103] = v13;
  v9[104] = *(void *)(v13 - 8);
  v9[105] = swift_task_alloc();
  v9[106] = swift_task_alloc();
  v9[107] = swift_task_alloc();
  v9[47] = a2;
  v9[48] = a3;
  v9[49] = a4;
  v9[50] = a5;
  v9[51] = a6;
  v9[52] = a7;
  v9[53] = v8;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)()
{
  uint64_t v1 = *(void **)(v0 + 600);
  *(void *)(v0 + 368) = v0;
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v6);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
  uint64_t v2 = (void *)swift_task_alloc();
  v5[108] = v2;
  *uint64_t v2 = v5[46];
  v2[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  uint64_t v3 = v5[107];
  return v8(v3, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 368) = *v1;
  *(void *)(v4 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  else
  {
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  uint64_t v7 = v0[107];
  uint64_t v6 = v0[104];
  uint64_t v8 = v0[103];
  uint64_t v9 = v0[79];
  v0[46] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[110] = v1;
  v0[111] = v2;
  v0[26] = v1;
  v0[27] = v2;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[112] = v3;
  v0[113] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v7, v8);
  outlined init with copy of GlobalsProviding(v9, (uint64_t)(v0 + 16));
  uint64_t v13 = v0[19];
  uint64_t v11 = v0[20];
  __swift_project_boxed_opaque_existential_1(v0 + 16, v13);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v11 + 8) + **(int **)(v11 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v10 + 912) = v4;
  *uint64_t v4 = *(void *)(v10 + 368);
  v4[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  return v12(v13, v11);
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, void, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;

  uint64_t v26 = v0[117];
  uint64_t v25 = v0[116];
  Swift::String v24 = v0[111];
  uint64_t v23 = v0[110];
  v0[46] = v0;
  v0[28] = v25;
  v0[29] = v26;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 16));
  uint64_t v1 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v23, v24, v25, v26);
  uint64_t v27 = v2;
  v0[118] = v1;
  v0[119] = v2;
  v0[54] = v1;
  v0[55] = v2;
  id v28 = objc_msgSend(v1, sel_commands);
  if (v28)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    id v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (!v21) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Array.subscript.getter();
  uint64_t v3 = v22[56];
  v22[120] = v3;
  v22[57] = v3;
  swift_bridgeObjectRelease();
  uint64_t v19 = objc_msgSend(v27, sel_commands);
  if (v19)
  {
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v18 = v17;
  }
  else
  {
    id v18 = 0;
  }
  if (!v18) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v13 = v22[102];
  uint64_t v12 = (void *)v22[76];
  Array.subscript.getter();
  uint64_t v4 = v22[58];
  v22[121] = v4;
  v22[59] = v4;
  swift_bridgeObjectRelease();
  Swift::String v14 = v12[3];
  uint64_t v15 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v14);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("note", 4uLL, 1);
  SpeakableString.init(serializedValue:)();
  id v5 = type metadata accessor for SpeakableString();
  v22[122] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v6 + 56);
  v22[123] = v7;
  v22[124] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v13, 0, 1);
  Swift::String v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 16) + **(int **)(v15 + 16));
  uint64_t v8 = (void *)swift_task_alloc();
  v22[125] = v8;
  *uint64_t v8 = v22[46];
  v8[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  uint64_t v9 = v22[106];
  uint64_t v10 = v22[102];
  return v16(v9, v10, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 368) = *v1;
  *(void *)(v5 + 1008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 800));
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void, uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v13 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[123];
  uint64_t v12 = v0[122];
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[112];
  uint64_t v8 = v0[106];
  uint64_t v9 = v0[103];
  uint64_t v11 = v0[101];
  uint64_t v10 = (void *)v0[76];
  v0[46] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[127] = v1;
  v0[128] = v2;
  v0[30] = v1;
  v0[31] = v2;
  v7(v8, v9);
  uint64_t v15 = v10[3];
  Swift::String v16 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v15);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("feeAmount", 9uLL, 1);
  SpeakableString.init(serializedValue:)();
  v13(v11, 0, 1, v12);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 16) + **(int **)(v16 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  v14[129] = v3;
  *uint64_t v3 = v14[46];
  v3[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  uint64_t v4 = v14[105];
  id v5 = v14[101];
  return v17(v4, v5, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 368) = *v1;
  *(void *)(v5 + 1040) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  else
  {
    outlined destroy of SpeakableString?(*(void *)(v4 + 792));
    uint64_t v2 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char has_malloc_size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t *boxed_opaque_existential_1;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint8_t *buf;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint32_t size;
  os_log_type_t v61;
  NSObject *oslog;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;

  id v111 = (void (*)(uint64_t, uint64_t))v0[112];
  uint64_t v112 = v0[105];
  id v114 = v0[103];
  v0[46] = v0;
  uint64_t v113 = TemplatingResult.resultSectionsAsString.getter();
  id v115 = v1;
  v0[131] = v1;
  v0[32] = v113;
  v0[33] = v1;
  v111(v112, v114);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getObjectType();
  swift_unknownObjectRetain();
  id v116 = SAClientBoundCommand.data.getter();
  char v117 = v2;
  swift_unknownObjectRelease();
  swift_getObjectType();
  swift_unknownObjectRetain();
  id v118 = SAClientBoundCommand.data.getter();
  uint64_t v119 = v3;
  swift_unknownObjectRelease();
  v0[34] = App.appIdentifier.getter();
  v0[35] = v4;
  if (v0[35])
  {
    uint64_t v120 = *(Swift::String *)(v110 + 272);
  }
  else
  {
    uint64_t v120 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  SiriPaymentsSnippetModel.PaymentConfirmationModel.init(confirmLabel:cancelLabel:noteLabel:feeLabel:confirmDI:cancelDI:appId:)(*(void *)(v110 + 880), *(void *)(v110 + 888), *(void *)(v110 + 928), *(void *)(v110 + 936), *(void *)(v110 + 1016), *(void *)(v110 + 1024), v113, v115, (void *)(v110 + 16), v116, v117, v118, v119, v120._countAndFlagsBits, (uint64_t)v120._object);
  if (App.isFirstParty.getter())
  {
    id v5 = *(id *)(v110 + 576);
    uint64_t v109 = App.systemUIExtensionBundleId.getter();
    if (v6)
    {
      v107 = MEMORY[0x2611B9130](v109);
      swift_bridgeObjectRelease();
      uint64_t v108 = (void *)v107;
    }
    else
    {
      uint64_t v108 = 0;
    }
    uint64_t v106 = *(id *)(v110 + 576);
    objc_msgSend(v106, sel__setUiExtensionBundleId_);
  }
  uint64_t v105 = *(id *)(v110 + 584);
  uint64_t v104 = *(id *)(v110 + 576);
  uint64_t v7 = v104;
  uint64_t v8 = v105;
  uint64_t v9 = v104;
  uint64_t v10 = v105;
  *(void *)(v110 + 288) = v104;
  *(void *)(v110 + 296) = v105;
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INRequestPaymentIntent, INRequestPaymentIntentResponse));
  if (swift_dynamicCast())
  {
    id v89 = *(char **)(v110 + 800);
    uint64_t v88 = *(char **)(v110 + 792);
    id v93 = *(void *)(v110 + 776);
    id v94 = *(void *)(v110 + 768);
    uint64_t v95 = *(void *)(v110 + 752);
    uint64_t v99 = *(void *)(v110 + 744);
    uint64_t v87 = *(void *)(v110 + 736);
    Swift::String v86 = *(void *)(v110 + 728);
    id v98 = *(void *)(v110 + 720);
    id v91 = *(void *)(v110 + 712);
    uint64_t v96 = *(void *)(v110 + 696);
    uint64_t v103 = *(id *)(v110 + 584);
    id v102 = *(id *)(v110 + 576);
    id v92 = *(void *)(v110 + 760);
    id v90 = *(void *)(v110 + 704);
    id v101 = *(id *)(v110 + 304);
    uint64_t v100 = *(id *)(v110 + 312);
    *(void *)(v110 + 544) = v101;
    *(void *)(v110 + 552) = v100;
    uint64_t v11 = v101;
    type metadata accessor for INRequestPaymentIntent();
    CodableIntent.init(wrappedValue:)();
    uint64_t v12 = v100;
    type metadata accessor for INRequestPaymentIntentResponse();
    CodableIntentResponse.init(wrappedValue:)();
    outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel((void *)(v110 + 16));
    SiriPaymentsSnippetModel.RequestPaymentConfirmationModel.init(intent:response:confirmation:)(v87, v86, (const void *)(v110 + 16), v99);
    outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v99, (uint64_t)v88);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v88, v89);
    static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v98);
    static DialogPhase.confirmation.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v91, v98, v96);
    *(void *)(swift_task_alloc() + 16) = v91;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    id v97 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v97(v91, v96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v93, v94, v95);
    v97(v98, v96);
    outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(v99);

    outlined destroy of (A, B)((id *)(v110 + 288));
LABEL_21:
    uint64_t v35 = *(uint64_t **)(v110 + 800);
    uint64_t v34 = *(void *)(v110 + 784);
    Swift::String v40 = *(void *)(v110 + 776);
    Swift::String v42 = *(void *)(v110 + 768);
    uint64_t v41 = *(void *)(v110 + 752);
    id v37 = *(id *)(v110 + 592);
    uint64_t v39 = *(void *)(v110 + 760);
    type metadata accessor for ResponseFactory();
    *(void *)(v110 + 1056) = ResponseFactory.__allocating_init()();
    *(void *)(v110 + 192) = v34;
    *(void *)(v110 + 200) = lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v110 + 168));
    outlined init with copy of SiriPaymentsSnippetModel(v35, boxed_opaque_existential_1);
    type metadata accessor for DialogExecutionResult();
    uint64_t v38 = _allocateUninitializedArray<A>(_:)();
    uint64_t v36 = v29;
    Swift::String v30 = v37;
    *uint64_t v36 = v37;
    _finalizeUninitializedArray<A>(_:)();
    *(void *)(v110 + 1064) = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v42, v40, v41);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(MEMORY[0x263F6FB10] + (int)*MEMORY[0x263F6FB10]);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v110 + 1072) = v31;
    char *v31 = *(void *)(v110 + 368);
    v31[1] = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
    Swift::String v32 = *(void *)(v110 + 768);
    id v33 = *(void *)(v110 + 560);
    return v43(v33, v110 + 168, v38, v32);
  }
  Swift::String v85 = *(id *)(v110 + 584);
  uint64_t v84 = *(id *)(v110 + 576);
  outlined destroy of (A, B)((id *)(v110 + 288));
  uint64_t v13 = v84;
  Swift::String v14 = v85;
  *(void *)(v110 + 320) = v84;
  *(void *)(v110 + 328) = v85;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INSendPaymentIntent, INSendPaymentIntentResponse));
  if (swift_dynamicCast())
  {
    Swift::String v68 = *(char **)(v110 + 800);
    uint64_t v67 = *(char **)(v110 + 792);
    id v69 = *(void *)(v110 + 720);
    Swift::String v66 = *(void *)(v110 + 680);
    uint64_t v65 = *(void *)(v110 + 672);
    id v64 = *(void *)(v110 + 664);
    id v81 = *(id *)(v110 + 336);
    id v80 = *(id *)(v110 + 344);
    *(void *)(v110 + 520) = v81;
    *(void *)(v110 + 528) = v80;
    uint64_t v15 = v81;
    type metadata accessor for INSendPaymentIntent();
    CodableIntent.init(wrappedValue:)();
    Swift::String v16 = v80;
    type metadata accessor for INSendPaymentIntentResponse();
    CodableIntentResponse.init(wrappedValue:)();
    outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel((void *)(v110 + 16));
    SiriPaymentsSnippetModel.SendPaymentConfirmationModel.init(intent:response:confirmation:)(v65, v64, (const void *)(v110 + 16), v66);
    outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v66, (uint64_t)v67);
    swift_storeEnumTagMultiPayload();
    outlined init with take of SiriPaymentsSnippetModel(v67, v68);
    *(void *)(v110 + 536) = v69;
    id v73 = *(void *)(v110 + 776);
    uint64_t v74 = *(void *)(v110 + 768);
    uint64_t v75 = *(void *)(v110 + 752);
    Swift::String v78 = *(void *)(v110 + 720);
    uint64_t v71 = *(void *)(v110 + 712);
    Swift::String v76 = *(void *)(v110 + 696);
    uint64_t v79 = *(void *)(v110 + 680);
    uint64_t v83 = *(id *)(v110 + 584);
    uint64_t v82 = *(id *)(v110 + 576);
    uint64_t v72 = *(void *)(v110 + 760);
    uint64_t v70 = *(void *)(v110 + 704);
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v78);
    static DialogPhase.confirmation.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v71, v78, v76);
    *(void *)(swift_task_alloc() + 16) = v71;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v77(v71, v76);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v73, v74, v75);
    v77(v78, v76);
    outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(v79);

    outlined destroy of (A, B)((id *)(v110 + 320));
    goto LABEL_21;
  }
  id v18 = *(void *)(v110 + 656);
  uint64_t v59 = *(void *)(v110 + 640);
  Swift::String v58 = *(void *)(v110 + 648);
  outlined destroy of (A, B)((id *)(v110 + 320));
  uint64_t v19 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v18, v19, v59);
  oslog = Logger.logObject.getter();
  uint64_t v61 = static os_log_type_t.error.getter();
  *(void *)(v110 + 480) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v110 + 1096);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v61))
  {
    id v20 = *(void *)(v110 + 1040);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v55 = createStorage<A>(capacity:type:)(0);
    id v56 = createStorage<A>(capacity:type:)(0);
    *(void *)(v110 + 488) = buf;
    *(void *)(v110 + 496) = v55;
    *(void *)(v110 + 504) = v56;
    serialize(_:at:)(0, (unsigned char **)(v110 + 488));
    serialize(_:at:)(0, (unsigned char **)(v110 + 488));
    *(void *)(v110 + 512) = v63;
    uint64_t v57 = (void *)swift_task_alloc();
    v57[2] = v110 + 488;
    v57[3] = v110 + 496;
    v57[4] = v110 + 504;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v20) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v61, "#ConfirmationViewBuilder makeModernizedPaymentConfirmation encountered unexpected intent type", buf, size);
    destroyStorage<A>(_:count:)(v55, 0, v53);
    destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = *(id *)(v110 + 952);
  Swift::String v52 = *(id *)(v110 + 944);
  uint64_t v45 = *(void *)(v110 + 656);
  id v46 = *(void *)(v110 + 640);
  Swift::String v50 = *(id *)(v110 + 584);
  uint64_t v49 = *(id *)(v110 + 576);
  id v44 = *(void *)(v110 + 648);

  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
  *(void *)(v110 + 352) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(void *)(v110 + 360) = v22;
  uint64_t v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  DefaultStringInterpolation.appendInterpolation(_:)();
  Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  uint64_t v48 = String.init(stringInterpolation:)();
  id v47 = v25;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(void *)uint64_t v26 = v48;
  *(void *)(v26 + 8) = v47;
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 40) = 0;
  *(unsigned char *)(v26 + 48) = 4;
  swift_willThrow();

  outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel((void *)(v110 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(*(void *)(v110 + 368) + 8);
  return v27();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = *(void **)v0;
  uint64_t v6 = *(void *)v0 + 168;
  uint64_t v4 = *(void *)(*(void *)v0 + 768);
  uint64_t v3 = *(void *)(*(void *)v0 + 760);
  id v5 = *(void *)(*(void *)v0 + 752);
  v7[46] = *(void *)v0;
  swift_task_dealloc();
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7[135] = v1;
  v7[136] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v1(v4, v5);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v6);
  swift_release();
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:), 0);
}

{
  void *v0;
  void (*v1)(void);
  uint64_t (*v2)(void);
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = (void (*)(void))v0[135];
  uint64_t v4 = (id)v0[119];
  id v5 = (id)v0[118];
  uint64_t v6 = v0[100];
  v0[46] = v0;
  v1();
  outlined destroy of SiriPaymentsSnippetModel(v6);
  outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel(v0 + 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[46] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 368) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 368) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 368) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 128);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 368) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  id v4;
  id v5;
  uint64_t v6;

  uint64_t v4 = (id)v0[119];
  id v5 = (id)v0[118];
  uint64_t v1 = v0[102];
  v0[46] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[46] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  id v4;
  id v5;
  uint64_t v6;

  uint64_t v4 = (id)v0[119];
  id v5 = (id)v0[118];
  uint64_t v1 = v0[101];
  v0[46] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[46] + 8);
  return v2();
}

uint64_t ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[46] = *v3;
  v6[115] = v2;
  v6[116] = a1;
  v6[117] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  else
  {
    uint64_t v4 = ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

id ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = a1;
  uint64_t v113 = a2;
  uint64_t v110 = a3;
  uint64_t v111 = a4;
  uint64_t v124 = 0;
  uint64_t v108 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v149 = 0;
  uint64_t v150 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v146 = 0;
  id v143 = 0;
  id v142 = 0;
  id v141 = 0;
  id v136 = 0;
  uint64_t v109 = 0;
  uint64_t v119 = type metadata accessor for Logger();
  uint64_t v117 = *(void *)(v119 - 8);
  uint64_t v118 = v119 - 8;
  unint64_t v115 = (*(void *)(v117 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (char *)&v35 - v115;
  id v116 = (char *)&v35 - v115;
  uint64_t v149 = MEMORY[0x270FA5388](v114);
  uint64_t v150 = v5;
  uint64_t v147 = v6;
  uint64_t v148 = v7;
  uint64_t v146 = v8;
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v4, v9, v119);
  uint64_t v126 = Logger.logObject.getter();
  int v125 = static os_log_type_t.debug.getter();
  id v122 = &v144;
  uint64_t v144 = 2;
  unint64_t v120 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v121 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v123 = v145;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v127 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v126, (os_log_type_t)v125))
  {
    uint64_t v10 = v109;
    id v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v97 = 0;
    uint64_t v99 = createStorage<A>(capacity:type:)(0);
    uint64_t v100 = createStorage<A>(capacity:type:)(v97);
    uint64_t v104 = &v131;
    BOOL v131 = v98;
    uint64_t v105 = &v130;
    uint64_t v130 = v99;
    id v102 = &v129;
    uint64_t v129 = v100;
    unsigned int v101 = 0;
    serialize(_:at:)(0, &v131);
    serialize(_:at:)(v101, v104);
    uint64_t v128 = v127;
    uint64_t v103 = &v35;
    MEMORY[0x270FA5388](&v35);
    uint64_t v11 = v105;
    uint64_t v12 = &v35 - 6;
    uint64_t v106 = &v35 - 6;
    v12[2] = (unint64_t)v104;
    v12[3] = (unint64_t)v11;
    void v12[4] = v13;
    uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v10)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v126, (os_log_type_t)v125, "#ConfirmationViewBuilder makeYesNoOptions", v98, v123);
      uint64_t v95 = 0;
      destroyStorage<A>(_:count:)(v99, 0, v96);
      destroyStorage<A>(_:count:)(v100, v95, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v98, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v119);
  uint64_t v39 = 0;
  unint64_t v35 = type metadata accessor for SAUIConfirmationOption();
  id v93 = SAUIAppPunchOut.__allocating_init()();
  id v143 = v93;
  swift_bridgeObjectRetain();
  id v36 = (id)MEMORY[0x2611B9130](v114, v113);
  swift_bridgeObjectRelease();
  unint64_t v37 = 0x1F6F00000uLL;
  objc_msgSend(v93, (SEL)0x1F6F00818, v36);

  id v94 = SAUIAppPunchOut.__allocating_init()();
  id v142 = v94;
  swift_bridgeObjectRetain();
  id v38 = (id)MEMORY[0x2611B9130](v110, v111);
  swift_bridgeObjectRelease();
  objc_msgSend(v94, (SEL)(v37 + 2072), v38);

  unint64_t v48 = type metadata accessor for SKIDirectInvocationPayload();
  int v59 = 0;
  id v92 = static SKIDirectInvocationPayload.from(_:)(0);
  id v141 = v92;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  uint64_t v73 = 1;
  uint64_t v41 = _allocateUninitializedArray<A>(_:)();
  uint64_t v40 = v14;
  uint64_t v15 = Constants.DirectInvocationPayloadKeys.rawValue.getter(v59);
  Swift::String v42 = v140;
  v140[0] = v15;
  v140[1] = v16;
  uint64_t v61 = MEMORY[0x263F8D310];
  uint64_t v60 = MEMORY[0x263F8D320];
  _convertToAnyHashable<A>(_:)();
  uint64_t v17 = Constants.DirectInvocationButtonType.rawValue.getter(v59);
  uint64_t v18 = v40;
  uint64_t v19 = v17;
  uint64_t v20 = v41;
  *(void *)(v40 + 64) = v61;
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = v21;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v43 = v20;
  outlined destroy of String.UTF8View();
  uint64_t v67 = MEMORY[0x263F8DB68];
  uint64_t v68 = MEMORY[0x263F8EE58] + 8;
  uint64_t v69 = MEMORY[0x263F8DB70];
  uint64_t v44 = Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v71 = 0x1F6E72000uLL;
  objc_msgSend(v92, (SEL)0x1F6E72847, isa);

  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  uint64_t v56 = _allocateUninitializedArray<A>(_:)();
  uint64_t v55 = v22;
  unint64_t v74 = 0x263F70000uLL;
  id v52 = self;
  id v49 = self;
  uint64_t v51 = v137;
  outlined init with copy of GlobalsProviding(v112 + 40, (uint64_t)v137);
  uint64_t v47 = v138;
  uint64_t v46 = v139;
  __swift_project_boxed_opaque_existential_1(v51, v138);
  id v50 = (id)DeviceState.asInvocationContext.getter();
  unint64_t v77 = 0x1F8BC8000uLL;
  id v53 = [v49 (SEL)0x1F8BC8343];

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  unint64_t v81 = 0x1F8BC8000uLL;
  id v54 = objc_msgSend(v52, (SEL)0x1F8BC8323, v53);
  swift_unknownObjectRelease();
  uint64_t v23 = v56;
  *uint64_t v55 = v54;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v57 = v23;
  Class v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v89 = 0x1F7274000uLL;
  objc_msgSend(v93, (SEL)0x1F7274274, v58);

  id v91 = static SKIDirectInvocationPayload.from(_:)(v59);
  id v136 = v91;
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  uint64_t v62 = v24;
  uint64_t v25 = Constants.DirectInvocationPayloadKeys.rawValue.getter(v59);
  uint64_t v65 = v135;
  v135[0] = v25;
  v135[1] = v26;
  _convertToAnyHashable<A>(_:)();
  uint64_t v27 = Constants.DirectInvocationButtonType.rawValue.getter(1);
  uint64_t v28 = v62;
  uint64_t v29 = v27;
  uint64_t v30 = v63;
  *(void *)(v62 + 64) = v61;
  *(void *)(v28 + 40) = v29;
  *(void *)(v28 + 48) = v31;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v66 = v30;
  outlined destroy of String.UTF8View();
  uint64_t v70 = Dictionary.init(dictionaryLiteral:)();
  Class v72 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v91, (SEL)(v71 + 2119), v72);

  uint64_t v86 = _allocateUninitializedArray<A>(_:)();
  Swift::String v85 = v32;
  id v82 = self;
  id v78 = self;
  id v80 = v132;
  outlined init with copy of GlobalsProviding(v112 + 40, (uint64_t)v132);
  uint64_t v76 = v133;
  uint64_t v75 = v134;
  __swift_project_boxed_opaque_existential_1(v80, v133);
  id v79 = (id)DeviceState.asInvocationContext.getter();
  id v83 = [v78 (SEL)(v77 + 835)];

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v80);
  id v84 = objc_msgSend(v82, (SEL)(v81 + 803), v83);
  swift_unknownObjectRelease();
  uint64_t v33 = v86;
  *Swift::String v85 = v84;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v88 = v33;
  Class v90 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v94, (SEL)(v89 + 628), v90);

  return v93;
}

uint64_t closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v8 = a2;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  unint64_t v7 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v12 = (char *)&v7 - v7;
  uint64_t v16 = a1;
  uint64_t v15 = v4;
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  uint64_t v9 = *(void *)(v11 - 8);
  uint64_t v10 = v11 - 8;
  (*(void (**)(char *, uint64_t))(v9 + 16))(v12, v8);
  uint64_t v5 = *(void (**)(char *, void))(v9 + 56);
  int v14 = 1;
  v5(v12, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, v14 & 1);
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v8 = a2;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  unint64_t v7 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v12 = (char *)&v7 - v7;
  uint64_t v16 = a1;
  uint64_t v15 = v4;
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  uint64_t v9 = *(void *)(v11 - 8);
  uint64_t v10 = v11 - 8;
  (*(void (**)(char *, uint64_t))(v9 + 16))(v12, v8);
  uint64_t v5 = *(void (**)(char *, void))(v9 + 56);
  int v14 = 1;
  v5(v12, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, v14 & 1);
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t DefaultStringInterpolation.appendInterpolation(_:)()
{
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(uint64_t a1)
{
  v2[27] = v1;
  v2[16] = v2;
  v2[17] = 0;
  v2[18] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[20] = 0;
  v2[21] = 0;
  v2[22] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[17] = a1;
  v2[18] = v1;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeTCCAcceptanceView(app:), 0);
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 224);
  *(void *)(v0 + 128) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 152) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v20 = *(unsigned int *)(v0 + 312);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    *(void *)(v17 + 184) = buf;
    *(void *)(v17 + 192) = v14;
    *(void *)(v17 + 200) = v15;
    serialize(_:at:)(0, (unsigned char **)(v17 + 184));
    serialize(_:at:)(0, (unsigned char **)(v17 + 184));
    *(void *)(v17 + 208) = v23;
    uint64_t v16 = (void *)swift_task_alloc();
    v16[2] = v17 + 184;
    v16[3] = v17 + 192;
    v16[4] = v17 + 200;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v22, v21, "#ConfirmationViewBuilder makeTCCAcceptanceView", buf, v20);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v17 + 240);
  uint64_t v7 = *(void *)(v17 + 224);
  uint64_t v8 = *(void *)(v17 + 216);
  uint64_t v5 = *(void *)(v17 + 232);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined init with copy of GlobalsProviding(v8, v17 + 16);
  uint64_t v11 = *(void *)(v17 + 40);
  uint64_t v9 = *(void *)(v17 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v17 + 16), v11);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v17 + 248) = v3;
  *uint64_t v3 = *(void *)(v17 + 128);
  v3[1] = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  return v10(v11, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[33];
  uint64_t v5 = v0[27];
  v0[16] = v0;
  v0[12] = v2;
  v0[13] = v1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v5, (uint64_t)(v0 + 7));
  uint64_t v9 = v0[10];
  uint64_t v7 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v9);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 280) = v3;
  *uint64_t v3 = *(void *)(v6 + 128);
  v3[1] = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  return v8(v9, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t (*v7)(id);
  id v9;
  void *v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;

  uint64_t v39 = v0[38];
  id v38 = v0[37];
  unint64_t v37 = v0[34];
  id v36 = v0[33];
  v0[16] = v0;
  v0[14] = v38;
  v0[15] = v39;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  uint64_t v41 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v36, v37, v38, v39);
  uint64_t v40 = v1;
  v0[20] = v41;
  v0[21] = v1;
  type metadata accessor for SAUIConfirmationView();
  Swift::String v42 = SAUIAppPunchOut.__allocating_init()();
  v0[22] = v42;
  uint64_t v43 = objc_msgSend(v41, sel_commands);
  if (v43)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0;
  }
  if (v34)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Swift::String v32 = isa;
  }
  else
  {
    Swift::String v32 = 0;
  }
  objc_msgSend(v42, sel_setConfirmCommands_);

  uint64_t v30 = objc_msgSend(v41, sel_label);
  if (v30)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v2;

    uint64_t v28 = v26;
    uint64_t v29 = v27;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  if (v29)
  {
    uint64_t v24 = MEMORY[0x2611B9130](v28);
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)v24;
  }
  else
  {
    uint64_t v25 = 0;
  }
  objc_msgSend(v42, sel_setConfirmText_);

  uint64_t v23 = objc_msgSend(v40, sel_commands);
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    os_log_type_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  objc_msgSend(v42, sel_setDenyCommands_);

  uint64_t v18 = objc_msgSend(v40, sel_label);
  if (v18)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v3;

    uint64_t v16 = v14;
    uint64_t v17 = v15;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  if (v17)
  {
    uint64_t v12 = MEMORY[0x2611B9130](v16);
    swift_bridgeObjectRelease();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v42, sel_setDenyText_, v13);

  type metadata accessor for SAUIConfirmationOption();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v4;
  uint64_t v5 = v41;
  *uint64_t v10 = v41;
  uint64_t v6 = v40;
  v10[1] = v40;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v42, sel_setAllConfirmationOptions_, v11);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(id))(*(void *)(v35 + 128) + 8);
  return v7(v42);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 128) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 128) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 128) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 128) + 8);
  return v1();
}

uint64_t ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[16] = *v3;
  v6[32] = v2;
  v6[33] = a1;
  v6[34] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  }
  else
  {
    uint64_t v4 = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v3;
  v6[16] = *v3;
  v6[36] = v2;
  v6[37] = a1;
  v6[38] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  }
  else
  {
    uint64_t v4 = ConfirmationViewBuilder.makeTCCAcceptanceView(app:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[25] = v7;
  v8[24] = a7;
  v8[23] = a5;
  v8[22] = a4;
  v8[21] = a3;
  v8[20] = a2;
  v8[19] = a1;
  v8[4] = v8;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  v8[9] = 0;
  v8[11] = 0;
  v8[12] = 0;
  v8[13] = 0;
  v8[2] = 0;
  void v8[3] = 0;
  uint64_t v9 = type metadata accessor for Logger();
  v8[26] = v9;
  v8[27] = *(void *)(v9 - 8);
  v8[28] = swift_task_alloc();
  v8[5] = a1;
  v8[6] = a2;
  v8[7] = a3;
  v8[8] = a4;
  v8[9] = v7;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v40 = *(void *)(v0 + 216);
  uint64_t v41 = *(void *)(v0 + 208);
  *(void *)(v0 + 32) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v1, v2, v41);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 80) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v42 = *(unsigned int *)(v0 + 272);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v45 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v44, v43))
  {
    unint64_t v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v36 = createStorage<A>(capacity:type:)(0);
    uint64_t v37 = createStorage<A>(capacity:type:)(0);
    *(void *)(v39 + 120) = v35;
    *(void *)(v39 + 128) = v36;
    *(void *)(v39 + 136) = v37;
    serialize(_:at:)(0, (unsigned char **)(v39 + 120));
    serialize(_:at:)(0, (unsigned char **)(v39 + 120));
    *(void *)(v39 + 144) = v45;
    id v38 = (void *)swift_task_alloc();
    v38[2] = v39 + 120;
    v38[3] = v39 + 128;
    v38[4] = v39 + 136;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v44, v43, "#ConfirmationViewBuilder makeWatchFirstPartyView", v35, v42);
    destroyStorage<A>(_:count:)(v36, 0, v34);
    destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v35, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v39 + 224);
  uint64_t v32 = *(void *)(v39 + 208);
  uint64_t v30 = *(void *)(v39 + 216);

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  type metadata accessor for SASTItemGroup();
  id v33 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v39 + 232) = v33;
  *(void *)(v39 + 88) = v33;
  if ((static RFFeatureFlags.ResponseFramework.SMART.getter() & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    _allocateUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v33, sel_setTemplateItems_, isa);

    uint64_t v28 = App.appIdentifier.getter();
    uint64_t v29 = v3;
    if (v3)
    {
      id v25 = *(id *)(v39 + 160);
      *(void *)(v39 + 16) = v28;
      *(void *)(v39 + 24) = v3;
      type metadata accessor for SASTApplicationBannerItem();
      id v4 = v25;
      swift_bridgeObjectRetain();
      *(void *)(v39 + 112) = SASTApplicationBannerItem.init(intent:appId:)(v25, v28, v29);
      id v26 = objc_msgSend(v33, sel_templateItems);
      if (v26)
      {
        uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v24 = v23;
      }
      else
      {
        uint64_t v24 = 0;
      }
      if (!v24) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
      Array.append(_:)();
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v33, sel_setTemplateItems_);

      swift_bridgeObjectRelease();
    }
  }
  id v6 = *(id *)(v39 + 160);
  uint64_t v21 = App.systemUIExtensionBundleId.getter();
  if (v7)
  {
    uint64_t v19 = MEMORY[0x2611B9130](v21);
    swift_bridgeObjectRelease();
    uint64_t v20 = (void *)v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  id v16 = *(id *)(v39 + 168);
  id v14 = *(id *)(v39 + 160);
  objc_msgSend(v14, sel__setUiExtensionBundleId_);

  type metadata accessor for SAIntentGroupSendPaymentSnippet();
  id v17 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v39 + 240) = v17;
  *(void *)(v39 + 96) = v17;
  type metadata accessor for SAIntentGroupProtobufMessage();
  id v8 = v14;
  id v15 = SAIntentGroupProtobufMessage.init(intent:)(v14);
  objc_msgSend(v17, sel_setIntent_);

  id v9 = v16;
  id v18 = SAIntentGroupProtobufMessage.init(response:)(v16);
  objc_msgSend(v17, sel_setIntentResponse_);

  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v39 + 248) = v10;
  *uint64_t v10 = *(void *)(v39 + 32);
  v10[1] = ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v11 = *(void *)(v39 + 176);
  uint64_t v12 = *(void *)(v39 + 160);
  uint64_t v13 = *(void *)(v39 + 152);
  return ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(v13, v12, v11);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t (*v9)(uint64_t);
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v1 = v0[32];
  v0[4] = v0;
  v0[13] = v1;
  if (static RFFeatureFlags.ResponseFramework.SMART.getter())
  {
    uint64_t v13 = (id)v22[32];
    id v14 = (id)v22[30];
    id v15 = (id)v22[29];
    type metadata accessor for SAAceView();
    uint64_t v12 = _allocateUninitializedArray<A>(_:)();
    uint64_t v11 = v6;
    uint64_t v7 = v14;
    *uint64_t v11 = v14;
    id v8 = v13;
    v11[1] = v13;
    _finalizeUninitializedArray<A>(_:)();

    uint64_t v21 = v12;
  }
  else
  {
    id v18 = (void *)v22[32];
    uint64_t v19 = (void *)v22[30];
    uint64_t v20 = (void *)v22[29];
    type metadata accessor for SAAceView();
    id v17 = _allocateUninitializedArray<A>(_:)();
    id v16 = v2;
    uint64_t v3 = v20;
    *id v16 = v20;
    id v4 = v19;
    v16[1] = v19;
    uint64_t v5 = v18;
    v16[2] = v18;
    _finalizeUninitializedArray<A>(_:)();

    uint64_t v21 = v17;
  }
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(uint64_t))(v22[4] + 8);
  return v9(v21);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[30];
  id v4 = (id)v0[29];
  v0[4] = v0;

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

uint64_t ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[4] = *v2;
  v5[32] = a1;
  v5[33] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  else
  {
    uint64_t v3 = ConfirmationViewBuilder.makeWatchFirstPartyView<A, B>(app:intent:response:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t implicit closure #1 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_text);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  return String.init<A>(describing:)();
}

uint64_t default argument 1 of static SATextDecorationRegion.from(_:property:)()
{
  id v2 = (id)*MEMORY[0x263F65AB0];
  id v0 = (id)*MEMORY[0x263F65AB0];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[29] = v3;
  v4[28] = a3;
  v4[27] = a2;
  v4[26] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v4[30] = v5;
  v4[31] = *(void *)(v5 - 8);
  v4[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[33] = v6;
  v4[34] = *(void *)(v6 - 8);
  v4[35] = swift_task_alloc();
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = v3;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v26 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 264);
  *(void *)(v0 + 56) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v1, v2, v27);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 96) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v28 = *(unsigned int *)(v0 + 408);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v30, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(0);
    *(void *)(v25 + 176) = buf;
    *(void *)(v25 + 184) = v22;
    *(void *)(v25 + 192) = v23;
    serialize(_:at:)(0, (unsigned char **)(v25 + 176));
    serialize(_:at:)(0, (unsigned char **)(v25 + 176));
    *(void *)(v25 + 200) = v31;
    uint64_t v24 = (void *)swift_task_alloc();
    v24[2] = v25 + 176;
    v24[3] = v25 + 184;
    v24[4] = v25 + 192;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v30, v29, "#ConfirmationViewBuilder makeWatchConfirmationButtons", buf, v28);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v25 + 280);
  uint64_t v17 = *(void *)(v25 + 264);
  id v18 = *(id *)(v25 + 216);
  uint64_t v15 = *(void *)(v25 + 272);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  *(void *)(v25 + 288) = type metadata accessor for SASTCommandTemplateAction();
  id v3 = v18;
  uint64_t v19 = App.appIdentifier.getter();
  if (!v4) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v11 = *(void **)(v25 + 224);
  id v5 = SASTCommandTemplateAction.init(intent:appId:)(*(void **)(v25 + 216), v19, v4);
  *(void *)(v25 + 296) = v5;
  *(void *)(v25 + 104) = v5;
  *(void *)(v25 + 304) = type metadata accessor for SASTButtonItem();
  id v6 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v25 + 312) = v6;
  *(void *)(v25 + 112) = v6;
  *(void *)(v25 + 320) = type metadata accessor for SAUIDecoratedText();
  id v7 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v25 + 328) = v7;
  *(void *)(v25 + 120) = v7;
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v12);
  id v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 8) + **(int **)(v13 + 8));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v25 + 336) = v8;
  *id v8 = *(void *)(v25 + 56);
  v8[1] = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  uint64_t v9 = *(void *)(v25 + 256);
  return v14(v9, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 56) = *v1;
  *(void *)(v4 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  }
  else
  {
    uint64_t v2 = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v20 = (void *)v0[41];
  uint64_t v19 = (void *)v0[39];
  uint64_t v17 = v0[32];
  uint64_t v15 = v0[31];
  uint64_t v16 = v0[30];
  uint64_t v21 = (void *)v0[27];
  v0[7] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  id v18 = (void *)MEMORY[0x2611B9130](v1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setText_, v18);

  uint64_t v2 = v20;
  objc_msgSend(v19, sel_setDecoratedLabel_, v20);

  id v3 = v21;
  uint64_t v22 = App.appIdentifier.getter();
  if (!v4) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v10 = *(void *)(v14 + 232);
  id v5 = SASTCommandTemplateAction.init(intent:appId:)(*(void **)(v14 + 216), v22, v4);
  *(void *)(v14 + 352) = v5;
  *(void *)(v14 + 128) = v5;
  id v6 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v14 + 360) = v6;
  *(void *)(v14 + 136) = v6;
  id v7 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v14 + 368) = v7;
  *(void *)(v14 + 144) = v7;
  outlined init with copy of GlobalsProviding(v10, v14 + 16);
  uint64_t v13 = *(void *)(v14 + 40);
  uint64_t v11 = *(void *)(v14 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v14 + 16), v13);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v11 + 8) + **(int **)(v11 + 8));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v14 + 376) = v8;
  *id v8 = *(void *)(v14 + 56);
  v8[1] = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  return v12(v13, v11);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t (*v12)(id);
  void *v13;
  Class v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  Class v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class isa;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;

  uint64_t v1 = v0[49];
  uint64_t v46 = (void *)v0[46];
  uint64_t v45 = (void *)v0[45];
  uint64_t v47 = (void *)v0[41];
  v0[7] = v0;
  uint64_t v44 = (void *)MEMORY[0x2611B9130](v1);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  objc_msgSend(v46, sel_setText_, v44);

  uint64_t v2 = v46;
  objc_msgSend(v45, sel_setDecoratedLabel_, v46);

  unint64_t v48 = objc_msgSend(v47, sel_text);
  if (v48)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v3;

    uint64_t v41 = v39;
    uint64_t v42 = v40;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  if (!v42) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  id v38 = objc_msgSend(*(id *)(v43 + 368), sel_text);
  if (v38)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v5;

    uint64_t v36 = v34;
    uint64_t v37 = v35;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  if (!v37) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v32 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v41, v42, v36, v37);
  uint64_t v31 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v43 + 152) = v32;
  *(void *)(v43 + 160) = v31;
  id v33 = objc_msgSend(v32, sel_commands);
  if (v33)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    os_log_type_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v30 = 0;
  }
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v28 = isa;
  }
  else
  {
    uint64_t v28 = 0;
  }
  objc_msgSend(*(id *)(v43 + 296), sel_setCommands_);

  uint64_t v26 = objc_msgSend(v31, sel_commands);
  if (v26)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v25 = 0;
  }
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v22 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v15 = *(id *)(v43 + 368);
  uint64_t v16 = *(id *)(v43 + 360);
  uint64_t v17 = *(id *)(v43 + 352);
  id v18 = *(id *)(v43 + 328);
  uint64_t v19 = *(id *)(v43 + 312);
  uint64_t v20 = *(id *)(v43 + 296);
  objc_msgSend(v17, sel_setCommands_);

  id v7 = v20;
  objc_msgSend(v19, (SEL)0x1F66DBD18, v20);
  swift_unknownObjectRelease();
  id v8 = v17;
  objc_msgSend(v16, (SEL)0x1F66DBD18, v17);
  swift_unknownObjectRelease();
  objc_msgSend(v19, (SEL)0x1F7804FF1, 1);
  objc_msgSend(v16, (SEL)0x1F7804FF1, 1);
  type metadata accessor for SASTItemGroup();
  uint64_t v21 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v43 + 168) = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  uint64_t v13 = v9;
  uint64_t v10 = v19;
  *uint64_t v13 = v19;
  uint64_t v11 = v16;
  v13[1] = v16;
  _finalizeUninitializedArray<A>(_:)();
  id v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setTemplateItems_, v14);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(id))(*(void *)(v43 + 56) + 8);
  return v12(v21);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  uint64_t v6;

  uint64_t v1 = (void *)v0[41];
  uint64_t v4 = (id)v0[39];
  id v5 = (id)v0[37];
  v0[7] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[7] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v3 = (id)v0[46];
  uint64_t v4 = (id)v0[45];
  id v5 = (id)v0[44];
  id v6 = (id)v0[41];
  id v7 = (id)v0[39];
  id v8 = (id)v0[37];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[7] + 8);
  return v1();
}

uint64_t ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:)(uint64_t a1, uint64_t a2)
{
  id v6 = (void *)*v3;
  v6[7] = *v3;
  v6[48] = v2;
  v6[49] = a1;
  v6[50] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  }
  else
  {
    uint64_t v4 = ConfirmationViewBuilder.makeWatchConfirmationButtons<A>(app:intent:confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for SASTItemGroup();
  lazy protocol witness table accessor for type SASTItemGroup and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(uint64_t a1)
{
  v2[23] = v1;
  v2[22] = a1;
  v2[11] = v2;
  v2[12] = 0;
  v2[13] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v2[17] = 0;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[27] = v4;
  v2[28] = *(void *)(v4 - 8);
  v2[29] = swift_task_alloc();
  v2[12] = a1;
  v2[13] = v1;
  return MEMORY[0x270FA2498](ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:), 0);
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 216);
  *(void *)(v0 + 88) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v2, v20);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 112) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v21 = *(unsigned int *)(v0 + 304);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    *(void *)(v18 + 144) = buf;
    *(void *)(v18 + 152) = v15;
    *(void *)(v18 + 160) = v16;
    serialize(_:at:)(0, (unsigned char **)(v18 + 144));
    serialize(_:at:)(0, (unsigned char **)(v18 + 144));
    *(void *)(v18 + 168) = v24;
    uint64_t v17 = (void *)swift_task_alloc();
    v17[2] = v18 + 144;
    v17[3] = v18 + 152;
    v17[4] = v18 + 160;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v23, v22, "#ConfirmationViewBuilder makeConfirmationOptions", buf, v21);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v18 + 232);
  uint64_t v8 = *(void *)(v18 + 216);
  uint64_t v9 = *(void **)(v18 + 176);
  uint64_t v6 = *(void *)(v18 + 224);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8) + **(int **)(v11 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v18 + 240) = v3;
  *uint64_t v3 = *(void *)(v18 + 88);
  v3[1] = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  uint64_t v4 = *(void *)(v18 + 208);
  return v12(v4, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 88) = *v1;
  *(void *)(v4 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  }
  else
  {
    uint64_t v2 = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = v0[26];
  id v5 = v0[25];
  uint64_t v7 = v0[24];
  uint64_t v8 = v0[23];
  v0[11] = v0;
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  v0[32] = v1;
  v0[33] = v2;
  v0[7] = v1;
  v0[8] = v2;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined init with copy of GlobalsProviding(v8, (uint64_t)(v0 + 2));
  uint64_t v12 = v0[5];
  uint64_t v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v12);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v9 + 272) = v3;
  *uint64_t v3 = *(void *)(v9 + 88);
  v3[1] = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  return v11(v12, v10);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(id);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Class v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  Class isa;
  id v50;
  id v51;
  uint64_t v52;

  uint64_t v41 = v0[37];
  uint64_t v40 = v0[36];
  uint64_t v39 = v0[33];
  id v38 = v0[32];
  v0[11] = v0;
  v0[9] = v40;
  v0[10] = v41;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  id v50 = ConfirmationViewBuilder.makeYesNoOptions(yesLabel:noLabel:)(v38, v39, v40, v41);
  uint64_t v46 = v1;
  v0[15] = v50;
  v0[16] = v1;
  uint64_t v42 = (void *)*MEMORY[0x263F65D88];
  uint64_t v2 = (id)*MEMORY[0x263F65D88];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v43 = (void *)MEMORY[0x2611B9130](v3);
  swift_bridgeObjectRelease();

  objc_msgSend(v50, sel_setButtonRole_, v43);
  uint64_t v44 = (void *)*MEMORY[0x263F65D90];
  uint64_t v4 = (id)*MEMORY[0x263F65D90];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = (void *)MEMORY[0x2611B9130](v5);
  swift_bridgeObjectRelease();

  objc_msgSend(v50, sel_setType_, v45);
  type metadata accessor for SAUIConfirmationOptions();
  unint64_t v48 = SAUIAppPunchOut.__allocating_init()();
  v0[17] = v48;
  type metadata accessor for SAUIConfirmationOption();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v47 = v6;
  uint64_t v7 = v50;
  *uint64_t v47 = v50;
  uint64_t v8 = v46;
  v47[1] = v46;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setAllConfirmationOptions_, isa);

  uint64_t v51 = objc_msgSend(v50, sel_commands);
  if (v51)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = v35;
  }
  else
  {
    uint64_t v36 = 0;
  }
  if (v36)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    id v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0;
  }
  objc_msgSend(v48, sel_setConfirmCommands_);

  uint64_t v32 = objc_msgSend(v50, sel_label);
  if (v32)
  {
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v29 = v9;

    uint64_t v30 = v28;
    uint64_t v31 = v29;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  if (v31)
  {
    uint64_t v26 = MEMORY[0x2611B9130](v30);
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)v26;
  }
  else
  {
    uint64_t v27 = 0;
  }
  objc_msgSend(v48, sel_setConfirmText_);

  uint64_t v25 = objc_msgSend(v46, sel_commands);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    os_log_type_t v22 = v21;
  }
  else
  {
    os_log_type_t v22 = 0;
  }
  objc_msgSend(v48, sel_setDenyCommands_);

  uint64_t v20 = objc_msgSend(v46, sel_label);
  if (v20)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v10;

    uint64_t v18 = v16;
    uint64_t v19 = v17;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  if (v19)
  {
    id v14 = MEMORY[0x2611B9130](v18);
    swift_bridgeObjectRelease();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  objc_msgSend(v48, sel_setDenyText_, v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(id))(*(void *)(v37 + 88) + 8);
  return v11(v48);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 88) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 88) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 88) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 88) + 8);
  return v1();
}

uint64_t ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[11] = *v3;
  v6[35] = v2;
  v6[36] = a1;
  v6[37] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  }
  else
  {
    uint64_t v4 = ConfirmationViewBuilder.makeConfirmationOptions(confirmLabelProvider:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

id @nonobjc SFRichText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = MEMORY[0x2611B9130](a1);
    swift_bridgeObjectRelease();
    id v5 = (void *)v4;
  }
  else
  {
    id v5 = 0;
  }
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_textWithString_, v5);

  return v3;
}

uint64_t protocol witness for ConfirmationViewBuilding.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:) in conformance ConfirmationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8;
  *(void *)(v8 + 16) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v9;
  *uint64_t v9 = *(void *)(v11 + 16);
  v9[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return ConfirmationViewBuilder.makePaymentConfirmationView<A, B>(app:intent:response:confirmLabelProvider:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for ConfirmationViewBuilding.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:) in conformance ConfirmationViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8;
  *(void *)(v8 + 16) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v9;
  *uint64_t v9 = *(void *)(v11 + 16);
  v9[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for ConfirmationViewBuilding.makeTCCAcceptanceView(app:) in conformance ConfirmationViewBuilder(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(a1);
}

id @nonobjc SAUIAppPunchOut.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t type metadata accessor for SASTColumnDataListItem()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTColumnDataListItem;
  if (!lazy cache variable for type metadata for SASTColumnDataListItem)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTColumnDataListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError;
  if (!lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsError and conformance PaymentsError);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D8881B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  return implicit closure #1 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(*(void **)(v0 + 16));
}

uint64_t sub_25D888200()
{
  return swift_deallocObject();
}

uint64_t sub_25D88822C()
{
  return swift_deallocObject();
}

uint64_t sub_25D888258()
{
  return swift_deallocObject();
}

uint64_t sub_25D888298()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D88835C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  return implicit closure #9 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)(*(void **)(v0 + 16));
}

uint64_t sub_25D8883A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8883D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8883FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D88843C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for SAAceView()
{
  uint64_t v2 = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25D8884E4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)()
{
  return implicit closure #4 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:)();
}

uint64_t sub_25D888530()
{
  return swift_deallocObject();
}

uint64_t sub_25D88855C()
{
  return swift_deallocObject();
}

uint64_t sub_25D888588()
{
  return swift_deallocObject();
}

uint64_t sub_25D8885C8()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for SATextDecorationRegion()
{
  uint64_t v2 = lazy cache variable for type metadata for SATextDecorationRegion;
  if (!lazy cache variable for type metadata for SATextDecorationRegion)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25D888670()
{
  return swift_deallocObject();
}

uint64_t sub_25D8886B0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8886DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D888708()
{
  return swift_deallocObject();
}

uint64_t sub_25D888748()
{
  return swift_deallocObject();
}

uint64_t sub_25D888788()
{
  return swift_deallocObject();
}

uint64_t sub_25D8887C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8887F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D888820()
{
  return swift_deallocObject();
}

uint64_t sub_25D888860()
{
  return swift_deallocObject();
}

uint64_t sub_25D8888A0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8888E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D88890C()
{
  return swift_deallocObject();
}

uint64_t sub_25D888938()
{
  return swift_deallocObject();
}

uint64_t sub_25D888978()
{
  return swift_deallocObject();
}

uint64_t sub_25D8889B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8889F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D888A24()
{
  return swift_deallocObject();
}

uint64_t sub_25D888A50()
{
  return swift_deallocObject();
}

uint64_t sub_25D888A90()
{
  return swift_deallocObject();
}

uint64_t sub_25D888AD0()
{
  return swift_deallocObject();
}

uint64_t sub_25D888B10()
{
  return swift_deallocObject();
}

uint64_t sub_25D888B3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D888B68()
{
  return swift_deallocObject();
}

uint64_t sub_25D888BA8()
{
  return swift_deallocObject();
}

uint64_t sub_25D888BE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D888C28()
{
  return swift_deallocObject();
}

uint64_t sub_25D888C54()
{
  return swift_deallocObject();
}

uint64_t sub_25D888C80()
{
  return swift_deallocObject();
}

uint64_t sub_25D888CC0()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for SASTApplicationBannerItem()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTApplicationBannerItem;
  if (!lazy cache variable for type metadata for SASTApplicationBannerItem)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTApplicationBannerItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAAppsLaunchApp()
{
  uint64_t v2 = lazy cache variable for type metadata for SAAppsLaunchApp;
  if (!lazy cache variable for type metadata for SAAppsLaunchApp)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAAppsLaunchApp);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFAbstractCommand()
{
  uint64_t v2 = lazy cache variable for type metadata for SFAbstractCommand;
  if (!lazy cache variable for type metadata for SFAbstractCommand)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFAbstractCommand);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFCardSection()
{
  uint64_t v2 = lazy cache variable for type metadata for SFCardSection;
  if (!lazy cache variable for type metadata for SFCardSection)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRichTitleCardSection()
{
  uint64_t v2 = lazy cache variable for type metadata for SFRichTitleCardSection;
  if (!lazy cache variable for type metadata for SFRichTitleCardSection)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRichTitleCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRowCardSection()
{
  uint64_t v2 = lazy cache variable for type metadata for SFRowCardSection;
  if (!lazy cache variable for type metadata for SFRowCardSection)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRowCardSection);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SFRichText?(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [SFCardSection]()
{
}

unint64_t type metadata accessor for INSendPaymentIntent()
{
  uint64_t v2 = lazy cache variable for type metadata for INSendPaymentIntent;
  if (!lazy cache variable for type metadata for INSendPaymentIntent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSendPaymentIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SACardSnippet()
{
  uint64_t v2 = lazy cache variable for type metadata for SACardSnippet;
  if (!lazy cache variable for type metadata for SACardSnippet)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SFRichText()
{
  uint64_t v2 = lazy cache variable for type metadata for SFRichText;
  if (!lazy cache variable for type metadata for SFRichText)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFRichText);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INRequestPaymentIntent()
{
  uint64_t v2 = lazy cache variable for type metadata for INRequestPaymentIntent;
  if (!lazy cache variable for type metadata for INRequestPaymentIntent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INRequestPaymentIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

id *outlined destroy of (A, B)(id *a1)
{
  return a1;
}

void *outlined release of SiriPaymentsSnippetModel.PaymentConfirmationModel(void *a1)
{
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  outlined consume of Data._Representation(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_release();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t type metadata accessor for INSendPaymentIntentResponse()
{
  uint64_t v2 = lazy cache variable for type metadata for INSendPaymentIntentResponse;
  if (!lazy cache variable for type metadata for INSendPaymentIntentResponse)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSendPaymentIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

void *outlined retain of SiriPaymentsSnippetModel.PaymentConfirmationModel(void *a1)
{
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  outlined copy of Data._Representation(v4, v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_retain();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
  uint64_t v6 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  uint64_t v5 = *(int *)(v6 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2 + v5, a1 + v5);
  uint64_t v16 = (void *)(a1 + *(int *)(v6 + 24));
  uint64_t v18 = (void *)(a2 + *(int *)(v6 + 24));
  *uint64_t v18 = *v16;
  uint64_t v8 = v16[1];
  swift_bridgeObjectRetain();
  v18[1] = v8;
  v18[2] = v16[2];
  uint64_t v9 = v16[3];
  swift_bridgeObjectRetain();
  v18[3] = v9;
  v18[4] = v16[4];
  uint64_t v10 = v16[5];
  swift_bridgeObjectRetain();
  v18[5] = v10;
  v18[6] = v16[6];
  uint64_t v11 = v16[7];
  swift_bridgeObjectRetain();
  v18[7] = v11;
  uint64_t v12 = v16[8];
  unint64_t v13 = v16[9];
  outlined copy of Data._Representation(v12, v13);
  v18[8] = v12;
  v18[9] = v13;
  uint64_t v14 = v16[10];
  unint64_t v15 = v16[11];
  outlined copy of Data._Representation(v14, v15);
  v18[10] = v14;
  v18[11] = v15;
  v18[12] = v16[12];
  uint64_t v19 = v16[13];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  v18[13] = v19;
  return result;
}

char *outlined init with take of SiriPaymentsSnippetModel(char *a1, char *a2)
{
  uint64_t v15 = type metadata accessor for SiriPaymentsSnippetModel();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(char *, char *))(*(void *)(v4 - 8) + 32))(a2, a1);
      uint64_t v9 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      uint64_t v8 = &a2[*(int *)(v9 + 20)];
      uint64_t v7 = &a1[*(int *)(v9 + 20)];
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 32))(v8, v7);
      memcpy(&a2[*(int *)(v9 + 24)], &a1[*(int *)(v9 + 24)], 0x70uLL);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a2, a1, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  else
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
    (*(void (**)(char *, char *))(*(void *)(v2 - 8) + 32))(a2, a1);
    uint64_t v12 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
    uint64_t v11 = &a2[*(int *)(v12 + 20)];
    uint64_t v10 = &a1[*(int *)(v12 + 20)];
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
    (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 32))(v11, v10);
    memcpy(&a2[*(int *)(v12 + 24)], &a1[*(int *)(v12 + 24)], 0x70uLL);
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

uint64_t partial apply for closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1)
{
  return closure #2 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.SendPaymentConfirmationModel(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
  (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
  uint64_t v5 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
  uint64_t v4 = *(int *)(v5 + 20);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1 + v4);
  uint64_t v6 = a1 + *(int *)(v5 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v6 + 64), *(void *)(v6 + 72));
  outlined consume of Data._Representation(*(void *)(v6 + 80), *(void *)(v6 + 88));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel;
  if (!lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel)
  {
    type metadata accessor for SiriPaymentsSnippetModel();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SiriPaymentsSnippetModel and conformance SiriPaymentsSnippetModel);
    return WitnessTable;
  }
  return v2;
}

uint64_t *outlined init with copy of SiriPaymentsSnippetModel(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for SiriPaymentsSnippetModel();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v4 - 8) + 16))(a2, a1);
      uint64_t v17 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
      uint64_t v16 = (char *)a2 + *(int *)(v17 + 20);
      uint64_t v15 = (char *)a1 + *(int *)(v17 + 20);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v5 - 8) + 16))(v16, v15);
      uint64_t v27 = (uint64_t *)((char *)a2 + *(int *)(v17 + 24));
      uint64_t v26 = (uint64_t *)((char *)a1 + *(int *)(v17 + 24));
      void *v27 = *v26;
      uint64_t v18 = v26[1];
      swift_bridgeObjectRetain();
      v27[1] = v18;
      v27[2] = v26[2];
      uint64_t v19 = v26[3];
      swift_bridgeObjectRetain();
      v27[3] = v19;
      v27[4] = v26[4];
      uint64_t v20 = v26[5];
      swift_bridgeObjectRetain();
      v27[5] = v20;
      v27[6] = v26[6];
      uint64_t v21 = v26[7];
      swift_bridgeObjectRetain();
      v27[7] = v21;
      uint64_t v22 = v26[8];
      unint64_t v23 = v26[9];
      outlined copy of Data._Representation(v22, v23);
      v27[8] = v22;
      v27[9] = v23;
      uint64_t v24 = v26[10];
      unint64_t v25 = v26[11];
      outlined copy of Data._Representation(v24, v25);
      v27[10] = v24;
      v27[11] = v25;
      v27[12] = v26[12];
      uint64_t v28 = v26[13];
      swift_bridgeObjectRetain();
      v27[13] = v28;
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v13 = *a1;
      swift_bridgeObjectRetain();
      *a2 = v13;
      a2[1] = a1[1];
      uint64_t v14 = a1[2];
      swift_bridgeObjectRetain();
      a2[2] = v14;
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      outlined copy of Data._Representation(*a1, v8);
      *a2 = v7;
      a2[1] = v8;
      a2[2] = a1[2];
      uint64_t v9 = a1[3];
      swift_bridgeObjectRetain();
      a2[3] = v9;
      uint64_t v10 = a1[4];
      unint64_t v11 = a1[5];
      outlined copy of Data._Representation(v10, v11);
      a2[4] = v10;
      a2[5] = v11;
      a2[6] = a1[6];
      uint64_t v12 = a1[7];
      swift_bridgeObjectRetain();
      a2[7] = v12;
      swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)(v2 - 8) + 16))(a2, a1);
      uint64_t v31 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
      uint64_t v30 = (char *)a2 + *(int *)(v31 + 20);
      os_log_type_t v29 = (char *)a1 + *(int *)(v31 + 20);
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
      (*(void (**)(char *, char *))(*(void *)(v3 - 8) + 16))(v30, v29);
      uint64_t v41 = (uint64_t *)((char *)a2 + *(int *)(v31 + 24));
      uint64_t v40 = (uint64_t *)((char *)a1 + *(int *)(v31 + 24));
      *uint64_t v41 = *v40;
      uint64_t v32 = v40[1];
      swift_bridgeObjectRetain();
      v41[1] = v32;
      v41[2] = v40[2];
      uint64_t v33 = v40[3];
      swift_bridgeObjectRetain();
      v41[3] = v33;
      v41[4] = v40[4];
      uint64_t v34 = v40[5];
      swift_bridgeObjectRetain();
      v41[5] = v34;
      v41[6] = v40[6];
      uint64_t v35 = v40[7];
      swift_bridgeObjectRetain();
      v41[7] = v35;
      uint64_t v36 = v40[8];
      unint64_t v37 = v40[9];
      outlined copy of Data._Representation(v36, v37);
      v41[8] = v36;
      v41[9] = v37;
      uint64_t v38 = v40[10];
      unint64_t v39 = v40[11];
      outlined copy of Data._Representation(v38, v39);
      v41[10] = v38;
      v41[11] = v39;
      v41[12] = v40[12];
      uint64_t v42 = v40[13];
      swift_bridgeObjectRetain();
      v41[13] = v42;
      swift_storeEnumTagMultiPayload();
      break;
  }
  return a2;
}

unint64_t type metadata accessor for DialogExecutionResult()
{
  uint64_t v2 = lazy cache variable for type metadata for DialogExecutionResult;
  if (!lazy cache variable for type metadata for DialogExecutionResult)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined destroy of SiriPaymentsSnippetModel(uint64_t a1)
{
  type metadata accessor for SiriPaymentsSnippetModel();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v3 = EnumCaseMultiPayload;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
        (*(void (**)(uint64_t))(*(void *)(v4 - 8) + 8))(a1);
        uint64_t v13 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
        uint64_t v12 = a1 + *(int *)(v13 + 20);
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
        (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v12);
        uint64_t v14 = a1 + *(int *)(v13 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v14 + 64), *(void *)(v14 + 72));
        outlined consume of Data._Representation(*(void *)(v14 + 80), *(void *)(v14 + 88));
        swift_bridgeObjectRelease();
        break;
      case 1:
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INSendPaymentIntent>);
        (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(a1);
        uint64_t v10 = type metadata accessor for SiriPaymentsSnippetModel.SendPaymentConfirmationModel();
        uint64_t v9 = a1 + *(int *)(v10 + 20);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INSendPaymentIntentResponse>);
        (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v9);
        uint64_t v11 = a1 + *(int *)(v10 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v11 + 64), *(void *)(v11 + 72));
        outlined consume of Data._Representation(*(void *)(v11 + 80), *(void *)(v11 + 88));
        swift_bridgeObjectRelease();
        break;
      case 2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 3:
        outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
        swift_bridgeObjectRelease();
        break;
      default:
        JUMPOUT(0);
    }
  }
  return a1;
}

unint64_t type metadata accessor for INRequestPaymentIntentResponse()
{
  uint64_t v2 = lazy cache variable for type metadata for INRequestPaymentIntentResponse;
  if (!lazy cache variable for type metadata for INRequestPaymentIntentResponse)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INRequestPaymentIntentResponse);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined init with copy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
  uint64_t v6 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  uint64_t v5 = *(int *)(v6 + 20);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2 + v5, a1 + v5);
  uint64_t v16 = (void *)(a1 + *(int *)(v6 + 24));
  uint64_t v18 = (void *)(a2 + *(int *)(v6 + 24));
  *uint64_t v18 = *v16;
  uint64_t v8 = v16[1];
  swift_bridgeObjectRetain();
  v18[1] = v8;
  v18[2] = v16[2];
  uint64_t v9 = v16[3];
  swift_bridgeObjectRetain();
  v18[3] = v9;
  v18[4] = v16[4];
  uint64_t v10 = v16[5];
  swift_bridgeObjectRetain();
  v18[5] = v10;
  v18[6] = v16[6];
  uint64_t v11 = v16[7];
  swift_bridgeObjectRetain();
  v18[7] = v11;
  uint64_t v12 = v16[8];
  unint64_t v13 = v16[9];
  outlined copy of Data._Representation(v12, v13);
  v18[8] = v12;
  v18[9] = v13;
  uint64_t v14 = v16[10];
  unint64_t v15 = v16[11];
  outlined copy of Data._Representation(v14, v15);
  v18[10] = v14;
  v18[11] = v15;
  v18[12] = v16[12];
  uint64_t v19 = v16[13];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  v18[13] = v19;
  return result;
}

uint64_t partial apply for closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(uint64_t a1)
{
  return closure #1 in ConfirmationViewBuilder.makeModernizedPaymentConfirmationView<A, B>(app:intent:response:dialog:confirmLabelProvider:slotFieldLabelProvider:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined destroy of SiriPaymentsSnippetModel.RequestPaymentConfirmationModel(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntent<INRequestPaymentIntent>);
  (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
  uint64_t v5 = type metadata accessor for SiriPaymentsSnippetModel.RequestPaymentConfirmationModel();
  uint64_t v4 = *(int *)(v5 + 20);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIntentResponse<INRequestPaymentIntentResponse>);
  (*(void (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1 + v4);
  uint64_t v6 = a1 + *(int *)(v5 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v6 + 64), *(void *)(v6 + 72));
  outlined consume of Data._Representation(*(void *)(v6 + 80), *(void *)(v6 + 88));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for SAUIConfirmationOption()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIConfirmationOption;
  if (!lazy cache variable for type metadata for SAUIConfirmationOption)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SKIDirectInvocationPayload()
{
  uint64_t v2 = lazy cache variable for type metadata for SKIDirectInvocationPayload;
  if (!lazy cache variable for type metadata for SKIDirectInvocationPayload)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIConfirmationView()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIConfirmationView;
  if (!lazy cache variable for type metadata for SAUIConfirmationView)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationView);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAIntentGroupSendPaymentSnippet()
{
  uint64_t v2 = lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet;
  if (!lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupSendPaymentSnippet);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAIntentGroupProtobufMessage()
{
  uint64_t v2 = lazy cache variable for type metadata for SAIntentGroupProtobufMessage;
  if (!lazy cache variable for type metadata for SAIntentGroupProtobufMessage)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupProtobufMessage);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SAUIConfirmationOptions()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIConfirmationOptions;
  if (!lazy cache variable for type metadata for SAUIConfirmationOptions)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOptions);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfirmationViewBuilder(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ConfirmationViewBuilder(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0(a1 + 80);
}

void *initializeWithCopy for ConfirmationViewBuilder(void *a1, void *a2)
{
  uint64_t v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  uint64_t v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  uint64_t v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t assignWithCopy for ConfirmationViewBuilder(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_1(uint64_t result, uint64_t *a2)
{
  uint64_t v8 = (void *)result;
  if ((uint64_t *)result != a2)
  {
    uint64_t v6 = *(void *)(result + 24);
    uint64_t v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(void *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        uint64_t v5 = *a2;
        swift_retain();
        uint64_t result = swift_release();
        *uint64_t v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(void *)(result + 24) = v7;
      *(void *)(result + 32) = a2[4];
      BOOL v4 = (*(_DWORD *)(*(void *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(void *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(void *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          uint64_t v2 = *a2;
          swift_retain();
          *uint64_t v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(void *, uint64_t *))(*(void *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          uint64_t v3 = *a2;
          swift_retain();
          *uint64_t v8 = v3;
        }
        return (*(uint64_t (**)(unsigned char *))(*(void *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy120_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 120))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 24))) {
        int v3 = *(void *)(a1 + 24);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 120) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 120) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 24) = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder()
{
  return &type metadata for ConfirmationViewBuilder;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder.WalletAppLaunchAction(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFD) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 2) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfirmationViewBuilder.WalletAppLaunchAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFD)
  {
    unsigned int v5 = ((a3 + 2) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFD)
  {
    unsigned int v4 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for ConfirmationViewBuilder.WalletAppLaunchAction(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ConfirmationViewBuilder.WalletAppLaunchAction(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return &type metadata for ConfirmationViewBuilder.WalletAppLaunchAction;
}

unint64_t base witness table accessor for Equatable in ConfirmationViewBuilder.WalletAppLaunchAction()
{
  return lazy protocol witness table accessor for type ConfirmationViewBuilder.WalletAppLaunchAction and conformance ConfirmationViewBuilder.WalletAppLaunchAction();
}

unint64_t lazy protocol witness table accessor for type SASTItemGroup and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject;
  if (!lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject)
  {
    type metadata accessor for SASTItemGroup();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SASTItemGroup and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(void *a1, uint64_t a2, void *a3)
{
  return PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(a1, a2, a3);
}

uint64_t PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v6 = *v3;
  uint64_t v24 = a1;
  uint64_t v23 = a2;
  uint64_t v22 = a3;
  uint64_t v21 = *(void *)(v6 + 80);
  uint64_t v20 = *(void *)(v6 + 88);
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  outlined init with take of CommonLabelsProviding(v18, (void *)(v15 + 16));
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v17);
  outlined init with take of CommonLabelsProviding(v17, (void *)(v15 + 56));
  uint64_t v11 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(a3, v11);
  v16[3] = v11;
  v16[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, void *))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10);
  outlined init with take of CommonLabelsProviding(v16, (void *)(v15 + 96));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v15;
}

uint64_t PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1, uint64_t a2)
{
  v3[89] = v2;
  v3[88] = a2;
  v3[87] = a1;
  v3[76] = v3;
  v3[77] = 0;
  v3[78] = 0;
  v3[80] = 0;
  v3[72] = 0;
  v3[73] = 0;
  v3[74] = 0;
  v3[75] = 0;
  uint64_t v9 = *v2;
  v3[90] = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[92] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v3[93] = v4;
  v3[94] = *(void *)(v4 - 8);
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v3[97] = v5;
  v3[98] = *(void *)(v5 - 8);
  v3[99] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[100] = v6;
  v3[101] = *(void *)(v6 - 8);
  v3[102] = swift_task_alloc();
  v3[77] = a2;
  v3[103] = *(void *)(v9 + 80);
  v3[104] = *(void *)(v9 + 88);
  v3[78] = v2;
  return MEMORY[0x270FA2498](PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:), 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v8 = (void *)*v3;
  uint64_t v6 = (void *)(*v3 + 16);
  uint64_t v7 = *v3 + 496;
  v8[76] = *v3;
  v8[111] = v2;
  v8[112] = a1;
  v8[113] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  else
  {
    (*(void (**)(void, void))(v6[92] + 8))(v6[94], v6[91]);
    __swift_destroy_boxed_opaque_existential_0(v7);
    swift_release();
    uint64_t v4 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v8 = (void *)*v3;
  uint64_t v6 = (void *)(*v3 + 16);
  uint64_t v7 = *v3 + 376;
  v8[76] = *v3;
  v8[116] = v2;
  v8[117] = a1;
  v8[118] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v4 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  else
  {
    (*(void (**)(void, void))(v6[92] + 8))(v6[93], v6[91]);
    __swift_destroy_boxed_opaque_existential_0(v7);
    swift_release();
    uint64_t v4 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v20 = *(void *)(v0 + 808);
  uint64_t v21 = *(void *)(v0 + 800);
  *(void *)(v0 + 608) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v2, v21);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 632) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(unsigned int *)(v0 + 952);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    *(void *)(v19 + 664) = buf;
    *(void *)(v19 + 672) = v16;
    *(void *)(v19 + 680) = v17;
    serialize(_:at:)(0, (unsigned char **)(v19 + 664));
    serialize(_:at:)(0, (unsigned char **)(v19 + 664));
    *(void *)(v19 + 688) = v25;
    uint64_t v18 = (void *)swift_task_alloc();
    v18[2] = v19 + 664;
    v18[3] = v19 + 672;
    v18[4] = v19 + 680;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v24, v23, "#PaymentsContinueInAppStrategy makeContinueInAppResponse", buf, v22);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v19 + 816);
  uint64_t v13 = *(void *)(v19 + 800);
  uint64_t v11 = *(void *)(v19 + 808);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  type metadata accessor for INRequestPaymentIntent();
  if (swift_dynamicCastMetatype())
  {
    *(unsigned char *)(v19 + 956) = 0;
  }
  else
  {
    type metadata accessor for INSendPaymentIntent();
    if (swift_dynamicCastMetatype())
    {
      *(unsigned char *)(v19 + 956) = 1;
    }
    else
    {
      type metadata accessor for INSearchForAccountsIntent();
      if (swift_dynamicCastMetatype()) {
        *(unsigned char *)(v19 + 956) = 2;
      }
      else {
        *(unsigned char *)(v19 + 956) = 1;
      }
    }
  }
  outlined init with copy of GlobalsProviding(*(void *)(v19 + 712) + 96, v19 + 16);
  uint64_t v8 = *(void *)(v19 + 40);
  uint64_t v9 = *(void *)(v19 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v19 + 16), v8);
  unsigned int v6 = *(unsigned __int8 *)(v19 + 956);
  *(void *)(v19 + 840) = type metadata accessor for IntentResolutionRecord();
  uint64_t v7 = IntentResolutionRecord.app.getter();
  *(void *)(v19 + 848) = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 40) + **(int **)(v9 + 40));
  int v3 = (void *)swift_task_alloc();
  *(void *)(v19 + 856) = v3;
  *int v3 = *(void *)(v19 + 608);
  v3[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  uint64_t v4 = *(void *)(v19 + 792);
  return v10(v4, v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 608) = *v1;
  *(void *)(v4 + 864) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  else
  {
    swift_release();
    uint64_t v2 = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  uint64_t v34 = v0[89];
  v0[76] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  type metadata accessor for SAAceView();
  v0[80] = Array.init()();
  outlined init with copy of GlobalsProviding(v34 + 16, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  uint64_t v35 = dispatch thunk of DeviceState.isPhone.getter();
  swift_retain();
  if (v35)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 7));
    swift_retain();
  }
  else
  {
    outlined init with copy of GlobalsProviding(v33[89] + 16, (uint64_t)(v33 + 12));
    __swift_project_boxed_opaque_existential_1(v33 + 12, v33[15]);
    uint64_t v32 = dispatch thunk of DeviceState.isPad.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 12));
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 7));
    swift_retain();
    if ((v32 & 1) == 0)
    {
      outlined init with copy of GlobalsProviding(v33[89] + 16, (uint64_t)(v33 + 17));
      __swift_project_boxed_opaque_existential_1(v33 + 17, v33[20]);
      uint64_t v31 = dispatch thunk of DeviceState.isPod.getter();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 17));
      swift_release();
      if ((v31 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_6;
    }
  }
  swift_release();
LABEL_6:
  outlined init with copy of GlobalsProviding(v33[89] + 16, (uint64_t)(v33 + 52));
  __swift_project_boxed_opaque_existential_1(v33 + 52, v33[55]);
  uint64_t v30 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 52));
  if ((v30 & 1) == 0)
  {
    uint64_t v25 = v33[89];
    outlined init with copy of GlobalsProviding(v25 + 56, (uint64_t)(v33 + 57));
    uint64_t v26 = v33[60];
    uint64_t v27 = v33[61];
    __swift_project_boxed_opaque_existential_1(v33 + 57, v26);
    os_log_type_t v29 = IntentResolutionRecord.app.getter();
    v33[109] = v29;
    outlined init with copy of GlobalsProviding(v25 + 16, (uint64_t)(v33 + 62));
    __swift_project_boxed_opaque_existential_1(v33 + 62, v33[65]);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 32) + **(int **)(v27 + 32));
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = v26;
    int v3 = v27;
    uint64_t v4 = v28;
    uint64_t v5 = (void *)v1;
    unsigned int v6 = v29;
    v33[110] = v5;
    void *v5 = v33[76];
    v5[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
    uint64_t v7 = v33[96];
    return v4(v6, v7, v2, v3);
  }
LABEL_10:
  outlined init with copy of GlobalsProviding(v33[89] + 16, (uint64_t)(v33 + 22));
  __swift_project_boxed_opaque_existential_1(v33 + 22, v33[25]);
  uint64_t v24 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 22));
  if (v24)
  {
    uint64_t v19 = v33[89];
    outlined init with copy of GlobalsProviding(v19 + 56, (uint64_t)(v33 + 42));
    uint64_t v20 = v33[45];
    uint64_t v21 = v33[46];
    __swift_project_boxed_opaque_existential_1(v33 + 42, v20);
    os_log_type_t v23 = IntentResolutionRecord.app.getter();
    v33[114] = v23;
    outlined init with copy of GlobalsProviding(v19 + 16, (uint64_t)(v33 + 47));
    __swift_project_boxed_opaque_existential_1(v33 + 47, v33[50]);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 32) + **(int **)(v21 + 32));
    uint64_t v9 = swift_task_alloc();
    uint64_t v2 = v20;
    int v3 = v21;
    uint64_t v4 = v22;
    uint64_t v10 = (void *)v9;
    unsigned int v6 = v23;
    v33[115] = v10;
    *uint64_t v10 = v33[76];
    v10[1] = PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:);
    uint64_t v7 = v33[95];
    return v4(v6, v7, v2, v3);
  }
  uint64_t v17 = v33[99];
  uint64_t v16 = v33[97];
  uint64_t v18 = v33[91];
  uint64_t v13 = v33[89];
  uint64_t v14 = (uint64_t *)v33[87];
  uint64_t v15 = v33[98];
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v33 + 27));
  outlined init with copy of GlobalsProviding(v13 + 16, (uint64_t)(v33 + 32));
  __swift_project_boxed_opaque_existential_1(v33 + 32, v33[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v18, 1);
  v33[37] = 0;
  v33[38] = 0;
  v33[39] = 0;
  v33[40] = 0;
  v33[41] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v14[3] = type metadata accessor for AceOutput();
  v14[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v14);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v33 + 37));
  outlined destroy of NLContextUpdate?(v18);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v33 + 27));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v33[76] + 8);
  return v12();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v10 = v0[113];
  unsigned int v6 = v0[112];
  uint64_t v7 = (const void *)v0[92];
  uint64_t v5 = v0[89];
  v0[76] = v0;
  v0[74] = v6;
  v0[75] = v10;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  uint64_t v8 = IntentResolutionRecord.app.getter();
  uint64_t v1 = type metadata accessor for URL();
  (*(void (**)(const void *, uint64_t))(*(void *)(v1 - 8) + 56))(v7, 1);
  outlined init with copy of GlobalsProviding(v5 + 16, (uint64_t)(v0 + 67));
  uint64_t v9 = static ConfirmationViewBuilder.makeAppLaunchButton(for:buttonText:punchoutURL:deviceState:)(v8, v6, v10, v7, v0 + 67);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 67));
  outlined destroy of URL?((uint64_t)v7);
  swift_release();
  v0[82] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v0[99];
  uint64_t v13 = v0[98];
  uint64_t v14 = v0[97];
  uint64_t v16 = v0[91];
  uint64_t v11 = v0[89];
  uint64_t v12 = (uint64_t *)v0[87];
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v16, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v12[3] = type metadata accessor for AceOutput();
  void v12[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v12);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(void))(v0[76] + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v8 = v0[118];
  uint64_t v4 = v0[117];
  v0[76] = v0;
  v0[72] = v4;
  v0[73] = v8;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  unsigned int v6 = IntentResolutionRecord.app.getter();
  uint64_t v5 = (id)IntentResolutionRecord.intent.getter();
  uint64_t v7 = static ConfirmationViewBuilder.makeWatchAppLaunchButton(for:buttonText:intent:)(v6, v4, v8, v5);

  swift_release();
  v0[81] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = v0[99];
  uint64_t v11 = v0[98];
  uint64_t v12 = v0[97];
  uint64_t v14 = v0[91];
  uint64_t v9 = v0[89];
  uint64_t v10 = (uint64_t *)v0[87];
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v9 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v14, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v10[3] = type metadata accessor for AceOutput();
  v10[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[76] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 608) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 608) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = v0[99];
  unsigned int v6 = v0[98];
  uint64_t v7 = v0[97];
  uint64_t v1 = v0[96];
  uint64_t v2 = v0[94];
  int v3 = v0[93];
  v0[76] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[76] + 8);
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = v0[99];
  unsigned int v6 = v0[98];
  uint64_t v7 = v0[97];
  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  int v3 = v0[93];
  v0[76] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  outlined destroy of [SFCardSection]();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[76] + 8);
  return v4();
}

uint64_t PaymentsContinueInAppStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
  return v2;
}

uint64_t PaymentsContinueInAppStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance PaymentsContinueInAppStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsContinueInAppStrategy.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2);
}

uint64_t type metadata instantiation function for PaymentsContinueInAppStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsContinueInAppStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PaymentsContinueInAppStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for PaymentsContinueInAppStrategy<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in PaymentsContinueInAppStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v9[6] = a1;
  v9[5] = a2;
  uint64_t v4 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v9);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v6);
  a3[3] = v4;
  a3[4] = (uint64_t)&protocol witness table for Globals;
  *a3 = result;
  return result;
}

uint64_t default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v6 = 0;
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v5 = (char *)&v3 - v4;
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t PaymentsRCHFlowStrategy.__allocating_init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  return PaymentsRCHFlowStrategy.init(globals:contactResolver:)(a1, a2);
}

uint64_t PaymentsRCHFlowStrategy.init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t v28 = a2;
  uint64_t v41 = 0;
  uint64_t v26 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v57 = 0;
  uint64_t v56 = 0;
  uint64_t v55 = 0;
  uint64_t v27 = 0;
  uint64_t v33 = *v2;
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v35 = v36 - 8;
  unint64_t v30 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (char *)&v11 - v30;
  uint64_t v32 = (char *)&v11 - v30;
  uint64_t v57 = MEMORY[0x270FA5388](v29);
  uint64_t v56 = v4;
  uint64_t v55 = v31;
  uint64_t v54 = *(void *)(v33 + 80);
  uint64_t v53 = *(void *)(v33 + 88);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v3, v5, v36);
  os_log_type_t v43 = Logger.logObject.getter();
  int v42 = static os_log_type_t.debug.getter();
  unint64_t v39 = &v51;
  uint64_t v51 = 2;
  unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v40 = v52;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v44 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v43, (os_log_type_t)v42))
  {
    uint64_t v6 = v27;
    uint64_t v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = 0;
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(v15);
    uint64_t v22 = &v48;
    unint64_t v48 = v16;
    os_log_type_t v23 = &v47;
    uint64_t v47 = v17;
    uint64_t v20 = &v46;
    uint64_t v46 = v18;
    unsigned int v19 = 0;
    serialize(_:at:)(0, &v48);
    serialize(_:at:)(v19, v22);
    uint64_t v45 = v44;
    uint64_t v21 = (const void **)&v11;
    MEMORY[0x270FA5388](&v11);
    uint64_t v7 = v23;
    uint64_t v8 = (const void **)(&v11 - 6);
    uint64_t v24 = (const void **)(&v11 - 6);
    v8[2] = v22;
    void v8[3] = v7;
    v8[4] = v9;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v6)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v43, (os_log_type_t)v42, "#PaymentsRCHFlowStrategy init", v16, v40);
      uint64_t v13 = 0;
      destroyStorage<A>(_:count:)(v17, 0, v14);
      destroyStorage<A>(_:count:)(v18, v13, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v16, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v36);
  uint64_t v11 = v50;
  outlined init with copy of GlobalsProviding(v29, (uint64_t)v50);
  outlined init with take of CommonLabelsProviding(v11, (void *)(v31 + 16));
  uint64_t v12 = v49;
  outlined init with copy of GlobalsProviding(v28, (uint64_t)v49);
  outlined init with take of CommonLabelsProviding(v12, (void *)(v31 + 56));
  __swift_destroy_boxed_opaque_existential_0(v28);
  __swift_destroy_boxed_opaque_existential_0(v29);
  return v31;
}

uint64_t PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  v3[44] = v2;
  v3[43] = a2;
  v3[42] = a1;
  v3[17] = v3;
  v3[18] = 0;
  v3[19] = 0;
  v3[20] = 0;
  v3[28] = 0;
  uint64_t v7 = *v2;
  v3[45] = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  v3[46] = v4;
  v3[47] = *(void *)(v4 - 8);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[52] = swift_task_alloc();
  v3[18] = a1;
  v3[19] = a2;
  v3[53] = *(void *)(v7 + 80);
  v3[20] = v2;
  return MEMORY[0x270FA2498](PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:), 0);
}

uint64_t PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v79 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v80 = *(void *)(v0 + 376);
  uint64_t v81 = *(void *)(v0 + 368);
  *(void *)(v0 + 136) = v0;
  uint64_t v2 = SignpostName.makeIntentFromParse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v79);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  id v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16);
  v82(v1, v3, v81);
  Swift::String v85 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 168) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v83 = *(unsigned int *)(v0 + 432);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v86 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v85, v84))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v75 = createStorage<A>(capacity:type:)(0);
    uint64_t v76 = createStorage<A>(capacity:type:)(0);
    *(void *)(v78 + 304) = buf;
    *(void *)(v78 + 312) = v75;
    *(void *)(v78 + 320) = v76;
    serialize(_:at:)(0, (unsigned char **)(v78 + 304));
    serialize(_:at:)(0, (unsigned char **)(v78 + 304));
    *(void *)(v78 + 328) = v86;
    unint64_t v77 = (void *)swift_task_alloc();
    v77[2] = v78 + 304;
    v77[3] = v78 + 312;
    v77[4] = v78 + 320;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v85, v84, "#PaymentsRCHFlowStrategy makeIntentFromParse", buf, v83);
    destroyStorage<A>(_:count:)(v75, 0, v73);
    destroyStorage<A>(_:count:)(v76, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v66 = *(void *)(v78 + 408);
  uint64_t v4 = *(void *)(v78 + 400);
  uint64_t v68 = *(void *)(v78 + 368);
  uint64_t v65 = *(void *)(v78 + 376);

  uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v67(v66, v68);
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  v82(v4, v5, v68);
  oslog = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.debug.getter();
  *(void *)(v78 + 176) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v78 + 436);
  uint64_t v72 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v70))
  {
    uint64_t v61 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v62 = createStorage<A>(capacity:type:)(0);
    uint64_t v63 = createStorage<A>(capacity:type:)(0);
    *(void *)(v78 + 272) = v61;
    *(void *)(v78 + 280) = v62;
    *(void *)(v78 + 288) = v63;
    serialize(_:at:)(0, (unsigned char **)(v78 + 272));
    serialize(_:at:)(0, (unsigned char **)(v78 + 272));
    *(void *)(v78 + 296) = v72;
    uint64_t v64 = (void *)swift_task_alloc();
    v64[2] = v78 + 272;
    v64[3] = v78 + 280;
    v64[4] = v78 + 288;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v70, "#PaymentsRCHFlowStrategy Transforming Parse to SiriKitPaymentsIntent.", v61, size);
    destroyStorage<A>(_:count:)(v62, 0, v60);
    destroyStorage<A>(_:count:)(v63, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v61, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v57 = *(void *)(v78 + 400);
  uint64_t v58 = *(void *)(v78 + 368);
  id v59 = *(id *)(v78 + 344);

  v67(v57, v58);
  id v6 = v59;
  if (v59)
  {
    uint64_t v55 = *(void **)(v78 + 344);
    uint64_t v56 = *(void *)(*(void *)(v78 + 360) + 96);
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
  }
  uint64_t v53 = *(void *)(v78 + 352);
  outlined init with copy of GlobalsProviding(v53 + 16, v78 + 16);
  uint64_t v52 = *(void *)(v78 + 40);
  uint64_t v51 = *(void *)(v78 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v78 + 16), v52);
  (*(void (**)(uint64_t))(v51 + 24))(v52);
  outlined init with copy of GlobalsProviding(v53 + 56, v78 + 96);
  id v54 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v55, v56, v78 + 56, v78 + 96);
  __swift_destroy_boxed_opaque_existential_0(v78 + 96);
  __swift_destroy_boxed_opaque_existential_0(v78 + 56);
  __swift_destroy_boxed_opaque_existential_0(v78 + 16);

  if (v54)
  {
    uint64_t v50 = swift_dynamicCastUnknownClass();
    if (v50)
    {
      uint64_t v49 = v50;
    }
    else
    {

      uint64_t v49 = 0;
    }
    uint64_t v48 = v49;
  }
  else
  {
    uint64_t v48 = 0;
  }
  if (v48)
  {
    uint64_t v7 = *(void *)(v78 + 392);
    uint64_t v43 = *(void *)(v78 + 368);
    *(void *)(v78 + 224) = v48;
    uint64_t v8 = Logger.payments.unsafeMutableAddressor();
    v82(v7, v8, v43);
    log = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    *(void *)(v78 + 232) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v44 = *(_DWORD *)(v78 + 444);
    uint64_t v47 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v45))
    {
      unint64_t v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v40 = createStorage<A>(capacity:type:)(0);
      uint64_t v41 = createStorage<A>(capacity:type:)(0);
      *(void *)(v78 + 240) = v39;
      *(void *)(v78 + 248) = v40;
      *(void *)(v78 + 256) = v41;
      serialize(_:at:)(0, (unsigned char **)(v78 + 240));
      serialize(_:at:)(0, (unsigned char **)(v78 + 240));
      *(void *)(v78 + 264) = v47;
      int v42 = (void *)swift_task_alloc();
      v42[2] = v78 + 240;
      v42[3] = v78 + 248;
      v42[4] = v78 + 256;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, log, v45, "#PaymentsRCHFlowStrategy Returning SiriKitPaymentsIntent.", v39, v44);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v39, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(v78 + 416);
    uint64_t v37 = *(void *)(v78 + 392);
    uint64_t v35 = *(void *)(v78 + 368);

    v67(v37, v35);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v36);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = v48;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(v78 + 136) + 8);
    return v10(v9);
  }
  uint64_t v12 = *(void *)(v78 + 384);
  uint64_t v30 = *(void *)(v78 + 368);
  uint64_t v13 = Logger.payments.unsafeMutableAddressor();
  v82(v12, v13, v30);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  *(void *)(v78 + 184) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v31 = *(_DWORD *)(v78 + 440);
  uint64_t v34 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v33, v32))
  {
    uint64_t v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v27 = createStorage<A>(capacity:type:)(0);
    uint64_t v28 = createStorage<A>(capacity:type:)(0);
    *(void *)(v78 + 192) = v26;
    *(void *)(v78 + 200) = v27;
    *(void *)(v78 + 208) = v28;
    serialize(_:at:)(0, (unsigned char **)(v78 + 192));
    serialize(_:at:)(0, (unsigned char **)(v78 + 192));
    *(void *)(v78 + 216) = v34;
    uint64_t v29 = (void *)swift_task_alloc();
    v29[2] = v78 + 192;
    v29[3] = v78 + 200;
    v29[4] = v78 + 208;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v33, v32, "#PaymentsRCHFlowStrategy could not convert to SiriKitPaymentsIntent.", v26, v31);
    destroyStorage<A>(_:count:)(v27, 0, v25);
    destroyStorage<A>(_:count:)(v28, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v26, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v78 + 384);
  uint64_t v23 = *(void *)(v78 + 368);

  v67(v22, v23);
  id v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeName);
  if (v24)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v14;

    uint64_t v20 = v18;
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  if (v21)
  {
    uint64_t v16 = *(void *)(v78 + 416);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v15 = v20;
    *(void *)(v15 + 8) = v21;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0;
    *(unsigned char *)(v15 + 48) = 10;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = v17;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(v78 + 136) + 8);
    return v10(v9);
  }
  return _assertionFailure(_:_:file:line:flags:)();
}

void $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
}

uint64_t PaymentsRCHFlowStrategy.actionForInput(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = a2;
  v6[1] = a1;
  uint64_t v3 = v2;
  uint64_t v8 = v3;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v10 = (void *)*v3;
  uint64_t v9 = v3;
  uint64_t v16 = type metadata accessor for Parse();
  uint64_t v13 = *(void *)(v16 - 8);
  uint64_t v14 = v16 - 8;
  unint64_t v7 = (*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v16);
  uint64_t v15 = (uint64_t)v6 - v7;
  uint64_t v20 = a1;
  uint64_t v19 = v8;
  uint64_t v12 = v10[10];
  uint64_t v18 = v12;
  uint64_t v17 = v10[11];
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v15, v12, v10[12], v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v15, v16);
}

uint64_t PaymentsRCHFlowStrategy.makeAppDoesNotSupportIntentResponse(app:intent:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v36 = a1;
  uint64_t v35 = a2;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v48 = 0;
  uint32_t v31 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v32 = 0;
  uint64_t v40 = *v5;
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v43 - 8);
  uint64_t v42 = v43 - 8;
  unint64_t v37 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v6 = (char *)&v16 - v37;
  unint64_t v39 = (char *)&v16 - v37;
  uint64_t v64 = MEMORY[0x270FA5388](v36);
  uint64_t v63 = v7;
  uint64_t v62 = *(void *)(v40 + 80);
  uint64_t v60 = v8;
  uint64_t v61 = v9;
  uint64_t v59 = v38;
  uint64_t v58 = *(void *)(v40 + 88);
  uint64_t v10 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v6, v10, v43);
  uint64_t v50 = Logger.logObject.getter();
  int v49 = static os_log_type_t.debug.getter();
  uint64_t v46 = &v56;
  uint64_t v56 = 2;
  unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v47 = v57;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v51 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v50, (os_log_type_t)v49))
  {
    uint64_t v11 = v32;
    uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = 0;
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(v19);
    uint64_t v26 = &v55;
    uint64_t v55 = v20;
    uint64_t v27 = &v54;
    uint64_t v54 = v21;
    id v24 = &v53;
    uint64_t v53 = v22;
    unsigned int v23 = 0;
    serialize(_:at:)(0, &v55);
    serialize(_:at:)(v23, v26);
    uint64_t v52 = v51;
    uint64_t v25 = &v16;
    MEMORY[0x270FA5388](&v16);
    uint64_t v12 = v27;
    uint64_t v13 = &v16 - 6;
    uint64_t v28 = &v16 - 6;
    v13[2] = (uint64_t)v26;
    v13[3] = (uint64_t)v12;
    void v13[4] = v14;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v11)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v50, (os_log_type_t)v49, "#PaymentsRCHFlowStrategy makeAppDoesNotSupportIntentResponse", v20, v47);
      uint64_t v17 = 0;
      destroyStorage<A>(_:count:)(v21, 0, v18);
      destroyStorage<A>(_:count:)(v22, v17, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v20, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v43);
  type metadata accessor for EmptyOutput();
  return static EmptyOutput.instance.getter();
}

uint64_t PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  uint64_t v9 = *v2;
  v3[7] = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[11] = *(void *)(v9 + 80);
  v3[5] = v7;
  v3[12] = *(void *)(v9 + 88);
  return MEMORY[0x270FA2498](PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:), 0);
}

uint64_t PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v35 = v0;
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v19 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v17;
  v21[3] = v18;
  void v21[4] = *(void *)(v19 + 96);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 104);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 32;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v23 + 24) = v22;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v3;
  swift_retain();
  void *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v30 = buf;
    uint64_t v31 = v12;
    uint64_t v32 = v13;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_25D85A000, v28, v29, "#PaymentsRCHFlowStrategy<%s> makeIntentExecutionBehavior", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v8 = v14[10];
  uint64_t v7 = v14[8];
  uint64_t v6 = v14[9];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v9 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v14[2] + 8);
  return v4(v9);
}

uint64_t PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[8] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  uint64_t v11 = *v4;
  v5[10] = *v4;
  uint64_t v6 = type metadata accessor for Logger();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[14] = *(void *)(v11 + 80);
  v5[5] = a4;
  v5[15] = *(void *)(v11 + 88);
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:), 0);
}

uint64_t PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v42 = v0;
  uint64_t v19 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 80);
  id v21 = *(id *)(v0 + 72);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v18;
  v23[3] = v19;
  uint64_t v20 = *(void *)(v17 + 96);
  v23[4] = v20;
  id v3 = v21;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v18;
  v26[3] = v19;
  v26[4] = v20;
  v26[5] = v21;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 56) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 128);
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 32;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(void *)(v24 + 24) = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v25 + 24) = v24;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v30 + 24) = v25;
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 32;
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  *(void *)(v27 + 24) = v26;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v33 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v4;
  swift_retain();
  *uint64_t v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v28;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v29;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[5] = v30;
  swift_retain();
  v34[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[7] = v31;
  swift_retain();
  v34[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[9] = v32;
  swift_retain();
  v34[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[11] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v35, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(2);
    unint64_t v37 = buf;
    uint64_t v38 = v12;
    uint64_t v39 = v13;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(2, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25D85A000, v35, v36, "#PaymentsRCHFlowStrategy<%s> makeFailureConfirmingIntentResponse %s", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = v14[13];
  uint64_t v8 = v14[11];
  uint64_t v7 = v14[12];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v14[2] + 8);
  return v5();
}

uint64_t implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(void *a1)
{
  id v1 = a1;
  swift_getWitnessTable();
  return String.init<A>(describing:)();
}

uint64_t PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[33] = v2;
  v3[32] = a1;
  v3[27] = v3;
  v3[28] = 0;
  v3[29] = 0;
  v3[31] = 0;
  uint64_t v8 = *v2;
  v3[34] = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[38] = v4;
  v3[39] = *(void *)(v4 - 8);
  v3[40] = swift_task_alloc();
  type metadata accessor for CATOption();
  v3[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[42] = v5;
  v3[43] = *(void *)(v5 - 8);
  v3[44] = swift_task_alloc();
  v3[28] = a2;
  v3[45] = *(void *)(v8 + 80);
  v3[46] = *(void *)(v8 + 88);
  v3[29] = v2;
  return MEMORY[0x270FA2498](PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0);
}

uint64_t PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v42 = v0;
  uint64_t v25 = *(void *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 344);
  uint64_t v23 = *(void *)(v0 + 336);
  uint64_t v26 = *(void *)(v0 + 272);
  *(void *)(v0 + 216) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v1, v2, v23);
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = v24;
  v28[3] = v25;
  v28[4] = *(void *)(v26 + 96);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 240) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v27 = *(_DWORD *)(v0 + 400);
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 32;
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v30 + 24) = v29;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v33 + 24) = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v3;
  swift_retain();
  *uint64_t v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v31;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v32;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[5] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v35, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = createStorage<A>(capacity:type:)(0);
    uint64_t v20 = createStorage<A>(capacity:type:)(1);
    unint64_t v37 = buf;
    uint64_t v38 = v19;
    uint64_t v39 = v20;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25D85A000, v35, v36, "#PaymentsRCHFlowStrategy<%s> makeFailureHandlingIntentResponse", buf, v27);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = v21[44];
  uint64_t v12 = v21[42];
  uint64_t v13 = v21[37];
  uint64_t v14 = v21[36];
  uint64_t v10 = v21[43];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  v21[47] = v4;
  v21[31] = v4;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NOT_ELIGIBLE", 0xCuLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for SpeakableString();
  uint64_t v16 = *(void (**)(uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v13);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v16)(v14, 0, 1, v15);
  uint64_t v5 = (void *)swift_task_alloc();
  v21[48] = v5;
  void *v5 = v21[27];
  v5[1] = PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  uint64_t v6 = v21[40];
  uint64_t v7 = v21[37];
  uint64_t v8 = v21[36];
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(v6, v7, 0, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[27] = *v1;
  v5[49] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  else
  {
    uint64_t v4 = v5[37];
    outlined destroy of SpeakableString?(v5[36]);
    outlined destroy of SpeakableString?(v4);
    uint64_t v2 = PaymentsRCHFlowStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v12 = v0[40];
  uint64_t v10 = v0[39];
  uint64_t v11 = v0[38];
  uint64_t v13 = v0[35];
  uint64_t v6 = v0[33];
  uint64_t v9 = (uint64_t *)v0[32];
  v0[27] = v0;
  outlined init with copy of GlobalsProviding(v6 + 16, (uint64_t)(v0 + 2));
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  outlined init with copy of GlobalsProviding(v6 + 16, (uint64_t)(v0 + 12));
  uint64_t v8 = v0[15];
  uint64_t v7 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v13, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v9[3] = type metadata accessor for AceOutput();
  v9[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v9);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[27] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[37];
  uint64_t v1 = v0[36];
  v0[27] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[27] + 8);
  return v2();
}

uint64_t PaymentsRCHFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 360) = v2;
  *(void *)(v3 + 352) = a2;
  *(void *)(v3 + 344) = a1;
  *(void *)(v3 + 264) = v3;
  *(void *)(v3 + 272) = 0;
  *(void *)(v3 + 280) = 0;
  *(void *)(v3 + 296) = 0;
  *(unsigned char *)(v3 + 592) = 0;
  uint64_t v10 = *v2;
  *(void *)(v3 + 368) = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 384) = swift_task_alloc();
  *(void *)(v3 + 392) = swift_task_alloc();
  *(void *)(v3 + 400) = swift_task_alloc();
  *(void *)(v3 + 408) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BargeInError();
  *(void *)(v3 + 416) = v4;
  *(void *)(v3 + 424) = *(void *)(v4 - 8);
  *(void *)(v3 + 432) = swift_task_alloc();
  type metadata accessor for CATOption();
  *(void *)(v3 + 440) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 448) = v5;
  *(void *)(v3 + 456) = *(void *)(v5 - 8);
  *(void *)(v3 + 464) = swift_task_alloc();
  *(void *)(v3 + 472) = swift_task_alloc();
  *(void *)(v3 + 480) = swift_task_alloc();
  *(void *)(v3 + 488) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 496) = v6;
  *(void *)(v3 + 504) = *(void *)(v6 - 8);
  *(void *)(v3 + 512) = swift_task_alloc();
  *(void *)(v3 + 520) = swift_task_alloc();
  *(void *)(v3 + 528) = swift_task_alloc();
  *(void *)(v3 + 272) = a2;
  *(void *)(v3 + 280) = v9;
  *(void *)(v3 + 536) = *(void *)(v10 + 80);
  *(void *)(v3 + 544) = *(void *)(v10 + 88);
  return MEMORY[0x270FA2498](PaymentsRCHFlowStrategy.makeErrorResponse(error:), 0);
}

uint64_t PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  uint64_t v122 = v0;
  uint64_t v88 = *(void *)(v0 + 544);
  uint64_t v87 = *(void *)(v0 + 536);
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v84 = *(void *)(v0 + 504);
  uint64_t v85 = *(void *)(v0 + 496);
  uint64_t v89 = *(void *)(v0 + 368);
  id v91 = *(id *)(v0 + 352);
  *(void *)(v0 + 264) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16);
  v86(v1, v2, v85);
  id v93 = (void *)swift_allocObject();
  v93[2] = v87;
  v93[3] = v88;
  uint64_t v90 = *(void *)(v89 + 96);
  v93[4] = v90;
  id v3 = v91;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = v91;
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.error.getter();
  *(void *)(v0 + 288) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 244);
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = 32;
  uint64_t v99 = swift_allocObject();
  *(unsigned char *)(v99 + 16) = 8;
  uint64_t v94 = swift_allocObject();
  *(void *)(v94 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(void *)(v94 + 24) = v93;
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v95 + 24) = v94;
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v100 + 24) = v95;
  uint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 32;
  uint64_t v102 = swift_allocObject();
  *(unsigned char *)(v102 + 16) = 8;
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  *(void *)(v97 + 24) = v96;
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v103 + 24) = v97;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v104 = v4;
  swift_retain();
  *uint64_t v104 = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[1] = v98;
  swift_retain();
  v104[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[3] = v99;
  swift_retain();
  v104[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[5] = v100;
  swift_retain();
  v104[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[7] = v101;
  swift_retain();
  v104[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[9] = v102;
  swift_retain();
  v104[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[11] = v103;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v105, v106))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v81 = createStorage<A>(capacity:type:)(0);
    uint64_t v82 = createStorage<A>(capacity:type:)(2);
    uint64_t v117 = buf;
    uint64_t v118 = v81;
    uint64_t v119 = v82;
    serialize(_:at:)(2, &v117);
    serialize(_:at:)(2, &v117);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    unint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v121 = v103;
    closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v117, (uint64_t)&v118, (uint64_t)&v119);
    _os_log_impl(&dword_25D85A000, v105, v106, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse for error: %s", buf, size);
    destroyStorage<A>(_:count:)(v81, 0, v79);
    destroyStorage<A>(_:count:)(v82, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v74 = *(void *)(v83 + 528);
  uint64_t v75 = *(void *)(v83 + 496);
  id v78 = *(id *)(v83 + 352);
  uint64_t v73 = *(void *)(v83 + 504);

  uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v76(v74, v75);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v77 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v83 + 552) = v77;
  *(void *)(v83 + 296) = v77;
  id v5 = v78;
  *(void *)(v83 + 304) = v78;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(*(void *)(v83 + 424) + 8))(*(void *)(v83 + 432), *(void *)(v83 + 416));
    id v6 = *(id *)(v83 + 352);

    *(unsigned char *)(v83 + 592) = 1;
LABEL_22:
    uint64_t v56 = *(void *)(v83 + 544);
    uint64_t v55 = *(void *)(v83 + 536);
    uint64_t v9 = *(void *)(v83 + 520);
    uint64_t v54 = *(void *)(v83 + 496);
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v86(v9, v10, v54);
    uint64_t v58 = (void *)swift_allocObject();
    v58[2] = v55;
    v58[3] = v56;
    v58[4] = v90;
    oslog = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    *(void *)(v83 + 336) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v57 = *(_DWORD *)(v83 + 596);
    uint64_t v61 = swift_allocObject();
    *(unsigned char *)(v61 + 16) = 32;
    uint64_t v62 = swift_allocObject();
    *(unsigned char *)(v62 + 16) = 8;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
    *(void *)(v59 + 24) = v58;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v60 + 24) = v59;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v63 + 24) = v60;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v64 = v11;
    swift_retain();
    *uint64_t v64 = partial apply for closure #1 in OSLogArguments.append(_:);
    v64[1] = v61;
    swift_retain();
    v64[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v64[3] = v62;
    swift_retain();
    v64[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v64[5] = v63;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v66))
    {
      uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v52 = createStorage<A>(capacity:type:)(0);
      uint64_t v53 = createStorage<A>(capacity:type:)(1);
      uint64_t v112 = v51;
      uint64_t v113 = v52;
      uint64_t v114 = v53;
      serialize(_:at:)(2, &v112);
      serialize(_:at:)(1, &v112);
      unint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v116 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      unint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v116 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      unint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v116 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
      _os_log_impl(&dword_25D85A000, oslog, v66, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse vending TIMEOUT response", v51, v57);
      destroyStorage<A>(_:count:)(v52, 0, v50);
      destroyStorage<A>(_:count:)(v53, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v51, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v44 = *(void *)(v83 + 520);
    uint64_t v45 = *(void *)(v83 + 496);
    uint64_t v46 = *(void *)(v83 + 408);
    uint64_t v47 = *(void *)(v83 + 400);

    v76(v44, v45);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TIMEOUT", 7uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v48 = type metadata accessor for SpeakableString();
    int v49 = *(void (**)(uint64_t))(*(void *)(v48 - 8) + 56);
    v49(v46);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v49)(v47, 0, 1, v48);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v83 + 560) = v12;
    *uint64_t v12 = *(void *)(v83 + 264);
    v12[1] = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
    uint64_t v13 = *(void *)(v83 + 480);
    uint64_t v14 = *(void *)(v83 + 408);
    uint64_t v15 = *(void *)(v83 + 400);
    return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(v13, v14, 0, v15);
  }
  id v7 = *(id *)(v83 + 352);
  uint64_t v72 = *(void **)(v83 + 352);
  id v8 = v72;
  *(void *)(v83 + 312) = v72;
  type metadata accessor for CommandFailure();
  if (swift_dynamicCast()) {
    uint64_t v71 = *(void *)(v83 + 320);
  }
  else {
    uint64_t v71 = 0;
  }
  if (v71)
  {
    uint64_t v68 = CommandFailure.errorCode.getter();
    swift_release();
    uint64_t v69 = v68;
    char v70 = 0;
  }
  else
  {
    uint64_t v69 = 0;
    char v70 = 1;
  }
  *(void *)(v83 + 216) = v69;
  *(unsigned char *)(v83 + 224) = v70 & 1;
  *(void *)(v83 + 232) = 1307;
  *(unsigned char *)(v83 + 240) = 0;
  if ((*(unsigned char *)(v83 + 224) & 1) == 0)
  {
    outlined init with copy of Int?(v83 + 216, v83 + 248);
    if ((*(unsigned char *)(v83 + 240) & 1) == 0)
    {
      BOOL v67 = *(void *)(v83 + 248) == *(void *)(v83 + 232);
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(v83 + 240) & 1) == 0)
  {
LABEL_20:
    BOOL v67 = 0;
    goto LABEL_18;
  }
  BOOL v67 = 1;
LABEL_18:

  *(unsigned char *)(v83 + 592) = v67;
  if (v67) {
    goto LABEL_22;
  }
  uint64_t v33 = *(void *)(v83 + 544);
  uint64_t v32 = *(void *)(v83 + 536);
  uint64_t v17 = *(void *)(v83 + 512);
  uint64_t v31 = *(void *)(v83 + 496);
  uint64_t v18 = Logger.payments.unsafeMutableAddressor();
  v86(v17, v18, v31);
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = v32;
  v35[3] = v33;
  v35[4] = v90;
  log = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  *(void *)(v83 + 328) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v34 = *(_DWORD *)(v83 + 260);
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = 32;
  uint64_t v39 = swift_allocObject();
  *(unsigned char *)(v39 + 16) = 8;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:);
  *(void *)(v36 + 24) = v35;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v37 + 24) = v36;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v40 + 24) = v37;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v41 = v19;
  swift_retain();
  *uint64_t v41 = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[1] = v38;
  swift_retain();
  v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[3] = v39;
  swift_retain();
  v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[5] = v40;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v43))
  {
    uint64_t v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v29 = createStorage<A>(capacity:type:)(0);
    uint64_t v30 = createStorage<A>(capacity:type:)(1);
    uint64_t v107 = v28;
    uint64_t v108 = v29;
    uint64_t v109 = v30;
    serialize(_:at:)(2, &v107);
    serialize(_:at:)(1, &v107);
    uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v111 = v38;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v111 = v39;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v111 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    _os_log_impl(&dword_25D85A000, log, v43, "#PaymentsRCHFlowStrategy<%s> makeErrorResponse vending generic response", v28, v34);
    destroyStorage<A>(_:count:)(v29, 0, v27);
    destroyStorage<A>(_:count:)(v30, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v28, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v21 = *(void *)(v83 + 512);
  uint64_t v22 = *(void *)(v83 + 496);
  uint64_t v23 = *(void *)(v83 + 392);
  uint64_t v24 = *(void *)(v83 + 384);

  v76(v21, v22);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for SpeakableString();
  uint64_t v26 = *(void (**)(uint64_t))(*(void *)(v25 - 8) + 56);
  v26(v23);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("send", 4uLL, 1);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v26)(v24, 0, 1, v25);
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v83 + 576) = v20;
  void *v20 = *(void *)(v83 + 264);
  v20[1] = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  uint64_t v13 = *(void *)(v83 + 472);
  uint64_t v14 = *(void *)(v83 + 392);
  uint64_t v15 = *(void *)(v83 + 384);
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(v13, v14, 0, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  id v6 = *v1;
  id v5 = *v1 + 16;
  *(void *)(v6 + 264) = *v1;
  *(void *)(v6 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  }
  else
  {
    uint64_t v4 = *(void *)(v5 + 392);
    outlined destroy of SpeakableString?(*(void *)(v5 + 384));
    outlined destroy of SpeakableString?(v4);
    uint64_t v2 = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[61];
  uint64_t v2 = v0[60];
  id v3 = v0[57];
  uint64_t v4 = v0[56];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v17 = v0[61];
  uint64_t v18 = v0[58];
  uint64_t v14 = v0[57];
  uint64_t v15 = v0[56];
  uint64_t v19 = v0[47];
  uint64_t v10 = v0[45];
  uint64_t v13 = (uint64_t *)v0[43];
  (*(void (**)(void))(v14 + 16))();
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 2));
  uint64_t v9 = v0[5];
  id v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 12));
  uint64_t v12 = v0[15];
  uint64_t v11 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v12);
  (*(void (**)(uint64_t))(v11 + 16))(v12);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  id v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v19, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v13[3] = type metadata accessor for AceOutput();
  void v13[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v13);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v16(v18, v15);
  swift_release();
  v16(v17, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0[33] + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  id v6 = *v1;
  id v5 = *v1 + 16;
  *(void *)(v6 + 264) = *v1;
  *(void *)(v6 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  }
  else
  {
    uint64_t v4 = *(void *)(v5 + 376);
    outlined destroy of SpeakableString?(*(void *)(v5 + 368));
    outlined destroy of SpeakableString?(v4);
    uint64_t v2 = PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[61];
  uint64_t v2 = v0[59];
  id v3 = v0[57];
  uint64_t v4 = v0[56];
  v0[33] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v17 = v0[61];
  uint64_t v18 = v0[58];
  uint64_t v14 = v0[57];
  uint64_t v15 = v0[56];
  uint64_t v19 = v0[47];
  uint64_t v10 = v0[45];
  uint64_t v13 = (uint64_t *)v0[43];
  (*(void (**)(void))(v14 + 16))();
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 2));
  uint64_t v9 = v0[5];
  id v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  outlined init with copy of GlobalsProviding(v10 + 16, (uint64_t)(v0 + 12));
  uint64_t v12 = v0[15];
  uint64_t v11 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v12);
  (*(void (**)(uint64_t))(v11 + 16))(v12);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  id v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v19, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v13[3] = type metadata accessor for AceOutput();
  void v13[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v13);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v16(v18, v15);
  swift_release();
  v16(v17, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0[33] + 8);
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[51];
  uint64_t v1 = v0[50];
  v0[33] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[33] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[49];
  uint64_t v1 = v0[48];
  v0[33] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[33] + 8);
  return v2();
}

uint64_t implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  return Error.localizedDescription.getter();
}

uint64_t PaymentsRCHFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  return v2;
}

uint64_t PaymentsRCHFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance PaymentsRCHFlowStrategy<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PaymentsRCHFlowStrategy.actionForInput(input:)(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *id v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for PaymentsRCHFlowStrategy();
  return MEMORY[0x2611B78F0](a1, v3, a3);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsRCHFlowStrategy.makeErrorResponse(error:)(a1, a2);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  *(void *)(v5 + 16) = v5;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v6;
  uint64_t v7 = type metadata accessor for PaymentsRCHFlowStrategy();
  *id v6 = *(void *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66498](a1, a2, a3, v7, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  *(void *)(v5 + 16) = v5;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v6;
  uint64_t v7 = type metadata accessor for PaymentsRCHFlowStrategy();
  *id v6 = *(void *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66490](a1, a2, a3, v7, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  *(void *)(v5 + 16) = v5;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v6;
  uint64_t v7 = type metadata accessor for PaymentsRCHFlowStrategy();
  *id v6 = *(void *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66488](a1, a2, a3, v7, a5);
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for PaymentsRCHFlowStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66480](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 160)
                                                                   + **(int **)(**(void **)v4 + 160));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *uint64_t v6 = *(void *)(v8 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

uint64_t SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[42] = v4;
  v5[41] = a4;
  v5[40] = a3;
  v5[39] = a2;
  v5[38] = a1;
  v5[31] = v5;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  v5[27] = 0;
  v5[28] = 0;
  v5[37] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[45] = v6;
  v5[46] = *(void *)(v6 - 8);
  v5[47] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[48] = v7;
  v5[49] = *(void *)(v7 - 8);
  v5[50] = swift_task_alloc();
  v5[32] = a2;
  v5[33] = a3;
  v5[34] = a4;
  v5[35] = v4;
  return MEMORY[0x270FA2498](SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:), 0);
}

uint64_t SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 328);
  *(void *)(v0 + 248) = v0;
  uint64_t v27 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)objc_msgSend(v2, sel_code));
  uint64_t v28 = v3;
  *(void *)(v0 + 408) = v3;
  *(void *)(v0 + 216) = v27;
  *(void *)(v0 + 224) = v3;
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v4, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 288) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 448);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v5;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    uint64_t v39 = buf;
    uint64_t v40 = v22;
    uint64_t v41 = v23;
    serialize(_:at:)(2, &v39);
    serialize(_:at:)(1, &v39);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    _os_log_impl(&dword_25D85A000, v36, v37, "#SendPaymentFlowStrategy makeFailureConfirmingIntentResponse, code %s", buf, size);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v15 = v24[50];
  uint64_t v16 = v24[48];
  uint64_t v14 = v24[49];

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  unint64_t v18 = type metadata accessor for INSendPaymentIntent();
  v24[52] = v18;
  unint64_t v17 = type metadata accessor for INSendPaymentIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17, v38);
  uint64_t v19 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17);
  uint64_t v6 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17);
  uint64_t v7 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v38, v19, v6);
  v24[53] = v7;
  v24[37] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v24[54] = v8;
  *uint64_t v8 = v24[31];
  v8[1] = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  uint64_t v9 = v24[44];
  uint64_t v10 = v24[41];
  uint64_t v11 = v24[40];
  uint64_t v12 = v24[39];
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v9, v11, v10, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 248) = *v1;
  *(void *)(v4 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  }
  else
  {
    uint64_t v2 = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[46];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[44];
  v0[31] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(v24[44]);
    v24[29] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[30] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[31] + 8);
  }
  else
  {
    uint64_t v22 = v24[47];
    uint64_t v21 = v24[45];
    uint64_t v23 = v24[43];
    uint64_t v16 = v24[42];
    uint64_t v19 = (uint64_t *)v24[38];
    uint64_t v20 = v24[46];
    (*(void (**)(void))(v20 + 32))();
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 16, (uint64_t)(v24 + 2));
    swift_release();
    uint64_t v15 = v24[5];
    uint64_t v14 = v24[6];
    __swift_project_boxed_opaque_existential_1(v24 + 2, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 16, (uint64_t)(v24 + 12));
    swift_release();
    unint64_t v18 = v24[15];
    unint64_t v17 = v24[16];
    __swift_project_boxed_opaque_existential_1(v24 + 12, v18);
    (*(void (**)(uint64_t))(v17 + 16))(v18);
    __swift_project_boxed_opaque_existential_1(v24 + 17, v24[20]);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[22] = 0;
    v24[23] = 0;
    v24[24] = 0;
    v24[25] = 0;
    v24[26] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v19[3] = type metadata accessor for AceOutput();
    v19[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v19);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 22));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 17));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[31] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 248) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 248) + 8);
  return v1();
}

uint64_t SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  return SendPaymentFlowStrategy.init(globals:contactResolver:)(a1, a2);
}

uint64_t SendPaymentFlowStrategy.init(globals:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v7);
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v6);
  uint64_t v5 = PaymentsRCHFlowStrategy.init(globals:contactResolver:)((uint64_t)v7, (uint64_t)v6);
  swift_retain();
  uint64_t v10 = v5;
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_release();
  return v5;
}

uint64_t SendPaymentFlowStrategy.deinit()
{
  return PaymentsRCHFlowStrategy.deinit();
}

uint64_t SendPaymentFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t RequestPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[42] = v4;
  v5[41] = a4;
  v5[40] = a3;
  v5[39] = a2;
  v5[38] = a1;
  v5[31] = v5;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  v5[27] = 0;
  v5[28] = 0;
  v5[37] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v5[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[45] = v6;
  v5[46] = *(void *)(v6 - 8);
  v5[47] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[48] = v7;
  v5[49] = *(void *)(v7 - 8);
  v5[50] = swift_task_alloc();
  v5[32] = a2;
  v5[33] = a3;
  v5[34] = a4;
  v5[35] = v4;
  return MEMORY[0x270FA2498](RequestPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:), 0);
}

uint64_t RequestPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 328);
  *(void *)(v0 + 248) = v0;
  uint64_t v27 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)objc_msgSend(v2, sel_code));
  uint64_t v28 = v3;
  *(void *)(v0 + 408) = v3;
  *(void *)(v0 + 216) = v27;
  *(void *)(v0 + 224) = v3;
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v4, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 288) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 448);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v5;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    uint64_t v39 = buf;
    uint64_t v40 = v22;
    uint64_t v41 = v23;
    serialize(_:at:)(2, &v39);
    serialize(_:at:)(1, &v39);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v43 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v42, (uint64_t)&v39, (uint64_t)&v40, (uint64_t)&v41);
    _os_log_impl(&dword_25D85A000, v36, v37, "#RequestPaymentFlowStrategy makeFailureConfirmingIntentResponse %s", buf, size);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v15 = v24[50];
  uint64_t v16 = v24[48];
  uint64_t v14 = v24[49];

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  unint64_t v18 = type metadata accessor for INRequestPaymentIntent();
  v24[52] = v18;
  unint64_t v17 = type metadata accessor for INRequestPaymentIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17, v38);
  uint64_t v19 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17);
  uint64_t v6 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v18, v17);
  uint64_t v7 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v38, v19, v6);
  v24[53] = v7;
  v24[37] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v24[54] = v8;
  *uint64_t v8 = v24[31];
  v8[1] = SendPaymentFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  uint64_t v9 = v24[44];
  uint64_t v10 = v24[41];
  uint64_t v11 = v24[40];
  uint64_t v12 = v24[39];
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v9, v11, v10, v12);
}

uint64_t SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[40] = v4;
  v5[39] = a4;
  v5[38] = a3;
  v5[37] = a2;
  v5[36] = a1;
  v5[29] = v5;
  v5[30] = 0;
  v5[31] = 0;
  v5[32] = 0;
  v5[33] = 0;
  v5[35] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v5[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v5[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[43] = v6;
  v5[44] = *(void *)(v6 - 8);
  v5[45] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[46] = v7;
  v5[47] = *(void *)(v7 - 8);
  v5[48] = swift_task_alloc();
  v5[30] = a2;
  v5[31] = a3;
  v5[32] = a4;
  v5[33] = v4;
  return MEMORY[0x270FA2498](SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:), 0);
}

uint64_t SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 368);
  id v26 = *(id *)(v0 + 312);
  *(void *)(v0 + 232) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v2, v25);
  id v3 = v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v26;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 272) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 424);
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 32;
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  *(void *)(v29 + 24) = v28;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v32 + 24) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v33 = v4;
  swift_retain();
  *uint64_t v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v30;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v31;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    uint64_t v22 = createStorage<A>(capacity:type:)(1);
    os_log_type_t v37 = buf;
    uint64_t v38 = v21;
    uint64_t v39 = v22;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25D85A000, v34, v35, "#SearchForAccountsFlowStrategy makeFailureConfirmingIntentResponse for response %s", buf, size);
    destroyStorage<A>(_:count:)(v21, 0, v19);
    destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v14 = v23[48];
  uint64_t v15 = v23[46];
  uint64_t v13 = v23[47];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  unint64_t v17 = type metadata accessor for INSearchForAccountsIntent();
  v23[49] = v17;
  unint64_t v16 = type metadata accessor for INSearchForAccountsIntentResponse();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v17, v16, v36);
  uint64_t v18 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v17, v16);
  uint64_t v5 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v17, v16);
  uint64_t v6 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v36, v18, v5);
  v23[50] = v6;
  v23[35] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v23[51] = v7;
  *uint64_t v7 = v23[29];
  v7[1] = SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  uint64_t v8 = v23[42];
  uint64_t v9 = v23[39];
  uint64_t v10 = v23[38];
  uint64_t v11 = v23[37];
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v8, v10, v9, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 232) = *v1;
  *(void *)(v4 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  }
  else
  {
    uint64_t v2 = SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[44];
  uint64_t v2 = v0[43];
  id v3 = v0[42];
  v0[29] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of TemplatingResult?(v24[42]);
    v24[27] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[28] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[29] + 8);
  }
  else
  {
    uint64_t v22 = v24[45];
    uint64_t v21 = v24[43];
    uint64_t v23 = v24[41];
    unint64_t v16 = v24[40];
    uint64_t v19 = (uint64_t *)v24[36];
    uint64_t v20 = v24[44];
    (*(void (**)(void))(v20 + 32))();
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 16, (uint64_t)(v24 + 2));
    swift_release();
    uint64_t v15 = v24[5];
    uint64_t v14 = v24[6];
    __swift_project_boxed_opaque_existential_1(v24 + 2, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_retain();
    outlined init with copy of GlobalsProviding(v16 + 16, (uint64_t)(v24 + 12));
    swift_release();
    uint64_t v18 = v24[15];
    unint64_t v17 = v24[16];
    __swift_project_boxed_opaque_existential_1(v24 + 12, v18);
    (*(void (**)(uint64_t))(v17 + 16))(v18);
    __swift_project_boxed_opaque_existential_1(v24 + 17, v24[20]);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[22] = 0;
    v24[23] = 0;
    v24[24] = 0;
    v24[25] = 0;
    v24[26] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v19[3] = type metadata accessor for AceOutput();
    v19[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v19);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 22));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 17));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[29] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 232) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 232) + 8);
  return v1();
}

uint64_t implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for INSearchForAccountsIntentResponse();
  lazy protocol witness table accessor for type INSearchForAccountsIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t outlined destroy of Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t sub_25D899004()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in PaymentsRCHFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_25D899068()
{
  return swift_deallocObject();
}

uint64_t sub_25D899094()
{
  return swift_deallocObject();
}

uint64_t sub_25D8990C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D89910C()
{
  return swift_deallocObject();
}

uint64_t sub_25D89914C()
{
  return swift_deallocObject();
}

uint64_t sub_25D89918C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8991D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  return implicit closure #2 in PaymentsRCHFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(*(void **)(v0 + 40));
}

uint64_t sub_25D899244()
{
  return swift_deallocObject();
}

uint64_t sub_25D899270()
{
  return swift_deallocObject();
}

uint64_t sub_25D89929C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8992DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D89931C()
{
  return swift_deallocObject();
}

uint64_t sub_25D89935C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899388()
{
  return swift_deallocObject();
}

uint64_t sub_25D8993B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8993F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D899434()
{
  return swift_deallocObject();
}

uint64_t sub_25D899478()
{
  return swift_deallocObject();
}

uint64_t sub_25D8994A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8994D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D899510()
{
  return swift_deallocObject();
}

uint64_t sub_25D899550()
{
  return swift_deallocObject();
}

uint64_t sub_25D899590()
{
  return swift_deallocObject();
}

uint64_t sub_25D8995D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)()
{
  return implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:)();
}

uint64_t sub_25D89961C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899648()
{
  return swift_deallocObject();
}

uint64_t sub_25D899674()
{
  return swift_deallocObject();
}

uint64_t sub_25D8996B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8996F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D899734()
{
  return swift_deallocObject();
}

uint64_t sub_25D899760()
{
  return swift_deallocObject();
}

uint64_t sub_25D89978C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8997CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D89980C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899850()
{
  return swift_deallocObject();
}

uint64_t sub_25D89987C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8998A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8998E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D899928()
{
  return swift_deallocObject();
}

uint64_t sub_25D899968()
{
  return swift_deallocObject();
}

uint64_t sub_25D8999AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8999D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D899A04()
{
  return swift_deallocObject();
}

uint64_t sub_25D899A44()
{
  return swift_deallocObject();
}

uint64_t sub_25D899A84()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t type metadata accessor for PaymentsRCHFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25D899B0C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899B4C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899B78()
{
  return swift_deallocObject();
}

uint64_t sub_25D899BA4()
{
  return swift_deallocObject();
}

uint64_t sub_25D899BE4()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of TemplatingResult?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TemplatingResult();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D899CD4()
{
  return swift_deallocObject();
}

uint64_t sub_25D899D14()
{
  return swift_deallocObject();
}

uint64_t sub_25D899D40()
{
  return swift_deallocObject();
}

uint64_t sub_25D899D6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899DAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D899DEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  return implicit closure #1 in SearchForAccountsFlowStrategy.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)(*(void **)(v0 + 16));
}

uint64_t sub_25D899E34()
{
  return swift_deallocObject();
}

uint64_t sub_25D899E60()
{
  return swift_deallocObject();
}

uint64_t sub_25D899E8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D899ECC()
{
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsRCHFlowStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for SendPaymentFlowStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentFlowStrategy;
  if (!type metadata singleton initialization cache for SendPaymentFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SendPaymentFlowStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for RequestPaymentFlowStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentFlowStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata accessor for SearchForAccountsFlowStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForAccountsFlowStrategy;
  if (!type metadata singleton initialization cache for SearchForAccountsFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in PaymentsRCHFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in PaymentsRCHFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ResolveConfirmFlowStrategyAsync in PaymentsRCHFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type INSearchForAccountsIntentResponse and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject)
  {
    type metadata accessor for INSearchForAccountsIntentResponse();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSearchForAccountsIntentResponse and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t UsoTaskBuilder.asUsoGraph()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v34 = 0;
  uint64_t v8 = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  uint64_t v9 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v10 = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v11 = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v12 = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v13 = "Fatal error";
  uint64_t v14 = "SiriPaymentsIntents/UsoTaskBuilder+SiriPayments.swift";
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v15 - 8;
  unint64_t v18 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v19 = &v6[-v18];
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = v20 - 8;
  unint64_t v23 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20);
  uint64_t v32 = &v6[-v23];
  uint64_t v39 = &v6[-v23];
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v34);
  uint64_t v30 = &v6[-v24];
  uint64_t v38 = v1;
  uint64_t v28 = type metadata accessor for UsoTaskBuilder();
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v2;
  swift_retain();
  uint64_t v3 = v25;
  void *v27 = v26;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v31 = v3;
  unsigned int v29 = 1;
  UsoBuilderOptions.init(longhandDefinedValues:)();
  uint64_t v4 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(unsigned char *, void, void))(*(void *)(v4 - 8) + 56))(v30, 0, v29);
  uint64_t v33 = MEMORY[0x2611B8090](v31, v30);
  outlined destroy of UsoBuilderOptions?((uint64_t)v30);
  swift_bridgeObjectRelease();
  uint64_t v37 = v33;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v35 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v21 + 16))(v7, v32, v20);
  (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v32, v20);
  return swift_release();
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoBuilderOptions();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D89AD80()
{
  return swift_deallocObject();
}

uint64_t sub_25D89ADC0()
{
  return swift_deallocObject();
}

uint64_t sub_25D89ADEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D89AE18()
{
  return swift_deallocObject();
}

uint64_t sub_25D89AE58()
{
  return swift_deallocObject();
}

uint64_t AppResolutionStateProvider.init(appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v16 = a1;
  uint64_t v27 = a2;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  id v31 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  id v28 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = type metadata accessor for AppResolutionStateProvider();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = v18 - 8;
  uint64_t v22 = *(void *)(v19 + 64);
  unint64_t v21 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](0);
  unint64_t v23 = (char *)&v9 - v21;
  unint64_t v24 = v21;
  MEMORY[0x270FA5388](v3);
  uint64_t v25 = (char *)&v9 - v24;
  uint64_t v34 = (char *)&v9 - v24;
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  type metadata accessor for SAIntentGroupSiriKitAppSelectionState();
  id v26 = SAUIAppPunchOut.__allocating_init()();
  id v31 = v26;
  swift_bridgeObjectRetain();
  if (v27)
  {
    uint64_t v13 = v16;
    uint64_t v14 = v27;
    uint64_t v12 = v27;
    uint64_t v9 = v16;
    uint64_t v29 = v16;
    uint64_t v30 = v27;
    type metadata accessor for SASyncAppIdentifyingInfo();
    id v11 = SAUIAppPunchOut.__allocating_init()();
    id v28 = v11;
    swift_bridgeObjectRetain();
    id v10 = (id)MEMORY[0x2611B9130](v9, v12);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setBundleId_, v10);

    id v6 = v11;
    objc_msgSend(v26, sel_setRequestedApp_, v11);

    swift_bridgeObjectRelease();
  }
  id v7 = v26;
  AppResolutionStateProvider.init(appSelectionState:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v23, v18);

  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v15, v25, v18);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v25, v18);
}

unint64_t type metadata accessor for SAIntentGroupSiriKitAppSelectionState()
{
  uint64_t v2 = lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState;
  if (!lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupSiriKitAppSelectionState);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASyncAppIdentifyingInfo()
{
  uint64_t v2 = lazy cache variable for type metadata for SASyncAppIdentifyingInfo;
  if (!lazy cache variable for type metadata for SASyncAppIdentifyingInfo)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASyncAppIdentifyingInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter()
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  if (v5) {
    return v5;
  }
  uint64_t v2 = closure #1 in PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v4 + 16) = v2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v2;
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter()
{
  type metadata accessor for INSiriAuthorizationStatus();
  _allocateUninitializedArray<A>(_:)();
  *uint64_t v0 = 3;
  v0[1] = 0;
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus();
  return Set.init(arrayLiteral:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
  return PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify;
}

uint64_t PaymentsAppResolutionFlowStrategy.authorizationRestrictions.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(*a1);
  }
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  PaymentsAppResolutionFlowStrategy.authorizationRestrictions.setter(v3);
  uint64_t result = (uint64_t)a1;
  outlined destroy of [SFCardSection]();
  return result;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.setter(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*PaymentsAppResolutionFlowStrategy.appResolutionService.modify())()
{
  return PaymentsAppResolutionFlowStrategy.appResolutionService.modify;
}

uint64_t PaymentsAppResolutionFlowStrategy.appResolutionService.modify()
{
  return swift_endAccess();
}

uint64_t PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(a1, a2, a3, a4, a5);
}

uint64_t PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = *v5;
  uint64_t v23 = a1;
  uint64_t v22 = *(void *)(v6 + 80);
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  uint64_t v18 = a5;
  uint64_t v17 = v5;
  v5[2] = 0;
  swift_retain();
  v5[3] = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v16);
  outlined init with take of CommonLabelsProviding(v16, v5 + 4);
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v15);
  outlined init with take of CommonLabelsProviding(v15, v5 + 9);
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v14);
  outlined init with take of CommonLabelsProviding(v14, v5 + 14);
  swift_retain();
  v5[19] = a5;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  return v13;
}

uint64_t PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1)
{
  v2[121] = v1;
  v2[120] = a1;
  v2[80] = v2;
  v2[81] = 0;
  v2[82] = 0;
  v2[84] = 0;
  v2[72] = 0;
  v2[73] = 0;
  v2[85] = 0;
  v2[86] = 0;
  *(void *)((char *)v2 + 1476) = 0;
  v2[95] = 0;
  v2[105] = 0;
  v2[109] = 0;
  v2[110] = 0;
  v2[76] = 0;
  v2[77] = 0;
  v2[116] = 0;
  uint64_t v9 = *v1;
  v2[122] = *v1;
  uint64_t v3 = type metadata accessor for Input();
  v2[123] = v3;
  uint64_t v7 = *(void *)(v3 - 8);
  v2[124] = v7;
  v2[125] = *(void *)(v7 + 64);
  v2[126] = swift_task_alloc();
  v2[127] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v2[130] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[131] = v4;
  v2[132] = *(void *)(v4 - 8);
  v2[133] = swift_task_alloc();
  v2[134] = swift_task_alloc();
  v2[135] = swift_task_alloc();
  v2[136] = swift_task_alloc();
  v2[137] = swift_task_alloc();
  v2[138] = swift_task_alloc();
  v2[139] = swift_task_alloc();
  v2[140] = swift_task_alloc();
  v2[141] = swift_task_alloc();
  v2[142] = swift_task_alloc();
  v2[143] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v2[144] = v5;
  v2[145] = *(void *)(v5 - 8);
  v2[146] = swift_task_alloc();
  v2[81] = a1;
  v2[82] = v8;
  v2[147] = *(void *)(v9 + 80);
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.resolveApp(input:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1232) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.resolveApp(input:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1424) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.resolveApp(input:), 0);
}

uint64_t PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  uint64_t v95 = v0;
  uint64_t v86 = v0[146];
  uint64_t v85 = v0[145];
  uint64_t v87 = v0[144];
  uint64_t v84 = v0[121];
  v0[80] = v0;
  Input.parse.getter();
  static AceService.currentAsync.getter();
  outlined init with copy of GlobalsProviding(v84 + 72, (uint64_t)(v0 + 7));
  id v88 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, (uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v86, v87);
  if (v88)
  {
    uint64_t v82 = swift_dynamicCastUnknownClass();
    if (v82)
    {
      uint64_t v81 = (void *)v82;
    }
    else
    {

      uint64_t v81 = 0;
    }
    uint64_t v80 = v81;
  }
  else
  {
    uint64_t v80 = 0;
  }
  *(void *)(v83 + 1184) = v80;
  if (!v80)
  {
    uint64_t v17 = *(void *)(v83 + 1064);
    uint64_t v29 = *(void *)(v83 + 1048);
    uint64_t v33 = *(void *)(v83 + 1008);
    uint64_t v34 = *(void *)(v83 + 984);
    uint64_t v31 = *(void *)(v83 + 960);
    uint64_t v28 = *(void *)(v83 + 1056);
    uint64_t v30 = *(void *)(v83 + 992);
    uint64_t v18 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v17, v18, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v33, v31, v34);
    unint64_t v32 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v36 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v36 + v32, v33, v34);
    log = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    *(void *)(v83 + 664) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v35 = *(_DWORD *)(v83 + 1432);
    uint64_t v38 = swift_allocObject();
    *(unsigned char *)(v38 + 16) = 32;
    uint64_t v39 = swift_allocObject();
    *(unsigned char *)(v39 + 16) = 8;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(void *)(v37 + 24) = v36;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v40 + 24) = v37;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v41 = v19;
    swift_retain();
    *uint64_t v41 = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[1] = v38;
    swift_retain();
    v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v39;
    swift_retain();
    v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v43))
    {
      uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      uint64_t v27 = createStorage<A>(capacity:type:)(1);
      uint64_t v89 = v25;
      uint64_t v90 = v26;
      uint64_t v91 = v27;
      serialize(_:at:)(2, &v89);
      serialize(_:at:)(1, &v89);
      id v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v93 = v38;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      id v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v93 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      id v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v93 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      _os_log_impl(&dword_25D85A000, log, v43, "#PaymentsAppResolutionFlowStrategy resolveApp parse provided could not be converted to a known intent. %s", v25, v35);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v25, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v22 = *(void *)(v83 + 1064);
    uint64_t v23 = *(void *)(v83 + 1048);
    uint64_t v21 = *(void *)(v83 + 1056);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    type metadata accessor for AppResolutionAction();
    uint64_t v72 = static AppResolutionAction.noAppFound()();
LABEL_36:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)(v83 + 640) + 8);
    return v20(v72);
  }
  *(void *)(v83 + 672) = v80;
  id v1 = v80;
  key = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
  swift_beginAccess();
  id v79 = objc_getAssociatedObject(v80, key);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (v79)
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any(v83 + 160, v83 + 128);
    swift_unknownObjectRelease();
  }
  else
  {
    *(void *)(v83 + 128) = 0;
    *(void *)(v83 + 136) = 0;
    *(void *)(v83 + 144) = 0;
    *(void *)(v83 + 152) = 0;
  }
  outlined init with take of Any?((_OWORD *)(v83 + 128), (_OWORD *)(v83 + 96));
  if (*(void *)(v83 + 120))
  {
    if (swift_dynamicCast()) {
      Swift::String v77 = *(Swift::String *)(v83 + 624);
    }
    else {
      Swift::String v77 = (Swift::String)0;
    }
    Swift::String v76 = v77;
  }
  else
  {
    outlined destroy of FlowActivity?(v83 + 96);
    Swift::String v76 = (Swift::String)0;
  }
  *(void *)(v83 + 1192) = v76._object;
  *(Swift::String *)(v83 + 576) = v76;
  Swift::String v94 = v76;
  if (v76._object)
  {
    uint64_t v74 = *(void *)(v83 + 1040);
    uint64_t v2 = SignpostName.resolveApp.unsafeMutableAddressor();
    static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v74);
    *(void *)(v83 + 1240) = type metadata accessor for App();
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    BOOL v75 = App.isFirstParty.getter();
    swift_release();
    if (v75)
    {
      uint64_t v70 = *(void *)(v83 + 1040);
      type metadata accessor for AppResolutionAction();
      static AppUtil.walletApp.getter();
      uint64_t v71 = static AppResolutionAction.select(app:)();
      swift_release();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v70);
      swift_bridgeObjectRelease();

      uint64_t v72 = v71;
    }
    else
    {
      swift_bridgeObjectRetain();
      *(Swift::String *)(v83 + 608) = v76;
      swift_beginAccess();
      swift_retain();
      swift_endAccess();
      Swift::Bool v69 = PaymentsAppResolver.isAppOnDevice(_:)(v76);
      swift_release();
      if (v69)
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void *)(v83 + 1176);
        uint64_t v47 = *(void *)(v83 + 976);
        uint64_t v49 = swift_allocObject();
        *(void *)(v83 + 1248) = v49;
        *(void *)(v83 + 680) = v49 + 16;
        *(void *)(v49 + 16) = Array.init()();
        uint64_t v50 = swift_allocObject();
        *(void *)(v83 + 1256) = v50;
        *(void *)(v83 + 688) = v50 + 16;
        *(unsigned char *)(v50 + 16) = 0;
        uint64_t v51 = swift_allocBox();
        uint64_t v44 = v9;
        *(void *)(v83 + 1264) = v51;
        *(void *)(v83 + 1272) = v9;
        *(void *)(v83 + 1476) = v9;
        uint64_t v10 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
        *(void *)(v83 + 1280) = v10;
        uint64_t v45 = *(void *)(v10 - 8);
        *(void *)(v83 + 1288) = v45;
        (*(void (**)(uint64_t, uint64_t))(v45 + 56))(v44, 1);
        Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("resolveApp(input:)", 0x12uLL, 1);
        *(void *)(v83 + 1296) = v11._object;
        uint64_t v48 = swift_allocObject();
        *(void *)(v83 + 1304) = v48;
        swift_retain();
        swift_weakInit();
        swift_release();
        swift_retain();
        id v12 = v80;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v13 = swift_task_alloc();
        *(void *)(v83 + 1312) = v13;
        *(void *)(v13 + 16) = v46;
        uint64_t v14 = *(void *)(v47 + 88);
        *(void *)(v83 + 1320) = v14;
        *(void *)(v13 + 24) = v14;
        *(void *)(v13 + 32) = v48;
        *(void *)(v13 + 40) = v80;
        *(Swift::String *)(v13 + 48) = v76;
        *(void *)(v13 + 64) = v49;
        *(void *)(v13 + 72) = v50;
        *(void *)(v13 + 80) = v51;
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v83 + 1328) = v15;
        *uint64_t v15 = *(void *)(v83 + 640);
        v15[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        uint64_t v16 = MEMORY[0x263F8EE60] + 8;
        return MEMORY[0x270FA2318](v52, 0, 0, v11._countAndFlagsBits, v11._object, partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:), v13, v16);
      }
      uint64_t v7 = *(void *)(v83 + 1136);
      uint64_t v64 = *(void *)(v83 + 1048);
      uint64_t v63 = *(void *)(v83 + 1056);
      uint64_t v8 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v7, v8, v64);
      oslog = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      *(void *)(v83 + 888) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v83 + 1468);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v68 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v66))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v60 = createStorage<A>(capacity:type:)(0);
        uint64_t v61 = createStorage<A>(capacity:type:)(0);
        *(void *)(v83 + 896) = buf;
        *(void *)(v83 + 904) = v60;
        *(void *)(v83 + 912) = v61;
        serialize(_:at:)(0, (unsigned char **)(v83 + 896));
        serialize(_:at:)(0, (unsigned char **)(v83 + 896));
        *(void *)(v83 + 920) = v68;
        uint64_t v62 = (void *)swift_task_alloc();
        v62[2] = v83 + 896;
        v62[3] = v83 + 904;
        v62[4] = v83 + 912;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, oslog, v66, "#PaymentsAppResolutionFlowStrategy resolveApp initial app search didn't find app, returning noAppFound", buf, size);
        destroyStorage<A>(_:count:)(v60, 0, v58);
        destroyStorage<A>(_:count:)(v61, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = *(void *)(v83 + 1136);
      uint64_t v55 = *(void *)(v83 + 1048);
      uint64_t v56 = *(void *)(v83 + 1040);
      uint64_t v53 = *(void *)(v83 + 1056);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      type metadata accessor for AppResolutionAction();
      uint64_t v57 = static AppResolutionAction.noAppFound()();
      swift_bridgeObjectRelease();
      $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
      outlined destroy of Signpost.OpenSignpost(v56);
      swift_bridgeObjectRelease();

      uint64_t v72 = v57;
    }
    goto LABEL_36;
  }
  uint64_t v3 = *(void *)(v83 + 968);
  uint64_t v4 = swift_allocObject();
  *(void *)(v83 + 1200) = v4;
  *(void *)(v83 + 928) = v4 + 16;
  swift_beginAccess();
  *(void *)(v83 + 1208) = *(void *)(v3 + 24);
  swift_retain();
  swift_endAccess();
  uint64_t v73 = PaymentsAppResolutionFlowStrategy.authorizationRestrictions.getter();
  *(void *)(v83 + 1216) = v73;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v83 + 1224) = v5;
  void *v5 = *(void *)(v83 + 640);
  v5[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  return PaymentsAppResolver.listApps(siriAuthorizationRestriction:)(v73);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(uint64_t);
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *buf;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t size;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *oslog;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  os_log_type_t v43 = v0;
  id v1 = *(void *)(v0 + 1232);
  uint64_t v30 = *(void *)(v0 + 1200);
  uint64_t v26 = *(void *)(v0 + 1144);
  uint64_t v27 = *(void *)(v0 + 1056);
  uint64_t v28 = *(void *)(v0 + 1048);
  *(void *)(v0 + 640) = v0;
  *(void *)(v30 + 16) = v1;
  PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)((void *)(v30 + 16));
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v2, v28);
  swift_retain();
  oslog = Logger.logObject.getter();
  uint64_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 936) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1472);
  unint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint32_t v35 = v3;
  swift_retain();
  *uint32_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v23 = createStorage<A>(capacity:type:)(0);
    uint64_t v24 = createStorage<A>(capacity:type:)(1);
    uint64_t v38 = buf;
    uint64_t v39 = v23;
    uint64_t v40 = v24;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25D85A000, oslog, v37, "#PaymentsAppResolutionFlowStrategy resolveApp found supporting apps %s", buf, size);
    destroyStorage<A>(_:count:)(v23, 0, v21);
    destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v16 = v25[143];
  uint64_t v17 = v25[131];
  uint64_t v18 = (uint64_t *)(v25[150] + 16);
  uint64_t v15 = v25[132];

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  swift_beginAccess();
  uint64_t v19 = *v18;
  swift_bridgeObjectRetain();
  swift_endAccess();
  type metadata accessor for App();
  uint64_t v20 = MEMORY[0x2611B9380](v19);
  swift_bridgeObjectRelease();
  if (v20 == 1)
  {
    id v12 = (id)v25[148];
    type metadata accessor for AppResolutionAction();
    swift_beginAccess();
    Array.subscript.getter();
    swift_endAccess();
    uint64_t v13 = static AppResolutionAction.select(app:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v9 = v25[150];
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    v25[118] = v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
    lazy protocol witness table accessor for type [App] and conformance [A]();
    Swift::String v11 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    type metadata accessor for AppResolutionAction();
    if (v11)
    {
      uint64_t v8 = static AppResolutionAction.noAppFound()();
    }
    else
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v7 = static AppResolutionAction.disambiguate(apps:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = v7;
    }
    uint64_t v6 = (id)v25[148];
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v14 = v8;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v25[80] + 8);
  return v4(v14);
}

{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  uint64_t v2 = *(void **)(*(void *)v0 + 1184);
  *(void *)(*(void *)v0 + 640) = *(void *)v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.resolveApp(input:), 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void *v7;
  void (*v8)(uint64_t, uint64_t);
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *log;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *buf;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint32_t size;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  NSObject *oslog;
  os_log_type_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  void *v89;
  uint64_t v90;

  uint64_t v89 = v0;
  Swift::String v76 = v0[161];
  id v78 = v0[160];
  BOOL v75 = (const void *)v0[159];
  Swift::String v77 = (void *)v0[129];
  v0[80] = v0;
  swift_beginAccess();
  outlined init with copy of AppResolutionResult.AppResolutionResultError?(v75, v77);
  swift_endAccess();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v76 + 48))(v77, 1, v78) == 1)
  {
    outlined destroy of AppResolutionResult.AppResolutionResultError?(*(void *)(v74 + 1032));
    goto LABEL_14;
  }
  uint64_t v71 = *(void *)(v74 + 1280);
  uint64_t v72 = *(void **)(v74 + 1024);
  uint64_t v70 = *(void *)(v74 + 1288);
  outlined init with copy of AppResolutionResult.AppResolutionResultError?(*(const void **)(v74 + 1032), v72);
  uint64_t v73 = (*(uint64_t (**)(void *, uint64_t))(v70 + 88))(v72, v71);
  if (v73 == *MEMORY[0x263F6C938])
  {
    os_log_type_t v66 = *(void *)(v74 + 1040);
    uint64_t v65 = *(void *)(v74 + 1032);
    uint64_t v64 = *(void **)(v74 + 1024);
    BOOL v67 = *(id *)(v74 + 1184);
    (*(void (**)(void))(*(void *)(v74 + 1288) + 96))();
    *(void *)(v74 + 880) = *v64;
    type metadata accessor for AppResolutionAction();
    uint64_t v68 = static AppResolutionAction.appNotSupported(app:)();
    swift_release();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v65);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v66);
    swift_bridgeObjectRelease();

    Swift::Bool v69 = v68;
  }
  else if (v73 == *MEMORY[0x263F6C940])
  {
    uint64_t v57 = *(void *)(v74 + 1040);
    uint64_t v56 = *(void *)(v74 + 1032);
    uint64_t v55 = *(void **)(v74 + 1024);
    uint64_t v58 = *(id *)(v74 + 1184);
    (*(void (**)(void))(*(void *)(v74 + 1288) + 96))();
    *(void *)(v74 + 872) = *v55;
    type metadata accessor for AppResolutionAction();
    uint64_t v59 = static AppResolutionAction.screenTimeEnabled(app:)();
    swift_release();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v56);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v57);
    swift_bridgeObjectRelease();

    Swift::Bool v69 = v59;
  }
  else
  {
    if (v73 != *MEMORY[0x263F6C930])
    {
      uint64_t v44 = *(void *)(v74 + 1320);
      os_log_type_t v43 = *(void *)(v74 + 1176);
      id v1 = *(void *)(v74 + 1128);
      uint64_t v42 = *(void *)(v74 + 1048);
      uint64_t v41 = *(void *)(v74 + 1056);
      (*(void (**)(void, void))(*(void *)(v74 + 1288) + 8))(*(void *)(v74 + 1024), *(void *)(v74 + 1280));
      uint64_t v2 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v1, v2, v42);
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v43;
      *(void *)(v46 + 24) = v44;
      oslog = Logger.logObject.getter();
      uint64_t v54 = static os_log_type_t.debug.getter();
      *(void *)(v74 + 864) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v74 + 1464);
      uint64_t v49 = swift_allocObject();
      *(unsigned char *)(v49 + 16) = 32;
      uint64_t v50 = swift_allocObject();
      *(unsigned char *)(v50 + 16) = 8;
      uint64_t v47 = swift_allocObject();
      *(void *)(v47 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
      *(void *)(v47 + 24) = v46;
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v48 + 24) = v47;
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v51 + 24) = v48;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v52 = v3;
      swift_retain();
      *uint64_t v52 = partial apply for closure #1 in OSLogArguments.append(_:);
      v52[1] = v49;
      swift_retain();
      v52[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v52[3] = v50;
      swift_retain();
      v52[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v52[5] = v51;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v54))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v39 = createStorage<A>(capacity:type:)(0);
        uint64_t v40 = createStorage<A>(capacity:type:)(1);
        uint64_t v84 = buf;
        uint64_t v85 = v39;
        uint64_t v86 = v40;
        serialize(_:at:)(2, &v84);
        serialize(_:at:)(1, &v84);
        uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v88 = v49;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v88 = v50;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v88 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        _os_log_impl(&dword_25D85A000, oslog, v54, "#PaymentsAppResolutionFlowStrategy<%s> encountered unrecognized AppResolutionResultError case", buf, size);
        destroyStorage<A>(_:count:)(v39, 0, v37);
        destroyStorage<A>(_:count:)(v40, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v34 = *(void *)(v74 + 1128);
      uint32_t v35 = *(void *)(v74 + 1048);
      uint64_t v36 = *(void *)(v74 + 1032);
      uint64_t v33 = *(void *)(v74 + 1056);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
      outlined destroy of AppResolutionResult.AppResolutionResultError?(v36);
LABEL_14:
      uint64_t v23 = *(void *)(v74 + 1248);
      uint64_t v4 = *(void *)(v74 + 1120);
      uint64_t v22 = *(void *)(v74 + 1048);
      uint64_t v21 = *(void *)(v74 + 1056);
      uint64_t v5 = Logger.payments.unsafeMutableAddressor();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      *(void *)(v74 + 1336) = v6;
      *(void *)(v74 + 1344) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v6(v4, v5, v22);
      swift_retain();
      swift_retain();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
      *(void *)(v25 + 24) = v23;
      swift_release();
      log = Logger.logObject.getter();
      unint64_t v32 = static os_log_type_t.debug.getter();
      *(void *)(v74 + 696) = 12;
      *(void *)(v74 + 1352) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      *(void *)(v74 + 1360) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      *(void *)(v74 + 1368) = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v24 = *(_DWORD *)(v74 + 1436);
      uint64_t v27 = swift_allocObject();
      *(unsigned char *)(v27 + 16) = 32;
      uint64_t v28 = swift_allocObject();
      *(unsigned char *)(v28 + 16) = 8;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
      *(void *)(v26 + 24) = v25;
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v29 + 24) = v26;
      *(void *)(v74 + 1376) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v30 = v7;
      swift_retain();
      *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[1] = v27;
      swift_retain();
      v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[3] = v28;
      swift_retain();
      v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[5] = v29;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v32))
      {
        uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v19 = createStorage<A>(capacity:type:)(0);
        uint64_t v20 = createStorage<A>(capacity:type:)(1);
        id v79 = v18;
        uint64_t v80 = v19;
        uint64_t v81 = v20;
        serialize(_:at:)(2, &v79);
        serialize(_:at:)(1, &v79);
        uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v83 = v27;
        closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
        uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v83 = v28;
        closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
        uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v83 = v29;
        closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
        _os_log_impl(&dword_25D85A000, log, v32, "#PaymentsAppResolutionFlowStrategy resolved apps %s", v18, v24);
        destroyStorage<A>(_:count:)(v19, 0, v17);
        destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v18, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      *(void *)(v74 + 1384) = 0;
      uint64_t v13 = *(void *)(v74 + 1120);
      uint64_t v14 = *(void *)(v74 + 1048);
      uint64_t v15 = (uint64_t *)(*(void *)(v74 + 1248) + 16);
      id v12 = *(void *)(v74 + 1056);

      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v74 + 1392) = v8;
      *(void *)(v74 + 1400) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v8(v13, v14);
      swift_beginAccess();
      uint64_t v16 = *v15;
      *(void *)(v74 + 1408) = *v15;
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v74 + 1416) = v9;
      *uint64_t v9 = *(void *)(v74 + 640);
      v9[1] = PaymentsAppResolutionFlowStrategy.resolveApp(input:);
      return PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(v16);
    }
    uint64_t v61 = *(void *)(v74 + 1040);
    uint64_t v60 = *(void *)(v74 + 1032);
    uint64_t v62 = *(id *)(v74 + 1184);
    type metadata accessor for AppResolutionAction();
    uint64_t v63 = static AppResolutionAction.noAppFound()();
    outlined destroy of AppResolutionResult.AppResolutionResultError?(v60);
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v61);
    swift_bridgeObjectRelease();

    Swift::Bool v69 = v63;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v11 = *(uint64_t (**)(uint64_t))(*(void *)(v74 + 640) + 8);
  return v11(v69);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint32_t v41;
  os_log_type_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint32_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint32_t v89;
  os_log_type_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint32_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  NSObject *v109;
  os_log_type_t v110;
  Swift::Bool v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint32_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  NSObject *log;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint8_t *buf;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint32_t size;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  NSObject *oslog;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t, uint64_t, uint64_t);
  uint64_t v177;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint8_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;
  void *v193;
  uint64_t v194;

  uint64_t v193 = v0;
  v168 = v0[178];
  uint64_t v169 = v0[156];
  v170 = v0[155];
  v0[80] = v0;
  swift_beginAccess();
  *(void *)(v169 + 16) = v168;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  os_log_type_t v171 = *(void *)(v169 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v172 = MEMORY[0x2611B9380](v171, v170);
  swift_bridgeObjectRelease();
  if (v172 <= 1)
  {
    id v142 = *(void *)(v167 + 1256);
    swift_beginAccess();
    id v143 = *(unsigned char *)(v142 + 16);
    swift_endAccess();
    if (v143)
    {
      uint64_t v139 = *(void *)(v167 + 1248);
      swift_beginAccess();
      uint64_t v140 = *(void *)(v139 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(void *)(v167 + 832) = v140;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      id v141 = *(void *)(v167 + 824);
      if (v141)
      {
        uint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
        uint64_t v6 = *(void *)(v167 + 1104);
        uint64_t v129 = *(void *)(v167 + 1048);
        *(void *)(v167 + 840) = v141;
        swift_bridgeObjectRelease();
        uint64_t v7 = Logger.payments.unsafeMutableAddressor();
        v130(v6, v7, v129);
        swift_retain();
        log = Logger.logObject.getter();
        uint64_t v138 = static os_log_type_t.debug.getter();
        *(void *)(v167 + 848) = 12;
        UnsignedInteger<>.init<A>(_:)();
        BOOL v131 = *(_DWORD *)(v167 + 1456);
        uint64_t v133 = swift_allocObject();
        *(unsigned char *)(v133 + 16) = 32;
        uint64_t v134 = swift_allocObject();
        *(unsigned char *)(v134 + 16) = 8;
        uint64_t v132 = swift_allocObject();
        *(void *)(v132 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
        *(void *)(v132 + 24) = v141;
        uint64_t v135 = swift_allocObject();
        *(void *)(v135 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v135 + 24) = v132;
        _allocateUninitializedArray<A>(_:)();
        id v136 = v8;
        swift_retain();
        *id v136 = partial apply for closure #1 in OSLogArguments.append(_:);
        v136[1] = v133;
        swift_retain();
        v136[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v136[3] = v134;
        swift_retain();
        v136[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v136[5] = v135;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v138))
        {
          uint64_t v9 = *(void *)(v167 + 1384);
          uint64_t v126 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          int v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v127 = createStorage<A>(capacity:type:)(0);
          uint64_t v128 = createStorage<A>(capacity:type:)(1);
          Class v183 = v126;
          Class v184 = v127;
          Class v185 = v128;
          serialize(_:at:)(2, &v183);
          serialize(_:at:)(1, &v183);
          Class v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v187 = v133;
          uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
          if (v9) {
            return result;
          }
          Class v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v187 = v134;
          closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
          Class v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v187 = v135;
          closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
          _os_log_impl(&dword_25D85A000, log, v138, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found one app, returning needsConfirmation for %s", v126, v131);
          destroyStorage<A>(_:count:)(v127, 0, v125);
          destroyStorage<A>(_:count:)(v128, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v126, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
        uint64_t v119 = *(void *)(v167 + 1104);
        unint64_t v120 = *(void *)(v167 + 1048);
        uint64_t v122 = *(void *)(v167 + 1040);
        uint64_t v123 = *(id *)(v167 + 1184);

        v121(v119, v120);
        type metadata accessor for AppResolutionAction();
        uint64_t v124 = static AppResolutionAction.confirm(app:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
        outlined destroy of Signpost.OpenSignpost(v122);
        swift_bridgeObjectRelease();

        uint64_t v150 = v124;
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
    }
    unint64_t v115 = *(void *)(v167 + 1248);
    uint64_t v116 = *(void *)(v167 + 1240);
    swift_beginAccess();
    uint64_t v117 = *(void *)(v115 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v118 = MEMORY[0x2611B9380](v117, v116);
    swift_bridgeObjectRelease();
    if (v118 == 1)
    {
      uint64_t v112 = *(void *)(v167 + 1248);
      swift_beginAccess();
      uint64_t v113 = *(void *)(v112 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(void *)(v167 + 752) = v113;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      uint64_t v114 = *(void *)(v167 + 744);
      if (v114)
      {
        *(void *)(v167 + 760) = v114;
        swift_bridgeObjectRelease();
        *(void *)(v167 + 592) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v167 + 600) = v10;
        Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v11);
        swift_bridgeObjectRelease();
        DefaultStringInterpolation.appendInterpolation(_:)();
        id v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        v13._countAndFlagsBits = String.init(stringInterpolation:)();
        uint64_t v111 = App.supportsIntent(intentName:)(v13);
        swift_bridgeObjectRelease();
        if (v111)
        {
          uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
          uint64_t v14 = *(void *)(v167 + 1096);
          uint64_t v101 = *(void *)(v167 + 1048);
          uint64_t v15 = Logger.payments.unsafeMutableAddressor();
          v102(v14, v15, v101);
          swift_retain();
          uint64_t v109 = Logger.logObject.getter();
          uint64_t v110 = static os_log_type_t.debug.getter();
          *(void *)(v167 + 776) = 12;
          UnsignedInteger<>.init<A>(_:)();
          uint64_t v103 = *(_DWORD *)(v167 + 1448);
          uint64_t v105 = swift_allocObject();
          *(unsigned char *)(v105 + 16) = 32;
          os_log_type_t v106 = swift_allocObject();
          *(unsigned char *)(v106 + 16) = 8;
          uint64_t v104 = swift_allocObject();
          *(void *)(v104 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
          *(void *)(v104 + 24) = v114;
          uint64_t v107 = swift_allocObject();
          *(void *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(void *)(v107 + 24) = v104;
          _allocateUninitializedArray<A>(_:)();
          uint64_t v108 = v16;
          swift_retain();
          *uint64_t v108 = partial apply for closure #1 in OSLogArguments.append(_:);
          v108[1] = v105;
          swift_retain();
          v108[2] = partial apply for closure #1 in OSLogArguments.append(_:);
          v108[3] = v106;
          swift_retain();
          v108[4] = partial apply for closure #1 in OSLogArguments.append(_:);
          v108[5] = v107;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v109, v110))
          {
            uint64_t v17 = *(void *)(v167 + 1384);
            uint64_t v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v99 = createStorage<A>(capacity:type:)(0);
            uint64_t v100 = createStorage<A>(capacity:type:)(1);
            uint64_t v178 = v98;
            uint64_t v179 = v99;
            uint64_t v180 = v100;
            serialize(_:at:)(2, &v178);
            serialize(_:at:)(1, &v178);
            uint64_t v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            id v182 = v105;
            uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
            if (v17) {
              return result;
            }
            uint64_t v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            id v182 = v106;
            closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
            uint64_t v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            id v182 = v107;
            closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
            _os_log_impl(&dword_25D85A000, v109, v110, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found one app, returning select for %s", v98, v103);
            destroyStorage<A>(_:count:)(v99, 0, v97);
            destroyStorage<A>(_:count:)(v100, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v98, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
            uint64_t v96 = 0;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            uint64_t v96 = *(void *)(v167 + 1384);
          }
          uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
          uint64_t v93 = *(void *)(v167 + 1096);
          Swift::String v94 = *(void *)(v167 + 1048);

          v95(v93, v94);
          if (App.isFirstParty.getter())
          {
            id v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
            uint64_t v18 = *(void *)(v167 + 1088);
            uint64_t v87 = *(void *)(v167 + 1048);
            uint64_t v19 = Logger.payments.unsafeMutableAddressor();
            v88(v18, v19, v87);
            uint64_t v91 = Logger.logObject.getter();
            uint64_t v90 = static os_log_type_t.debug.getter();
            *(void *)(v167 + 784) = 2;
            UnsignedInteger<>.init<A>(_:)();
            uint64_t v89 = *(_DWORD *)(v167 + 1452);
            id v92 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v91, v90))
            {
              uint64_t v83 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v84 = createStorage<A>(capacity:type:)(0);
              uint64_t v85 = createStorage<A>(capacity:type:)(0);
              *(void *)(v167 + 792) = v83;
              *(void *)(v167 + 800) = v84;
              *(void *)(v167 + 808) = v85;
              serialize(_:at:)(0, (unsigned char **)(v167 + 792));
              serialize(_:at:)(0, (unsigned char **)(v167 + 792));
              *(void *)(v167 + 816) = v92;
              uint64_t v86 = (void *)swift_task_alloc();
              v86[2] = v167 + 792;
              v86[3] = v167 + 800;
              v86[4] = v167 + 808;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              uint64_t result = Sequence.forEach(_:)();
              if (v96) {
                return result;
              }
              swift_task_dealloc();
              _os_log_impl(&dword_25D85A000, v91, v90, "#PaymentsAppResolutionFlowStrategy resolveApp the app found was first party, falling back to pre-defined AppUtil constant for extension values", v83, v89);
              destroyStorage<A>(_:count:)(v84, 0, v82);
              destroyStorage<A>(_:count:)(v85, 0, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x2611B9630](v83, MEMORY[0x263F8E778]);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            id v78 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
            Swift::String v76 = *(void *)(v167 + 1088);
            Swift::String v77 = *(void *)(v167 + 1048);
            id v79 = *(void *)(v167 + 1040);
            uint64_t v80 = *(id *)(v167 + 1184);

            v78(v76, v77);
            type metadata accessor for AppResolutionAction();
            static AppUtil.walletApp.getter();
            uint64_t v81 = static AppResolutionAction.select(app:)();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
            outlined destroy of Signpost.OpenSignpost(v79);
            swift_bridgeObjectRelease();

            uint64_t v150 = v81;
          }
          else
          {
            uint64_t v73 = *(void *)(v167 + 1040);
            uint64_t v74 = *(id *)(v167 + 1184);
            type metadata accessor for AppResolutionAction();
            BOOL v75 = static AppResolutionAction.select(app:)();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
            outlined destroy of Signpost.OpenSignpost(v73);
            swift_bridgeObjectRelease();

            uint64_t v150 = v75;
          }
        }
        else
        {
          uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
          uint64_t v58 = *(void *)(v167 + 1320);
          uint64_t v57 = *(void *)(v167 + 1176);
          uint64_t v20 = *(void *)(v167 + 1080);
          uint64_t v55 = *(void *)(v167 + 1048);
          uint64_t v21 = Logger.payments.unsafeMutableAddressor();
          v56(v20, v21, v55);
          uint64_t v60 = swift_allocObject();
          *(void *)(v60 + 16) = v57;
          *(void *)(v60 + 24) = v58;
          swift_retain();
          uint64_t v71 = Logger.logObject.getter();
          uint64_t v72 = static os_log_type_t.debug.getter();
          *(void *)(v167 + 768) = 22;
          UnsignedInteger<>.init<A>(_:)();
          uint64_t v59 = *(_DWORD *)(v167 + 1444);
          uint64_t v64 = swift_allocObject();
          *(unsigned char *)(v64 + 16) = 32;
          uint64_t v65 = swift_allocObject();
          *(unsigned char *)(v65 + 16) = 8;
          uint64_t v61 = swift_allocObject();
          *(void *)(v61 + 16) = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
          *(void *)(v61 + 24) = v60;
          uint64_t v62 = swift_allocObject();
          *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(void *)(v62 + 24) = v61;
          os_log_type_t v66 = swift_allocObject();
          *(void *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(void *)(v66 + 24) = v62;
          BOOL v67 = swift_allocObject();
          *(unsigned char *)(v67 + 16) = 32;
          uint64_t v68 = swift_allocObject();
          *(unsigned char *)(v68 + 16) = 8;
          uint64_t v63 = swift_allocObject();
          *(void *)(v63 + 16) = partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
          *(void *)(v63 + 24) = v114;
          Swift::Bool v69 = swift_allocObject();
          *(void *)(v69 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
          *(void *)(v69 + 24) = v63;
          _allocateUninitializedArray<A>(_:)();
          uint64_t v70 = v22;
          swift_retain();
          *uint64_t v70 = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[1] = v64;
          swift_retain();
          v70[2] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[3] = v65;
          swift_retain();
          v70[4] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[5] = v66;
          swift_retain();
          v70[6] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[7] = v67;
          swift_retain();
          v70[8] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[9] = v68;
          swift_retain();
          v70[10] = partial apply for closure #1 in OSLogArguments.append(_:);
          v70[11] = v69;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v23 = *(void *)(v167 + 1384);
            uint64_t v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v53 = createStorage<A>(capacity:type:)(0);
            uint64_t v54 = createStorage<A>(capacity:type:)(2);
            uint64_t v173 = v52;
            v174 = v53;
            Class v175 = v54;
            serialize(_:at:)(2, &v173);
            serialize(_:at:)(2, &v173);
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v64;
            uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            if (v23) {
              return result;
            }
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v65;
            closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v66;
            closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v67;
            closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v68;
            closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v177 = v69;
            closure #1 in osLogInternal(_:log:type:)(&v176, (uint64_t)&v173, (uint64_t)&v174, (uint64_t)&v175);
            _os_log_impl(&dword_25D85A000, v71, v72, "#PaymentsAppResolutionFlowStrategy resolveApp found app that doesn't support %s, returning appNotSupported for %s", v52, v59);
            destroyStorage<A>(_:count:)(v53, 0, v51);
            destroyStorage<A>(_:count:)(v54, 2, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v52, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
          uint64_t v45 = *(void *)(v167 + 1080);
          uint64_t v46 = *(void *)(v167 + 1048);
          uint64_t v48 = *(void *)(v167 + 1040);
          uint64_t v49 = *(id *)(v167 + 1184);

          v47(v45, v46);
          type metadata accessor for AppResolutionAction();
          uint64_t v50 = static AppResolutionAction.appNotSupported(app:)();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
          outlined destroy of Signpost.OpenSignpost(v48);
          swift_bridgeObjectRelease();

          uint64_t v150 = v50;
        }
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
    uint64_t v24 = *(void *)(v167 + 1072);
    uint64_t v39 = *(void *)(v167 + 1048);
    uint64_t v25 = Logger.payments.unsafeMutableAddressor();
    v40(v24, v25, v39);
    os_log_type_t v43 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.debug.getter();
    *(void *)(v167 + 704) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v41 = *(_DWORD *)(v167 + 1440);
    uint64_t v44 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v43, v42))
    {
      uint64_t v26 = *(void *)(v167 + 1384);
      uint32_t v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v36 = createStorage<A>(capacity:type:)(0);
      uint64_t v37 = createStorage<A>(capacity:type:)(0);
      *(void *)(v167 + 712) = v35;
      *(void *)(v167 + 720) = v36;
      *(void *)(v167 + 728) = v37;
      serialize(_:at:)(0, (unsigned char **)(v167 + 712));
      serialize(_:at:)(0, (unsigned char **)(v167 + 712));
      *(void *)(v167 + 736) = v44;
      uint64_t v38 = (void *)swift_task_alloc();
      v38[2] = v167 + 712;
      v38[3] = v167 + 720;
      v38[4] = v167 + 728;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v26) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, v43, v42, "#PaymentsAppResolutionFlowStrategy resolveApp resolution did not find any apps, returning noAppFound", v35, v41);
      destroyStorage<A>(_:count:)(v36, 0, v34);
      destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v35, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
    uint64_t v28 = *(void *)(v167 + 1072);
    uint64_t v29 = *(void *)(v167 + 1048);
    uint64_t v31 = *(void *)(v167 + 1040);
    unint64_t v32 = *(id *)(v167 + 1184);

    v30(v28, v29);
    type metadata accessor for AppResolutionAction();
    uint64_t v33 = static AppResolutionAction.noAppFound()();
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v31);
    swift_bridgeObjectRelease();

    uint64_t v150 = v33;
  }
  else
  {
    uint64_t v156 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 1336);
    v157 = *(void *)(v167 + 1248);
    id v1 = *(void *)(v167 + 1112);
    id v155 = *(void *)(v167 + 1048);
    uint64_t v2 = Logger.payments.unsafeMutableAddressor();
    v156(v1, v2, v155);
    swift_retain();
    swift_retain();
    uint64_t v159 = swift_allocObject();
    *(void *)(v159 + 16) = partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
    *(void *)(v159 + 24) = v157;
    swift_release();
    oslog = Logger.logObject.getter();
    uint64_t v166 = static os_log_type_t.debug.getter();
    *(void *)(v167 + 856) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v167 + 1460);
    uint64_t v161 = swift_allocObject();
    *(unsigned char *)(v161 + 16) = 32;
    uint64_t v162 = swift_allocObject();
    *(unsigned char *)(v162 + 16) = 8;
    uint64_t v160 = swift_allocObject();
    *(void *)(v160 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v160 + 24) = v159;
    uint64_t v163 = swift_allocObject();
    *(void *)(v163 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v163 + 24) = v160;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v164 = v3;
    swift_retain();
    *uint64_t v164 = partial apply for closure #1 in OSLogArguments.append(_:);
    v164[1] = v161;
    swift_retain();
    v164[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v164[3] = v162;
    swift_retain();
    v164[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v164[5] = v163;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v166))
    {
      uint64_t v4 = *(void *)(v167 + 1384);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v153 = createStorage<A>(capacity:type:)(0);
      uint64_t v154 = createStorage<A>(capacity:type:)(1);
      uint64_t v188 = buf;
      uint64_t v189 = v153;
      id v190 = v154;
      serialize(_:at:)(2, &v188);
      serialize(_:at:)(1, &v188);
      uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v192 = v161;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
      if (v4) {
        return result;
      }
      uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v192 = v162;
      closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
      uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v192 = v163;
      closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
      _os_log_impl(&dword_25D85A000, oslog, v166, "#PaymentsAppResolutionFlowStrategy resolveApp resolution found multiple apps, returning disambiguate for %s", buf, size);
      destroyStorage<A>(_:count:)(v153, 0, v151);
      destroyStorage<A>(_:count:)(v154, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v167 + 1392);
    uint64_t v144 = *(void *)(v167 + 1112);
    uint32_t v145 = *(void *)(v167 + 1048);
    uint64_t v147 = *(void *)(v167 + 1040);
    uint64_t v148 = *(id *)(v167 + 1184);

    v146(v144, v145);
    type metadata accessor for AppResolutionAction();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v149 = static AppResolutionAction.disambiguate(apps:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v147);
    swift_bridgeObjectRelease();

    uint64_t v150 = v149;
  }
LABEL_47:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)(v167 + 640) + 8);
  return v27(v150);
}

uint64_t implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  uint64_t v4 = type metadata accessor for Parse();
  unint64_t v2 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v3 = (char *)&v1 - v2;
  Input.parse.getter();
  return String.init<A>(describing:)();
}

uint64_t sub_25D8A2694()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  type metadata accessor for Input();

  return implicit closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return String.init<A>(describing:)();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v40 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v48 = a8;
  uint64_t v33 = partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = 0;
  uint64_t v64 = a9;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v42 = v41 - 8;
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 + 64);
  unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v47 = (char *)v24 - v46;
  uint64_t v63 = MEMORY[0x270FA5388](v40);
  uint64_t v49 = v9 + 16;
  uint64_t v62 = v9 + 16;
  uint64_t v61 = v10;
  uint64_t v59 = v11;
  uint64_t v60 = v12;
  uint64_t v58 = v13 + 16;
  uint64_t v57 = v14 + 16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
  uint64_t v56 = swift_projectBox();
  uint64_t v50 = &v55;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_endAccess();
  if (!Strong) {
    return CheckedContinuation.resume<>()();
  }
  uint64_t v32 = Strong;
  uint64_t v31 = Strong;
  uint64_t v54 = Strong;
  v24[1] = &v53;
  swift_beginAccess();
  uint64_t v30 = *(void *)(v31 + 24);
  swift_retain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v15 = type metadata accessor for AppResolutionStateProvider();
  uint64_t v29 = v52;
  v52[3] = v15;
  v52[4] = MEMORY[0x263F6C928];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  AppResolutionStateProvider.init(appBundleId:)(v36, v37, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  swift_retain();
  uint64_t v25 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v47, v40, v41);
  swift_retain();
  unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v27 = (v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v39;
  unint64_t v19 = v26;
  uint64_t v20 = v43;
  uint64_t v21 = v47;
  uint64_t v22 = v41;
  uint64_t v28 = v17;
  *(void *)(v17 + 16) = v38;
  *(void *)(v17 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v17 + v19, v21, v22);
  *(void *)(v28 + v27) = v48;
  dispatch thunk of AppResolutionService.resolveApp(intent:appResolutionState:_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  swift_release();
  return swift_release();
}

uint64_t CheckedContinuation.resume<>()()
{
  return CheckedContinuation.resume(returning:)();
}

void closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v165 = a1;
  uint64_t v160 = a2;
  uint64_t v161 = a3;
  uint64_t v162 = a4;
  uint64_t v163 = a5;
  uint64_t v143 = 0;
  uint64_t v121 = partial apply for implicit closure #2 in PaymentsRCHFlowStrategy.makeErrorResponse(error:);
  uint64_t v122 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v126 = partial apply for implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  uint64_t v127 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v130 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Class v202 = 0;
  uint64_t v200 = 0;
  uint64_t v199 = 0;
  uint64_t v198 = 0;
  uint64_t v197 = 0;
  uint64_t v196 = 0;
  id v195 = 0;
  uint64_t v131 = 0;
  Class v201 = 0;
  uint64_t v178 = 0;
  uint64_t v174 = 0;
  uint64_t v171 = 0;
  uint64_t v132 = type metadata accessor for Logger();
  uint64_t v133 = *(void *)(v132 - 8);
  uint64_t v134 = v132 - 8;
  unint64_t v135 = (*(void *)(v133 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v132);
  id v136 = (char *)&v46 - v135;
  unint64_t v137 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v46 - v135);
  uint64_t v138 = (char *)&v46 - v137;
  unint64_t v139 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v143);
  uint64_t v140 = (char *)&v46 - v139;
  unint64_t v141 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v142 = (uint64_t)&v46 - v141;
  uint64_t v144 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  uint64_t v146 = *(void *)(v144 - 8);
  uint64_t v145 = v144 - 8;
  uint64_t v147 = v146;
  uint64_t v148 = *(void *)(v146 + 64);
  unint64_t v149 = (v148 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v143);
  uint64_t v150 = (char *)&v46 - v149;
  unint64_t v151 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v152 = (char *)&v46 - v151;
  Class v202 = (char *)&v46 - v151;
  uint64_t v153 = type metadata accessor for AppResolutionResult();
  uint64_t v154 = *(void *)(v153 - 8);
  uint64_t v155 = v153 - 8;
  unint64_t v156 = (*(void *)(v154 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v153);
  v157 = (uint64_t *)((char *)&v46 - v156);
  unint64_t v158 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v159 = (char *)&v46 - v158;
  Class v201 = (char *)&v46 - v158;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  unint64_t v164 = (*(void *)(*(void *)(v167 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v163);
  v168 = (id *)((char *)&v46 - v164);
  uint64_t v200 = v12;
  uint64_t v199 = v13 + 16;
  uint64_t v198 = v14 + 16;
  uint64_t v197 = v15;
  uint64_t v166 = (void *)swift_projectBox();
  uint64_t v196 = v166;
  outlined init with copy of Result<AppResolutionResult, Error>(v165, v168);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, id *, uint64_t))(v154 + 32))(v159, v168, v153);
    Class v201 = v159;
    (*(void (**)(uint64_t *))(v154 + 16))(v157);
    int v120 = (*(uint64_t (**)(uint64_t *, uint64_t))(v154 + 88))(v157, v153);
    if (v120 == *MEMORY[0x263F6C960])
    {
      (*(void (**)(uint64_t *, uint64_t))(v154 + 96))(v157, v153);
      uint64_t v112 = *v157;
      uint64_t v178 = v112;
      swift_retain();
      uint64_t v107 = &v177;
      uint64_t v177 = v112;
      uint64_t v108 = &v176;
      uint64_t v109 = 33;
      uint64_t v110 = 0;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      Array.append(_:)();
      swift_endAccess();
      uint64_t v111 = &v175;
      swift_beginAccess();
      *(unsigned char *)(v161 + 16) = 1;
      swift_endAccess();
      swift_release();
    }
    else if (v120 == *MEMORY[0x263F6C968])
    {
      (*(void (**)(uint64_t *, uint64_t))(v154 + 96))(v157, v153);
      uint64_t v116 = *v157;
      uint64_t v174 = v116;
      swift_bridgeObjectRetain();
      uint64_t v114 = &v173;
      uint64_t v173 = v116;
      unint64_t v115 = &v172;
      swift_beginAccess();
      uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      lazy protocol witness table accessor for type [App] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else if (v120 == *MEMORY[0x263F6C970])
    {
      (*(void (**)(uint64_t *, uint64_t))(v154 + 96))(v157, v153);
      uint64_t v119 = *v157;
      uint64_t v171 = v119;
      swift_retain();
      uint64_t v117 = &v170;
      uint64_t v170 = v119;
      uint64_t v118 = &v169;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
      Array.append(_:)();
      swift_endAccess();
      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v154 + 8))(v157, v153);
    }
    (*(void (**)(char *, uint64_t))(v154 + 8))(v159, v153);
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    CheckedContinuation.resume<>()();
    return;
  }
  id v105 = *v168;
  id v195 = v105;
  id v16 = v105;
  os_log_type_t v106 = &v194;
  id v194 = v105;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast()) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v146 + 56))(v142, 0, 1, v144);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v142, 1, 1, v144);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v142, 1, v144) != 1)
  {
    uint64_t v31 = v136;
    uint64_t v67 = v147;
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 32);
    uint64_t v69 = v146 + 32;
    v70(v152, v142, v144);
    os_log_type_t v66 = *(void (**)(char *, char *, uint64_t))(v146 + 16);
    uint64_t v65 = v146 + 16;
    v66(v140, v152, v144);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v140, 0, 1, v144);
    uint64_t v64 = &v186;
    swift_beginAccess();
    outlined assign with take of AppResolutionResult.AppResolutionResultError?(v140, v166);
    swift_endAccess();
    uint64_t v32 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v31, v32, v132);
    v66(v150, v152, v144);
    unint64_t v68 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v77 = 7;
    uint64_t v78 = swift_allocObject();
    v70((char *)(v78 + v68), (uint64_t)v150, v144);
    uint64_t v86 = Logger.logObject.getter();
    int v87 = static os_log_type_t.error.getter();
    uint64_t v73 = &v184;
    uint64_t v184 = 12;
    unint64_t v71 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v74 = v185;
    uint64_t v75 = 17;
    uint64_t v80 = swift_allocObject();
    *(unsigned char *)(v80 + 16) = 32;
    uint64_t v81 = swift_allocObject();
    *(unsigned char *)(v81 + 16) = 8;
    uint64_t v76 = 32;
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v78;
    uint64_t v79 = v33;
    *(void *)(v33 + 16) = v126;
    *(void *)(v33 + 24) = v34;
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v79;
    uint64_t v83 = v35;
    *(void *)(v35 + 16) = v127;
    *(void *)(v35 + 24) = v36;
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v82 = _allocateUninitializedArray<A>(_:)();
    uint64_t v84 = v37;
    swift_retain();
    uint64_t v38 = v80;
    uint64_t v39 = v84;
    *uint64_t v84 = v128;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    swift_retain();
    uint64_t v40 = v81;
    uint64_t v41 = v84;
    v84[2] = v129;
    v41[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v40;
    swift_retain();
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v83;
    uint64_t v43 = v84;
    v84[4] = v130;
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v86, (os_log_type_t)v87))
    {
      uint64_t v44 = v131;
      uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v58 = createStorage<A>(capacity:type:)(0);
      uint64_t v59 = createStorage<A>(capacity:type:)(1);
      uint64_t v60 = &v183;
      Class v183 = v57;
      uint64_t v61 = &v182;
      uint64_t v182 = v58;
      uint64_t v62 = &v181;
      uint64_t v181 = v59;
      serialize(_:at:)(2, &v183);
      serialize(_:at:)(1, v60);
      uint64_t v179 = v128;
      uint64_t v180 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
      uint64_t v63 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        uint64_t v179 = v129;
        uint64_t v180 = v81;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v183, (uint64_t)&v182, (uint64_t)&v181);
        uint64_t v55 = 0;
        uint64_t v179 = v130;
        uint64_t v180 = v83;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v183, (uint64_t)&v182, (uint64_t)&v181);
        _os_log_impl(&dword_25D85A000, v86, (os_log_type_t)v87, "#PaymentsAppResolutionFlowStrategy resolveApp resolution returned an error: %s", v57, v74);
        destroyStorage<A>(_:count:)(v58, 0, v56);
        destroyStorage<A>(_:count:)(v59, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v57, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v133 + 8))(v136, v132);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v152, v144);

    goto LABEL_32;
  }
  uint64_t v17 = v138;
  outlined destroy of AppResolutionResult.AppResolutionResultError?(v142);
  uint64_t v18 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v17, v18, v132);
  id v19 = v105;
  uint64_t v94 = 7;
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = v105;
  uint64_t v103 = Logger.logObject.getter();
  int v104 = static os_log_type_t.error.getter();
  uint64_t v90 = &v192;
  uint64_t v192 = 12;
  unint64_t v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v91 = v193;
  uint64_t v92 = 17;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 32;
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = 8;
  uint64_t v93 = 32;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v95;
  uint64_t v96 = v20;
  *(void *)(v20 + 16) = v121;
  *(void *)(v20 + 24) = v21;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v96;
  uint64_t v100 = v22;
  *(void *)(v22 + 16) = v122;
  *(void *)(v22 + 24) = v23;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v99 = _allocateUninitializedArray<A>(_:)();
  uint64_t v101 = v24;
  swift_retain();
  uint64_t v25 = v97;
  unint64_t v26 = v101;
  *uint64_t v101 = v123;
  v26[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
  swift_retain();
  uint64_t v27 = v98;
  uint64_t v28 = v101;
  v101[2] = v124;
  v28[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
  swift_retain();
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
  uint64_t v30 = v101;
  v101[4] = v125;
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v103, (os_log_type_t)v104))
  {
    uint64_t v45 = v131;
    uint64_t v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v49 = createStorage<A>(capacity:type:)(0);
    uint64_t v50 = createStorage<A>(capacity:type:)(1);
    uint64_t v51 = &v191;
    uint64_t v191 = v48;
    uint64_t v52 = &v190;
    uint64_t v190 = v49;
    char v53 = &v189;
    uint64_t v189 = v50;
    serialize(_:at:)(2, &v191);
    serialize(_:at:)(1, v51);
    uint64_t v187 = v123;
    uint64_t v188 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53);
    uint64_t v54 = v45;
    if (v45)
    {
      __break(1u);
    }
    else
    {
      uint64_t v187 = v124;
      uint64_t v188 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v191, (uint64_t)&v190, (uint64_t)&v189);
      uint64_t v46 = 0;
      uint64_t v187 = v125;
      uint64_t v188 = v100;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v191, (uint64_t)&v190, (uint64_t)&v189);
      _os_log_impl(&dword_25D85A000, v103, (os_log_type_t)v104, "#PaymentsAppResolutionFlowStrategy resolveApp resolution returned an unrecognized error: %s", v48, v91);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v48, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v133 + 8))(v138, v132);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  CheckedContinuation.resume<>()();
}

uint64_t implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return Error.localizedDescription.getter();
}

uint64_t implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  outlined init with copy of [App](v3, a2);
  return swift_endAccess();
}

uint64_t implicit closure #6 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v102 = 0;
  uint64_t v130 = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  uint64_t v132 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v134 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v139 = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:);
  uint64_t v143 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v91 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v175 = 0;
  uint64_t v174 = 0;
  uint64_t v92 = 0;
  uint64_t v116 = *v1;
  unint64_t v93 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](0);
  uint64_t v94 = (char *)&v49 - v93;
  unint64_t v95 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v96 = (char *)&v49 - v95;
  uint64_t v97 = type metadata accessor for Parse();
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = v97 - 8;
  unint64_t v100 = (*(void *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v102);
  uint64_t v101 = (char *)&v49 - v100;
  uint64_t v124 = type metadata accessor for Input();
  uint64_t v120 = *(void *)(v124 - 8);
  uint64_t v121 = v124 - 8;
  uint64_t v118 = v120;
  uint64_t v119 = *(void *)(v120 + 64);
  unint64_t v103 = (v119 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v102);
  uint64_t v123 = (char *)&v49 - v103;
  uint64_t v112 = type metadata accessor for Logger();
  uint64_t v110 = *(void **)(v112 - 8);
  uint64_t v111 = v112 - 8;
  uint64_t v105 = v110[8];
  unint64_t v104 = (v105 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v117);
  os_log_type_t v106 = (char *)&v49 - v104;
  unint64_t v107 = (v105 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v49 - v107;
  uint64_t v109 = (char *)&v49 - v107;
  uint64_t v175 = v5;
  uint64_t v174 = v108;
  uint64_t v115 = *(void *)(v116 + 80);
  uint64_t v173 = v115;
  uint64_t v7 = Logger.payments.unsafeMutableAddressor();
  uint64_t v113 = (void (*)(char *, uint64_t, uint64_t))v110[2];
  uint64_t v114 = v110 + 2;
  v113(v6, v7, v112);
  uint64_t v140 = 32;
  uint64_t v141 = 7;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v116;
  uint64_t v10 = v117;
  uint64_t v11 = v124;
  uint64_t v12 = v8;
  uint64_t v13 = v123;
  uint64_t v131 = v12;
  *(void *)(v12 + 16) = v115;
  uint64_t v14 = *(void *)(v9 + 88);
  uint64_t v15 = v120;
  *(void *)(v12 + 24) = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, v10, v11);
  unint64_t v122 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
  uint64_t v142 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v120 + 32))(v142 + v122, v123, v124);
  uint64_t v160 = Logger.logObject.getter();
  int v161 = static os_log_type_t.debug.getter();
  uint64_t v127 = &v171;
  uint64_t v171 = 22;
  unint64_t v125 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v126 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v128 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v129 = v172;
  uint64_t v137 = 17;
  uint64_t v146 = swift_allocObject();
  int v136 = 32;
  *(unsigned char *)(v146 + 16) = 32;
  uint64_t v148 = swift_allocObject();
  int v138 = 8;
  *(unsigned char *)(v148 + 16) = 8;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v131;
  uint64_t v133 = v16;
  *(void *)(v16 + 16) = v130;
  *(void *)(v16 + 24) = v17;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v133;
  uint64_t v135 = v18;
  *(void *)(v18 + 16) = v132;
  *(void *)(v18 + 24) = v19;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v135;
  uint64_t v150 = v20;
  *(void *)(v20 + 16) = v134;
  *(void *)(v20 + 24) = v21;
  uint64_t v152 = swift_allocObject();
  *(unsigned char *)(v152 + 16) = v136;
  uint64_t v154 = swift_allocObject();
  *(unsigned char *)(v154 + 16) = v138;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v142;
  uint64_t v144 = v22;
  *(void *)(v22 + 16) = v139;
  *(void *)(v22 + 24) = v23;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v144;
  uint64_t v157 = v24;
  *(void *)(v24 + 16) = v143;
  *(void *)(v24 + 24) = v25;
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v155 = _allocateUninitializedArray<A>(_:)();
  unint64_t v158 = v26;
  swift_retain();
  uint64_t v27 = v146;
  uint64_t v28 = v158;
  *unint64_t v158 = v145;
  v28[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
  swift_retain();
  uint64_t v29 = v148;
  uint64_t v30 = v158;
  v158[2] = v147;
  v30[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
  swift_retain();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v150;
  uint64_t v32 = v158;
  v158[4] = v149;
  v32[5] = v31;
  swift_retain();
  uint64_t v33 = v152;
  uint64_t v34 = v158;
  v158[6] = v151;
  v34[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
  swift_retain();
  uint64_t v35 = v154;
  uint64_t v36 = v158;
  v158[8] = v153;
  v36[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  swift_retain();
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v157;
  uint64_t v38 = v158;
  v158[10] = v156;
  v38[11] = v37;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v160, (os_log_type_t)v161))
  {
    uint64_t v39 = v92;
    uint64_t v83 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v84 = createStorage<A>(capacity:type:)(0);
    uint64_t v85 = createStorage<A>(capacity:type:)(2);
    int v87 = v166;
    v166[0] = v83;
    unint64_t v88 = &v165;
    uint64_t v165 = v84;
    unint64_t v89 = &v164;
    uint64_t v164 = v85;
    unsigned int v86 = 2;
    serialize(_:at:)(2, v166);
    serialize(_:at:)(v86, v87);
    uint64_t v162 = v145;
    uint64_t v163 = v146;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v87, (uint64_t)v88, (uint64_t)v89);
    uint64_t v90 = v39;
    if (v39)
    {
      __break(1u);
    }
    else
    {
      uint64_t v162 = v147;
      uint64_t v163 = v148;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v166, (uint64_t)&v165, (uint64_t)&v164);
      uint64_t v80 = 0;
      uint64_t v41 = v80;
      uint64_t v162 = v149;
      uint64_t v163 = v150;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v166, (uint64_t)&v165, (uint64_t)&v164);
      uint64_t v79 = v41;
      uint64_t v162 = v151;
      uint64_t v163 = v152;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v166, (uint64_t)&v165, (uint64_t)&v164);
      uint64_t v78 = 0;
      uint64_t v162 = v153;
      uint64_t v163 = v154;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v166, (uint64_t)&v165, (uint64_t)&v164);
      uint64_t v77 = 0;
      uint64_t v162 = v156;
      uint64_t v163 = v157;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v166, (uint64_t)&v165, (uint64_t)&v164);
      uint64_t v76 = 0;
      _os_log_impl(&dword_25D85A000, v160, (os_log_type_t)v161, "#PaymentsAppResolutionFlowStrategy<%s> parseConfirmationResponse, input %s", v83, v129);
      destroyStorage<A>(_:count:)(v84, 0, v82);
      destroyStorage<A>(_:count:)(v85, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v83, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v81 = v76;
    }
  }
  else
  {
    uint64_t v40 = v92;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v81 = v40;
  }
  uint64_t v70 = v81;

  unint64_t v71 = (void (*)(char *, uint64_t))v110[1];
  unint64_t v72 = v110 + 1;
  v71(v109, v112);
  Input.parse.getter();
  Parse.confirmationResponse.getter((uint64_t)v96);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v97);
  uint64_t v73 = type metadata accessor for ConfirmationResponse();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = v73 - 8;
  if ((*(unsigned int (**)(char *, uint64_t))(v74 + 48))(v96, 1) == 1) {
    goto LABEL_15;
  }
  outlined init with copy of ConfirmationResponse?(v96, v94);
  int v69 = (*(uint64_t (**)(char *, uint64_t))(v74 + 88))(v94, v73);
  if (v69 == *MEMORY[0x263F6FC98])
  {
    type metadata accessor for AppConfirmationResponse();
    uint64_t v67 = static AppConfirmationResponse.select()();
    outlined destroy of ConfirmationResponse?((uint64_t)v96);
    return v67;
  }
  if (v69 == *MEMORY[0x263F6FC90])
  {
LABEL_15:
    outlined destroy of ConfirmationResponse?((uint64_t)v96);
    type metadata accessor for AppConfirmationResponse();
    return static AppConfirmationResponse.cancel()();
  }
  uint64_t v42 = v106;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v94, v73);
  uint64_t v43 = Logger.payments.unsafeMutableAddressor();
  v113(v42, v43, v112);
  uint64_t v65 = Logger.logObject.getter();
  int v64 = static os_log_type_t.debug.getter();
  v169[1] = (unsigned char *)2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v63 = v170;
  os_log_type_t v66 = (unsigned char *)_allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v65, (os_log_type_t)v64))
  {
    uint64_t v44 = v70;
    char v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v52 = 0;
    uint64_t v54 = createStorage<A>(capacity:type:)(0);
    uint64_t v55 = createStorage<A>(capacity:type:)(v52);
    uint64_t v59 = v169;
    v169[0] = v53;
    uint64_t v60 = &v168;
    uint64_t v168 = v54;
    uint64_t v57 = &v167;
    uint64_t v167 = v55;
    unsigned int v56 = 0;
    serialize(_:at:)(0, v169);
    serialize(_:at:)(v56, v59);
    v166[1] = v66;
    uint64_t v58 = &v49;
    MEMORY[0x270FA5388](&v49);
    uint64_t v45 = v60;
    uint64_t v46 = &v49 - 6;
    uint64_t v61 = &v49 - 6;
    v46[2] = (uint64_t)v59;
    v46[3] = (uint64_t)v45;
    v46[4] = v47;
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v44)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v65, (os_log_type_t)v64, "Unrecognized response from user attempting to respond to confirmation prompt", v53, v63);
      uint64_t v50 = 0;
      destroyStorage<A>(_:count:)(v54, 0, v51);
      destroyStorage<A>(_:count:)(v55, v50, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v53, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v71(v106, v112);
  type metadata accessor for AppConfirmationResponse();
  uint64_t v49 = static AppConfirmationResponse.ignore()();
  outlined destroy of ConfirmationResponse?((uint64_t)v96);
  return v49;
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  lazy protocol witness table accessor for type Input and conformance Input();
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(uint64_t a1)
{
  uint64_t v279 = a1;
  uint64_t v2 = v1;
  v341 = v2;
  uint64_t v280 = "Fatal error";
  v281 = "SiriPaymentsIntents/PaymentsAppResolutionFlowStrategy.swift";
  uint64_t v346 = 0;
  uint64_t v282 = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  v283 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v287 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v288 = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v289 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v290 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v291 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  os_log_type_t v292 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v293 = partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:);
  uint64_t v294 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v296 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v297 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v298 = partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:);
  v299 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v300 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v301 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v302 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v395 = 0;
  v394 = 0;
  uint64_t v304 = 0;
  Swift::String_optional v383 = (Swift::String_optional)0;
  uint64_t v380 = 0;
  v396 = 0;
  uint64_t v366 = 0;
  uint64_t v367 = 0;
  uint64_t v363 = 0;
  uint64_t v343 = *v2;
  v342 = v2;
  uint64_t v305 = type metadata accessor for Input();
  uint64_t v306 = *(void *)(v305 - 8);
  uint64_t v307 = v305 - 8;
  unint64_t v308 = (*(void *)(v306 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  v309 = (char *)v103 - v308;
  uint64_t v310 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v312 = *(void *)(v310 - 8);
  uint64_t v311 = v310 - 8;
  uint64_t v313 = v312;
  uint64_t v314 = *(void *)(v312 + 64);
  unint64_t v315 = (v314 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v346);
  v316 = (char *)v103 - v315;
  unint64_t v317 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  v318 = (char *)v103 - v317;
  v396 = (char *)v103 - v317;
  uint64_t v319 = type metadata accessor for Logger();
  uint64_t v320 = *(void *)(v319 - 8);
  uint64_t v321 = v319 - 8;
  unint64_t v322 = (*(void *)(v320 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v319);
  v323 = (char *)v103 - v322;
  unint64_t v324 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v322);
  v325 = (char *)v103 - v324;
  unint64_t v326 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v324);
  v327 = (char *)v103 - v326;
  unint64_t v328 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v326);
  v329 = (char *)v103 - v328;
  unint64_t v330 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v328);
  v331 = (char *)v103 - v330;
  unint64_t v332 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v346);
  uint64_t v347 = (uint64_t)v103 - v332;
  uint64_t v333 = type metadata accessor for Parse();
  uint64_t v334 = *(void *)(v333 - 8);
  uint64_t v335 = v333 - 8;
  unint64_t v336 = (*(void *)(v334 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v333);
  v337 = (char *)v103 - v336;
  unint64_t v338 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v336);
  v339 = (char *)v103 - v338;
  unint64_t v340 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v103 - v338);
  v345 = (char *)v103 - v340;
  uint64_t v395 = a1;
  v394 = v341;
  uint64_t v344 = *(void *)(v343 + 80);
  uint64_t v393 = v344;
  Input.parse.getter();
  Parse.confirmationResponse.getter(v347);
  uint64_t v348 = type metadata accessor for ConfirmationResponse();
  uint64_t v349 = *(void *)(v348 - 8);
  uint64_t v350 = v348 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v349 + 48))(v347, 1) == 1)
  {
    outlined destroy of ConfirmationResponse?(v347);
    (*(void (**)(char *, uint64_t))(v334 + 8))(v345, v333);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v349 + 88))(v347, v348) == *MEMORY[0x263F6FC90])
    {
      uint64_t v12 = v331;
      (*(void (**)(uint64_t, uint64_t))(v349 + 8))(v347, v348);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v345, v333);
      uint64_t v13 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v12, v13, v319);
      uint64_t v267 = 32;
      uint64_t v268 = 7;
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = v343;
      uint64_t v266 = v14;
      *(void *)(v14 + 16) = v344;
      *(void *)(v14 + 24) = *(void *)(v15 + 88);
      uint64_t v277 = Logger.logObject.getter();
      int v278 = static os_log_type_t.debug.getter();
      uint64_t v263 = &v356;
      uint64_t v356 = 12;
      unint64_t v261 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v262 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v264 = v357;
      uint64_t v265 = 17;
      uint64_t v271 = swift_allocObject();
      *(unsigned char *)(v271 + 16) = 32;
      uint64_t v272 = swift_allocObject();
      *(unsigned char *)(v272 + 16) = 8;
      uint64_t v16 = swift_allocObject();
      uint64_t v17 = v266;
      uint64_t v269 = v16;
      *(void *)(v16 + 16) = v298;
      *(void *)(v16 + 24) = v17;
      uint64_t v18 = swift_allocObject();
      uint64_t v19 = v269;
      uint64_t v270 = v18;
      *(void *)(v18 + 16) = v299;
      *(void *)(v18 + 24) = v19;
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v270;
      uint64_t v274 = v20;
      *(void *)(v20 + 16) = v300;
      *(void *)(v20 + 24) = v21;
      uint64_t v276 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v273 = _allocateUninitializedArray<A>(_:)();
      uint64_t v275 = v22;
      swift_retain();
      uint64_t v23 = v271;
      uint64_t v24 = v275;
      *uint64_t v275 = v301;
      v24[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
      swift_retain();
      uint64_t v25 = v272;
      unint64_t v26 = v275;
      v275[2] = v302;
      v26[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
      swift_retain();
      uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v274;
      uint64_t v28 = v275;
      v275[4] = v303;
      uint64_t v28[5] = v27;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v277, (os_log_type_t)v278))
      {
        uint64_t v29 = v304;
        v254 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v255 = createStorage<A>(capacity:type:)(0);
        uint64_t v256 = createStorage<A>(capacity:type:)(1);
        uint64_t v257 = &v355;
        v355 = v254;
        uint64_t v258 = &v354;
        uint64_t v354 = v255;
        uint64_t v259 = &v353;
        uint64_t v353 = v256;
        serialize(_:at:)(2, &v355);
        serialize(_:at:)(1, v257);
        v351 = v301;
        uint64_t v352 = v271;
        closure #1 in osLogInternal(_:log:type:)(&v351, (uint64_t)v257, (uint64_t)v258, (uint64_t)v259);
        uint64_t v260 = v29;
        if (v29)
        {
          __break(1u);
        }
        else
        {
          v351 = v302;
          uint64_t v352 = v272;
          closure #1 in osLogInternal(_:log:type:)(&v351, (uint64_t)&v355, (uint64_t)&v354, (uint64_t)&v353);
          uint64_t v252 = 0;
          v351 = v303;
          uint64_t v352 = v274;
          closure #1 in osLogInternal(_:log:type:)(&v351, (uint64_t)&v355, (uint64_t)&v354, (uint64_t)&v353);
          _os_log_impl(&dword_25D85A000, v277, (os_log_type_t)v278, "#PaymentsAppResolutionFlowStrategy<%s> parseDisambiguationResponse found user rejected, returning .cancel()", v254, v264);
          destroyStorage<A>(_:count:)(v255, 0, v253);
          destroyStorage<A>(_:count:)(v256, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v254, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v320 + 8))(v331, v319);
      type metadata accessor for AppDisambiguationResponse();
      return static AppDisambiguationResponse.cancel()();
    }
    (*(void (**)(uint64_t, uint64_t))(v349 + 8))(v347, v348);
    (*(void (**)(char *, uint64_t))(v334 + 8))(v345, v333);
  }
  Input.parse.getter();
  int v250 = (*(uint64_t (**)(char *, uint64_t))(v334 + 88))(v339, v333);
  if (v250 == *MEMORY[0x263F6FF70])
  {
    (*(void (**)(char *, uint64_t))(v334 + 96))(v339, v333);
    Class v245 = *(void (**)(char *, char *, uint64_t))(v312 + 32);
    uint64_t v246 = v312 + 32;
    v245(v318, v339, v310);
    v396 = v318;
    uint64_t v247 = static PaymentsDirectInvocations.from(_:)((uint64_t)v318);
    uint64_t v248 = v30;
    int v249 = v31;
    if (v31 != 255)
    {
      uint64_t v242 = v247;
      uint64_t v243 = v248;
      int v244 = v249;
      int v239 = v249;
      uint64_t v240 = v248;
      uint64_t v241 = v247;
      if (v249 == 1)
      {
        uint64_t v237 = v241;
        uint64_t v238 = v240;
        uint64_t v32 = v329;
        uint64_t v219 = v240;
        uint64_t v218 = v241;
        uint64_t v366 = v241;
        uint64_t v367 = v240;
        uint64_t v33 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v32, v33, v319);
        swift_bridgeObjectRetain();
        uint64_t v225 = 32;
        uint64_t v226 = 7;
        uint64_t v34 = swift_allocObject();
        uint64_t v35 = v219;
        uint64_t v227 = v34;
        *(void *)(v34 + 16) = v218;
        *(void *)(v34 + 24) = v35;
        id v235 = Logger.logObject.getter();
        int v236 = static os_log_type_t.debug.getter();
        uint64_t v222 = &v364;
        uint64_t v364 = 12;
        unint64_t v220 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v221 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v223 = v365;
        uint64_t v224 = 17;
        uint64_t v229 = swift_allocObject();
        *(unsigned char *)(v229 + 16) = 32;
        uint64_t v230 = swift_allocObject();
        *(unsigned char *)(v230 + 16) = 8;
        uint64_t v36 = swift_allocObject();
        uint64_t v37 = v227;
        uint64_t v228 = v36;
        *(void *)(v36 + 16) = v288;
        *(void *)(v36 + 24) = v37;
        uint64_t v38 = swift_allocObject();
        uint64_t v39 = v228;
        uint64_t v232 = v38;
        *(void *)(v38 + 16) = v289;
        *(void *)(v38 + 24) = v39;
        uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v231 = _allocateUninitializedArray<A>(_:)();
        uint64_t v233 = v40;
        swift_retain();
        uint64_t v41 = v229;
        uint64_t v42 = v233;
        *uint64_t v233 = v290;
        v42[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
        swift_retain();
        uint64_t v43 = v230;
        uint64_t v44 = v233;
        v233[2] = v291;
        v44[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
        swift_retain();
        uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v232;
        uint64_t v46 = v233;
        v233[4] = v292;
        v46[5] = v45;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v235, (os_log_type_t)v236))
        {
          uint64_t v47 = v304;
          uint64_t v211 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v212 = createStorage<A>(capacity:type:)(0);
          uint64_t v213 = createStorage<A>(capacity:type:)(1);
          uint64_t v214 = &v362;
          v362 = v211;
          v215 = &v361;
          uint64_t v361 = v212;
          Class v216 = &v360;
          uint64_t v360 = v213;
          serialize(_:at:)(2, &v362);
          serialize(_:at:)(1, v214);
          v358 = v290;
          uint64_t v359 = v229;
          closure #1 in osLogInternal(_:log:type:)(&v358, (uint64_t)v214, (uint64_t)v215, (uint64_t)v216);
          uint64_t v217 = v47;
          if (v47)
          {
            __break(1u);
          }
          else
          {
            v358 = v291;
            uint64_t v359 = v230;
            closure #1 in osLogInternal(_:log:type:)(&v358, (uint64_t)&v362, (uint64_t)&v361, (uint64_t)&v360);
            uint64_t v209 = 0;
            v358 = v292;
            uint64_t v359 = v232;
            closure #1 in osLogInternal(_:log:type:)(&v358, (uint64_t)&v362, (uint64_t)&v361, (uint64_t)&v360);
            _os_log_impl(&dword_25D85A000, v235, (os_log_type_t)v236, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() selecting app identifier from direct invocation %s", v211, v223);
            destroyStorage<A>(_:count:)(v212, 0, v210);
            destroyStorage<A>(_:count:)(v213, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v211, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v320 + 8))(v329, v319);
        uint64_t v206 = 0;
        type metadata accessor for App();
        swift_bridgeObjectRetain();
        uint64_t v207 = App.__allocating_init(appIdentifier:)();
        uint64_t v363 = v207;
        uint64_t v208 = type metadata accessor for AppDisambiguationResponse();
        if (App.isFirstParty.getter())
        {
          uint64_t v205 = static AppUtil.walletApp.getter();
        }
        else
        {
          swift_retain();
          uint64_t v205 = v207;
        }
        uint64_t v203 = v205;
        uint64_t v204 = static AppDisambiguationResponse.select(app:)();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v312 + 8))(v318, v310);
        return v204;
      }
      outlined consume of PaymentsDirectInvocations(v241, v240, v239);
    }
    uint64_t v48 = v327;
    uint64_t v49 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v48, v49, v319);
    uint64_t v184 = v313;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v316, v318, v310);
    unint64_t v185 = (*(unsigned __int8 *)(v184 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
    uint64_t v192 = 7;
    uint64_t v193 = swift_allocObject();
    v245((char *)(v193 + v185), v316, v310);
    Class v201 = Logger.logObject.getter();
    int v202 = static os_log_type_t.error.getter();
    uint64_t v188 = &v373;
    uint64_t v373 = 12;
    unint64_t v186 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v187 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v189 = v374;
    uint64_t v190 = 17;
    uint64_t v195 = swift_allocObject();
    *(unsigned char *)(v195 + 16) = 32;
    uint64_t v196 = swift_allocObject();
    *(unsigned char *)(v196 + 16) = 8;
    uint64_t v191 = 32;
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = v193;
    uint64_t v194 = v50;
    *(void *)(v50 + 16) = v293;
    *(void *)(v50 + 24) = v51;
    uint64_t v52 = swift_allocObject();
    uint64_t v53 = v194;
    uint64_t v198 = v52;
    *(void *)(v52 + 16) = v294;
    *(void *)(v52 + 24) = v53;
    uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v197 = _allocateUninitializedArray<A>(_:)();
    uint64_t v199 = v54;
    swift_retain();
    uint64_t v55 = v195;
    unsigned int v56 = v199;
    *uint64_t v199 = v295;
    v56[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v55;
    swift_retain();
    uint64_t v57 = v196;
    uint64_t v58 = v199;
    v199[2] = v296;
    v58[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v57;
    swift_retain();
    uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v198;
    uint64_t v60 = v199;
    v199[4] = v297;
    v60[5] = v59;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v201, (os_log_type_t)v202))
    {
      uint64_t v61 = v304;
      uint64_t v177 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v178 = createStorage<A>(capacity:type:)(0);
      uint64_t v179 = createStorage<A>(capacity:type:)(1);
      uint64_t v180 = &v372;
      v372 = v177;
      uint64_t v181 = &v371;
      uint64_t v371 = v178;
      uint64_t v182 = &v370;
      uint64_t v370 = v179;
      serialize(_:at:)(2, &v372);
      serialize(_:at:)(1, v180);
      v368 = v295;
      uint64_t v369 = v195;
      closure #1 in osLogInternal(_:log:type:)(&v368, (uint64_t)v180, (uint64_t)v181, (uint64_t)v182);
      uint64_t v183 = v61;
      if (v61)
      {
        __break(1u);
      }
      else
      {
        v368 = v296;
        uint64_t v369 = v196;
        closure #1 in osLogInternal(_:log:type:)(&v368, (uint64_t)&v372, (uint64_t)&v371, (uint64_t)&v370);
        uint64_t v175 = 0;
        v368 = v297;
        uint64_t v369 = v198;
        closure #1 in osLogInternal(_:log:type:)(&v368, (uint64_t)&v372, (uint64_t)&v371, (uint64_t)&v370);
        _os_log_impl(&dword_25D85A000, v201, (os_log_type_t)v202, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() couldn't get button press from Direct invocation %s", v177, v189);
        destroyStorage<A>(_:count:)(v178, 0, v176);
        destroyStorage<A>(_:count:)(v179, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v177, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v320 + 8))(v327, v319);
    uint64_t v170 = type metadata accessor for AppDisambiguationResponse();
    uint64_t v171 = Parse.DirectInvocation.identifier.getter();
    uint64_t v172 = v62;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    uint32_t v63 = (void *)swift_allocError();
    uint64_t v64 = v172;
    id v173 = v63;
    *(void *)uint64_t v65 = v171;
    *(void *)(v65 + 8) = v64;
    *(void *)(v65 + 16) = 0;
    *(void *)(v65 + 24) = 0;
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = 0;
    *(unsigned char *)(v65 + 48) = 0;
    uint64_t v174 = static AppDisambiguationResponse.error(_:)();

    (*(void (**)(char *, uint64_t))(v312 + 8))(v318, v310);
    return v174;
  }
  else if (v250 == *MEMORY[0x263F6FF80])
  {
    (*(void (**)(char *, uint64_t))(v334 + 96))(v339, v333);
    Input.parse.getter();
    Swift::String_optional v169 = Parse.toAppId()();
    (*(void (**)(char *, uint64_t))(v334 + 8))(v337, v333);
    if (v169.value._object)
    {
      Swift::String_optional v168 = v169;
      os_log_type_t v66 = v325;
      Swift::String_optional v150 = v169;
      Swift::String_optional v383 = v169;
      uint64_t v67 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v66, v67, v319);
      swift_bridgeObjectRetain();
      uint64_t v156 = 32;
      uint64_t v157 = 7;
      uint64_t v68 = swift_allocObject();
      object = v150.value._object;
      uint64_t v158 = v68;
      *(void *)(v68 + 16) = v150.value._countAndFlagsBits;
      *(void *)(v68 + 24) = object;
      uint64_t v166 = Logger.logObject.getter();
      int v167 = static os_log_type_t.debug.getter();
      uint64_t v153 = &v381;
      uint64_t v381 = 12;
      unint64_t v151 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v154 = v382;
      uint64_t v155 = 17;
      uint64_t v160 = swift_allocObject();
      *(unsigned char *)(v160 + 16) = 32;
      uint64_t v161 = swift_allocObject();
      *(unsigned char *)(v161 + 16) = 8;
      uint64_t v70 = swift_allocObject();
      uint64_t v71 = v158;
      uint64_t v159 = v70;
      *(void *)(v70 + 16) = v282;
      *(void *)(v70 + 24) = v71;
      uint64_t v72 = swift_allocObject();
      uint64_t v73 = v159;
      uint64_t v163 = v72;
      *(void *)(v72 + 16) = v283;
      *(void *)(v72 + 24) = v73;
      uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v162 = _allocateUninitializedArray<A>(_:)();
      uint64_t v164 = v74;
      swift_retain();
      uint64_t v75 = v160;
      uint64_t v76 = v164;
      *uint64_t v164 = v284;
      v76[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
      swift_retain();
      uint64_t v77 = v161;
      uint64_t v78 = v164;
      v164[2] = v285;
      v78[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v77;
      swift_retain();
      uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v163;
      uint64_t v80 = v164;
      v164[4] = v286;
      v80[5] = v79;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v166, (os_log_type_t)v167))
      {
        uint64_t v81 = v304;
        uint64_t v143 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v144 = createStorage<A>(capacity:type:)(0);
        uint64_t v145 = createStorage<A>(capacity:type:)(1);
        uint64_t v146 = &v379;
        v379 = v143;
        uint64_t v147 = &v378;
        uint64_t v378 = v144;
        uint64_t v148 = &v377;
        uint64_t v377 = v145;
        serialize(_:at:)(2, &v379);
        serialize(_:at:)(1, v146);
        v375 = v284;
        uint64_t v376 = v160;
        closure #1 in osLogInternal(_:log:type:)(&v375, (uint64_t)v146, (uint64_t)v147, (uint64_t)v148);
        uint64_t v149 = v81;
        if (v81)
        {
          __break(1u);
        }
        else
        {
          v375 = v285;
          uint64_t v376 = v161;
          closure #1 in osLogInternal(_:log:type:)(&v375, (uint64_t)&v379, (uint64_t)&v378, (uint64_t)&v377);
          uint64_t v141 = 0;
          v375 = v286;
          uint64_t v376 = v163;
          closure #1 in osLogInternal(_:log:type:)(&v375, (uint64_t)&v379, (uint64_t)&v378, (uint64_t)&v377);
          _os_log_impl(&dword_25D85A000, v166, (os_log_type_t)v167, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() selecting app identifier from parse %s", v143, v154);
          destroyStorage<A>(_:count:)(v144, 0, v142);
          destroyStorage<A>(_:count:)(v145, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v143, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v320 + 8))(v325, v319);
      uint64_t v138 = 0;
      type metadata accessor for App();
      swift_bridgeObjectRetain();
      uint64_t v139 = App.__allocating_init(appIdentifier:)();
      uint64_t v380 = v139;
      uint64_t v140 = type metadata accessor for AppDisambiguationResponse();
      if (App.isFirstParty.getter())
      {
        uint64_t v137 = static AppUtil.walletApp.getter();
      }
      else
      {
        swift_retain();
        uint64_t v137 = v139;
      }
      uint64_t v135 = v137;
      uint64_t v136 = static AppDisambiguationResponse.select(app:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v82 = type metadata accessor for USOParse();
      (*(void (**)(char *))(*(void *)(v82 - 8) + 8))(v339);
      return v136;
    }
    else
    {
      uint64_t v83 = v323;
      uint64_t v84 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v320 + 16))(v83, v84, v319);
      uint64_t v133 = Logger.logObject.getter();
      int v132 = static os_log_type_t.error.getter();
      uint64_t v130 = &v388;
      uint64_t v388 = 2;
      unint64_t v128 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v129 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v131 = v389;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v134 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v133, (os_log_type_t)v132))
      {
        uint64_t v85 = v304;
        uint64_t v118 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v117 = 0;
        uint64_t v119 = createStorage<A>(capacity:type:)(0);
        uint64_t v120 = createStorage<A>(capacity:type:)(v117);
        uint64_t v124 = &v387;
        v387 = v118;
        unint64_t v125 = &v386;
        uint64_t v386 = v119;
        unint64_t v122 = &v385;
        uint64_t v385 = v120;
        unsigned int v121 = 0;
        serialize(_:at:)(0, &v387);
        serialize(_:at:)(v121, v124);
        uint64_t v384 = v134;
        uint64_t v123 = v103;
        MEMORY[0x270FA5388](v103);
        unsigned int v86 = v125;
        int v87 = &v103[-6];
        unint64_t v126 = &v103[-6];
        v87[2] = (Builtin::Word)v124;
        v87[3] = (Builtin::Word)v86;
        v87[4] = v88;
        uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v85)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25D85A000, v133, (os_log_type_t)v132, "#PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() couldn't find associated app ID", v118, v131);
          uint64_t v115 = 0;
          destroyStorage<A>(_:count:)(v119, 0, v116);
          destroyStorage<A>(_:count:)(v120, v115, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v118, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v320 + 8))(v323, v319);
      uint64_t v113 = 0;
      type metadata accessor for AppDisambiguationResponse();
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      id v112 = (id)swift_allocError();
      *(void *)uint64_t v89 = 10;
      *(void *)(v89 + 8) = 0;
      *(void *)(v89 + 16) = 0;
      *(void *)(v89 + 24) = 0;
      *(void *)(v89 + 32) = 0;
      *(void *)(v89 + 40) = 0;
      *(unsigned char *)(v89 + 48) = 17;
      uint64_t v114 = static AppDisambiguationResponse.error(_:)();

      uint64_t v90 = type metadata accessor for USOParse();
      (*(void (**)(char *))(*(void *)(v90 - 8) + 8))(v339);
      return v114;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v306 + 16))(v309, v279, v305);
    v103[0] = 86;
    uint64_t v91 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    os_log_type_t v106 = &v391;
    uint64_t v391 = v91;
    uint64_t v392 = v92;
    int v104 = 1;
    Swift::String v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse() unexpected parse type ", v103[0], 1);
    v103[1] = (Builtin::Word)v93._object;
    DefaultStringInterpolation.appendLiteral(_:)(v93);
    swift_bridgeObjectRelease();
    Input.parse.getter();
    uint64_t v94 = String.init<A>(describing:)();
    v103[2] = (Builtin::Word)v390;
    v390[0] = v94;
    v390[1] = v95;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String.UTF8View();
    Swift::String v96 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v104 & 1);
    uint64_t v105 = v96._object;
    DefaultStringInterpolation.appendLiteral(_:)(v96);
    swift_bridgeObjectRelease();
    uint64_t v108 = v391;
    uint64_t v107 = v392;
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v97 = String.init(stringInterpolation:)();
    uint64_t v109 = v98;
    uint64_t v110 = static Logger.logForCrash(_:)(v97, v98);
    uint64_t v111 = v99;
    swift_bridgeObjectRelease();
    uint64_t v101 = 216;
    int v102 = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return v251;
}

uint64_t implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)(uint64_t a1, uint64_t a2)
{
  v3[28] = v2;
  v3[27] = a2;
  v3[26] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  v3[25] = 0;
  uint64_t v10 = *v2;
  v3[29] = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[30] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  v3[34] = v5;
  v3[35] = *(void *)(v5 - 8);
  v3[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v3[37] = v6;
  v3[38] = *(void *)(v6 - 8);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v9;
  v3[42] = *(void *)(v10 + 80);
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:), 0);
}

uint64_t PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)()
{
  uint64_t v1 = v0[28];
  v0[22] = v0;
  v0[43] = *(void *)(v1 + 152);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v5[44] = v2;
  *uint64_t v2 = v5[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  uint64_t v3 = v5[41];
  return PaymentsBaseCATs.buttonCancel()(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 176) = *v1;
  *(void *)(v4 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  else
  {
    swift_release();
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;

  uint64_t v1 = v0[28];
  v0[22] = v0;
  v0[46] = *(void *)(v1 + 152);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v5[47] = v2;
  *uint64_t v2 = v5[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  uint64_t v3 = v5[40];
  return PaymentsBaseCATs.buttonYes()(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 176) = *v1;
  *(void *)(v4 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  else
  {
    swift_release();
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = v0[28];
  v0[22] = v0;
  v0[49] = *(void *)(v1 + 152);
  swift_retain();
  uint64_t v6 = App.sirikitApp.getter();
  v0[50] = v6;
  uint64_t v2 = (void *)swift_task_alloc();
  v5[51] = v2;
  *uint64_t v2 = v5[22];
  v2[1] = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  uint64_t v3 = v5[39];
  return PaymentsBaseCATs.confirmApp(app:)(v3, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 176) = *v1;
  *(void *)(v4 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  char v1;
  void *v2;
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v7 = v0[42];
  uint64_t v21 = v0[41];
  uint64_t v22 = v0[40];
  uint64_t v23 = v0[39];
  uint64_t v18 = v0[38];
  uint64_t v19 = v0[37];
  uint64_t v24 = v0[36];
  uint64_t v15 = v0[35];
  uint64_t v16 = v0[34];
  uint64_t v25 = v0[33];
  uint64_t v10 = v0[32];
  uint64_t v11 = v0[31];
  unint64_t v26 = v0[30];
  uint64_t v6 = v0[29];
  uint64_t v12 = v0[28];
  uint64_t v9 = v0[27];
  uint64_t v14 = (uint64_t *)v0[26];
  v0[22] = v0;
  uint64_t v17 = (void *)static AppResolutionResponse.makeConfirmationView(confirmDialog:cancelDialog:)();
  v0[25] = v17;
  outlined init with copy of GlobalsProviding(v12 + 112, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v8 = *(void *)(v6 + 88);
  uint64_t v1 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appConfirmationContextUpdate(app:locale:intentType:isRequestAccount:)(v9, v25, v7, v8, v1 & 1, v24);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v12 + 112, (uint64_t)(v0 + 7));
  outlined init with copy of GlobalsProviding(v12 + 112, (uint64_t)(v0 + 12));
  __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v13 = v2;
  uint64_t v3 = v17;
  *uint64_t v13 = v17;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v26, v24, v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v26, 0, 1, v16);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v14[3] = type metadata accessor for AceOutput();
  v14[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v14);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v26);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, v16);

  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v20(v23, v19);
  v20(v22, v19);
  v20(v21, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[22] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 176) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 176) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = v0[41];
  uint64_t v3 = v0[38];
  uint64_t v5 = v0[37];
  v0[22] = v0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[22] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v5 = v0[41];
  uint64_t v4 = v0[40];
  uint64_t v3 = v0[38];
  uint64_t v6 = v0[37];
  v0[22] = v0;
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v4, v6);
  v7(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[22] + 8);
  return v1();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = v3;
  v4[19] = a3;
  v4[18] = a2;
  v4[17] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  uint64_t v12 = *v3;
  v4[21] = *v3;
  type metadata accessor for DialogPhase();
  v4[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v4[29] = v7;
  v4[30] = *(void *)(v7 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  type metadata accessor for CATOption();
  v4[33] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[15] = v11;
  v4[34] = *(void *)(v12 + 80);
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:), 0);
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)()
{
  *(void *)(v0 + 96) = v0;
  type metadata accessor for DisambiguationCATsModern();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(void *)(v0 + 280) = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 288) = v1;
  *uint64_t v1 = *(void *)(v3 + 96);
  v1[1] = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  return DisambiguationCATsModern.intentDisambiguationPrompt()();
}

{
  void *v0;
  uint64_t v1;
  char v2;
  void (*v3)(uint64_t, uint64_t);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v1 = v0[37];
  uint64_t v12 = v0[34];
  uint64_t v18 = v0[32];
  uint64_t v20 = v0[31];
  uint64_t v19 = v0[30];
  uint64_t v21 = v0[29];
  uint64_t v16 = v0[28];
  uint64_t v15 = v0[27];
  uint64_t v17 = v0[26];
  uint64_t v11 = v0[21];
  uint64_t v22 = v0[20];
  uint64_t v14 = v0[18];
  v0[12] = v0;
  v0[16] = v1;
  outlined init with copy of GlobalsProviding(v22 + 112, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v13 = *(void *)(v11 + 88);
  uint64_t v2 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(v14, v16, v12, v13, v2 & 1, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  static DialogPhase.confirmation.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v18, v21);
  *(void *)(swift_task_alloc() + 16) = v20;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v0[39] = v3;
  v0[40] = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v20, v21);
  outlined init with copy of GlobalsProviding(v22 + 112, (uint64_t)(v0 + 7));
  uint64_t v4 = (void *)swift_task_alloc();
  v23[41] = v4;
  *uint64_t v4 = v23[12];
  v4[1] = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  uint64_t v5 = v23[37];
  uint64_t v6 = v23[25];
  uint64_t v7 = v23[19];
  uint64_t v8 = v23[18];
  uint64_t v9 = v23[17];
  return static AppDisambiguationViewBuilder.makeModernizedDisambiguationView(sortedApps:disambiguationList:manifest:dialog:deviceState:)(v9, v8, v7, v6, v5, (uint64_t)(v0 + 7));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 96) = *v1;
  *(void *)(v4 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0(v4 + 56);
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v6 = (id)v0[37];
  uint64_t v7 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v1 = v0[24];
  v0[12] = v0;
  (*(void (**)(void))(v1 + 8))();
  v5(v7, v4);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[12] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 96) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 96) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  uint64_t v10;

  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v9 = (id)v0[37];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[29];
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[23];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  v8(v6, v7);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[12] + 8);
  return v1();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[12] = *v2;
  v5[37] = a1;
  v5[38] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  }
  else
  {
    swift_release();
    uint64_t v3 = PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v9 = a2;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  uint64_t v7 = 0;
  uint64_t v18 = type metadata accessor for ResponseType();
  uint64_t v16 = *(void *)(v18 - 8);
  uint64_t v17 = v18 - 8;
  unint64_t v6 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = (char *)&v6 - v6;
  unint64_t v8 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v6 - v8;
  uint64_t v21 = a1;
  uint64_t v20 = v3;
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  uint64_t v10 = *(void *)(v12 - 8);
  uint64_t v11 = v12 - 8;
  (*(void (**)(char *, uint64_t))(v10 + 16))(v13, v9);
  uint64_t v4 = *(void (**)(char *, void))(v10 + 56);
  int v14 = 1;
  v4(v13, 0);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, v14 & 1);
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x263F6FA28], v18);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 608) = v2;
  *(void *)(v3 + 600) = a2;
  *(void *)(v3 + 592) = a1;
  *(void *)(v3 + 536) = v3;
  *(void *)(v3 + 544) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 568) = 0;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 584) = 0;
  *(unsigned char *)(v3 + 784) = 0;
  uint64_t v10 = *v2;
  *(void *)(v3 + 616) = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v3 + 624) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  *(void *)(v3 + 632) = v4;
  *(void *)(v3 + 640) = *(void *)(v4 - 8);
  *(void *)(v3 + 648) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 656) = v5;
  *(void *)(v3 + 664) = *(void *)(v5 - 8);
  *(void *)(v3 + 672) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  *(void *)(v3 + 680) = v6;
  *(void *)(v3 + 688) = *(void *)(v6 - 8);
  *(void *)(v3 + 696) = swift_task_alloc();
  *(void *)(v3 + 544) = a2;
  *(void *)(v3 + 552) = v9;
  *(void *)(v3 + 704) = *(void *)(v10 + 80);
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:), 0);
}

uint64_t PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)()
{
  uint64_t v1 = v0[75];
  v0[67] = v0;
  v0[70] = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  uint64_t v25 = Sequence.sorted(by:)();
  v0[89] = v25;
  uint64_t v22 = *(void *)(v24 + 696);
  uint64_t v21 = *(void *)(v24 + 680);
  uint64_t v19 = *(void *)(v24 + 608);
  uint64_t v20 = *(void *)(v24 + 688);
  swift_release();
  *(void *)(v24 + 568) = v25;
  outlined init with copy of GlobalsProviding(v19 + 112, v24 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v24 + 16), *(void *)(v24 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v23 = static AppResolutionResponse.makeDisambiguationList(apps:inLocale:)();
  *(void *)(v24 + 720) = v23;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  *(void *)(v24 + 728) = v2;
  *(void *)(v24 + 736) = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v22, v21);
  __swift_destroy_boxed_opaque_existential_0(v24 + 16);
  *(void *)(v24 + 576) = v23;
  if (static RFFeatureFlags.ResponseFramework.SMART.getter())
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v24 + 744) = v3;
    *uint64_t v3 = *(void *)(v24 + 536);
    v3[1] = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
    uint64_t v4 = *(void *)(v24 + 592);
    return PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(v4, v25, v23);
  }
  outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(v24 + 56), *(void *)(v24 + 80));
  char v18 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0(v24 + 56);
  if ((v18 & 1) == 0)
  {
    outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 96);
    __swift_project_boxed_opaque_existential_1((void *)(v24 + 96), *(void *)(v24 + 120));
    char v16 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if (v16)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v24 + 96);
      swift_retain();
    }
    else
    {
      outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 136);
      __swift_project_boxed_opaque_existential_1((void *)(v24 + 136), *(void *)(v24 + 160));
      char v15 = dispatch thunk of DeviceState.isPad.getter();
      __swift_destroy_boxed_opaque_existential_0(v24 + 136);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v24 + 96);
      swift_retain();
      if ((v15 & 1) == 0)
      {
        outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 176);
        __swift_project_boxed_opaque_existential_1((void *)(v24 + 176), *(void *)(v24 + 200));
        char v14 = dispatch thunk of DeviceState.isPod.getter();
        __swift_destroy_boxed_opaque_existential_0(v24 + 176);
        swift_release();
        swift_retain();
        if ((v14 & 1) == 0)
        {
          char v13 = 0;
          goto LABEL_14;
        }
LABEL_12:
        outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 456);
        __swift_project_boxed_opaque_existential_1((void *)(v24 + 456), *(void *)(v24 + 480));
        int v12 = dispatch thunk of DeviceState.isCarPlay.getter() ^ 1;
        __swift_destroy_boxed_opaque_existential_0(v24 + 456);
        char v13 = v12;
LABEL_14:
        uint64_t v10 = *(void *)(v24 + 608);
        swift_release();
        *(unsigned char *)(v24 + 784) = v13 & 1;
        type metadata accessor for SAUIAssistantUtteranceView();
        _allocateUninitializedArray<A>(_:)();
        outlined init with copy of GlobalsProviding(v10 + 112, v24 + 216);
        uint64_t v11 = static AppResolutionResponse.makeDisambiguationViews(apps:utteranceViews:disambiguationList:deviceState:compact:)();
        __swift_destroy_boxed_opaque_existential_0(v24 + 216);
        swift_bridgeObjectRelease();
        *(void *)(v24 + 584) = v11;
        goto LABEL_15;
      }
    }
    swift_release();
    swift_retain();
    goto LABEL_12;
  }
  outlined init with copy of GlobalsProviding(*(void *)(v24 + 608) + 112, v24 + 496);
  uint64_t v6 = default argument 3 of static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)();
  uint64_t v17 = static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)(0, v23, (void *)(v24 + 496), v6, v7);
  __swift_destroy_boxed_opaque_existential_0(v24 + 496);
  *(void *)(v24 + 584) = v17;
LABEL_15:
  *(void *)(v24 + 760) = *(void *)(*(void *)(v24 + 608) + 152);
  swift_retain();
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v24 + 768) = v8;
  *unint64_t v8 = *(void *)(v24 + 536);
  v8[1] = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  uint64_t v9 = *(void *)(v24 + 672);
  return PaymentsBaseCATs.disambiguateApp()(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 536) = *v1;
  *(void *)(v4 + 752) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  }
  else
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 536) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 536) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 536) = *v1;
  *(void *)(v4 + 776) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  }
  else
  {
    swift_release();
    uint64_t v2 = PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  char v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[91];
  uint64_t v19 = v0[89];
  uint64_t v5 = v0[88];
  uint64_t v7 = v0[87];
  unint64_t v8 = v0[85];
  uint64_t v17 = v0[84];
  char v16 = v0[83];
  char v18 = v0[82];
  char v14 = v0[81];
  char v13 = v0[80];
  char v15 = v0[79];
  int v12 = v0[78];
  uint64_t v4 = v0[77];
  uint64_t v10 = v0[76];
  uint64_t v11 = (uint64_t *)v0[74];
  v0[67] = v0;
  swift_bridgeObjectRetain();
  outlined init with copy of GlobalsProviding(v10 + 112, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isWatch.getter();
  PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined init with copy of GlobalsProviding(v10 + 112, (uint64_t)(v0 + 37));
  __swift_project_boxed_opaque_existential_1(v0 + 37, v0[40]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v1 = default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  static PaymentsContextProvider.appDisambiguationContextUpdate(apps:locale:intentType:isRequestAccount:)(v19, v7, v5, v6, v1 & 1, v14);
  v9(v7, v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  outlined init with copy of GlobalsProviding(v10 + 112, (uint64_t)(v0 + 42));
  outlined init with copy of GlobalsProviding(v10 + 112, (uint64_t)(v0 + 47));
  __swift_project_boxed_opaque_existential_1(v0 + 47, v0[50]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v14, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v15);
  v0[52] = 0;
  v0[53] = 0;
  v0[54] = 0;
  v0[55] = 0;
  v0[56] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 52));
  outlined destroy of NLContextUpdate?(v12);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  outlined destroy of [SFCardSection]();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[67] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 536) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 536) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 536) = v0;
  swift_release();
  outlined destroy of [SFCardSection]();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 536) + 8);
  return v1();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t *a1, uint64_t a2, void *a3)
{
  char v15 = a1;
  uint64_t v12 = a2;
  uint64_t v26 = a3;
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  v45._countAndFlagsBits = 0;
  v45._object = 0;
  v41._countAndFlagsBits = 0;
  v41._object = 0;
  uint64_t v16 = *a3;
  uint64_t v11 = a3;
  uint64_t v13 = 0;
  uint64_t v32 = type metadata accessor for Locale();
  uint64_t v21 = *(void *)(v32 - 8);
  uint64_t v22 = v32 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  int v31 = (char *)v8 - v14;
  uint64_t v17 = *v15;
  uint64_t v52 = v17;
  uint64_t v25 = *v3;
  uint64_t v51 = v25;
  uint64_t v50 = v4;
  uint64_t v49 = *(void *)(v16 + 80);
  uint64_t v20 = type metadata accessor for AppInformationResolver();
  swift_retain();
  uint64_t v24 = AppInformationResolver.__allocating_init(app:)();
  uint64_t v23 = v46;
  outlined init with copy of GlobalsProviding((uint64_t)(v26 + 14), (uint64_t)v46);
  uint64_t v19 = v47;
  uint64_t v18 = v48;
  __swift_project_boxed_opaque_existential_1(v23, v47);
  dispatch thunk of DeviceState.siriLocale.getter();
  v36._countAndFlagsBits = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v36._object = v5;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v29 = v21 + 8;
  v30(v31, v32);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  swift_release();
  Swift::String v45 = v36;
  swift_retain();
  uint64_t v34 = AppInformationResolver.__allocating_init(app:)();
  uint64_t v33 = v42;
  outlined init with copy of GlobalsProviding((uint64_t)(v26 + 14), (uint64_t)v42);
  uint64_t v28 = v43;
  uint64_t v27 = v44;
  __swift_project_boxed_opaque_existential_1(v33, v43);
  dispatch thunk of DeviceState.siriLocale.getter();
  v35._countAndFlagsBits = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  v35._object = v6;
  v30(v31, v32);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  swift_release();
  Swift::String v41 = v35;
  swift_bridgeObjectRetain();
  Swift::String v39 = v36;
  if (v36._object)
  {
    Swift::String v40 = v39;
  }
  else
  {
    Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  Swift::String v10 = v40;
  swift_bridgeObjectRetain();
  Swift::String v37 = v35;
  if (v35._object)
  {
    Swift::String v38 = v37;
  }
  else
  {
    Swift::String v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  v8[1] = v38._object;
  int v9 = static String.< infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t default argument 3 of static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)()
{
  return type metadata accessor for SiriKitDisambiguationSnippetFactory();
}

uint64_t PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(uint64_t a1)
{
  v2[38] = a1;
  v2[17] = v2;
  v2[18] = 0;
  v2[19] = 0;
  v2[20] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[23] = 0;
  v2[11] = 0;
  v2[12] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[39] = v3;
  v2[40] = *(void *)(v3 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ProtectedAppStatus.AppState();
  v2[44] = v4;
  v2[45] = *(void *)(v4 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ProtectedAppStatus();
  v2[47] = v5;
  v2[48] = *(void *)(v5 - 8);
  v2[49] = swift_task_alloc();
  v2[18] = a1;
  v2[19] = v1;
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:), 0);
}

uint64_t PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)()
{
  uint64_t v37 = v0[38];
  v0[17] = v0;
  type metadata accessor for App();
  v0[20] = Array.init()();
  type metadata accessor for ProtectedAppCheck();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  static ProtectedAppCheck.client(for:)();
  swift_release();
  swift_bridgeObjectRetain();
  v0[21] = v37;
  v0[50] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  Collection<>.makeIterator()();
  uint64_t v38 = 0;
  while (1)
  {
    *(void *)(v36 + 408) = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[App]>);
    IndexingIterator.next()();
    uint64_t v35 = *(void *)(v36 + 176);
    *(void *)(v36 + 416) = v35;
    if (!v35) {
      break;
    }
    *(void *)(v36 + 184) = v35;
    uint64_t v32 = App.appIdentifier.getter();
    uint64_t v33 = v1;
    *(void *)(v36 + 424) = v1;
    if (v1)
    {
      *(void *)(v36 + 88) = v32;
      *(void *)(v36 + 96) = v1;
      uint64_t v30 = *(void *)(v36 + 40);
      uint64_t v31 = *(void *)(v36 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v36 + 16), v30);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v36 + 432) = v2;
      *uint64_t v2 = *(void *)(v36 + 136);
      v2[1] = PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
      uint64_t v3 = *(void *)(v36 + 392);
      return MEMORY[0x270F67E00](v3, v32, v33, v30, v31);
    }
    uint64_t v4 = *(void *)(v36 + 328);
    uint64_t v20 = *(void *)(v36 + 312);
    uint64_t v19 = *(void *)(v36 + 320);
    uint64_t v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v4, v5, v20);
    swift_retain();
    swift_retain();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(void *)(v22 + 24) = v35;
    swift_release();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    *(void *)(v36 + 192) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v36 + 440);
    uint64_t v24 = swift_allocObject();
    *(unsigned char *)(v24 + 16) = 32;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 8;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v23 + 24) = v22;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v26 + 24) = v23;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v27 = v6;
    swift_retain();
    void *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[1] = v24;
    swift_retain();
    v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[3] = v25;
    swift_retain();
    v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[5] = v26;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v28, v29))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v17 = createStorage<A>(capacity:type:)(0);
      uint64_t v18 = createStorage<A>(capacity:type:)(1);
      *(void *)(v36 + 208) = buf;
      *(void *)(v36 + 216) = v17;
      *(void *)(v36 + 224) = v18;
      serialize(_:at:)(2, (unsigned char **)(v36 + 208));
      serialize(_:at:)(1, (unsigned char **)(v36 + 208));
      *(void *)(v36 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v36 + 80) = v24;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 72), v36 + 208, v36 + 216, v36 + 224);
      *(void *)(v36 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v36 + 80) = v25;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 72), v36 + 208, v36 + 216, v36 + 224);
      *(void *)(v36 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v36 + 80) = v26;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 72), v36 + 208, v36 + 216, v36 + 224);
      _os_log_impl(&dword_25D85A000, v28, v29, "#PaymentsAppResolutionFlowStrategy %s has no bundleID, but not filtering it out", buf, size);
      destroyStorage<A>(_:count:)(v17, 0, v15);
      destroyStorage<A>(_:count:)(v18, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v13 = v38;
      uint64_t v14 = v34;
    }
    uint64_t v11 = *(void *)(v36 + 328);
    uint64_t v12 = *(void *)(v36 + 312);
    uint64_t v10 = *(void *)(v36 + 320);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_retain();
    *(void *)(v36 + 200) = v35;
    Array.append(_:)();
    swift_release();
    uint64_t v38 = v13;
    uint64_t v34 = v14;
  }
  outlined destroy of [SFCardSection]();
  uint64_t v9 = *(void *)(v36 + 160);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0(v36 + 16);
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(v36 + 136) + 8);
  return v7(v9);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(*(void *)v0 + 136) = *(void *)v0;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:), 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint32_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSObject *log;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *buf;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint32_t size;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  NSObject *oslog;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  uint64_t v95 = v0[46];
  uint64_t v94 = v0[45];
  Swift::String v96 = v0[44];
  v0[17] = v0;
  ProtectedAppStatus.state.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v94 + 88))(v95, v96) == *MEMORY[0x263F6FBC8])
  {
    uint64_t v4 = *(void *)(v93 + 344);
    uint64_t v77 = *(void *)(v93 + 312);
    uint64_t v78 = *(void *)(v93 + 416);
    uint64_t v76 = *(void *)(v93 + 320);
    uint64_t v5 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v4, v5, v77);
    swift_retain();
    swift_retain();
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(void *)(v80 + 24) = v78;
    swift_release();
    oslog = Logger.logObject.getter();
    int v87 = static os_log_type_t.debug.getter();
    *(void *)(v93 + 272) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v93 + 448);
    uint64_t v82 = swift_allocObject();
    *(unsigned char *)(v82 + 16) = 32;
    uint64_t v83 = swift_allocObject();
    *(unsigned char *)(v83 + 16) = 8;
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v81 + 24) = v80;
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v84 + 24) = v81;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v85 = v6;
    swift_retain();
    *uint64_t v85 = partial apply for closure #1 in OSLogArguments.append(_:);
    v85[1] = v82;
    swift_retain();
    v85[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v85[3] = v83;
    swift_retain();
    v85[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v85[5] = v84;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v87))
    {
      uint64_t v7 = *(void *)(v93 + 408);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v74 = createStorage<A>(capacity:type:)(0);
      uint64_t v75 = createStorage<A>(capacity:type:)(1);
      *(void *)(v93 + 280) = buf;
      *(void *)(v93 + 288) = v74;
      *(void *)(v93 + 296) = v75;
      serialize(_:at:)(2, (unsigned char **)(v93 + 280));
      serialize(_:at:)(1, (unsigned char **)(v93 + 280));
      *(void *)(v93 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 128) = v82;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 120), v93 + 280, v93 + 288, v93 + 296);
      if (v7) {
        return result;
      }
      *(void *)(v93 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 128) = v83;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 120), v93 + 280, v93 + 288, v93 + 296);
      *(void *)(v93 + 120) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 128) = v84;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 120), v93 + 280, v93 + 288, v93 + 296);
      _os_log_impl(&dword_25D85A000, oslog, v87, "#PaymentsAppResolutionFlowStrategy %s is hidden", buf, size);
      destroyStorage<A>(_:count:)(v74, 0, v72);
      destroyStorage<A>(_:count:)(v75, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v71 = 0;
      uint64_t v70 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v71 = *(void *)(v93 + 408);
    }
    os_log_type_t v66 = *(void *)(v93 + 344);
    uint64_t v67 = *(void *)(v93 + 312);
    uint64_t v65 = *(void *)(v93 + 320);

    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    uint64_t v68 = v71;
    int v69 = v70;
  }
  else
  {
    uint64_t v8 = *(void *)(v93 + 336);
    uint64_t v54 = *(void *)(v93 + 312);
    uint64_t v55 = *(void *)(v93 + 416);
    uint64_t v53 = *(void *)(v93 + 320);
    uint64_t v9 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v8, v9, v54);
    swift_retain();
    swift_retain();
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(void *)(v57 + 24) = v55;
    swift_release();
    log = Logger.logObject.getter();
    uint64_t v64 = static os_log_type_t.debug.getter();
    *(void *)(v93 + 232) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    unsigned int v56 = *(_DWORD *)(v93 + 444);
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = 32;
    uint64_t v60 = swift_allocObject();
    *(unsigned char *)(v60 + 16) = 8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v58 + 24) = v57;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v61 + 24) = v58;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v62 = v10;
    swift_retain();
    *uint64_t v62 = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[1] = v59;
    swift_retain();
    v62[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[3] = v60;
    swift_retain();
    v62[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v62[5] = v61;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v64))
    {
      uint64_t v11 = *(void *)(v93 + 408);
      uint64_t v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v51 = createStorage<A>(capacity:type:)(0);
      uint64_t v52 = createStorage<A>(capacity:type:)(1);
      *(void *)(v93 + 248) = v50;
      *(void *)(v93 + 256) = v51;
      *(void *)(v93 + 264) = v52;
      serialize(_:at:)(2, (unsigned char **)(v93 + 248));
      serialize(_:at:)(1, (unsigned char **)(v93 + 248));
      *(void *)(v93 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 112) = v59;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 104), v93 + 248, v93 + 256, v93 + 264);
      if (v11) {
        return result;
      }
      *(void *)(v93 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 112) = v60;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 104), v93 + 248, v93 + 256, v93 + 264);
      *(void *)(v93 + 104) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 112) = v61;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 104), v93 + 248, v93 + 256, v93 + 264);
      _os_log_impl(&dword_25D85A000, log, v64, "#PaymentsAppResolutionFlowStrategy %s is not hidden", v50, v56);
      destroyStorage<A>(_:count:)(v51, 0, v49);
      destroyStorage<A>(_:count:)(v52, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v50, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v48 = 0;
      uint64_t v47 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v48 = *(void *)(v93 + 408);
    }
    Swift::String v45 = *(void *)(v93 + 368);
    uint64_t v46 = *(void *)(v93 + 352);
    Swift::String v41 = *(void *)(v93 + 336);
    uint64_t v42 = *(void *)(v93 + 312);
    uint64_t v43 = *(void *)(v93 + 416);
    uint64_t v44 = *(void *)(v93 + 360);
    Swift::String v40 = *(void *)(v93 + 320);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    swift_retain();
    *(void *)(v93 + 240) = v43;
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    uint64_t v68 = v48;
    int v69 = v47;
  }
  (*(void (**)(void, void))(*(void *)(v93 + 384) + 8))(*(void *)(v93 + 392), *(void *)(v93 + 376));
  swift_bridgeObjectRelease();
  uint64_t v38 = v68;
  for (i = v69; ; i = v22)
  {
    swift_release();
    *(void *)(v93 + 408) = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[App]>);
    IndexingIterator.next()();
    uint64_t v90 = *(void *)(v93 + 176);
    *(void *)(v93 + 416) = v90;
    if (!v90)
    {
      outlined destroy of [SFCardSection]();
      uint64_t v17 = *(void *)(v93 + 160);
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0(v93 + 16);
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)(v93 + 136) + 8);
      return v15(v17);
    }
    *(void *)(v93 + 184) = v90;
    uint64_t v91 = App.appIdentifier.getter();
    uint64_t v92 = v1;
    *(void *)(v93 + 424) = v1;
    if (v1) {
      break;
    }
    uint64_t v12 = *(void *)(v93 + 328);
    uint64_t v28 = *(void *)(v93 + 312);
    uint64_t v27 = *(void *)(v93 + 320);
    uint64_t v13 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v12, v13, v28);
    swift_retain();
    swift_retain();
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
    *(void *)(v30 + 24) = v90;
    swift_release();
    uint64_t v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.debug.getter();
    *(void *)(v93 + 192) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    os_log_type_t v29 = *(_DWORD *)(v93 + 440);
    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = 32;
    uint64_t v33 = swift_allocObject();
    *(unsigned char *)(v33 + 16) = 8;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v31 + 24) = v30;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v34 + 24) = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v35 = v14;
    swift_retain();
    *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[1] = v32;
    swift_retain();
    v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[3] = v33;
    swift_retain();
    v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[5] = v34;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      uint64_t v26 = createStorage<A>(capacity:type:)(1);
      *(void *)(v93 + 208) = v24;
      *(void *)(v93 + 216) = v25;
      *(void *)(v93 + 224) = v26;
      serialize(_:at:)(2, (unsigned char **)(v93 + 208));
      serialize(_:at:)(1, (unsigned char **)(v93 + 208));
      *(void *)(v93 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 80) = v32;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 72), v93 + 208, v93 + 216, v93 + 224);
      if (v38) {
        return result;
      }
      *(void *)(v93 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 80) = v33;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 72), v93 + 208, v93 + 216, v93 + 224);
      *(void *)(v93 + 72) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v93 + 80) = v34;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 72), v93 + 208, v93 + 216, v93 + 224);
      _os_log_impl(&dword_25D85A000, v36, v37, "#PaymentsAppResolutionFlowStrategy %s has no bundleID, but not filtering it out", v24, v29);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v24, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v21 = v38;
      uint64_t v22 = i;
    }
    uint64_t v19 = *(void *)(v93 + 328);
    uint64_t v20 = *(void *)(v93 + 312);
    uint64_t v18 = *(void *)(v93 + 320);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    swift_retain();
    *(void *)(v93 + 200) = v90;
    Array.append(_:)();
    uint64_t v38 = v21;
  }
  *(void *)(v93 + 88) = v91;
  *(void *)(v93 + 96) = v1;
  Builtin::Word v88 = *(void *)(v93 + 40);
  uint64_t v89 = *(void *)(v93 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v93 + 16), v88);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v93 + 432) = v2;
  *uint64_t v2 = *(void *)(v93 + 136);
  v2[1] = PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:);
  uint64_t v3 = *(void *)(v93 + 392);
  return MEMORY[0x270F67E00](v3, v91, v92, v88, v89);
}

uint64_t implicit closure #1 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_retain();
  uint64_t result = a1;
  *a2 = a1;
  return result;
}

void *PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)(void *a1)
{
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = *v1;
  uint64_t v14 = a1;
  uint64_t v13 = v1;
  uint64_t v12 = *(void *)(v2 + 80);
  uint64_t v7 = *a1;
  swift_bridgeObjectRetain();
  v10[0] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  lazy protocol witness table accessor for type [App] and conformance [A]();
  Collection.firstIndex(where:)();
  uint64_t result = v10;
  outlined destroy of [SFCardSection]();
  if ((v11 & 1) == 0)
  {
    uint64_t v9 = v10[1];
    type metadata accessor for App();
    Array.subscript.getter();
    uint64_t v5 = App.appIdentifier.getter();
    uint64_t v6 = v4;
    swift_release();
    v8[0] = v5;
    v8[1] = v6;
    uint64_t result = v8;
    outlined destroy of String.UTF8View();
    if (!v6)
    {
      Array.remove(at:)();
      swift_release();
      static AppUtil.walletApp.getter();
      return (void *)Array.append(_:)();
    }
  }
  return result;
}

BOOL closure #1 in PaymentsAppResolutionFlowStrategy.finalizeAppsForDisambiguation(_:)()
{
  return App.isFirstParty.getter();
}

id PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  id v11 = 0;
  uint64_t v2 = *v1;
  uint64_t v14 = a1;
  uint64_t v13 = v1;
  uint64_t v12 = *(void *)(v2 + 80);
  uint64_t v3 = App.appIdentifier.getter();
  id v8 = static PaymentsDirectInvocations.selectionInvocation(appIdentifier:)(v3, v4);
  swift_bridgeObjectRelease();
  id v11 = v8;
  id v6 = self;
  outlined init with copy of GlobalsProviding((uint64_t)(v1 + 14), (uint64_t)v10);
  id v7 = SKIDirectInvocationPayload.toRSKE(deviceState:)(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  id v9 = objc_msgSend(v6, sel_wrapCommandInStartLocalRequest_, v7);
  swift_unknownObjectRelease();

  return v9;
}

uint64_t PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)()
{
  return swift_release();
}

uint64_t closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(id *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v160 = a3;
  uint64_t v161 = a4;
  uint64_t v163 = partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
  uint64_t v164 = (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem);
  uint64_t v165 = (void (*)(char *, char *))partial apply for closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
  uint64_t v166 = partial apply for closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
  int v167 = partial apply for thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ();
  Swift::String_optional v168 = "Fatal error";
  Swift::String_optional v169 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  uint64_t v170 = "SiriPaymentsIntents/PaymentsAppResolutionFlowStrategy.swift";
  uint64_t v171 = partial apply for closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:);
  uint64_t v172 = (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem);
  id v196 = 0;
  char v195 = 0;
  uint64_t v194 = 0;
  uint64_t v193 = 0;
  id v191 = 0;
  uint64_t v190 = 0;
  id v185 = 0;
  id v184 = 0;
  id v179 = 0;
  uint64_t v178 = 0;
  uint64_t v4 = *a4;
  id v173 = *a1;
  id v196 = v173;
  char v195 = a2 & 1;
  uint64_t v194 = a3;
  uint64_t v193 = a4;
  uint64_t v192 = *(void *)(v4 + 80);
  if (a2)
  {
    id v5 = v173;
    self;
    uint64_t v159 = swift_dynamicCastObjCClass();
    if (v159)
    {
      uint64_t v158 = (void *)v159;
    }
    else
    {
      uint64_t v157 = 0;

      uint64_t v158 = 0;
    }
    id v156 = v158;
    if (v158)
    {
      id v155 = v156;
      id v153 = v156;
      id v179 = v156;
      id v154 = objc_msgSend(v156, sel_templateItems);
      if (v154)
      {
        id v152 = v154;
        id v149 = v154;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        uint64_t v150 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v151 = v150;
      }
      else
      {
        uint64_t v151 = 0;
      }
      uint64_t v148 = v151;
      if (v151)
      {
        uint64_t v147 = v148;
        uint64_t v144 = v148;
        uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        type metadata accessor for SASTColumnDataListItem();
        uint64_t v145 = _arrayConditionalCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        uint64_t v146 = v145;
      }
      else
      {
        uint64_t v146 = 0;
      }
      uint64_t v142 = v146;
      if (v146)
      {
        uint64_t v141 = v142;
        uint64_t v128 = v142;
        uint64_t v178 = v142;
        uint64_t v133 = v177;
        v177[0] = v142;
        unint64_t v129 = &v176;
        uint64_t v176 = v160;
        uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SASTColumnDataListItem]);
        uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
        unint64_t v132 = lazy protocol witness table accessor for type [SASTColumnDataListItem] and conformance [A]();
        lazy protocol witness table accessor for type [App] and conformance [A]();
        zip<A, B>(_:_:)();
        uint64_t v174 = v177[1];
        uint64_t v175 = v177[2];
        swift_retain();
        uint64_t v134 = &v28;
        MEMORY[0x270FA5388](&v28);
        uint64_t v135 = v24;
        uint64_t v26 = v163;
        uint64_t v27 = v6;
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Zip2Sequence<[SASTColumnDataListItem], [App]>);
        uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
        unint64_t v7 = lazy protocol witness table accessor for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>();
        uint64_t v8 = v162;
        uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v164, (uint64_t)v135, v136, v137, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v138);
        uint64_t v139 = v8;
        uint64_t v140 = result;
        if (!v8)
        {
          uint64_t v125 = v140;
          swift_release();
          outlined destroy of Zip2Sequence<[SAUIListItem], [App]>();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v153, sel_setTemplateItems_, isa);

          swift_bridgeObjectRelease();
          uint64_t result = v139;
          uint64_t v127 = v139;
          return result;
        }
        __break(1u);
        goto LABEL_70;
      }
    }
  }
  id v10 = v173;
  self;
  uint64_t v124 = swift_dynamicCastObjCClass();
  if (v124)
  {
    uint64_t v123 = (void *)v124;
  }
  else
  {
    uint64_t v122 = 0;

    uint64_t v123 = 0;
  }
  id v121 = v123;
  if (!v123) {
    goto LABEL_53;
  }
  id v120 = v121;
  id v117 = v121;
  id v185 = v121;
  uint64_t v115 = 0;
  unint64_t v116 = type metadata accessor for SFCard();
  unint64_t v118 = type metadata accessor for _SFPBCard();
  id v119 = objc_msgSend(v121, sel_cardData);
  if (v119)
  {
    id v114 = v119;
    id v109 = v119;
    uint64_t v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v111 = v11;

    uint64_t v112 = v110;
    unint64_t v113 = v111;
  }
  else
  {
    uint64_t v112 = 0;
    unint64_t v113 = 0xF000000000000000;
  }
  id v108 = _SFPBCard.__allocating_init(data:)(v112, v113);
  if (v108)
  {
    uint64_t v107 = v108;
  }
  else
  {
    v24[0] = 2;
    uint64_t v25 = 348;
    LODWORD(v26) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id v106 = SFCard.__allocating_init(protobuf:)(v107);
  if (!v106)
  {

LABEL_53:
    id v20 = v173;
    self;
    uint64_t v55 = swift_dynamicCastObjCClass();
    if (v55)
    {
      uint64_t v54 = (void *)v55;
    }
    else
    {
      uint64_t v53 = 0;

      uint64_t v54 = 0;
    }
    id v52 = v54;
    if (v54)
    {
      id v51 = v52;
      id v48 = v52;
      id v191 = v52;
      id v49 = objc_msgSend(v52, sel_items);
      if (v49)
      {
        id v47 = v49;
        id v44 = v49;
        type metadata accessor for SAUIListItem();
        uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v46 = v45;
      }
      else
      {
        uint64_t v46 = 0;
      }
      uint64_t v43 = v46;
      if (v46)
      {
        uint64_t v42 = v43;
        uint64_t v30 = v43;
        uint64_t v190 = v43;
        uint64_t v35 = v189;
        v189[0] = v43;
        uint64_t v31 = &v188;
        uint64_t v188 = v160;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAUIListItem]);
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
        unint64_t v34 = lazy protocol witness table accessor for type [SAUIListItem] and conformance [A]();
        lazy protocol witness table accessor for type [App] and conformance [A]();
        zip<A, B>(_:_:)();
        uint64_t v186 = v189[1];
        uint64_t v187 = v189[2];
        swift_retain();
        uint64_t v36 = &v28;
        MEMORY[0x270FA5388](&v28);
        uint64_t v37 = v24;
        uint64_t v26 = v171;
        uint64_t v27 = v21;
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[SAUIListItem], [App]>);
        unint64_t v39 = type metadata accessor for SAUIListItem();
        unint64_t v22 = lazy protocol witness table accessor for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>();
        uint64_t v23 = v162;
        uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v172, (uint64_t)v37, v38, v39, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v138);
        uint64_t v40 = v23;
        uint64_t v41 = result;
        if (v23) {
          goto LABEL_72;
        }
        uint64_t v28 = v41;
        swift_release();
        outlined destroy of Zip2Sequence<[SAUIListItem], [App]>();
        Class v29 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v48, sel_setItems_, v29);

        swift_bridgeObjectRelease();
        uint64_t v50 = v40;
      }
      else
      {

        uint64_t v50 = v162;
      }
    }
    else
    {
      uint64_t v50 = v162;
    }
    uint64_t v57 = v50;
LABEL_68:
    uint64_t result = v57;
    uint64_t v127 = v57;
    return result;
  }
  id v105 = v106;
  unint64_t v100 = v106;
  id v184 = v106;
  v183[1] = v160;
  swift_retain();
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  unint64_t v12 = lazy protocol witness table accessor for type [App] and conformance [A]();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v165, (uint64_t)v161, v101, v102, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v138);
  uint64_t v103 = v162;
  uint64_t v104 = result;
  if (v162)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v97 = v104;
  swift_release();
  Class v98 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v117, sel_setReferencedCommands_, v98);

  id v99 = objc_msgSend(v100, sel_cardSections);
  if (v99)
  {
    id v96 = v99;
    id v93 = v99;
    type metadata accessor for SFCardSection();
    uint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v95 = v94;
  }
  else
  {
    uint64_t v95 = 0;
  }
  uint64_t v182 = v95;
  if (!v95)
  {
    outlined destroy of [SFCardSection]();
    uint64_t v92 = v103;
LABEL_42:
    uint64_t v79 = v92;
    id v18 = v100;
    id v80 = _SFPBCard.__allocating_init(facade:)(v100);
    if (v80)
    {
      id v78 = v80;
      id v74 = v80;
      id v75 = objc_msgSend(v80, sel_data);
      if (v75)
      {
        id v73 = v75;
        id v68 = v75;
        uint64_t v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v70 = v19;

        uint64_t v71 = v69;
        unint64_t v72 = v70;
      }
      else
      {
        uint64_t v71 = 0;
        unint64_t v72 = 0xF000000000000000;
      }
      unint64_t v67 = v72;
      uint64_t v66 = v71;

      uint64_t v76 = v66;
      unint64_t v77 = v67;
    }
    else
    {
      uint64_t v76 = 0;
      unint64_t v77 = 0xF000000000000000;
    }
    unint64_t v64 = v77;
    uint64_t v65 = v76;
    if ((v77 & 0xF000000000000000) == 0xF000000000000000)
    {
      Class v61 = 0;
    }
    else
    {
      uint64_t v62 = v65;
      unint64_t v63 = v64;
      unint64_t v58 = v64;
      uint64_t v59 = v65;
      Class v60 = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v59, v58);
      Class v61 = v60;
    }
    Class v56 = v61;
    objc_msgSend(v117, sel_setCardData_);

    uint64_t v57 = v79;
    goto LABEL_68;
  }
  uint64_t v81 = &v182;
  uint64_t v82 = v182;
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  uint64_t v84 = &v181;
  uint64_t v181 = v82;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  unint64_t v13 = lazy protocol witness table accessor for type [SFCardSection] and conformance [A]();
  MEMORY[0x2611B9280](v183, v83, v13);
  outlined destroy of [SFCardSection]();
  uint64_t v180 = v183[0];
  id v14 = v117;
  uint64_t v85 = &v28;
  uint64_t v86 = 15;
  MEMORY[0x270FA5388](&v28);
  uint64_t v26 = (void *(*)(void *, uint64_t))v117;
  int v87 = v24;
  unint64_t v88 = (v86 + 32) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v24);
  uint64_t v15 = &v24[-v88];
  uint64_t v89 = v15;
  *((void *)v15 + 2) = v166;
  *((void *)v15 + 3) = v16;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[SFCardSection]>);
  lazy protocol witness table accessor for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>();
  uint64_t v17 = v103;
  uint64_t result = Sequence.forEach(_:)();
  uint64_t v91 = v17;
  if (!v17)
  {

    outlined destroy of [SFCardSection]();
    uint64_t v92 = v91;
    goto LABEL_42;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

void *closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  uint64_t v11 = App.appIdentifier.getter();
  uint64_t v12 = v2;
  if (v2)
  {
    type metadata accessor for SASTCommandTemplateAction();
    type metadata accessor for INIntent();
    id v7 = SAUIAppPunchOut.__allocating_init()();
    swift_bridgeObjectRetain();
    id v13 = SASTCommandTemplateAction.init(intent:appId:)(v7, v11, v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    _allocateUninitializedArray<A>(_:)();
    *uint64_t v3 = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(a2);
    _finalizeUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setCommands_, isa);

    id v4 = v13;
    objc_msgSend(a1, sel_setAction_, v13);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  id v5 = a1;
  return a1;
}

uint64_t thunk for @callee_guaranteed (@guaranteed SASTColumnDataListItem, @guaranteed App) -> (@owned SASTTemplateItem)@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1]);
  *a3 = result;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v82 = a3;
  uint64_t v73 = a4;
  uint64_t v36 = a5;
  uint64_t v81 = a6;
  uint64_t v38 = a8;
  unint64_t v39 = "Fatal error";
  uint64_t v40 = "Index out of bounds";
  uint64_t v41 = "Swift/Collection.swift";
  uint64_t v42 = "Range requires lowerBound <= upperBound";
  uint64_t v43 = "Swift/Range.swift";
  id v44 = "Index out of range";
  uint64_t v45 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v46 = "Swift/Sequence.swift";
  uint64_t v89 = a3;
  uint64_t v88 = a4;
  uint64_t v87 = a5;
  uint64_t v47 = *(void *)(a5 - 8);
  uint64_t v48 = a5 - 8;
  unint64_t v49 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v50 = (char *)v21 - v49;
  unint64_t v51 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v49);
  id v52 = (char *)v21 - v51;
  unint64_t v53 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v51);
  uint64_t v54 = (char *)v21 - v53;
  unint64_t v55 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v53);
  Class v56 = (char *)v21 - v55;
  uint64_t v57 = MEMORY[0x263F8D3B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = 0;
  uint64_t v58 = type metadata accessor for Optional();
  unint64_t v59 = (*(void *)(*(void *)(v58 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v74);
  Class v60 = (char *)v21 - v59;
  unint64_t v61 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v63 = (uint64_t)v21 - v61;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness - 8;
  unint64_t v66 = (*(void *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  unint64_t v67 = (char *)v21 - v66;
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v78 = v15 - 8;
  unint64_t v68 = (*(void *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v14);
  uint64_t v76 = (char *)v21 - v68;
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = v69 - 8;
  unint64_t v72 = (*(void *)(v70 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v82);
  id v80 = (char *)v21 - v72;
  Swift::Int v83 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v86 = Array.init()();
  uint64_t v75 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v83);
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v79, v82);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t result = v83;
  if (v83 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  uint64_t v32 = 0;
  for (uint64_t i = v37; ; uint64_t i = v22)
  {
    uint64_t v30 = i;
    uint64_t v31 = v32;
    if (v32 == v83) {
      goto LABEL_16;
    }
    if (v31 < 0 || v31 >= v83) {
      goto LABEL_15;
    }
    uint64_t v84 = v31;
    if (v83 < 0) {
      goto LABEL_14;
    }
    if (v31 >= v83)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      uint64_t v84 = 0;
      char v85 = 1;
      uint64_t v28 = v31;
      goto LABEL_17;
    }
    uint64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_32;
    }
    char v85 = 0;
    uint64_t v28 = v29;
LABEL_17:
    uint64_t v27 = v28;
    if (v85) {
      break;
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v60, 1, AssociatedTypeWitness) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v20 = v30;
    v34(v60, v50);
    uint64_t v22 = v20;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
      outlined destroy of ContiguousArray<A1>();
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v50, v36);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v60, AssociatedTypeWitness);
      return v21[1];
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
    uint64_t result = v22;
    uint64_t v32 = v27;
  }
  for (uint64_t j = v30; ; uint64_t j = v23)
  {
    uint64_t v25 = j;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
      outlined destroy of A.Element?(v63, AssociatedTypeWitness);
      uint64_t v24 = v86;
      swift_retain();
      swift_release();
      return v24;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v67, v63, AssociatedTypeWitness);
    uint64_t v18 = v25;
    v34(v67, v52);
    uint64_t v23 = v18;
    if (v18) {
      break;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v67, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v67, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
  outlined destroy of ContiguousArray<A1>();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v52, v36);
  return v21[1];
}

id _SFPBCard.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc _SFPBCard.init(data:)(a1, a2);
}

id SFCard.__allocating_init(protobuf:)(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SFCard.init(protobuf:)(a1);
}

id closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  id result = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(*a1);
  *a2 = result;
  return result;
}

void closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(uint64_t a1, id a2, void *a3)
{
  uint64_t v33 = a1;
  id v32 = a2;
  uint64_t v31 = a3;
  id v25 = objc_msgSend(a2, sel_commands);
  if (v25)
  {
    type metadata accessor for SFAbstractCommand();
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = (void *)v22;
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v30 = v23;
  if (v23)
  {
    swift_bridgeObjectRetain();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRetain();
    v28[1] = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SFAbstractCommand]);
    lazy protocol witness table accessor for type [SFAbstractCommand] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    id v21 = v29;
    swift_bridgeObjectRelease();
    if (v29)
    {
      v28[0] = objc_msgSend(v29, sel_value);
      if (v28[0])
      {
        id v20 = v28[0];
        id v3 = v28[0];
        outlined destroy of SFRichText?(v28);

        id v27 = objc_msgSend(v20, sel_referentialCommand);
        if (v27)
        {
          id v18 = v27;
          id v4 = v27;
          outlined destroy of SFRichText?(&v27);

          id v19 = objc_msgSend(a3, sel_referencedCommands);
          if (v19)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
            uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v17 = v16;
          }
          else
          {
            uint64_t v17 = 0;
          }
          if (!v17)
          {
            LOBYTE(v6) = 2;
            uint64_t v7 = 356;
            LODWORD(v8) = 0;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
          Array.subscript.getter();
          swift_getObjectType();
          id v15 = objc_msgSend(v26, sel_aceId);
          if (v15)
          {
            uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v12 = v5;

            uint64_t v13 = v11;
            uint64_t v14 = v12;
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v14 = 0;
          }
          if (v14)
          {
            uint64_t v9 = MEMORY[0x2611B9130](v13);
            swift_bridgeObjectRelease();
            uint64_t v10 = (void *)v9;
          }
          else
          {
            uint64_t v10 = 0;
          }
          objc_msgSend(v18, sel_setReferenceIdentifier_, v6, v7, v8);

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of SFRichText?(&v27);
        }
      }
      else
      {
        outlined destroy of SFRichText?(v28);
      }
    }
  }
  else
  {
    outlined destroy of [SFCardSection]();
  }
}

uint64_t thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(void *a1, uint64_t (*a2)(void, void))
{
  return a2(*a1, a1[1]);
}

id _SFPBCard.__allocating_init(facade:)(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc _SFPBCard.init(facade:)(a1);
}

void *closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  _allocateUninitializedArray<A>(_:)();
  *id v2 = PaymentsAppResolutionFlowStrategy.makeAppSelectionCommand(app:)(a2);
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setCommands_, isa);

  id v3 = a1;
  return a1;
}

uint64_t PaymentsAppResolutionFlowStrategy.deinit()
{
  outlined destroy of [SFCardSection]();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 32);
  __swift_destroy_boxed_opaque_existential_0(v0 + 72);
  __swift_destroy_boxed_opaque_existential_0(v0 + 112);
  swift_release();
  return v2;
}

uint64_t PaymentsAppResolutionFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.resolveApp(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1);
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F666C0](a1, a2, a3, a4);
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionUnsuccessfulResponse(reason:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F666C8](a1, a2, a3, a4);
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeErrorResponse(error:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F666D0](a1, a2, a3, a4);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.parseConfirmationResponse(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(a1);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationPrompt(app:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *id v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsAppResolutionFlowStrategy.makeConfirmationPrompt(app:)(a1, a2);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeRepromptOnEmptyParse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68038](a1, a2, a3, a4);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeRepromptOnLowConfidence(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68040](a1, a2, a3, a4);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationRejectedResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68028](a1, a2, a3, a4);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationCancelledResponse(app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68030](a1, a2, a3, a4);
}

uint64_t protocol witness for AppConfirmationStrategyAsync.makeConfirmationErrorResponse(error:app:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *uint64_t v6 = *(void *)(v8 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68020](a1, a2, a3, a4, a5);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.parseDisambiguationResponse(input:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1)
{
  return PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(a1);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationPrompt(apps:) in conformance PaymentsAppResolutionFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *id v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(a1, a2);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeRepromptOnEmptyParse(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68100](a1, a2, a3, a4);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeRepromptOnLowConfidence(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68108](a1, a2, a3, a4);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationCancelResponse(apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F680F8](a1, a2, a3, a4);
}

uint64_t protocol witness for AppDisambiguationStrategyAsync.makeDisambiguationErrorResponse(error:apps:) in conformance PaymentsAppResolutionFlowStrategy<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *uint64_t v6 = *(void *)(v8 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F680F0](a1, a2, a3, a4, a5);
}

id @nonobjc _SFPBCard.init(data:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) == 0xF000000000000000)
  {
    Class v5 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    Class v5 = isa;
  }
  id v3 = objc_msgSend(v8, sel_initWithData_);

  return v3;
}

id @nonobjc SFCard.init(protobuf:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithProtobuf_);

  return v4;
}

id @nonobjc _SFPBCard.init(facade:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithFacade_);

  return v4;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  v7[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = a3 - 8;
  v7[0] = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v4 = (void (*)(void))MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v7 - v7[0];
  v4();
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v5;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_25D8B18BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B18E8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1914()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1954()
{
  return swift_deallocObject();
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

uint64_t sub_25D8B19F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1A38()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1A64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(uint64_t a1)
{
  return closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1, v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[2]);
}

void *outlined init with copy of AppResolutionResult.AppResolutionResultError?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of AppResolutionResult.AppResolutionResultError?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t partial apply for implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)@<X0>(void *a1@<X8>)
{
  return implicit closure #4 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(v1, a1);
}

uint64_t sub_25D8B1CD8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [App]);
  unint64_t v1 = lazy protocol witness table accessor for type [App] and conformance [A]();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [App] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [App] and conformance [A];
  if (!lazy protocol witness table cache variable for type [App] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [App]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [App] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D8B1DFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1E28()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1E54()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1E94()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1F58()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #7 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t partial apply for implicit closure #8 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return implicit closure #6 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_25D8B1FB4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B1FE0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B200C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B204C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B208C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B20CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B20F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2124()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2164()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B21A4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B21D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B21FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B223C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B227C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B22A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B22D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2314()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2354()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2394()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B23C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B23EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B242C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B246C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B24A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B24D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2500()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2540()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2580()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_25D8B25C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B25F4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2620()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2660()
{
  return swift_deallocObject();
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_25D8B26BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B26F8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Input() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Input() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseConfirmationResponse(input:)(v2);
}

uint64_t sub_25D8B282C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2858()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2884()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B28C4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2904()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2944()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2970()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B299C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B29DC()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of ConfirmationResponse?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ConfirmationResponse();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *outlined init with copy of ConfirmationResponse?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for ConfirmationResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_25D8B2BF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2C34()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2C60()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2C8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2CCC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2D0C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #2 in PaymentsAppResolutionFlowStrategy.parseDisambiguationResponse(input:)(v2);
}

uint64_t sub_25D8B2E40()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2E6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2E98()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2ED8()
{
  return swift_deallocObject();
}

uint64_t outlined consume of PaymentsDirectInvocations(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1 || a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25D8B2F80()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2FC0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B2FEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3018()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3058()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3098()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B30D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3100()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B312C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B316C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B31AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(uint64_t a1)
{
  return closure #1 in PaymentsAppResolutionFlowStrategy.makeModernizedDisambiguationView(sortedApps:disambiguationList:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in PaymentsAppResolutionFlowStrategy.makeDisambiguationPrompt(apps:)(a1, a2, v2) & 1;
}

unint64_t type metadata accessor for SAUIAssistantUtteranceView()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIAssistantUtteranceView;
  if (!lazy cache variable for type metadata for SAUIAssistantUtteranceView)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIAssistantUtteranceView);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for implicit closure #3 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)@<X0>(void *a1@<X8>)
{
  return implicit closure #1 in PaymentsAppResolutionFlowStrategy.filterOutHiddenApps(apps:)(v1, a1);
}

uint64_t sub_25D8B3310()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for App();
  unint64_t v1 = lazy protocol witness table accessor for type App and conformance App();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
  unint64_t v1 = lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for RRCandidate();
  unint64_t v1 = lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type App and conformance App()
{
  uint64_t v2 = lazy protocol witness table cache variable for type App and conformance App;
  if (!lazy protocol witness table cache variable for type App and conformance App)
  {
    type metadata accessor for App();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type App and conformance App);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D8B3430()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B345C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3488()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B34C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3508()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3548()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3574()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B35A0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B35E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3620()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B3660()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B368C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B36B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B36F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(id *a1)
{
  return closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, *(unsigned char *)(v1 + 16) & 1, *(void *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SAAceView] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAAceView] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAAceView]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SAAceView] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata instantiation function for PaymentsAppResolutionFlowStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsAppResolutionFlowStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PaymentsAppResolutionFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for AppConfirmationStrategyAsync in PaymentsAppResolutionFlowStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for AppDisambiguationStrategyAsync in PaymentsAppResolutionFlowStrategy<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type [SAUIListItem] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SAUIListItem]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SAUIListItem] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void *partial apply for closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  return closure #4 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed SAUIListItem, @guaranteed App) -> (@owned SAUIListItem)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return thunk for @callee_guaranteed (@guaranteed SASTColumnDataListItem, @guaranteed App) -> (@owned SASTTemplateItem)(a1, *(uint64_t (**)(void, void))(v2 + 16), a2);
}

unint64_t type metadata accessor for SAUIListItem()
{
  uint64_t v2 = lazy cache variable for type metadata for SAUIListItem;
  if (!lazy cache variable for type metadata for SAUIListItem)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SAUIListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<[SAUIListItem], [App]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[SAUIListItem], [App]> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Zip2Sequence<[SAUIListItem], [App]>()
{
}

unint64_t type metadata accessor for SFCard()
{
  uint64_t v2 = lazy cache variable for type metadata for SFCard;
  if (!lazy cache variable for type metadata for SFCard)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SFCard);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for _SFPBCard()
{
  uint64_t v2 = lazy cache variable for type metadata for _SFPBCard;
  if (!lazy cache variable for type metadata for _SFPBCard)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for _SFPBCard);
    return ObjCClassMetadata;
  }
  return v2;
}

id partial apply for closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #2 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type [SFCardSection] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SFCardSection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SFCardSection] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SFCardSection] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void partial apply for closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(uint64_t a1, void *a2)
{
  closure #3 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(void *a1)
{
  return thunk for @callee_guaranteed (@unowned Int, @guaranteed SFCardSection) -> ()(a1, *(uint64_t (**)(void, void))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>;
  if (!lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for EnumeratedSequence<[SFCardSection]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type EnumeratedSequence<[SFCardSection]> and conformance EnumeratedSequence<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [SASTColumnDataListItem] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SASTColumnDataListItem]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SASTColumnDataListItem] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void *partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(void *a1, uint64_t a2)
{
  return closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.updateSelectionCommand(aceViews:apps:isWatch:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Zip2Sequence<[SASTColumnDataListItem], [App]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[SASTColumnDataListItem], [App]> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for INIntent()
{
  uint64_t v2 = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INIntent);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [SFAbstractCommand] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SFAbstractCommand]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [SFAbstractCommand] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of A.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
    return WitnessTable;
  }
  return v2;
}

void *outlined init with copy of [App](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

uint64_t sub_25D8B40FC()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v4 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v4);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(id *a1)
{
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + ((v2 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)(a1, v3, v4, v1 + v2, v5);
}

void *outlined init with copy of Result<AppResolutionResult, Error>(id *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AppResolutionResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v5 = *a1;
    id v3 = *a1;
    *a2 = v5;
  }
  else
  {
    uint64_t v2 = type metadata accessor for AppResolutionResult();
    (*(void (**)(void *, id *))(*(void *)(v2 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t sub_25D8B4398()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B43D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B4404()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B4430()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B4470()
{
  return swift_deallocObject();
}

void *outlined assign with take of AppResolutionResult.AppResolutionResultError?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for AppResolutionResult.AppResolutionResultError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolutionResult.AppResolutionResultError?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t sub_25D8B46E0()
{
  uint64_t v2 = *(void *)(type metadata accessor for AppResolutionResult.AppResolutionResultError() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)()
{
  type metadata accessor for AppResolutionResult.AppResolutionResultError();

  return implicit closure #2 in closure #1 in closure #1 in PaymentsAppResolutionFlowStrategy.resolveApp(input:)();
}

uint64_t sub_25D8B4814()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B4840()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B486C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8B48AC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError;
  if (!lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError)
  {
    type metadata accessor for AppResolutionResult.AppResolutionResultError();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AppResolutionResult.AppResolutionResultError and conformance AppResolutionResult.AppResolutionResultError);
    return WitnessTable;
  }
  return v2;
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsUnsupportedIntentCATs.disabledSurfIntent(), 0);
}

uint64_t PaymentsUnsupportedIntentCATs.disabledSurfIntent()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#DisabledSurfIntent", 0x2CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsUnsupportedIntentCATs.disabledSurfIntent(), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#DisabledSurfIntent", 0x2CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsUnsupportedIntentCATs.unsupportedSurfIntent(), 0);
}

uint64_t PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsUnsupportedIntentCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsUnsupportedIntentCATs;
  if (!type metadata singleton initialization cache for PaymentsUnsupportedIntentCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for PaymentsUnsupportedIntentCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t PaymentsUnsupportedIntentCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PaymentsUnsupportedIntentCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t PaymentsUnsupportedIntentCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  uint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t PaymentsUnsupportedIntentCATs.deinit()
{
  return CATWrapper.deinit();
}

uint64_t PaymentsUnsupportedIntentCATs.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PaymentsUnsupportedIntentCATs()
{
  return type metadata accessor for PaymentsUnsupportedIntentCATs();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemOffered:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  unint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(systemPrompted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  unint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

uint64_t Siri_Nlu_External_SystemDialogAct.init(gaveOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  unint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

uint64_t Siri_Nlu_External_SystemPrompted.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v24 = a1;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  unint64_t v10 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)&v8 - v10;
  uint64_t v11 = 0;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v25 = *(void *)(v27 - 8);
  uint64_t v26 = v27 - 8;
  unint64_t v12 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v8 - v12;
  unint64_t v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v15 = (char *)&v8 - v14;
  uint64_t v31 = (char *)&v8 - v14;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  uint64_t v19 = *(void *)(v23 - 8);
  uint64_t v20 = v23 - 8;
  uint64_t v17 = *(void *)(v19 + 64);
  unint64_t v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v24);
  uint64_t v22 = (char *)&v8 - v16;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v21 = (char *)&v8 - v18;
  uint64_t v30 = (char *)&v8 - v18;
  uint64_t v29 = v6;
  Siri_Nlu_External_SystemPrompted.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v22, v23);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v24, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v28, 1, v27) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v15, v28, v27);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v13, v15, v27);
    Siri_Nlu_External_SystemPrompted.target.setter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v27);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v21, v23);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v23);
}

void *outlined init with copy of Siri_Nlu_External_UsoGraph?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UsoGraph?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v18 = a1;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  unint64_t v13 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v21 = (uint64_t)&v11 - v13;
  unint64_t v14 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v18);
  uint64_t v15 = (char *)&v11 - v14;
  unint64_t v16 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v23 = (char *)&v11 - v16;
  uint64_t v28 = (char *)&v11 - v16;
  uint64_t v27 = v5;
  uint64_t v25 = 0;
  uint64_t v20 = type metadata accessor for UsoTaskBuilder();
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v19 = v6;
  swift_retain();
  uint64_t v7 = v17;
  void *v19 = v18;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v22 = v7;
  uint64_t v8 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v21, 1);
  uint64_t v24 = MEMORY[0x2611B8090](v22, v21);
  outlined destroy of UsoBuilderOptions?(v21);
  swift_bridgeObjectRelease();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v26 = 0;
  swift_release();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, void, uint64_t))(*(void *)(v9 - 8) + 56))(v23, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v15);
  Siri_Nlu_External_SystemPrompted.init(_:)(v15, v12);
  return outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
}

uint64_t Siri_Nlu_External_SystemOffered.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  uint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_SystemOffered.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

uint64_t static Siri_Nlu_External_SystemOffered.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v9 = a1;
  uint64_t v15 = 0;
  v5[1] = 0;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v7 = v8 - 8;
  unint64_t v6 = (*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (uint64_t)v5 - v6;
  unint64_t v10 = (*(void *)(*(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t)v5 - v10;
  uint64_t v15 = v3;
  (*(void (**)(uint64_t))(v11 + 16))(v2);
  Siri_Nlu_External_UserDialogAct.init(_:)(v12, v14);
  return Siri_Nlu_External_SystemOffered.init(_:)(v14, v13);
}

uint64_t Siri_Nlu_External_UserDialogAct.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  uint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  uint64_t v13 = a2;
  uint64_t v17 = a1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  uint64_t v9 = *(void *)(v18 + 64);
  unint64_t v8 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v17);
  uint64_t v11 = (char *)&v6 - v8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v10;
  uint64_t v20 = (char *)&v6 - v10;
  uint64_t v23 = (char *)&v6 - v10;
  uint64_t v22 = v3;
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v17, v16);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v13, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v21);
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v10 = a1;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v12 = *(void *)(v14 - 8);
  uint64_t v13 = v14 - 8;
  uint64_t v7 = *(void *)(v12 + 64);
  unint64_t v6 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v10);
  uint64_t v9 = (char *)&v6 - v6;
  unint64_t v8 = v6;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v6 - v8;
  uint64_t v15 = (char *)&v6 - v8;
  uint64_t v17 = (char *)&v6 - v8;
  uint64_t v16 = v3;
  Siri_Nlu_External_SystemGaveOptions.init()();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v4, v9, v14);
  MEMORY[0x2611B7F10](v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v11, v15, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v14);
}

uint64_t Siri_Nlu_External_UserStatedTask.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v24 = a1;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  unint64_t v10 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)&v8 - v10;
  uint64_t v11 = 0;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v25 = *(void *)(v27 - 8);
  uint64_t v26 = v27 - 8;
  unint64_t v12 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v8 - v12;
  unint64_t v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v15 = (char *)&v8 - v14;
  uint64_t v31 = (char *)&v8 - v14;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v19 = *(void *)(v23 - 8);
  uint64_t v20 = v23 - 8;
  uint64_t v17 = *(void *)(v19 + 64);
  unint64_t v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v24);
  uint64_t v22 = (char *)&v8 - v16;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v21 = (char *)&v8 - v18;
  uint64_t v30 = (char *)&v8 - v18;
  uint64_t v29 = v6;
  Siri_Nlu_External_UserStatedTask.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v22, v23);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v24, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v28, 1, v27) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v15, v28, v27);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v13, v15, v27);
    Siri_Nlu_External_UserStatedTask.task.setter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v27);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v21, v23);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v23);
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = a2;
  uint64_t v16 = a1;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  unint64_t v11 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  unint64_t v12 = (char *)&v10 - v11;
  unint64_t v13 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v10 - v11);
  uint64_t v21 = (char *)&v10 - v13;
  uint64_t v27 = (char *)&v10 - v13;
  unint64_t v14 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (uint64_t)&v10 - v14;
  uint64_t v26 = v4;
  uint64_t v23 = 0;
  uint64_t v18 = type metadata accessor for UsoTaskBuilder();
  uint64_t v15 = _allocateUninitializedArray<A>(_:)();
  uint64_t v17 = v5;
  swift_retain();
  uint64_t v6 = v15;
  *uint64_t v17 = v16;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  uint64_t v7 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v19, 1);
  uint64_t v22 = MEMORY[0x2611B8090](v20, v19);
  outlined destroy of UsoBuilderOptions?(v19);
  swift_bridgeObjectRelease();
  uint64_t v25 = v22;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v24 = 0;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, void, uint64_t))(*(void *)(v8 - 8) + 56))(v21, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v21, v12);
  Siri_Nlu_External_UserStatedTask.init(_:)(v12, v10);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v21);
  return swift_release();
}

uint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTask]);
  lazy protocol witness table accessor for type [UsoTask] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t lazy protocol witness table accessor for type [UsoTask] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [UsoTask] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoTask] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoTask]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UsoTask] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  uint64_t v13 = 0;
  uint64_t v29 = closure #1 in Siri_Nlu_External_UserDialogAct.contactId.getter;
  uint64_t v31 = 0;
  uint64_t v27 = 0;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v21 = *(void *)(v23 - 8);
  uint64_t v22 = v23 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v24 = (char *)&v4 - v14;
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v17 = *(void *)(v20 - 8);
  uint64_t v18 = v20 - 8;
  unint64_t v15 = (*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20);
  uint64_t v19 = (char *)&v4 - v15;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  unint64_t v16 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v26 = (uint64_t)&v4 - v16;
  uint64_t v31 = v0;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v20);
  uint64_t v25 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v23);
  uint64_t v30 = v25;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UsoEntityIdentifier]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]();
  Sequence.first(where:)();
  outlined destroy of [SFCardSection]();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v10 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(v26, 1) == 1)
  {
    uint64_t v5 = 0;
    outlined destroy of Siri_Nlu_External_UsoEntityIdentifier?(v26);
    uint64_t v8 = v5;
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v6 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    uint64_t v7 = v2;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v26, v10);
    uint64_t v8 = v6;
    uint64_t v9 = v7;
  }
  return v8;
}

uint64_t closure #1 in Siri_Nlu_External_UserDialogAct.contactId.getter(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v31 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v15 - 8;
  unint64_t v18 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v19 = &v7[-v18];
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v25 = *(void *)(v29 - 8);
  uint64_t v26 = v29 - 8;
  unint64_t v20 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v29);
  uint64_t v27 = &v7[-v20];
  uint64_t v31 = a1;
  uint64_t v21 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
  uint64_t v24 = v2;
  uint64_t v3 = AppUtil.usoContactsBundleId.unsafeMutableAddressor();
  uint64_t v22 = *(void *)v3;
  uint64_t v23 = *((void *)v3 + 1);
  swift_bridgeObjectRetain();
  int v30 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 16))(v27, v28, v29);
  if (v30)
  {
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v9 = Google_Protobuf_StringValue.value.getter();
    uint64_t v11 = v4;
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v19, v15);
    UsoIdentifierNamespace.rawValue.getter(0);
    uint64_t v10 = v5;
    int v12 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v13 = v12;
  }
  else
  {
    int v13 = 0;
  }
  int v8 = v13;
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v27, v29);
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UsoEntityIdentifier]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UsoEntityIdentifier] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of Siri_Nlu_External_UsoEntityIdentifier?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t Siri_Nlu_External_UserDialogAct.appId.getter()
{
  uint64_t v52 = v0;
  if (Siri_Nlu_External_UserDialogAct.usoTask.getter())
  {
    UsoTask.eraseToAny.getter();
    swift_release();
  }
  else
  {
    memset(v49, 0, sizeof(v49));
    uint64_t v50 = 0;
  }
  if (!v50)
  {
    outlined destroy of FlowActivity?((uint64_t)v49);
    return 0;
  }
  outlined init with take of Any((uint64_t)v49, (uint64_t)v51);
  outlined init with copy of Any((uint64_t)v51, (uint64_t)v48);
  type metadata accessor for UsoTask_noVerb_common_Payment();
  if ((swift_dynamicCast() & 1) == 0)
  {
    type metadata accessor for UsoTask_pay_common_Payment();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      swift_release();
      if (v39)
      {
        uint64_t v23 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        uint64_t v24 = v23;
      }
      else
      {
        uint64_t v24 = 0;
      }
      swift_retain();
      if (v24)
      {
        uint64_t v40 = v24;
      }
      else
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Target.target.getter();
        swift_release();
        if (v38 && (uint64_t v22 = dispatch thunk of UsoEntity_common_Payment.payer.getter(), swift_release(), v22))
        {
          uint64_t v20 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
          swift_release();
          uint64_t v21 = v20;
        }
        else
        {
          uint64_t v21 = 0;
        }
        swift_retain();
        if (v21)
        {
          uint64_t v40 = v21;
        }
        else
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_Target.target.getter();
          swift_release();
          if (v37 && (uint64_t v19 = dispatch thunk of UsoEntity_common_Payment.payee.getter(), swift_release(), v19))
          {
            uint64_t v40 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
          }
          else
          {
            uint64_t v40 = 0;
          }
          outlined destroy of ContiguousArray<A1>();
        }
        swift_release();
        outlined destroy of ContiguousArray<A1>();
      }
      swift_release();
      if (v40)
      {
        uint64_t v18 = UsoEntity_common_App.appIdentifier.getter();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
        return v18;
      }
    }
    else
    {
      type metadata accessor for UsoTask_requestMoney_common_Payment();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Target.target.getter();
        swift_release();
        if (v43)
        {
          uint64_t v16 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
          swift_release();
          uint64_t v17 = v16;
        }
        else
        {
          uint64_t v17 = 0;
        }
        swift_retain();
        if (v17)
        {
          uint64_t v44 = v17;
        }
        else
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_Target.target.getter();
          swift_release();
          if (v42 && (uint64_t v15 = dispatch thunk of UsoEntity_common_Payment.payee.getter(), swift_release(), v15))
          {
            uint64_t v13 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
            uint64_t v14 = v13;
          }
          else
          {
            uint64_t v14 = 0;
          }
          swift_retain();
          if (v14)
          {
            uint64_t v44 = v14;
          }
          else
          {
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_Target.target.getter();
            swift_release();
            if (v41 && (uint64_t v12 = dispatch thunk of UsoEntity_common_Payment.payer.getter(), swift_release(), v12))
            {
              uint64_t v44 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
            }
            else
            {
              uint64_t v44 = 0;
            }
            outlined destroy of ContiguousArray<A1>();
          }
          swift_release();
          outlined destroy of ContiguousArray<A1>();
        }
        swift_release();
        if (v44)
        {
          uint64_t v11 = UsoEntity_common_App.appIdentifier.getter();
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
          return v11;
        }
      }
      else
      {
        type metadata accessor for UsoTask_request_common_PaymentAccount();
        if (swift_dynamicCast())
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
          swift_release();
          if (v45)
          {
            uint64_t v9 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
            swift_release();
            uint64_t v10 = v9;
          }
          else
          {
            uint64_t v10 = 0;
          }
          if (v10)
          {
            uint64_t v8 = UsoEntity_common_App.appIdentifier.getter();
            swift_release();
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
            return v8;
          }
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_PaymentAccount();
          if (swift_dynamicCast())
          {
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
            swift_release();
            if (v46)
            {
              uint64_t v6 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
              uint64_t v7 = v6;
            }
            else
            {
              uint64_t v7 = 0;
            }
            if (v7)
            {
              uint64_t v5 = UsoEntity_common_App.appIdentifier.getter();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
              return v5;
            }
          }
          else
          {
            type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
            if ((swift_dynamicCast() & 1) == 0)
            {
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
              goto LABEL_104;
            }
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
            swift_release();
            if (v47)
            {
              uint64_t v3 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
              swift_release();
              uint64_t v4 = v3;
            }
            else
            {
              uint64_t v4 = 0;
            }
            if (v4)
            {
              uint64_t v2 = UsoEntity_common_App.appIdentifier.getter();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
              return v2;
            }
          }
        }
      }
    }
LABEL_102:
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
LABEL_104:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
    return 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (v35)
  {
    uint64_t v31 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v32 = v31;
  }
  else
  {
    uint64_t v32 = 0;
  }
  swift_retain();
  if (v32)
  {
    uint64_t v36 = v32;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v34 && (uint64_t v30 = dispatch thunk of UsoEntity_common_Payment.payer.getter(), swift_release(), v30))
    {
      uint64_t v28 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      uint64_t v29 = v28;
    }
    else
    {
      uint64_t v29 = 0;
    }
    swift_retain();
    if (v29)
    {
      uint64_t v36 = v29;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      if (v33 && (uint64_t v27 = dispatch thunk of UsoEntity_common_Payment.payee.getter(), swift_release(), v27))
      {
        uint64_t v36 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        uint64_t v36 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  if (!v36) {
    goto LABEL_102;
  }
  uint64_t v25 = UsoEntity_common_App.appIdentifier.getter();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  return v25;
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v24 = a1;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  unint64_t v10 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)&v8 - v10;
  uint64_t v11 = 0;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v25 = *(void *)(v27 - 8);
  uint64_t v26 = v27 - 8;
  unint64_t v12 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v8 - v12;
  unint64_t v14 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v15 = (char *)&v8 - v14;
  uint64_t v31 = (char *)&v8 - v14;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v19 = *(void *)(v23 - 8);
  uint64_t v20 = v23 - 8;
  uint64_t v17 = *(void *)(v19 + 64);
  unint64_t v16 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v24);
  uint64_t v22 = (char *)&v8 - v16;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v21 = (char *)&v8 - v18;
  uint64_t v30 = (char *)&v8 - v18;
  uint64_t v29 = v6;
  Siri_Nlu_External_UserWantedToProceed.init()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v22, v23);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v24, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v28, 1, v27) == 1)
  {
    outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v15, v28, v27);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v13, v15, v27);
    Siri_Nlu_External_UserWantedToProceed.reference.setter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v27);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v9, v21, v23);
  outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v23);
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v18 = a1;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  unint64_t v13 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v21 = (uint64_t)&v11 - v13;
  unint64_t v14 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v18);
  uint64_t v15 = (char *)&v11 - v14;
  unint64_t v16 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v23 = (char *)&v11 - v16;
  uint64_t v28 = (char *)&v11 - v16;
  uint64_t v27 = v5;
  uint64_t v25 = 0;
  uint64_t v20 = type metadata accessor for UsoTaskBuilder();
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v19 = v6;
  swift_retain();
  uint64_t v7 = v17;
  void *v19 = v18;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v22 = v7;
  uint64_t v8 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v21, 1);
  uint64_t v24 = MEMORY[0x2611B8090](v22, v21);
  outlined destroy of UsoBuilderOptions?(v21);
  swift_bridgeObjectRelease();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v26 = 0;
  swift_release();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  (*(void (**)(char *, void, uint64_t))(*(void *)(v9 - 8) + 56))(v23, 0, 1);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v23, v15);
  Siri_Nlu_External_UserWantedToProceed.init(_:)(v15, v12);
  return outlined destroy of Siri_Nlu_External_UsoGraph?((uint64_t)v23);
}

const char *Features.domain.getter()
{
  return "SiriPayments";
}

const char *Features.feature.getter(char a1)
{
  if (a1) {
    return "NLXFuture";
  }
  else {
    return "NLX";
  }
}

BOOL static Features.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t Features.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t Features.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type Features and conformance Features()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
    return WitnessTable;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Features(unsigned char *a1, unsigned char *a2)
{
  return static Features.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Features()
{
  return Features.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Features()
{
  return Features.hash(into:)();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Features()
{
  return Features.domain.getter();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Features()
{
  return Features.feature.getter(*v0 & 1);
}

uint64_t SiriPaymentsFeatureManager.isNLXEnabled.getter()
{
  uint64_t v3 = &type metadata for Features;
  unint64_t v4 = lazy protocol witness table accessor for type Features and conformance Features();
  v2[0] = 0;
  char v1 = SiriPaymentsFeatureManager.logAndReturn(flag:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v1 & 1;
}

uint64_t SiriPaymentsFeatureManager.logAndReturn(flag:)(uint64_t a1)
{
  uint64_t v54 = a1;
  uint64_t v63 = partial apply for implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  uint64_t v65 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v67 = partial apply for implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  uint64_t v69 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v74 = partial apply for implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:);
  uint64_t v78 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v113 = 0;
  char v112 = 0;
  uint64_t v47 = 0;
  uint64_t v52 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v52 - 8);
  uint64_t v51 = v52 - 8;
  unint64_t v48 = (*(void *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  char v1 = (char *)v37 - v48;
  unint64_t v49 = (char *)v37 - v48;
  uint64_t v113 = MEMORY[0x270FA5388](v54);
  int v58 = isFeatureEnabled(_:)();
  int v57 = 1;
  char v112 = v58 & 1;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v1, v2, v52);
  unint64_t v53 = v111;
  outlined init with copy of GlobalsProviding(v54, (uint64_t)v111);
  uint64_t v55 = 56;
  uint64_t v76 = 7;
  uint64_t v64 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v53, (void *)(v64 + 16));
  Class v56 = v110;
  outlined init with copy of GlobalsProviding(v54, (uint64_t)v110);
  uint64_t v68 = swift_allocObject();
  outlined init with take of CommonLabelsProviding(v56, (void *)(v68 + 16));
  uint64_t v72 = 17;
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = v58 & v57;
  uint64_t v101 = Logger.logObject.getter();
  int v102 = static os_log_type_t.default.getter();
  unint64_t v61 = &v108;
  uint64_t v75 = 32;
  uint64_t v108 = 32;
  unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v62 = v109;
  uint64_t v81 = swift_allocObject();
  int v71 = 32;
  *(unsigned char *)(v81 + 16) = 32;
  uint64_t v83 = swift_allocObject();
  int v73 = 8;
  *(unsigned char *)(v83 + 16) = 8;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v64;
  uint64_t v66 = v3;
  *(void *)(v3 + 16) = v63;
  *(void *)(v3 + 24) = v4;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v66;
  uint64_t v85 = v5;
  *(void *)(v5 + 16) = v65;
  *(void *)(v5 + 24) = v6;
  uint64_t v87 = swift_allocObject();
  *(unsigned char *)(v87 + 16) = v71;
  uint64_t v89 = swift_allocObject();
  *(unsigned char *)(v89 + 16) = v73;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v68;
  uint64_t v70 = v7;
  *(void *)(v7 + 16) = v67;
  *(void *)(v7 + 24) = v8;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v70;
  uint64_t v91 = v9;
  *(void *)(v9 + 16) = v69;
  *(void *)(v9 + 24) = v10;
  uint64_t v93 = swift_allocObject();
  *(unsigned char *)(v93 + 16) = v71;
  uint64_t v95 = swift_allocObject();
  *(unsigned char *)(v95 + 16) = v73;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v77;
  uint64_t v79 = v11;
  *(void *)(v11 + 16) = v74;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v79;
  uint64_t v98 = v13;
  *(void *)(v13 + 16) = v78;
  *(void *)(v13 + 24) = v14;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v96 = _allocateUninitializedArray<A>(_:)();
  id v99 = v15;
  swift_retain();
  uint64_t v16 = v81;
  uint64_t v17 = v99;
  *id v99 = v80;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v83;
  uint64_t v19 = v99;
  v99[2] = v82;
  v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v85;
  uint64_t v21 = v99;
  v99[4] = v84;
  v21[5] = v20;
  swift_retain();
  uint64_t v22 = v87;
  uint64_t v23 = v99;
  v99[6] = v86;
  v23[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
  swift_retain();
  uint64_t v24 = v89;
  uint64_t v25 = v99;
  v99[8] = v88;
  v25[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  swift_retain();
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
  uint64_t v27 = v99;
  v99[10] = v90;
  v27[11] = v26;
  swift_retain();
  uint64_t v28 = v93;
  uint64_t v29 = v99;
  v99[12] = v92;
  v29[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
  swift_retain();
  uint64_t v30 = v95;
  uint64_t v31 = v99;
  v99[14] = v94;
  v31[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30;
  swift_retain();
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
  uint64_t v33 = v99;
  v99[16] = v97;
  v33[17] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, (os_log_type_t)v102))
  {
    uint64_t v34 = v47;
    uint64_t v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v41 = createStorage<A>(capacity:type:)(0);
    uint64_t v42 = createStorage<A>(capacity:type:)(3);
    uint64_t v43 = &v107;
    uint64_t v107 = v40;
    uint64_t v44 = &v106;
    uint64_t v106 = v41;
    uint64_t v45 = &v105;
    uint64_t v105 = v42;
    serialize(_:at:)(2, &v107);
    serialize(_:at:)(3, v43);
    uint64_t v103 = v80;
    uint64_t v104 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
    uint64_t v46 = v34;
    if (v34)
    {
      __break(1u);
    }
    else
    {
      uint64_t v103 = v82;
      uint64_t v104 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      uint64_t v38 = 0;
      uint64_t v35 = v38;
      uint64_t v103 = v84;
      uint64_t v104 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[5] = v35;
      uint64_t v103 = v86;
      uint64_t v104 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[4] = 0;
      uint64_t v103 = v88;
      uint64_t v104 = v89;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[3] = 0;
      uint64_t v103 = v90;
      uint64_t v104 = v91;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[2] = 0;
      uint64_t v103 = v92;
      uint64_t v104 = v93;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[1] = 0;
      uint64_t v103 = v94;
      uint64_t v104 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      v37[0] = 0;
      uint64_t v103 = v97;
      uint64_t v104 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v107, (uint64_t)&v106, (uint64_t)&v105);
      _os_log_impl(&dword_25D85A000, v101, (os_log_type_t)v102, "FeatureFlag: %s/%s=%s", v40, v62);
      destroyStorage<A>(_:count:)(v41, 0, v39);
      destroyStorage<A>(_:count:)(v42, 3, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v40, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v52);
  return v58 & 1;
}

uint64_t SiriPaymentsFeatureManager.isNLXFutureEnabled.getter()
{
  uint64_t v3 = &type metadata for Features;
  unint64_t v4 = lazy protocol witness table accessor for type Features and conformance Features();
  v2[0] = 1;
  char v1 = SiriPaymentsFeatureManager.logAndReturn(flag:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v1 & 1;
}

uint64_t implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t sub_25D8BA578()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  return implicit closure #1 in SiriPaymentsFeatureManager.logAndReturn(flag:)((void *)(v0 + 16));
}

uint64_t implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t sub_25D8BA630()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  return implicit closure #2 in SiriPaymentsFeatureManager.logAndReturn(flag:)((void *)(v0 + 16));
}

uint64_t implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("on", 2uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("off", 3uLL, 1)._countAndFlagsBits;
  }
}

uint64_t sub_25D8BA6F4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)()
{
  return implicit closure #3 in SiriPaymentsFeatureManager.logAndReturn(flag:)(*(unsigned char *)(v0 + 16) & 1);
}

uint64_t protocol witness for SiriPaymentsFeatureManaging.isNLXEnabled.getter in conformance SiriPaymentsFeatureManager()
{
  return SiriPaymentsFeatureManager.isNLXEnabled.getter() & 1;
}

uint64_t protocol witness for SiriPaymentsFeatureManaging.isNLXFutureEnabled.getter in conformance SiriPaymentsFeatureManager()
{
  return SiriPaymentsFeatureManager.isNLXFutureEnabled.getter() & 1;
}

uint64_t sub_25D8BA764()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA790()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA7BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA7FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA83C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA868()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA894()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA8D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA914()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA940()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA96C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8BA9AC()
{
  return swift_deallocObject();
}

unint64_t base witness table accessor for Equatable in Features()
{
  return lazy protocol witness table accessor for type Features and conformance Features();
}

uint64_t getEnumTagSinglePayload for Features(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFE) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 1) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 2;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Features(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFE)
  {
    unsigned int v5 = ((a3 + 1) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFE)
  {
    unsigned int v4 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsUnsupportedIntent#UnsupportedSurfIntent", 0x2FuLL, 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for Features(unsigned char *a1)
{
  return *a1 & 1;
}

unsigned char *destructiveInjectEnumTag for Features(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Features()
{
  return &type metadata for Features;
}

ValueMetadata *type metadata accessor for SiriPaymentsFeatureManager()
{
  return &type metadata for SiriPaymentsFeatureManager;
}

uint64_t AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:), 0);
}

uint64_t AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  *(void *)(v0 + 16) = v0;
  String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  void v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return MEMORY[0x270FA2498](AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0);
}

uint64_t AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  *(void *)(v0 + 16) = v0;
  String.NOT_YET_IMPLEMENTED.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t AmountUnsupportedStrategy.deinit()
{
  return v0;
}

uint64_t AmountUnsupportedStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AmountUnsupportedStrategy.__allocating_init()()
{
  return AmountUnsupportedStrategy.deinit();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return AmountUnsupportedStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return AmountUnsupportedStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance AmountUnsupportedStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for AmountUnsupportedStrategy();
  void *v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F664F0](a1, a2, v6, a4);
}

uint64_t type metadata accessor for AmountUnsupportedStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AmountUnsupportedStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  v2[6] = v1;
  v2[5] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return MEMORY[0x270FA2498](RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:), 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v2;
  *(void *)(v6 + 16) = *v2;
  *(void *)(v6 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v3 = *(uint64_t (**)(uint64_t))(*(void *)(v6 + 16) + 8);
    return v3(a1);
  }
}

uint64_t RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)()
{
  uint64_t v10 = v0[5];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  v0[7] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v9 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v7 = v8[5];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[8] = v5;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x263F6D0C8] + (int)*MEMORY[0x263F6D0C8]);
  int v3 = (void *)swift_task_alloc();
  v8[9] = v3;
  *int v3 = v8[2];
  v3[1] = RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:);
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)())(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t RequestPaymentCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return RequestPaymentCATsModern.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t RequestPaymentCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  uint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapperSimple.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t RequestPaymentCATsModern.__allocating_init(useResponseMode:options:)(char a1, uint64_t a2)
{
  return RequestPaymentCATsModern.init(useResponseMode:options:)(a1 & 1, a2);
}

uint64_t RequestPaymentCATsModern.init(useResponseMode:options:)(int a1, uint64_t a2)
{
  int v8 = a1;
  uint64_t v9 = a2;
  uint64_t v16 = 0;
  char v15 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = type metadata accessor for CATOption();
  uint64_t v10 = *(void *)(v12 - 8);
  uint64_t v11 = v12 - 8;
  unint64_t v6 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12);
  id v7 = (char *)&v5 - v6;
  char v15 = v8 & 1;
  uint64_t v14 = v3;
  uint64_t v16 = v2;
  (*(void (**)(void))(v10 + 16))();
  uint64_t v13 = CATWrapperSimple.init(useResponseMode:options:)();
  swift_retain();
  uint64_t v16 = v13;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  swift_release();
  return v13;
}

uint64_t RequestPaymentCATsModern.deinit()
{
  return CATWrapperSimple.deinit();
}

uint64_t RequestPaymentCATsModern.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  v2[6] = v1;
  v2[5] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return MEMORY[0x270FA2498](SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:), 0);
}

uint64_t SendPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:)()
{
  uint64_t v10 = v0[5];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#IntentConfirmationPrompt", 0x24uLL, 1);
  v0[7] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v9 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v7 = v8[5];
    v9[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v9[1]._countAndFlagsBits = v7;
  }
  else
  {
    v9[1]._countAndFlagsBits = 0;
    v9[1]._object = 0;
    v9[2]._countAndFlagsBits = 0;
    v9[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v8[8] = v5;
  unint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x263F6D0C8] + (int)*MEMORY[0x263F6D0C8]);
  uint64_t v3 = (void *)swift_task_alloc();
  v8[9] = v3;
  *uint64_t v3 = v8[2];
  v3[1] = RequestPaymentCATsModern.intentConfirmationPrompt(paymentsConcept:);
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

uint64_t DisambiguationCATsModern.intentDisambiguationPrompt()()
{
  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return MEMORY[0x270FA2498](DisambiguationCATsModern.intentDisambiguationPrompt(), 0);
}

{
  void *v0;
  Swift::String v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void *, uint64_t);
  uint64_t v7;

  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  v0[5] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v5 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[6] = v5;
  unint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t))(MEMORY[0x263F6D0C8] + (int)*MEMORY[0x263F6D0C8]);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 56) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = DisambiguationCATsModern.intentDisambiguationPrompt();
  return v6(v1._countAndFlagsBits, v1._object, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)())(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t DisambiguationCATsModern.intentDisambiguationPrompt()(uint64_t a1)
{
  uint64_t v6 = *v2;
  *(void *)(v6 + 16) = *v2;
  *(void *)(v6 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](DisambiguationCATsModern.intentDisambiguationPrompt(), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v6 + 16) + 8);
    return v3(a1);
  }
}

uint64_t type metadata accessor for RequestPaymentCATsModern()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentCATsModern;
  if (!type metadata singleton initialization cache for RequestPaymentCATsModern) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for RequestPaymentCATsModern()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t ObjC metadata update function for RequestPaymentCATsModern()
{
  return type metadata accessor for RequestPaymentCATsModern();
}

uint64_t type metadata accessor for SendPaymentCATsModern()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentCATsModern;
  if (!type metadata singleton initialization cache for SendPaymentCATsModern) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SendPaymentCATsModern()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t ObjC metadata update function for SendPaymentCATsModern()
{
  return type metadata accessor for SendPaymentCATsModern();
}

uint64_t type metadata accessor for DisambiguationCATsModern()
{
  uint64_t v1 = type metadata singleton initialization cache for DisambiguationCATsModern;
  if (!type metadata singleton initialization cache for DisambiguationCATsModern) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for DisambiguationCATsModern()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t ObjC metadata update function for DisambiguationCATsModern()
{
  return type metadata accessor for DisambiguationCATsModern();
}

uint64_t SearchForCardInfoCATs.apply(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.apply()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.apply(), 0);
}

uint64_t SearchForCardInfoCATs.apply()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Apply", 0x17uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Apply", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.goToAppleWebsite(), 0);
}

uint64_t SearchForCardInfoCATs.goToAppleWebsite()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#GoToAppleWebsite", 0x22uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#GoToAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.learn(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.learn()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.learn(), 0);
}

uint64_t SearchForCardInfoCATs.learn()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Learn", 0x17uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Learn", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openAppleWebsite(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openAppleWebsite()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.openAppleWebsite(), 0);
}

uint64_t SearchForCardInfoCATs.openAppleWebsite()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenAppleWebsite", 0x22uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenAppleWebsite", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openWallet(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.openWallet()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.openWallet(), 0);
}

uint64_t SearchForCardInfoCATs.openWallet()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenWallet", 0x1CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#OpenWallet", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.appleCardBalance(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.appleCardBalance()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.appleCardBalance(), 0);
}

uint64_t SearchForCardInfoCATs.appleCardBalance()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#AppleCardBalance", 0x22uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#AppleCardBalance", 0x22uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unlock(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unlock()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.unlock(), 0);
}

uint64_t SearchForCardInfoCATs.unlock()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Unlock", 0x18uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#Unlock", 0x18uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedDevice(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedDevice()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.unsupportedDevice(), 0);
}

uint64_t SearchForCardInfoCATs.unsupportedDevice()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedDevice", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedDevice", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedLocale(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t SearchForCardInfoCATs.unsupportedLocale()(uint64_t a1)
{
  v2[5] = v1;
  v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](SearchForCardInfoCATs.unsupportedLocale(), 0);
}

uint64_t SearchForCardInfoCATs.unsupportedLocale()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SearchForCardInfoCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for SearchForCardInfoCATs;
  if (!type metadata singleton initialization cache for SearchForCardInfoCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for SearchForCardInfoCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t SearchForCardInfoCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return SearchForCardInfoCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t SearchForCardInfoCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  uint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t ObjC metadata update function for SearchForCardInfoCATs()
{
  return type metadata accessor for SearchForCardInfoCATs();
}

NSJSONWritingOptions default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(void *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(void *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v14[10] = a1;
  v14[9] = a2;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v14[8] = a4;
  uint64_t v11 = type metadata accessor for PaymentsErrorTemplateProvider();
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2, v14);
  uint64_t v10 = default argument 1 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2);
  uint64_t v5 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2);
  uint64_t v13 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v14, v10, v5);
  a5[3] = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = v13;
  a5[4] = WitnessTable;
  *a5 = v13;
  return result;
}

uint64_t default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1)
{
  uint64_t v3 = a1;
  type metadata accessor for PaymentsAppResolver();
  default argument 0 of PaymentsAppResolver.init(appLister:)((uint64_t)v2);
  return PaymentsAppResolver.__allocating_init(appLister:)((uint64_t)v2);
}

uint64_t default argument 0 of PaymentsAppResolver.init(appLister:)@<X0>(uint64_t a1@<X8>)
{
  PaymentsAppLister.init()();
  uint64_t result = type metadata accessor for PaymentsAppLister();
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = &protocol witness table for PaymentsAppLister<A>;
  return result;
}

NSJSONWritingOptions default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(void *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(void *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

uint64_t default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)()
{
  return static Device.current.getter();
}

uint64_t default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(uint64_t a1)
{
  v2[3] = a1;
  void v2[2] = 0;
  v2[0] = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  v2[1] = (char *)v2 - v2[0];
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t FlowFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GlobalsProviding(v1 + 16, a1);
}

uint64_t FlowFactory.__allocating_init(deviceState:contactResolver:)(uint64_t a1, uint64_t a2)
{
  return FlowFactory.init(deviceState:contactResolver:)(a1, a2);
}

uint64_t FlowFactory.init(deviceState:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v8);
  outlined init with take of CommonLabelsProviding(v8, (void *)(v2 + 16));
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  outlined init with take of CommonLabelsProviding(v7, (void *)(v2 + 56));
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v6;
}

uint64_t FlowFactory.findFlow(for:)(uint64_t a1)
{
  v2[119] = v1;
  v2[118] = a1;
  v2[68] = v2;
  v2[69] = 0;
  v2[70] = 0;
  v2[72] = 0;
  v2[93] = 0;
  v2[99] = 0;
  v2[105] = 0;
  v2[111] = 0;
  v2[117] = 0;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  v2[120] = v3;
  v2[121] = *(void *)(v3 - 8);
  v2[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v2[123] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[124] = v4;
  v2[125] = *(void *)(v4 - 8);
  v2[126] = swift_task_alloc();
  v2[127] = swift_task_alloc();
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  v2[130] = swift_task_alloc();
  v2[131] = swift_task_alloc();
  v2[132] = swift_task_alloc();
  v2[133] = swift_task_alloc();
  v2[134] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for USOParse();
  v2[135] = v5;
  uint64_t v8 = *(void *)(v5 - 8);
  v2[136] = v8;
  v2[137] = *(void *)(v8 + 64);
  v2[138] = swift_task_alloc();
  v2[139] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v2[140] = v6;
  uint64_t v9 = *(void *)(v6 - 8);
  v2[141] = v9;
  v2[142] = *(void *)(v9 + 64);
  v2[143] = swift_task_alloc();
  v2[144] = swift_task_alloc();
  v2[69] = a1;
  v2[70] = v1;
  return MEMORY[0x270FA2498](FlowFactory.findFlow(for:), 0);
}

uint64_t FlowFactory.findFlow(for:)()
{
  uint64_t v255 = v0;
  uint64_t v239 = v0[144];
  uint64_t v237 = v0[141];
  uint64_t v238 = v0[140];
  v0[68] = v0;
  int v236 = *(void (**)(void))(v237 + 16);
  v236();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v237 + 88))(v239, v238) != *MEMORY[0x263F6FF80])
  {
    uint64_t v40 = *(void *)(v235 + 1144);
    uint64_t v41 = *(void *)(v235 + 1120);
    uint64_t v20 = *(void *)(v235 + 1008);
    uint64_t v36 = *(void *)(v235 + 992);
    uint64_t v37 = *(void *)(v235 + 944);
    uint64_t v38 = *(void *)(v235 + 1128);
    uint64_t v35 = *(void *)(v235 + 1000);
    uint64_t v21 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v20, v21, v36);
    ((void (*)(uint64_t, uint64_t, uint64_t))v236)(v40, v37, v41);
    unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v43 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v43 + v39, v40, v41);
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    *(void *)(v235 + 568) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v42 = *(_DWORD *)(v235 + 1160);
    uint64_t v45 = swift_allocObject();
    *(unsigned char *)(v45 + 16) = 32;
    uint64_t v46 = swift_allocObject();
    *(unsigned char *)(v46 + 16) = 8;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = partial apply for implicit closure #3 in FlowFactory.findFlow(for:);
    *(void *)(v44 + 24) = v43;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v47 + 24) = v44;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    unint64_t v48 = v22;
    swift_retain();
    *unint64_t v48 = partial apply for closure #1 in OSLogArguments.append(_:);
    v48[1] = v45;
    swift_retain();
    v48[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v48[3] = v46;
    swift_retain();
    v48[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v48[5] = v47;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v33 = createStorage<A>(capacity:type:)(0);
      uint64_t v34 = createStorage<A>(capacity:type:)(1);
      uint64_t v240 = v32;
      uint64_t v241 = v33;
      uint64_t v242 = v34;
      serialize(_:at:)(2, &v240);
      serialize(_:at:)(1, &v240);
      uint64_t v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v244 = v45;
      closure #1 in osLogInternal(_:log:type:)(&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
      uint64_t v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v244 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
      uint64_t v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v244 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
      _os_log_impl(&dword_25D85A000, v49, v50, "#FlowFactory received unsupported parse: %s", v32, v42);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v32, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v29 = *(void *)(v235 + 1152);
    uint64_t v30 = *(void *)(v235 + 1120);
    uint64_t v26 = *(void *)(v235 + 1008);
    uint64_t v27 = *(void *)(v235 + 992);
    uint64_t v28 = *(void *)(v235 + 1128);
    uint64_t v25 = *(void *)(v235 + 1000);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
LABEL_91:
    uint64_t v193 = 0;
    goto LABEL_92;
  }
  uint64_t v217 = *(void *)(v235 + 1152);
  unint64_t v221 = *(void *)(v235 + 1112);
  uint64_t v223 = *(void *)(v235 + 1104);
  uint64_t v224 = *(void *)(v235 + 1080);
  uint64_t v1 = *(void *)(v235 + 1072);
  uint64_t v219 = *(void *)(v235 + 992);
  uint64_t v216 = *(void *)(v235 + 1088);
  uint64_t v218 = *(void *)(v235 + 1000);
  (*(void (**)(void))(*(void *)(v235 + 1128) + 96))();
  uint64_t v225 = *(void (**)(unint64_t, uint64_t, uint64_t))(v216 + 32);
  v225(v221, v217, v224);
  *(void *)(v235 + 576) = v221;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  unint64_t v220 = *(void (**)(uint64_t, uint64_t, uint64_t))(v218 + 16);
  v220(v1, v2, v219);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v216 + 16))(v223, v221, v224);
  unint64_t v222 = (*(unsigned __int8 *)(v216 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80);
  uint64_t v227 = swift_allocObject();
  v225(v227 + v222, v223, v224);
  oslog = Logger.logObject.getter();
  os_log_type_t v234 = static os_log_type_t.debug.getter();
  *(void *)(v235 + 584) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v235 + 1164);
  uint64_t v229 = swift_allocObject();
  *(unsigned char *)(v229 + 16) = 32;
  uint64_t v230 = swift_allocObject();
  *(unsigned char *)(v230 + 16) = 8;
  uint64_t v228 = swift_allocObject();
  *(void *)(v228 + 16) = partial apply for implicit closure #1 in FlowFactory.findFlow(for:);
  *(void *)(v228 + 24) = v227;
  uint64_t v231 = swift_allocObject();
  *(void *)(v231 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v231 + 24) = v228;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v232 = v3;
  swift_retain();
  *uint64_t v232 = partial apply for closure #1 in OSLogArguments.append(_:);
  v232[1] = v229;
  swift_retain();
  v232[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v232[3] = v230;
  swift_retain();
  v232[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v232[5] = v231;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v234))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v214 = createStorage<A>(capacity:type:)(0);
    uint64_t v215 = createStorage<A>(capacity:type:)(1);
    int v250 = buf;
    uint64_t v251 = v214;
    uint64_t v252 = v215;
    serialize(_:at:)(2, &v250);
    serialize(_:at:)(1, &v250);
    uint64_t v253 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v254 = v229;
    closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)&v250, (uint64_t)&v251, (uint64_t)&v252);
    uint64_t v253 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v254 = v230;
    closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)&v250, (uint64_t)&v251, (uint64_t)&v252);
    uint64_t v253 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v254 = v231;
    closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)&v250, (uint64_t)&v251, (uint64_t)&v252);
    _os_log_impl(&dword_25D85A000, oslog, v234, "#FlowFactory received uso parse: %s", buf, size);
    destroyStorage<A>(_:count:)(v214, 0, v212);
    destroyStorage<A>(_:count:)(v215, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v202 = *(void *)(v235 + 1072);
  uint64_t v203 = *(void *)(v235 + 992);
  uint64_t v209 = *(void *)(v235 + 984);
  uint64_t v207 = *(void *)(v235 + 976);
  uint64_t v206 = *(void *)(v235 + 960);
  uint64_t v201 = *(void *)(v235 + 1000);
  uint64_t v205 = *(void *)(v235 + 968);

  uint64_t v204 = *(void (**)(uint64_t, uint64_t))(v201 + 8);
  v204(v202, v203);
  uint64_t v4 = USOParse.userParse.getter();
  uint64_t v208 = MEMORY[0x2611B7D70](v4);
  (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v207, v206);
  swift_bridgeObjectRetain();
  *(void *)(v235 + 592) = v208;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
  lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [SFCardSection]();
  swift_bridgeObjectRelease();
  uint64_t v210 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v211 = *(void *)(v210 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v211 + 48))(v209, 1) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(*(void *)(v235 + 984));
  }
  else
  {
    uint64_t v199 = *(void *)(v235 + 984);
    uint64_t v200 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v199, v210);
    if (v200)
    {
      UsoTask.eraseToAny.getter();
      swift_release();
      goto LABEL_10;
    }
  }
  *(void *)(v235 + 448) = 0;
  *(void *)(v235 + 456) = 0;
  *(void *)(v235 + 464) = 0;
  *(void *)(v235 + 472) = 0;
LABEL_10:
  if (*(void *)(v235 + 472))
  {
    outlined init with take of Any(v235 + 448, v235 + 416);
    outlined init with copy of Any(v235 + 416, v235 + 480);
    type metadata accessor for UsoTask_pay_common_Payment();
    if (swift_dynamicCast())
    {
      uint64_t v197 = *(void *)(v235 + 952);
      static AceService.currentAsync.getter();
      outlined init with copy of GlobalsProviding(v197 + 56, v235 + 376);
      id v198 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v235 + 336, v235 + 376);
      __swift_destroy_boxed_opaque_existential_0(v235 + 376);
      __swift_destroy_boxed_opaque_existential_0(v235 + 336);
      if (v198)
      {
        self;
        uint64_t v196 = swift_dynamicCastObjCClass();
        if (v196)
        {
          char v195 = (void *)v196;
        }
        else
        {

          char v195 = 0;
        }
        uint64_t v194 = v195;
      }
      else
      {
        uint64_t v194 = 0;
      }
      if (v194)
      {
        uint64_t v190 = *(void *)(v235 + 1112);
        uint64_t v191 = *(void *)(v235 + 1080);
        uint64_t v189 = *(void *)(v235 + 1088);
        *(void *)(v235 + 936) = v194;
        uint64_t v192 = FlowFactory.sendPaymentFlow(intent:)(v194);

        swift_release();
        __swift_destroy_boxed_opaque_existential_0(v235 + 480);
        __swift_destroy_boxed_opaque_existential_0(v235 + 416);
        (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v190, v191);
        uint64_t v193 = v192;
        goto LABEL_92;
      }
      uint64_t v5 = *(void *)(v235 + 1064);
      uint64_t v184 = *(void *)(v235 + 992);
      uint64_t v6 = Logger.payments.unsafeMutableAddressor();
      v220(v5, v6, v184);
      log = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.debug.getter();
      *(void *)(v235 + 896) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v185 = *(_DWORD *)(v235 + 1192);
      uint64_t v188 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v186))
      {
        uint64_t v180 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v181 = createStorage<A>(capacity:type:)(0);
        uint64_t v182 = createStorage<A>(capacity:type:)(0);
        *(void *)(v235 + 904) = v180;
        *(void *)(v235 + 912) = v181;
        *(void *)(v235 + 920) = v182;
        serialize(_:at:)(0, (unsigned char **)(v235 + 904));
        serialize(_:at:)(0, (unsigned char **)(v235 + 904));
        *(void *)(v235 + 928) = v188;
        uint64_t v183 = (void *)swift_task_alloc();
        void v183[2] = v235 + 904;
        v183[3] = v235 + 912;
        v183[4] = v235 + 920;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v186, "#FlowFactory couldn't create intent from parse", v180, v185);
        destroyStorage<A>(_:count:)(v181, 0, v179);
        destroyStorage<A>(_:count:)(v182, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v180, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v177 = *(void *)(v235 + 1064);
      uint64_t v178 = *(void *)(v235 + 992);

      v204(v177, v178);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0(v235 + 480);
    }
    else
    {
      type metadata accessor for UsoTask_noVerb_common_Payment();
      if (swift_dynamicCast())
      {
        uint64_t v175 = *(void *)(v235 + 952);
        static AceService.currentAsync.getter();
        outlined init with copy of GlobalsProviding(v175 + 56, v235 + 296);
        id v176 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v235 + 256, v235 + 296);
        __swift_destroy_boxed_opaque_existential_0(v235 + 296);
        __swift_destroy_boxed_opaque_existential_0(v235 + 256);
        if (v176)
        {
          self;
          uint64_t v174 = swift_dynamicCastObjCClass();
          if (v174)
          {
            id v173 = (void *)v174;
          }
          else
          {

            id v173 = 0;
          }
          uint64_t v172 = v173;
        }
        else
        {
          uint64_t v172 = 0;
        }
        if (v172)
        {
          uint64_t v169 = *(void *)(v235 + 1112);
          uint64_t v170 = *(void *)(v235 + 1080);
          uint64_t v168 = *(void *)(v235 + 1088);
          *(void *)(v235 + 888) = v172;
          uint64_t v171 = FlowFactory.sendPaymentFlow(intent:)(v172);

          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v235 + 480);
          __swift_destroy_boxed_opaque_existential_0(v235 + 416);
          (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v169, v170);
          uint64_t v193 = v171;
          goto LABEL_92;
        }
        uint64_t v7 = *(void *)(v235 + 1056);
        uint64_t v163 = *(void *)(v235 + 992);
        uint64_t v8 = Logger.payments.unsafeMutableAddressor();
        v220(v7, v8, v163);
        uint64_t v166 = Logger.logObject.getter();
        os_log_type_t v165 = static os_log_type_t.debug.getter();
        *(void *)(v235 + 848) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v164 = *(_DWORD *)(v235 + 1188);
        uint64_t v167 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v166, v165))
        {
          uint64_t v159 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v160 = createStorage<A>(capacity:type:)(0);
          uint64_t v161 = createStorage<A>(capacity:type:)(0);
          *(void *)(v235 + 856) = v159;
          *(void *)(v235 + 864) = v160;
          *(void *)(v235 + 872) = v161;
          serialize(_:at:)(0, (unsigned char **)(v235 + 856));
          serialize(_:at:)(0, (unsigned char **)(v235 + 856));
          *(void *)(v235 + 880) = v167;
          uint64_t v162 = (void *)swift_task_alloc();
          v162[2] = v235 + 856;
          v162[3] = v235 + 864;
          v162[4] = v235 + 872;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25D85A000, v166, v165, "#FlowFactory couldn't create intent from parse", v159, v164);
          destroyStorage<A>(_:count:)(v160, 0, v158);
          destroyStorage<A>(_:count:)(v161, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v159, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v156 = *(void *)(v235 + 1056);
        uint64_t v157 = *(void *)(v235 + 992);

        v204(v156, v157);
        swift_release();
        __swift_destroy_boxed_opaque_existential_0(v235 + 480);
      }
      else
      {
        type metadata accessor for UsoTask_requestMoney_common_Payment();
        if (swift_dynamicCast())
        {
          uint64_t v154 = *(void *)(v235 + 952);
          static AceService.currentAsync.getter();
          outlined init with copy of GlobalsProviding(v154 + 56, v235 + 216);
          id v155 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v235 + 176, v235 + 216);
          __swift_destroy_boxed_opaque_existential_0(v235 + 216);
          __swift_destroy_boxed_opaque_existential_0(v235 + 176);
          if (v155)
          {
            self;
            uint64_t v153 = swift_dynamicCastObjCClass();
            if (v153)
            {
              id v152 = (void *)v153;
            }
            else
            {

              id v152 = 0;
            }
            uint64_t v151 = v152;
          }
          else
          {
            uint64_t v151 = 0;
          }
          if (v151)
          {
            uint64_t v148 = *(void *)(v235 + 1112);
            uint64_t v149 = *(void *)(v235 + 1080);
            uint64_t v147 = *(void *)(v235 + 1088);
            *(void *)(v235 + 840) = v151;
            uint64_t v150 = FlowFactory.requestPaymentFlow(intent:)(v151);

            swift_release();
            __swift_destroy_boxed_opaque_existential_0(v235 + 480);
            __swift_destroy_boxed_opaque_existential_0(v235 + 416);
            (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v148, v149);
            uint64_t v193 = v150;
            goto LABEL_92;
          }
          uint64_t v9 = *(void *)(v235 + 1048);
          uint64_t v142 = *(void *)(v235 + 992);
          uint64_t v10 = Logger.payments.unsafeMutableAddressor();
          v220(v9, v10, v142);
          uint64_t v145 = Logger.logObject.getter();
          os_log_type_t v144 = static os_log_type_t.debug.getter();
          *(void *)(v235 + 800) = 2;
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v143 = *(_DWORD *)(v235 + 1184);
          uint64_t v146 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v145, v144))
          {
            uint64_t v138 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v139 = createStorage<A>(capacity:type:)(0);
            uint64_t v140 = createStorage<A>(capacity:type:)(0);
            *(void *)(v235 + 808) = v138;
            *(void *)(v235 + 816) = v139;
            *(void *)(v235 + 824) = v140;
            serialize(_:at:)(0, (unsigned char **)(v235 + 808));
            serialize(_:at:)(0, (unsigned char **)(v235 + 808));
            *(void *)(v235 + 832) = v146;
            uint64_t v141 = (void *)swift_task_alloc();
            v141[2] = v235 + 808;
            v141[3] = v235 + 816;
            v141[4] = v235 + 824;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            swift_task_dealloc();
            _os_log_impl(&dword_25D85A000, v145, v144, "#FlowFactory couldn't create intent from parse", v138, v143);
            destroyStorage<A>(_:count:)(v139, 0, v137);
            destroyStorage<A>(_:count:)(v140, 0, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611B9630](v138, MEMORY[0x263F8E778]);
          }
          swift_bridgeObjectRelease();
          uint64_t v135 = *(void *)(v235 + 1048);
          uint64_t v136 = *(void *)(v235 + 992);

          v204(v135, v136);
          swift_release();
          __swift_destroy_boxed_opaque_existential_0(v235 + 480);
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_PaymentAccount();
          if (swift_dynamicCast())
          {
            if (USOParse.isRequestToSummariseAppleCardInfo.getter())
            {
              uint64_t v132 = *(void *)(v235 + 1112);
              uint64_t v133 = *(void *)(v235 + 1080);
              uint64_t v131 = *(void *)(v235 + 1088);
              uint64_t v134 = FlowFactory.makeLearnAboutAppleCardFlow()();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v235 + 480);
              __swift_destroy_boxed_opaque_existential_0(v235 + 416);
              (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v132, v133);
              uint64_t v193 = v134;
              goto LABEL_92;
            }
            uint64_t v129 = *(void *)(v235 + 952);
            static AceService.currentAsync.getter();
            outlined init with copy of GlobalsProviding(v129 + 56, v235 + 136);
            id v130 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v235 + 96, v235 + 136);
            __swift_destroy_boxed_opaque_existential_0(v235 + 136);
            __swift_destroy_boxed_opaque_existential_0(v235 + 96);
            if (v130)
            {
              self;
              uint64_t v128 = swift_dynamicCastObjCClass();
              if (v128)
              {
                uint64_t v127 = (void *)v128;
              }
              else
              {

                uint64_t v127 = 0;
              }
              unint64_t v126 = v127;
            }
            else
            {
              unint64_t v126 = 0;
            }
            if (v126)
            {
              uint64_t v123 = *(void *)(v235 + 1112);
              uint64_t v124 = *(void *)(v235 + 1080);
              uint64_t v122 = *(void *)(v235 + 1088);
              *(void *)(v235 + 792) = v126;
              uint64_t v125 = FlowFactory.searchForAccountsFlow(intent:)(v126);

              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v235 + 480);
              __swift_destroy_boxed_opaque_existential_0(v235 + 416);
              (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v124);
              uint64_t v193 = v125;
              goto LABEL_92;
            }
            uint64_t v11 = *(void *)(v235 + 1040);
            uint64_t v117 = *(void *)(v235 + 992);
            uint64_t v12 = Logger.payments.unsafeMutableAddressor();
            v220(v11, v12, v117);
            id v120 = Logger.logObject.getter();
            os_log_type_t v119 = static os_log_type_t.debug.getter();
            *(void *)(v235 + 752) = 2;
            UnsignedInteger<>.init<A>(_:)();
            uint32_t v118 = *(_DWORD *)(v235 + 1180);
            uint64_t v121 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v120, v119))
            {
              uint64_t v113 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v114 = createStorage<A>(capacity:type:)(0);
              uint64_t v115 = createStorage<A>(capacity:type:)(0);
              *(void *)(v235 + 760) = v113;
              *(void *)(v235 + 768) = v114;
              *(void *)(v235 + 776) = v115;
              serialize(_:at:)(0, (unsigned char **)(v235 + 760));
              serialize(_:at:)(0, (unsigned char **)(v235 + 760));
              *(void *)(v235 + 784) = v121;
              unint64_t v116 = (void *)swift_task_alloc();
              v116[2] = v235 + 760;
              v116[3] = v235 + 768;
              v116[4] = v235 + 776;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_25D85A000, v120, v119, "#FlowFactory couldn't create intent from parse", v113, v118);
              destroyStorage<A>(_:count:)(v114, 0, v112);
              destroyStorage<A>(_:count:)(v115, 0, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x2611B9630](v113, MEMORY[0x263F8E778]);
            }
            swift_bridgeObjectRelease();
            uint64_t v110 = *(void *)(v235 + 1040);
            uint64_t v111 = *(void *)(v235 + 992);

            v204(v110, v111);
            swift_release();
            __swift_destroy_boxed_opaque_existential_0(v235 + 480);
          }
          else
          {
            type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
            if ((swift_dynamicCast() & 1) != 0
              || (type metadata accessor for UsoTask_request_common_PaymentAccount(), (swift_dynamicCast() & 1) != 0))
            {
              swift_release();
              __swift_destroy_boxed_opaque_existential_0(v235 + 480);
              uint64_t v108 = *(void *)(v235 + 952);
              static AceService.currentAsync.getter();
              outlined init with copy of GlobalsProviding(v108 + 56, v235 + 56);
              id v109 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v235 + 16, v235 + 56);
              __swift_destroy_boxed_opaque_existential_0(v235 + 56);
              __swift_destroy_boxed_opaque_existential_0(v235 + 16);
              if (v109)
              {
                self;
                uint64_t v107 = swift_dynamicCastObjCClass();
                if (v107)
                {
                  uint64_t v106 = (void *)v107;
                }
                else
                {

                  uint64_t v106 = 0;
                }
                uint64_t v105 = v106;
              }
              else
              {
                uint64_t v105 = 0;
              }
              if (v105)
              {
                uint64_t v102 = *(void *)(v235 + 1112);
                uint64_t v103 = *(void *)(v235 + 1080);
                uint64_t v101 = *(void *)(v235 + 1088);
                *(void *)(v235 + 744) = v105;
                uint64_t v104 = FlowFactory.searchForAccountsFlow(intent:)(v105);

                __swift_destroy_boxed_opaque_existential_0(v235 + 416);
                (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v102, v103);
                uint64_t v193 = v104;
                goto LABEL_92;
              }
              uint64_t v13 = *(void *)(v235 + 1032);
              uint64_t v96 = *(void *)(v235 + 992);
              uint64_t v14 = Logger.payments.unsafeMutableAddressor();
              v220(v13, v14, v96);
              id v99 = Logger.logObject.getter();
              os_log_type_t v98 = static os_log_type_t.debug.getter();
              *(void *)(v235 + 704) = 2;
              UnsignedInteger<>.init<A>(_:)();
              uint32_t v97 = *(_DWORD *)(v235 + 1176);
              uint64_t v100 = _allocateUninitializedArray<A>(_:)();
              if (os_log_type_enabled(v99, v98))
              {
                uint64_t v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                uint64_t v93 = createStorage<A>(capacity:type:)(0);
                uint64_t v94 = createStorage<A>(capacity:type:)(0);
                *(void *)(v235 + 712) = v92;
                *(void *)(v235 + 720) = v93;
                *(void *)(v235 + 728) = v94;
                serialize(_:at:)(0, (unsigned char **)(v235 + 712));
                serialize(_:at:)(0, (unsigned char **)(v235 + 712));
                *(void *)(v235 + 736) = v100;
                uint64_t v95 = (void *)swift_task_alloc();
                v95[2] = v235 + 712;
                v95[3] = v235 + 720;
                v95[4] = v235 + 728;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
                lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
                Sequence.forEach(_:)();
                swift_task_dealloc();
                _os_log_impl(&dword_25D85A000, v99, v98, "#FlowFactory couldn't create intent from parse", v92, v97);
                destroyStorage<A>(_:count:)(v93, 0, v91);
                destroyStorage<A>(_:count:)(v94, 0, MEMORY[0x263F8EE58] + 8);
                MEMORY[0x2611B9630](v92, MEMORY[0x263F8E778]);
              }
              swift_bridgeObjectRelease();
              uint64_t v89 = *(void *)(v235 + 1032);
              uint64_t v90 = *(void *)(v235 + 992);

              v204(v89, v90);
            }
            else
            {
              type metadata accessor for UsoTask_create_common_PaymentAccount();
              if (swift_dynamicCast())
              {
                if (USOParse.isRequestToCreateAppleCardAccount.getter())
                {
                  uint64_t v86 = *(void *)(v235 + 1112);
                  uint64_t v87 = *(void *)(v235 + 1080);
                  uint64_t v85 = *(void *)(v235 + 1088);
                  uint64_t v88 = FlowFactory.makeApplyForAppleCardFlow()();
                  swift_release();
                  __swift_destroy_boxed_opaque_existential_0(v235 + 480);
                  __swift_destroy_boxed_opaque_existential_0(v235 + 416);
                  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v86, v87);
                  uint64_t v193 = v88;
                  goto LABEL_92;
                }
                swift_release();
                __swift_destroy_boxed_opaque_existential_0(v235 + 480);
              }
              else
              {
                uint64_t v15 = *(void *)(v235 + 1024);
                uint64_t v75 = *(void *)(v235 + 992);
                uint64_t v16 = Logger.payments.unsafeMutableAddressor();
                v220(v15, v16, v75);
                outlined init with copy of Any(v235 + 416, v235 + 512);
                uint64_t v77 = swift_allocObject();
                outlined init with take of Any(v235 + 512, v77 + 16);
                uint64_t v83 = Logger.logObject.getter();
                os_log_type_t v84 = static os_log_type_t.debug.getter();
                *(void *)(v235 + 696) = 12;
                UnsignedInteger<>.init<A>(_:)();
                uint32_t v76 = *(_DWORD *)(v235 + 1172);
                uint64_t v79 = swift_allocObject();
                *(unsigned char *)(v79 + 16) = 32;
                uint64_t v80 = swift_allocObject();
                *(unsigned char *)(v80 + 16) = 8;
                uint64_t v78 = swift_allocObject();
                *(void *)(v78 + 16) = partial apply for implicit closure #2 in FlowFactory.findFlow(for:);
                *(void *)(v78 + 24) = v77;
                uint64_t v81 = swift_allocObject();
                *(void *)(v81 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
                *(void *)(v81 + 24) = v78;
                _allocateUninitializedArray<A>(_:)();
                uint64_t v82 = v17;
                swift_retain();
                *uint64_t v82 = partial apply for closure #1 in OSLogArguments.append(_:);
                v82[1] = v79;
                swift_retain();
                v82[2] = partial apply for closure #1 in OSLogArguments.append(_:);
                v82[3] = v80;
                swift_retain();
                v82[4] = partial apply for closure #1 in OSLogArguments.append(_:);
                v82[5] = v81;
                _finalizeUninitializedArray<A>(_:)();
                swift_bridgeObjectRelease();
                if (os_log_type_enabled(v83, v84))
                {
                  uint64_t v72 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                  uint64_t v73 = createStorage<A>(capacity:type:)(0);
                  uint64_t v74 = createStorage<A>(capacity:type:)(1);
                  Class v245 = v72;
                  uint64_t v246 = v73;
                  uint64_t v247 = v74;
                  serialize(_:at:)(2, &v245);
                  serialize(_:at:)(1, &v245);
                  uint64_t v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  uint64_t v249 = v79;
                  closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)&v245, (uint64_t)&v246, (uint64_t)&v247);
                  uint64_t v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  uint64_t v249 = v80;
                  closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)&v245, (uint64_t)&v246, (uint64_t)&v247);
                  uint64_t v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                  uint64_t v249 = v81;
                  closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)&v245, (uint64_t)&v246, (uint64_t)&v247);
                  _os_log_impl(&dword_25D85A000, v83, v84, "#FlowFactory encountered unsupported task: %s", v72, v76);
                  destroyStorage<A>(_:count:)(v73, 0, v71);
                  destroyStorage<A>(_:count:)(v74, 1, MEMORY[0x263F8EE58] + 8);
                  MEMORY[0x2611B9630](v72, MEMORY[0x263F8E778]);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release();
                }
                uint64_t v69 = *(void *)(v235 + 1024);
                uint64_t v70 = *(void *)(v235 + 992);

                v204(v69, v70);
                __swift_destroy_boxed_opaque_existential_0(v235 + 480);
              }
            }
          }
        }
      }
    }
    uint64_t v67 = *(void *)(v235 + 1112);
    uint64_t v68 = *(void *)(v235 + 1080);
    uint64_t v66 = *(void *)(v235 + 1088);
    __swift_destroy_boxed_opaque_existential_0(v235 + 416);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v67, v68);
    goto LABEL_91;
  }
  uint64_t v18 = *(void *)(v235 + 1016);
  uint64_t v61 = *(void *)(v235 + 992);
  outlined destroy of FlowActivity?(v235 + 448);
  uint64_t v19 = Logger.payments.unsafeMutableAddressor();
  v220(v18, v19, v61);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  *(void *)(v235 + 600) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v62 = *(_DWORD *)(v235 + 1168);
  uint64_t v65 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v64, v63))
  {
    int v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v58 = createStorage<A>(capacity:type:)(0);
    uint64_t v59 = createStorage<A>(capacity:type:)(0);
    *(void *)(v235 + 608) = v57;
    *(void *)(v235 + 616) = v58;
    *(void *)(v235 + 624) = v59;
    serialize(_:at:)(0, (unsigned char **)(v235 + 608));
    serialize(_:at:)(0, (unsigned char **)(v235 + 608));
    *(void *)(v235 + 632) = v65;
    unint64_t v60 = (void *)swift_task_alloc();
    v60[2] = v235 + 608;
    v60[3] = v235 + 616;
    v60[4] = v235 + 624;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v64, v63, "#FlowFactory couldn't find a UsoTask for the given UsoParse", v57, v62);
    destroyStorage<A>(_:count:)(v58, 0, v56);
    destroyStorage<A>(_:count:)(v59, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v57, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void *)(v235 + 1112);
  uint64_t v55 = *(void *)(v235 + 1080);
  uint64_t v51 = *(void *)(v235 + 1016);
  uint64_t v52 = *(void *)(v235 + 992);
  uint64_t v53 = *(void *)(v235 + 1088);

  v204(v51, v52);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
  uint64_t v193 = 0;
LABEL_92:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)(v235 + 544) + 8);
  return v23(v193);
}

uint64_t implicit closure #1 in FlowFactory.findFlow(for:)()
{
  return USOParse.debugDescription.getter();
}

uint64_t implicit closure #2 in FlowFactory.findFlow(for:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v2);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in FlowFactory.findFlow(for:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t sub_25D8C277C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in FlowFactory.findFlow(for:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Parse() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #3 in FlowFactory.findFlow(for:)(v2);
}

uint64_t FlowFactory.guardFlow(with:)()
{
  return static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
}

uint64_t FlowFactory.unsupportedActionFlow()()
{
  v1[10] = v0;
  v1[2] = v1;
  v1[3] = 0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[3] = v0;
  return MEMORY[0x270FA2498](FlowFactory.unsupportedActionFlow(), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 32) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 48) = buf;
    *(void *)(v15 + 56) = v12;
    *(void *)(v15 + 64) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 48));
    serialize(_:at:)(0, (unsigned char **)(v15 + 48));
    *(void *)(v15 + 72) = v21;
    uint64_t v14 = (void *)swift_task_alloc();
    v14[2] = v15 + 48;
    v14[3] = v15 + 56;
    v14[4] = v15 + 64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#FlowFactory building flow for unsupportedAction", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v15 + 104);
  uint64_t v6 = *(void *)(v15 + 88);
  uint64_t v5 = *(void *)(v15 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v7 = SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  swift_release();
  *(void *)(v15 + 40) = v7;
  uint64_t v9 = Flow.eraseToAnyFlow()();
  swift_release();
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v15 + 16) + 8);
  return v3(v9);
}

uint64_t closure #1 in FlowFactory.unsupportedActionFlow()(uint64_t a1, uint64_t a2)
{
  v2[20] = a2;
  v2[19] = a1;
  v2[17] = v2;
  v2[18] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v2[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[23] = v3;
  unsigned char v2[24] = *(void *)(v3 - 8);
  v2[25] = swift_task_alloc();
  v2[18] = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.unsupportedActionFlow(), 0);
}

uint64_t closure #1 in FlowFactory.unsupportedActionFlow()()
{
  *(void *)(v0 + 136) = v0;
  type metadata accessor for PaymentsUnsupportedIntentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(void *)(v0 + 208) = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v4[27] = v1;
  *uint64_t v1 = v4[17];
  v1[1] = closure #1 in FlowFactory.unsupportedActionFlow();
  uint64_t v2 = v4[25];
  return PaymentsUnsupportedIntentCATs.unsupportedSurfIntent()(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in FlowFactory.unsupportedActionFlow();
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #1 in FlowFactory.unsupportedActionFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = v0[25];
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[23];
  uint64_t v9 = v0[21];
  uint64_t v4 = v0[20];
  uint64_t v5 = (uint64_t *)v0[19];
  v0[17] = v0;
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 2));
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v9, 1);
  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 12));
  outlined destroy of NLContextUpdate?(v9);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[17] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 136) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 8);
  return v1();
}

uint64_t FlowFactory.unsupportedOnDeviceFlow()()
{
  uint64_t v37 = 0;
  uint64_t v25 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v26 = &async function pointer to partial apply for closure #1 in FlowFactory.unsupportedOnDeviceFlow();
  uint64_t v48 = 0;
  uint64_t v27 = 0;
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v32 - 8);
  uint64_t v31 = v32 - 8;
  unint64_t v28 = (*(void *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v32);
  uint64_t v0 = (char *)v8 - v28;
  uint64_t v29 = (char *)v8 - v28;
  uint64_t v48 = v1;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v0, v2, v32);
  unint64_t v39 = Logger.logObject.getter();
  int v38 = static os_log_type_t.debug.getter();
  uint64_t v35 = &v46;
  uint64_t v46 = 2;
  unint64_t v33 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v34 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v36 = v47;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v40 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v39, (os_log_type_t)v38))
  {
    uint64_t v3 = v27;
    uint64_t v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = 0;
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    uint64_t v17 = createStorage<A>(capacity:type:)(v14);
    uint64_t v21 = v44;
    v44[0] = v15;
    uint64_t v22 = &v43;
    uint64_t v43 = v16;
    uint64_t v19 = &v42;
    uint64_t v42 = v17;
    unsigned int v18 = 0;
    serialize(_:at:)(0, v44);
    serialize(_:at:)(v18, v21);
    uint64_t v41 = v40;
    uint64_t v20 = v8;
    MEMORY[0x270FA5388](v8);
    uint64_t v4 = v22;
    uint64_t v5 = &v8[-6];
    uint64_t v23 = &v8[-6];
    void v5[2] = v21;
    v5[3] = v4;
    v5[4] = v6;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v3)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v39, (os_log_type_t)v38, "#FlowFactory building flow for unsupported on device", v15, v36);
      uint64_t v12 = 0;
      destroyStorage<A>(_:count:)(v16, 0, v13);
      destroyStorage<A>(_:count:)(v17, v12, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v15, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v32);
  uint64_t v10 = type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  swift_retain();
  v8[1] = &v45;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v9 = (unsigned char *)SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  swift_release();
  v44[1] = v9;
  uint64_t v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

uint64_t closure #1 in FlowFactory.unsupportedOnDeviceFlow()(uint64_t a1, uint64_t a2)
{
  v2[20] = a2;
  v2[19] = a1;
  v2[17] = v2;
  v2[18] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v2[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[23] = v3;
  unsigned char v2[24] = *(void *)(v3 - 8);
  v2[25] = swift_task_alloc();
  v2[18] = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.unsupportedOnDeviceFlow(), 0);
}

uint64_t closure #1 in FlowFactory.unsupportedOnDeviceFlow()()
{
  *(void *)(v0 + 136) = v0;
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  *(void *)(v0 + 208) = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v4[27] = v1;
  *uint64_t v1 = v4[17];
  v1[1] = closure #1 in FlowFactory.unsupportedActionFlow();
  uint64_t v2 = v4[25];
  return PaymentsBaseCATs.unsupportedOnWatch()(v2);
}

uint64_t FlowFactory.sendPaymentFlow(intent:)(void *a1)
{
  uint64_t v14 = a1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSendPaymentIntent, INSendPaymentIntentResponse>);
  unint64_t v6 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v16 = (uint64_t)&v6 - v6;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<SendPaymentFlowStrategy>);
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v21 = v22 - 8;
  unint64_t v7 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v14);
  uint64_t v23 = (char *)&v6 - v7;
  uint64_t v32 = v3;
  uint64_t v31 = v1;
  uint64_t v8 = 0;
  uint64_t v18 = type metadata accessor for SendPaymentFlowStrategy();
  unint64_t v9 = type metadata accessor for INSendPaymentIntent();
  unint64_t v10 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v12 = v30;
  uint64_t v11 = &protocol witness table for INSendPaymentIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v9, v10, v30);
  uint64_t v13 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  uint64_t v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v12, (uint64_t)v13);
  uint64_t v19 = &v28;
  uint64_t v28 = v4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INSendPaymentIntent, INSendPaymentIntentResponse>);
  FlowFactory.sendPaymentFlowProducers(intent:)(v14, v16);
  uint64_t v17 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
  uint64_t v27 = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>();
  uint64_t v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.sendPaymentFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v104 = a1;
  uint64_t v114 = 0;
  uint64_t v95 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v142 = 0;
  uint64_t v141 = 0;
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSendPaymentIntent, INSendPaymentIntentResponse>);
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = v97 - 8;
  unint64_t v100 = (*(void *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v101 = (char *)&v32 - v100;
  uint64_t v142 = (char *)&v32 - v100;
  uint64_t v109 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v109 - 8);
  uint64_t v108 = v109 - 8;
  unint64_t v102 = (*(void *)(v107 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v114);
  uint64_t v2 = (char *)&v32 - v102;
  uint64_t v103 = (char *)&v32 - v102;
  unint64_t v105 = (*(void *)(*(void *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v104);
  uint64_t v106 = (uint64_t)&v32 - v105;
  uint64_t v141 = (char *)&v32 - v105;
  uint64_t v140 = v3;
  uint64_t v139 = v4;
  uint64_t v5 = SignpostName.makeSendPaymentFlowProducers.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v106);
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v2, v6, v109);
  unint64_t v116 = Logger.logObject.getter();
  int v115 = static os_log_type_t.debug.getter();
  uint64_t v112 = &v137;
  uint64_t v137 = 2;
  unint64_t v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v111 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v113 = v138;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v117 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v116, (os_log_type_t)v115))
  {
    uint64_t v7 = v96;
    os_log_type_t v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v83 = 0;
    uint64_t v85 = createStorage<A>(capacity:type:)(0);
    uint64_t v86 = createStorage<A>(capacity:type:)(v83);
    uint64_t v90 = &v121;
    uint64_t v121 = v84;
    uint64_t v91 = &v120;
    uint64_t v120 = v85;
    uint64_t v88 = &v119;
    uint64_t v119 = v86;
    unsigned int v87 = 0;
    serialize(_:at:)(0, &v121);
    serialize(_:at:)(v87, v90);
    uint64_t v118 = v117;
    uint64_t v89 = &v32;
    MEMORY[0x270FA5388](&v32);
    uint64_t v8 = v91;
    unint64_t v9 = &v32 - 6;
    uint64_t v92 = &v32 - 6;
    v9[2] = (uint64_t)v90;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v116, (os_log_type_t)v115, "#sendPaymentFlowProducers init", v84, v113);
      uint64_t v81 = 0;
      destroyStorage<A>(_:count:)(v85, 0, v82);
      destroyStorage<A>(_:count:)(v86, v81, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v84, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v107 + 8))(v103, v109);
  uint64_t v76 = 0;
  unint64_t v45 = type metadata accessor for INSendPaymentIntent();
  unint64_t v46 = type metadata accessor for INSendPaymentIntentResponse();
  RCHChildFlowProducersAsync.init()();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSendPaymentIntent>);
  uint32_t v47 = &protocol witness table for INSendPaymentIntent;
  uint64_t v36 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45);
  unint64_t v33 = v136;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45, (uint64_t)v136);
  unint64_t v34 = v135;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v135);
  uint64_t v35 = &v134;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  uint64_t v11 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45);
  uint64_t v12 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v36, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35, v11);
  int v38 = &v133;
  uint64_t v133 = v12;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  uint64_t v39 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  uint64_t v40 = v13;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v41 = type metadata accessor for SendTCCHandleStrategy();
  id v14 = v104;
  uint64_t v15 = SendTCCHandleStrategy.__allocating_init(previousIntent:)(v104);
  uint64_t v42 = &v132;
  uint64_t v132 = v15;
  lazy protocol witness table accessor for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  uint64_t v44 = v16;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse>);
  unint64_t v49 = v131;
  uint64_t v48 = &protocol witness table for INSendPaymentIntentResponse;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v45, v46, v131);
  os_log_type_t v50 = v130;
  default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v45, (uint64_t)v130);
  uint64_t v51 = v129;
  default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v45, v46, (uint64_t)v47, (uint64_t)v48, v129);
  uint64_t v17 = PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(v49, (uint64_t)v50, v51);
  uint64_t v53 = &v128;
  uint64_t v128 = v17;
  lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>();
  uint64_t v54 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  uint64_t v55 = v18;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  uint64_t v56 = type metadata accessor for SendPaymentUnsupportedValueStrategy();
  uint64_t v19 = SendPaymentUnsupportedValueStrategy.__allocating_init()();
  int v57 = &v127;
  uint64_t v127 = v19;
  lazy protocol witness table accessor for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy();
  uint64_t v58 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  uint64_t v59 = v20;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  uint64_t v60 = type metadata accessor for SendPaymentNeedsValueStrategy();
  uint64_t v21 = SendPaymentNeedsValueStrategy.__allocating_init()();
  uint64_t v61 = &v126;
  uint64_t v126 = v21;
  lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy();
  uint64_t v62 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  uint64_t v63 = v22;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  uint64_t v64 = type metadata accessor for PayeeDisambiguationStrategy();
  uint64_t v23 = PayeeDisambiguationStrategy.__allocating_init()();
  uint64_t v65 = &v125;
  uint64_t v125 = v23;
  lazy protocol witness table accessor for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>();
  uint64_t v66 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  uint64_t v67 = v24;
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  uint64_t v68 = type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy();
  uint64_t v25 = SendPaymentNeedsConfirmationFlowStrategy.__allocating_init()();
  uint64_t v69 = &v124;
  uint64_t v124 = v25;
  lazy protocol witness table accessor for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>();
  uint64_t v70 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  uint64_t v71 = v26;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  uint64_t v72 = type metadata accessor for SendPaymentConfirmIntentStrategy();
  uint64_t v27 = SendPaymentConfirmIntentStrategy.__allocating_init()();
  uint64_t v73 = &v123;
  uint64_t v123 = v27;
  lazy protocol witness table accessor for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy();
  uint64_t v74 = static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)();
  uint64_t v75 = v28;
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  uint64_t v77 = type metadata accessor for SendPaymentHandleIntentStrategy();
  uint64_t v29 = SendPaymentHandleIntentStrategy.__allocating_init()();
  uint64_t v78 = &v122;
  uint64_t v122 = v29;
  lazy protocol witness table accessor for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  uint64_t v79 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  uint64_t v80 = v30;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v94, v101, v97);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  return outlined destroy of Signpost.OpenSignpost(v106);
}

uint64_t FlowFactory.requestPaymentFlow(intent:)(void *a1)
{
  id v14 = a1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  unint64_t v6 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v16 = (uint64_t)&v6 - v6;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<RequestPaymentFlowStrategy>);
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v21 = v22 - 8;
  unint64_t v7 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v14);
  uint64_t v23 = (char *)&v6 - v7;
  uint64_t v32 = v3;
  uint64_t v31 = v1;
  uint64_t v8 = 0;
  uint64_t v18 = type metadata accessor for RequestPaymentFlowStrategy();
  unint64_t v9 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v10 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v12 = v30;
  uint64_t v11 = &protocol witness table for INRequestPaymentIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v9, v10, v30);
  uint64_t v13 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  uint64_t v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v12, (uint64_t)v13);
  uint64_t v19 = &v28;
  uint64_t v28 = v4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  FlowFactory.requestPaymentFlowProducers(intent:)(v14, v16);
  uint64_t v17 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
  uint64_t v27 = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>();
  uint64_t v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.requestPaymentFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v104 = a1;
  uint64_t v114 = 0;
  uint64_t v95 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v142 = 0;
  uint64_t v141 = 0;
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = v97 - 8;
  unint64_t v100 = (*(void *)(v98 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v101 = (char *)&v32 - v100;
  uint64_t v142 = (char *)&v32 - v100;
  uint64_t v109 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v109 - 8);
  uint64_t v108 = v109 - 8;
  unint64_t v102 = (*(void *)(v107 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v114);
  uint64_t v2 = (char *)&v32 - v102;
  uint64_t v103 = (char *)&v32 - v102;
  unint64_t v105 = (*(void *)(*(void *)(type metadata accessor for Signpost.OpenSignpost() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v104);
  uint64_t v106 = (uint64_t)&v32 - v105;
  uint64_t v141 = (char *)&v32 - v105;
  uint64_t v140 = v3;
  uint64_t v139 = v4;
  uint64_t v5 = SignpostName.makeRequestPaymentFlowProducers.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v5, v5[1], *((unsigned __int8 *)v5 + 16), v106);
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v2, v6, v109);
  unint64_t v116 = Logger.logObject.getter();
  int v115 = static os_log_type_t.debug.getter();
  uint64_t v112 = &v137;
  uint64_t v137 = 2;
  unint64_t v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v111 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v113 = v138;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v117 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v116, (os_log_type_t)v115))
  {
    uint64_t v7 = v96;
    os_log_type_t v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v83 = 0;
    uint64_t v85 = createStorage<A>(capacity:type:)(0);
    uint64_t v86 = createStorage<A>(capacity:type:)(v83);
    uint64_t v90 = &v121;
    uint64_t v121 = v84;
    uint64_t v91 = &v120;
    uint64_t v120 = v85;
    uint64_t v88 = &v119;
    uint64_t v119 = v86;
    unsigned int v87 = 0;
    serialize(_:at:)(0, &v121);
    serialize(_:at:)(v87, v90);
    uint64_t v118 = v117;
    uint64_t v89 = &v32;
    MEMORY[0x270FA5388](&v32);
    uint64_t v8 = v91;
    unint64_t v9 = &v32 - 6;
    uint64_t v92 = &v32 - 6;
    v9[2] = (uint64_t)v90;
    v9[3] = (uint64_t)v8;
    v9[4] = v10;
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v116, (os_log_type_t)v115, "#requestPaymentFlowProducers init", v84, v113);
      uint64_t v81 = 0;
      destroyStorage<A>(_:count:)(v85, 0, v82);
      destroyStorage<A>(_:count:)(v86, v81, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v84, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v107 + 8))(v103, v109);
  uint64_t v76 = 0;
  unint64_t v45 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v46 = type metadata accessor for INRequestPaymentIntentResponse();
  RCHChildFlowProducersAsync.init()();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent>);
  uint32_t v47 = &protocol witness table for INRequestPaymentIntent;
  uint64_t v36 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45);
  unint64_t v33 = v136;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45, (uint64_t)v136);
  unint64_t v34 = v135;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v135);
  uint64_t v35 = &v134;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  uint64_t v11 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v45);
  uint64_t v12 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v36, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35, v11);
  int v38 = &v133;
  uint64_t v133 = v12;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  uint64_t v39 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  uint64_t v40 = v13;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v41 = type metadata accessor for RequestTCCHandleStrategy();
  id v14 = v104;
  uint64_t v15 = RequestTCCHandleStrategy.__allocating_init(previousIntent:)(v104);
  uint64_t v42 = &v132;
  uint64_t v132 = v15;
  lazy protocol witness table accessor for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  uint64_t v43 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  uint64_t v44 = v16;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  unint64_t v49 = v131;
  uint64_t v48 = &protocol witness table for INRequestPaymentIntentResponse;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v45, v46, v131);
  os_log_type_t v50 = v130;
  default argument 1 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v45, (uint64_t)v130);
  uint64_t v51 = v129;
  default argument 2 of PaymentsContinueInAppStrategy.init(globals:commonLabelsProvider:errorTemplateProvider:)(v45, v46, (uint64_t)v47, (uint64_t)v48, v129);
  uint64_t v17 = PaymentsContinueInAppStrategy.__allocating_init(globals:commonLabelsProvider:errorTemplateProvider:)(v49, (uint64_t)v50, v51);
  uint64_t v53 = &v128;
  uint64_t v128 = v17;
  lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>();
  uint64_t v54 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  uint64_t v55 = v18;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  uint64_t v56 = type metadata accessor for RequestPaymentUnsupportedValueStrategy();
  uint64_t v19 = RequestPaymentUnsupportedValueStrategy.__allocating_init()();
  int v57 = &v127;
  uint64_t v127 = v19;
  lazy protocol witness table accessor for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy();
  uint64_t v58 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
  uint64_t v59 = v20;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  uint64_t v60 = type metadata accessor for RequestPaymentNeedsValueStrategy();
  uint64_t v21 = RequestPaymentNeedsValueStrategy.__allocating_init()();
  uint64_t v61 = &v126;
  uint64_t v126 = v21;
  lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy();
  uint64_t v62 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  uint64_t v63 = v22;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  uint64_t v64 = type metadata accessor for PayerDisambiguationStrategy();
  uint64_t v23 = PayerDisambiguationStrategy.__allocating_init()();
  uint64_t v65 = &v125;
  uint64_t v125 = v23;
  lazy protocol witness table accessor for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>();
  uint64_t v66 = static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  uint64_t v67 = v24;
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  uint64_t v68 = type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy();
  uint64_t v25 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init()();
  uint64_t v69 = &v124;
  uint64_t v124 = v25;
  lazy protocol witness table accessor for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>();
  uint64_t v70 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  uint64_t v71 = v26;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  uint64_t v72 = type metadata accessor for RequestPaymentConfirmIntentStrategy();
  uint64_t v27 = RequestPaymentConfirmIntentStrategy.__allocating_init()();
  uint64_t v73 = &v123;
  uint64_t v123 = v27;
  lazy protocol witness table accessor for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy();
  uint64_t v74 = static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)();
  uint64_t v75 = v28;
  swift_release();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  uint64_t v77 = type metadata accessor for RequestPaymentHandleIntentStrategy();
  uint64_t v29 = RequestPaymentHandleIntentStrategy.__allocating_init()();
  uint64_t v78 = &v122;
  uint64_t v122 = v29;
  lazy protocol witness table accessor for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  uint64_t v79 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  uint64_t v80 = v30;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v94, v101, v97);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  return outlined destroy of Signpost.OpenSignpost(v106);
}

uint64_t FlowFactory.searchForAccountsFlow(intent:)(void *a1)
{
  id v14 = a1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  unint64_t v6 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v16 = (uint64_t)&v6 - v6;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<SearchForAccountsFlowStrategy>);
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v21 = v22 - 8;
  unint64_t v7 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v14);
  uint64_t v23 = (char *)&v6 - v7;
  uint64_t v32 = v3;
  uint64_t v31 = v1;
  uint64_t v8 = 0;
  uint64_t v18 = type metadata accessor for SearchForAccountsFlowStrategy();
  unint64_t v9 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v10 = type metadata accessor for INSearchForAccountsIntentResponse();
  uint64_t v12 = v30;
  uint64_t v11 = &protocol witness table for INSearchForAccountsIntent;
  default argument 0 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v9, v10, v30);
  uint64_t v13 = v29;
  default argument 1 of PaymentsRCHFlowStrategy.init(globals:contactResolver:)(v29);
  uint64_t v4 = SendPaymentFlowStrategy.__allocating_init(globals:contactResolver:)((uint64_t)v12, (uint64_t)v13);
  uint64_t v19 = &v28;
  uint64_t v28 = v4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  FlowFactory.searchForAccountsFlowProducers(intent:)(v14, v16);
  uint64_t v17 = RCHChildFlowFactory.__allocating_init(producers:)();
  lazy protocol witness table accessor for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v24 = RCHFlowFactory.makeAppResolvingRCHFlow()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
  uint64_t v27 = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>>);
  lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>();
  uint64_t v26 = Flow.eraseToAnyFlow()();
  swift_release();
  return v26;
}

uint64_t FlowFactory.searchForAccountsFlowProducers(intent:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v51 = a1;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>);
  uint64_t v62 = *(void *)(v66 - 8);
  uint64_t v63 = v66 - 8;
  unint64_t v21 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v65 = (char *)&v20 - v21;
  uint64_t v81 = (char *)&v20 - v21;
  uint64_t v80 = MEMORY[0x270FA5388](v51);
  uint64_t v79 = v2;
  uint64_t v57 = 0;
  unint64_t v28 = type metadata accessor for INSearchForAccountsIntent();
  unint64_t v53 = type metadata accessor for INSearchForAccountsIntentResponse();
  RCHChildFlowProducersAsync.init()();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent>);
  uint64_t v22 = &protocol witness table for INSearchForAccountsIntent;
  uint64_t v26 = default argument 0 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28);
  uint64_t v23 = v78;
  default argument 1 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28, (uint64_t)v78);
  uint64_t v24 = v77;
  default argument 2 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v77);
  uint64_t v25 = &v76;
  default argument 3 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)();
  uint64_t v3 = default argument 4 of PaymentsAppResolutionFlowStrategy.init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v28);
  uint64_t v4 = PaymentsAppResolutionFlowStrategy.__allocating_init(appResolutionService:commonLabelsProvider:contactResolver:deviceState:baseCATs:)(v26, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25, v3);
  uint64_t v29 = &v75;
  uint64_t v75 = v4;
  lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>();
  uint64_t v30 = static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B, C>(strategy:)();
  uint64_t v31 = v5;
  swift_release();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  uint64_t v32 = type metadata accessor for SearchForAccountsContinueInAppStrategy();
  uint64_t v6 = SearchForAccountsContinueInAppStrategy.__allocating_init()();
  unint64_t v33 = &v74;
  uint64_t v74 = v6;
  lazy protocol witness table accessor for type SearchForAccountsContinueInAppStrategy and conformance SearchForAccountsContinueInAppStrategy();
  uint64_t v34 = static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  uint64_t v35 = v7;
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  uint64_t v36 = type metadata accessor for SearchForAccountsHandleIntentStrategy();
  uint64_t v8 = SearchForAccountsHandleIntentStrategy.__allocating_init()();
  uint64_t v37 = &v73;
  uint64_t v73 = v8;
  lazy protocol witness table accessor for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>();
  uint64_t v38 = static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  uint64_t v39 = v9;
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  uint64_t v43 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  uint64_t v40 = v72;
  default argument 0 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(v72);
  uint64_t v41 = default argument 1 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)();
  uint64_t v42 = v71;
  default argument 2 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(v41, (uint64_t)v71);
  unint64_t v10 = SearchForAccountsNeedsConfirmationStrategy.__allocating_init(globals:catFamily:commonLabelsProvider:)(v40, v41, (uint64_t)v42);
  uint64_t v44 = &v70;
  uint64_t v70 = v10;
  lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy();
  uint64_t v45 = static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  uint64_t v46 = v11;
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  uint64_t v47 = type metadata accessor for SearchForAccountsNeedsValueStrategy();
  uint64_t v12 = SearchForAccountsNeedsValueStrategy.__allocating_init()();
  uint64_t v48 = &v69;
  uint64_t v69 = v12;
  lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy();
  uint64_t v49 = static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  uint64_t v50 = v13;
  swift_release();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  uint64_t v52 = type metadata accessor for SearchForAccountsTCCHandleStrategy();
  id v14 = v51;
  uint64_t v15 = SearchForAccountsTCCHandleStrategy.__allocating_init(previousIntent:)(v51);
  uint64_t v54 = &v68;
  uint64_t v68 = v15;
  lazy protocol witness table accessor for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>();
  uint64_t v55 = static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  uint64_t v56 = v16;
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  uint64_t v58 = type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
  uint64_t v17 = SearchForAccountsUnsupportedValueStrategy.__allocating_init()();
  uint64_t v59 = &v67;
  uint64_t v67 = v17;
  lazy protocol witness table accessor for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy();
  uint64_t v60 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
  uint64_t v61 = v18;
  swift_release();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v64, v65, v66);
}

uint64_t default argument 0 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Globals();
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v7);
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t result = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for Globals;
  *a1 = result;
  return result;
}

uint64_t default argument 1 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)()
{
  uint64_t v4 = 0;
  unint64_t v2 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v3 = (char *)&v1 - v2;
  type metadata accessor for SearchForAccountsCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  return CATWrapper.__allocating_init(options:globals:)();
}

NSJSONWritingOptions default argument 2 of SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result = NSJSONWritingOptions.init(rawValue:)(a1);
  *(void *)(a2 + 24) = &type metadata for CommonLabelsProvider;
  *(void *)(a2 + 32) = &protocol witness table for CommonLabelsProvider;
  return result;
}

uint64_t FlowFactory.makeApplyForAppleCardFlow()()
{
  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  uint64_t v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in FlowFactory.makeApplyForAppleCardFlow()(uint64_t a1, uint64_t a2)
{
  v2[107] = a2;
  v2[106] = a1;
  v2[101] = v2;
  v2[102] = 0;
  v2[103] = 0;
  v2[104] = 0;
  v2[105] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v2[108] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[109] = v3;
  v2[110] = *(void *)(v3 - 8);
  v2[111] = swift_task_alloc();
  v2[112] = swift_task_alloc();
  v2[113] = swift_task_alloc();
  v2[114] = swift_task_alloc();
  v2[115] = swift_task_alloc();
  v2[116] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[117] = v4;
  v2[118] = *(void *)(v4 - 8);
  v2[119] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[120] = swift_task_alloc();
  v2[102] = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeApplyForAppleCardFlow(), 0);
}

uint64_t closure #1 in FlowFactory.makeApplyForAppleCardFlow()()
{
  uint64_t v18 = *(void *)(v0 + 952);
  uint64_t v17 = *(void *)(v0 + 944);
  uint64_t v19 = *(void *)(v0 + 936);
  *(void *)(v0 + 808) = v0;
  type metadata accessor for SearchForCardInfoCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v16 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v0 + 968) = v16;
  *(void *)(v0 + 824) = v16;
  static Locale.current.getter();
  uint64_t v20 = Locale.identifier.getter();
  uint64_t v21 = v1;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  *(void *)(v0 + 776) = v20;
  *(void *)(v0 + 784) = v21;
  *(Swift::String *)(v0 + 792) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_US", 3uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  char v22 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  if (v22)
  {
    outlined init with copy of GlobalsProviding(v15[107] + 16, (uint64_t)(v15 + 42));
    __swift_project_boxed_opaque_existential_1(v15 + 42, v15[45]);
    char v14 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if (v14)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 42));
      swift_retain();
    }
    else
    {
      outlined init with copy of GlobalsProviding(v15[107] + 16, (uint64_t)(v15 + 47));
      __swift_project_boxed_opaque_existential_1(v15 + 47, v15[50]);
      char v13 = dispatch thunk of DeviceState.isPad.getter();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 47));
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 42));
      swift_retain();
      if ((v13 & 1) == 0)
      {
        outlined init with copy of GlobalsProviding(v15[107] + 16, (uint64_t)(v15 + 52));
        __swift_project_boxed_opaque_existential_1(v15 + 52, v15[55]);
        char v12 = dispatch thunk of DeviceState.isPod.getter();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 52));
        swift_release();
        if ((v12 & 1) == 0)
        {
LABEL_11:
          uint64_t v5 = (void *)swift_task_alloc();
          v15[126] = v5;
          void *v5 = v15[101];
          v5[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
          uint64_t v6 = v15[114];
          return SearchForCardInfoCATs.unsupportedDevice()(v6);
        }
LABEL_7:
        outlined init with copy of GlobalsProviding(v15[107] + 16, (uint64_t)(v15 + 72));
        __swift_project_boxed_opaque_existential_1(v15 + 72, v15[75]);
        char v11 = dispatch thunk of DeviceState.isCarPlay.getter();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 72));
        if ((v11 & 1) == 0)
        {
          unint64_t v2 = (void *)swift_task_alloc();
          v15[122] = v2;
          *unint64_t v2 = v15[101];
          v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
          uint64_t v3 = v15[116];
          return SearchForCardInfoCATs.apply()(v3);
        }
        goto LABEL_11;
      }
    }
    swift_release();
    goto LABEL_7;
  }
  outlined init with copy of GlobalsProviding(v15[107] + 16, (uint64_t)(v15 + 2));
  __swift_project_boxed_opaque_existential_1(v15 + 2, v15[5]);
  char v10 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v15 + 2));
  if (v10)
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v15[128] = v7;
    *uint64_t v7 = v15[101];
    v7[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
    uint64_t v6 = v15[113];
    return SearchForCardInfoCATs.unsupportedDevice()(v6);
  }
  uint64_t v8 = (void *)swift_task_alloc();
  v15[130] = v8;
  *uint64_t v8 = v15[101];
  v8[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  uint64_t v9 = v15[112];
  return SearchForCardInfoCATs.unsupportedLocale()(v9);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 808);
  *(void *)(v7 + 808) = *v1;
  *(void *)(v7 + 984) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeApplyForAppleCardFlow(), 0);
  }
  else
  {
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v5 + 976) = v2;
    *unint64_t v2 = *v6;
    v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
    uint64_t v3 = *(void *)(v5 + 904);
    return SearchForCardInfoCATs.openWallet()(v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 808) = *v1;
  *(void *)(v4 + 1000) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v16 = v0[116];
  uint64_t v15 = v0[115];
  char v14 = v0[110];
  uint64_t v17 = v0[109];
  char v13 = v0[108];
  char v11 = v0[107];
  char v12 = (uint64_t *)v0[106];
  v0[101] = v0;
  type metadata accessor for SAAceView();
  char v10 = _allocateUninitializedArray<A>(_:)();
  uint64_t v9 = v1;
  uint64_t v6 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v7 = v2;
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 77));
  uint64_t v8 = static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(0, v6, v7, v0 + 77);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 77));
  swift_bridgeObjectRelease();
  *uint64_t v9 = v8;
  _finalizeUninitializedArray<A>(_:)();
  v0[105] = v10;
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 82));
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 87));
  __swift_project_boxed_opaque_existential_1(v0 + 87, v0[90]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v13, 1);
  v0[92] = 0;
  v0[93] = 0;
  v0[94] = 0;
  v0[95] = 0;
  v0[96] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v12[3] = type metadata accessor for AceOutput();
  void v12[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v12);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 92));
  outlined destroy of NLContextUpdate?(v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 87));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 82));
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v18(v15, v17);
  v18(v16, v17);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[101] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 808) = *v1;
  *(void *)(v4 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = v0[114];
  uint64_t v7 = v0[110];
  uint64_t v9 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v4 = v0[107];
  uint64_t v5 = (uint64_t *)v0[106];
  v0[101] = v0;
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 57));
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 62));
  __swift_project_boxed_opaque_existential_1(v0 + 62, v0[65]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v6, 1);
  v0[67] = 0;
  v0[68] = 0;
  v0[69] = 0;
  v0[70] = 0;
  v0[71] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 67));
  outlined destroy of NLContextUpdate?(v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 57));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0[101] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 808) = *v1;
  *(void *)(v4 + 1032) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = v0[113];
  uint64_t v7 = v0[110];
  uint64_t v9 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v4 = v0[107];
  uint64_t v5 = (uint64_t *)v0[106];
  v0[101] = v0;
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v6, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0[101] + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 808);
  *(void *)(v7 + 808) = *v1;
  *(void *)(v7 + 1048) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeApplyForAppleCardFlow(), 0);
  }
  else
  {
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v5 + 1040) = v2;
    *unint64_t v2 = *v6;
    v2[1] = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
    uint64_t v3 = *(void *)(v5 + 872);
    return SearchForCardInfoCATs.openAppleWebsite()(v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 808) = *v1;
  *(void *)(v4 + 1064) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeApplyForAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  uint64_t v19 = v0[112];
  uint64_t v18 = v0[111];
  uint64_t v17 = v0[110];
  uint64_t v20 = v0[109];
  uint64_t v16 = v0[108];
  char v14 = v0[107];
  uint64_t v15 = (uint64_t *)v0[106];
  v0[101] = v0;
  type metadata accessor for SAAceView();
  char v13 = _allocateUninitializedArray<A>(_:)();
  char v12 = v1;
  unint64_t v2 = (uint64_t *)String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor();
  uint64_t v8 = *v2;
  char v10 = v2[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v9 = v3;
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 7));
  char v11 = static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(v8, v10, v7, v9, v0 + 7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *char v12 = v11;
  _finalizeUninitializedArray<A>(_:)();
  v0[104] = v13;
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 12));
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 17));
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v16, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v15[3] = type metadata accessor for AceOutput();
  v15[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v15);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v21(v18, v20);
  v21(v19, v20);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0[101] + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 808) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 808) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[112];
  unint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  v0[101] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[101] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 808) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[116];
  unint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  v0[101] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[101] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 808) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 808) + 8);
  return v1();
}

uint64_t FlowFactory.makeLearnAboutAppleCardFlow()()
{
  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  uint64_t v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(uint64_t a1, uint64_t a2)
{
  v2[97] = a2;
  v2[96] = a1;
  v2[91] = v2;
  v2[92] = 0;
  v2[93] = 0;
  v2[94] = 0;
  v2[95] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v2[98] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[99] = v3;
  v2[100] = *(void *)(v3 - 8);
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v2[106] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[107] = v4;
  v2[108] = *(void *)(v4 - 8);
  v2[109] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[110] = swift_task_alloc();
  v2[92] = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeLearnAboutAppleCardFlow(), 0);
}

uint64_t closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()()
{
  uint64_t v16 = *(void *)(v0 + 872);
  uint64_t v15 = *(void *)(v0 + 864);
  uint64_t v17 = *(void *)(v0 + 856);
  *(void *)(v0 + 728) = v0;
  type metadata accessor for SearchForCardInfoCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v0 + 888) = v14;
  *(void *)(v0 + 744) = v14;
  static Locale.current.getter();
  uint64_t v18 = Locale.identifier.getter();
  uint64_t v19 = v1;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  *(void *)(v0 + 696) = v18;
  *(void *)(v0 + 704) = v19;
  *(Swift::String *)(v0 + 712) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_US", 3uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  char v20 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  if (v20)
  {
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 42));
    __swift_project_boxed_opaque_existential_1(v13 + 42, v13[45]);
    char v12 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if ((v12 & 1) == 0)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 42));
      goto LABEL_9;
    }
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 82));
    __swift_project_boxed_opaque_existential_1(v13 + 82, v13[85]);
    char v11 = dispatch thunk of DeviceState.isCarPlay.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 82));
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 42));
    if (v11)
    {
LABEL_9:
      uint64_t v5 = (void *)swift_task_alloc();
      v13[116] = v5;
      void *v5 = v13[91];
      v5[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      uint64_t v6 = v13[104];
      return SearchForCardInfoCATs.unsupportedDevice()(v6);
    }
    unint64_t v2 = (void *)swift_task_alloc();
    v13[112] = v2;
    *unint64_t v2 = v13[91];
    v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v3 = v13[106];
    return SearchForCardInfoCATs.learn()(v3);
  }
  else
  {
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 2));
    __swift_project_boxed_opaque_existential_1(v13 + 2, v13[5]);
    char v10 = dispatch thunk of DeviceState.isWatch.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 2));
    if (v10)
    {
      uint64_t v7 = (void *)swift_task_alloc();
      v13[118] = v7;
      *uint64_t v7 = v13[91];
      v7[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      uint64_t v6 = v13[103];
      return SearchForCardInfoCATs.unsupportedDevice()(v6);
    }
    uint64_t v8 = (void *)swift_task_alloc();
    v13[120] = v8;
    *uint64_t v8 = v13[91];
    v8[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v9 = v13[102];
    return SearchForCardInfoCATs.unsupportedLocale()(v9);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 728);
  *(void *)(v7 + 728) = *v1;
  *(void *)(v7 + 904) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeLearnAboutAppleCardFlow(), 0);
  }
  else
  {
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v5 + 896) = v2;
    *unint64_t v2 = *v6;
    v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v3 = *(void *)(v5 + 824);
    return SearchForCardInfoCATs.openWallet()(v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 728) = *v1;
  *(void *)(v4 + 920) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v16 = v0[106];
  uint64_t v15 = v0[105];
  uint64_t v14 = v0[100];
  uint64_t v17 = v0[99];
  char v13 = v0[98];
  char v11 = v0[97];
  char v12 = (uint64_t *)v0[96];
  v0[91] = v0;
  type metadata accessor for SAAceView();
  char v10 = _allocateUninitializedArray<A>(_:)();
  uint64_t v9 = v1;
  uint64_t v6 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v7 = v2;
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 62));
  uint64_t v8 = static ConfirmationViewBuilder.makeWalletAppLaunchButton(launchAction:buttonText:deviceState:)(1u, v6, v7, v0 + 62);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 62));
  swift_bridgeObjectRelease();
  *uint64_t v9 = v8;
  _finalizeUninitializedArray<A>(_:)();
  v0[95] = v10;
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 67));
  outlined init with copy of GlobalsProviding(v11 + 16, (uint64_t)(v0 + 72));
  __swift_project_boxed_opaque_existential_1(v0 + 72, v0[75]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v13, 1);
  v0[77] = 0;
  v0[78] = 0;
  v0[79] = 0;
  v0[80] = 0;
  v0[81] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v12[3] = type metadata accessor for AceOutput();
  void v12[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v12);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 77));
  outlined destroy of NLContextUpdate?(v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 72));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 67));
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v18(v15, v17);
  v18(v16, v17);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[91] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 728) = *v1;
  *(void *)(v4 + 936) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = v0[104];
  uint64_t v7 = v0[100];
  uint64_t v9 = v0[99];
  uint64_t v6 = v0[98];
  uint64_t v4 = v0[97];
  uint64_t v5 = (uint64_t *)v0[96];
  v0[91] = v0;
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 47));
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 52));
  __swift_project_boxed_opaque_existential_1(v0 + 52, v0[55]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v6, 1);
  v0[57] = 0;
  v0[58] = 0;
  v0[59] = 0;
  v0[60] = 0;
  v0[61] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 57));
  outlined destroy of NLContextUpdate?(v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 52));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 47));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0[91] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 728) = *v1;
  *(void *)(v4 + 952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = v0[103];
  uint64_t v7 = v0[100];
  uint64_t v9 = v0[99];
  uint64_t v6 = v0[98];
  uint64_t v4 = v0[97];
  uint64_t v5 = (uint64_t *)v0[96];
  v0[91] = v0;
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 27));
  outlined init with copy of GlobalsProviding(v4 + 16, (uint64_t)(v0 + 32));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v6, 1);
  v0[37] = 0;
  v0[38] = 0;
  v0[39] = 0;
  v0[40] = 0;
  v0[41] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 37));
  outlined destroy of NLContextUpdate?(v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0[91] + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 728);
  *(void *)(v7 + 728) = *v1;
  *(void *)(v7 + 968) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeLearnAboutAppleCardFlow(), 0);
  }
  else
  {
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v5 + 960) = v2;
    *unint64_t v2 = *v6;
    v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v3 = *(void *)(v5 + 792);
    return SearchForCardInfoCATs.openAppleWebsite()(v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 728) = *v1;
  *(void *)(v4 + 984) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  else
  {
    unint64_t v2 = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  uint64_t v19 = v0[102];
  uint64_t v18 = v0[101];
  uint64_t v17 = v0[100];
  char v20 = v0[99];
  uint64_t v16 = v0[98];
  uint64_t v14 = v0[97];
  uint64_t v15 = (uint64_t *)v0[96];
  v0[91] = v0;
  type metadata accessor for SAAceView();
  char v13 = _allocateUninitializedArray<A>(_:)();
  char v12 = v1;
  unint64_t v2 = (uint64_t *)String.APPLE_CARD_WEB_PAGE_LINK.unsafeMutableAddressor();
  uint64_t v8 = *v2;
  char v10 = v2[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v9 = v3;
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 7));
  char v11 = static ConfirmationViewBuilder.makeWebPunchoutButton(for:buttonText:deviceState:)(v8, v10, v7, v9, v0 + 7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *char v12 = v11;
  _finalizeUninitializedArray<A>(_:)();
  v0[94] = v13;
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 12));
  outlined init with copy of GlobalsProviding(v14 + 16, (uint64_t)(v0 + 17));
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v16, 1);
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v15[3] = type metadata accessor for AceOutput();
  v15[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v15);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  outlined destroy of NLContextUpdate?(v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v21(v18, v20);
  v21(v19, v20);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0[91] + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 728) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 728) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[102];
  unint64_t v2 = v0[100];
  uint64_t v3 = v0[99];
  v0[91] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[91] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 728) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[106];
  unint64_t v2 = v0[100];
  uint64_t v3 = v0[99];
  v0[91] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[91] + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 728) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 728) + 8);
  return v1();
}

uint64_t FlowFactory.makeAppleCardBalanceOutputFlow()()
{
  type metadata accessor for SimpleOutputFlowAsync();
  swift_retain();
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
  uint64_t v1 = Flow.eraseToAnyFlow()();
  swift_release();
  return v1;
}

uint64_t closure #1 in FlowFactory.makeAppleCardBalanceOutputFlow()(uint64_t a1, uint64_t a2)
{
  v2[97] = a2;
  v2[96] = a1;
  v2[91] = v2;
  v2[92] = 0;
  v2[93] = 0;
  v2[94] = 0;
  v2[95] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v2[98] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[99] = v3;
  v2[100] = *(void *)(v3 - 8);
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v2[106] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[107] = v4;
  v2[108] = *(void *)(v4 - 8);
  v2[109] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[110] = swift_task_alloc();
  v2[92] = a2;
  return MEMORY[0x270FA2498](closure #1 in FlowFactory.makeAppleCardBalanceOutputFlow(), 0);
}

uint64_t closure #1 in FlowFactory.makeAppleCardBalanceOutputFlow()()
{
  uint64_t v16 = *(void *)(v0 + 872);
  uint64_t v15 = *(void *)(v0 + 864);
  uint64_t v17 = *(void *)(v0 + 856);
  *(void *)(v0 + 728) = v0;
  type metadata accessor for SearchForCardInfoCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  *(void *)(v0 + 888) = v14;
  *(void *)(v0 + 744) = v14;
  static Locale.current.getter();
  uint64_t v18 = Locale.identifier.getter();
  uint64_t v19 = v1;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  *(void *)(v0 + 696) = v18;
  *(void *)(v0 + 704) = v19;
  *(Swift::String *)(v0 + 712) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_US", 3uLL, 1);
  lazy protocol witness table accessor for type String and conformance String();
  char v20 = StringProtocol.contains<A>(_:)();
  outlined destroy of String.UTF8View();
  outlined destroy of String.UTF8View();
  if (v20)
  {
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 42));
    __swift_project_boxed_opaque_existential_1(v13 + 42, v13[45]);
    char v12 = dispatch thunk of DeviceState.isPhone.getter();
    swift_retain();
    if ((v12 & 1) == 0)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 42));
      goto LABEL_9;
    }
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 82));
    __swift_project_boxed_opaque_existential_1(v13 + 82, v13[85]);
    char v11 = dispatch thunk of DeviceState.isCarPlay.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 82));
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 42));
    if (v11)
    {
LABEL_9:
      uint64_t v5 = (void *)swift_task_alloc();
      v13[116] = v5;
      void *v5 = v13[91];
      v5[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      uint64_t v6 = v13[104];
      return SearchForCardInfoCATs.unsupportedDevice()(v6);
    }
    unint64_t v2 = (void *)swift_task_alloc();
    v13[112] = v2;
    *unint64_t v2 = v13[91];
    v2[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v3 = v13[106];
    return SearchForCardInfoCATs.appleCardBalance()(v3);
  }
  else
  {
    outlined init with copy of GlobalsProviding(v13[97] + 16, (uint64_t)(v13 + 2));
    __swift_project_boxed_opaque_existential_1(v13 + 2, v13[5]);
    char v10 = dispatch thunk of DeviceState.isWatch.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v13 + 2));
    if (v10)
    {
      uint64_t v7 = (void *)swift_task_alloc();
      v13[118] = v7;
      *uint64_t v7 = v13[91];
      v7[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
      uint64_t v6 = v13[103];
      return SearchForCardInfoCATs.unsupportedDevice()(v6);
    }
    uint64_t v8 = (void *)swift_task_alloc();
    v13[120] = v8;
    *uint64_t v8 = v13[91];
    v8[1] = closure #1 in FlowFactory.makeLearnAboutAppleCardFlow();
    uint64_t v9 = v13[102];
    return SearchForCardInfoCATs.unsupportedLocale()(v9);
  }
}

uint64_t FlowFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  return v2;
}

uint64_t FlowFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for FlowProviding.deviceState.getter in conformance FlowFactory@<X0>(uint64_t a1@<X8>)
{
  return FlowFactory.deviceState.getter(a1);
}

uint64_t protocol witness for FlowProviding.findFlow(for:) in conformance FlowFactory(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return v6(a1);
}

uint64_t protocol witness for FlowProviding.guardFlow(with:) in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for FlowProviding.sendPaymentFlow(intent:) in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for FlowProviding.requestPaymentFlow(intent:) in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for FlowProviding.searchForAccountsFlow(intent:) in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for FlowProviding.unsupportedActionFlow() in conformance FlowFactory()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 120) + **(int **)(**(void **)v0 + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return v5();
}

uint64_t protocol witness for FlowProviding.unsupportedOnDeviceFlow() in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for FlowProviding.makeAppleCardBalanceOutputFlow() in conformance FlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_25D8CB630()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB65C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB688()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB6C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB708()
{
  uint64_t v2 = *(void *)(type metadata accessor for USOParse() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in FlowFactory.findFlow(for:)()
{
  type metadata accessor for USOParse();

  return implicit closure #1 in FlowFactory.findFlow(for:)();
}

uint64_t sub_25D8CB83C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB868()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB894()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CB8D4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25D8CBA48()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in FlowFactory.findFlow(for:)()
{
  return implicit closure #2 in FlowFactory.findFlow(for:)(v0 + 16);
}

uint64_t sub_25D8CBA90()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CBABC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CBAE8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8CBB28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedActionFlow()(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.unsupportedActionFlow()(a1, v5);
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedActionFlow()()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t partial apply for closure #1 in FlowFactory.unsupportedOnDeviceFlow()(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.unsupportedOnDeviceFlow()(a1, v5);
}

unint64_t lazy protocol witness table accessor for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    type metadata accessor for SendPaymentFlowStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSendPaymentIntent, INSendPaymentIntentResponse>> and conformance AnyValueFlow<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSendPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSendPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    type metadata accessor for SendTCCHandleStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy)
  {
    type metadata accessor for SendPaymentUnsupportedValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentUnsupportedValueStrategy and conformance SendPaymentUnsupportedValueStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy)
  {
    type metadata accessor for SendPaymentNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy)
  {
    type metadata accessor for SendPaymentNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsValueStrategy and conformance SendPaymentNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>)
  {
    type metadata accessor for PayeeDisambiguationStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PayeeDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>)
  {
    type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy;
  if (!lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy)
  {
    type metadata accessor for SendPaymentConfirmIntentStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentConfirmIntentStrategy and conformance SendPaymentConfirmIntentStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    type metadata accessor for SendPaymentHandleIntentStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SendPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    type metadata accessor for RequestPaymentFlowStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INRequestPaymentIntent, INRequestPaymentIntentResponse>> and conformance AnyValueFlow<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INRequestPaymentIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    type metadata accessor for RequestTCCHandleStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsContinueInAppStrategy<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsContinueInAppStrategy<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy)
  {
    type metadata accessor for RequestPaymentUnsupportedValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentUnsupportedValueStrategy and conformance RequestPaymentUnsupportedValueStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy)
  {
    type metadata accessor for RequestPaymentNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy)
  {
    type metadata accessor for RequestPaymentNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsValueStrategy and conformance RequestPaymentNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>)
  {
    type metadata accessor for PayerDisambiguationStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PayerDisambiguationStrategy and conformance ContactDisambiguationStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>)
  {
    type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentNeedsConfirmationFlowStrategy and conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy;
  if (!lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy)
  {
    type metadata accessor for RequestPaymentConfirmIntentStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentConfirmIntentStrategy and conformance RequestPaymentConfirmIntentStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    type metadata accessor for RequestPaymentHandleIntentStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaymentHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>)
  {
    type metadata accessor for SearchForAccountsFlowStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsFlowStrategy and conformance PaymentsRCHFlowStrategy<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INSearchForAccountsIntent, INSearchForAccountsIntentResponse>> and conformance AnyValueFlow<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>;
  if (!lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsAppResolutionFlowStrategy<INSearchForAccountsIntent> and conformance PaymentsAppResolutionFlowStrategy<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>)
  {
    type metadata accessor for SearchForAccountsHandleIntentStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsHandleIntentStrategy and conformance BaseStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy)
  {
    type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy)
  {
    type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy)
  {
    type metadata accessor for SearchForAccountsNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy)
  {
    type metadata accessor for SearchForAccountsNeedsValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsNeedsValueStrategy and conformance SearchForAccountsNeedsValueStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>;
  if (!lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>)
  {
    type metadata accessor for SearchForAccountsTCCHandleStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsTCCHandleStrategy and conformance TCCHandleStrategy<A, B, C>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy;
  if (!lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy)
  {
    type metadata accessor for SearchForAccountsUnsupportedValueStrategy();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SearchForAccountsUnsupportedValueStrategy and conformance SearchForAccountsUnsupportedValueStrategy);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #1 in FlowFactory.makeApplyForAppleCardFlow()(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.makeApplyForAppleCardFlow()(a1, v5);
}

uint64_t partial apply for closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.makeLearnAboutAppleCardFlow()(a1, v5);
}

uint64_t partial apply for closure #1 in FlowFactory.makeAppleCardBalanceOutputFlow()(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #1 in FlowFactory.unsupportedActionFlow();
  return closure #1 in FlowFactory.makeAppleCardBalanceOutputFlow()(a1, v5);
}

uint64_t type metadata accessor for FlowFactory()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

uint64_t default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)()
{
  return 4;
}

float static USOEntityNumberExtractor.preciseRound(_:_:)(uint64_t a1, float a2)
{
  float v21 = a2;
  uint64_t v18 = a1;
  int v45 = 0;
  uint64_t v44 = 0;
  float v31 = 0.0;
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v24 = *(void *)(v26 - 8);
  uint64_t v25 = v26 - 8;
  unint64_t v16 = (*(void *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v18);
  uint64_t v27 = &v14[-v16];
  unint64_t v17 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v23 = &v14[-v17];
  int v45 = v5;
  uint64_t v44 = v4;
  uint64_t v41 = (NSDecimal *)MEMORY[0x2611B9600](10.0);
  Swift::Int v42 = v6;
  int v43 = v7;
  uint64_t v38 = v41;
  Swift::Int v39 = v6;
  int v40 = v7;
  pow(_:_:)((NSDecimal *)HIWORD(v7), v41, v6);
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  int v37 = v10;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  int v34 = v10;
  NSDecimal._bridgeToObjectiveC()((NSDecimalNumber *)HIWORD(v10));
  id v19 = v11;
  Float.init(truncating:)();
  float v20 = v12;

  float v31 = v20;
  float v22 = v21 * v20;
  unint64_t v28 = (_DWORD *)MEMORY[0x263F8E210];
  (*(void (**)(unsigned char *, void, uint64_t))(v24 + 104))(v23, *MEMORY[0x263F8E210], v26);
  float v30 = v22;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v24 + 16))(v27, v23, v26);
  int v29 = (*(uint64_t (**)(unsigned char *, uint64_t))(v24 + 88))(v27, v26);
  if (v29 == *v28)
  {
    float v30 = roundf(v22);
    goto LABEL_15;
  }
  if (v29 == *MEMORY[0x263F8E208])
  {
    float v30 = rintf(v22);
    goto LABEL_15;
  }
  if (v29 == *MEMORY[0x263F8E218])
  {
LABEL_12:
    float v30 = ceilf(v22);
    goto LABEL_15;
  }
  if (v29 == *MEMORY[0x263F8E220])
  {
LABEL_14:
    float v30 = floorf(v22);
    goto LABEL_15;
  }
  if (v29 == *MEMORY[0x263F8E1F8])
  {
    float v30 = truncf(v22);
    goto LABEL_15;
  }
  if (v29 == *MEMORY[0x263F8E200])
  {
    if ((Float.sign.getter() & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  Float._roundSlowPath(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v27, v26);
LABEL_15:
  float v15 = v30;
  (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v23, v26);
  return v15 / v20;
}

float default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.1;
}

float default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.3;
}

uint64_t static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v135 = a1;
  float v124 = a2;
  float v125 = a3;
  float v126 = a4;
  float v127 = a5;
  unsigned int v111 = 0;
  uint64_t v177 = 0;
  id v176 = 0;
  uint64_t v175 = 0;
  int v174 = 0;
  int v173 = 0;
  int v172 = 0;
  int v171 = 0;
  uint64_t v169 = 0;
  uint64_t v163 = 0;
  uint64_t v162 = 0;
  uint64_t v161 = 0;
  float v159 = 0.0;
  float v157 = 0.0;
  uint64_t v156 = 0;
  uint64_t v153 = 0;
  uint64_t v148 = 0;
  uint64_t v147 = 0;
  uint64_t v144 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  id v141 = 0;
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  uint64_t v137 = 0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Decimal.DefinedValues?);
  unint64_t v112 = (*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v113 = (uint64_t)v31 - v112;
  uint64_t v121 = 0;
  uint64_t v114 = type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
  uint64_t v115 = *(void *)(v114 - 8);
  uint64_t v116 = v114 - 8;
  unint64_t v117 = (*(void *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v114);
  uint64_t v118 = (char *)v31 - v117;
  unint64_t v119 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v31 - v117);
  uint64_t v120 = (char *)v31 - v119;
  uint64_t v177 = (char *)v31 - v119;
  unint64_t v122 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Number.DefinedValues?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v121);
  uint64_t v123 = (uint64_t)v31 - v122;
  uint64_t v128 = type metadata accessor for UsoEntity_common_Number.DefinedValues();
  uint64_t v129 = *(void *)(v128 - 8);
  uint64_t v130 = v128 - 8;
  unint64_t v131 = (*(void *)(v129 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v135);
  uint64_t v132 = (char *)v31 - v131;
  unint64_t v133 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  char v134 = (char *)v31 - v133;
  id v176 = (char *)v31 - v133;
  uint64_t v175 = v9;
  int v174 = v10;
  int v173 = v11;
  int v172 = v12;
  int v171 = v13;
  swift_retain();
  if (!v135)
  {
    uint64_t v101 = v111 | 0x100000000;
    goto LABEL_89;
  }
  uint64_t v110 = v135;
  uint64_t v108 = v135;
  uint64_t v169 = v135;
  swift_retain();
  type metadata accessor for UsoEntity_common_Number();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v109 = v168;
  if (v168)
  {
    uint64_t v107 = v109;
    uint64_t v106 = v109;
    uint64_t v137 = v109;
    dispatch thunk of UsoEntity_common_Number.definedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v123, 1, v128) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v134, v123, v128);
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v132, v134, v128);
      int v105 = (*(uint64_t (**)(char *, uint64_t))(v129 + 88))(v132, v128);
      if (v105 == *MEMORY[0x263F72A28])
      {
        strcpy((char *)v136, "(knN");
      }
      else if (v105 == *MEMORY[0x263F72A20])
      {
        v136[0] = 1094713344;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A40])
      {
        v136[0] = 1148846080;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A48])
      {
        v136[0] = 1399379109;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F729E0])
      {
        float v104 = (float)(0.5 * v125) + (float)(0.5 * v124);
        uint64_t v15 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v136[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v15, v104);
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A38])
      {
        v136[0] = 1232348160;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A08])
      {
        v136[0] = 1203982336;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A18])
      {
        float v103 = (float)(v126 * v125) + (float)((float)(1.0 - v126) * v124);
        uint64_t v16 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v136[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v16, v103);
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F729F8])
      {
        *(float *)uint64_t v136 = v125;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F729E8])
      {
        v136[0] = 1176256512;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A10])
      {
        float v102 = (float)(v127 * v125) + (float)((float)(1.0 - v127) * v124);
        uint64_t v17 = default argument 1 of static USOEntityNumberExtractor.preciseRound(_:_:)();
        v136[0] = static USOEntityNumberExtractor.preciseRound(_:_:)(v17, v102);
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A30])
      {
        v136[0] = 1120403456;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F729D8])
      {
        v136[0] = 1259902592;
        LOBYTE(v136[1]) = 0;
      }
      else if (v105 == *MEMORY[0x263F72A00])
      {
        *(float *)uint64_t v136 = v124;
        LOBYTE(v136[1]) = 0;
      }
      else
      {
        v136[0] = 0;
        LOBYTE(v136[1]) = 1;
        (*(void (**)(char *, uint64_t))(v129 + 8))(v132, v128);
      }
      unsigned int v100 = v136[0];
      unsigned int v99 = LOBYTE(v136[1]);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v134, v128);
      swift_release();
      swift_release();
      uint64_t v101 = __PAIR64__(v99, v100);
      goto LABEL_89;
    }
    outlined destroy of UsoEntity_common_Number.DefinedValues?(v123);
    swift_release();
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_Integer();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v98 = v167;
  if (v167)
  {
    uint64_t v97 = v98;
    uint64_t v95 = v98;
    uint64_t v140 = v98;
    uint64_t v96 = dispatch thunk of UsoEntity_common_Integer.integerValue.getter();
    if ((v18 & 1) == 0)
    {
      uint64_t v94 = v96;
      uint64_t v139 = v96;
      uint64_t v92 = &v138;
      uint64_t v138 = v96;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      Float.init<A>(_:)();
      unsigned int v93 = v19;
      swift_release();
      swift_release();
      uint64_t v101 = v93;
      goto LABEL_89;
    }
    goto LABEL_86;
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_Decimal();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v91 = v166;
  if (v166)
  {
    uint64_t v90 = v91;
    uint64_t v89 = v91;
    uint64_t v144 = v91;
    dispatch thunk of UsoEntity_common_Decimal.definedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114) == 1)
    {
      outlined destroy of UsoEntity_common_Decimal.DefinedValues?(v113);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v120, v113, v114);
      (*(void (**)(char *, void, uint64_t))(v115 + 104))(v118, *MEMORY[0x263F72AC8], v114);
      lazy protocol witness table accessor for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues();
      int v88 = == infix<A>(_:_:)();
      uint64_t v86 = *(void (**)(char *, uint64_t))(v115 + 8);
      uint64_t v87 = v115 + 8;
      v86(v118, v114);
      if (v88)
      {
        unsigned int v85 = 1008981770;
        v86(v120, v114);
        swift_release();
        swift_release();
        uint64_t v101 = v85;
        goto LABEL_89;
      }
      v86(v120, v114);
    }
    uint64_t v83 = dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter();
    uint64_t v84 = v20;
    if (v20)
    {
      uint64_t v81 = v83;
      uint64_t v82 = v84;
      uint64_t v77 = v84;
      uint64_t v76 = v83;
      uint64_t v142 = v83;
      uint64_t v143 = v84;
      type metadata accessor for NSNumberFormatter();
      id v78 = SAUIAppPunchOut.__allocating_init()();
      id v141 = v78;
      objc_msgSend(v78, sel_setNumberStyle_, 1);
      swift_bridgeObjectRetain();
      id v79 = (id)MEMORY[0x2611B9130](v76, v77);
      swift_bridgeObjectRelease();
      id v80 = objc_msgSend(v78, sel_numberFromString_, v79);

      if (v80)
      {
        id v75 = v80;
        id v72 = v80;
        objc_msgSend(v80, sel_floatValue);
        unsigned int v73 = v21;

        uint64_t v74 = v73;
      }
      else
      {
        uint64_t v74 = 0x100000000;
      }
      uint64_t v71 = v74;

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v101 = v71;
      goto LABEL_89;
    }
LABEL_86:
    swift_release();
LABEL_87:
    swift_release();
    uint64_t v101 = v111 | 0x100000000;
    goto LABEL_89;
  }
  swift_retain();
  type metadata accessor for UsoEntity_common_MixedFraction();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v70 = v165;
  if (!v165)
  {
    swift_retain();
    type metadata accessor for UsoEntity_common_MultipliedNumber();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v50 = v164;
    if (!v164) {
      goto LABEL_87;
    }
    uint64_t v49 = v50;
    uint64_t v47 = v50;
    uint64_t v163 = v50;
    uint64_t v48 = dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter();
    if (v48)
    {
      uint64_t v46 = v48;
      uint64_t v44 = v48;
      uint64_t v162 = v48;
      uint64_t v45 = dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter();
      if (v45)
      {
        uint64_t v43 = v45;
        uint64_t v38 = v45;
        uint64_t v161 = v45;
        swift_retain();
        uint64_t v40 = CodeGenBase.entity.getter();
        swift_release();
        float v39 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
        float v28 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
        uint64_t v160 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v40, v124, v125, v39, v28);
        float v41 = *(float *)&v160;
        int v42 = BYTE4(v160);
        swift_release();
        if ((v42 & 1) == 0)
        {
          float v37 = v41;
          float v32 = v41;
          float v159 = v41;
          swift_retain();
          uint64_t v34 = CodeGenBase.entity.getter();
          swift_release();
          float v33 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
          float v29 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
          uint64_t v158 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v34, v124, v125, v33, v29);
          float v35 = *(float *)&v158;
          int v36 = BYTE4(v158);
          swift_release();
          if ((v36 & 1) == 0)
          {
            v31[1] = v35;
            float v157 = v35;
            v31[0] = v35 * v32;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v101 = LODWORD(v31[0]);
            goto LABEL_89;
          }
        }
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    goto LABEL_86;
  }
  uint64_t v69 = v70;
  uint64_t v67 = v70;
  uint64_t v156 = v70;
  float v154 = 0.0;
  unsigned __int8 v155 = 1;
  uint64_t v68 = dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
  if ((v22 & 1) == 0)
  {
    uint64_t v66 = v68;
    uint64_t v64 = v68;
    uint64_t v148 = v68;
    uint64_t v65 = dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter();
    if ((v23 & 1) == 0)
    {
      uint64_t v63 = v65;
      uint64_t v62 = v65;
      uint64_t v147 = v65;
      if (!v65)
      {
        swift_release();
        swift_release();
        uint64_t v101 = v111 | 0x100000000;
        goto LABEL_89;
      }
      uint64_t v58 = &v146;
      uint64_t v146 = v64;
      unint64_t v60 = lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v59 = MEMORY[0x263F8E5C0];
      Float.init<A>(_:)();
      float v61 = v24;
      uint64_t v145 = v62;
      Float.init<A>(_:)();
      float v154 = v61 / v25;
      unsigned __int8 v155 = 0;
    }
  }
  uint64_t v57 = dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter();
  if ((v26 & 1) == 0)
  {
    uint64_t v56 = v57;
    uint64_t v55 = v56;
    uint64_t v153 = v56;
    float v150 = v154;
    char v151 = v155 & 1;
    if (v155) {
      float v152 = 0.0;
    }
    else {
      float v152 = v150;
    }
    float v54 = v152;
    unint64_t v53 = &v149;
    uint64_t v149 = v55;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    Float.init<A>(_:)();
    float v154 = v54 + v27;
    unsigned __int8 v155 = 0;
  }
  float v52 = v154;
  unsigned int v51 = v155;
  swift_release();
  swift_release();
  uint64_t v101 = __PAIR64__(v51, LODWORD(v52));
LABEL_89:
  LODWORD(v170) = v101;
  BYTE4(v170) = BYTE4(v101) & 1;
  return v170;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of UsoEntity_common_Decimal.DefinedValues?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t type metadata accessor for NSNumberFormatter()
{
  uint64_t v2 = lazy cache variable for type metadata for NSNumberFormatter;
  if (!lazy cache variable for type metadata for NSNumberFormatter)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumberFormatter);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Decimal.DefinedValues and conformance UsoEntity_common_Decimal.DefinedValues);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of UsoEntity_common_Number.DefinedValues?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoEntity_common_Number.DefinedValues();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

ValueMetadata *type metadata accessor for USOEntityNumberExtractor()
{
  return &type metadata for USOEntityNumberExtractor;
}

uint64_t PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(a1, a2, a3);
}

uint64_t PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  int v13 = 0;
  uint64_t v5 = *v3;
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  int v13 = v3;
  uint64_t v12 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 88);
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v10);
  outlined init with take of CommonLabelsProviding(v10, v3 + 2);
  swift_retain();
  v3[7] = a2;
  swift_retain();
  v3[8] = a3;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v9;
}

uint64_t PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 48) = a3;
  *(unsigned char *)(v4 + 89) = a2;
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 16) = v4;
  *(unsigned char *)(v4 + 88) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 88) = a2;
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.continueInAppError(intentType:app:), 0);
}

uint64_t PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)()
{
  *(void *)(v0 + 16) = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fallback", 8uLL, 1);
  *(void *)(v0 + 64) = v1._object;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 72) = v2;
  *uint64_t v2 = *(void *)(v6 + 16);
  v2[1] = PaymentsErrorTemplateProvider.continueInAppError(intentType:app:);
  char v3 = *(unsigned char *)(v6 + 89);
  uint64_t v4 = *(void *)(v6 + 40);
  return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v4, v1._countAndFlagsBits, (uint64_t)v1._object, v3, 0, 0, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.continueInAppError(intentType:app:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  uint64_t v5 = *v2;
  v3[3] = a2;
  v3[8] = *(void *)(v5 + 80);
  v3[9] = *(void *)(v5 + 88);
  v3[4] = v2;
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.errorWithCode(from:), 0);
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(from:)()
{
  v0[2] = v0;
  type metadata accessor for IntentResolutionRecord();
  uint64_t v5 = IntentResolutionRecord.intent.getter();
  v0[10] = v5;
  uint64_t v6 = IntentResolutionRecord.intentResponse.getter();
  v0[11] = v6;
  uint64_t v7 = IntentResolutionRecord.app.getter();
  v0[12] = v7;
  Swift::String v1 = (void *)swift_task_alloc();
  v4[13] = v1;
  *Swift::String v1 = v4[2];
  v1[1] = PaymentsErrorTemplateProvider.errorWithCode(from:);
  uint64_t v2 = v4[5];
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(v2, v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  void v6[2] = *v1;
  v6[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.errorWithCode(from:), 0);
  }
  else
  {
    uint64_t v4 = (void *)v6[11];
    uint64_t v5 = (void *)v6[10];
    swift_release();

    uint64_t v2 = *(uint64_t (**)(void))(v6[2] + 8);
    return v2();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;

  char v3 = (id)v0[11];
  uint64_t v4 = (id)v0[10];
  v0[2] = v0;
  swift_release();

  Swift::String v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

uint64_t PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 240) = v2;
  *(void *)(v3 + 232) = a2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 80) = v3;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 520) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(unsigned char *)(v3 + 528) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  uint64_t v11 = *v2;
  *(void *)(v3 + 248) = *v2;
  *(void *)(v3 + 256) = *(void *)(v11 + 80);
  uint64_t v4 = type metadata accessor for ParameterResolutionRecord();
  *(void *)(v3 + 264) = v4;
  uint64_t v8 = *(void *)(v4 - 8);
  *(void *)(v3 + 272) = v8;
  *(void *)(v3 + 280) = *(void *)(v8 + 64);
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v3 + 296) = v5;
  *(void *)(v3 + 304) = *(void *)(v5 - 8);
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  *(void *)(v3 + 336) = swift_task_alloc();
  *(void *)(v3 + 344) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v3 + 352) = v6;
  *(void *)(v3 + 360) = *(void *)(v6 - 8);
  *(void *)(v3 + 368) = swift_task_alloc();
  *(void *)(v3 + 88) = a2;
  *(void *)(v3 + 96) = v10;
  *(void *)(v3 + 376) = *(void *)(v11 + 88);
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:), 0);
}

uint64_t PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)()
{
  uint64_t v232 = v0;
  v0[10] = v0;
  uint64_t v210 = (void *)ParameterResolutionRecord.intent.getter();
  v0[48] = v210;
  self;
  uint64_t v211 = (void *)swift_dynamicCastObjCClass();
  v0[49] = v211;
  if (v211)
  {
    uint64_t v206 = *(void *)(v209 + 368);
    uint64_t v207 = *(void *)(v209 + 352);
    uint64_t v205 = *(void *)(v209 + 360);
    id v1 = v211;
    *(void *)(v209 + 184) = v211;
    ParameterResolutionRecord.parameter.getter();
    rawValue._countAndFlagsBits = ParameterIdentifier.name.getter();
    rawValue._object = v2;
    (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v206, v207);
    v3.value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
    if (v3.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
    {
      uint64_t v152 = *(void *)(v209 + 376);
      uint64_t v25 = *(void *)(v209 + 336);
      uint64_t v148 = *(void *)(v209 + 296);
      uint64_t v155 = *(void *)(v209 + 288);
      uint64_t v156 = *(void *)(v209 + 264);
      uint64_t v151 = *(void *)(v209 + 256);
      uint64_t v150 = *(void *)(v209 + 232);
      uint64_t v147 = *(void *)(v209 + 304);
      uint64_t v149 = *(void *)(v209 + 272);
      uint64_t v153 = *(void *)(v209 + 248);
      uint64_t v26 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 16))(v25, v26, v148);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16))(v155, v150, v156);
      unint64_t v154 = (*(unsigned __int8 *)(v149 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
      uint64_t v158 = (char *)swift_allocObject();
      *((void *)v158 + 2) = v151;
      *((void *)v158 + 3) = v152;
      *((void *)v158 + 4) = *(void *)(v153 + 96);
      *((void *)v158 + 5) = *(void *)(v153 + 104);
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(&v158[v154], v155, v156);
      log = Logger.logObject.getter();
      os_log_type_t v165 = static os_log_type_t.error.getter();
      *(void *)(v209 + 192) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v157 = *(_DWORD *)(v209 + 540);
      uint64_t v160 = swift_allocObject();
      *(unsigned char *)(v160 + 16) = 32;
      uint64_t v161 = swift_allocObject();
      *(unsigned char *)(v161 + 16) = 8;
      uint64_t v159 = swift_allocObject();
      *(void *)(v159 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
      *(void *)(v159 + 24) = v158;
      uint64_t v162 = swift_allocObject();
      *(void *)(v162 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v162 + 24) = v159;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v163 = v27;
      swift_retain();
      *uint64_t v163 = partial apply for closure #1 in OSLogArguments.append(_:);
      v163[1] = v160;
      swift_retain();
      v163[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v163[3] = v161;
      swift_retain();
      v163[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v163[5] = v162;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v165))
      {
        uint64_t v144 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v145 = createStorage<A>(capacity:type:)(0);
        uint64_t v146 = createStorage<A>(capacity:type:)(1);
        unint64_t v222 = v144;
        uint64_t v223 = v145;
        uint64_t v224 = v146;
        serialize(_:at:)(2, &v222);
        serialize(_:at:)(1, &v222);
        uint64_t v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v226 = v160;
        closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)&v222, (uint64_t)&v223, (uint64_t)&v224);
        uint64_t v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v226 = v161;
        closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)&v222, (uint64_t)&v223, (uint64_t)&v224);
        uint64_t v225 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v226 = v162;
        closure #1 in osLogInternal(_:log:type:)(&v225, (uint64_t)&v222, (uint64_t)&v223, (uint64_t)&v224);
        _os_log_impl(&dword_25D85A000, log, v165, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode unknown parameter for Request: %s", v144, v157);
        destroyStorage<A>(_:count:)(v145, 0, v143);
        destroyStorage<A>(_:count:)(v146, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v144, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v140 = *(void *)(v209 + 336);
      uint64_t v141 = *(void *)(v209 + 296);
      uint64_t v142 = *(void *)(v209 + 224);
      uint64_t v139 = *(void *)(v209 + 304);

      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v140, v141);
      uint64_t v28 = type metadata accessor for TemplatingResult();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v142, 1);
    }
    else
    {
      *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v209 + 528) = v3;
      *(void *)(v209 + 48) = 0;
      *(void *)(v209 + 56) = 0;
      if (v3.value)
      {
        if (v3.value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
        {
          id v204 = (id)ParameterResolutionRecord.result.getter();
          objc_msgSend(v204, sel_unsupportedReason);

          INSiriAuthorizationStatus.init(rawValue:)();
          if ((v5 & 1) == 0)
          {
            *(void *)(v209 + 216) = v4;
            *(void *)(v209 + 48) = static PaymentIntentCATResponseCode.from(_:)(v4);
            *(void *)(v209 + 56) = v6;
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        id v203 = (id)ParameterResolutionRecord.result.getter();
        objc_msgSend(v203, sel_unsupportedReason);

        INSiriAuthorizationStatus.init(rawValue:)();
        if ((v8 & 1) == 0)
        {
          *(void *)(v209 + 208) = v7;
          *(void *)(v209 + 48) = static PaymentIntentCATResponseCode.from(_:)(v7);
          *(void *)(v209 + 56) = v9;
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v201 = *(void *)(v209 + 48);
      uint64_t v202 = *(void *)(v209 + 56);
      *(void *)(v209 + 400) = v202;
      swift_bridgeObjectRetain();
      if (v202)
      {
        *(void *)(v209 + 64) = v201;
        *(void *)(v209 + 72) = v202;
        id v198 = objc_msgSend(v211, sel_payer);
        *(void *)(v209 + 408) = v198;
        id v199 = objc_msgSend(v211, sel_currencyAmount);
        *(void *)(v209 + 416) = v199;
        id v200 = objc_msgSend(v211, sel_note);
        if (v200)
        {
          uint64_t v194 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v195 = v10;

          uint64_t v196 = v194;
          uint64_t v197 = v195;
        }
        else
        {
          uint64_t v196 = 0;
          uint64_t v197 = 0;
        }
        *(void *)(v209 + 424) = v197;
        uint64_t v193 = ParameterResolutionRecord.app.getter();
        *(void *)(v209 + 432) = v193;
        uint64_t v11 = (void *)swift_task_alloc();
        uint64_t v12 = v201;
        uint64_t v13 = v202;
        uint64_t v14 = (uint64_t)v198;
        uint64_t v15 = (uint64_t)v199;
        uint64_t v16 = v196;
        uint64_t v17 = v197;
        *(void *)(v209 + 440) = v11;
        *uint64_t v11 = *(void *)(v209 + 80);
        v11[1] = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
        uint64_t v18 = *(void *)(v209 + 224);
        uint64_t v234 = v193;
        char v19 = 0;
        return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v18, v12, v13, v19, v14, v15, v16, v17);
      }
      uint64_t v179 = *(void *)(v209 + 376);
      uint64_t v21 = *(void *)(v209 + 344);
      uint64_t v175 = *(void *)(v209 + 296);
      uint64_t v182 = *(void *)(v209 + 288);
      uint64_t v183 = *(void *)(v209 + 264);
      uint64_t v178 = *(void *)(v209 + 256);
      uint64_t v177 = *(void *)(v209 + 232);
      uint64_t v174 = *(void *)(v209 + 304);
      uint64_t v176 = *(void *)(v209 + 272);
      uint64_t v180 = *(void *)(v209 + 248);
      uint64_t v22 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 16))(v21, v22, v175);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 16))(v182, v177, v183);
      unint64_t v181 = (*(unsigned __int8 *)(v176 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
      uint32_t v185 = (char *)swift_allocObject();
      *((void *)v185 + 2) = v178;
      *((void *)v185 + 3) = v179;
      *((void *)v185 + 4) = *(void *)(v180 + 96);
      *((void *)v185 + 5) = *(void *)(v180 + 104);
      (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(&v185[v181], v182, v183);
      oslog = Logger.logObject.getter();
      os_log_type_t v192 = static os_log_type_t.error.getter();
      *(void *)(v209 + 200) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v209 + 544);
      uint64_t v187 = swift_allocObject();
      *(unsigned char *)(v187 + 16) = 32;
      uint64_t v188 = swift_allocObject();
      *(unsigned char *)(v188 + 16) = 8;
      uint64_t v186 = swift_allocObject();
      *(void *)(v186 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
      *(void *)(v186 + 24) = v185;
      uint64_t v189 = swift_allocObject();
      *(void *)(v189 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v189 + 24) = v186;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v190 = v23;
      swift_retain();
      *uint64_t v190 = partial apply for closure #1 in OSLogArguments.append(_:);
      v190[1] = v187;
      swift_retain();
      v190[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v190[3] = v188;
      swift_retain();
      v190[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v190[5] = v189;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v192))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v172 = createStorage<A>(capacity:type:)(0);
        uint64_t v173 = createStorage<A>(capacity:type:)(1);
        uint64_t v227 = buf;
        uint64_t v228 = v172;
        uint64_t v229 = v173;
        serialize(_:at:)(2, &v227);
        serialize(_:at:)(1, &v227);
        uint64_t v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v231 = v187;
        closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)&v227, (uint64_t)&v228, (uint64_t)&v229);
        uint64_t v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v231 = v188;
        closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)&v227, (uint64_t)&v228, (uint64_t)&v229);
        uint64_t v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v231 = v189;
        closure #1 in osLogInternal(_:log:type:)(&v230, (uint64_t)&v227, (uint64_t)&v228, (uint64_t)&v229);
        _os_log_impl(&dword_25D85A000, oslog, v192, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode recognized Request slot %s, but no known error code found, returning nil", buf, size);
        destroyStorage<A>(_:count:)(v172, 0, v170);
        destroyStorage<A>(_:count:)(v173, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v167 = *(void *)(v209 + 344);
      uint64_t v168 = *(void *)(v209 + 296);
      uint64_t v169 = *(void *)(v209 + 224);
      uint64_t v166 = *(void *)(v209 + 304);

      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v167, v168);
      uint64_t v24 = type metadata accessor for TemplatingResult();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v169, 1);
      outlined destroy of String.UTF8View();
    }
  }
  else
  {
    self;
    float v29 = (void *)swift_dynamicCastObjCClass();
    id v138 = v29;
    *(void *)(v209 + 456) = v29;
    if (v29)
    {
      uint64_t v135 = *(void *)(v209 + 368);
      uint64_t v136 = *(void *)(v209 + 352);
      uint64_t v134 = *(void *)(v209 + 360);
      id v30 = v29;
      *(void *)(v209 + 144) = v138;
      ParameterResolutionRecord.parameter.getter();
      v137._countAndFlagsBits = ParameterIdentifier.name.getter();
      v137._object = v31;
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v135, v136);
      v32.value = SendPaymentSlots.init(rawValue:)(v137).value;
      if (v32.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
      {
        uint64_t v81 = *(void *)(v209 + 376);
        uint64_t v45 = *(void *)(v209 + 320);
        uint64_t v77 = *(void *)(v209 + 296);
        uint64_t v84 = *(void *)(v209 + 288);
        uint64_t v85 = *(void *)(v209 + 264);
        uint64_t v80 = *(void *)(v209 + 256);
        uint64_t v79 = *(void *)(v209 + 232);
        uint64_t v76 = *(void *)(v209 + 304);
        uint64_t v78 = *(void *)(v209 + 272);
        uint64_t v82 = *(void *)(v209 + 248);
        uint64_t v46 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v45, v46, v77);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v84, v79, v85);
        unint64_t v83 = (*(unsigned __int8 *)(v78 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
        uint64_t v87 = (char *)swift_allocObject();
        *((void *)v87 + 2) = v80;
        *((void *)v87 + 3) = v81;
        *((void *)v87 + 4) = *(void *)(v82 + 96);
        *((void *)v87 + 5) = *(void *)(v82 + 104);
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(&v87[v83], v84, v85);
        unsigned int v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.error.getter();
        *(void *)(v209 + 152) = 12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v86 = *(_DWORD *)(v209 + 532);
        uint64_t v89 = swift_allocObject();
        *(unsigned char *)(v89 + 16) = 32;
        uint64_t v90 = swift_allocObject();
        *(unsigned char *)(v90 + 16) = 8;
        uint64_t v88 = swift_allocObject();
        *(void *)(v88 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
        *(void *)(v88 + 24) = v87;
        uint64_t v91 = swift_allocObject();
        *(void *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v91 + 24) = v88;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)();
        uint64_t v92 = v47;
        swift_retain();
        *uint64_t v92 = partial apply for closure #1 in OSLogArguments.append(_:);
        v92[1] = v89;
        swift_retain();
        v92[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v92[3] = v90;
        swift_retain();
        v92[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v92[5] = v91;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v93, v94))
        {
          unsigned int v73 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v74 = createStorage<A>(capacity:type:)(0);
          uint64_t v75 = createStorage<A>(capacity:type:)(1);
          uint64_t v212 = v73;
          uint64_t v213 = v74;
          uint64_t v214 = v75;
          serialize(_:at:)(2, &v212);
          serialize(_:at:)(1, &v212);
          uint64_t v215 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v216 = v89;
          closure #1 in osLogInternal(_:log:type:)(&v215, (uint64_t)&v212, (uint64_t)&v213, (uint64_t)&v214);
          uint64_t v215 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v216 = v90;
          closure #1 in osLogInternal(_:log:type:)(&v215, (uint64_t)&v212, (uint64_t)&v213, (uint64_t)&v214);
          uint64_t v215 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v216 = v91;
          closure #1 in osLogInternal(_:log:type:)(&v215, (uint64_t)&v212, (uint64_t)&v213, (uint64_t)&v214);
          _os_log_impl(&dword_25D85A000, v93, v94, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode unknown parameter for Send: %s", v73, v86);
          destroyStorage<A>(_:count:)(v74, 0, v72);
          destroyStorage<A>(_:count:)(v75, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v73, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v69 = *(void *)(v209 + 320);
        uint64_t v70 = *(void *)(v209 + 296);
        uint64_t v71 = *(void *)(v209 + 224);
        uint64_t v68 = *(void *)(v209 + 304);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
        uint64_t v48 = type metadata accessor for TemplatingResult();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v71, 1);
      }
      else
      {
        *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v209 + 520) = v32;
        *(void *)(v209 + 16) = 0;
        *(void *)(v209 + 24) = 0;
        if (v32.value)
        {
          if (v32.value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
          {
            id v133 = (id)ParameterResolutionRecord.result.getter();
            objc_msgSend(v133, sel_unsupportedReason);

            INSiriAuthorizationStatus.init(rawValue:)();
            if ((v34 & 1) == 0)
            {
              *(void *)(v209 + 176) = v33;
              *(void *)(v209 + 16) = static PaymentIntentCATResponseCode.from(_:)(v33);
              *(void *)(v209 + 24) = v35;
              swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          id v132 = (id)ParameterResolutionRecord.result.getter();
          objc_msgSend(v132, sel_unsupportedReason);

          INSiriAuthorizationStatus.init(rawValue:)();
          if ((v37 & 1) == 0)
          {
            *(void *)(v209 + 168) = v36;
            *(void *)(v209 + 16) = static PaymentIntentCATResponseCode.from(_:)(v36);
            *(void *)(v209 + 24) = v38;
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v130 = *(void *)(v209 + 16);
        uint64_t v131 = *(void *)(v209 + 24);
        *(void *)(v209 + 464) = v131;
        swift_bridgeObjectRetain();
        if (v131)
        {
          *(void *)(v209 + 32) = v130;
          *(void *)(v209 + 40) = v131;
          id v127 = objc_msgSend(v138, sel_payee);
          *(void *)(v209 + 472) = v127;
          id v128 = objc_msgSend(v138, sel_currencyAmount);
          *(void *)(v209 + 480) = v128;
          id v129 = objc_msgSend(v138, sel_note);
          if (v129)
          {
            uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v124 = v39;

            uint64_t v125 = v123;
            uint64_t v126 = v124;
          }
          else
          {
            uint64_t v125 = 0;
            uint64_t v126 = 0;
          }
          *(void *)(v209 + 488) = v126;
          uint64_t v122 = ParameterResolutionRecord.app.getter();
          *(void *)(v209 + 496) = v122;
          uint64_t v40 = (void *)swift_task_alloc();
          uint64_t v12 = v130;
          uint64_t v13 = v131;
          uint64_t v14 = (uint64_t)v127;
          uint64_t v15 = (uint64_t)v128;
          uint64_t v16 = v125;
          uint64_t v17 = v126;
          *(void *)(v209 + 504) = v40;
          *uint64_t v40 = *(void *)(v209 + 80);
          v40[1] = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
          uint64_t v18 = *(void *)(v209 + 224);
          uint64_t v234 = v122;
          char v19 = 1;
          return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v18, v12, v13, v19, v14, v15, v16, v17);
        }
        uint64_t v108 = *(void *)(v209 + 376);
        uint64_t v41 = *(void *)(v209 + 328);
        uint64_t v104 = *(void *)(v209 + 296);
        uint64_t v111 = *(void *)(v209 + 288);
        uint64_t v112 = *(void *)(v209 + 264);
        uint64_t v107 = *(void *)(v209 + 256);
        uint64_t v106 = *(void *)(v209 + 232);
        uint64_t v103 = *(void *)(v209 + 304);
        uint64_t v105 = *(void *)(v209 + 272);
        uint64_t v109 = *(void *)(v209 + 248);
        uint64_t v42 = Logger.payments.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v41, v42, v104);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v111, v106, v112);
        unint64_t v110 = (*(unsigned __int8 *)(v105 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
        uint64_t v114 = (char *)swift_allocObject();
        *((void *)v114 + 2) = v107;
        *((void *)v114 + 3) = v108;
        *((void *)v114 + 4) = *(void *)(v109 + 96);
        *((void *)v114 + 5) = *(void *)(v109 + 104);
        (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(&v114[v110], v111, v112);
        uint64_t v120 = Logger.logObject.getter();
        os_log_type_t v121 = static os_log_type_t.error.getter();
        *(void *)(v209 + 160) = 12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v113 = *(_DWORD *)(v209 + 536);
        uint64_t v116 = swift_allocObject();
        *(unsigned char *)(v116 + 16) = 32;
        uint64_t v117 = swift_allocObject();
        *(unsigned char *)(v117 + 16) = 8;
        uint64_t v115 = swift_allocObject();
        *(void *)(v115 + 16) = partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
        *(void *)(v115 + 24) = v114;
        uint64_t v118 = swift_allocObject();
        *(void *)(v118 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v118 + 24) = v115;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)();
        unint64_t v119 = v43;
        swift_retain();
        *unint64_t v119 = partial apply for closure #1 in OSLogArguments.append(_:);
        v119[1] = v116;
        swift_retain();
        v119[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v119[3] = v117;
        swift_retain();
        v119[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v119[5] = v118;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v120, v121))
        {
          unsigned int v100 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v101 = createStorage<A>(capacity:type:)(0);
          uint64_t v102 = createStorage<A>(capacity:type:)(1);
          uint64_t v217 = v100;
          uint64_t v218 = v101;
          uint64_t v219 = v102;
          serialize(_:at:)(2, &v217);
          serialize(_:at:)(1, &v217);
          unint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v221 = v116;
          closure #1 in osLogInternal(_:log:type:)(&v220, (uint64_t)&v217, (uint64_t)&v218, (uint64_t)&v219);
          unint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v221 = v117;
          closure #1 in osLogInternal(_:log:type:)(&v220, (uint64_t)&v217, (uint64_t)&v218, (uint64_t)&v219);
          unint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v221 = v118;
          closure #1 in osLogInternal(_:log:type:)(&v220, (uint64_t)&v217, (uint64_t)&v218, (uint64_t)&v219);
          _os_log_impl(&dword_25D85A000, v120, v121, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode recognized Send slot %s, but no known error code found, returning nil", v100, v113);
          destroyStorage<A>(_:count:)(v101, 0, v99);
          destroyStorage<A>(_:count:)(v102, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v100, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v96 = *(void *)(v209 + 328);
        uint64_t v97 = *(void *)(v209 + 296);
        uint64_t v98 = *(void *)(v209 + 224);
        uint64_t v95 = *(void *)(v209 + 304);

        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v97);
        uint64_t v44 = type metadata accessor for TemplatingResult();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v98, 1);
        outlined destroy of String.UTF8View();
      }
    }
    else
    {
      uint64_t v49 = *(void *)(v209 + 312);
      uint64_t v63 = *(void *)(v209 + 296);
      uint64_t v62 = *(void *)(v209 + 304);

      uint64_t v50 = Logger.payments.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v49, v50, v63);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      *(void *)(v209 + 104) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v64 = *(_DWORD *)(v209 + 524);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v67 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v66, v65))
      {
        uint64_t v58 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v59 = createStorage<A>(capacity:type:)(0);
        uint64_t v60 = createStorage<A>(capacity:type:)(0);
        *(void *)(v209 + 112) = v58;
        *(void *)(v209 + 120) = v59;
        *(void *)(v209 + 128) = v60;
        serialize(_:at:)(0, (unsigned char **)(v209 + 112));
        serialize(_:at:)(0, (unsigned char **)(v209 + 112));
        *(void *)(v209 + 136) = v67;
        float v61 = (void *)swift_task_alloc();
        v61[2] = v209 + 112;
        v61[3] = v209 + 120;
        v61[4] = v209 + 128;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, v66, v65, "#PaymentsErrorTemplateProvider unsupportedErrorWithCode returning nil", v58, v64);
        destroyStorage<A>(_:count:)(v59, 0, v57);
        destroyStorage<A>(_:count:)(v60, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v58, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = *(void *)(v209 + 312);
      uint64_t v55 = *(void *)(v209 + 296);
      uint64_t v56 = *(void *)(v209 + 224);
      uint64_t v53 = *(void *)(v209 + 304);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      uint64_t v51 = type metadata accessor for TemplatingResult();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v56, 1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  float v52 = *(uint64_t (**)(void))(*(void *)(v209 + 80) + 8);
  return v52();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  v6[10] = *v1;
  v6[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
  }
  else
  {
    uint64_t v4 = (void *)v6[52];
    char v5 = (void *)v6[51];
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v2 = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  char v5 = (id)v0[49];
  uint64_t v6 = (id)v0[48];
  uint64_t v4 = v0[28];
  v0[10] = v0;
  id v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[10] + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  v6[10] = *v1;
  v6[64] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
  }
  else
  {
    uint64_t v4 = (void *)v6[60];
    char v5 = (void *)v6[59];
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v2 = PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  char v5 = (id)v0[57];
  uint64_t v6 = (id)v0[48];
  uint64_t v4 = v0[28];
  v0[10] = v0;
  id v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  SiriPaymentsIntents::RequestPaymentSlots_optional v3 = (id)v0[52];
  uint64_t v4 = (id)v0[51];
  char v5 = (id)v0[49];
  uint64_t v6 = (id)v0[48];
  v0[10] = v0;
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[10] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  SiriPaymentsIntents::RequestPaymentSlots_optional v3 = (id)v0[60];
  uint64_t v4 = (id)v0[59];
  char v5 = (id)v0[57];
  uint64_t v6 = (id)v0[48];
  v0[10] = v0;
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[10] + 8);
  return v1();
}

uint64_t implicit closure #1 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(uint64_t a1, uint64_t a2)
{
  v4[1] = a2;
  v4[2] = 0;
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  uint64_t v6 = *(void *)(v9 - 8);
  uint64_t v7 = v9 - 8;
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  char v8 = (char *)v4 - v5;
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v10 = ParameterIdentifier.name.getter();
  uint64_t v11 = v2;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v9);
  return v10;
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[21] = v4;
  v5[20] = a4;
  v5[19] = a3;
  v5[18] = a2;
  v5[17] = a1;
  void v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v5[12] = 0;
  v5[13] = 0;
  v5[14] = 0;
  v5[15] = 0;
  v5[16] = 0;
  uint64_t v6 = type metadata accessor for Logger();
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:), 0);
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)()
{
  uint64_t v74 = (void *)v0[19];
  id v1 = (void *)v0[18];
  v0[2] = v0;
  id v2 = v1;
  id v3 = v74;
  self;
  uint64_t v75 = (void *)swift_dynamicCastObjCClass();
  v0[25] = v75;
  if (v75)
  {
    id v4 = v75;
    self;
    uint64_t v72 = (void *)swift_dynamicCastObjCClass();
    *(void *)(v73 + 208) = v72;
    if (v72)
    {
      id v5 = v72;
      *(void *)(v73 + 120) = v75;
      *(void *)(v73 + 128) = v72;
      uint64_t v67 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)objc_msgSend(v72, sel_code));
      uint64_t v68 = v6;
      *(void *)(v73 + 216) = v6;
      id v69 = objc_msgSend(v75, sel_payer);
      *(void *)(v73 + 224) = v69;
      id v70 = objc_msgSend(v75, sel_currencyAmount);
      *(void *)(v73 + 232) = v70;
      id v71 = objc_msgSend(v75, sel_note);
      if (v71)
      {
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v64 = v7;

        uint64_t v65 = v63;
        uint64_t v66 = v64;
      }
      else
      {
        uint64_t v65 = 0;
        uint64_t v66 = 0;
      }
      *(void *)(v73 + 240) = v66;
      char v8 = (void *)swift_task_alloc();
      uint64_t v9 = v67;
      uint64_t v10 = v68;
      uint64_t v11 = (uint64_t)v69;
      uint64_t v12 = (uint64_t)v70;
      uint64_t v13 = v65;
      uint64_t v14 = v66;
      *(void *)(v73 + 248) = v8;
      *char v8 = *(void *)(v73 + 16);
      v8[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
      uint64_t v15 = *(void *)(v73 + 136);
      char v16 = 0;
      return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v15, v9, v10, v16, v11, v12, v13, v14);
    }
  }
  self;
  uint64_t v62 = (void *)swift_dynamicCastObjCClass();
  *(void *)(v73 + 264) = v62;
  if (v62)
  {
    id v18 = v62;
    self;
    float v61 = (void *)swift_dynamicCastObjCClass();
    *(void *)(v73 + 272) = v61;
    if (v61)
    {
      id v19 = v61;
      *(void *)(v73 + 104) = v62;
      *(void *)(v73 + 112) = v61;
      uint64_t v56 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)objc_msgSend(v61, sel_code));
      uint64_t v57 = v20;
      *(void *)(v73 + 280) = v20;
      id v58 = objc_msgSend(v62, sel_payee);
      *(void *)(v73 + 288) = v58;
      id v59 = objc_msgSend(v62, sel_currencyAmount);
      *(void *)(v73 + 296) = v59;
      id v60 = objc_msgSend(v62, sel_note);
      if (v60)
      {
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v21;

        uint64_t v54 = v52;
        uint64_t v55 = v53;
      }
      else
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      *(void *)(v73 + 304) = v55;
      uint64_t v22 = (void *)swift_task_alloc();
      uint64_t v9 = v56;
      uint64_t v10 = v57;
      uint64_t v11 = (uint64_t)v58;
      uint64_t v12 = (uint64_t)v59;
      uint64_t v13 = v54;
      uint64_t v14 = v55;
      *(void *)(v73 + 312) = v22;
      void *v22 = *(void *)(v73 + 16);
      v22[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
      uint64_t v15 = *(void *)(v73 + 136);
      char v16 = 1;
      return PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(v15, v9, v10, v16, v11, v12, v13, v14);
    }
  }
  self;
  if (swift_dynamicCastObjCClass()
    && (self, id v51 = (id)swift_dynamicCastObjCClass(), (*(void *)(v73 + 328) = v51) != 0))
  {
    id v23 = v51;
    *(void *)(v73 + 96) = v51;
    uint64_t v49 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)objc_msgSend(v51, sel_code));
    uint64_t v50 = v24;
    *(void *)(v73 + 336) = v24;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v73 + 344) = v25;
    void *v25 = *(void *)(v73 + 16);
    v25[1] = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
    uint64_t v26 = *(void *)(v73 + 160);
    uint64_t v27 = *(void *)(v73 + 136);
    return PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)(v27, v49, v50, v26);
  }
  else
  {
    uint64_t v28 = *(void *)(v73 + 192);
    uint64_t v44 = *(void *)(v73 + 176);
    uint64_t v43 = *(void *)(v73 + 184);
    uint64_t v29 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v28, v29, v44);
    oslog = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    *(void *)(v73 + 56) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v73 + 360);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v48 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v46))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v40 = createStorage<A>(capacity:type:)(0);
      uint64_t v41 = createStorage<A>(capacity:type:)(0);
      *(void *)(v73 + 64) = buf;
      *(void *)(v73 + 72) = v40;
      *(void *)(v73 + 80) = v41;
      serialize(_:at:)(0, (unsigned char **)(v73 + 64));
      serialize(_:at:)(0, (unsigned char **)(v73 + 64));
      *(void *)(v73 + 88) = v48;
      uint64_t v42 = (void *)swift_task_alloc();
      v42[2] = v73 + 64;
      v42[3] = v73 + 72;
      v42[4] = v73 + 80;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, oslog, v46, "PaymentsErrorTemplateProvider errorWithCode unexpected intent type, returning nil", buf, size);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v73 + 192);
    uint64_t v34 = *(void *)(v73 + 176);
    id v37 = *(id *)(v73 + 152);
    id v36 = *(id *)(v73 + 144);
    uint64_t v35 = *(void *)(v73 + 136);
    uint64_t v32 = *(void *)(v73 + 184);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    uint64_t v30 = type metadata accessor for TemplatingResult();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v35, 1);

    swift_task_dealloc();
    float v31 = *(uint64_t (**)(void))(*(void *)(v73 + 16) + 8);
    return v31();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  void v6[2] = *v1;
  v6[32] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  else
  {
    id v4 = (void *)v6[29];
    id v5 = (void *)v6[28];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v5 = (id)v0[26];
  uint64_t v6 = (id)v0[25];
  char v8 = (id)v0[19];
  uint64_t v7 = (id)v0[18];
  id v4 = v0[17];
  v0[2] = v0;
  id v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[2] + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  void v6[2] = *v1;
  unsigned char v6[40] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  else
  {
    id v4 = (void *)v6[37];
    id v5 = (void *)v6[36];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v5 = (id)v0[34];
  uint64_t v6 = (id)v0[33];
  char v8 = (id)v0[19];
  uint64_t v7 = (id)v0[18];
  id v4 = v0[17];
  v0[2] = v0;
  id v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[2] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  id v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v2 = PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  id v5 = (id)v0[41];
  uint64_t v7 = (id)v0[19];
  uint64_t v6 = (id)v0[18];
  id v4 = v0[17];
  v0[2] = v0;
  id v1 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[2] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v3 = (id)v0[29];
  id v4 = (id)v0[28];
  id v5 = (id)v0[26];
  uint64_t v6 = (id)v0[25];
  char v8 = (id)v0[19];
  uint64_t v7 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  id v3 = (id)v0[37];
  id v4 = (id)v0[36];
  id v5 = (id)v0[34];
  uint64_t v6 = (id)v0[33];
  char v8 = (id)v0[19];
  uint64_t v7 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  id v3 = (id)v0[41];
  id v5 = (id)v0[19];
  id v4 = (id)v0[18];
  v0[2] = v0;
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 400) = v8;
  *(void *)(v9 + 392) = v20;
  *(void *)(v9 + 384) = a8;
  *(void *)(v9 + 376) = a7;
  *(void *)(v9 + 368) = a6;
  *(void *)(v9 + 360) = a5;
  *(unsigned char *)(v9 + 523) = a4;
  *(void *)(v9 + 352) = a3;
  *(void *)(v9 + 344) = a2;
  *(void *)(v9 + 336) = a1;
  *(void *)(v9 + 248) = v9;
  *(void *)(v9 + 216) = 0;
  *(void *)(v9 + 224) = 0;
  *(unsigned char *)(v9 + 520) = 0;
  *(void *)(v9 + 256) = 0;
  *(void *)(v9 + 264) = 0;
  *(void *)(v9 + 232) = 0;
  *(void *)(v9 + 240) = 0;
  *(void *)(v9 + 272) = 0;
  *(void *)(v9 + 280) = 0;
  *(void *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 0;
  *(void *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 328) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v9 + 408) = swift_task_alloc();
  *(void *)(v9 + 416) = swift_task_alloc();
  *(void *)(v9 + 424) = swift_task_alloc();
  *(void *)(v9 + 432) = swift_task_alloc();
  *(void *)(v9 + 440) = swift_task_alloc();
  type metadata accessor for Locale();
  *(void *)(v9 + 448) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v9 + 456) = v10;
  *(void *)(v9 + 464) = *(void *)(v10 - 8);
  *(void *)(v9 + 472) = swift_task_alloc();
  *(void *)(v9 + 216) = a2;
  *(void *)(v9 + 224) = a3;
  *(unsigned char *)(v9 + 520) = a4;
  *(void *)(v9 + 256) = a5;
  *(void *)(v9 + 264) = a6;
  *(void *)(v9 + 232) = a7;
  *(void *)(v9 + 240) = a8;
  *(void *)(v9 + 272) = v20;
  *(void *)(v9 + 280) = v8;
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:), 0);
}

uint64_t PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)()
{
  uint64_t v83 = v0;
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v59 = *(void *)(v0 + 464);
  uint64_t v60 = *(void *)(v0 + 456);
  char v61 = *(unsigned char *)(v0 + 523);
  uint64_t v63 = *(void *)(v0 + 352);
  uint64_t v62 = *(void *)(v0 + 344);
  *(void *)(v0 + 248) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v1, v2, v60);
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = v61;
  swift_bridgeObjectRetain();
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v62;
  *(void *)(v67 + 24) = v63;
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 288) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 524);
  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 32;
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 8;
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = partial apply for implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  *(void *)(v66 + 24) = v65;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v71 + 24) = v66;
  uint64_t v72 = swift_allocObject();
  *(unsigned char *)(v72 + 16) = 32;
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 8;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v68 + 24) = v67;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v74 + 24) = v68;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v75 = v3;
  swift_retain();
  *uint64_t v75 = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[1] = v69;
  swift_retain();
  v75[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[3] = v70;
  swift_retain();
  v75[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[5] = v71;
  swift_retain();
  v75[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[7] = v72;
  swift_retain();
  v75[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[9] = v73;
  swift_retain();
  v75[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[11] = v74;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v76, v77))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v56 = createStorage<A>(capacity:type:)(0);
    uint64_t v57 = createStorage<A>(capacity:type:)(2);
    uint64_t v78 = buf;
    uint64_t v79 = v56;
    uint64_t v80 = v57;
    serialize(_:at:)(2, &v78);
    serialize(_:at:)(2, &v78);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v82 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v78, (uint64_t)&v79, (uint64_t)&v80);
    _os_log_impl(&dword_25D85A000, v76, v77, "#PaymentsErrorTemplateProvider errorWithCode intentType %s, code %s", buf, size);
    destroyStorage<A>(_:count:)(v56, 0, v54);
    destroyStorage<A>(_:count:)(v57, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v50 = *(void *)(v58 + 472);
  uint64_t v51 = *(void *)(v58 + 456);
  id v53 = *(id *)(v58 + 360);
  uint64_t v49 = *(void *)(v58 + 464);

  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
  type metadata accessor for PaymentsDialogConcept.Builder();
  uint64_t v52 = PaymentsDialogConcept.Builder.__allocating_init()();
  *(void *)(v58 + 480) = v52;
  *(void *)(v58 + 296) = v52;
  id v4 = v53;
  if (v53)
  {
    id v46 = *(id *)(v58 + 360);
    uint64_t v43 = *(void *)(v58 + 400);
    char v48 = *(unsigned char *)(v58 + 523);
    *(void *)(v58 + 320) = v46;
    type metadata accessor for DialogPerson();
    id v5 = v46;
    outlined init with copy of GlobalsProviding(v43 + 16, v58 + 16);
    uint64_t v45 = *(void *)(v58 + 40);
    uint64_t v44 = *(void *)(v58 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + 16), v45);
    (*(void (**)(uint64_t))(v44 + 16))(v45);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + 56), *(void *)(v58 + 80));
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v47 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
    __swift_destroy_boxed_opaque_existential_0(v58 + 56);
    __swift_destroy_boxed_opaque_existential_0(v58 + 16);
    *(void *)(v58 + 328) = v47;
    *(unsigned char *)(v58 + 52String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SearchForCardInfo#UnsupportedLocale", 0x23uLL, 1) = v48;
    *(unsigned char *)(v58 + 522) = 0;
    lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode();
    if (== infix<A>(_:_:)())
    {
      swift_retain();
      swift_retain();
      uint64_t v42 = (uint64_t *)(v52 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payerName);
      swift_beginAccess();
      *uint64_t v42 = v47;
    }
    else
    {
      swift_retain();
      swift_retain();
      uint64_t v41 = (uint64_t *)(v52 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_payeeName);
      swift_beginAccess();
      *uint64_t v41 = v47;
    }
    swift_release();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  uint64_t v40 = *(void **)(v58 + 368);
  id v6 = v40;
  if (v40)
  {
    id v38 = *(id *)(v58 + 368);
    *(void *)(v58 + 312) = v38;
    type metadata accessor for DialogCurrency.Builder();
    DialogCurrency.Builder.__allocating_init()();
    id v39 = objc_msgSend(v38, sel_amount);
    if (v39)
    {
      objc_msgSend(v39, sel_doubleValue);
    }
    dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
    swift_release();
    id v37 = objc_msgSend(v38, sel_currencyCode);
    if (v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v7;

      uint64_t v36 = v35;
    }
    else
    {
      uint64_t v36 = 0;
    }
    if (v36)
    {
      uint64_t v34 = *(void *)(v58 + 440);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 56))(v34, 0, 1);
    }
    else
    {
      uint64_t v31 = *(void *)(v58 + 440);
      uint64_t v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v31, 1);
    }
    uint64_t v32 = *(void *)(v58 + 440);
    dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
    outlined destroy of SpeakableString?(v32);
    swift_release();
    uint64_t v33 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
    swift_release();
    swift_retain();
    swift_beginAccess();
    *(void *)(v52 + 16) = v33;
    swift_release();
    swift_endAccess();
    swift_release();
  }
  uint64_t v30 = *(void *)(v58 + 384);
  swift_bridgeObjectRetain();
  if (v30)
  {
    uint64_t v29 = *(void *)(v58 + 432);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 56))(v29, 0, 1);
  }
  else
  {
    uint64_t v17 = *(void *)(v58 + 432);
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v17, 1);
  }
  uint64_t v20 = *(const void **)(v58 + 432);
  id v18 = *(void **)(v58 + 424);
  uint64_t v23 = *(void *)(v58 + 416);
  uint64_t v25 = *(void *)(v58 + 408);
  uint64_t v22 = *(void *)(v58 + 400);
  char v24 = *(unsigned char *)(v58 + 523);
  outlined init with copy of SpeakableString?(v20, v18);
  uint64_t v19 = (void *)(v52 + OBJC_IVAR____TtCC19SiriPaymentsIntents21PaymentsDialogConcept7Builder_memo);
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v18, v19);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v20);
  uint64_t v21 = App.sirikitApp.getter();
  swift_retain();
  swift_beginAccess();
  *(void *)(v52 + 24) = v21;
  swift_release();
  swift_endAccess();
  swift_release();
  uint64_t v28 = PaymentsDialogConcept.Builder.build()();
  *(void *)(v58 + 488) = v28;
  *(void *)(v58 + 304) = v28;
  *(void *)(v58 + 496) = *(void *)(v22 + 56);
  swift_retain();
  String.toSpeakableString.getter();
  uint64_t v26 = type metadata accessor for SpeakableString();
  uint64_t v27 = *(void (**)(uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v23);
  swift_retain();
  Constants.IntentTypeCATCode.rawValue.getter(v24);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v27)(v25, 0, 1, v26);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v58 + 504) = v11;
  *uint64_t v11 = *(void *)(v58 + 248);
  v11[1] = PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  uint64_t v12 = *(void *)(v58 + 416);
  uint64_t v13 = *(void *)(v58 + 408);
  uint64_t v14 = *(void *)(v58 + 336);
  return PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(v14, v12, v28, v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  id v5 = (void *)*v1;
  v5[31] = *v1;
  v5[64] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  }
  else
  {
    id v4 = v5[52];
    outlined destroy of SpeakableString?(v5[51]);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 248) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 248) + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  id v4 = v0[52];
  uint64_t v1 = v0[51];
  v0[31] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[31] + 8);
  return v2();
}

uint64_t implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(char a1)
{
  return Constants.IntentTypeCATCode.rawValue.getter(a1);
}

uint64_t PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = v4;
  v5[11] = a4;
  v5[10] = a3;
  v5[9] = a2;
  v5[8] = a1;
  v5[4] = v5;
  void v5[2] = 0;
  v5[3] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  void v5[2] = a2;
  v5[3] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:), 0);
}

uint64_t PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:)()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v27 = *(void *)(v0 + 72);
  *(void *)(v0 + 32) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v2, v26);
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 56) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v29 = *(_DWORD *)(v0 + 208);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 32;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v31 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v34 + 24) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v3;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v32;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v33;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v36, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(1);
    id v38 = buf;
    uint64_t v39 = v22;
    uint64_t v40 = v23;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(1, &v38);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25D85A000, v36, v37, "#PaymentsErrorTemplateProvider searchForAccountErrorWithCode code %s", buf, v29);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v18 = v24[17];
  uint64_t v19 = v24[15];
  uint64_t v17 = v24[16];

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  if (App.isFirstParty.getter())
  {
    uint64_t v15 = v24[14];
    v24[18] = *(void *)(v24[12] + 64);
    swift_retain();
    String.toSpeakableString.getter();
    uint64_t v4 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 56))(v15, 0, 1);
    uint64_t v16 = App.sirikitApp.getter();
    v24[19] = v16;
    id v5 = (void *)swift_task_alloc();
    v24[20] = v5;
    void *v5 = v24[4];
    v5[1] = PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:);
    uint64_t v6 = v24[14];
    uint64_t v7 = v24[8];
    return SearchForAccountsCATs.errorWithCodeForApplePay(errorCode:app:)(v7, v6, v16);
  }
  else
  {
    uint64_t v13 = v24[13];
    v24[22] = *(void *)(v24[12] + 64);
    swift_retain();
    String.toSpeakableString.getter();
    uint64_t v9 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 56))(v13, 0, 1);
    uint64_t v14 = App.sirikitApp.getter();
    v24[23] = v14;
    uint64_t v10 = (void *)swift_task_alloc();
    v24[24] = v10;
    *uint64_t v10 = v24[4];
    v10[1] = PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:);
    uint64_t v11 = v24[13];
    uint64_t v12 = v24[8];
    return SearchForAccountsCATs.errorWithCode(errorCode:app:)(v12, v11, v14);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void *v5;
  uint64_t v6;

  id v5 = (void *)*v1;
  v5[4] = *v1;
  v5[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:), 0);
  }
  else
  {
    uint64_t v4 = v5[14];
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v5[4] + 8);
    return v2();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void *v5;
  uint64_t v6;

  id v5 = (void *)*v1;
  v5[4] = *v1;
  v5[25] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsErrorTemplateProvider.searchForAccountErrorWithCode(responseCode:app:), 0);
  }
  else
  {
    uint64_t v4 = v5[13];
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v5[4] + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  id v3 = *(void *)(v0 + 112);
  *(void *)(v0 + 32) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 32) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  id v3 = *(void *)(v0 + 104);
  *(void *)(v0 + 32) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 32) + 8);
  return v1();
}

uint64_t PaymentsErrorTemplateProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_release();
  swift_release();
  return v2;
}

uint64_t PaymentsErrorTemplateProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.continueInAppError(intentType:app:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.continueInAppError(intentType:app:)(a1, a2, a3);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.errorWithCode(from:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.errorWithCode(from:)(a1, a2);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.unsupportedErrorWithCode(from:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(a1, a2);
}

uint64_t protocol witness for PaymentsErrorTemplateProviding.errorWithCode(intent:intentResponse:app:) in conformance PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsErrorTemplateProvider.errorWithCode(intent:intentResponse:app:)(a1, a2, a3, a4);
}

uint64_t sub_25D8D7880()
{
  uint64_t v2 = *(void *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)()
{
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v1 = type metadata accessor for ParameterResolutionRecord();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  return implicit closure #1 in PaymentsErrorTemplateProvider.unsupportedErrorWithCode(from:)(v2, v4);
}

uint64_t sub_25D8D7A04()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7A30()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7A5C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7A9C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7ADC()
{
  uint64_t v2 = *(void *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D8D7BB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7BE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7C10()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7C50()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7C90()
{
  uint64_t v2 = *(void *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D8D7D6C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7D98()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7DC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7E04()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7E44()
{
  uint64_t v2 = *(void *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25D8D7F20()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7F4C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7F78()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7FB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D7FF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)()
{
  return implicit closure #1 in PaymentsErrorTemplateProvider.errorWithCode(responseCode:intentType:intentPerson:currencyAmount:memo:app:)(*(unsigned char *)(v0 + 16));
}

uint64_t sub_25D8D802C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D806C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8098()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D80C4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8104()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8144()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8170()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D819C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D81DC()
{
  return swift_deallocObject();
}

void *outlined init with copy of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined assign with take of SpeakableString?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for SpeakableString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode;
  if (!lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode;
  if (!lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.IntentTypeCATCode and conformance Constants.IntentTypeCATCode);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D8D85F0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8630()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D865C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D8688()
{
  return swift_deallocObject();
}

uint64_t sub_25D8D86C8()
{
  return swift_deallocObject();
}

uint64_t type metadata completion function for PaymentsErrorTemplateProvider()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PaymentsErrorTemplateProvider()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for PaymentsErrorTemplateProviding.IntentResponseType : SiriKitPaymentsIntentResponse in PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t associated type witness table accessor for PaymentsErrorTemplateProviding.IntentType : SiriKitPaymentsIntent in PaymentsErrorTemplateProvider<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

id static SKIDirectInvocationPayload.from(_:)(char a1)
{
  return SKIDirectInvocationPayload.__allocating_init(identifier:)();
}

SiriPaymentsIntents::DIIdentifier __swiftcall DIIdentifier.init(namespace:id:)(Swift::String a1, Swift::String id)
{
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  object = a1._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DIIdentifier();
  uint64_t v2 = object;
  uint64_t v4 = id._object;
  uint64_t v3 = id._countAndFlagsBits;
  uint64_t v5 = countAndFlagsBits;
  result.id._object = v4;
  result.id._uint64_t countAndFlagsBits = v3;
  result.namespace._object = v2;
  result.namespace._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t DIIdentifier.payloadId.getter()
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

uint64_t DirectInvocationCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v129 = a4;
  uint64_t v130 = a1;
  uint64_t v166 = a2;
  uint64_t v167 = a3;
  uint64_t v149 = 0;
  uint64_t v131 = partial apply for implicit closure #2 in DirectInvocationCodable.init(_:);
  id v132 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v133 = partial apply for implicit closure #3 in DirectInvocationCodable.init(_:);
  uint64_t v134 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Swift::String v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v192 = *MEMORY[0x263EF8340];
  uint32_t v185 = 0;
  uint64_t v184 = 0;
  uint64_t v183 = 0;
  uint64_t v141 = 0;
  uint64_t v186 = 0;
  unint64_t v187 = 0;
  uint64_t v176 = a2;
  uint64_t v142 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v144 = *(void *)(v142 - 8);
  uint64_t v143 = v142 - 8;
  uint64_t v145 = v144;
  uint64_t v146 = *(void *)(v144 + 64);
  unint64_t v147 = (v146 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v148 = (char *)&v43 - v147;
  uint64_t v150 = type metadata accessor for Logger();
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v152 = v150 - 8;
  unint64_t v153 = (*(void *)(v151 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v149);
  unint64_t v154 = (char *)&v43 - v153;
  uint64_t v155 = type metadata accessor for Optional();
  unint64_t v156 = (*(void *)(*(void *)(v155 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v155);
  uint64_t v157 = (uint64_t)&v43 - v156;
  uint64_t v158 = *(void *)(v5 - 8);
  uint64_t v159 = v5 - 8;
  unint64_t v160 = (*(void *)(v158 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v43 - v156);
  uint64_t v161 = (char *)&v43 - v160;
  unint64_t v162 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388]((char *)&v43 - v160);
  uint64_t v163 = (char *)&v43 - v162;
  uint32_t v185 = (char *)&v43 - v162;
  unint64_t v164 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  os_log_type_t v165 = (char *)&v43 - v164;
  uint64_t v184 = (char *)&v43 - v164;
  uint64_t v183 = a1;
  uint64_t v170 = Parse.DirectInvocation.identifier.getter();
  uint64_t v173 = v9;
  (*(void (**)(void))(v167 + 32))();
  uint64_t v168 = v10;
  uint64_t v169 = v11;
  uint64_t v171 = DIIdentifier.payloadId.getter();
  uint64_t v172 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v174 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v174)
  {
    uint64_t v191 = 0;
    id v128 = self;
    uint64_t v190 = Parse.DirectInvocation.userData.getter();
    if (v190)
    {
      uint64_t v175 = v190;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v175 = Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [SFCardSection]();
    }
    uint64_t v122 = v175;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v123 = 0;
    type metadata accessor for NSJSONWritingOptions();
    uint64_t v124 = _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    v182[0] = v191;
    id v127 = objc_msgSend(v128, sel_dataWithJSONObject_options_error_, isa, v182[1], v182);
    id v125 = v182[0];
    id v13 = v182[0];
    uint64_t v14 = v191;
    uint64_t v191 = v125;

    swift_unknownObjectRelease();
    if (v127)
    {
      id v121 = v127;
      id v115 = v127;
      uint64_t v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v117 = v15;

      uint64_t v118 = v116;
      unint64_t v119 = v117;
      uint64_t v120 = v141;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0xF000000000000000;
      id v46 = v191;
      id v47 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v50 = 0;

      uint64_t v118 = v48;
      unint64_t v119 = v49;
      uint64_t v120 = v50;
    }
    uint64_t v112 = v120;
    unint64_t v113 = v119;
    uint64_t v114 = v118;
    if ((v119 & 0xF000000000000000) == 0xF000000000000000)
    {
      uint64_t v109 = (uint64_t)v112;
    }
    else
    {
      uint64_t v110 = v114;
      unint64_t v111 = v113;
      uint64_t v16 = v112;
      unint64_t v105 = v113;
      uint64_t v104 = v114;
      uint64_t v186 = v114;
      unint64_t v187 = v113;
      type metadata accessor for JSONDecoder();
      uint64_t v106 = JSONDecoder.__allocating_init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      uint64_t v107 = (uint64_t)v16;
      uint64_t v108 = v16;
      if (v16)
      {
        id v44 = v108;
        uint64_t v45 = 0;
        swift_release();

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v157, 1, 1, v166);
        uint64_t v103 = v45;
      }
      else
      {
        swift_release();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v157, 0, 1, v166);
        uint64_t v103 = v107;
      }
      uint64_t v102 = v103;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v157, 1, v166) != 1)
      {
        uint64_t v97 = *(void (**)(void, void, void))(v158 + 32);
        uint64_t v96 = v158 + 32;
        v97(v163, v157, v166);
        uint64_t v99 = *(void (**)(void, void, void))(v158 + 16);
        uint64_t v98 = v158 + 16;
        v99(v161, v163, v166);
        v97(v165, v161, v166);
        uint64_t v101 = *(void (**)(void, void))(v158 + 8);
        uint64_t v100 = v158 + 8;
        v101(v163, v166);
        outlined consume of Data._Representation(v104, v105);
        v99(v129, v165, v166);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v129, 0, 1, v166);
        (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v130, v142);
        return ((uint64_t (*)(char *, uint64_t))v101)(v165, v166);
      }
      outlined destroy of A?(v157, v166);
      outlined consume of Data._Representation(v104, v105);
      uint64_t v109 = v102;
    }
    uint64_t v18 = v154;
    uint64_t v64 = v109;
    uint64_t v19 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v18, v19, v150);
    uint64_t v65 = v145;
    uint64_t v68 = *(void (**)(void, void, void))(v144 + 16);
    uint64_t v67 = v144 + 16;
    v68(v148, v130, v142);
    uint64_t v69 = *(unsigned int *)(v65 + 80);
    unint64_t v66 = (v69 + 16) & ~(unint64_t)v69;
    uint64_t v82 = 7;
    uint64_t v77 = swift_allocObject();
    uint64_t v72 = *(void (**)(void, void, void))(v144 + 32);
    uint64_t v71 = v144 + 32;
    v72(v77 + v66, v148, v142);
    v68(v148, v130, v142);
    unint64_t v70 = (v69 + 16) & ~(unint64_t)v69;
    uint64_t v83 = swift_allocObject();
    v72(v83 + v70, v148, v142);
    os_log_type_t v94 = Logger.logObject.getter();
    int v95 = static os_log_type_t.error.getter();
    uint64_t v75 = &v180;
    uint64_t v180 = 22;
    unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v76 = v181;
    uint64_t v79 = 17;
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = 34;
    uint64_t v86 = swift_allocObject();
    int v80 = 8;
    *(unsigned char *)(v86 + 16) = 8;
    uint64_t v81 = 32;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v77;
    uint64_t v78 = v20;
    *(void *)(v20 + 16) = v131;
    *(void *)(v20 + 24) = v21;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v78;
    uint64_t v87 = v22;
    *(void *)(v22 + 16) = v132;
    *(void *)(v22 + 24) = v23;
    uint64_t v88 = swift_allocObject();
    *(unsigned char *)(v88 + 16) = 32;
    uint64_t v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = v80;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v83;
    uint64_t v84 = v24;
    *(void *)(v24 + 16) = v133;
    *(void *)(v24 + 24) = v25;
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v84;
    uint64_t v91 = v26;
    *(void *)(v26 + 16) = v134;
    *(void *)(v26 + 24) = v27;
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v90 = _allocateUninitializedArray<A>(_:)();
    uint64_t v92 = v28;
    swift_retain();
    uint64_t v29 = v85;
    uint64_t v30 = v92;
    *uint64_t v92 = v135;
    v30[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = v86;
    uint64_t v32 = v92;
    v92[2] = v136;
    v32[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
    swift_retain();
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87;
    uint64_t v34 = v92;
    v92[4] = v137;
    v34[5] = v33;
    swift_retain();
    uint64_t v35 = v88;
    uint64_t v36 = v92;
    v92[6] = v138;
    v36[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
    swift_retain();
    uint64_t v37 = v89;
    id v38 = v92;
    v92[8] = v139;
    v38[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
    swift_retain();
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
    uint64_t v40 = v92;
    v92[10] = v140;
    v40[11] = v39;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      uint64_t v41 = v64;
      uint64_t v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v57 = createStorage<A>(capacity:type:)(0);
      uint64_t v58 = createStorage<A>(capacity:type:)(2);
      uint64_t v60 = &v179;
      uint64_t v179 = v56;
      char v61 = &v189;
      uint64_t v189 = v57;
      uint64_t v62 = &v188;
      uint64_t v188 = v58;
      unsigned int v59 = 2;
      serialize(_:at:)(2, &v179);
      serialize(_:at:)(v59, v60);
      uint64_t v177 = v135;
      uint64_t v178 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
      uint64_t v63 = v41;
      if (v41)
      {
        __break(1u);
      }
      else
      {
        uint64_t v177 = v136;
        uint64_t v178 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v179, (uint64_t)&v189, (uint64_t)&v188);
        uint64_t v54 = 0;
        uint64_t v42 = v54;
        uint64_t v177 = v137;
        uint64_t v178 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v179, (uint64_t)&v189, (uint64_t)&v188);
        uint64_t v53 = v42;
        uint64_t v177 = v138;
        uint64_t v178 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v179, (uint64_t)&v189, (uint64_t)&v188);
        uint64_t v52 = 0;
        uint64_t v177 = v139;
        uint64_t v178 = v89;
        closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v179, (uint64_t)&v189, (uint64_t)&v188);
        uint64_t v51 = 0;
        uint64_t v177 = v140;
        uint64_t v178 = v91;
        closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v179, (uint64_t)&v189, (uint64_t)&v188);
        _os_log_impl(&dword_25D85A000, v94, (os_log_type_t)v95, "JSON Serializer failed to convert %{public}s with userData of %s to typed object", v56, v76);
        destroyStorage<A>(_:count:)(v57, 0, v55);
        destroyStorage<A>(_:count:)(v58, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v56, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v151 + 8))(v154, v150);
  }
  (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v130, v142);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v129, 1, 1, v166);
}

uint64_t implicit closure #2 in DirectInvocationCodable.init(_:)()
{
  return Parse.DirectInvocation.identifier.getter();
}

uint64_t implicit closure #3 in DirectInvocationCodable.init(_:)()
{
  return String.init<A>(describing:)();
}

id DirectInvocationCodable.asPayload.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = a1;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = a1 - 8;
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v4 - v5;
  uint64_t v12 = v2;
  type metadata accessor for SKIDirectInvocationPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v8, v9);
  return SKIDirectInvocationPayload.init<A>(_:)(v11, v9, v10);
}

id SKIDirectInvocationPayload.init<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  v27[3] = a1;
  id v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  (*(void (**)(void))(a3 + 32))();
  uint64_t v3 = DIIdentifier.payloadId.getter();
  id v19 = (id)MEMORY[0x2611B9130](v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v18, sel_initWithIdentifier_, v19);

  id v4 = v20;
  id v5 = v20;
  id v28 = 0;
  uint64_t v21 = self;
  type metadata accessor for JSONEncoder();
  JSONEncoder.__allocating_init()();
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v26 = v6;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v25, v26);
  type metadata accessor for NSJSONReadingOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v27[0] = 0;
  id v17 = objc_msgSend(v21, sel_JSONObjectWithData_options_error_, isa, v27[1], v27);
  id v15 = v27[0];
  id v7 = v27[0];
  uint64_t v8 = v28;
  id v28 = v15;

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    id v10 = v28;
    uint64_t v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    memset(v29, 0, sizeof(v29));
    uint64_t v30 = 0;
  }
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      id v13 = v27[2];
    }
    else {
      id v13 = 0;
    }
    uint64_t v14 = v13;
  }
  else
  {
    outlined destroy of FlowActivity?((uint64_t)v29);
    uint64_t v14 = 0;
  }
  v27[4] = v14;
  if (!v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [SFCardSection]();
  }
  _dictionaryUpCast<A, B, C, D>(_:)();
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setUserData_, v12);

  (*(void (**)(void *))(*(void *)(a2 - 8) + 8))(a1);
  return v20;
}

id DirectInvocationCodable.serializeToAceCommand(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = self;
  id v8 = DirectInvocationCodable.asPayload.getter(a2, a3);
  id v9 = objc_msgSend(v7, sel_runSiriKitExecutorCommandWithContext_payload_, a1);

  return v9;
}

id DirectInvocationCodable.serializeToStartLocalRequest(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = DirectInvocationCodable.serializeToAceCommand(context:)(a1, a2, a3);
  id v5 = self;
  id v3 = v7;
  id v6 = objc_msgSend(v5, sel_wrapCommandInStartLocalRequest_, v7);
  swift_unknownObjectRelease();

  return v6;
}

uint64_t DirectInvocationCodable.serializeToBase64(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = DirectInvocationCodable.serializeToAceCommand(context:)(a1, a2, a3);
  uint64_t countAndFlagsBits = AceObject.serializeToBase64()().value._countAndFlagsBits;

  return countAndFlagsBits;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SKIDirectInvocationPayload.init(identifier:)();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DIIdentifier()
{
}

uint64_t sub_25D8DAA58()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in DirectInvocationCodable.init(_:)()
{
  type metadata accessor for Parse.DirectInvocation();

  return implicit closure #2 in DirectInvocationCodable.init(_:)();
}

uint64_t sub_25D8DAB8C()
{
  uint64_t v2 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in DirectInvocationCodable.init(_:)()
{
  type metadata accessor for Parse.DirectInvocation();

  return implicit closure #3 in DirectInvocationCodable.init(_:)();
}

uint64_t Parse.DirectInvocation.is<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Parse.DirectInvocation.identifier.getter();
  (*(void (**)(uint64_t))(a3 + 32))(a2);
  DIIdentifier.payloadId.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

id @nonobjc SKIDirectInvocationPayload.init(identifier:)()
{
  id v2 = (id)MEMORY[0x2611B9130]();
  id v3 = objc_msgSend(v1, sel_initWithIdentifier_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_25D8DADF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAE20()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAE4C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAE8C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAECC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAEF8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAF24()
{
  return swift_deallocObject();
}

uint64_t sub_25D8DAF64()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

uint64_t destroy for DIIdentifier()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DIIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  swift_bridgeObjectRetain();
  SiriPaymentsIntents::DIIdentifier result = a1;
  a1[3] = v6;
  return result;
}

void *assignWithCopy for DIIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void *assignWithTake for DIIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIIdentifier(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v4 = *(void *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (*(void *)(a1 + 8) < 0x100000000uLL) {
        int v3 = *(void *)(a1 + 8);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DIIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)__n128 result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 8) = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIIdentifier()
{
  return &type metadata for DIIdentifier;
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  id v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  id v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  id v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
  id v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INSendPaymentIntent();
  unint64_t v1 = type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  id v19 = v29;
  void v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  id v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  id v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  id v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  id v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  uint64_t v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  id v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v1 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  id v19 = v29;
  void v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  id v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.authenticationPolicy.getter()
{
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_release();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = v3;
  v4[25] = a3;
  v4[24] = a2;
  v4[23] = a1;
  v4[12] = v4;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[17] = 0;
  uint64_t v9 = *v3;
  v4[27] = *v3;
  v4[28] = *(void *)(v9 + 216);
  uint64_t v5 = type metadata accessor for ParameterResolutionRecord();
  v4[29] = v5;
  v4[30] = *(void *)(v5 - 8);
  v4[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v4[33] = v6;
  v4[34] = *(void *)(v6 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[37] = v7;
  v4[38] = *(void *)(v7 - 8);
  v4[39] = swift_task_alloc();
  v4[13] = a2;
  v4[14] = a3;
  v4[15] = v3;
  return MEMORY[0x270FA2498](PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:), 0);
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 296);
  *(void *)(v0 + 96) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v1, v2, v35);
  id v38 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 128) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v36 = *(unsigned int *)(v0 + 320);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v39 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v38, v37))
  {
    uint64_t v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v30 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    *(void *)(v33 + 152) = v29;
    *(void *)(v33 + 160) = v30;
    *(void *)(v33 + 168) = v31;
    serialize(_:at:)(0, (unsigned char **)(v33 + 152));
    serialize(_:at:)(0, (unsigned char **)(v33 + 152));
    *(void *)(v33 + 176) = v39;
    uint64_t v32 = (void *)swift_task_alloc();
    v32[2] = v33 + 152;
    v32[3] = v33 + 160;
    v32[4] = v33 + 168;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v38, v37, "#PaymentsNeedsConfirmationFlowStrategy parseConfirmationResponse", v29, v36);
    destroyStorage<A>(_:count:)(v30, 0, v28);
    destroyStorage<A>(_:count:)(v31, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v29, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v33 + 312);
  uint64_t v18 = *(void *)(v33 + 296);
  uint64_t v24 = *(void *)(v33 + 288);
  uint64_t v25 = *(void *)(v33 + 264);
  uint64_t v20 = *(void *)(v33 + 208);
  uint64_t v16 = *(void *)(v33 + 304);
  uint64_t v23 = *(void *)(v33 + 272);
  uint64_t v19 = *(void *)(v33 + 216);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  Input.parse.getter();
  id v22 = (id)ParameterResolutionRecord.intent.getter();
  uint64_t v21 = *(void *)(v19 + 240);
  static AceService.currentAsync.getter();
  swift_retain();
  outlined init with copy of GlobalsProviding(v20 + 64, v33 + 56);
  swift_release();
  id v27 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(v22, v21, v33 + 16, v33 + 56);
  __swift_destroy_boxed_opaque_existential_0(v33 + 56);
  __swift_destroy_boxed_opaque_existential_0(v33 + 16);

  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v26(v24, v25);
  if (v27)
  {
    uint64_t v15 = swift_dynamicCastUnknownClass();
    if (v15)
    {
      uint64_t v14 = (void *)v15;
    }
    else
    {

      uint64_t v14 = 0;
    }
    unint64_t v13 = v14;
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v7 = *(void *)(v33 + 280);
  uint64_t v8 = *(void *)(v33 + 264);
  uint64_t v6 = *(void *)(v33 + 256);
  uint64_t v12 = *(void *)(v33 + 248);
  uint64_t v11 = *(void *)(v33 + 232);
  uint64_t v10 = *(void *)(v33 + 200);
  uint64_t v9 = *(void *)(v33 + 240);
  *(void *)(v33 + 136) = v13;
  Input.parse.getter();
  Parse.confirmationResponse.getter(v6);
  v26(v7, v8);
  id v3 = v13;
  *(void *)(v33 + 144) = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v10, v11);
  if (!*(void *)(v33 + 144))
  {
    ParameterResolutionRecord.intent.getter();
    outlined destroy of SFRichText?((id *)(v33 + 144));
  }
  (*(void (**)(void))(*(void *)(v33 + 240) + 8))();
  NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(*(void *)(v33 + 96) + 8);
  return v4();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a1;
  v4[2] = v4;
  void v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  void v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](PaymentsNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:), 0);
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v16 = *(unsigned int *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v10 = createStorage<A>(capacity:type:)(0);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    *(void *)(v13 + 56) = buf;
    *(void *)(v13 + 64) = v10;
    *(void *)(v13 + 72) = v11;
    serialize(_:at:)(0, (unsigned char **)(v13 + 56));
    serialize(_:at:)(0, (unsigned char **)(v13 + 56));
    *(void *)(v13 + 80) = v19;
    uint64_t v12 = (void *)swift_task_alloc();
    v12[2] = v13 + 56;
    v12[3] = v13 + 64;
    void v12[4] = v13 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v18, v17, "#PaymentsNeedsConfirmationFlowStrategy base makePromptForConfirmation, this should not be called", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v13 + 112);
  uint64_t v6 = *(void *)(v13 + 96);
  uint64_t v5 = *(void *)(v13 + 104);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v13 + 16) + 8);
  return v3();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a1;
  void v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  uint64_t v6 = type metadata accessor for Logger();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:), 0);
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 104);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v2, v15);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 56) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v16 = *(unsigned int *)(v0 + 128);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v18, v17))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v10 = createStorage<A>(capacity:type:)(0);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    *(void *)(v13 + 64) = buf;
    *(void *)(v13 + 72) = v10;
    *(void *)(v13 + 80) = v11;
    serialize(_:at:)(0, (unsigned char **)(v13 + 64));
    serialize(_:at:)(0, (unsigned char **)(v13 + 64));
    *(void *)(v13 + 88) = v19;
    uint64_t v12 = (void *)swift_task_alloc();
    v12[2] = v13 + 64;
    v12[3] = v13 + 72;
    void v12[4] = v13 + 80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v18, v17, "#PaymentsNeedsConfirmationFlowStrategy base makeIntentCancelledByParameterRejectionResponse, this should not be called", buf, v16);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v13 + 120);
  uint64_t v6 = *(void *)(v13 + 104);
  uint64_t v5 = *(void *)(v13 + 112);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v13 + 16) + 8);
  return v3();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a1;
  uint64_t v28 = a2;
  uint64_t v27 = a3;
  uint64_t v26 = a4;
  uint64_t v22 = a5;
  uint64_t v25 = a6;
  uint64_t v20 = a7;
  uint64_t v42 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v43 = a6;
  uint64_t v16 = (void *)*v7;
  uint64_t v23 = *(void *)(a6 - 8);
  uint64_t v24 = a6 - 8;
  unint64_t v15 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v19 = (uint64_t)&v14 - v15;
  uint64_t v41 = v16[27];
  uint64_t v40 = v16[28];
  uint64_t v39 = v16[29];
  uint64_t v38 = v8;
  uint64_t v37 = v9;
  uint64_t v36 = v10;
  uint64_t v35 = v11;
  uint64_t v34 = v12;
  uint64_t v42 = v7;
  uint64_t v21 = v33;
  outlined init with copy of GlobalsProviding(v8, (uint64_t)v33);
  swift_retain();
  os_log_type_t v17 = v32;
  outlined init with copy of GlobalsProviding(v27, (uint64_t)v32);
  uint64_t v18 = v31;
  outlined init with copy of GlobalsProviding(v26, (uint64_t)v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v22, v25);
  uint64_t v30 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v21, v28, (uint64_t)v17, (uint64_t)v18, v19, v25, v20);
  swift_retain();
  uint64_t v42 = (void *)v30;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v25);
  __swift_destroy_boxed_opaque_existential_0(v26);
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v29);
  swift_release();
  return v30;
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.deinit()
{
  return BaseStrategy.deinit();
}

uint64_t PaymentsNeedsConfirmationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationWithCancellationFlowStrategyAsync.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 288)
                                                                   + **(int **)(**(void **)v4 + 288));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *uint64_t v6 = *(void *)(v8 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  return PaymentsNeedsConfirmationFlowStrategy.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PaymentsNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return PaymentsNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v13 = v4;
  v4[7] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v13[8] = v5;
  uint64_t v6 = a3[28];
  uint64_t v7 = a3[29];
  uint64_t v8 = a3[30];
  uint64_t v9 = a3[31];
  v13[2] = a3[27];
  v13[3] = v6;
  void v13[4] = v7;
  v13[5] = v8;
  v13[6] = v9;
  uint64_t v10 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  void *v5 = v13[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66500](a1, a2, v10, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(unsigned int a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 56) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 56) + 8);
  return v2(a1);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 280)
                                                          + **(int **)(**(void **)v3 + 280));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[28];
  uint64_t v8 = a4[29];
  uint64_t v9 = a4[30];
  uint64_t v10 = a4[31];
  v14[2] = a4[27];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66518](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = *v1;
  uint64_t v5 = v2 + 56;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  return v3();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v14 = v5;
  v5[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v14[8] = v6;
  uint64_t v7 = a4[28];
  uint64_t v8 = a4[29];
  uint64_t v9 = a4[30];
  uint64_t v10 = a4[31];
  v14[2] = a4[27];
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  uint64_t v11 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  *uint64_t v6 = v14[7];
  v6[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66528](a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v13 = v4;
  v4[7] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v13[8] = v5;
  uint64_t v6 = a3[28];
  uint64_t v7 = a3[29];
  uint64_t v8 = a3[30];
  uint64_t v9 = a3[31];
  v13[2] = a3[27];
  v13[3] = v6;
  void v13[4] = v7;
  v13[5] = v8;
  v13[6] = v9;
  uint64_t v10 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  void *v5 = v13[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66520](a1, a2, v10, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v13 = v4;
  v4[7] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v13[8] = v5;
  uint64_t v6 = a3[28];
  uint64_t v7 = a3[29];
  uint64_t v8 = a3[30];
  uint64_t v9 = a3[31];
  v13[2] = a3[27];
  v13[3] = v6;
  void v13[4] = v7;
  v13[5] = v8;
  v13[6] = v9;
  uint64_t v10 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  void *v5 = v13[7];
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66530](a1, a2, v10, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v15 = v6;
  v6[7] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v15[8] = v7;
  uint64_t v8 = a5[28];
  uint64_t v9 = a5[29];
  uint64_t v10 = a5[30];
  uint64_t v11 = a5[31];
  v15[2] = a5[27];
  v15[3] = v8;
  v15[4] = v9;
  v15[5] = v10;
  v15[6] = v11;
  uint64_t v12 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  *uint64_t v7 = v15[7];
  v7[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F66508](a1, a2, a3, a4, v12, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v15 = v6;
  v6[7] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v15[8] = v7;
  uint64_t v8 = a5[28];
  uint64_t v9 = a5[29];
  uint64_t v10 = a5[30];
  uint64_t v11 = a5[31];
  v15[2] = a5[27];
  v15[3] = v8;
  v15[4] = v9;
  v15[5] = v10;
  v15[6] = v11;
  uint64_t v12 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  *uint64_t v7 = v15[7];
  v7[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v12, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v16 = v7;
  v7[7] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v16[8] = v8;
  uint64_t v9 = a6[28];
  uint64_t v10 = a6[29];
  uint64_t v11 = a6[30];
  uint64_t v12 = a6[31];
  v16[2] = a6[27];
  v16[3] = v9;
  v16[4] = v10;
  uint64_t v16[5] = v11;
  v16[6] = v12;
  uint64_t v13 = type metadata accessor for PaymentsNeedsConfirmationFlowStrategy();
  *uint64_t v8 = v16[7];
  v8[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance PaymentsNeedsConfirmationFlowStrategy<A, B, C>;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v13, a7);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 1048) = v3;
  *(void *)(v4 + 1040) = a3;
  *(void *)(v4 + 1032) = a2;
  *(void *)(v4 + 1024) = a1;
  *(void *)(v4 + 896) = v4;
  *(void *)(v4 + 904) = 0;
  *(void *)(v4 + 912) = 0;
  *(void *)(v4 + 920) = 0;
  *(void *)(v4 + 688) = 0;
  *(void *)(v4 + 696) = 0;
  *(unsigned char *)(v4 + 1280) = 0;
  *(void *)(v4 + 936) = 0;
  *(void *)(v4 + 784) = 0;
  *(void *)(v4 + 792) = 0;
  *(void *)(v4 + 944) = 0;
  *(void *)(v4 + 960) = 0;
  *(void *)(v4 + 968) = 0;
  *(void *)(v4 + 984) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v4 + 1056) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  *(void *)(v4 + 1064) = v5;
  *(void *)(v4 + 1072) = *(void *)(v5 - 8);
  *(void *)(v4 + 1080) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  *(void *)(v4 + 1088) = v6;
  *(void *)(v4 + 1096) = *(void *)(v6 - 8);
  *(void *)(v4 + 1104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 1112) = swift_task_alloc();
  *(void *)(v4 + 1120) = swift_task_alloc();
  *(void *)(v4 + 1128) = swift_task_alloc();
  type metadata accessor for Locale();
  *(void *)(v4 + 1136) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 1144) = v7;
  *(void *)(v4 + 1152) = *(void *)(v7 - 8);
  *(void *)(v4 + 1160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v4 + 1168) = v8;
  *(void *)(v4 + 1176) = *(void *)(v8 - 8);
  *(void *)(v4 + 1184) = swift_task_alloc();
  *(void *)(v4 + 904) = a2;
  *(void *)(v4 + 912) = a3;
  *(void *)(v4 + 920) = v3;
  return MEMORY[0x270FA2498](RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:), 0);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 1184);
  uint64_t v113 = *(void *)(v0 + 1176);
  uint64_t v114 = *(void *)(v0 + 1168);
  *(void *)(v0 + 896) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v1, v2, v114);
  unint64_t v117 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 928) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v115 = *(unsigned int *)(v0 + 1284);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v118 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v117, v116))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v109 = createStorage<A>(capacity:type:)(0);
    uint64_t v110 = createStorage<A>(capacity:type:)(0);
    *(void *)(v112 + 992) = buf;
    *(void *)(v112 + 1000) = v109;
    *(void *)(v112 + 1008) = v110;
    serialize(_:at:)(0, (unsigned char **)(v112 + 992));
    serialize(_:at:)(0, (unsigned char **)(v112 + 992));
    *(void *)(v112 + 1016) = v118;
    unint64_t v111 = (void *)swift_task_alloc();
    v111[2] = v112 + 992;
    v111[3] = v112 + 1000;
    v111[4] = v112 + 1008;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v117, v116, "#RequestPaymentNeedsConfirmationFlowStrategy makePromptForConfirmation", buf, v115);
    destroyStorage<A>(_:count:)(v109, 0, v107);
    destroyStorage<A>(_:count:)(v110, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v100 = *(void *)(v112 + 1184);
  uint64_t v101 = *(void *)(v112 + 1168);
  uint64_t v103 = *(void *)(v112 + 1160);
  uint64_t v104 = *(void *)(v112 + 1144);
  uint64_t v99 = *(void *)(v112 + 1176);
  uint64_t v102 = *(void *)(v112 + 1152);

  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v101);
  *(void *)(v112 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INRequestPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(void *)(v112 + 1200) = v3;
  *(void *)(v112 + 688) = rawValue._countAndFlagsBits;
  *(void *)(v112 + 696) = v3;
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v104);
  swift_bridgeObjectRetain();
  v4.SiriPaymentsIntents::RequestPaymentSlots value = RequestPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::RequestPaymentSlots value = v4.value;
  if (v4.value == SiriPaymentsIntents_RequestPaymentSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(void *)(v112 + 704) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v112 + 712) = v49;
    Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v50);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v56 = String.init(stringInterpolation:)();
    uint64_t v55 = v52;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v53 = rawValue;
    *(void *)(v53 + 16) = v56;
    *(void *)(v53 + 24) = v55;
    *(void *)(v53 + 32) = 0;
    *(void *)(v53 + 40) = 0;
    *(unsigned char *)(v53 + 48) = 8;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(SiriPaymentsIntents::RequestPaymentSlots_optional *)(v112 + 1280) = v4;
    type metadata accessor for PaymentsDialogConcept.Builder();
    uint64_t v98 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(void *)(v112 + 1208) = v98;
    *(void *)(v112 + 936) = v98;
    if (value)
    {
      if (value == SiriPaymentsIntents_RequestPaymentSlots_currencyAmount)
      {
        outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 560);
        type metadata accessor for INCurrencyAmount();
        if (swift_dynamicCast()) {
          uint64_t v85 = *(void **)(v112 + 952);
        }
        else {
          uint64_t v85 = 0;
        }
        if (v85)
        {
          *(void *)(v112 + 960) = v85;
          type metadata accessor for DialogCurrency.Builder();
          DialogCurrency.Builder.__allocating_init()();
          id v84 = objc_msgSend(v85, sel_currencyCode);
          if (v84)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v82 = v17;

            uint64_t v83 = v82;
          }
          else
          {
            uint64_t v83 = 0;
          }
          if (v83)
          {
            uint64_t v81 = *(void *)(v112 + 1128);
            String.toSpeakableString.getter();
            swift_bridgeObjectRelease();
            uint64_t v18 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 56))(v81, 0, 1);
          }
          else
          {
            uint64_t v77 = *(void *)(v112 + 1128);
            uint64_t v19 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v77, 1);
          }
          uint64_t v79 = *(void *)(v112 + 1128);
          dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
          outlined destroy of SpeakableString?(v79);
          swift_release();
          id v80 = objc_msgSend(v85, sel_amount);
          if (v80)
          {
            objc_msgSend(v80, sel_doubleValue);
          }
          dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
          swift_release();
          uint64_t v78 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
          swift_release();
          *(void *)(v112 + 968) = v78;
          swift_retain();
          PaymentsDialogConcept.Builder.withAmount(_:)(v78);
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_34;
        }
        uint64_t v70 = *(void *)(v112 + 1032);
        uint64_t v71 = RequestPaymentSlots.rawValue.getter(value);
        uint64_t v72 = v20;
        *(void *)(v112 + 800) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 808) = v21;
        Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v70, v112 + 592);
        *(void *)(v112 + 816) = String.init<A>(describing:)();
        *(void *)(v112 + 824) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v73 = String.init(stringInterpolation:)();
        uint64_t v74 = v25;
        *(void *)(v112 + 832) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 840) = v26;
        Swift::String v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        type metadata accessor for INRequestPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v76 = String.init(stringInterpolation:)();
        uint64_t v75 = v29;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(void *)uint64_t v30 = v71;
        *(void *)(v30 + 8) = v72;
        *(void *)(v30 + 16) = v73;
        *(void *)(v30 + 24) = v74;
        *(void *)(v30 + 32) = v76;
        *(void *)(v30 + 40) = v75;
        *(unsigned char *)(v30 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 496);
        char v31 = swift_dynamicCast();
        if (v31)
        {
          uint64_t v68 = *(void *)(v112 + 720);
          uint64_t v69 = *(void *)(v112 + 728);
        }
        else
        {
          uint64_t v68 = 0;
          uint64_t v69 = 0;
        }
        if (v69)
        {
          uint64_t v67 = *(const void **)(v112 + 1120);
          *(void *)(v112 + 784) = v68;
          *(void *)(v112 + 792) = v69;
          String.toSpeakableString.getter();
          uint64_t v32 = type metadata accessor for SpeakableString();
          (*(void (**)(const void *, void, uint64_t))(*(void *)(v32 - 8) + 56))(v67, 0, 1);
          PaymentsDialogConcept.Builder.withMemo(_:)(v67);
          outlined destroy of SpeakableString?((uint64_t)v67);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        uint64_t v60 = *(void *)(v112 + 1032);
        uint64_t v61 = RequestPaymentSlots.rawValue.getter(value);
        uint64_t v62 = v33;
        *(void *)(v112 + 736) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 744) = v34;
        Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v35);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v60, v112 + 528);
        *(void *)(v112 + 752) = String.init<A>(describing:)();
        *(void *)(v112 + 760) = v36;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v63 = String.init(stringInterpolation:)();
        uint64_t v64 = v38;
        *(void *)(v112 + 768) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 776) = v39;
        Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v40);
        swift_bridgeObjectRelease();
        type metadata accessor for INRequestPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v66 = String.init(stringInterpolation:)();
        uint64_t v65 = v42;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(void *)uint64_t v43 = v61;
        *(void *)(v43 + 8) = v62;
        *(void *)(v43 + 16) = v63;
        *(void *)(v43 + 24) = v64;
        *(void *)(v43 + 32) = v66;
        *(void *)(v43 + 40) = v65;
        *(unsigned char *)(v43 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 624);
      type metadata accessor for INPerson();
      if (swift_dynamicCast()) {
        uint64_t v97 = *(void **)(v112 + 976);
      }
      else {
        uint64_t v97 = 0;
      }
      if (v97)
      {
        uint64_t v93 = *(void *)(v112 + 1048);
        *(void *)(v112 + 984) = v97;
        type metadata accessor for DialogPerson();
        id v5 = v97;
        swift_retain();
        outlined init with copy of GlobalsProviding(v93 + 104, v112 + 416);
        swift_release();
        uint64_t v95 = *(void *)(v112 + 440);
        uint64_t v94 = *(void *)(v112 + 448);
        __swift_project_boxed_opaque_existential_1((void *)(v112 + 416), v95);
        (*(void (**)(uint64_t))(v94 + 16))(v95);
        __swift_project_boxed_opaque_existential_1((void *)(v112 + 456), *(void *)(v112 + 480));
        dispatch thunk of DeviceState.siriLocale.getter();
        default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
        uint64_t v96 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v112 + 456);
        __swift_destroy_boxed_opaque_existential_0(v112 + 416);
        PaymentsDialogConcept.Builder.withPayerName(_:)(v96);
        swift_release();
        swift_release();

LABEL_34:
        uint64_t v58 = *(void *)(v112 + 1112);
        uint64_t v57 = *(void *)(v112 + 1048);
        swift_retain();
        *(void *)(v112 + 1216) = *(void *)(v57 + 16);
        swift_retain();
        swift_release();
        RequestPaymentSlots.rawValue.getter(value);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        uint64_t v44 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 56))(v58, 0, 1);
        uint64_t v59 = PaymentsDialogConcept.Builder.build()();
        *(void *)(v112 + 1224) = v59;
        uint64_t v45 = (void *)swift_task_alloc();
        *(void *)(v112 + 1232) = v45;
        *uint64_t v45 = *(void *)(v112 + 896);
        v45[1] = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
        uint64_t v46 = *(void *)(v112 + 1112);
        uint64_t v47 = *(void *)(v112 + 1104);
        return RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(v47, v46, v59);
      }
      uint64_t v86 = *(void *)(v112 + 1032);
      uint64_t v87 = RequestPaymentSlots.rawValue.getter(0);
      uint64_t v88 = v6;
      *(void *)(v112 + 848) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v112 + 856) = v7;
      Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      outlined init with copy of Any(v86, v112 + 656);
      *(void *)(v112 + 864) = String.init<A>(describing:)();
      *(void *)(v112 + 872) = v9;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v89 = String.init(stringInterpolation:)();
      uint64_t v90 = v11;
      *(void *)(v112 + 880) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v112 + 888) = v12;
      Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      type metadata accessor for INRequestPaymentIntent();
      DefaultStringInterpolation.appendInterpolation(_:)();
      Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v92 = String.init(stringInterpolation:)();
      uint64_t v91 = v15;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(void *)uint64_t v16 = v87;
      *(void *)(v16 + 8) = v88;
      *(void *)(v16 + 16) = v89;
      *(void *)(v16 + 24) = v90;
      *(void *)(v16 + 32) = v92;
      *(void *)(v16 + 40) = v91;
      *(unsigned char *)(v16 + 48) = 9;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void))(*(void *)(v112 + 896) + 8);
  return v54();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v1;
  id v5 = *v1 + 16;
  *(void *)(v6 + 896) = *v1;
  *(void *)(v6 + 1240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    SiriPaymentsIntents::RequestPaymentSlots_optional v4 = *(void *)(v5 + 1096);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void v10[5];
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  id v5 = v0[131];
  v0[112] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 22));
  swift_release();
  SiriPaymentsIntents::RequestPaymentSlots_optional v4 = v0[25];
  uint64_t v3 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_retain();
  swift_release();
  v10[3] = type metadata accessor for RequestPaymentCATs();
  v10[4] = &protocol witness table for RequestPaymentCATs;
  v10[0] = v6;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v9, (uint64_t)v10, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  Swift::String v8 = ParameterResolutionRecord.app.getter();
  v0[156] = v8;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v7 + 1256) = v1;
  *uint64_t v1 = *(void *)(v7 + 896);
  v1[1] = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v8);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Swift::String v14 = (id)v0[158];
  uint64_t v17 = v0[138];
  uint64_t v15 = v0[137];
  uint64_t v16 = v0[136];
  uint64_t v18 = v0[135];
  uint64_t v12 = v0[134];
  Swift::String v13 = v0[133];
  uint64_t v19 = v0[132];
  uint64_t v7 = v0[131];
  uint64_t v11 = (uint64_t *)v0[128];
  v0[112] = v0;
  v0[118] = v14;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(0, v18);
  swift_retain();
  outlined init with copy of GlobalsProviding(v7 + 104, (uint64_t)(v0 + 27));
  swift_release();
  uint64_t v6 = v0[30];
  id v5 = v0[31];
  __swift_project_boxed_opaque_existential_1(v0 + 27, v6);
  (*(void (**)(uint64_t))(v5 + 16))(v6);
  swift_retain();
  outlined init with copy of GlobalsProviding(v7 + 104, (uint64_t)(v0 + 37));
  swift_release();
  uint64_t v9 = v0[40];
  Swift::String v8 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  __swift_project_boxed_opaque_existential_1(v0 + 42, v0[45]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  Swift::String v10 = v1;
  uint64_t v2 = v14;
  *Swift::String v10 = v14;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v19, v18, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v13);
  v0[47] = 0;
  v0[48] = 0;
  v0[49] = 0;
  v0[50] = 0;
  v0[51] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 47));
  outlined destroy of NLContextUpdate?(v19);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, v13);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0[112] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 1112);
  *(void *)(v0 + 896) = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 896) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = v0[138];
  uint64_t v3 = v0[137];
  SiriPaymentsIntents::RequestPaymentSlots_optional v4 = v0[136];
  v0[112] = v0;
  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[112] + 8);
  return v1();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[112] = *v2;
  v6[158] = a1;
  v6[159] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
    uint64_t v3 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[38] = v4;
  v5[37] = a1;
  v5[27] = v5;
  v5[28] = 0;
  v5[29] = 0;
  v5[30] = 0;
  v5[31] = 0;
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[39] = v6;
  unsigned char v5[40] = *(void *)(v6 - 8);
  v5[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[42] = v7;
  v5[43] = *(void *)(v7 - 8);
  v5[44] = swift_task_alloc();
  v5[28] = a2;
  v5[29] = a3;
  v5[30] = a4;
  v5[31] = v4;
  return MEMORY[0x270FA2498](RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:), 0);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 336);
  *(void *)(v0 + 216) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 256) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 264) = buf;
    *(void *)(v15 + 272) = v12;
    *(void *)(v15 + 280) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 264));
    serialize(_:at:)(0, (unsigned char **)(v15 + 264));
    *(void *)(v15 + 288) = v21;
    Swift::String v14 = (void *)swift_task_alloc();
    v14[2] = v15 + 264;
    v14[3] = v15 + 272;
    v14[4] = v15 + 280;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#RequestPaymentNeedsConfirmationFlowStrategy makeIntentCancelledByParameterRejectionResponse", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v15 + 352);
  uint64_t v8 = *(void *)(v15 + 336);
  uint64_t v9 = *(void *)(v15 + 304);
  uint64_t v6 = *(void *)(v15 + 344);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(void *)(v15 + 360) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v15 + 368) = v3;
  *uint64_t v3 = *(void *)(v15 + 216);
  v3[1] = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  uint64_t v4 = *(void *)(v15 + 328);
  return RequestPaymentCATs.promptCancelled()(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 216) = *v1;
  *(void *)(v4 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  }
  else
  {
    swift_release();
    uint64_t v2 = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0[41];
  uint64_t v9 = v0[40];
  uint64_t v10 = v0[39];
  uint64_t v5 = v0[38];
  uint64_t v8 = (uint64_t *)v0[37];
  v0[27] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 2));
  swift_release();
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 12));
  swift_release();
  uint64_t v7 = v0[15];
  uint64_t v6 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  __swift_project_boxed_opaque_existential_1(v0 + 17, v0[20]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v0[22] = 0;
  v0[23] = 0;
  v0[24] = 0;
  v0[25] = 0;
  v0[26] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  void v8[3] = type metadata accessor for AceOutput();
  v8[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v8);
  static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 22));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[27] + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 216) = v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 216) + 8);
  return v1();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return RequestPaymentNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  os_log_type_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = PaymentsNeedsConfirmationFlowStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.deinit()
{
  return PaymentsNeedsConfirmationFlowStrategy.deinit();
}

uint64_t RequestPaymentNeedsConfirmationFlowStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 1048) = v3;
  *(void *)(v4 + 1040) = a3;
  *(void *)(v4 + 1032) = a2;
  *(void *)(v4 + 1024) = a1;
  *(void *)(v4 + 896) = v4;
  *(void *)(v4 + 904) = 0;
  *(void *)(v4 + 912) = 0;
  *(void *)(v4 + 920) = 0;
  *(void *)(v4 + 688) = 0;
  *(void *)(v4 + 696) = 0;
  *(unsigned char *)(v4 + 1280) = 0;
  *(void *)(v4 + 936) = 0;
  *(void *)(v4 + 784) = 0;
  *(void *)(v4 + 792) = 0;
  *(void *)(v4 + 944) = 0;
  *(void *)(v4 + 960) = 0;
  *(void *)(v4 + 968) = 0;
  *(void *)(v4 + 984) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v4 + 1056) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  *(void *)(v4 + 1064) = v5;
  *(void *)(v4 + 1072) = *(void *)(v5 - 8);
  *(void *)(v4 + 1080) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  *(void *)(v4 + 1088) = v6;
  *(void *)(v4 + 1096) = *(void *)(v6 - 8);
  *(void *)(v4 + 1104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 1112) = swift_task_alloc();
  *(void *)(v4 + 1120) = swift_task_alloc();
  *(void *)(v4 + 1128) = swift_task_alloc();
  type metadata accessor for Locale();
  *(void *)(v4 + 1136) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 1144) = v7;
  *(void *)(v4 + 1152) = *(void *)(v7 - 8);
  *(void *)(v4 + 1160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v4 + 1168) = v8;
  *(void *)(v4 + 1176) = *(void *)(v8 - 8);
  *(void *)(v4 + 1184) = swift_task_alloc();
  *(void *)(v4 + 904) = a2;
  *(void *)(v4 + 912) = a3;
  *(void *)(v4 + 920) = v3;
  return MEMORY[0x270FA2498](SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:), 0);
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 1184);
  uint64_t v113 = *(void *)(v0 + 1176);
  uint64_t v114 = *(void *)(v0 + 1168);
  *(void *)(v0 + 896) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v1, v2, v114);
  unint64_t v117 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 928) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v115 = *(unsigned int *)(v0 + 1284);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v118 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v117, v116))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v109 = createStorage<A>(capacity:type:)(0);
    uint64_t v110 = createStorage<A>(capacity:type:)(0);
    *(void *)(v112 + 992) = buf;
    *(void *)(v112 + 1000) = v109;
    *(void *)(v112 + 1008) = v110;
    serialize(_:at:)(0, (unsigned char **)(v112 + 992));
    serialize(_:at:)(0, (unsigned char **)(v112 + 992));
    *(void *)(v112 + 1016) = v118;
    unint64_t v111 = (void *)swift_task_alloc();
    v111[2] = v112 + 992;
    v111[3] = v112 + 1000;
    v111[4] = v112 + 1008;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v117, v116, "#SendPaymentNeedsConfirmationFlowStrategy makePromptForConfirmation", buf, v115);
    destroyStorage<A>(_:count:)(v109, 0, v107);
    destroyStorage<A>(_:count:)(v110, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v100 = *(void *)(v112 + 1184);
  uint64_t v101 = *(void *)(v112 + 1168);
  uint64_t v103 = *(void *)(v112 + 1160);
  uint64_t v104 = *(void *)(v112 + 1144);
  uint64_t v99 = *(void *)(v112 + 1176);
  uint64_t v102 = *(void *)(v112 + 1152);

  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v101);
  *(void *)(v112 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSendPaymentIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v3;
  *(void *)(v112 + 1200) = v3;
  *(void *)(v112 + 688) = rawValue._countAndFlagsBits;
  *(void *)(v112 + 696) = v3;
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v104);
  swift_bridgeObjectRetain();
  v4.SiriPaymentsIntents::SendPaymentSlots value = SendPaymentSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SendPaymentSlots value = v4.value;
  if (v4.value == SiriPaymentsIntents_SendPaymentSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(void *)(v112 + 704) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v112 + 712) = v49;
    Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v50);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v56 = String.init(stringInterpolation:)();
    uint64_t v55 = v52;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v53 = rawValue;
    *(void *)(v53 + 16) = v56;
    *(void *)(v53 + 24) = v55;
    *(void *)(v53 + 32) = 0;
    *(void *)(v53 + 40) = 0;
    *(unsigned char *)(v53 + 48) = 8;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(SiriPaymentsIntents::SendPaymentSlots_optional *)(v112 + 1280) = v4;
    type metadata accessor for PaymentsDialogConcept.Builder();
    uint64_t v98 = PaymentsDialogConcept.Builder.__allocating_init()();
    *(void *)(v112 + 1208) = v98;
    *(void *)(v112 + 936) = v98;
    if (value)
    {
      if (value == SiriPaymentsIntents_SendPaymentSlots_currencyAmount)
      {
        outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 560);
        type metadata accessor for INCurrencyAmount();
        if (swift_dynamicCast()) {
          uint64_t v85 = *(void **)(v112 + 952);
        }
        else {
          uint64_t v85 = 0;
        }
        if (v85)
        {
          *(void *)(v112 + 960) = v85;
          type metadata accessor for DialogCurrency.Builder();
          DialogCurrency.Builder.__allocating_init()();
          id v84 = objc_msgSend(v85, sel_currencyCode);
          if (v84)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v82 = v17;

            uint64_t v83 = v82;
          }
          else
          {
            uint64_t v83 = 0;
          }
          if (v83)
          {
            uint64_t v81 = *(void *)(v112 + 1128);
            String.toSpeakableString.getter();
            swift_bridgeObjectRelease();
            uint64_t v18 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 56))(v81, 0, 1);
          }
          else
          {
            uint64_t v77 = *(void *)(v112 + 1128);
            uint64_t v19 = type metadata accessor for SpeakableString();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v77, 1);
          }
          uint64_t v79 = *(void *)(v112 + 1128);
          dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
          outlined destroy of SpeakableString?(v79);
          swift_release();
          id v80 = objc_msgSend(v85, sel_amount);
          if (v80)
          {
            objc_msgSend(v80, sel_doubleValue);
          }
          dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
          swift_release();
          uint64_t v78 = dispatch thunk of DialogAbstractMeasurement.Builder.build()();
          swift_release();
          *(void *)(v112 + 968) = v78;
          swift_retain();
          PaymentsDialogConcept.Builder.withAmount(_:)(v78);
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_34;
        }
        uint64_t v70 = *(void *)(v112 + 1032);
        uint64_t v71 = SendPaymentSlots.rawValue.getter(value);
        uint64_t v72 = v20;
        *(void *)(v112 + 800) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 808) = v21;
        Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v70, v112 + 592);
        *(void *)(v112 + 816) = String.init<A>(describing:)();
        *(void *)(v112 + 824) = v23;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v73 = String.init(stringInterpolation:)();
        uint64_t v74 = v25;
        *(void *)(v112 + 832) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 840) = v26;
        Swift::String v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        type metadata accessor for INSendPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v76 = String.init(stringInterpolation:)();
        uint64_t v75 = v29;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(void *)uint64_t v30 = v71;
        *(void *)(v30 + 8) = v72;
        *(void *)(v30 + 16) = v73;
        *(void *)(v30 + 24) = v74;
        *(void *)(v30 + 32) = v76;
        *(void *)(v30 + 40) = v75;
        *(unsigned char *)(v30 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 496);
        char v31 = swift_dynamicCast();
        if (v31)
        {
          uint64_t v68 = *(void *)(v112 + 720);
          uint64_t v69 = *(void *)(v112 + 728);
        }
        else
        {
          uint64_t v68 = 0;
          uint64_t v69 = 0;
        }
        if (v69)
        {
          uint64_t v67 = *(const void **)(v112 + 1120);
          *(void *)(v112 + 784) = v68;
          *(void *)(v112 + 792) = v69;
          String.toSpeakableString.getter();
          uint64_t v32 = type metadata accessor for SpeakableString();
          (*(void (**)(const void *, void, uint64_t))(*(void *)(v32 - 8) + 56))(v67, 0, 1);
          PaymentsDialogConcept.Builder.withMemo(_:)(v67);
          outlined destroy of SpeakableString?((uint64_t)v67);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        uint64_t v60 = *(void *)(v112 + 1032);
        uint64_t v61 = SendPaymentSlots.rawValue.getter(value);
        uint64_t v62 = v33;
        *(void *)(v112 + 736) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 744) = v34;
        Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v35);
        swift_bridgeObjectRelease();
        outlined init with copy of Any(v60, v112 + 528);
        *(void *)(v112 + 752) = String.init<A>(describing:)();
        *(void *)(v112 + 760) = v36;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String.UTF8View();
        Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v63 = String.init(stringInterpolation:)();
        uint64_t v64 = v38;
        *(void *)(v112 + 768) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(void *)(v112 + 776) = v39;
        Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v40);
        swift_bridgeObjectRelease();
        type metadata accessor for INSendPaymentIntent();
        DefaultStringInterpolation.appendInterpolation(_:)();
        Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of String.UTF8View();
        uint64_t v66 = String.init(stringInterpolation:)();
        uint64_t v65 = v42;
        lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
        swift_allocError();
        *(void *)uint64_t v43 = v61;
        *(void *)(v43 + 8) = v62;
        *(void *)(v43 + 16) = v63;
        *(void *)(v43 + 24) = v64;
        *(void *)(v43 + 32) = v66;
        *(void *)(v43 + 40) = v65;
        *(unsigned char *)(v43 + 48) = 9;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined init with copy of Any(*(void *)(v112 + 1032), v112 + 624);
      type metadata accessor for INPerson();
      if (swift_dynamicCast()) {
        uint64_t v97 = *(void **)(v112 + 976);
      }
      else {
        uint64_t v97 = 0;
      }
      if (v97)
      {
        uint64_t v93 = *(void *)(v112 + 1048);
        *(void *)(v112 + 984) = v97;
        type metadata accessor for DialogPerson();
        id v5 = v97;
        swift_retain();
        outlined init with copy of GlobalsProviding(v93 + 104, v112 + 416);
        swift_release();
        uint64_t v95 = *(void *)(v112 + 440);
        uint64_t v94 = *(void *)(v112 + 448);
        __swift_project_boxed_opaque_existential_1((void *)(v112 + 416), v95);
        (*(void (**)(uint64_t))(v94 + 16))(v95);
        __swift_project_boxed_opaque_existential_1((void *)(v112 + 456), *(void *)(v112 + 480));
        dispatch thunk of DeviceState.siriLocale.getter();
        default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
        uint64_t v96 = DialogPerson.__allocating_init(person:locale:useConversationalName:)();
        __swift_destroy_boxed_opaque_existential_0(v112 + 456);
        __swift_destroy_boxed_opaque_existential_0(v112 + 416);
        PaymentsDialogConcept.Builder.withPayeeName(_:)(v96);
        swift_release();
        swift_release();

LABEL_34:
        uint64_t v58 = *(void *)(v112 + 1112);
        uint64_t v57 = *(void *)(v112 + 1048);
        swift_retain();
        *(void *)(v112 + 1216) = *(void *)(v57 + 16);
        swift_retain();
        swift_release();
        SendPaymentSlots.rawValue.getter(value);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        uint64_t v44 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 56))(v58, 0, 1);
        uint64_t v59 = PaymentsDialogConcept.Builder.build()();
        *(void *)(v112 + 1224) = v59;
        uint64_t v45 = (void *)swift_task_alloc();
        *(void *)(v112 + 1232) = v45;
        *uint64_t v45 = *(void *)(v112 + 896);
        v45[1] = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
        uint64_t v46 = *(void *)(v112 + 1112);
        uint64_t v47 = *(void *)(v112 + 1104);
        return SendPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(v47, v46, v59);
      }
      uint64_t v86 = *(void *)(v112 + 1032);
      uint64_t v87 = SendPaymentSlots.rawValue.getter(0);
      uint64_t v88 = v6;
      *(void *)(v112 + 848) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v112 + 856) = v7;
      Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      outlined init with copy of Any(v86, v112 + 656);
      *(void *)(v112 + 864) = String.init<A>(describing:)();
      *(void *)(v112 + 872) = v9;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String.UTF8View();
      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v89 = String.init(stringInterpolation:)();
      uint64_t v90 = v11;
      *(void *)(v112 + 880) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(void *)(v112 + 888) = v12;
      Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      type metadata accessor for INSendPaymentIntent();
      DefaultStringInterpolation.appendInterpolation(_:)();
      Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of String.UTF8View();
      uint64_t v92 = String.init(stringInterpolation:)();
      uint64_t v91 = v15;
      lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
      swift_allocError();
      *(void *)uint64_t v16 = v87;
      *(void *)(v16 + 8) = v88;
      *(void *)(v16 + 16) = v89;
      *(void *)(v16 + 24) = v90;
      *(void *)(v16 + 32) = v92;
      *(void *)(v16 + 40) = v91;
      *(unsigned char *)(v16 + 48) = 9;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void))(*(void *)(v112 + 896) + 8);
  return v54();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v1;
  id v5 = *v1 + 16;
  *(void *)(v6 + 896) = *v1;
  *(void *)(v6 + 1240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    SiriPaymentsIntents::SendPaymentSlots_optional v4 = *(void *)(v5 + 1096);
    swift_release();
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void v10[5];
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  id v5 = v0[131];
  v0[112] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 24, (uint64_t)(v0 + 17));
  swift_release();
  swift_retain();
  outlined init with copy of GlobalsProviding(v5 + 104, (uint64_t)(v0 + 22));
  swift_release();
  SiriPaymentsIntents::SendPaymentSlots_optional v4 = v0[25];
  uint64_t v3 = v0[26];
  __swift_project_boxed_opaque_existential_1(v0 + 22, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_retain();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_retain();
  swift_release();
  v10[3] = type metadata accessor for SendPaymentCATs();
  v10[4] = &protocol witness table for SendPaymentCATs;
  v10[0] = v6;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)&v9, (uint64_t)v10, v0 + 2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 22));
  Swift::String v8 = ParameterResolutionRecord.app.getter();
  v0[156] = v8;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v7 + 1256) = v1;
  *uint64_t v1 = *(void *)(v7 + 896);
  v1[1] = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v8);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Swift::String v14 = (id)v0[158];
  uint64_t v17 = v0[138];
  uint64_t v15 = v0[137];
  uint64_t v16 = v0[136];
  uint64_t v18 = v0[135];
  uint64_t v12 = v0[134];
  Swift::String v13 = v0[133];
  uint64_t v19 = v0[132];
  uint64_t v7 = v0[131];
  uint64_t v11 = (uint64_t *)v0[128];
  v0[112] = v0;
  v0[118] = v14;
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(1u, v18);
  swift_retain();
  outlined init with copy of GlobalsProviding(v7 + 104, (uint64_t)(v0 + 27));
  swift_release();
  uint64_t v6 = v0[30];
  id v5 = v0[31];
  __swift_project_boxed_opaque_existential_1(v0 + 27, v6);
  (*(void (**)(uint64_t))(v5 + 16))(v6);
  swift_retain();
  outlined init with copy of GlobalsProviding(v7 + 104, (uint64_t)(v0 + 37));
  swift_release();
  uint64_t v9 = v0[40];
  Swift::String v8 = v0[41];
  __swift_project_boxed_opaque_existential_1(v0 + 37, v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  __swift_project_boxed_opaque_existential_1(v0 + 42, v0[45]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  Swift::String v10 = v1;
  uint64_t v2 = v14;
  *Swift::String v10 = v14;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v19, v18, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v13);
  v0[47] = 0;
  v0[48] = 0;
  v0[49] = 0;
  v0[50] = 0;
  v0[51] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v11[3] = type metadata accessor for AceOutput();
  v11[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v11);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 47));
  outlined destroy of NLContextUpdate?(v19);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 42));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 37));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, v13);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0[112] + 8);
  return v3();
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[112] = *v2;
  v6[158] = a1;
  v6[159] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = RequestPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
    uint64_t v3 = SendPaymentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[38] = v4;
  v5[37] = a1;
  v5[27] = v5;
  v5[28] = 0;
  v5[29] = 0;
  v5[30] = 0;
  v5[31] = 0;
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v5[39] = v6;
  unsigned char v5[40] = *(void *)(v6 - 8);
  v5[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[42] = v7;
  v5[43] = *(void *)(v7 - 8);
  v5[44] = swift_task_alloc();
  v5[28] = a2;
  v5[29] = a3;
  v5[30] = a4;
  v5[31] = v4;
  return MEMORY[0x270FA2498](SendPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:), 0);
}

uint64_t SendPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:)()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 336);
  *(void *)(v0 + 216) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v2, v17);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 256) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v18 = *(unsigned int *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 264) = buf;
    *(void *)(v15 + 272) = v12;
    *(void *)(v15 + 280) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 264));
    serialize(_:at:)(0, (unsigned char **)(v15 + 264));
    *(void *)(v15 + 288) = v21;
    Swift::String v14 = (void *)swift_task_alloc();
    v14[2] = v15 + 264;
    v14[3] = v15 + 272;
    v14[4] = v15 + 280;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v20, v19, "#SendPaymentNeedsConfirmationFlowStrategy makeIntentCancelledByParameterRejectionResponse", buf, v18);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v15 + 352);
  uint64_t v8 = *(void *)(v15 + 336);
  uint64_t v9 = *(void *)(v15 + 304);
  uint64_t v6 = *(void *)(v15 + 344);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_retain();
  *(void *)(v15 + 360) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v15 + 368) = v3;
  *uint64_t v3 = *(void *)(v15 + 216);
  v3[1] = RequestPaymentNeedsConfirmationFlowStrategy.makeIntentCancelledByParameterRejectionResponse(app:intent:parameter:);
  uint64_t v4 = *(void *)(v15 + 328);
  return SendPaymentCATs.promptCancelled()(v4);
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INSendPaymentIntent, INSendPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>;
  if (!lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for PaymentsNeedsConfirmationFlowStrategy()
{
  return swift_getGenericMetadata();
}

unint64_t type metadata accessor for INCurrencyAmount()
{
  uint64_t v2 = lazy cache variable for type metadata for INCurrencyAmount;
  if (!lazy cache variable for type metadata for INCurrencyAmount)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INCurrencyAmount);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for INPerson()
{
  uint64_t v2 = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata instantiation function for PaymentsNeedsConfirmationFlowStrategy()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PaymentsNeedsConfirmationFlowStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for RequestPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentNeedsConfirmationFlowStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentNeedsConfirmationFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for RequestPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for SendPaymentNeedsConfirmationFlowStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for SendPaymentNeedsConfirmationFlowStrategy;
  if (!type metadata singleton initialization cache for SendPaymentNeedsConfirmationFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for NeedsConfirmationFlowStrategyAsync in PaymentsNeedsConfirmationFlowStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t RequestPaymentCATs.confirmButtonLabel(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmButtonLabel()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](RequestPaymentCATs.confirmButtonLabel(), 0);
}

uint64_t RequestPaymentCATs.confirmButtonLabel()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmButtonLabel", 0x21uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmButtonLabel", 0x21uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v35 = (char *)v22 - v28;
  uint64_t v43 = MEMORY[0x270FA5388](v33);
  uint64_t v42 = v5;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  uint64_t v39 = v4;
  unsigned int v34 = 1;
  Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  uint64_t v32 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  uint64_t v10 = v33;
  uint64_t v11 = v35;
  *uint64_t v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = v36 - 8;
  if ((*(unsigned int (**)(char *, void))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    uint64_t v21 = v32;
    v32[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    uint64_t v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    uint64_t v24 = v25;
    uint64_t v23 = v25;
    uint64_t v15 = type metadata accessor for PaymentsDialogConcept();
    uint64_t v16 = v32;
    uint64_t v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._uint64_t countAndFlagsBits = v17;
  }
  else
  {
    uint64_t v20 = v32;
    v32[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  uint64_t v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  void v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  void v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:), 0);
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)()
{
  uint64_t v15 = (void *)v0[10];
  Swift::String v14 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v13 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v17 + 48))(v15, 1) == 1)
  {
    outlined destroy of SpeakableString?(v12[10]);
    v13[1]._uint64_t countAndFlagsBits = 0;
    v13[1]._object = 0;
    v13[2]._uint64_t countAndFlagsBits = 0;
    v13[2]._object = 0;
  }
  else
  {
    uint64_t v11 = v12[10];
    v13[2]._object = (void *)v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v13[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v11, v16);
  }
  uint64_t v10 = v12[8];
  v13[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v9 = v12[8];
    v13[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v13[4]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    v13[4]._uint64_t countAndFlagsBits = 0;
    v13[4]._object = 0;
    v13[5]._uint64_t countAndFlagsBits = 0;
    v13[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v12[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v12[13] = v4;
  *uint64_t v4 = v12[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v12[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  Swift::String v29 = a1;
  uint64_t v23 = a2;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = (char *)v19 - v24;
  uint64_t v37 = MEMORY[0x270FA5388](v29);
  uint64_t v36 = v4;
  uint64_t v35 = v3;
  unsigned int v30 = 1;
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSlotValue", 0x1FuLL, 1);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  unint64_t v28 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  uint64_t v7 = v29;
  uint64_t v8 = v31;
  *unint64_t v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  uint64_t v32 = type metadata accessor for SpeakableString();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v32 - 8;
  if ((*(unsigned int (**)(char *, void))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    uint64_t v18 = v28;
    v28[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    uint64_t v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    uint64_t v21 = v23;
    uint64_t v20 = v23;
    uint64_t v12 = type metadata accessor for PaymentsDialogConcept();
    uint64_t v13 = v28;
    uint64_t v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    uint64_t v17 = v28;
    v28[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  uint64_t v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSnippetHeader(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.confirmSnippetHeader()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](RequestPaymentCATs.confirmSnippetHeader(), 0);
}

uint64_t RequestPaymentCATs.confirmSnippetHeader()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSnippetHeader", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#ConfirmSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  Swift::String *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    uint64_t v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.disambiguateSlotValue(slot:), 0);
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)()
{
  uint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](RequestPaymentCATs.disambiguateSlotValue(slot:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t RequestPaymentCATs.disambiguateSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    Swift::String v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.handledSnippetHeader(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.handledSnippetHeader()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](RequestPaymentCATs.handledSnippetHeader(), 0);
}

uint64_t RequestPaymentCATs.handledSnippetHeader()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#HandledSnippetHeader", 0x23uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#HandledSnippetHeader", 0x23uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:completion:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:), 0);
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)()
{
  uint64_t v11 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v11)
  {
    uint64_t v8 = v9[6];
    v10[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v10[1]._uint64_t countAndFlagsBits = v8;
  }
  else
  {
    v10[1]._uint64_t countAndFlagsBits = 0;
    v10[1]._object = 0;
    v10[2]._uint64_t countAndFlagsBits = 0;
    v10[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[9] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v3 = (void *)swift_task_alloc();
  v9[10] = v3;
  *uint64_t v3 = v9[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  uint64_t v4 = v9[5];
  return v7(v4, v1._countAndFlagsBits, v1._object, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentConfirmationPrompt", 0x27uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:completion:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.intentHandledResponse(app:), 0);
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)()
{
  uint64_t v11 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v11)
  {
    uint64_t v8 = v9[6];
    v10[2]._object = (void *)type metadata accessor for SirikitApp();
    v10[1]._uint64_t countAndFlagsBits = v8;
  }
  else
  {
    v10[1]._uint64_t countAndFlagsBits = 0;
    v10[1]._object = 0;
    v10[2]._uint64_t countAndFlagsBits = 0;
    v10[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[9] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v3 = (void *)swift_task_alloc();
  v9[10] = v3;
  *uint64_t v3 = v9[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  uint64_t v4 = v9[5];
  return v7(v4, v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.intentHandledResponse(app:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#IntentHandledResponse", 0x24uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  Swift::String *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.labelForResponseSlot(slot:), 0);
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t RequestPaymentCATs.labelForResponseSlot(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#LabelForResponseSlot", 0x23uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.noResultsResponse(app:completion:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.noResultsResponse(app:), 0);
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)()
{
  uint64_t v11 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v11)
  {
    uint64_t v8 = v9[6];
    v10[2]._object = (void *)type metadata accessor for SirikitApp();
    v10[1]._uint64_t countAndFlagsBits = v8;
  }
  else
  {
    v10[1]._uint64_t countAndFlagsBits = 0;
    v10[1]._object = 0;
    v10[2]._uint64_t countAndFlagsBits = 0;
    v10[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[9] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v3 = (void *)swift_task_alloc();
  v9[10] = v3;
  *uint64_t v3 = v9[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  uint64_t v4 = v9[5];
  return v7(v4, v1._countAndFlagsBits, v1._object, v6);
}

uint64_t RequestPaymentCATs.noResultsResponse(app:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#NoResultsResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptCancelled(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptCancelled()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](RequestPaymentCATs.promptCancelled(), 0);
}

uint64_t RequestPaymentCATs.promptCancelled()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  Swift::String *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.promptForSlotValue(slot:), 0);
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t RequestPaymentCATs.promptForSlotValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptForSlotValue", 0x21uLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v15[4] = a2;
  v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  uint64_t v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  Swift::String *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    Swift::String v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](RequestPaymentCATs.slotDisplayValue(slot:), 0);
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)()
{
  unint64_t v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t RequestPaymentCATs.slotDisplayValue(slot:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#SlotDisplayValue", 0x1FuLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:completion:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  unint64_t v28 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = (char *)v22 - v28;
  uint64_t v43 = MEMORY[0x270FA5388](v33);
  uint64_t v42 = v5;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  uint64_t v39 = v4;
  unsigned int v34 = 1;
  Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v31 = _allocateUninitializedArray<A>(_:)();
  uint64_t v32 = v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v34 & 1);
  uint64_t v10 = v33;
  uint64_t v11 = v35;
  *uint64_t v32 = v9;
  outlined init with copy of SpeakableString?(v10, v11);
  uint64_t v36 = type metadata accessor for SpeakableString();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = v36 - 8;
  if ((*(unsigned int (**)(char *, void))(v37 + 48))(v35, v34) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v35);
    uint64_t v21 = v32;
    v32[1]._uint64_t countAndFlagsBits = 0;
    v21[1]._object = 0;
    v21[2]._uint64_t countAndFlagsBits = 0;
    v21[2]._object = 0;
  }
  else
  {
    uint64_t v12 = v32;
    v32[2]._object = (void *)v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v12[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v35, v36);
  }
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v32[3] = v14;
  swift_retain();
  if (v25)
  {
    uint64_t v24 = v25;
    uint64_t v23 = v25;
    uint64_t v15 = type metadata accessor for PaymentsDialogConcept();
    uint64_t v16 = v32;
    uint64_t v17 = v23;
    v32[5]._object = (void *)v15;
    v16[4]._uint64_t countAndFlagsBits = v17;
  }
  else
  {
    uint64_t v20 = v32;
    v32[4]._uint64_t countAndFlagsBits = 0;
    v20[4]._object = 0;
    v20[5]._uint64_t countAndFlagsBits = 0;
    v20[5]._object = 0;
  }
  uint64_t v18 = v31;
  _finalizeUninitializedArray<A>(_:)();
  v22[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v22[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  v4[8] = a3;
  v4[7] = a2;
  v4[6] = a1;
  v4[2] = v4;
  void v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[10] = swift_task_alloc();
  void v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:), 0);
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)()
{
  uint64_t v15 = (void *)v0[10];
  Swift::String v14 = (const void *)v0[7];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  v0[11] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  unint64_t v13 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, 1);
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v17 + 48))(v15, 1) == 1)
  {
    outlined destroy of SpeakableString?(v12[10]);
    v13[1]._uint64_t countAndFlagsBits = 0;
    v13[1]._object = 0;
    v13[2]._uint64_t countAndFlagsBits = 0;
    v13[2]._object = 0;
  }
  else
  {
    uint64_t v11 = v12[10];
    v13[2]._object = (void *)v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v13[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v11, v16);
  }
  uint64_t v10 = v12[8];
  v13[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v10)
  {
    uint64_t v9 = v12[8];
    v13[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v13[4]._uint64_t countAndFlagsBits = v9;
  }
  else
  {
    v13[4]._uint64_t countAndFlagsBits = 0;
    v13[4]._object = 0;
    v13[5]._uint64_t countAndFlagsBits = 0;
    v13[5]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v12[12] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v12[13] = v4;
  *uint64_t v4 = v12[2];
  v4[1] = RequestPaymentCATs.confirmSlotValue(slot:paymentsConcept:);
  uint64_t v5 = v12[6];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t RequestPaymentCATs.unsupportedSlotValue(slot:paymentsConcept:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  Swift::String v29 = a1;
  uint64_t v23 = a2;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  unint64_t v24 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = (char *)v19 - v24;
  uint64_t v37 = MEMORY[0x270FA5388](v29);
  uint64_t v36 = v4;
  uint64_t v35 = v3;
  unsigned int v30 = 1;
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#UnsupportedSlotValue", 0x23uLL, 1);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  unint64_t v28 = v5;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slot", 4uLL, v30 & 1);
  uint64_t v7 = v29;
  uint64_t v8 = v31;
  *unint64_t v28 = v6;
  outlined init with copy of SpeakableString?(v7, v8);
  uint64_t v32 = type metadata accessor for SpeakableString();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v32 - 8;
  if ((*(unsigned int (**)(char *, void))(v33 + 48))(v31, v30) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v31);
    uint64_t v18 = v28;
    v28[1]._uint64_t countAndFlagsBits = 0;
    v18[1]._object = 0;
    v18[2]._uint64_t countAndFlagsBits = 0;
    v18[2]._object = 0;
  }
  else
  {
    uint64_t v9 = v28;
    v28[2]._object = (void *)v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v9[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(boxed_opaque_existential_1, v31, v32);
  }
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v28[3] = v11;
  swift_retain();
  if (v23)
  {
    uint64_t v21 = v23;
    uint64_t v20 = v23;
    uint64_t v12 = type metadata accessor for PaymentsDialogConcept();
    unint64_t v13 = v28;
    uint64_t v14 = v20;
    v28[5]._object = (void *)v12;
    v13[4]._uint64_t countAndFlagsBits = v14;
  }
  else
  {
    uint64_t v17 = v28;
    v28[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  uint64_t v15 = v27;
  _finalizeUninitializedArray<A>(_:)();
  v19[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v19[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RequestPaymentCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return RequestPaymentCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t RequestPaymentCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v19);
  unint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t protocol witness for PaymentConfirmationLabelProviding.confirmButtonLabel() in conformance RequestPaymentCATs(uint64_t a1)
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.confirmButtonLabel()(a1);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.slotDisplayValue(slot:) in conformance RequestPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.slotDisplayValue(slot:)(a1, a2);
}

uint64_t protocol witness for PaymentSlotDisplayValueProviding.labelForResponseSlot(slot:) in conformance RequestPaymentCATs(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return RequestPaymentCATs.labelForResponseSlot(slot:)(a1, a2);
}

uint64_t type metadata accessor for RequestPaymentCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentCATs;
  if (!type metadata singleton initialization cache for RequestPaymentCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for RequestPaymentCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t ObjC metadata update function for RequestPaymentCATs()
{
  return type metadata accessor for RequestPaymentCATs();
}

uint64_t RequestPaymentHandleIntentStrategy.__allocating_init()()
{
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)&v6 - v7;
  uint64_t v12 = type metadata accessor for Globals();
  uint64_t v8 = v36;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v36);
  uint64_t v9 = &v35;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unint64_t v10 = &v34;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  unint64_t v11 = &v33;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v0 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11);
  Swift::String v25 = v37;
  v37[3] = v12;
  v37[4] = &protocol witness table for Globals;
  v37[0] = v0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v15 = v32;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v32);
  type metadata accessor for PaymentsBaseCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  unint64_t v13 = type metadata accessor for INRequestPaymentIntent();
  unint64_t v1 = type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v2 = default argument 2 of PaymentsErrorTemplateProvider.init(globals:catFamily:searchForAccountsCATs:)(v13, v1);
  uint64_t v24 = PaymentsErrorTemplateProvider.__allocating_init(globals:catFamily:searchForAccountsCATs:)((uint64_t)v15, v14, v2);
  uint64_t v31 = v24;
  uint64_t v23 = v30;
  outlined init with copy of GlobalsProviding((uint64_t)v25, (uint64_t)v30);
  type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  NSJSONWritingOptions.init(rawValue:)(v18);
  uint64_t v19 = v29;
  void v29[3] = &type metadata for CommonLabelsProvider;
  v29[4] = &protocol witness table for CommonLabelsProvider;
  uint64_t v3 = type metadata accessor for SiriKitContactResolver();
  uint64_t v20 = v28;
  v28[3] = v3;
  v28[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(v28);
  SiriKitContactResolver.init()();
  swift_retain();
  uint64_t v21 = &v27;
  uint64_t v27 = v24;
  unint64_t v4 = lazy protocol witness table accessor for type PaymentsErrorTemplateProvider<INRequestPaymentIntent, INRequestPaymentIntentResponse> and conformance PaymentsErrorTemplateProvider<A, B>();
  uint64_t v26 = RequestPaymentHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v23, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, v22, v4);
  swift_retain();
  v37[5] = v26;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  swift_release();
  return v26;
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  return MEMORY[0x270FA2498](RequestPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:), 0);
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v17 = *(unsigned int *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v20 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v19, v18))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 56) = buf;
    *(void *)(v14 + 64) = v11;
    *(void *)(v14 + 72) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 56));
    serialize(_:at:)(0, (unsigned char **)(v14 + 56));
    *(void *)(v14 + 80) = v20;
    unint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 56;
    v13[3] = v14 + 64;
    void v13[4] = v14 + 72;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v19, v18, "#RequestPaymentHandleIntentStrategy makeIntentExecutionBehavior", buf, v17);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v14 + 104);
  uint64_t v6 = *(void *)(v14 + 88);
  uint64_t v5 = *(void *)(v14 + 96);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v8 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 16) + 8);
  return v3(v8);
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[55] = v2;
  v3[54] = a2;
  v3[53] = a1;
  v3[41] = v3;
  v3[42] = 0;
  v3[43] = 0;
  v3[45] = 0;
  v3[37] = 0;
  v3[38] = 0;
  v3[52] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[56] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[57] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[58] = v4;
  v3[59] = *(void *)(v4 - 8);
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  v3[62] = v5;
  uint64_t v8 = *(void *)(v5 - 8);
  v3[63] = v8;
  v3[64] = *(void *)(v8 + 64);
  v3[65] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[66] = v6;
  v3[67] = *(void *)(v6 - 8);
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[71] = swift_task_alloc();
  v3[42] = a2;
  v3[43] = v2;
  return MEMORY[0x270FA2498](RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:), 0);
}

uint64_t RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v78 = v0;
  uint64_t v50 = *(void *)(v0 + 568);
  uint64_t v1 = *(void *)(v0 + 560);
  uint64_t v51 = *(void *)(v0 + 536);
  uint64_t v52 = *(void *)(v0 + 528);
  uint64_t v57 = *(void *)(v0 + 520);
  uint64_t v55 = *(void *)(v0 + 504);
  uint64_t v58 = *(void *)(v0 + 496);
  uint64_t v54 = *(void *)(v0 + 432);
  *(void *)(v0 + 328) = v0;
  uint64_t v2 = SignpostName.makeRequestPaymentIntentHandledResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v50);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  *(void *)(v0 + 576) = v53;
  *(void *)(v0 + 584) = (v51 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v53(v1, v3, v52);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v57, v54, v58);
  unint64_t v56 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  uint64_t v60 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v55 + 32))(v60 + v56, v57, v58);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 352) = 12;
  *(void *)(v0 + 592) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 600) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 608) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v59 = *(_DWORD *)(v0 + 696);
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = 32;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 8;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = partial apply for implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  *(void *)(v61 + 24) = v60;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v64 + 24) = v61;
  *(void *)(v0 + 616) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v65 = v4;
  swift_retain();
  *uint64_t v65 = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[1] = v62;
  swift_retain();
  v65[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[3] = v63;
  swift_retain();
  v65[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[5] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v66, v67))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v47 = createStorage<A>(capacity:type:)(0);
    uint64_t v48 = createStorage<A>(capacity:type:)(1);
    uint64_t v73 = buf;
    uint64_t v74 = v47;
    uint64_t v75 = v48;
    serialize(_:at:)(2, &v73);
    serialize(_:at:)(1, &v73);
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v77 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v77 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v77 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    _os_log_impl(&dword_25D85A000, v66, v67, "#RequestPaymentHandleIntentStrategy makeIntentHandledResponse response: %s", buf, v59);
    destroyStorage<A>(_:count:)(v47, 0, v45);
    destroyStorage<A>(_:count:)(v48, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v40 = *(void *)(v49 + 560);
  uint64_t v41 = *(void *)(v49 + 528);
  uint64_t v39 = *(void *)(v49 + 536);

  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  *(void *)(v49 + 624) = v42;
  *(void *)(v49 + 632) = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v42(v40, v41);
  id v43 = (id)IntentResolutionRecord.intentResponse.getter();
  id v44 = objc_msgSend(v43, sel_code);
  *(void *)(v49 + 360) = v44;

  if (v44 == (id)3)
  {
    uint64_t v37 = *(void *)(v49 + 440);
    swift_retain();
    *(void *)(v49 + 640) = *(void *)(v37 + 16);
    swift_retain();
    swift_release();
    IntentResolutionRecord.app.getter();
    uint64_t v38 = App.sirikitApp.getter();
    *(void *)(v49 + 648) = v38;
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v49 + 656) = v5;
    void *v5 = *(void *)(v49 + 328);
    v5[1] = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v6 = *(void *)(v49 + 488);
    return RequestPaymentCATs.intentHandledResponse(app:)(v6, v38);
  }
  else
  {
    uint64_t v8 = *(void *)(v49 + 544);
    uint64_t v25 = *(void *)(v49 + 528);
    uint64_t v26 = static PaymentIntentCATResponseCode.from(_:)((uint64_t)v44);
    uint64_t v27 = v9;
    *(void *)(v49 + 672) = v9;
    *(void *)(v49 + 296) = v26;
    *(void *)(v49 + 304) = v9;
    uint64_t v10 = Logger.payments.unsafeMutableAddressor();
    v53(v8, v10, v25);
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v26;
    *(void *)(v29 + 24) = v27;
    oslog = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    *(void *)(v49 + 368) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v49 + 700);
    uint64_t v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 32;
    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = 8;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
    *(void *)(v30 + 24) = v29;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v33 + 24) = v30;
    _allocateUninitializedArray<A>(_:)();
    char v34 = v11;
    swift_retain();
    *char v34 = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[1] = v31;
    swift_retain();
    v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[3] = v32;
    swift_retain();
    v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v36))
    {
      uint64_t v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v23 = createStorage<A>(capacity:type:)(0);
      uint64_t v24 = createStorage<A>(capacity:type:)(1);
      uint64_t v68 = v22;
      uint64_t v69 = v23;
      uint64_t v70 = v24;
      serialize(_:at:)(2, &v68);
      serialize(_:at:)(1, &v68);
      uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v72 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v72 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v72 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      _os_log_impl(&dword_25D85A000, oslog, v36, "#RequestPaymentHandleIntentStrategy makeIntentHandledResponse error case: %s", v22, size);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v22, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v15 = *(void *)(v49 + 544);
    uint64_t v16 = *(void *)(v49 + 528);
    uint64_t v17 = *(void *)(v49 + 440);

    v42(v15, v16);
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 144, v49 + 16);
    swift_release();
    uint64_t v18 = *(void *)(v49 + 40);
    uint64_t v19 = *(void *)(v49 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v49 + 16), v18);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 48) + **(int **)(v19 + 48));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v49 + 680) = v12;
    *uint64_t v12 = *(void *)(v49 + 328);
    v12[1] = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    uint64_t v13 = *(void *)(v49 + 448);
    uint64_t v14 = *(void *)(v49 + 432);
    return v20(v13, v14, v18, v19);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 328) = *v1;
  *(void *)(v4 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v27;
  os_log_t oslog;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;

  *(void *)(v0 + 328) = v0;
  uint64_t v41 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v42 = objc_msgSend(v41, sel_paymentRecord);
  if (v42)
  {
    uint64_t v39 = *(void *)(v40 + 568);
    uint64_t v37 = *(void *)(v40 + 488);
    uint64_t v38 = *(void *)(v40 + 464);
    char v35 = *(void *)(v40 + 456);
    uint64_t v32 = *(void *)(v40 + 440);
    char v34 = *(uint64_t **)(v40 + 424);
    os_log_type_t v36 = *(void *)(v40 + 472);
    *(void *)(v40 + 416) = v42;

    swift_retain();
    outlined init with copy of GlobalsProviding(v32 + 104, v40 + 176);
    swift_release();
    uint64_t v31 = *(void *)(v40 + 200);
    uint64_t v30 = *(void *)(v40 + 208);
    __swift_project_boxed_opaque_existential_1((void *)(v40 + 176), v31);
    (*(void (**)(uint64_t))(v30 + 16))(v31);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    type metadata accessor for SAAceView();
    _allocateUninitializedArray<A>(_:)();
    swift_retain();
    uint64_t v33 = BaseStrategy.ttsEnabled.getter();
    swift_release();
    static PaymentsContextProvider.handleRequestPayment(paymentRecord:needsSDA:)(v42, v33 & 1, v35);
    uint64_t v1 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v35, 0, 1);
    *(void *)(v40 + 256) = 0;
    *(void *)(v40 + 264) = 0;
    *(void *)(v40 + 272) = 0;
    *(void *)(v40 + 280) = 0;
    *(void *)(v40 + 288) = 0;
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v34[3] = type metadata accessor for AceOutput();
    v34[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v34);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?(v40 + 256);
    outlined destroy of NLContextUpdate?(v35);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0(v40 + 216);
    __swift_destroy_boxed_opaque_existential_0(v40 + 176);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v40 + 328) + 8);
    return v2();
  }
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 576);
  uint64_t v3 = *(void *)(v40 + 552);
  uint64_t v24 = *(void *)(v40 + 528);

  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  v25(v3, v4, v24);
  oslog = (os_log_t)Logger.logObject.getter();
  uint64_t v27 = static os_log_type_t.error.getter();
  *(void *)(v40 + 376) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v40 + 704);
  uint64_t v29 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v27))
  {
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v40 + 624);
    uint64_t v18 = *(void *)(v40 + 568);
    uint64_t v9 = *(void *)(v40 + 552);
    uint64_t v10 = *(void *)(v40 + 528);
    uint64_t v16 = *(void *)(v40 + 488);
    uint64_t v17 = *(void *)(v40 + 464);
    uint64_t v15 = *(void *)(v40 + 472);

    v11(v9, v10);
    type metadata accessor for INRequestPaymentIntent();
    uint64_t v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v7;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v8 = v13;
    *(void *)(v8 + 8) = v12;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 48) = 12;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v40 + 328) + 8);
    return v2();
  }
  uint64_t v5 = *(void *)(v40 + 664);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v21 = createStorage<A>(capacity:type:)(0);
  uint64_t v22 = createStorage<A>(capacity:type:)(0);
  *(void *)(v40 + 384) = buf;
  *(void *)(v40 + 392) = v21;
  *(void *)(v40 + 400) = v22;
  serialize(_:at:)(0, (unsigned char **)(v40 + 384));
  serialize(_:at:)(0, (unsigned char **)(v40 + 384));
  *(void *)(v40 + 408) = v29;
  uint64_t v23 = (void *)swift_task_alloc();
  v23[2] = v40 + 384;
  v23[3] = v40 + 392;
  v23[4] = v40 + 400;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  __n128 result = Sequence.forEach(_:)();
  if (!v5)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, oslog, v27, "#RequestPaymentHandleIntentStrategy found no paymentRecord in intent response, throwing exception", buf, size);
    destroyStorage<A>(_:count:)(v21, 0, v19);
    destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 328) = *v1;
  *(void *)(v4 + 688) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  else
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[59];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[56];
  v0[41] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[71];
    outlined destroy of TemplatingResult?(v24[56]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[39] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[40] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[41] + 8);
  }
  else
  {
    uint64_t v23 = v24[71];
    uint64_t v21 = v24[60];
    uint64_t v22 = v24[58];
    uint64_t v19 = v24[57];
    uint64_t v17 = v24[55];
    uint64_t v18 = (uint64_t *)v24[53];
    uint64_t v20 = v24[59];
    (*(void (**)(void))(v20 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    uint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v19, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v19);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[41] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 568);
  *(void *)(v0 + 328) = v0;
  swift_release();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 328) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 568);
  *(void *)(v0 + 328) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 328) + 8);
  return v1();
}

uint64_t implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[22] = v3;
  v3[23] = 0;
  v3[24] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[34] = v4;
  v3[35] = *(void *)(v4 - 8);
  v3[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[37] = v5;
  v3[38] = *(void *)(v5 - 8);
  v3[39] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[40] = swift_task_alloc();
  v3[23] = a2;
  v3[24] = v2;
  return MEMORY[0x270FA2498](RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:), 0);
}

uint64_t RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:)()
{
  uint64_t v21 = *(void *)(v0 + 320);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 296);
  *(void *)(v0 + 176) = v0;
  uint64_t v2 = SignpostName.makeRequestPaymentContinueInAppResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v21);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v1, v3, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(unsigned int *)(v0 + 352);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    *(void *)(v20 + 208) = buf;
    *(void *)(v20 + 216) = v17;
    *(void *)(v20 + 224) = v18;
    serialize(_:at:)(0, (unsigned char **)(v20 + 208));
    serialize(_:at:)(0, (unsigned char **)(v20 + 208));
    *(void *)(v20 + 232) = v27;
    uint64_t v19 = (void *)swift_task_alloc();
    void v19[2] = v20 + 208;
    v19[3] = v20 + 216;
    v19[4] = v20 + 224;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v26, v25, "#RequestPaymentHandleIntentStrategy makeContinueInAppResponse", buf, v24);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v20 + 312);
  uint64_t v9 = *(void *)(v20 + 296);
  uint64_t v10 = *(void *)(v20 + 256);
  uint64_t v7 = *(void *)(v20 + 304);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_retain();
  outlined init with copy of GlobalsProviding(v10 + 144, v20 + 16);
  swift_release();
  uint64_t v12 = *(void *)(v20 + 40);
  uint64_t v13 = *(void *)(v20 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v20 + 16), v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);
  uint64_t v11 = IntentResolutionRecord.app.getter();
  *(void *)(v20 + 328) = v11;
  uint64_t v14 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 40) + **(int **)(v13 + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v20 + 336) = v4;
  *uint64_t v4 = *(void *)(v20 + 176);
  v4[1] = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  uint64_t v5 = *(void *)(v20 + 288);
  return v14(v5, 0, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 176) = *v1;
  *(void *)(v4 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  }
  else
  {
    swift_release();
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeContinueInAppResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v10 = v0[40];
  uint64_t v11 = v0[36];
  uint64_t v8 = v0[35];
  uint64_t v9 = v0[34];
  uint64_t v12 = v0[33];
  uint64_t v6 = v0[32];
  uint64_t v7 = (uint64_t *)v0[30];
  v0[22] = v0;
  swift_retain();
  outlined init with copy of GlobalsProviding(v6 + 104, (uint64_t)(v0 + 7));
  swift_release();
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
  (*(void (**)(uint64_t))(v4 + 16))(v5);
  swift_retain();
  BaseStrategy.ttsEnabled.getter();
  swift_release();
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v12, 1);
  v0[17] = 0;
  v0[18] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v7[3] = type metadata accessor for AceOutput();
  unsigned char v7[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v7);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 17));
  outlined destroy of NLContextUpdate?(v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v9);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[22] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v3 = *(void *)(v0 + 320);
  *(void *)(v0 + 176) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v4 + 176) + 8);
  return v1();
}

uint64_t RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[34] = v2;
  v3[33] = a2;
  v3[32] = a1;
  v3[24] = v3;
  v3[25] = 0;
  v3[26] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  v3[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  v3[37] = v4;
  v3[38] = *(void *)(v4 - 8);
  v3[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[40] = v5;
  v3[41] = *(void *)(v5 - 8);
  v3[42] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v3[43] = swift_task_alloc();
  v3[25] = a2;
  v3[26] = v2;
  return MEMORY[0x270FA2498](RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:), 0);
}

uint64_t RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:)()
{
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v23 = *(void *)(v0 + 320);
  *(void *)(v0 + 192) = v0;
  uint64_t v2 = SignpostName.makeRequestPaymentFailureHandlingIntentResponse.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v21);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v1, v3, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 216) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(unsigned int *)(v0 + 368);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    *(void *)(v20 + 224) = buf;
    *(void *)(v20 + 232) = v17;
    *(void *)(v20 + 240) = v18;
    serialize(_:at:)(0, (unsigned char **)(v20 + 224));
    serialize(_:at:)(0, (unsigned char **)(v20 + 224));
    *(void *)(v20 + 248) = v27;
    uint64_t v19 = (void *)swift_task_alloc();
    void v19[2] = v20 + 224;
    v19[3] = v20 + 232;
    v19[4] = v20 + 240;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v26, v25, "#RequestPaymentHandleIntentStrategy makeFailureHandlingIntentResponse", buf, v24);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v20 + 336);
  uint64_t v10 = *(void *)(v20 + 320);
  uint64_t v11 = *(void *)(v20 + 272);
  uint64_t v8 = *(void *)(v20 + 328);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_retain();
  outlined init with copy of GlobalsProviding(v11 + 144, v20 + 16);
  swift_release();
  uint64_t v12 = *(void *)(v20 + 40);
  uint64_t v13 = *(void *)(v20 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v20 + 16), v12);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 48) + **(int **)(v13 + 48));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v20 + 352) = v4;
  *uint64_t v4 = *(void *)(v20 + 192);
  v4[1] = RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  uint64_t v5 = *(void *)(v20 + 288);
  uint64_t v6 = *(void *)(v20 + 264);
  return v14(v5, v6, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 192) = *v1;
  *(void *)(v4 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  else
  {
    uint64_t v2 = RequestPaymentHandleIntentStrategy.makeFailureHandlingIntentResponse(rchRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[36];
  v0[24] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v14 = v24[43];
    outlined destroy of TemplatingResult?(v24[36]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    v24[22] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v24[23] = v6;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    uint64_t v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v13 = String.init(stringInterpolation:)();
    uint64_t v12 = v9;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = v13;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 16;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[24] + 8);
  }
  else
  {
    uint64_t v21 = v24[43];
    uint64_t v22 = v24[39];
    uint64_t v20 = v24[37];
    uint64_t v23 = v24[35];
    uint64_t v17 = v24[34];
    uint64_t v18 = (uint64_t *)v24[32];
    uint64_t v19 = v24[38];
    (*(void (**)(void))(v19 + 32))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 2));
    swift_retain();
    outlined init with copy of GlobalsProviding(v17 + 104, (uint64_t)(v24 + 7));
    swift_release();
    uint64_t v16 = v24[10];
    uint64_t v15 = v24[11];
    __swift_project_boxed_opaque_existential_1(v24 + 7, v16);
    (*(void (**)(uint64_t))(v15 + 16))(v16);
    swift_retain();
    BaseStrategy.ttsEnabled.getter();
    swift_release();
    uint64_t v4 = type metadata accessor for NLContextUpdate();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v23, 1);
    v24[17] = 0;
    v24[18] = 0;
    v24[19] = 0;
    v24[20] = 0;
    v24[21] = 0;
    default argument 3 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    _swift_stdlib_has_malloc_size();
    default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    v18[3] = type metadata accessor for AceOutput();
    v18[4] = MEMORY[0x263F6FFF0];
    __swift_allocate_boxed_opaque_existential_1(v18);
    static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FlowActivity?((uint64_t)(v24 + 17));
    outlined destroy of NLContextUpdate?(v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 12));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v24 + 7));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v20);
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v24[24] + 8);
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(v0 + 344);
  *(void *)(v0 + 192) = v0;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 192) + 8);
  return v1();
}

uint64_t RequestPaymentHandleIntentStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return RequestPaymentHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t RequestPaymentHandleIntentStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v26 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a5;
  uint64_t v23 = a6;
  uint64_t v18 = a7;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v38 = a6;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a6 - 8;
  unint64_t v14 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (uint64_t)&v13 - v14;
  uint64_t v36 = MEMORY[0x270FA5388](a1);
  uint64_t v35 = v8;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v32 = v11;
  uint64_t v37 = v7;
  uint64_t v19 = v31;
  outlined init with copy of GlobalsProviding(v36, (uint64_t)v31);
  swift_retain();
  uint64_t v15 = v30;
  outlined init with copy of GlobalsProviding(v25, (uint64_t)v30);
  uint64_t v16 = v29;
  outlined init with copy of GlobalsProviding(v24, (uint64_t)v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v17, v20, v23);
  uint64_t v28 = BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)((uint64_t)v19, v26, (uint64_t)v15, (uint64_t)v16, v17, v23, v18);
  swift_retain();
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v23);
  __swift_destroy_boxed_opaque_existential_0(v24);
  __swift_destroy_boxed_opaque_existential_0(v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v27);
  swift_release();
  return v28;
}

uint64_t INRequestPaymentIntentResponseCode.speakable.getter()
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  INBalanceType.rawValue.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  String.init(stringInterpolation:)();
  return SpeakableString.init(print:speak:)();
}

uint64_t sub_25D8EF8EC()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INRequestPaymentIntent, INRequestPaymentIntentResponse>);

  return implicit closure #1 in RequestPaymentHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)();
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    type metadata accessor for SABaseCommand();
    uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 > 0)
  {
    type metadata accessor for SAAceView();
    uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
    return v1;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return v3;
  }
  return result;
}

uint64_t sub_25D8EFB30()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFB5C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFB88()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFBC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFC08()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFC48()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFC74()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFCA0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8EFCE0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for RequestPaymentHandleIntentStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for RequestPaymentHandleIntentStrategy;
  if (!type metadata singleton initialization cache for RequestPaymentHandleIntentStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t type metadata accessor for SABaseCommand()
{
  uint64_t v2 = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type INRequestPaymentIntentResponse and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject)
  {
    type metadata accessor for INRequestPaymentIntentResponse();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INRequestPaymentIntentResponse and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t PaymentAccountInformation.description.getter(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  char v26 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)(a1, 0);
  if (v26 == 4) {
    char v27 = 3;
  }
  else {
    char v27 = v26;
  }
  Constants.PaymentAccountBalanceType.rawValue.getter(v27);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\nnickname: ", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = a2;
  if (a2)
  {
    id v17 = objc_msgSend(a2, sel_spokenPhrase);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v7;

    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (!v19)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    outlined destroy of String.UTF8View();
  }
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\norganizationName: ", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  id v9 = a3;
  if (a3)
  {
    id v14 = objc_msgSend(a3, sel_spokenPhrase);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v10;

    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (!v16)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    outlined destroy of String.UTF8View();
  }
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\ntype: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  char v24 = static Constants.PaymentAccountType.fromINAccountType(_:)(a4);
  if (v24 == 9) {
    char v25 = 0;
  }
  else {
    char v25 = v24;
  }
  Constants.PaymentAccountType.rawValue.getter(v25);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String.UTF8View();
  Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String.UTF8View();
  return String.init(stringInterpolation:)();
}

NSJSONWritingOptions static PaymentAccountInformation.from(_:)(uint64_t a1)
{
  uint64_t v149 = a1;
  uint64_t v166 = 0;
  uint64_t v140 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v141 = partial apply for implicit closure #1 in static PaymentAccountInformation.from(_:);
  uint64_t v142 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
  uint64_t v143 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v147 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v196 = 0;
  uint64_t v148 = 0;
  uint64_t v188 = 0;
  long long v184 = 0u;
  long long v185 = 0u;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  Swift::String v175 = (Swift::String)0;
  uint64_t v158 = type metadata accessor for Logger();
  unint64_t v156 = *(void **)(v158 - 8);
  uint64_t v157 = v158 - 8;
  unint64_t v150 = (v156[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v149);
  uint64_t v151 = (char *)&v52 - v150;
  unint64_t v152 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  unint64_t v153 = (char *)&v52 - v152;
  unint64_t v154 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v52 - v154;
  uint64_t v155 = (char *)&v52 - v154;
  uint64_t v196 = v5;
  uint64_t v7 = Logger.payments.unsafeMutableAddressor();
  uint64_t v159 = (void (*)(char *, uint64_t, uint64_t))v156[2];
  unint64_t v160 = v156 + 2;
  v159(v6, v7, v158);
  uint64_t v169 = Logger.logObject.getter();
  int v168 = static os_log_type_t.debug.getter();
  uint64_t v163 = &v194;
  uint64_t v194 = 2;
  unint64_t v161 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v162 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v164 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v165 = v195;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v170 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v169, (os_log_type_t)v168))
  {
    uint64_t v8 = v148;
    uint64_t v129 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v128 = 0;
    uint64_t v130 = createStorage<A>(capacity:type:)(0);
    uint64_t v131 = createStorage<A>(capacity:type:)(v128);
    uint64_t v135 = &v174;
    int v174 = v129;
    uint64_t v136 = &v173;
    uint64_t v173 = v130;
    id v133 = &v172;
    uint64_t v172 = v131;
    unsigned int v132 = 0;
    serialize(_:at:)(0, &v174);
    serialize(_:at:)(v132, v135);
    uint64_t v171 = v170;
    uint64_t v134 = &v52;
    MEMORY[0x270FA5388](&v52);
    id v9 = v136;
    uint64_t v10 = &v52 - 6;
    Swift::String v137 = &v52 - 6;
    void v10[2] = (uint64_t)v135;
    v10[3] = (uint64_t)v9;
    v10[4] = v11;
    uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v139 = v8;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25D85A000, v169, (os_log_type_t)v168, "#PaymentAccountInformation attempting to extract account search parameters", v129, v165);
      uint64_t v125 = 0;
      destroyStorage<A>(_:count:)(v130, 0, v127);
      destroyStorage<A>(_:count:)(v131, v125, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v129, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v126 = v139;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v126 = v148;
  }
  uint64_t v122 = v126;

  uint64_t v123 = (void (*)(char *, uint64_t))v156[1];
  uint64_t v124 = v156 + 1;
  v123(v155, v158);
  swift_retain();
  if (v149)
  {
    uint64_t v121 = v149;
    uint64_t v119 = v149;
    uint64_t v188 = v149;
    Class v187 = 0;
    v120._uint64_t countAndFlagsBits = dispatch thunk of UsoEntity_common_PaymentAccount.name.getter();
    v120._object = v12;
    if (v12)
    {
      Swift::String v118 = v120;
      Swift::String v117 = v120;
      Swift::String v175 = v120;
      type metadata accessor for INSpeakableString();
      swift_bridgeObjectRetain();
      Class isa = INSpeakableString.__allocating_init(spokenPhrase:)(v117).super.isa;
      Class v14 = v187;
      Class v187 = isa;

      swift_bridgeObjectRelease();
    }
    Class v186 = 0;
    uint64_t v116 = dispatch thunk of UsoEntity_common_PaymentAccount.bank.getter();
    if (v116)
    {
      uint64_t v115 = v116;
      uint64_t v110 = v116;
      uint64_t v111 = dispatch thunk of UsoEntity_common_Organization.name.getter();
      uint64_t v112 = v15;
      swift_release();
      uint64_t v113 = v111;
      uint64_t v114 = v112;
    }
    else
    {
      uint64_t v113 = 0;
      uint64_t v114 = 0;
    }
    uint64_t v108 = v114;
    uint64_t v109 = v113;
    if (v114)
    {
      uint64_t v106 = v109;
      uint64_t v107 = v108;
      v105._object = v108;
      v105._uint64_t countAndFlagsBits = v109;
      uint64_t v176 = v109;
      uint64_t v177 = v108;
      type metadata accessor for INSpeakableString();
      swift_bridgeObjectRetain();
      Class v16 = INSpeakableString.__allocating_init(spokenPhrase:)(v105).super.isa;
      Class v17 = v186;
      Class v186 = v16;

      swift_bridgeObjectRelease();
    }
    Swift::UInt v86 = UsoEntity_common_PaymentAccount.balanceTypeAsINType.getter();
    Class v84 = v187;
    uint64_t v18 = v187;
    Class v85 = v186;
    uint64_t v19 = v186;
    UsoEntity_common_PaymentAccount.accountAsINType.getter();
    uint64_t v20 = v153;
    NSJSONWritingOptions v87 = NSJSONWritingOptions.init(rawValue:)(v86);
    id v88 = v21;
    id v89 = v22;
    uint64_t v90 = v23;
    *(void *)&long long v184 = v87;
    *((void *)&v184 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1) = v21;
    *(void *)&long long v185 = v22;
    *((void *)&v185 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1) = v23;
    uint64_t v24 = Logger.payments.unsafeMutableAddressor();
    v159(v20, v24, v158);
    id v25 = v88;
    id v26 = v89;
    uint64_t v95 = 7;
    char v27 = (void *)swift_allocObject();
    id v28 = v88;
    id v29 = v89;
    uint64_t v30 = v90;
    uint64_t v91 = v27;
    v27[2] = v87;
    v27[3] = v28;
    v27[4] = v29;
    id v27[5] = v30;
    swift_retain();
    uint64_t v94 = 32;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v91;
    uint64_t v96 = v31;
    *(void *)(v31 + 16) = v141;
    *(void *)(v31 + 24) = v32;
    swift_release();
    uint64_t v103 = Logger.logObject.getter();
    int v104 = static os_log_type_t.debug.getter();
    v182[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v92 = v183;
    uint64_t v93 = 17;
    uint64_t v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 32;
    uint64_t v99 = swift_allocObject();
    *(unsigned char *)(v99 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v96;
    uint64_t v97 = v33;
    *(void *)(v33 + 16) = v142;
    *(void *)(v33 + 24) = v34;
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v97;
    uint64_t v101 = v35;
    *(void *)(v35 + 16) = v143;
    *(void *)(v35 + 24) = v36;
    uint64_t v100 = _allocateUninitializedArray<A>(_:)();
    uint64_t v102 = v37;
    swift_retain();
    uint64_t v38 = v98;
    uint64_t v39 = v102;
    *uint64_t v102 = v144;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    swift_retain();
    uint64_t v40 = v99;
    uint64_t v41 = v102;
    v102[2] = v145;
    v41[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v40;
    swift_retain();
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v101;
    id v43 = v102;
    v102[4] = v146;
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v103, (os_log_type_t)v104))
    {
      uint64_t v44 = v122;
      uint64_t v77 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v78 = createStorage<A>(capacity:type:)(0);
      uint64_t v79 = createStorage<A>(capacity:type:)(1);
      id v80 = v182;
      v182[0] = v77;
      uint64_t v81 = &v181;
      uint64_t v181 = v78;
      uint64_t v82 = &v180;
      uint64_t v180 = v79;
      serialize(_:at:)(2, v182);
      serialize(_:at:)(1, v80);
      uint64_t v178 = v144;
      uint64_t v179 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)v80, (uint64_t)v81, (uint64_t)v82);
      uint64_t v83 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        uint64_t v178 = v145;
        uint64_t v179 = v99;
        closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)v182, (uint64_t)&v181, (uint64_t)&v180);
        uint64_t v75 = 0;
        uint64_t v178 = v146;
        uint64_t v179 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)v182, (uint64_t)&v181, (uint64_t)&v180);
        _os_log_impl(&dword_25D85A000, v103, (os_log_type_t)v104, "#PaymentAccountInformation obtained the following parameters from the provided entity:\n%s", v77, v92);
        destroyStorage<A>(_:count:)(v78, 0, v76);
        destroyStorage<A>(_:count:)(v79, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v77, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v123(v153, v158);
    outlined destroy of SFRichText?((id *)&v186);
    outlined destroy of SFRichText?((id *)&v187);
    swift_release();
    NSJSONWritingOptions v71 = v87;
    uint64_t v72 = (uint64_t)v88;
    id v73 = v89;
    uint64_t v74 = v90;
  }
  else
  {
    uint64_t v45 = v151;
    uint64_t v46 = Logger.payments.unsafeMutableAddressor();
    v159(v45, v46, v158);
    uint64_t v69 = Logger.logObject.getter();
    int v68 = static os_log_type_t.debug.getter();
    v192[1] = (unsigned char *)2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v67 = v193;
    uint64_t v70 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v69, (os_log_type_t)v68))
    {
      uint64_t v47 = v122;
      uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v56 = 0;
      uint64_t v58 = createStorage<A>(capacity:type:)(0);
      uint64_t v59 = createStorage<A>(capacity:type:)(v56);
      uint64_t v63 = v192;
      v192[0] = v57;
      uint64_t v64 = &v191;
      uint64_t v191 = v58;
      uint64_t v61 = &v190;
      uint64_t v190 = v59;
      unsigned int v60 = 0;
      serialize(_:at:)(0, v192);
      serialize(_:at:)(v60, v63);
      uint64_t v189 = v70;
      uint64_t v62 = &v52;
      MEMORY[0x270FA5388](&v52);
      uint64_t v48 = v64;
      uint64_t v49 = &v52 - 6;
      uint64_t v65 = &v52 - 6;
      v49[2] = (uint64_t)v63;
      void v49[3] = (uint64_t)v48;
      v49[4] = v50;
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v47)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25D85A000, v69, (os_log_type_t)v68, "#PaymentAccountInformation entity provided was nil, early returning", v57, v67);
        uint64_t v54 = 0;
        destroyStorage<A>(_:count:)(v58, 0, v55);
        destroyStorage<A>(_:count:)(v59, v54, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v57, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v53 = 0;
    uint64_t v52 = 1;

    v123(v151, v158);
    NSJSONWritingOptions v71 = (NSJSONWritingOptions)v53;
    uint64_t v72 = v52;
    id v73 = v53;
    uint64_t v74 = v53;
  }
  return v71;
}

INSpeakableString __swiftcall INSpeakableString.__allocating_init(spokenPhrase:)(Swift::String spokenPhrase)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INSpeakableString)@nonobjc INSpeakableString.init(spokenPhrase:)();
}

uint64_t implicit closure #1 in static PaymentAccountInformation.from(_:)@<X0>(id a1@<X1>, uint64_t a2@<X0>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t result = a2;
  *a5 = a2;
  a5[1] = (uint64_t)a1;
  a5[2] = (uint64_t)a3;
  a5[3] = a4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PaymentAccountInformation()
{
  return PaymentAccountInformation.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void **)(v0 + 16), *(void *)(v0 + 24));
}

id @nonobjc INSpeakableString.init(spokenPhrase:)()
{
  id v2 = (id)MEMORY[0x2611B9130]();
  id v3 = objc_msgSend(v1, sel_initWithSpokenPhrase_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_25D8F187C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PaymentAccountInformation.from(_:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in static PaymentAccountInformation.from(_:)(*(id *)(v1 + 24), *(void *)(v1 + 16), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_25D8F18D8()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v1 = lazy protocol witness table accessor for type PaymentAccountInformation and conformance PaymentAccountInformation();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v4, v3, (uint64_t)&type metadata for PaymentAccountInformation, v1);
}

unint64_t lazy protocol witness table accessor for type PaymentAccountInformation and conformance PaymentAccountInformation()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation;
  if (!lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PaymentAccountInformation and conformance PaymentAccountInformation);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D8F19F0()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F1A1C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F1A48()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F1A88()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for INSpeakableString()
{
  uint64_t v2 = lazy cache variable for type metadata for INSpeakableString;
  if (!lazy cache variable for type metadata for INSpeakableString)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INSpeakableString);
    return ObjCClassMetadata;
  }
  return v2;
}

void destroy for PaymentAccountInformation(uint64_t a1)
{
}

void *initializeWithCopy for PaymentAccountInformation(void *a1, void *a2)
{
  *a1 = *a2;
  id v5 = (void *)a2[1];
  id v2 = v5;
  a1[1] = v5;
  id v6 = (void *)a2[2];
  id v3 = v6;
  uint64_t result = a1;
  a1[2] = v6;
  a1[3] = a2[3];
  return result;
}

void *assignWithCopy for PaymentAccountInformation(void *a1, void *a2)
{
  *a1 = *a2;
  id v6 = (id)a1[1];
  id v5 = (void *)a2[1];
  id v2 = v5;
  a1[1] = v5;

  id v8 = (id)a1[2];
  uint64_t v7 = (void *)a2[2];
  id v3 = v7;
  a1[2] = v7;

  uint64_t result = a1;
  a1[3] = a2[3];
  return result;
}

void *assignWithTake for PaymentAccountInformation(void *a1, void *a2)
{
  *a1 = *a2;
  id v3 = (void *)a1[1];
  a1[1] = a2[1];

  uint64_t v4 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t result = a1;
  a1[3] = a2[3];
  return result;
}

uint64_t getEnumTagSinglePayload for PaymentAccountInformation(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(unsigned char *)(a1 + 32))
    {
      int v5 = *(void *)a1 + 2147483646;
    }
    else
    {
      int v4 = -1;
      if (*(void *)(a1 + 8) < 0x100000000uLL) {
        int v4 = *(void *)(a1 + 8);
      }
      int v2 = v4 - 1;
      if (v4 - 1 < 0) {
        int v2 = -1;
      }
      int v5 = v2;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PaymentAccountInformation(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaymentAccountInformation()
{
  return &type metadata for PaymentAccountInformation;
}

uint64_t TemplatingResult.resultSectionsAsString.getter()
{
  TemplatingResult.sections.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TemplatingSection]);
  lazy protocol witness table accessor for type [TemplatingSection] and conformance [A]();
  Sequence.compactMap<A>(_:)();
  outlined destroy of [SFCardSection]();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  return v1;
}

uint64_t closure #1 in TemplatingResult.resultSectionsAsString.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v15 = 0;
  uint64_t v11 = type metadata accessor for TemplatingText();
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v7 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  uint64_t v10 = (char *)&v7 - v7;
  uint64_t v15 = a1;
  TemplatingSection.content.getter();
  uint64_t v12 = TemplatingText.text.getter();
  uint64_t v14 = v3;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  uint64_t result = v12;
  int v5 = v13;
  uint64_t v6 = v14;
  *uint64_t v13 = v12;
  v5[1] = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type [TemplatingSection] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TemplatingSection]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [TemplatingSection] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

id static SKIDirectInvocation.makeButtonPressDirectInvocation(buttonPress:deviceState:)(char a1, void *a2)
{
  type metadata accessor for SKIDirectInvocationPayload();
  id v16 = static SKIDirectInvocationPayload.from(_:)(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v8 = v2;
  Constants.DirectInvocationPayloadKeys.rawValue.getter(0);
  uint64_t v7 = MEMORY[0x263F8D310];
  _convertToAnyHashable<A>(_:)();
  uint64_t v3 = Constants.DirectInvocationButtonType.rawValue.getter(a1 & 1);
  v8[8] = v7;
  v8[5] = v3;
  v8[6] = v4;
  _finalizeUninitializedArray<A>(_:)();
  outlined destroy of String.UTF8View();
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setUserData_, isa);

  uint64_t v13 = self;
  uint64_t v11 = self;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v12 = (void *)DeviceState.asInvocationContext.getter();
  id v14 = objc_msgSend(v11, sel_runSiriKitExecutorCommandWithContext_payload_);

  id v15 = objc_msgSend(v13, sel_wrapCommandInStartLocalRequest_, v14);
  swift_unknownObjectRelease();

  return v15;
}

void *SearchForAccountsNeedsConfirmationStrategy.__allocating_init(globals:catFamily:commonLabelsProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  return SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(a1, a2, a3);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.ttsEnabled.getter()
{
  v3[5] = 0;
  outlined init with copy of GlobalsProviding(v0 + 104, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  char v2 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v3);
  return v2 & 1;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.authenticationPolicy.getter()
{
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

void *SearchForAccountsNeedsConfirmationStrategy.init(globals:catFamily:commonLabelsProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0;
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t))(v4 + 24))(v5);
  outlined init with take of CommonLabelsProviding(v14, v11 + 7);
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t))(v6 + 16))(v7);
  outlined init with take of CommonLabelsProviding(v13, v11 + 13);
  swift_retain();
  v11[12] = a2;
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v12);
  outlined init with take of CommonLabelsProviding(v12, v11 + 2);
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v11;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = a3;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  uint64_t v11 = v3;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v12 = 0;
  uint64_t v17 = type metadata accessor for Parse();
  uint64_t v14 = *(void *)(v17 - 8);
  uint64_t v15 = v17 - 8;
  unint64_t v10 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v17);
  uint64_t v16 = (uint64_t)&v7 - v10;
  uint64_t v20 = v8;
  uint64_t v19 = v4;
  uint64_t v18 = v3;
  Input.parse.getter();
  unint64_t v5 = type metadata accessor for INSearchForAccountsIntent();
  static FlowUtil.actionForInput(parse:intentType:)(v16, v5, (uint64_t)&protocol witness table for INSearchForAccountsIntent, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v16, v17);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 792) = v3;
  *(void *)(v4 + 784) = a3;
  *(void *)(v4 + 776) = a2;
  *(void *)(v4 + 768) = a1;
  *(void *)(v4 + 632) = v4;
  *(void *)(v4 + 640) = 0;
  *(void *)(v4 + 648) = 0;
  *(void *)(v4 + 656) = 0;
  *(void *)(v4 + 520) = 0;
  *(void *)(v4 + 528) = 0;
  *(unsigned char *)(v4 + 984) = 0;
  *(void *)(v4 + 584) = 0;
  *(void *)(v4 + 592) = 0;
  *(void *)(v4 + 688) = 0;
  *(void *)(v4 + 696) = 0;
  *(void *)(v4 + 704) = 0;
  *(void *)(v4 + 600) = 0;
  *(void *)(v4 + 608) = 0;
  *(void *)(v4 + 720) = 0;
  *(void *)(v4 + 736) = 0;
  *(void *)(v4 + 744) = 0;
  *(void *)(v4 + 616) = 0;
  *(void *)(v4 + 624) = 0;
  *(void *)(v4 + 760) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v4 + 800) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 808) = swift_task_alloc();
  *(void *)(v4 + 816) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TemplatingResult();
  *(void *)(v4 + 824) = v5;
  *(void *)(v4 + 832) = *(void *)(v5 - 8);
  *(void *)(v4 + 840) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  *(void *)(v4 + 848) = v6;
  *(void *)(v4 + 856) = *(void *)(v6 - 8);
  *(void *)(v4 + 864) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v4 + 872) = v7;
  *(void *)(v4 + 880) = *(void *)(v7 - 8);
  *(void *)(v4 + 888) = swift_task_alloc();
  *(void *)(v4 + 896) = swift_task_alloc();
  *(void *)(v4 + 640) = a2;
  *(void *)(v4 + 648) = a3;
  *(void *)(v4 + 656) = v3;
  return MEMORY[0x270FA2498](SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:), 0);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  uint64_t v116 = v0;
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v93 = *(void *)(v0 + 880);
  uint64_t v94 = *(void *)(v0 + 872);
  uint64_t v96 = *(void *)(v0 + 776);
  *(void *)(v0 + 632) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
  v95(v1, v2, v94);
  outlined init with copy of Any(v96, v0 + 296);
  uint64_t v98 = swift_allocObject();
  outlined init with take of Any(v0 + 296, v98 + 16);
  int v104 = Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 664) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 988);
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 32;
  uint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 8;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = partial apply for implicit closure #2 in FlowFactory.findFlow(for:);
  *(void *)(v99 + 24) = v98;
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v102 + 24) = v99;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v103 = v3;
  swift_retain();
  *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v100;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  Builtin::Word v103[3] = v101;
  swift_retain();
  v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[5] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v90 = createStorage<A>(capacity:type:)(0);
    uint64_t v91 = createStorage<A>(capacity:type:)(1);
    uint64_t v111 = buf;
    uint64_t v112 = v90;
    uint64_t v113 = v91;
    serialize(_:at:)(2, &v111);
    serialize(_:at:)(1, &v111);
    uint64_t v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    uint64_t v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    uint64_t v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v115 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v113);
    _os_log_impl(&dword_25D85A000, v104, v105, "#SearchForAccountsNeedsConfirmationStrategy makePromptForConfirmation, itemToConfirm %s", buf, size);
    destroyStorage<A>(_:count:)(v90, 0, v88);
    destroyStorage<A>(_:count:)(v91, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v80 = *(void *)(v92 + 896);
  uint64_t v81 = *(void *)(v92 + 872);
  uint64_t v84 = *(void *)(v92 + 864);
  uint64_t v85 = *(void *)(v92 + 848);
  uint64_t v79 = *(void *)(v92 + 880);
  uint64_t v83 = *(void *)(v92 + 856);

  uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v82(v80, v81);
  *(void *)(v92 + 904) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  ParameterResolutionRecord.parameter.getter();
  rawValue._uint64_t countAndFlagsBits = ParameterIdentifier.name.getter();
  rawValue._object = v4;
  *(void *)(v92 + 912) = v4;
  *(void *)(v92 + 520) = rawValue._countAndFlagsBits;
  *(void *)(v92 + 528) = v4;
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v85);
  swift_bridgeObjectRetain();
  v5.SiriPaymentsIntents::SearchForAccountsSlots value = SearchForAccountsSlots.init(rawValue:)(rawValue).value;
  SiriPaymentsIntents::SearchForAccountsSlots value = v5.value;
  if (v5.value == SiriPaymentsIntents_SearchForAccountsSlots_unknownDefault)
  {
    swift_bridgeObjectRetain();
    *(void *)(v92 + 536) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v92 + 544) = v29;
    Swift::String v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v30);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v36 = String.init(stringInterpolation:)();
    uint64_t v35 = v32;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v33 = rawValue;
    *(void *)(v33 + 16) = v36;
    *(void *)(v33 + 24) = v35;
    *(void *)(v33 + 32) = 0;
    *(void *)(v33 + 40) = 0;
    *(unsigned char *)(v33 + 48) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(SiriPaymentsIntents::SearchForAccountsSlots_optional *)(v92 + 984) = v5;
    *(void *)(v92 + 552) = 0;
    *(void *)(v92 + 560) = 0;
    switch(v5.value)
    {
      case SiriPaymentsIntents_SearchForAccountsSlots_accountType:
        outlined init with copy of Any(*(void *)(v92 + 776), v92 + 456);
        if (swift_dynamicCast())
        {
          uint64_t v75 = *(void *)(v92 + 728);
          char v76 = 0;
        }
        else
        {
          uint64_t v75 = 0;
          char v76 = 1;
        }
        if ((v76 & 1) == 0)
        {
          *(void *)(v92 + 736) = v75;
          INSiriAuthorizationStatus.init(rawValue:)();
          if ((v8 & 1) == 0)
          {
            *(void *)(v92 + 744) = v7;
            char v74 = static Constants.PaymentAccountType.fromINAccountType(_:)(v7);
            if (v74 == 9)
            {
              uint64_t v72 = 0;
              uint64_t v73 = 0;
            }
            else
            {
              uint64_t v72 = Constants.PaymentAccountType.rawValue.getter(v74);
              uint64_t v73 = v9;
            }
            if (v73)
            {
              *(void *)(v92 + 616) = v72;
              *(void *)(v92 + 624) = v73;
              swift_bridgeObjectRetain();
              *(void *)(v92 + 552) = v72;
              *(void *)(v92 + 560) = v73;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
        }
        break;
      case SiriPaymentsIntents_SearchForAccountsSlots_organizationName:
        outlined init with copy of Any(*(void *)(v92 + 776), v92 + 424);
        type metadata accessor for INSpeakableString();
        if (swift_dynamicCast()) {
          NSJSONWritingOptions v71 = *(void **)(v92 + 712);
        }
        else {
          NSJSONWritingOptions v71 = 0;
        }
        if (v71)
        {
          *(void *)(v92 + 720) = v71;
          id v70 = objc_msgSend(v71, sel_spokenPhrase);
          *(void *)(v92 + 552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v92 + 560) = v10;
          swift_bridgeObjectRelease();
        }
        break;
      case SiriPaymentsIntents_SearchForAccountsSlots_requestedBalanceType:
        outlined init with copy of Any(*(void *)(v92 + 776), v92 + 328);
        if (swift_dynamicCast())
        {
          uint64_t v68 = *(void *)(v92 + 672);
          char v69 = 0;
        }
        else
        {
          uint64_t v68 = 0;
          char v69 = 1;
        }
        if ((v69 & 1) == 0)
        {
          *(void *)(v92 + 696) = v68;
          INSiriAuthorizationStatus.init(rawValue:)();
          if ((v12 & 1) == 0)
          {
            *(void *)(v92 + 704) = v11;
            char v67 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)(v11, v12 & 1);
            if (v67 == 4)
            {
              uint64_t v65 = 0;
              uint64_t v66 = 0;
            }
            else
            {
              uint64_t v65 = Constants.PaymentAccountBalanceType.rawValue.getter(v67);
              uint64_t v66 = v13;
            }
            if (v66)
            {
              *(void *)(v92 + 600) = v65;
              *(void *)(v92 + 608) = v66;
              swift_bridgeObjectRetain();
              *(void *)(v92 + 552) = v65;
              *(void *)(v92 + 560) = v66;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
        }
        break;
      default:
        outlined init with copy of Any(*(void *)(v92 + 776), v92 + 488);
        type metadata accessor for INSpeakableString();
        if (swift_dynamicCast()) {
          uint64_t v78 = *(void **)(v92 + 752);
        }
        else {
          uint64_t v78 = 0;
        }
        if (v78)
        {
          *(void *)(v92 + 760) = v78;
          id v77 = objc_msgSend(v78, sel_spokenPhrase);
          *(void *)(v92 + 552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v92 + 560) = v6;
          swift_bridgeObjectRelease();
        }
        break;
    }
    uint64_t v63 = *(void *)(v92 + 552);
    uint64_t v64 = *(void *)(v92 + 560);
    *(void *)(v92 + 920) = v64;
    swift_bridgeObjectRetain();
    if (v64)
    {
      uint64_t v59 = *(void *)(v92 + 816);
      uint64_t v60 = *(void *)(v92 + 808);
      uint64_t v14 = *(void *)(v92 + 792);
      *(void *)(v92 + 584) = v63;
      *(void *)(v92 + 592) = v64;
      *(void *)(v92 + 928) = *(void *)(v14 + 96);
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(value);
      SpeakableString.init(print:speak:)();
      uint64_t v61 = type metadata accessor for SpeakableString();
      uint64_t v62 = *(void (**)(uint64_t))(*(void *)(v61 - 8) + 56);
      v62(v59);
      swift_bridgeObjectRetain();
      SpeakableString.init(print:speak:)();
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v62)(v60, 0, 1, v61);
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v92 + 936) = v15;
      *uint64_t v15 = *(void *)(v92 + 632);
      v15[1] = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
      uint64_t v16 = *(void *)(v92 + 840);
      uint64_t v17 = *(void *)(v92 + 816);
      uint64_t v18 = *(void *)(v92 + 808);
      return SearchForAccountsCATs.confirmSlotValue(slot:slotValue:)(v16, v17, v18);
    }
    uint64_t v20 = *(void *)(v92 + 888);
    uint64_t v48 = *(void *)(v92 + 872);
    uint64_t v49 = *(void *)(v92 + 776);
    uint64_t v21 = Logger.payments.unsafeMutableAddressor();
    v95(v20, v21, v48);
    outlined init with copy of Any(v49, v92 + 360);
    uint64_t v51 = swift_allocObject();
    outlined init with take of Any(v92 + 360, v51 + 16);
    oslog = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    *(void *)(v92 + 680) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v50 = *(_DWORD *)(v92 + 992);
    uint64_t v53 = swift_allocObject();
    *(unsigned char *)(v53 + 16) = 32;
    uint64_t v54 = swift_allocObject();
    *(unsigned char *)(v54 + 16) = 8;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = partial apply for implicit closure #2 in FlowFactory.findFlow(for:);
    *(void *)(v52 + 24) = v51;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v55 + 24) = v52;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v56 = v22;
    swift_retain();
    *uint64_t v56 = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[1] = v53;
    swift_retain();
    v56[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[3] = v54;
    swift_retain();
    v56[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v56[5] = v55;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v58))
    {
      uint64_t v45 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v46 = createStorage<A>(capacity:type:)(0);
      uint64_t v47 = createStorage<A>(capacity:type:)(1);
      uint64_t v106 = v45;
      uint64_t v107 = v46;
      uint64_t v108 = v47;
      serialize(_:at:)(2, &v106);
      serialize(_:at:)(1, &v106);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v110 = v55;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v106, (uint64_t)&v107, (uint64_t)&v108);
      _os_log_impl(&dword_25D85A000, oslog, v58, "#SearchForAccountsNeedsConfirmationStrategy failed to convert itemToConfirm %s into a valid slot value", v45, v50);
      destroyStorage<A>(_:count:)(v46, 0, v44);
      destroyStorage<A>(_:count:)(v47, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v45, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v37 = *(void *)(v92 + 888);
    uint64_t v38 = *(void *)(v92 + 872);
    uint64_t v39 = *(void *)(v92 + 776);

    v82(v37, v38);
    swift_bridgeObjectRetain();
    outlined init with copy of Any(v39, v92 + 392);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v41 = v23;
    *(void *)(v92 + 568) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(void *)(v92 + 576) = v24;
    Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    type metadata accessor for INSearchForAccountsIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v43 = String.init(stringInterpolation:)();
    uint64_t v42 = v27;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v28 = rawValue;
    *(void *)(v28 + 16) = v40;
    *(void *)(v28 + 24) = v41;
    *(void *)(v28 + 32) = v43;
    *(void *)(v28 + 40) = v42;
    *(unsigned char *)(v28 + 48) = 9;
    swift_willThrow();
    outlined destroy of String.UTF8View();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(*(void *)(v92 + 632) + 8);
  return v34();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v1;
  SiriPaymentsIntents::SearchForAccountsSlots_optional v5 = *v1 + 16;
  *(void *)(v6 + 632) = *v1;
  *(void *)(v6 + 944) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    uint64_t v4 = *(void *)(v5 + 800);
    outlined destroy of SpeakableString?(*(void *)(v5 + 792));
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v7[10];
  void *v8;
  uint64_t v9;

  char v8 = v0;
  uint64_t v3 = v0[99];
  v0[79] = v0;
  outlined init with copy of GlobalsProviding(v3 + 16, (uint64_t)(v0 + 17));
  outlined init with copy of GlobalsProviding(v3 + 104, (uint64_t)(v0 + 22));
  uint64_t v4 = *(void *)(v3 + 96);
  swift_retain();
  v7[3] = type metadata accessor for SearchForAccountsCATs();
  unsigned char v7[4] = &protocol witness table for SearchForAccountsCATs;
  v7[0] = v4;
  ConfirmationViewBuilder.init(commonLabelsProvider:deviceState:slotDisplayValueProvider:)((uint64_t)(v0 + 17), (uint64_t)(v0 + 22), (uint64_t)v7, v0 + 2);
  uint64_t v6 = ParameterResolutionRecord.app.getter();
  v0[119] = v6;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v5 + 960) = v1;
  *uint64_t v1 = *(void *)(v5 + 632);
  v1[1] = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  return ConfirmationViewBuilder.makeTCCAcceptanceView(app:)(v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char has_malloc_size;
  uint64_t v5;
  uint64_t (*v6)(void);
  void *v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v10 = (id)v0[121];
  uint64_t v13 = v0[105];
  uint64_t v11 = v0[104];
  char v12 = v0[103];
  uint64_t v14 = v0[100];
  uint64_t v1 = v0[99];
  uint64_t v9 = (uint64_t *)v0[96];
  v0[79] = v0;
  v0[86] = v10;
  outlined init with copy of GlobalsProviding(v1 + 104, (uint64_t)(v0 + 27));
  SearchForAccountsNeedsConfirmationStrategy.ttsEnabled.getter();
  type metadata accessor for SAAceView();
  _allocateUninitializedArray<A>(_:)();
  char v8 = v2;
  uint64_t v3 = v10;
  *char v8 = v10;
  _finalizeUninitializedArray<A>(_:)();
  has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
  static PaymentsContextProvider.confirmationContextUpdate(isSend:)(has_malloc_size & 1, v14);
  SiriPaymentsIntents::SearchForAccountsSlots_optional v5 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 56))(v14, 0, 1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  v0[35] = 0;
  v0[36] = 0;
  _swift_stdlib_has_malloc_size();
  _swift_stdlib_has_malloc_size();
  default argument 7 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  v9[3] = type metadata accessor for AceOutput();
  v9[4] = MEMORY[0x263F6FFF0];
  __swift_allocate_boxed_opaque_existential_1(v9);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?((uint64_t)(v0 + 32));
  outlined destroy of NLContextUpdate?(v14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 27));

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0[79] + 8);
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[102];
  uint64_t v1 = v0[101];
  v0[79] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[79] + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  SiriPaymentsIntents::SearchForAccountsSlots_optional v5 = v0[105];
  uint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  v0[79] = v0;
  swift_release();
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[79] + 8);
  return v1();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[79] = *v2;
  v6[121] = a1;
  v6[122] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  else
  {
    swift_release();
    outlined destroy of ConfirmationViewBuilder(v5);
    uint64_t v3 = SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t sub_25D8F5310()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[8] = a2;
  v4[7] = a1;
  v4[2] = v4;
  void v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);
  v4[14] = v6;
  uint64_t v9 = *(void *)(v6 - 8);
  v4[15] = v9;
  v4[16] = *(void *)(v9 + 64);
  v4[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  void v4[3] = a2;
  v4[4] = a3;
  v4[5] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:), 0);
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v23 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v2, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v20, v24);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v26 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 32))(v26 + v22, v23, v24);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v25 = *(_DWORD *)(v0 + 168);
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 32;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:);
  *(void *)(v27 + 24) = v26;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  Swift::String v31 = v3;
  swift_retain();
  void *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  float v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(1);
    uint64_t v34 = buf;
    uint64_t v35 = v15;
    uint64_t v36 = v16;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_25D85A000, v32, v33, "#SearchForAccountsNeedsConfirmationStrategy parseConfirmationResponse for intent %s", buf, v25);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = v17[20];
  uint64_t v7 = v17[18];
  uint64_t v11 = v17[13];
  uint64_t v9 = v17[11];
  uint64_t v12 = v17[10];
  uint64_t v6 = v17[19];
  uint64_t v8 = v17[12];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v7);
  Input.parse.getter();
  Parse.confirmationResponse.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v9);
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for INSearchForAccountsIntent();
  NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v17[2] + 8);
  return v4();
}

uint64_t implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  return v2;
}

uint64_t SearchForAccountsNeedsConfirmationStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance SearchForAccountsNeedsConfirmationStrategy()
{
  return SearchForAccountsNeedsConfirmationStrategy.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SearchForAccountsNeedsConfirmationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  void *v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy;
  return MEMORY[0x270F66500](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(unsigned int a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return SearchForAccountsNeedsConfirmationStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v6;
  uint64_t v7 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *uint64_t v6 = *(void *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66518](a1, a2, a3, v7, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v6;
  uint64_t v7 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *uint64_t v6 = *(void *)(v9 + 16);
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66528](a1, a2, a3, v7, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  void *v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66520](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v5;
  uint64_t v6 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  void *v5 = *(void *)(v8 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66530](a1, a2, v6, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F66508](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 24) = v7;
  uint64_t v8 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *uint64_t v7 = *(void *)(v10 + 16);
  v7[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v8, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance SearchForAccountsNeedsConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = v7;
  *(void *)(v7 + 16) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v8;
  uint64_t v9 = type metadata accessor for SearchForAccountsNeedsConfirmationStrategy();
  *uint64_t v8 = *(void *)(v11 + 16);
  v8[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v9, a7);
}

uint64_t sub_25D8F67FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6828()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6854()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6894()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F68D4()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_25D8F6914()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6940()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F696C()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F69AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F69EC()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INSearchForAccountsIntent>);

  return implicit closure #1 in SearchForAccountsNeedsConfirmationStrategy.parseConfirmationResponse(input:resolveRecord:)();
}

uint64_t sub_25D8F6B28()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6B54()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6B80()
{
  return swift_deallocObject();
}

uint64_t sub_25D8F6BC0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchForAccountsNeedsConfirmationStrategy()
{
  return self;
}

unint64_t base witness table accessor for ParameterResolutionHandlingAsync in SearchForAccountsNeedsConfirmationStrategy()
{
  return lazy protocol witness table accessor for type SearchForAccountsNeedsConfirmationStrategy and conformance SearchForAccountsNeedsConfirmationStrategy();
}

unint64_t lazy protocol witness table accessor for type INSearchForAccountsIntent and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject)
  {
    type metadata accessor for INSearchForAccountsIntent();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type INSearchForAccountsIntent and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t SearchForAccountsViewBuilder.init(catFamily:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  memset(__b, 0, sizeof(__b));
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  swift_retain();
  __b[0] = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  outlined init with take of CommonLabelsProviding(v7, &__b[1]);
  outlined init with copy of SearchForAccountsViewBuilder(__b, a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  return outlined destroy of SearchForAccountsViewBuilder((uint64_t)__b);
}

void *outlined init with copy of SearchForAccountsViewBuilder(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_retain();
  *a2 = v4;
  uint64_t v2 = a1[4];
  a2[4] = v2;
  a2[5] = a1[5];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

uint64_t outlined destroy of SearchForAccountsViewBuilder(uint64_t a1)
{
  return a1;
}

uint64_t SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = v3;
  v4[14] = a3;
  v4[13] = a2;
  v4[12] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildSnippets(for:app:intent:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)()
{
  uint64_t v1 = v0[15];
  v0[7] = v0;
  outlined init with copy of GlobalsProviding(v1 + 8, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  char v11 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  if (v11)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v10[16] = v2;
    *uint64_t v2 = v10[7];
    v2[1] = SearchForAccountsViewBuilder.buildSnippets(for:app:intent:);
    uint64_t v3 = v10[14];
    uint64_t v4 = v10[13];
    uint64_t v5 = v10[12];
    return SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(v5, v4, v3);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v10[17] = v7;
    *uint64_t v7 = v10[7];
    v7[1] = SearchForAccountsViewBuilder.buildSnippets(for:app:intent:);
    uint64_t v8 = v10[13];
    uint64_t v9 = v10[12];
    return SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(v9, v8);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  type metadata accessor for SACardSnippet();
  type metadata accessor for SAAceView();
  uint64_t v3 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 56) + 8);
  return v1(v3);
}

uint64_t SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  *(void *)(v7 + 56) = *v2;
  uint64_t v8 = v7 + 56;
  uint64_t v3 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v3 = a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v4(v3);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = *v2;
  *(void *)(v6 + 56) = *v2;
  *(void *)(v6 + 144) = a1;
  uint64_t v3 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(v6 + 56) + 8);
    return v4(v3);
  }
  else
  {
    return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildSnippets(for:app:intent:), 0);
  }
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[47] = v3;
  v4[46] = a3;
  v4[45] = a2;
  v4[44] = a1;
  v4[14] = v4;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  v4[21] = 0;
  v4[2] = 0;
  void v4[3] = 0;
  v4[25] = 0;
  v4[26] = 0;
  v4[27] = 0;
  v4[28] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[33] = 0;
  v4[34] = 0;
  v4[36] = 0;
  v4[12] = 0;
  v4[13] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[48] = v5;
  v4[49] = *(void *)(v5 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = a3;
  v4[18] = v3;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)()
{
  uint64_t v170 = v0;
  uint64_t v152 = v0[44];
  v0[14] = v0;
  swift_bridgeObjectRetain();
  v0[19] = v152;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
  char v153 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if (v153)
  {
    type metadata accessor for SAAceView();
    uint64_t v88 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    uint64_t v1 = *(void *)(v151 + 424);
    uint64_t v138 = *(void *)(v151 + 384);
    uint64_t v140 = *(void *)(v151 + 352);
    uint64_t v137 = *(void *)(v151 + 392);
    uint64_t v2 = Logger.payments.unsafeMutableAddressor();
    uint64_t v139 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16);
    *(void *)(v151 + 432) = v139;
    *(void *)(v151 + 440) = (v137 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v139(v1, v2, v138);
    swift_bridgeObjectRetain();
    uint64_t v141 = swift_allocObject();
    *(void *)(v141 + 16) = v140;
    swift_retain();
    uint64_t v143 = swift_allocObject();
    *(void *)(v143 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(void *)(v143 + 24) = v141;
    swift_release();
    oslog = Logger.logObject.getter();
    os_log_type_t v150 = static os_log_type_t.debug.getter();
    *(void *)(v151 + 160) = 12;
    *(void *)(v151 + 448) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v151 + 456) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v151 + 464) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v151 + 648);
    uint64_t v145 = swift_allocObject();
    *(unsigned char *)(v145 + 16) = 32;
    uint64_t v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = 8;
    uint64_t v144 = swift_allocObject();
    *(void *)(v144 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
    *(void *)(v144 + 24) = v143;
    uint64_t v147 = swift_allocObject();
    *(void *)(v147 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v147 + 24) = v144;
    *(void *)(v151 + 472) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v148 = v3;
    swift_retain();
    *uint64_t v148 = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[1] = v145;
    swift_retain();
    v148[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[3] = v146;
    swift_retain();
    v148[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v148[5] = v147;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v150))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v135 = createStorage<A>(capacity:type:)(0);
      uint64_t v136 = createStorage<A>(capacity:type:)(1);
      uint32_t v165 = buf;
      uint64_t v166 = v135;
      uint64_t v167 = v136;
      serialize(_:at:)(2, &v165);
      serialize(_:at:)(1, &v165);
      int v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v169 = v145;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      int v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v169 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      int v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v169 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      _os_log_impl(&dword_25D85A000, oslog, v150, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for accounts %s", buf, size);
      destroyStorage<A>(_:count:)(v135, 0, v133);
      destroyStorage<A>(_:count:)(v136, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v128 = *(void *)(v151 + 424);
    uint64_t v129 = *(void *)(v151 + 384);
    uint64_t v127 = *(void *)(v151 + 392);

    uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    *(void *)(v151 + 480) = v130;
    *(void *)(v151 + 488) = (v127 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v130(v128, v129);
    type metadata accessor for SASTItemGroup();
    id v131 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v151 + 496) = v131;
    *(void *)(v151 + 168) = v131;
    *(void *)(v151 + 504) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    _allocateUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v131, sel_setTemplateItems_, isa);

    if (App.isFirstParty.getter())
    {
      uint64_t v4 = *(void *)(v151 + 416);
      uint64_t v122 = *(void *)(v151 + 384);
      uint64_t v5 = Logger.payments.unsafeMutableAddressor();
      v139(v4, v5, v122);
      log = Logger.logObject.getter();
      os_log_type_t v124 = static os_log_type_t.debug.getter();
      *(void *)(v151 + 232) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v123 = *(_DWORD *)(v151 + 656);
      uint64_t v126 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v124))
      {
        Swift::String v118 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v119 = createStorage<A>(capacity:type:)(0);
        uint64_t v120 = createStorage<A>(capacity:type:)(0);
        *(void *)(v151 + 320) = v118;
        *(void *)(v151 + 328) = v119;
        *(void *)(v151 + 336) = v120;
        serialize(_:at:)(0, (unsigned char **)(v151 + 320));
        serialize(_:at:)(0, (unsigned char **)(v151 + 320));
        *(void *)(v151 + 344) = v126;
        uint64_t v121 = (void *)swift_task_alloc();
        v121[2] = v151 + 320;
        v121[3] = v151 + 328;
        v121[4] = v151 + 336;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25D85A000, log, v124, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet", v118, v123);
        destroyStorage<A>(_:count:)(v119, 0, v117);
        destroyStorage<A>(_:count:)(v120, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v118, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v113 = *(void *)(v151 + 416);
      uint64_t v114 = *(void *)(v151 + 384);

      v130(v113, v114);
      uint64_t v115 = App.appIdentifier.getter();
      uint64_t v116 = v6;
      if (v6)
      {
        id v111 = *(id *)(v151 + 368);
        *(void *)(v151 + 96) = v115;
        *(void *)(v151 + 104) = v6;
        type metadata accessor for SASTApplicationBannerItem();
        id v7 = v111;
        swift_bridgeObjectRetain();
        *(void *)(v151 + 312) = SASTApplicationBannerItem.init(intent:appId:)(v111, v115, v116);
        id v112 = objc_msgSend(v131, sel_templateItems);
        if (v112)
        {
          uint64_t v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v110 = v109;
        }
        else
        {
          uint64_t v110 = 0;
        }
        uint64_t v164 = v110;
        if (!v110) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
        Array.append(_:)();
        Class v108 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v131, sel_setTemplateItems_);

        swift_bridgeObjectRelease();
      }
      uint64_t v106 = *(void *)(v151 + 352);
      swift_bridgeObjectRetain();
      *(void *)(v151 + 240) = v106;
      Collection<>.makeIterator()();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
      IndexingIterator.next()();
      uint64_t v107 = *(void *)(v151 + 248);
      *(void *)(v151 + 512) = v107;
      if (v107)
      {
        *(void *)(v151 + 264) = v107;
        uint64_t v9 = (void *)swift_task_alloc();
        uint64_t v10 = v107;
        *(void *)(v151 + 520) = v9;
        *uint64_t v9 = *(void *)(v151 + 112);
        v9[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
        uint64_t v11 = *(void *)(v151 + 360);
        return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v10, v11);
      }
      id v95 = *(id *)(v151 + 496);
      uint64_t v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 432);
      uint64_t v12 = *(void *)(v151 + 408);
      uint64_t v93 = *(void *)(v151 + 384);
      outlined destroy of [SFCardSection]();
      uint64_t v13 = Logger.payments.unsafeMutableAddressor();
      v94(v12, v13, v93);
      id v14 = v95;
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = v95;
      swift_retain();
      uint64_t v98 = swift_allocObject();
      *(void *)(v98 + 16) = partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      *(void *)(v98 + 24) = v96;
      swift_release();
      int v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.debug.getter();
      *(void *)(v151 + 256) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v97 = *(_DWORD *)(v151 + 660);
      uint64_t v100 = swift_allocObject();
      *(unsigned char *)(v100 + 16) = 32;
      uint64_t v101 = swift_allocObject();
      *(unsigned char *)(v101 + 16) = 8;
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
      *(void *)(v99 + 24) = v98;
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v102 + 24) = v99;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v103 = v15;
      swift_retain();
      *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
      v103[1] = v100;
      swift_retain();
      v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      Builtin::Word v103[3] = v101;
      swift_retain();
      v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v103[5] = v102;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v91 = createStorage<A>(capacity:type:)(0);
        uint64_t v92 = createStorage<A>(capacity:type:)(1);
        uint64_t v159 = v90;
        uint64_t v160 = v91;
        uint64_t v161 = v92;
        serialize(_:at:)(2, &v159);
        serialize(_:at:)(1, &v159);
        unint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v163 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
        unint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v163 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
        unint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v163 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
        _os_log_impl(&dword_25D85A000, v104, v105, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet items %s", v90, v97);
        destroyStorage<A>(_:count:)(v91, 0, v89);
        destroyStorage<A>(_:count:)(v92, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v90, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      id v87 = *(id *)(v151 + 496);
      uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v151 + 480);
      uint64_t v82 = *(void *)(v151 + 408);
      uint64_t v83 = *(void *)(v151 + 384);

      v84(v82, v83);
      type metadata accessor for SAAceView();
      uint64_t v86 = _allocateUninitializedArray<A>(_:)();
      uint64_t v85 = v16;
      id v17 = v87;
      *uint64_t v85 = v87;
      _finalizeUninitializedArray<A>(_:)();

      uint64_t v88 = v86;
      goto LABEL_60;
    }
    uint64_t v80 = *(void *)(v151 + 352);
    swift_bridgeObjectRetain();
    *(void *)(v151 + 176) = v80;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    uint64_t v81 = *(void **)(v151 + 184);
    *(void *)(v151 + 544) = v81;
    if (v81)
    {
      *(void *)(v151 + 200) = v81;
      type metadata accessor for SASTColumnDataListItem();
      id v18 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v151 + 552) = v18;
      *(void *)(v151 + 208) = v18;
      *(void *)(v151 + 560) = type metadata accessor for SAUIDecoratedText();
      id v78 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v151 + 568) = v78;
      *(void *)(v151 + 216) = v78;
      *(void *)(v151 + 224) = SAUIAppPunchOut.__allocating_init()();
      id v19 = objc_msgSend(v81, sel_organizationName);
      id v79 = v19;
      if (v19)
      {
        id v73 = objc_msgSend(v19, sel_spokenPhrase);
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v75 = v20;

        uint64_t v76 = v74;
        uint64_t v77 = v75;
      }
      else
      {
        uint64_t v76 = 0;
        uint64_t v77 = 0;
      }
      *(void *)(v151 + 576) = v77;
      if (v77)
      {
        *(void *)(v151 + 64) = v76;
        *(void *)(v151 + 72) = v77;
        if ((String.isEmpty.getter() & 1) == 0)
        {
          swift_bridgeObjectRetain();
          id v72 = (id)MEMORY[0x2611B9130](v76, v77);
          swift_bridgeObjectRelease();
          objc_msgSend(v78, sel_setText_, v72);

          uint64_t v21 = (void *)swift_task_alloc();
          uint64_t v22 = (uint64_t)v81;
          *(void *)(v151 + 584) = v21;
          *uint64_t v21 = *(void *)(v151 + 112);
          v21[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
          uint64_t v23 = v151 + 224;
          return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(v22, v23);
        }
        swift_bridgeObjectRelease();
      }
      id v71 = objc_msgSend(v81, sel_nickname);
      if (v71)
      {
        id v66 = objc_msgSend(v71, sel_spokenPhrase);
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v68 = v24;

        uint64_t v69 = v67;
        uint64_t v70 = v68;
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v70 = 0;
      }
      *(void *)(v151 + 600) = v70;
      if (!v70) {
        goto LABEL_45;
      }
      *(void *)(v151 + 48) = v69;
      *(void *)(v151 + 56) = v70;
      if (String.isEmpty.getter())
      {
        swift_bridgeObjectRelease();
LABEL_45:
        id v64 = objc_msgSend(v81, sel_accountNumber);
        if (v64)
        {
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v61 = v26;

          uint64_t v62 = v60;
          uint64_t v63 = v61;
        }
        else
        {
          uint64_t v62 = 0;
          uint64_t v63 = 0;
        }
        if (v63)
        {
          *(void *)(v151 + 32) = v62;
          *(void *)(v151 + 40) = v63;
          if ((String.isEmpty.getter() & 1) == 0)
          {
            swift_bridgeObjectRetain();
            id v59 = (id)MEMORY[0x2611B9130](v62, v63);
            swift_bridgeObjectRelease();
            objc_msgSend(v78, sel_setText_, v59);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v58 = *(void *)(v151 + 544);
        uint64_t v27 = (void *)swift_task_alloc();
        uint64_t v10 = v58;
        *(void *)(v151 + 624) = v27;
        void *v27 = *(void *)(v151 + 112);
        v27[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
        uint64_t v11 = *(void *)(v151 + 360);
        return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v10, v11);
      }
      swift_bridgeObjectRetain();
      id v65 = (id)MEMORY[0x2611B9130](v69, v70);
      swift_bridgeObjectRelease();
      objc_msgSend(v78, sel_setText_, v65);

      uint32_t v25 = (void *)swift_task_alloc();
      uint64_t v22 = (uint64_t)v81;
      *(void *)(v151 + 608) = v25;
      void *v25 = *(void *)(v151 + 112);
      v25[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      uint64_t v23 = v151 + 224;
      return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(v22, v23);
    }
    id v47 = *(id *)(v151 + 496);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 432);
    uint64_t v28 = *(void *)(v151 + 400);
    uint64_t v45 = *(void *)(v151 + 384);
    outlined destroy of [SFCardSection]();
    uint64_t v29 = Logger.payments.unsafeMutableAddressor();
    v46(v28, v29, v45);
    id v30 = v47;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v47;
    swift_retain();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(void *)(v50 + 24) = v48;
    swift_release();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    *(void *)(v151 + 192) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v49 = *(_DWORD *)(v151 + 652);
    uint64_t v52 = swift_allocObject();
    *(unsigned char *)(v52 + 16) = 32;
    uint64_t v53 = swift_allocObject();
    *(unsigned char *)(v53 + 16) = 8;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v51 + 24) = v50;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v54 + 24) = v51;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v55 = v31;
    swift_retain();
    *uint64_t v55 = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[1] = v52;
    swift_retain();
    v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[3] = v53;
    swift_retain();
    v55[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[5] = v54;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v43 = createStorage<A>(capacity:type:)(0);
      uint64_t v44 = createStorage<A>(capacity:type:)(1);
      unint64_t v154 = v42;
      uint64_t v155 = v43;
      uint64_t v156 = v44;
      serialize(_:at:)(2, &v154);
      serialize(_:at:)(1, &v154);
      uint64_t v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v158 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      uint64_t v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v158 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      uint64_t v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v158 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v157, (uint64_t)&v154, (uint64_t)&v155, (uint64_t)&v156);
      _os_log_impl(&dword_25D85A000, v56, v57, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets itemGroup items %s", v42, v49);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v42, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    id v40 = *(id *)(v151 + 496);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v151 + 480);
    uint64_t v35 = *(void *)(v151 + 400);
    uint64_t v36 = *(void *)(v151 + 384);

    v37(v35, v36);
    type metadata accessor for SAAceView();
    uint64_t v39 = _allocateUninitializedArray<A>(_:)();
    uint64_t v38 = v32;
    id v33 = v40;
    *uint64_t v38 = v40;
    _finalizeUninitializedArray<A>(_:)();

    uint64_t v88 = v39;
  }
LABEL_60:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(uint64_t))(*(void *)(v151 + 112) + 8);
  return v34(v88);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  uint32_t size;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *oslog;
  os_log_type_t v35;
  id v36;
  id v37;
  id v38;
  Class isa;
  Class v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  uint64_t v59;

  uint64_t v58 = v0;
  uint64_t v1 = (void *)v0[66];
  v0[14] = v0;
  v0[34] = v1;
  v0[35] = objc_msgSend(v1, sel_itemGroupView);
  if (v0[35])
  {
    uint64_t v48 = *(id *)(v52 + 280);
    uint64_t v5 = v48;
    outlined destroy of SFRichText?((id *)(v52 + 280));
    uint32_t v49 = objc_msgSend(v48, sel_templateItems);
    if (v49)
    {
      uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v47 = v46;
    }
    else
    {
      id v47 = 0;
    }

    uint64_t v45 = v47;
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v52 + 280));
    uint64_t v45 = 0;
  }
  if (v45)
  {
    uint64_t v43 = *(id *)(v52 + 496);
    *(void *)(v52 + 288) = v45;
    swift_bridgeObjectRetain();
    *(void *)(v52 + 296) = v45;
    uint64_t v44 = objc_msgSend(v43, sel_templateItems);
    if (v44)
    {
      uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = v41;
    }
    else
    {
      uint64_t v42 = 0;
    }
    *(void *)(v52 + 304) = v42;
    if (!*(void *)(v52 + 304)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SASTTemplateItem]);
    lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
    Array.append<A>(contentsOf:)();
    if (*(void *)(v52 + 304))
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v40 = isa;
    }
    else
    {
      id v40 = 0;
    }
    uint64_t v37 = *(id *)(v52 + 528);
    uint64_t v38 = *(id *)(v52 + 512);
    objc_msgSend(*(id *)(v52 + 496), sel_setTemplateItems_);

    swift_bridgeObjectRelease();
    uint64_t v50 = *(void *)(v52 + 536);
  }
  else
  {
    uint64_t v36 = *(id *)(v52 + 512);

    uint64_t v50 = *(void *)(v52 + 536);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  uint64_t v51 = *(void *)(v52 + 248);
  *(void *)(v52 + 512) = v51;
  if (v51)
  {
    *(void *)(v52 + 264) = v51;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v52 + 520) = v2;
    *uint64_t v2 = *(void *)(v52 + 112);
    v2[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    uint64_t v3 = *(void *)(v52 + 360);
    return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v51, v3);
  }
  else
  {
    uint32_t v25 = *(id *)(v52 + 496);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 432);
    uint64_t v6 = *(void *)(v52 + 408);
    uint64_t v23 = *(void *)(v52 + 384);
    outlined destroy of [SFCardSection]();
    id v7 = Logger.payments.unsafeMutableAddressor();
    v24(v6, v7, v23);
    uint64_t v8 = v25;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    swift_retain();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(void *)(v28 + 24) = v26;
    swift_release();
    oslog = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.debug.getter();
    *(void *)(v52 + 256) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v52 + 660);
    id v30 = swift_allocObject();
    *(unsigned char *)(v30 + 16) = 32;
    Swift::String v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 8;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v29 + 24) = v28;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v32 + 24) = v29;
    _allocateUninitializedArray<A>(_:)();
    id v33 = v9;
    swift_retain();
    *id v33 = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[1] = v30;
    swift_retain();
    v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[3] = v31;
    swift_retain();
    v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v35))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      uint64_t v22 = createStorage<A>(capacity:type:)(1);
      uint64_t v53 = buf;
      uint64_t v54 = v21;
      uint64_t v55 = v22;
      serialize(_:at:)(2, &v53);
      serialize(_:at:)(1, &v53);
      uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      os_log_type_t v57 = v30;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      if (v50) {
        return result;
      }
      uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      os_log_type_t v57 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      os_log_type_t v57 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
      _os_log_impl(&dword_25D85A000, oslog, v35, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets for Wallet items %s", buf, size);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    id v18 = *(id *)(v52 + 496);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v52 + 480);
    uint64_t v13 = *(void *)(v52 + 408);
    id v14 = *(void *)(v52 + 384);

    v15(v13, v14);
    type metadata accessor for SAAceView();
    id v17 = _allocateUninitializedArray<A>(_:)();
    uint64_t v16 = v10;
    uint64_t v11 = v18;
    *uint64_t v16 = v18;
    _finalizeUninitializedArray<A>(_:)();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)(v52 + 112) + 8);
    return v12(v17);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 112) = *v1;
  *(void *)(v4 + 592) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  else
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v1 = (void *)swift_task_alloc();
  v4[78] = v1;
  *uint64_t v1 = v4[14];
  v1[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  uint64_t v2 = v4[45];
  return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v5, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 112) = *v1;
  *(void *)(v4 + 616) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  else
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v1 = (void *)swift_task_alloc();
  v4[78] = v1;
  *uint64_t v1 = v4[14];
  v1[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  uint64_t v2 = v4[45];
  return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v5, v2);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint8_t *buf;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  uint32_t size;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *oslog;
  os_log_type_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  Class isa;
  Class v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  void *v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  void *v96;
  uint64_t v97;

  uint64_t v96 = v0;
  uint64_t v1 = (void *)v0[69];
  v0[14] = v0;
  objc_msgSend(v1, sel_setAction_);
  swift_unknownObjectRelease();
  uint64_t v89 = (void *)v0[28];
  uint64_t v2 = v89;
  uint64_t v90 = objc_msgSend(v89, sel_text);
  if (v90)
  {
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v15;

    uint64_t v63 = v61;
    id v64 = v62;
  }
  else
  {
    uint64_t v63 = 0;
    id v64 = 0;
  }

  uint64_t v60 = Optional<A>.isNilOrEmpty.getter(v63, v64);
  swift_bridgeObjectRelease();
  if (v60)
  {
    id v59 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    uint64_t v58 = _allocateUninitializedArray<A>(_:)();
    uint64_t v56 = v16;
    os_log_type_t v57 = *(void **)(v88 + 224);
    id v17 = v57;
    *uint64_t v56 = v57;
    _finalizeUninitializedArray<A>(_:)();
    id v59 = v58;
  }
  if (v59)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v55 = isa;
  }
  else
  {
    uint64_t v55 = 0;
  }
  uint64_t v50 = *(id *)(v88 + 568);
  uint64_t v51 = *(id *)(v88 + 552);
  uint64_t v52 = *(id *)(v88 + 544);
  objc_msgSend(v51, sel_setDecoratedRows_);

  id v18 = v50;
  objc_msgSend(v51, sel_setTitle_, v50);

  id v19 = v51;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v51, (uint64_t)&protocol witness table for SASTColumnDataListItem);
  swift_unknownObjectRelease();

  uint64_t v53 = *(void *)(v88 + 640);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  uint64_t v85 = *(void **)(v88 + 184);
  *(void *)(v88 + 544) = v85;
  if (v85)
  {
    *(void *)(v88 + 200) = v85;
    type metadata accessor for SASTColumnDataListItem();
    uint64_t v3 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v88 + 552) = v3;
    *(void *)(v88 + 208) = v3;
    *(void *)(v88 + 560) = type metadata accessor for SAUIDecoratedText();
    uint64_t v86 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v88 + 568) = v86;
    *(void *)(v88 + 216) = v86;
    *(void *)(v88 + 224) = SAUIAppPunchOut.__allocating_init()();
    uint64_t v4 = objc_msgSend(v85, sel_organizationName);
    id v87 = v4;
    if (v4)
    {
      uint64_t v80 = objc_msgSend(v4, sel_spokenPhrase);
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v5;

      uint64_t v83 = v81;
      uint64_t v84 = v82;
    }
    else
    {
      uint64_t v83 = 0;
      uint64_t v84 = 0;
    }
    *(void *)(v88 + 576) = v84;
    if (v84)
    {
      *(void *)(v88 + 64) = v83;
      *(void *)(v88 + 72) = v84;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        id v79 = (id)MEMORY[0x2611B9130](v83, v84);
        swift_bridgeObjectRelease();
        objc_msgSend(v86, sel_setText_, v79);

        uint64_t v6 = (void *)swift_task_alloc();
        id v7 = (uint64_t)v85;
        *(void *)(v88 + 584) = v6;
        *uint64_t v6 = *(void *)(v88 + 112);
        v6[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
        uint64_t v8 = v88 + 224;
        return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(v7, v8);
      }
      swift_bridgeObjectRelease();
    }
    id v78 = objc_msgSend(v85, sel_nickname);
    if (v78)
    {
      id v73 = objc_msgSend(v78, sel_spokenPhrase);
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v10;

      uint64_t v76 = v74;
      uint64_t v77 = v75;
    }
    else
    {
      uint64_t v76 = 0;
      uint64_t v77 = 0;
    }
    *(void *)(v88 + 600) = v77;
    if (!v77) {
      goto LABEL_23;
    }
    *(void *)(v88 + 48) = v76;
    *(void *)(v88 + 56) = v77;
    if (String.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
LABEL_23:
      id v71 = objc_msgSend(v85, sel_accountNumber);
      if (v71)
      {
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v68 = v12;

        uint64_t v69 = v67;
        uint64_t v70 = v68;
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v70 = 0;
      }
      if (v70)
      {
        *(void *)(v88 + 32) = v69;
        *(void *)(v88 + 40) = v70;
        if ((String.isEmpty.getter() & 1) == 0)
        {
          swift_bridgeObjectRetain();
          id v66 = (id)MEMORY[0x2611B9130](v69, v70);
          swift_bridgeObjectRelease();
          objc_msgSend(v86, sel_setText_, v66);
        }
        swift_bridgeObjectRelease();
      }
      id v65 = *(void *)(v88 + 544);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v88 + 624) = v13;
      *uint64_t v13 = *(void *)(v88 + 112);
      v13[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
      id v14 = *(void *)(v88 + 360);
      return SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(v65, v14);
    }
    swift_bridgeObjectRetain();
    id v72 = (id)MEMORY[0x2611B9130](v76, v77);
    swift_bridgeObjectRelease();
    objc_msgSend(v86, sel_setText_, v72);

    uint64_t v11 = (void *)swift_task_alloc();
    id v7 = (uint64_t)v85;
    *(void *)(v88 + 608) = v11;
    *uint64_t v11 = *(void *)(v88 + 112);
    v11[1] = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    uint64_t v8 = v88 + 224;
    return SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(v7, v8);
  }
  uint64_t v39 = *(id *)(v88 + 496);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 432);
  uint64_t v20 = *(void *)(v88 + 400);
  uint64_t v37 = *(void *)(v88 + 384);
  outlined destroy of [SFCardSection]();
  uint64_t v21 = Logger.payments.unsafeMutableAddressor();
  v38(v20, v21, v37);
  uint64_t v22 = v39;
  id v40 = swift_allocObject();
  *(void *)(v40 + 16) = v39;
  swift_retain();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  *(void *)(v42 + 24) = v40;
  swift_release();
  oslog = Logger.logObject.getter();
  uint32_t v49 = static os_log_type_t.debug.getter();
  *(void *)(v88 + 192) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v88 + 652);
  uint64_t v44 = swift_allocObject();
  *(unsigned char *)(v44 + 16) = 32;
  uint64_t v45 = swift_allocObject();
  *(unsigned char *)(v45 + 16) = 8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v43 + 24) = v42;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v46 + 24) = v43;
  _allocateUninitializedArray<A>(_:)();
  id v47 = v23;
  swift_retain();
  *id v47 = partial apply for closure #1 in OSLogArguments.append(_:);
  v47[1] = v44;
  swift_retain();
  v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v47[3] = v45;
  swift_retain();
  v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v47[5] = v46;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v35 = createStorage<A>(capacity:type:)(0);
    uint64_t v36 = createStorage<A>(capacity:type:)(1);
    uint64_t v91 = buf;
    uint64_t v92 = v35;
    uint64_t v93 = v36;
    serialize(_:at:)(2, &v91);
    serialize(_:at:)(1, &v91);
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v95 = v44;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    if (v53) {
      return result;
    }
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v95 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v95 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    _os_log_impl(&dword_25D85A000, oslog, v49, "#SearchForAccountsHandleIntentStrategy buildWatchSnippets itemGroup items %s", buf, size);
    destroyStorage<A>(_:count:)(v35, 0, v33);
    destroyStorage<A>(_:count:)(v36, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v32 = *(id *)(v88 + 496);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v88 + 480);
  uint64_t v27 = *(void *)(v88 + 400);
  uint64_t v28 = *(void *)(v88 + 384);

  v29(v27, v28);
  type metadata accessor for SAAceView();
  Swift::String v31 = _allocateUninitializedArray<A>(_:)();
  id v30 = v24;
  uint32_t v25 = v32;
  *id v30 = v32;
  _finalizeUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)(v88 + 112) + 8);
  return v26(v31);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[64];
  uint64_t v4 = (id)v0[62];
  v0[14] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[14] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  uint64_t v3 = *(id *)(v0 + 568);
  uint64_t v4 = *(id *)(v0 + 552);
  uint64_t v5 = *(id *)(v0 + 544);
  uint64_t v6 = *(id *)(v0 + 496);
  *(void *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 112) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  uint64_t v3 = *(id *)(v0 + 568);
  uint64_t v4 = *(id *)(v0 + 552);
  uint64_t v5 = *(id *)(v0 + 544);
  uint64_t v6 = *(id *)(v0 + 496);
  *(void *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 112) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  uint64_t v3 = *(id *)(v0 + 568);
  uint64_t v4 = *(id *)(v0 + 552);
  uint64_t v5 = *(id *)(v0 + 544);
  uint64_t v6 = *(id *)(v0 + 496);
  *(void *)(v0 + 112) = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 112) + 8);
  return v1();
}

uint64_t SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[14] = *v2;
  v5[66] = a1;
  v5[67] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  else
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[14] = *v2;
  v5[79] = a1;
  v5[80] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  else
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 312) = v2;
  *(void *)(v3 + 304) = a2;
  *(void *)(v3 + 296) = a1;
  *(void *)(v3 + 144) = v3;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 240) = 0;
  *(void *)(v3 + 248) = 0;
  *(void *)(v3 + 256) = 0;
  *(unsigned char *)(v3 + 552) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 336) = v4;
  *(void *)(v3 + 344) = *(void *)(v4 - 8);
  *(void *)(v3 + 352) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 360) = v5;
  *(void *)(v3 + 368) = *(void *)(v5 - 8);
  *(void *)(v3 + 376) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 384) = v6;
  *(void *)(v3 + 392) = *(void *)(v6 - 8);
  *(void *)(v3 + 400) = swift_task_alloc();
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 160) = a2;
  *(void *)(v3 + 168) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)()
{
  id v47 = v0;
  uint64_t v40 = v0[37];
  v0[18] = v0;
  swift_bridgeObjectRetain();
  v0[22] = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();
  char v41 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if (v41)
  {
    type metadata accessor for SACardSnippet();
    uint64_t v15 = _allocateUninitializedArray<A>(_:)();
  }
  else
  {
    uint64_t v1 = *(void *)(v39 + 400);
    uint64_t v27 = *(void *)(v39 + 384);
    uint64_t v28 = *(void *)(v39 + 296);
    uint64_t v26 = *(void *)(v39 + 392);
    uint64_t v2 = Logger.payments.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v1, v2, v27);
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    swift_retain();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(void *)(v31 + 24) = v29;
    swift_release();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    *(void *)(v39 + 184) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v39 + 44);
    uint64_t v33 = swift_allocObject();
    *(unsigned char *)(v33 + 16) = 32;
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 8;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
    *(void *)(v32 + 24) = v31;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v35 + 24) = v32;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v36 = v3;
    swift_retain();
    *uint64_t v36 = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[1] = v33;
    swift_retain();
    v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[3] = v34;
    swift_retain();
    v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36[5] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v37, v38))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = createStorage<A>(capacity:type:)(1);
      uint64_t v42 = buf;
      uint64_t v43 = v24;
      uint64_t v44 = v25;
      serialize(_:at:)(2, &v42);
      serialize(_:at:)(1, &v42);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      _os_log_impl(&dword_25D85A000, v37, v38, "#SearchForAccountsHandleIntentStrategy buildSnippet for accounts %s", buf, size);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v19 = *(void *)(v39 + 400);
    uint64_t v20 = *(void *)(v39 + 384);
    uint64_t v21 = *(void *)(v39 + 296);
    uint64_t v18 = *(void *)(v39 + 392);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    type metadata accessor for INPaymentAccount();
    if (MEMORY[0x2611B9380](v21) <= 1)
    {
      Array.subscript.getter();
      uint64_t v11 = *(void *)(v39 + 192);
      *(void *)(v39 + 520) = v11;
      uint64_t v9 = (void *)swift_task_alloc();
      uint64_t v5 = v11;
      *(void *)(v39 + 528) = v9;
      *uint64_t v9 = *(void *)(v39 + 144);
      v9[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      uint64_t v6 = *(void *)(v39 + 304);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v5, v6);
    }
    uint64_t v16 = *(void *)(v39 + 296);
    *(void *)(v39 + 408) = type metadata accessor for SFCardSection();
    *(void *)(v39 + 208) = Array.init()();
    swift_bridgeObjectRetain();
    *(void *)(v39 + 216) = v16;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    uint64_t v17 = *(void *)(v39 + 224);
    *(void *)(v39 + 416) = v17;
    if (v17)
    {
      *(void *)(v39 + 232) = v17;
      uint64_t v4 = (void *)swift_task_alloc();
      uint64_t v5 = v17;
      *(void *)(v39 + 424) = v4;
      *uint64_t v4 = *(void *)(v39 + 144);
      v4[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      uint64_t v6 = *(void *)(v39 + 304);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v5, v6);
    }
    outlined destroy of [SFCardSection]();
    type metadata accessor for SACardSnippet();
    uint64_t v14 = _allocateUninitializedArray<A>(_:)();
    uint64_t v13 = v8;
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    uint64_t v12 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v13 = v12;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
    uint64_t v15 = v14;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(v39 + 144) + 8);
  return v10(v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  void *v18;
  char v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  char v43;
  id v44;
  id v45;
  id v46;
  char v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  Class isa;
  void *v78;
  id v79;
  void *v80;
  uint64_t v81;

  uint64_t v1 = v0[54];
  id v78 = (void *)v0[52];
  uint64_t v74 = v0[47];
  id v72 = v0[46];
  id v73 = v0[45];
  v0[18] = v0;
  v0[30] = v1;
  type metadata accessor for SFCard();
  uint64_t v76 = SAUIAppPunchOut.__allocating_init()();
  v0[56] = v76;
  v0[31] = v76;
  UUID.init()();
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v75 = (void *)MEMORY[0x2611B9130](v2);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
  swift_bridgeObjectRelease();
  objc_msgSend(v76, sel_setCardId_, v75);

  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v76, sel_setCardSections_, isa);

  type metadata accessor for SFRowCardSection();
  id v79 = SAUIAppPunchOut.__allocating_init()();
  v0[57] = v79;
  v0[32] = v79;
  v0[33] = 0;
  uint64_t v3 = objc_msgSend(v78, sel_organizationName);
  uint64_t v80 = v3;
  if (v3)
  {
    id v65 = objc_msgSend(v3, sel_spokenPhrase);
    id v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v7;

    uint64_t v68 = v66;
    uint64_t v69 = v67;
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
  }
  if (v69)
  {
    *(void *)(v71 + 112) = v68;
    *(void *)(v71 + 120) = v69;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      uint64_t v8 = @nonobjc SFRichText.__allocating_init(string:)(v68, v69);
      uint64_t v9 = *(void **)(v71 + 264);
      *(void *)(v71 + 264) = v8;

      swift_bridgeObjectRetain();
      id v64 = (id)MEMORY[0x2611B9130](v68, v69);
      swift_bridgeObjectRelease();
      objc_msgSend(v76, sel_setTitle_, v64);

      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v63 = objc_msgSend(*(id *)(v71 + 416), sel_nickname);
  if (v63)
  {
    uint64_t v58 = objc_msgSend(v63, sel_spokenPhrase);
    id v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v10;

    uint64_t v61 = v59;
    uint64_t v62 = v60;
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
  }
  if (v62)
  {
    *(void *)(v71 + 96) = v61;
    *(void *)(v71 + 104) = v62;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      uint64_t v11 = @nonobjc SFRichText.__allocating_init(string:)(v61, v62);
      uint64_t v12 = *(void **)(v71 + 264);
      *(void *)(v71 + 264) = v11;

      swift_bridgeObjectRetain();
      os_log_type_t v57 = (id)MEMORY[0x2611B9130](v61, v62);
      swift_bridgeObjectRelease();
      objc_msgSend(v76, sel_setTitle_, v57);

      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v56 = objc_msgSend(*(id *)(v71 + 416), sel_accountNumber);
  if (v56)
  {
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v13;

    uint64_t v54 = v52;
    uint64_t v55 = v53;
  }
  else
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
  }
  if (v55)
  {
    *(void *)(v71 + 80) = v54;
    *(void *)(v71 + 88) = v55;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SFRichText();
      swift_bridgeObjectRetain();
      uint64_t v14 = @nonobjc SFRichText.__allocating_init(string:)(v54, v55);
      uint64_t v15 = *(void **)(v71 + 264);
      *(void *)(v71 + 264) = v14;

      swift_bridgeObjectRetain();
      uint64_t v51 = (id)MEMORY[0x2611B9130](v54, v55);
      swift_bridgeObjectRelease();
      objc_msgSend(v76, sel_setTitle_, v51);
    }
    swift_bridgeObjectRelease();
  }
LABEL_27:
  uint32_t v49 = *(id *)(v71 + 416);
  uint64_t v48 = *(id *)(v71 + 264);
  uint64_t v16 = v48;
  objc_msgSend(v79, sel_setLeadingText_, v48);

  uint64_t v50 = objc_msgSend(v49, sel_balance);
  if (v50)
  {
    uint64_t v45 = objc_msgSend(v50, sel_balanceType);

    uint64_t v46 = v45;
    id v47 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    id v47 = 1;
  }
  *(void *)(v71 + 16) = v46;
  *(unsigned char *)(v71 + 24) = v47 & 1;
  *(void *)(v71 + 32) = 1;
  *(unsigned char *)(v71 + 40) = 0;
  if (*(unsigned char *)(v71 + 24))
  {
    if ((*(unsigned char *)(v71 + 40) & 1) == 0) {
      goto LABEL_40;
    }
  }
  else
  {
    outlined init with copy of Int?(v71 + 16, v71 + 128);
    if ((*(unsigned char *)(v71 + 40) & 1) != 0
      || (*(void *)(v71 + 280) = *(void *)(v71 + 128),
          *(void *)(v71 + 288) = *(void *)(v71 + 32),
          type metadata accessor for INBalanceType(),
          lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType(),
          uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)(),
          (v17 & 1) == 0))
    {
LABEL_40:
      uint64_t v19 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(*(id *)(v71 + 416), sel_accountType));
      uint64_t v43 = v19;
      if (v19 == 9)
      {
        uint64_t v40 = *(id *)(v71 + 456);
        char v41 = *(id *)(v71 + 448);
        uint64_t v42 = *(id *)(v71 + 416);
        uint64_t v20 = v40;
        uint64_t v21 = v41;
        objc_msgSend(v40, sel_setNextCard_, v41);

        uint64_t v22 = v40;
        *(void *)(v71 + 272) = v40;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
        Array.append(_:)();
        outlined destroy of SFRichText?((id *)(v71 + 264));

        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
        IndexingIterator.next()();
        uint64_t v70 = *(void *)(v71 + 224);
        *(void *)(v71 + 416) = v70;
        if (v70)
        {
          *(void *)(v71 + 232) = v70;
          uint64_t v4 = (void *)swift_task_alloc();
          *(void *)(v71 + 424) = v4;
          *uint64_t v4 = *(void *)(v71 + 144);
          v4[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
          uint64_t v5 = *(void *)(v71 + 304);
          return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v70, v5);
        }
        else
        {
          outlined destroy of [SFCardSection]();
          type metadata accessor for SACardSnippet();
          uint64_t v36 = _allocateUninitializedArray<A>(_:)();
          uint64_t v35 = v32;
          swift_bridgeObjectRetain();
          App.appIdentifier.getter();
          default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
          uint64_t v34 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v35 = v34;
          _finalizeUninitializedArray<A>(_:)();
          outlined destroy of [SFCardSection]();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)(v71 + 144) + 8);
          return v33(v36);
        }
      }
      else
      {
        uint64_t v23 = *(void **)(v71 + 312);
        *(unsigned char *)(v71 + 552) = v19;
        *(void *)(v71 + 496) = *v23;
        swift_retain();
        Constants.PaymentAccountType.asCATIDForLoc.getter(v43);
        if (v24)
        {
          uint64_t v39 = *(void *)(v71 + 328);
          String.toSpeakableString.getter();
          swift_bridgeObjectRelease();
          uint64_t v25 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 56))(v39, 0, 1);
        }
        else
        {
          uint64_t v37 = *(void *)(v71 + 328);
          uint64_t v31 = type metadata accessor for SpeakableString();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v37, 1);
        }
        os_log_type_t v38 = *(void *)(v71 + 320);
        uint64_t v26 = type metadata accessor for SpeakableString();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v38, 1);
        uint64_t v27 = (void *)swift_task_alloc();
        *(void *)(v71 + 504) = v27;
        void *v27 = *(void *)(v71 + 144);
        v27[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
        uint64_t v28 = *(void *)(v71 + 352);
        uint64_t v29 = *(void *)(v71 + 328);
        id v30 = *(void *)(v71 + 320);
        return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v28, v29, v30);
      }
    }
  }
  uint64_t v44 = objc_msgSend(*(id *)(v71 + 416), sel_balance);
  *(void *)(v71 + 464) = v44;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v71 + 472) = v18;
  *uint64_t v18 = *(void *)(v71 + 144);
  v18[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v44);
}

{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t v4;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;

  uint64_t v31 = *(void **)(v0 + 480);
  uint64_t v1 = *(void **)(v0 + 456);
  *(void *)(v0 + 144) = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  uint64_t v2 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(*(id *)(v0 + 416), sel_accountType));
  uint64_t v32 = v2;
  if (v2 == 9)
  {
    uint64_t v26 = *(id *)(v30 + 456);
    uint64_t v27 = *(id *)(v30 + 448);
    uint64_t v28 = *(void **)(v30 + 416);
    uint64_t v6 = v26;
    id v7 = v27;
    objc_msgSend(v26, sel_setNextCard_, v27);

    uint64_t v8 = v26;
    *(void *)(v30 + 272) = v26;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
    Array.append(_:)();
    outlined destroy of SFRichText?((id *)(v30 + 264));

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
    IndexingIterator.next()();
    uint64_t v29 = *(void *)(v30 + 224);
    *(void *)(v30 + 416) = v29;
    if (v29)
    {
      *(void *)(v30 + 232) = v29;
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v30 + 424) = v3;
      *uint64_t v3 = *(void *)(v30 + 144);
      v3[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
      uint64_t v4 = *(void *)(v30 + 304);
      return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v29, v4);
    }
    else
    {
      outlined destroy of [SFCardSection]();
      type metadata accessor for SACardSnippet();
      uint64_t v22 = _allocateUninitializedArray<A>(_:)();
      uint64_t v21 = v18;
      swift_bridgeObjectRetain();
      App.appIdentifier.getter();
      default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      uint64_t v20 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v21 = v20;
      _finalizeUninitializedArray<A>(_:)();
      outlined destroy of [SFCardSection]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)(v30 + 144) + 8);
      return v19(v22);
    }
  }
  else
  {
    uint64_t v9 = *(void **)(v30 + 312);
    *(unsigned char *)(v30 + 552) = v2;
    *(void *)(v30 + 496) = *v9;
    swift_retain();
    Constants.PaymentAccountType.asCATIDForLoc.getter(v32);
    if (v10)
    {
      uint64_t v25 = *(void *)(v30 + 328);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 56))(v25, 0, 1);
    }
    else
    {
      uint64_t v23 = *(void *)(v30 + 328);
      uint64_t v17 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v23, 1);
    }
    uint64_t v24 = *(void *)(v30 + 320);
    uint64_t v12 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v24, 1);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v30 + 504) = v13;
    *uint64_t v13 = *(void *)(v30 + 144);
    v13[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    uint64_t v14 = *(void *)(v30 + 352);
    uint64_t v15 = *(void *)(v30 + 328);
    uint64_t v16 = *(void *)(v30 + 320);
    return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v14, v15, v16);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[18] = *v1;
  v5[64] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  else
  {
    uint64_t v4 = v5[41];
    outlined destroy of SpeakableString?(v5[40]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v18 = *(id *)(v0 + 456);
  uint64_t v15 = *(void *)(v0 + 352);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 336);
  *(void *)(v0 + 144) = v0;
  uint64_t v17 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v20 = v1;
  *(void *)(v0 + 64) = v17;
  *(void *)(v0 + 72) = v1;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  type metadata accessor for SFRichText();
  swift_bridgeObjectRetain();
  uint64_t v19 = @nonobjc SFRichText.__allocating_init(string:)(v17, v20);
  objc_msgSend(v18, sel_setLeadingSubtitle_);

  swift_bridgeObjectRelease();
  uint64_t v21 = *(void **)(v0 + 456);
  uint64_t v22 = *(void **)(v0 + 448);
  uint64_t v23 = *(void **)(v0 + 416);
  uint64_t v2 = v21;
  uint64_t v3 = v22;
  objc_msgSend(v21, sel_setNextCard_, v22);

  uint64_t v4 = v21;
  *(void *)(v0 + 272) = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  outlined destroy of SFRichText?((id *)(v0 + 264));

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[INPaymentAccount]>);
  IndexingIterator.next()();
  uint64_t v24 = *(void *)(v0 + 224);
  *(void *)(v0 + 416) = v24;
  if (v24)
  {
    v13[29] = v24;
    uint64_t v5 = (void *)swift_task_alloc();
    v13[53] = v5;
    void *v5 = v13[18];
    v5[1] = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
    uint64_t v6 = v13[38];
    return SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(v24, v6);
  }
  else
  {
    outlined destroy of [SFCardSection]();
    type metadata accessor for SACardSnippet();
    uint64_t v12 = _allocateUninitializedArray<A>(_:)();
    uint64_t v11 = v8;
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    uint64_t v10 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v11 = v10;
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of [SFCardSection]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v13[18] + 8);
    return v9(v12);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[67];
  v0[18] = v0;
  v0[25] = v1;
  type metadata accessor for SACardSnippet();
  id v7 = _allocateUninitializedArray<A>(_:)();
  uint64_t v6 = v2;
  App.appIdentifier.getter();
  default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  uint64_t v5 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v6 = v5;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0[18] + 8);
  return v3(v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 416);
  *(void *)(v0 + 144) = v0;

  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 144) + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 464);
  uint64_t v4 = *(id *)(v0 + 456);
  uint64_t v5 = *(id *)(v0 + 448);
  uint64_t v6 = *(id *)(v0 + 416);
  *(void *)(v0 + 144) = v0;

  outlined destroy of SFRichText?((id *)(v0 + 264));
  swift_bridgeObjectRelease();

  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 144) + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  uint64_t v5 = *(id *)(v0 + 456);
  uint64_t v6 = *(id *)(v0 + 448);
  id v7 = *(id *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 320);
  *(void *)(v0 + 144) = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  outlined destroy of SFRichText?((id *)(v0 + 264));

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 144) + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 520);
  *(void *)(v0 + 144) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(*(void *)(v0 + 144) + 8);
  return v2();
}

uint64_t SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[18] = *v2;
  v5[54] = a1;
  v5[55] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  else
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 144) = *v2;
  *(void *)(v5 + 480) = a1;
  *(void *)(v5 + 488) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 144) = *v2;
  *(void *)(v5 + 536) = a1;
  *(void *)(v5 + 544) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

unint64_t lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPaymentAccount]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPaymentAccount]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPaymentAccount] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 240) = v2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 80) = v3;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 184) = 0;
  *(unsigned char *)(v3 + 720) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 216) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 248) = swift_task_alloc();
  *(void *)(v3 + 256) = swift_task_alloc();
  *(void *)(v3 + 264) = swift_task_alloc();
  *(void *)(v3 + 272) = swift_task_alloc();
  *(void *)(v3 + 280) = swift_task_alloc();
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 296) = v4;
  *(void *)(v3 + 304) = *(void *)(v4 - 8);
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  *(void *)(v3 + 336) = swift_task_alloc();
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = a2;
  *(void *)(v3 + 104) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)()
{
  uint64_t v67 = (void *)v0[29];
  v0[10] = v0;
  type metadata accessor for SFCardSection();
  v0[14] = Array.init()();
  id v68 = objc_msgSend(v67, sel_organizationName);
  if (v68)
  {
    id v61 = objc_msgSend(v68, sel_spokenPhrase);
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v63 = v1;

    uint64_t v64 = v62;
    uint64_t v65 = v63;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  *(void *)(v66 + 360) = v65;
  *(void *)(v66 + 352) = v64;
  if (v65)
  {
    *(void *)(v66 + 64) = v64;
    *(void *)(v66 + 72) = v65;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v60 = *(void *)(v66 + 288);
      id v59 = *(void **)(v66 + 240);
      type metadata accessor for SFRowCardSection();
      id v2 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v66 + 368) = v2;
      *(void *)(v66 + 216) = v2;
      *(void *)(v66 + 376) = *v59;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("organizationName", 0x10uLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 56))(v60, 0, 1);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v66 + 384) = v4;
      *uint64_t v4 = *(void *)(v66 + 80);
      v4[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v5 = *(void *)(v66 + 344);
      uint64_t v6 = *(void *)(v66 + 288);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v5, v6);
    }
    swift_bridgeObjectRelease();
  }
  char v58 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(*(id *)(v66 + 232), sel_accountType));
  *(unsigned char *)(v66 + 723) = v58;
  if (v58 != 9)
  {
    *(unsigned char *)(v66 + 720) = v58;
    *(unsigned char *)(v66 + 72String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1) = v58;
    *(unsigned char *)(v66 + 722) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v57 = *(void *)(v66 + 280);
      uint64_t v56 = *(void **)(v66 + 240);
      type metadata accessor for SFRowCardSection();
      id v8 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v66 + 400) = v8;
      *(void *)(v66 + 200) = v8;
      *(void *)(v66 + 408) = *v56;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for SpeakableString();
      *(void *)(v66 + 416) = v9;
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(void (**)(uint64_t, void, uint64_t))(v10 + 56);
      *(void *)(v66 + 424) = v11;
      *(void *)(v66 + 432) = (v10 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v11(v57, 0, 1);
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v66 + 440) = v12;
      *uint64_t v12 = *(void *)(v66 + 80);
      v12[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v5 = *(void *)(v66 + 336);
      uint64_t v6 = *(void *)(v66 + 280);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v5, v6);
    }
  }
  id v55 = objc_msgSend(*(id *)(v66 + 232), sel_nickname);
  if (v55)
  {
    id v50 = objc_msgSend(v55, sel_spokenPhrase);
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v13;

    uint64_t v53 = v51;
    uint64_t v54 = v52;
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
  }
  *(void *)(v66 + 488) = v54;
  *(void *)(v66 + 480) = v53;
  if (v54)
  {
    *(void *)(v66 + 32) = v53;
    *(void *)(v66 + 40) = v54;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v49 = *(void *)(v66 + 256);
      uint64_t v48 = *(void **)(v66 + 240);
      type metadata accessor for SFRowCardSection();
      id v14 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v66 + 496) = v14;
      *(void *)(v66 + 184) = v14;
      *(void *)(v66 + 504) = *v48;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 56))(v49, 0, 1);
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v66 + 512) = v16;
      *uint64_t v16 = *(void *)(v66 + 80);
      v16[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v5 = *(void *)(v66 + 320);
      uint64_t v6 = *(void *)(v66 + 256);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v5, v6);
    }
    swift_bridgeObjectRelease();
  }
  id v47 = objc_msgSend(*(id *)(v66 + 232), sel_accountNumber);
  if (v47)
  {
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v17;

    uint64_t v45 = v43;
    uint64_t v46 = v44;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  *(void *)(v66 + 536) = v46;
  *(void *)(v66 + 528) = v45;
  if (v46)
  {
    *(void *)(v66 + 16) = v45;
    *(void *)(v66 + 24) = v46;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v42 = *(void *)(v66 + 248);
      char v41 = *(void **)(v66 + 240);
      type metadata accessor for SFRowCardSection();
      id v18 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v66 + 544) = v18;
      *(void *)(v66 + 168) = v18;
      *(void *)(v66 + 552) = *v41;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v19 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 56))(v42, 0, 1);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v66 + 560) = v20;
      void *v20 = *(void *)(v66 + 80);
      v20[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v5 = *(void *)(v66 + 312);
      uint64_t v6 = *(void *)(v66 + 248);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v5, v6);
    }
    swift_bridgeObjectRelease();
  }
  id v40 = objc_msgSend(*(id *)(v66 + 232), sel_balance);
  if (v40)
  {
    id v38 = objc_msgSend(v40, sel_amount);

    id v39 = v38;
  }
  else
  {
    id v39 = 0;
  }
  *(void *)(v66 + 120) = v39;
  if (*(void *)(v66 + 120))
  {
    outlined destroy of SFRichText?((id *)(v66 + 120));
    id v35 = *(id *)(v66 + 232);
    type metadata accessor for SFRowCardSection();
    id v21 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v66 + 576) = v21;
    *(void *)(v66 + 152) = v21;
    id v37 = objc_msgSend(v35, sel_balance);
    *(void *)(v66 + 584) = v37;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v22 = (void *)swift_task_alloc();
    uint64_t v23 = (uint64_t)v37;
    *(void *)(v66 + 592) = v22;
    void *v22 = *(void *)(v66 + 80);
    v22[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    char v24 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v23, v24);
  }
  outlined destroy of SFRichText?((id *)(v66 + 120));
  id v25 = objc_msgSend(*(id *)(v66 + 232), sel_secondaryBalance);
  id v34 = v25;
  if (v25)
  {
    id v32 = objc_msgSend(v25, sel_amount);

    id v33 = v32;
  }
  else
  {
    id v33 = 0;
  }
  *(void *)(v66 + 128) = v33;
  if (*(void *)(v66 + 128))
  {
    outlined destroy of SFRichText?((id *)(v66 + 128));
    id v30 = *(id *)(v66 + 232);
    type metadata accessor for SFRowCardSection();
    id v26 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v66 + 648) = v26;
    *(void *)(v66 + 136) = v26;
    id v31 = objc_msgSend(v30, sel_secondaryBalance);
    *(void *)(v66 + 656) = v31;
    uint64_t v27 = (void *)swift_task_alloc();
    uint64_t v23 = (uint64_t)v31;
    *(void *)(v66 + 664) = v27;
    void *v27 = *(void *)(v66 + 80);
    v27[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    char v24 = 0;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v23, v24);
  }
  outlined destroy of SFRichText?((id *)(v66 + 128));
  uint64_t v29 = *(void *)(v66 + 112);
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)(v66 + 80) + 8);
  return v28(v29);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v1;
  v4[10] = *v1;
  v4[49] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[36]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  char v25;
  id v26;
  id v27;
  void *v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  char has_malloc_size;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  uint64_t v66 = *(void **)(v0 + 368);
  uint64_t v67 = *(void *)(v0 + 360);
  id v61 = *(void *)(v0 + 352);
  uint64_t v64 = *(void *)(v0 + 344);
  uint64_t v63 = *(void *)(v0 + 304);
  uint64_t v65 = *(void *)(v0 + 296);
  *(void *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v60 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v66, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  uint64_t v62 = @nonobjc SFRichText.__allocating_init(string:)(v61, v67);
  objc_msgSend(v66, sel_setTrailingText_);

  uint64_t v3 = v66;
  objc_msgSend(v66, sel_setSeparatorStyle_, 4);

  uint64_t v4 = v66;
  *(void *)(v0 + 224) = v66;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);

  swift_bridgeObjectRelease();
  uint64_t v5 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(*(id *)(v0 + 232), sel_accountType));
  *(unsigned char *)(v0 + 723) = v5;
  if (v5 != 9)
  {
    *(unsigned char *)(v59 + 720) = v5;
    *(unsigned char *)(v59 + 72String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1) = v5;
    *(unsigned char *)(v59 + 722) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      char v58 = *(void *)(v59 + 280);
      uint64_t v57 = *(void **)(v59 + 240);
      type metadata accessor for SFRowCardSection();
      uint64_t v6 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v59 + 400) = v6;
      *(void *)(v59 + 200) = v6;
      *(void *)(v59 + 408) = *v57;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      id v7 = type metadata accessor for SpeakableString();
      *(void *)(v59 + 416) = v7;
      id v8 = *(void *)(v7 - 8);
      uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v8 + 56);
      *(void *)(v59 + 424) = v9;
      *(void *)(v59 + 432) = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v9(v58, 0, 1);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v59 + 440) = v10;
      *uint64_t v10 = *(void *)(v59 + 80);
      v10[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v11 = *(void *)(v59 + 336);
      uint64_t v12 = *(void *)(v59 + 280);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v11, v12);
    }
  }
  uint64_t v56 = objc_msgSend(*(id *)(v59 + 232), sel_nickname);
  if (v56)
  {
    uint64_t v51 = objc_msgSend(v56, sel_spokenPhrase);
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v14;

    uint64_t v54 = v52;
    id v55 = v53;
  }
  else
  {
    uint64_t v54 = 0;
    id v55 = 0;
  }
  *(void *)(v59 + 488) = v55;
  *(void *)(v59 + 480) = v54;
  if (v55)
  {
    *(void *)(v59 + 32) = v54;
    *(void *)(v59 + 40) = v55;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      id v50 = *(void *)(v59 + 256);
      uint64_t v49 = *(void **)(v59 + 240);
      type metadata accessor for SFRowCardSection();
      uint64_t v15 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v59 + 496) = v15;
      *(void *)(v59 + 184) = v15;
      *(void *)(v59 + 504) = *v49;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 56))(v50, 0, 1);
      uint64_t v17 = (void *)swift_task_alloc();
      *(void *)(v59 + 512) = v17;
      *uint64_t v17 = *(void *)(v59 + 80);
      v17[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v11 = *(void *)(v59 + 320);
      uint64_t v12 = *(void *)(v59 + 256);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v11, v12);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v48 = objc_msgSend(*(id *)(v59 + 232), sel_accountNumber);
  if (v48)
  {
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v18;

    uint64_t v46 = v44;
    id v47 = v45;
  }
  else
  {
    uint64_t v46 = 0;
    id v47 = 0;
  }
  *(void *)(v59 + 536) = v47;
  *(void *)(v59 + 528) = v46;
  if (v47)
  {
    *(void *)(v59 + 16) = v46;
    *(void *)(v59 + 24) = v47;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v43 = *(void *)(v59 + 248);
      uint64_t v42 = *(void **)(v59 + 240);
      type metadata accessor for SFRowCardSection();
      uint64_t v19 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v59 + 544) = v19;
      *(void *)(v59 + 168) = v19;
      *(void *)(v59 + 552) = *v42;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v20 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 56))(v43, 0, 1);
      id v21 = (void *)swift_task_alloc();
      *(void *)(v59 + 560) = v21;
      *id v21 = *(void *)(v59 + 80);
      v21[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v11 = *(void *)(v59 + 312);
      uint64_t v12 = *(void *)(v59 + 248);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v11, v12);
    }
    swift_bridgeObjectRelease();
  }
  char v41 = objc_msgSend(*(id *)(v59 + 232), sel_balance);
  if (v41)
  {
    id v39 = objc_msgSend(v41, sel_amount);

    id v40 = v39;
  }
  else
  {
    id v40 = 0;
  }
  *(void *)(v59 + 120) = v40;
  if (*(void *)(v59 + 120))
  {
    outlined destroy of SFRichText?((id *)(v59 + 120));
    uint64_t v36 = *(id *)(v59 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v22 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v59 + 576) = v22;
    *(void *)(v59 + 152) = v22;
    id v38 = objc_msgSend(v36, sel_balance);
    *(void *)(v59 + 584) = v38;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v23 = (void *)swift_task_alloc();
    char v24 = (uint64_t)v38;
    *(void *)(v59 + 592) = v23;
    *uint64_t v23 = *(void *)(v59 + 80);
    v23[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v25 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v24, v25);
  }
  outlined destroy of SFRichText?((id *)(v59 + 120));
  id v26 = objc_msgSend(*(id *)(v59 + 232), sel_secondaryBalance);
  id v35 = v26;
  if (v26)
  {
    id v33 = objc_msgSend(v26, sel_amount);

    id v34 = v33;
  }
  else
  {
    id v34 = 0;
  }
  *(void *)(v59 + 128) = v34;
  if (*(void *)(v59 + 128))
  {
    outlined destroy of SFRichText?((id *)(v59 + 128));
    id v31 = *(id *)(v59 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v27 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v59 + 648) = v27;
    *(void *)(v59 + 136) = v27;
    id v32 = objc_msgSend(v31, sel_secondaryBalance);
    *(void *)(v59 + 656) = v32;
    uint64_t v28 = (void *)swift_task_alloc();
    char v24 = (uint64_t)v32;
    *(void *)(v59 + 664) = v28;
    *uint64_t v28 = *(void *)(v59 + 80);
    v28[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v25 = 0;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v24, v25);
  }
  outlined destroy of SFRichText?((id *)(v59 + 128));
  id v30 = *(void *)(v59 + 112);
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(uint64_t))(*(void *)(v59 + 80) + 8);
  return v29(v30);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v1;
  v4[10] = *v1;
  v4[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[35]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void, uint64_t, uint64_t);
  void *v11;
  char v12;
  uint64_t v13;

  uint64_t v12 = *(unsigned char *)(v0 + 723);
  uint64_t v1 = *(void **)(v0 + 240);
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 456) = *v1;
  swift_retain();
  Constants.PaymentAccountType.asCATIDForLoc.getter(v12);
  if (v2)
  {
    uint64_t v10 = (void (*)(uint64_t, void, uint64_t, uint64_t))v11[53];
    uint64_t v9 = v11[52];
    id v8 = v11[34];
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v10(v8, 0, 1, v9);
  }
  else
  {
    ((void (*)(void, uint64_t, uint64_t, void))v11[53])(v11[34], 1, 1, v11[52]);
  }
  ((void (*)(void, uint64_t, uint64_t, void))v11[53])(v11[33], 1, 1, v11[52]);
  uint64_t v3 = (void *)swift_task_alloc();
  v11[58] = v3;
  *uint64_t v3 = v11[10];
  v3[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  uint64_t v4 = v11[41];
  uint64_t v5 = v11[34];
  uint64_t v6 = v11[33];
  return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[10] = *v1;
  v5[59] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {
    uint64_t v4 = v5[34];
    outlined destroy of SpeakableString?(v5[33]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  char v21;
  id v22;
  id v23;
  void *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char has_malloc_size;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  void *v62;
  void *v63;
  uint64_t v64;

  uint64_t v62 = *(void **)(v0 + 400);
  id v59 = *(void *)(v0 + 336);
  uint64_t v54 = *(void *)(v0 + 328);
  uint64_t v53 = *(void *)(v0 + 304);
  uint64_t v60 = *(void *)(v0 + 296);
  *(void *)(v0 + 80) = v0;
  uint64_t v56 = TemplatingResult.resultSectionsAsString.getter();
  char v58 = v1;
  *(void *)(v0 + 48) = v56;
  *(void *)(v0 + 56) = v1;
  id v61 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v61(v54, v60);
  type metadata accessor for SFRichText();
  id v2 = TemplatingResult.resultSectionsAsString.getter();
  id v55 = @nonobjc SFRichText.__allocating_init(string:)(v2, v3);
  objc_msgSend(v62, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  uint64_t v57 = @nonobjc SFRichText.__allocating_init(string:)(v56, v58);
  objc_msgSend(v62, sel_setTrailingText_);

  uint64_t v4 = v62;
  objc_msgSend(v62, sel_setSeparatorStyle_, 4);

  uint64_t v5 = v62;
  *(void *)(v0 + 208) = v62;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  swift_bridgeObjectRelease();
  v61(v59, v60);

  uint64_t v6 = objc_msgSend(*(id *)(v0 + 232), sel_nickname);
  uint64_t v63 = v6;
  if (v6)
  {
    id v47 = objc_msgSend(v6, sel_spokenPhrase);
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v7;

    id v50 = v48;
    uint64_t v51 = v49;
  }
  else
  {
    id v50 = 0;
    uint64_t v51 = 0;
  }
  *(void *)(v52 + 488) = v51;
  *(void *)(v52 + 480) = v50;
  if (v51)
  {
    *(void *)(v52 + 32) = v50;
    *(void *)(v52 + 40) = v51;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v46 = *(void *)(v52 + 256);
      uint64_t v45 = *(void **)(v52 + 240);
      type metadata accessor for SFRowCardSection();
      id v8 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v52 + 496) = v8;
      *(void *)(v52 + 184) = v8;
      *(void *)(v52 + 504) = *v45;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNickname", 0xFuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 56))(v46, 0, 1);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v52 + 512) = v10;
      *uint64_t v10 = *(void *)(v52 + 80);
      v10[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v11 = *(void *)(v52 + 320);
      uint64_t v12 = *(void *)(v52 + 256);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v11, v12);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = objc_msgSend(*(id *)(v52 + 232), sel_accountNumber);
  if (v44)
  {
    id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v41 = v14;

    uint64_t v42 = v40;
    uint64_t v43 = v41;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  *(void *)(v52 + 536) = v43;
  *(void *)(v52 + 528) = v42;
  if (v43)
  {
    *(void *)(v52 + 16) = v42;
    *(void *)(v52 + 24) = v43;
    if (String.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    id v39 = *(void *)(v52 + 248);
    id v38 = *(void **)(v52 + 240);
    type metadata accessor for SFRowCardSection();
    uint64_t v15 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v52 + 544) = v15;
    *(void *)(v52 + 168) = v15;
    *(void *)(v52 + 552) = *v38;
    swift_retain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 56))(v39, 0, 1);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v52 + 560) = v17;
    *uint64_t v17 = *(void *)(v52 + 80);
    v17[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    uint64_t v11 = *(void *)(v52 + 312);
    uint64_t v12 = *(void *)(v52 + 248);
    return SearchForAccountsCATs.labelForResponseSlot(slot:)(v11, v12);
  }
LABEL_21:
  id v37 = objc_msgSend(*(id *)(v52 + 232), sel_balance);
  if (v37)
  {
    id v35 = objc_msgSend(v37, sel_amount);

    uint64_t v36 = v35;
  }
  else
  {
    uint64_t v36 = 0;
  }
  *(void *)(v52 + 120) = v36;
  if (*(void *)(v52 + 120))
  {
    outlined destroy of SFRichText?((id *)(v52 + 120));
    id v32 = *(id *)(v52 + 232);
    type metadata accessor for SFRowCardSection();
    id v18 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v52 + 576) = v18;
    *(void *)(v52 + 152) = v18;
    id v34 = objc_msgSend(v32, sel_balance);
    *(void *)(v52 + 584) = v34;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v19 = (void *)swift_task_alloc();
    uint64_t v20 = (uint64_t)v34;
    *(void *)(v52 + 592) = v19;
    objc_class *v19 = *(void *)(v52 + 80);
    v19[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v21 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v20, v21);
  }
  outlined destroy of SFRichText?((id *)(v52 + 120));
  uint64_t v22 = objc_msgSend(*(id *)(v52 + 232), sel_secondaryBalance);
  id v31 = v22;
  if (v22)
  {
    uint64_t v29 = objc_msgSend(v22, sel_amount);

    id v30 = v29;
  }
  else
  {
    id v30 = 0;
  }
  *(void *)(v52 + 128) = v30;
  if (*(void *)(v52 + 128))
  {
    outlined destroy of SFRichText?((id *)(v52 + 128));
    uint64_t v27 = *(id *)(v52 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v23 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v52 + 648) = v23;
    *(void *)(v52 + 136) = v23;
    uint64_t v28 = objc_msgSend(v27, sel_secondaryBalance);
    *(void *)(v52 + 656) = v28;
    char v24 = (void *)swift_task_alloc();
    uint64_t v20 = (uint64_t)v28;
    *(void *)(v52 + 664) = v24;
    *char v24 = *(void *)(v52 + 80);
    v24[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v21 = 0;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v20, v21);
  }
  outlined destroy of SFRichText?((id *)(v52 + 128));
  id v26 = *(void *)(v52 + 112);
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = *(uint64_t (**)(uint64_t))(*(void *)(v52 + 80) + 8);
  return v25(v26);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v1;
  v4[10] = *v1;
  v4[65] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[32]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  void *v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  void *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  char has_malloc_size;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  uint64_t v45 = *(void **)(v0 + 496);
  uint64_t v46 = *(void *)(v0 + 488);
  id v40 = *(void *)(v0 + 480);
  uint64_t v43 = *(void *)(v0 + 320);
  uint64_t v42 = *(void *)(v0 + 304);
  uint64_t v44 = *(void *)(v0 + 296);
  *(void *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  id v39 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v45, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  char v41 = @nonobjc SFRichText.__allocating_init(string:)(v40, v46);
  objc_msgSend(v45, sel_setTrailingText_);

  uint64_t v3 = v45;
  objc_msgSend(v45, sel_setSeparatorStyle_, 4);

  uint64_t v4 = v45;
  *(void *)(v0 + 192) = v45;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);

  swift_bridgeObjectRelease();
  id v47 = objc_msgSend(*(id *)(v0 + 232), sel_accountNumber);
  if (v47)
  {
    id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v35 = v5;

    uint64_t v36 = v34;
    id v37 = v35;
  }
  else
  {
    uint64_t v36 = 0;
    id v37 = 0;
  }
  *(void *)(v38 + 536) = v37;
  *(void *)(v38 + 528) = v36;
  if (v37)
  {
    *(void *)(v38 + 16) = v36;
    *(void *)(v38 + 24) = v37;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      id v33 = *(void *)(v38 + 248);
      id v32 = *(void **)(v38 + 240);
      type metadata accessor for SFRowCardSection();
      uint64_t v6 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v38 + 544) = v6;
      *(void *)(v38 + 168) = v6;
      *(void *)(v38 + 552) = *v32;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      id v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 56))(v33, 0, 1);
      id v8 = (void *)swift_task_alloc();
      *(void *)(v38 + 560) = v8;
      *id v8 = *(void *)(v38 + 80);
      v8[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
      uint64_t v9 = *(void *)(v38 + 312);
      uint64_t v10 = *(void *)(v38 + 248);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  id v31 = objc_msgSend(*(id *)(v38 + 232), sel_balance);
  if (v31)
  {
    uint64_t v29 = objc_msgSend(v31, sel_amount);

    id v30 = v29;
  }
  else
  {
    id v30 = 0;
  }
  *(void *)(v38 + 120) = v30;
  if (*(void *)(v38 + 120))
  {
    outlined destroy of SFRichText?((id *)(v38 + 120));
    id v26 = *(id *)(v38 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v12 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v38 + 576) = v12;
    *(void *)(v38 + 152) = v12;
    uint64_t v28 = objc_msgSend(v26, sel_balance);
    *(void *)(v38 + 584) = v28;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v13 = (void *)swift_task_alloc();
    id v14 = (uint64_t)v28;
    *(void *)(v38 + 592) = v13;
    *uint64_t v13 = *(void *)(v38 + 80);
    v13[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    uint64_t v15 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v14, v15);
  }
  outlined destroy of SFRichText?((id *)(v38 + 120));
  uint64_t v16 = objc_msgSend(*(id *)(v38 + 232), sel_secondaryBalance);
  id v25 = v16;
  if (v16)
  {
    uint64_t v23 = objc_msgSend(v16, sel_amount);

    char v24 = v23;
  }
  else
  {
    char v24 = 0;
  }
  *(void *)(v38 + 128) = v24;
  if (*(void *)(v38 + 128))
  {
    outlined destroy of SFRichText?((id *)(v38 + 128));
    id v21 = *(id *)(v38 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v17 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v38 + 648) = v17;
    *(void *)(v38 + 136) = v17;
    uint64_t v22 = objc_msgSend(v21, sel_secondaryBalance);
    *(void *)(v38 + 656) = v22;
    id v18 = (void *)swift_task_alloc();
    id v14 = (uint64_t)v22;
    *(void *)(v38 + 664) = v18;
    *id v18 = *(void *)(v38 + 80);
    v18[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    uint64_t v15 = 0;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v14, v15);
  }
  outlined destroy of SFRichText?((id *)(v38 + 128));
  uint64_t v20 = *(void *)(v38 + 112);
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)(v38 + 80) + 8);
  return v19(v20);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v1;
  v4[10] = *v1;
  v4[71] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[31]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  char v8;
  id v10;
  id v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  char has_malloc_size;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  id v32 = *(void **)(v0 + 544);
  id v33 = *(void *)(v0 + 536);
  uint64_t v27 = *(void *)(v0 + 528);
  id v30 = *(void *)(v0 + 312);
  uint64_t v29 = *(void *)(v0 + 304);
  id v31 = *(void *)(v0 + 296);
  *(void *)(v0 + 80) = v0;
  type metadata accessor for SFRichText();
  uint64_t v1 = TemplatingResult.resultSectionsAsString.getter();
  id v26 = @nonobjc SFRichText.__allocating_init(string:)(v1, v2);
  objc_msgSend(v32, sel_setLeadingText_);

  swift_bridgeObjectRetain();
  uint64_t v28 = @nonobjc SFRichText.__allocating_init(string:)(v27, v33);
  objc_msgSend(v32, sel_setTrailingText_);

  uint64_t v3 = v32;
  *(void *)(v0 + 176) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);

  swift_bridgeObjectRelease();
  uint64_t v4 = objc_msgSend(*(id *)(v0 + 232), sel_balance);
  id v34 = v4;
  if (v4)
  {
    uint64_t v23 = objc_msgSend(v4, sel_amount);

    char v24 = v23;
  }
  else
  {
    char v24 = 0;
  }
  *(void *)(v25 + 120) = v24;
  if (*(void *)(v25 + 120))
  {
    outlined destroy of SFRichText?((id *)(v25 + 120));
    uint64_t v20 = *(void **)(v25 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v5 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v25 + 576) = v5;
    *(void *)(v25 + 152) = v5;
    uint64_t v22 = objc_msgSend(v20, sel_balance);
    *(void *)(v25 + 584) = v22;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v6 = (void *)swift_task_alloc();
    id v7 = (uint64_t)v22;
    *(void *)(v25 + 592) = v6;
    *uint64_t v6 = *(void *)(v25 + 80);
    v6[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v8 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v7, v8);
  }
  outlined destroy of SFRichText?((id *)(v25 + 120));
  uint64_t v10 = objc_msgSend(*(id *)(v25 + 232), sel_secondaryBalance);
  uint64_t v19 = v10;
  if (v10)
  {
    uint64_t v17 = objc_msgSend(v10, sel_amount);

    id v18 = v17;
  }
  else
  {
    id v18 = 0;
  }
  *(void *)(v25 + 128) = v18;
  if (*(void *)(v25 + 128))
  {
    outlined destroy of SFRichText?((id *)(v25 + 128));
    uint64_t v15 = *(id *)(v25 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v11 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v25 + 648) = v11;
    *(void *)(v25 + 136) = v11;
    uint64_t v16 = objc_msgSend(v15, sel_secondaryBalance);
    *(void *)(v25 + 656) = v16;
    uint64_t v12 = (void *)swift_task_alloc();
    id v7 = (uint64_t)v16;
    *(void *)(v25 + 664) = v12;
    *uint64_t v12 = *(void *)(v25 + 80);
    v12[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    id v8 = 0;
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(v7, v8);
  }
  outlined destroy of SFRichText?((id *)(v25 + 128));
  id v14 = *(void *)(v25 + 112);
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)(v25 + 80) + 8);
  return v13(v14);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  uint64_t v4 = (id)v0[75];
  uint64_t v1 = (void *)v0[72];
  uint64_t v5 = (id)v0[29];
  v0[10] = v0;
  objc_msgSend(v1, sel_setLeadingText_);

  id v7 = objc_msgSend(v5, sel_balance);
  v0[77] = v7;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 624) = v2;
  *id v2 = *(void *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  uint64_t v15 = *(void **)(v0 + 632);
  uint64_t v1 = *(void **)(v0 + 576);
  uint64_t v16 = v1;
  *(void *)(v0 + 80) = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  id v2 = v16;
  objc_msgSend(v16, sel_setSeparatorStyle_, 4);

  uint64_t v3 = v16;
  *(void *)(v0 + 160) = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();

  uint64_t v4 = objc_msgSend(*(id *)(v0 + 232), sel_secondaryBalance);
  uint64_t v17 = v4;
  if (v4)
  {
    uint64_t v12 = objc_msgSend(v4, sel_amount);

    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(v14 + 128) = v13;
  if (*(void *)(v14 + 128))
  {
    outlined destroy of SFRichText?((id *)(v14 + 128));
    uint64_t v10 = *(id *)(v14 + 232);
    type metadata accessor for SFRowCardSection();
    uint64_t v5 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v14 + 648) = v5;
    *(void *)(v14 + 136) = v5;
    uint64_t v11 = objc_msgSend(v10, sel_secondaryBalance);
    *(void *)(v14 + 656) = v11;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v14 + 664) = v6;
    *uint64_t v6 = *(void *)(v14 + 80);
    v6[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
    return SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)((uint64_t)v11, 0);
  }
  else
  {
    outlined destroy of SFRichText?((id *)(v14 + 128));
    uint64_t v9 = *(void *)(v14 + 112);
    swift_bridgeObjectRetain();
    outlined destroy of [SFCardSection]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 80) + 8);
    return v8(v9);
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  uint64_t v4 = (id)v0[84];
  uint64_t v1 = (void *)v0[81];
  uint64_t v5 = (id)v0[29];
  v0[10] = v0;
  objc_msgSend(v1, sel_setLeadingText_);

  id v7 = objc_msgSend(v5, sel_secondaryBalance);
  v0[86] = v7;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 696) = v2;
  *id v2 = *(void *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  return SearchForAccountsViewBuilder.buildBalanceText(for:)((uint64_t)v7);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t (*v4)(uint64_t);
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v6 = (id)v0[88];
  uint64_t v1 = (void *)v0[81];
  id v7 = v1;
  v0[10] = v0;
  objc_msgSend(v1, sel_setTrailingText_);

  id v2 = v7;
  objc_msgSend(v7, sel_setSeparatorStyle_, 4);

  uint64_t v3 = v7;
  v0[18] = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SFCardSection]);
  Array.append(_:)();

  id v8 = v0[14];
  swift_bridgeObjectRetain();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0[10] + 8);
  return v4(v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v4 = (id)v0[46];
  uint64_t v1 = v0[36];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v4 = (id)v0[50];
  uint64_t v1 = v0[35];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  id v8 = (id)v0[50];
  uint64_t v6 = v0[42];
  uint64_t v5 = v0[38];
  id v7 = v0[37];
  uint64_t v4 = v0[34];
  uint64_t v1 = v0[33];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v4 = (id)v0[62];
  uint64_t v1 = v0[32];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v4 = (id)v0[68];
  uint64_t v1 = v0[31];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[73];
  uint64_t v4 = (id)v0[72];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[77];
  uint64_t v4 = (id)v0[72];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[82];
  uint64_t v4 = (id)v0[81];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[86];
  uint64_t v4 = (id)v0[81];
  v0[10] = v0;

  outlined destroy of [SFCardSection]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 600) = a1;
  *(void *)(v5 + 608) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 632) = a1;
  *(void *)(v5 + 640) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 672) = a1;
  *(void *)(v5 + 680) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 704) = a1;
  *(void *)(v5 + 712) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  else
  {

    uint64_t v3 = SearchForAccountsViewBuilder.buildBalanceCardSections(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)(uint64_t a1, char a2)
{
  *(void *)(v3 + 88) = v2;
  *(unsigned char *)(v3 + 225) = a2 & 1;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 32) = v3;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 224) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(unsigned char *)(v3 + 232) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 120) = v4;
  *(void *)(v3 + 128) = *(void *)(v4 - 8);
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 40) = a1;
  *(unsigned char *)(v3 + 224) = a2 & 1;
  *(void *)(v3 + 48) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:)()
{
  id v26 = *(void **)(v0 + 80);
  *(void *)(v0 + 32) = v0;
  id v1 = v26;
  if (v26)
  {
    char v24 = *(void **)(v25 + 80);
    *(void *)(v25 + 56) = v24;
    *(void *)(v25 + 64) = objc_msgSend(v24, sel_balanceType);
    *(void *)(v25 + 72) = 1;
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    if (== infix<A>(_:_:)())
    {
      if (*(unsigned char *)(v25 + 225))
      {
        Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balance", 7uLL, 1);
        object = v4._object;
        uint64_t countAndFlagsBits = v4._countAndFlagsBits;
      }
      else
      {
        Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryBalance", 0x10uLL, 1);
        object = v5._object;
        uint64_t countAndFlagsBits = v5._countAndFlagsBits;
      }
      *(void *)(v25 + 168) = object;
      uint64_t v23 = *(void *)(v25 + 112);
      uint64_t v6 = *(void **)(v25 + 88);
      *(void *)(v25 + 16) = countAndFlagsBits;
      *(void *)(v25 + 24) = object;
      *(void *)(v25 + 176) = *v6;
      swift_retain();
      String.toSpeakableString.getter();
      uint64_t v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 56))(v23, 0, 1);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v25 + 184) = v8;
      *uint64_t v8 = *(void *)(v25 + 32);
      v8[1] = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
      uint64_t v9 = *(void *)(v25 + 152);
      uint64_t v10 = *(void *)(v25 + 112);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v9, v10);
    }
    else
    {
      uint64_t v19 = *(void *)(v25 + 104);
      id v18 = *(void **)(v25 + 88);
      char v22 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)((uint64_t)objc_msgSend(v24, sel_balanceType), 0);
      *(unsigned char *)(v25 + 232) = v22;
      *(void *)(v25 + 200) = *v18;
      swift_retain();
      uint64_t v20 = type metadata accessor for SpeakableString();
      id v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
      v21(v19, 1);
      if (v22 == 4)
      {
        ((void (*)(void, uint64_t, uint64_t, uint64_t))v21)(*(void *)(v25 + 96), 1, 1, v20);
      }
      else
      {
        uint64_t v17 = *(void *)(v25 + 96);
        Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(v22);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v21)(v17, 0, 1, v20);
      }
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v25 + 208) = v12;
      *uint64_t v12 = *(void *)(v25 + 32);
      v12[1] = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
      uint64_t v13 = *(void *)(v25 + 144);
      uint64_t v14 = *(void *)(v25 + 104);
      uint64_t v15 = *(void *)(v25 + 96);
      return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v13, v14, v15);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)(v25 + 32) + 8);
    return v16(0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  Swift::String v4 = (void *)*v1;
  v4[4] = *v1;
  v4[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[14]);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(id);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;

  id v1 = v0[20];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  Swift::String v4 = v0[15];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  swift_bridgeObjectRelease();
  uint64_t v14 = v0[20];
  Swift::String v5 = v0[17];
  uint64_t v9 = v0[16];
  uint64_t v12 = v0[15];
  uint64_t v15 = (id)v0[10];
  type metadata accessor for SFRichText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v14, v12);
  uint64_t v10 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v11 = v6;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v5, v12);
  uint64_t v16 = @nonobjc SFRichText.__allocating_init(string:)(v10, v11);
  v13(v14, v12);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(id))(v0[4] + 8);
  return v7(v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  Swift::String v5 = (void *)*v1;
  v5[4] = *v1;
  v5[27] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
  }
  else
  {
    Swift::String v4 = v5[13];
    outlined destroy of SpeakableString?(v5[12]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.buildBalanceLabel(for:isPrimary:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(id);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;

  id v1 = v0[20];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  Swift::String v4 = v0[15];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v14 = v0[20];
  Swift::String v5 = v0[17];
  uint64_t v9 = v0[16];
  uint64_t v12 = v0[15];
  uint64_t v15 = (id)v0[10];
  type metadata accessor for SFRichText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v14, v12);
  uint64_t v10 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v11 = v6;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v5, v12);
  uint64_t v16 = @nonobjc SFRichText.__allocating_init(string:)(v10, v11);
  v13(v14, v12);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(id))(v0[4] + 8);
  return v7(v16);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  id v1 = v0[14];
  Swift::String v4 = (id)v0[10];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  id v5;
  uint64_t v6;

  Swift::String v4 = v0[13];
  id v1 = v0[12];
  Swift::String v5 = (id)v0[10];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

uint64_t SearchForAccountsViewBuilder.buildBalanceText(for:)(uint64_t a1)
{
  v2[15] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildBalanceText(for:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildBalanceText(for:)()
{
  id v31 = (void *)v0[15];
  v0[8] = v0;
  type metadata accessor for NSNumberFormatter();
  id v30 = SAUIAppPunchOut.__allocating_init()();
  v0[11] = v30;
  objc_msgSend(v30, sel_setNumberStyle_, 2);
  id v1 = v31;
  if (v31)
  {
    id v26 = *(void **)(v29 + 120);
    id v27 = objc_msgSend(v26, sel_amount);

    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v28)
  {
    uint64_t v25 = *(void **)(v29 + 120);
    *(void *)(v29 + 96) = v28;
    id v2 = v25;
    if (v25)
    {
      id v21 = *(void **)(v29 + 120);
      id v22 = objc_msgSend(v21, sel_balanceType);

      id v23 = v22;
      char v24 = 0;
    }
    else
    {
      id v23 = 0;
      char v24 = 1;
    }
    *(void *)(v29 + 16) = v23;
    *(unsigned char *)(v29 + 24) = v24 & 1;
    *(void *)(v29 + 32) = 1;
    *(unsigned char *)(v29 + 40) = 0;
    if (*(unsigned char *)(v29 + 24))
    {
      if ((*(unsigned char *)(v29 + 40) & 1) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      outlined init with copy of Int?(v29 + 16, v29 + 48);
      if ((*(unsigned char *)(v29 + 40) & 1) != 0
        || (*(void *)(v29 + 104) = *(void *)(v29 + 48),
            *(void *)(v29 + 112) = *(void *)(v29 + 32),
            type metadata accessor for INBalanceType(),
            lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType(),
            char v3 = dispatch thunk of static Equatable.== infix(_:_:)(),
            (v3 & 1) == 0))
      {
LABEL_19:
        objc_msgSend(v30, sel_setNumberStyle_, 1);
        type metadata accessor for SFRichText();
        id v13 = objc_msgSend(v30, sel_stringFromNumber_, v28);
        if (v13)
        {
          uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v10 = v5;

          uint64_t v11 = v9;
          uint64_t v12 = v10;
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
        id v8 = @nonobjc SFRichText.__allocating_init(string:)(v11, v12);

        id v15 = v8;
        goto LABEL_25;
      }
    }
    type metadata accessor for SFRichText();
    id v20 = objc_msgSend(v30, sel_stringFromNumber_, v28);
    if (v20)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v4;

      uint64_t v18 = v16;
      uint64_t v19 = v17;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    id v14 = @nonobjc SFRichText.__allocating_init(string:)(v18, v19);

    id v15 = v14;
    goto LABEL_25;
  }

  id v15 = 0;
LABEL_25:
  uint64_t v6 = *(uint64_t (**)(id))(*(void *)(v29 + 64) + 8);
  return v6(v15);
}

uint64_t implicit closure #1 in SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *a2 = a1;
  return result;
}

uint64_t default argument 3 of static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)()
{
  return specialized static Array._allocateUninitialized(_:)(0);
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(uint64_t a1, char a2)
{
  *(void *)(v3 + 96) = v2;
  *(unsigned char *)(v3 + 233) = a2 & 1;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 32) = v3;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 232) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(unsigned char *)(v3 + 240) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 40) = a1;
  *(unsigned char *)(v3 + 232) = a2 & 1;
  *(void *)(v3 + 48) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)()
{
  id v26 = *(void **)(v0 + 88);
  *(void *)(v0 + 32) = v0;
  id v1 = v26;
  if (v26)
  {
    char v24 = *(void **)(v25 + 88);
    *(void *)(v25 + 56) = v24;
    *(void *)(v25 + 64) = objc_msgSend(v24, sel_balanceType);
    *(void *)(v25 + 72) = 1;
    type metadata accessor for INBalanceType();
    lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType();
    if (== infix<A>(_:_:)())
    {
      if (*(unsigned char *)(v25 + 233))
      {
        Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balance", 7uLL, 1);
        object = v4._object;
        uint64_t countAndFlagsBits = v4._countAndFlagsBits;
      }
      else
      {
        Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("secondaryBalance", 0x10uLL, 1);
        object = v5._object;
        uint64_t countAndFlagsBits = v5._countAndFlagsBits;
      }
      *(void *)(v25 + 176) = object;
      uint64_t v23 = *(void *)(v25 + 120);
      uint64_t v6 = *(void **)(v25 + 96);
      *(void *)(v25 + 16) = countAndFlagsBits;
      *(void *)(v25 + 24) = object;
      *(void *)(v25 + 184) = *v6;
      swift_retain();
      String.toSpeakableString.getter();
      uint64_t v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 56))(v23, 0, 1);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v25 + 192) = v8;
      *uint64_t v8 = *(void *)(v25 + 32);
      v8[1] = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
      uint64_t v9 = *(void *)(v25 + 160);
      uint64_t v10 = *(void *)(v25 + 120);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v9, v10);
    }
    else
    {
      uint64_t v19 = *(void *)(v25 + 112);
      uint64_t v18 = *(void **)(v25 + 96);
      char v22 = static Constants.PaymentAccountBalanceType.fromINBalanceType(_:)((uint64_t)objc_msgSend(v24, sel_balanceType), 0);
      *(unsigned char *)(v25 + 240) = v22;
      *(void *)(v25 + 208) = *v18;
      swift_retain();
      uint64_t v20 = type metadata accessor for SpeakableString();
      id v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
      v21(v19, 1);
      if (v22 == 4)
      {
        ((void (*)(void, uint64_t, uint64_t, uint64_t))v21)(*(void *)(v25 + 104), 1, 1, v20);
      }
      else
      {
        uint64_t v17 = *(void *)(v25 + 104);
        Constants.PaymentAccountBalanceType.asCATIDForLoc.getter(v22);
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v21)(v17, 0, 1, v20);
      }
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v25 + 216) = v12;
      *uint64_t v12 = *(void *)(v25 + 32);
      v12[1] = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
      uint64_t v13 = *(void *)(v25 + 152);
      uint64_t v14 = *(void *)(v25 + 112);
      uint64_t v15 = *(void *)(v25 + 104);
      return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v13, v14, v15);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)(v25 + 32) + 8);
    return v16(0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  Swift::String v4 = (void *)*v1;
  v4[4] = *v1;
  v4[25] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[15]);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(id);
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;

  id v1 = v0[21];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  Swift::String v4 = v0[16];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  swift_bridgeObjectRelease();
  uint64_t v11 = v0[21];
  uint64_t v9 = v0[18];
  uint64_t v8 = v0[17];
  uint64_t v12 = v0[16];
  uint64_t v14 = (id)v0[11];
  type metadata accessor for SAUIDecoratedText();
  uint64_t v15 = SAUIAppPunchOut.__allocating_init()();
  v0[10] = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v11, v12);
  Swift::String v5 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v10 = (id)MEMORY[0x2611B9130](v5);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v9, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setText_, v10);

  v13(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(id))(v0[4] + 8);
  return v6(v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  Swift::String v5 = (void *)*v1;
  v5[4] = *v1;
  v5[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
  }
  else
  {
    Swift::String v4 = v5[14];
    outlined destroy of SpeakableString?(v5[13]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(id);
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;

  id v1 = v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  Swift::String v4 = v0[16];
  v0[4] = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v11 = v0[21];
  uint64_t v9 = v0[18];
  uint64_t v8 = v0[17];
  uint64_t v12 = v0[16];
  uint64_t v14 = (id)v0[11];
  type metadata accessor for SAUIDecoratedText();
  uint64_t v15 = SAUIAppPunchOut.__allocating_init()();
  v0[10] = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v11, v12);
  Swift::String v5 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v10 = (id)MEMORY[0x2611B9130](v5);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v9, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setText_, v10);

  v13(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(id))(v0[4] + 8);
  return v6(v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  id v1 = v0[15];
  Swift::String v4 = (id)v0[11];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  id v5;
  uint64_t v6;

  Swift::String v4 = v0[14];
  id v1 = v0[13];
  Swift::String v5 = (id)v0[11];
  v0[4] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[4] + 8);
  return v2();
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceText(for:)(uint64_t a1)
{
  v2[16] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.buildWatchBalanceText(for:), 0);
}

uint64_t SearchForAccountsViewBuilder.buildWatchBalanceText(for:)()
{
  id v34 = (void *)v0[16];
  v0[8] = v0;
  type metadata accessor for NSNumberFormatter();
  id v33 = SAUIAppPunchOut.__allocating_init()();
  v0[11] = v33;
  objc_msgSend(v33, sel_setNumberStyle_, 2);
  id v1 = v34;
  if (v34)
  {
    uint64_t v29 = *(void **)(v32 + 128);
    id v30 = objc_msgSend(v29, sel_amount);

    id v31 = v30;
  }
  else
  {
    id v31 = 0;
  }
  if (v31)
  {
    uint64_t v28 = *(void **)(v32 + 128);
    *(void *)(v32 + 96) = v31;
    type metadata accessor for SAUIDecoratedText();
    id v27 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v32 + 104) = v27;
    id v2 = v28;
    if (v28)
    {
      uint64_t v23 = *(void **)(v32 + 128);
      id v24 = objc_msgSend(v23, sel_balanceType);

      id v25 = v24;
      char v26 = 0;
    }
    else
    {
      id v25 = 0;
      char v26 = 1;
    }
    *(void *)(v32 + 16) = v25;
    *(unsigned char *)(v32 + 24) = v26 & 1;
    *(void *)(v32 + 32) = 1;
    *(unsigned char *)(v32 + 40) = 0;
    if (*(unsigned char *)(v32 + 24))
    {
      if ((*(unsigned char *)(v32 + 40) & 1) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      outlined init with copy of Int?(v32 + 16, v32 + 48);
      if ((*(unsigned char *)(v32 + 40) & 1) != 0
        || (*(void *)(v32 + 112) = *(void *)(v32 + 48),
            *(void *)(v32 + 120) = *(void *)(v32 + 32),
            type metadata accessor for INBalanceType(),
            lazy protocol witness table accessor for type INBalanceType and conformance INBalanceType(),
            char v3 = dispatch thunk of static Equatable.== infix(_:_:)(),
            (v3 & 1) == 0))
      {
LABEL_22:
        objc_msgSend(v33, sel_setNumberStyle_, 1);
        id v15 = objc_msgSend(v33, sel_stringFromNumber_, v31);
        if (v15)
        {
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v12 = v5;

          uint64_t v13 = v11;
          uint64_t v14 = v12;
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
        }
        if (v14)
        {
          uint64_t v9 = MEMORY[0x2611B9130](v13);
          swift_bridgeObjectRelease();
          uint64_t v10 = (void *)v9;
        }
        else
        {
          uint64_t v10 = 0;
        }
        objc_msgSend(v27, sel_setText_);

LABEL_29:
        id v8 = v27;
        goto LABEL_32;
      }
    }
    id v22 = objc_msgSend(v33, sel_stringFromNumber_, v31);
    if (v22)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v4;

      uint64_t v20 = v18;
      uint64_t v21 = v19;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    if (v21)
    {
      uint64_t v16 = MEMORY[0x2611B9130](v20);
      swift_bridgeObjectRelease();
      uint64_t v17 = (void *)v16;
    }
    else
    {
      uint64_t v17 = 0;
    }
    objc_msgSend(v27, sel_setText_);

    goto LABEL_29;
  }

  id v8 = 0;
LABEL_32:
  uint64_t v6 = *(uint64_t (**)(id))(*(void *)(v32 + 64) + 8);
  return v6(v8);
}

uint64_t sub_25D90A4E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)@<X0>(void *a1@<X8>)
{
  return implicit closure #1 in SearchForAccountsViewBuilder.buildPhoneSnippets(for:app:)(*(void *)(v1 + 16), a1);
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 272) = v2;
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 80) = v3;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(unsigned char *)(v3 + 776) = 0;
  *(void *)(v3 + 240) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 248) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 256) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 280) = swift_task_alloc();
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 320) = v4;
  *(void *)(v3 + 328) = *(void *)(v4 - 8);
  *(void *)(v3 + 336) = swift_task_alloc();
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 352) = swift_task_alloc();
  *(void *)(v3 + 360) = swift_task_alloc();
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = a2;
  *(void *)(v3 + 104) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.makeTemplateAction(for:app:), 0);
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)()
{
  uint64_t v91 = (void *)v0[33];
  v0[10] = v0;
  type metadata accessor for SASTViewTemplateAction();
  id v1 = SAUIAppPunchOut.__allocating_init()();
  v0[46] = v1;
  v0[14] = v1;
  type metadata accessor for SASTItemGroup();
  id v88 = SAUIAppPunchOut.__allocating_init()();
  v0[47] = v88;
  v0[15] = v88;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
  _allocateUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v88, sel_setTemplateItems_, isa);

  type metadata accessor for SASTPropertyListItem();
  id v90 = SAUIAppPunchOut.__allocating_init()();
  v0[48] = v90;
  v0[16] = v90;
  id v2 = SAUIAppPunchOut.__allocating_init()();
  v0[49] = v2;
  v0[17] = v2;
  id v3 = SAUIAppPunchOut.__allocating_init()();
  v0[50] = v3;
  v0[18] = v3;
  id v4 = SAUIAppPunchOut.__allocating_init()();
  v0[51] = v4;
  v0[19] = v4;
  id v5 = SAUIAppPunchOut.__allocating_init()();
  v0[52] = v5;
  v0[20] = v5;
  id v6 = SAUIAppPunchOut.__allocating_init()();
  v0[53] = v6;
  v0[21] = v6;
  id v7 = objc_msgSend(v91, sel_organizationName);
  uint64_t v92 = v7;
  if (v7)
  {
    id v82 = objc_msgSend(v7, sel_spokenPhrase);
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v84 = v8;

    uint64_t v85 = v83;
    uint64_t v86 = v84;
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v86 = 0;
  }
  if (v86)
  {
    *(void *)(v87 + 64) = v85;
    *(void *)(v87 + 72) = v86;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      type metadata accessor for SAUIDecoratedText();
      id v81 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v87 + 256) = v81;
      swift_bridgeObjectRetain();
      id v78 = (id)MEMORY[0x2611B9130](v85, v86);
      swift_bridgeObjectRelease();
      objc_msgSend(v81, sel_setText_, v78);

      _allocateUninitializedArray<A>(_:)();
      id v79 = v9;
      id v10 = v81;
      *id v79 = v81;
      _finalizeUninitializedArray<A>(_:)();
      Class v80 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v90, sel_setDecoratedValues_, v80);
    }
    swift_bridgeObjectRelease();
  }
  char v77 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(*(id *)(v87 + 264), sel_accountType));
  *(unsigned char *)(v87 + 779) = v77;
  if (v77 != 9)
  {
    *(unsigned char *)(v87 + 776) = v77;
    *(unsigned char *)(v87 + 777) = v77;
    *(unsigned char *)(v87 + 778) = 0;
    lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v76 = *(void *)(v87 + 312);
      uint64_t v75 = *(void **)(v87 + 272);
      *(void *)(v87 + 432) = type metadata accessor for SAUIDecoratedText();
      id v11 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v87 + 440) = v11;
      *(void *)(v87 + 240) = v11;
      *(void *)(v87 + 448) = *v75;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v12 = type metadata accessor for SpeakableString();
      *(void *)(v87 + 456) = v12;
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v13 + 56);
      *(void *)(v87 + 464) = v14;
      *(void *)(v87 + 472) = (v13 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v14(v76, 0, 1);
      id v15 = (void *)swift_task_alloc();
      *(void *)(v87 + 480) = v15;
      *id v15 = *(void *)(v87 + 80);
      v15[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      uint64_t v16 = *(void *)(v87 + 360);
      uint64_t v17 = *(void *)(v87 + 312);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v16, v17);
    }
  }
  id v74 = objc_msgSend(*(id *)(v87 + 264), sel_nickname);
  if (v74)
  {
    id v69 = objc_msgSend(v74, sel_spokenPhrase);
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v19;

    uint64_t v72 = v70;
    uint64_t v73 = v71;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
  }
  *(void *)(v87 + 544) = v73;
  *(void *)(v87 + 536) = v72;
  if (v73)
  {
    *(void *)(v87 + 32) = v72;
    *(void *)(v87 + 40) = v73;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v68 = *(void *)(v87 + 288);
      uint64_t v67 = *(void **)(v87 + 272);
      *(void *)(v87 + 552) = type metadata accessor for SAUIDecoratedText();
      id v20 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v87 + 560) = v20;
      *(void *)(v87 + 224) = v20;
      *(void *)(v87 + 568) = *v67;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v21 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 56))(v68, 0, 1);
      id v22 = (void *)swift_task_alloc();
      *(void *)(v87 + 576) = v22;
      void *v22 = *(void *)(v87 + 80);
      v22[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      uint64_t v16 = *(void *)(v87 + 344);
      uint64_t v17 = *(void *)(v87 + 288);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v16, v17);
    }
    swift_bridgeObjectRelease();
  }
  id v66 = objc_msgSend(*(id *)(v87 + 264), sel_accountNumber);
  if (v66)
  {
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v63 = v23;

    uint64_t v64 = v62;
    uint64_t v65 = v63;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  *(void *)(v87 + 600) = v65;
  *(void *)(v87 + 592) = v64;
  if (v65)
  {
    *(void *)(v87 + 16) = v64;
    *(void *)(v87 + 24) = v65;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      uint64_t v61 = *(void *)(v87 + 280);
      uint64_t v60 = *(void **)(v87 + 272);
      *(void *)(v87 + 608) = type metadata accessor for SAUIDecoratedText();
      id v24 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v87 + 616) = v24;
      *(void *)(v87 + 208) = v24;
      *(void *)(v87 + 624) = *v60;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v25 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 56))(v61, 0, 1);
      char v26 = (void *)swift_task_alloc();
      *(void *)(v87 + 632) = v26;
      void *v26 = *(void *)(v87 + 80);
      v26[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      uint64_t v16 = *(void *)(v87 + 336);
      uint64_t v17 = *(void *)(v87 + 280);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v16, v17);
    }
    swift_bridgeObjectRelease();
  }
  id v59 = objc_msgSend(*(id *)(v87 + 264), sel_balance);
  if (v59)
  {
    id v57 = objc_msgSend(v59, sel_amount);

    id v58 = v57;
  }
  else
  {
    id v58 = 0;
  }
  *(void *)(v87 + 176) = v58;
  BOOL v56 = *(void *)(v87 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v87 + 176));
  if (v56)
  {
    id v55 = objc_msgSend(*(id *)(v87 + 264), sel_balance);
    *(void *)(v87 + 648) = v55;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    id v27 = (void *)swift_task_alloc();
    uint64_t v28 = (uint64_t)v55;
    *(void *)(v87 + 656) = v27;
    void *v27 = *(void *)(v87 + 80);
    v27[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    char v29 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v28, v29);
  }
  id v30 = objc_msgSend(*(id *)(v87 + 264), sel_secondaryBalance);
  id v53 = v30;
  if (v30)
  {
    id v51 = objc_msgSend(v30, sel_amount);

    id v52 = v51;
  }
  else
  {
    id v52 = 0;
  }
  *(void *)(v87 + 184) = v52;
  BOOL v50 = *(void *)(v87 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v87 + 184));
  if (v50)
  {
    id v49 = objc_msgSend(*(id *)(v87 + 264), sel_secondaryBalance);
    *(void *)(v87 + 712) = v49;
    id v31 = (void *)swift_task_alloc();
    uint64_t v28 = (uint64_t)v49;
    *(void *)(v87 + 720) = v31;
    void *v31 = *(void *)(v87 + 80);
    v31[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    char v29 = 0;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v28, v29);
  }
  id v42 = *(id *)(v87 + 424);
  id v43 = *(id *)(v87 + 416);
  id v44 = *(id *)(v87 + 408);
  id v45 = *(id *)(v87 + 400);
  id v46 = *(id *)(v87 + 392);
  id v47 = *(id *)(v87 + 384);
  id v48 = *(id *)(v87 + 376);
  id v41 = *(id *)(v87 + 368);
  id v32 = v47;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v47, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v33 = v46;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v46, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v34 = v45;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v45, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v35 = v44;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v44, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v36 = v43;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v43, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v37 = v42;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v42, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v38 = v48;
  objc_msgSend(v41, sel_setItemGroupView_, v48);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v39 = *(uint64_t (**)(uint64_t))(*(void *)(v87 + 80) + 8);
  uint64_t v40 = *(void *)(v87 + 368);
  return v39(v40);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v1;
  v4[10] = *v1;
  v4[61] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[39]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;

  uint64_t v16 = *(void **)(v0 + 440);
  uint64_t v19 = *(unsigned char *)(v0 + 779);
  id v15 = *(void *)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v18 = *(void **)(v0 + 272);
  *(void *)(v0 + 80) = v0;
  id v1 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v17 = (void *)MEMORY[0x2611B9130](v1);
  id v2 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 496) = v2;
  *(void *)(v0 + 504) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v15, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setText_, v17);

  *(void *)(v0 + 512) = *v18;
  swift_retain();
  Constants.PaymentAccountType.asCATIDForLoc.getter(v19);
  if (v3)
  {
    id v11 = (void (*)(uint64_t, void, uint64_t, uint64_t))v12[58];
    id v10 = v12[57];
    uint64_t v9 = v12[38];
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v11(v9, 0, 1, v10);
  }
  else
  {
    ((void (*)(void, uint64_t, uint64_t, void))v12[58])(v12[38], 1, 1, v12[57]);
  }
  ((void (*)(void, uint64_t, uint64_t, void))v12[58])(v12[37], 1, 1, v12[57]);
  id v4 = (void *)swift_task_alloc();
  v12[65] = v4;
  *id v4 = v12[10];
  v4[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  id v5 = v12[44];
  id v6 = v12[38];
  id v7 = v12[37];
  return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  id v5 = (void *)*v1;
  v5[10] = *v1;
  v5[66] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {
    id v4 = v5[38];
    outlined destroy of SpeakableString?(v5[37]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  BOOL v40;
  id v41;
  id v42;
  id v43;
  char has_malloc_size;
  id v45;
  BOOL v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  Class isa;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;

  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
  uint64_t v75 = *(void **)(v0 + 440);
  uint64_t v71 = *(void **)(v0 + 392);
  id v66 = *(void *)(v0 + 352);
  uint64_t v67 = *(void *)(v0 + 320);
  *(void *)(v0 + 80) = v0;
  uint64_t v68 = TemplatingResult.resultSectionsAsString.getter();
  id v74 = v1;
  *(void *)(v0 + 48) = v68;
  *(void *)(v0 + 56) = v1;
  v65(v66, v67);
  uint64_t v73 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v0 + 248) = v73;
  swift_bridgeObjectRetain();
  id v69 = (void *)MEMORY[0x2611B9130](v68, v74);
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_setText_, v69);

  id v2 = v75;
  objc_msgSend(v71, sel_setDecoratedTitle_, v75);

  _allocateUninitializedArray<A>(_:)();
  uint64_t v70 = v3;
  id v4 = v73;
  *uint64_t v70 = v73;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(*(id *)(v0 + 264), sel_nickname);
  uint64_t v76 = v5;
  if (v5)
  {
    id v59 = objc_msgSend(v5, sel_spokenPhrase);
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v6;

    uint64_t v62 = v60;
    uint64_t v63 = v61;
  }
  else
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  *(void *)(v64 + 544) = v63;
  *(void *)(v64 + 536) = v62;
  if (v63)
  {
    *(void *)(v64 + 32) = v62;
    *(void *)(v64 + 40) = v63;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      id v58 = *(void *)(v64 + 288);
      id v57 = *(void **)(v64 + 272);
      *(void *)(v64 + 552) = type metadata accessor for SAUIDecoratedText();
      id v7 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v64 + 560) = v7;
      *(void *)(v64 + 224) = v7;
      *(void *)(v64 + 568) = *v57;
      swift_retain();
      SearchForAccountsSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v8 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 56))(v58, 0, 1);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v64 + 576) = v9;
      *uint64_t v9 = *(void *)(v64 + 80);
      v9[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      id v10 = *(void *)(v64 + 344);
      id v11 = *(void *)(v64 + 288);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v10, v11);
    }
    swift_bridgeObjectRelease();
  }
  BOOL v56 = objc_msgSend(*(id *)(v64 + 264), sel_accountNumber);
  if (v56)
  {
    id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v53 = v13;

    uint64_t v54 = v52;
    id v55 = v53;
  }
  else
  {
    uint64_t v54 = 0;
    id v55 = 0;
  }
  *(void *)(v64 + 600) = v55;
  *(void *)(v64 + 592) = v54;
  if (v55)
  {
    *(void *)(v64 + 16) = v54;
    *(void *)(v64 + 24) = v55;
    if (String.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    id v51 = *(void *)(v64 + 280);
    BOOL v50 = *(void **)(v64 + 272);
    *(void *)(v64 + 608) = type metadata accessor for SAUIDecoratedText();
    uint64_t v14 = SAUIAppPunchOut.__allocating_init()();
    *(void *)(v64 + 616) = v14;
    *(void *)(v64 + 208) = v14;
    *(void *)(v64 + 624) = *v50;
    swift_retain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    id v15 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 56))(v51, 0, 1);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v64 + 632) = v16;
    *uint64_t v16 = *(void *)(v64 + 80);
    v16[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    id v10 = *(void *)(v64 + 336);
    id v11 = *(void *)(v64 + 280);
    return SearchForAccountsCATs.labelForResponseSlot(slot:)(v10, v11);
  }
LABEL_21:
  id v49 = objc_msgSend(*(id *)(v64 + 264), sel_balance);
  if (v49)
  {
    id v47 = objc_msgSend(v49, sel_amount);

    id v48 = v47;
  }
  else
  {
    id v48 = 0;
  }
  *(void *)(v64 + 176) = v48;
  id v46 = *(void *)(v64 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v64 + 176));
  if (v46)
  {
    id v45 = objc_msgSend(*(id *)(v64 + 264), sel_balance);
    *(void *)(v64 + 648) = v45;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v17 = (void *)swift_task_alloc();
    uint64_t v18 = (uint64_t)v45;
    *(void *)(v64 + 656) = v17;
    *uint64_t v17 = *(void *)(v64 + 80);
    v17[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v19 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v18, v19);
  }
  id v20 = objc_msgSend(*(id *)(v64 + 264), sel_secondaryBalance);
  id v43 = v20;
  if (v20)
  {
    id v41 = objc_msgSend(v20, sel_amount);

    id v42 = v41;
  }
  else
  {
    id v42 = 0;
  }
  *(void *)(v64 + 184) = v42;
  uint64_t v40 = *(void *)(v64 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v64 + 184));
  if (v40)
  {
    id v39 = objc_msgSend(*(id *)(v64 + 264), sel_secondaryBalance);
    *(void *)(v64 + 712) = v39;
    uint64_t v21 = (void *)swift_task_alloc();
    uint64_t v18 = (uint64_t)v39;
    *(void *)(v64 + 720) = v21;
    *uint64_t v21 = *(void *)(v64 + 80);
    v21[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v19 = 0;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v18, v19);
  }
  id v32 = *(id *)(v64 + 424);
  id v33 = *(id *)(v64 + 416);
  id v34 = *(id *)(v64 + 408);
  id v35 = *(id *)(v64 + 400);
  id v36 = *(id *)(v64 + 392);
  id v37 = *(id *)(v64 + 384);
  id v38 = *(id *)(v64 + 376);
  id v31 = *(id *)(v64 + 368);
  id v22 = v37;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v37, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v23 = v36;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v36, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v24 = v35;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v35, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v25 = v34;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v34, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  char v26 = v33;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v33, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v27 = v32;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v32, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v28 = v38;
  objc_msgSend(v31, sel_setItemGroupView_, v38);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v29 = *(uint64_t (**)(uint64_t))(*(void *)(v64 + 80) + 8);
  id v30 = *(void *)(v64 + 368);
  return v29(v30);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v1;
  v4[10] = *v1;
  v4[73] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[36]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  BOOL v35;
  id v36;
  id v37;
  id v38;
  char has_malloc_size;
  id v40;
  BOOL v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  Class isa;
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  uint64_t v62 = *(void **)(v0 + 560);
  uint64_t v63 = *(void *)(v0 + 544);
  BOOL v56 = *(void *)(v0 + 536);
  id v59 = *(void **)(v0 + 400);
  uint64_t v54 = *(void *)(v0 + 344);
  id v52 = *(void *)(v0 + 328);
  id v53 = *(void *)(v0 + 320);
  *(void *)(v0 + 80) = v0;
  id v1 = TemplatingResult.resultSectionsAsString.getter();
  id v55 = (void *)MEMORY[0x2611B9130](v1);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v53);
  swift_bridgeObjectRelease();
  objc_msgSend(v62, (SEL)0x1F6A7A518, v55);

  uint64_t v61 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v0 + 232) = v61;
  swift_bridgeObjectRetain();
  id v57 = (void *)MEMORY[0x2611B9130](v56, v63);
  swift_bridgeObjectRelease();
  objc_msgSend(v61, (SEL)0x1F6A7A518, v57);

  id v2 = v62;
  objc_msgSend(v59, sel_setDecoratedTitle_, v62);

  _allocateUninitializedArray<A>(_:)();
  id v58 = v3;
  id v4 = v61;
  *id v58 = v61;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v59, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  uint64_t v64 = objc_msgSend(*(id *)(v0 + 264), sel_accountNumber);
  if (v64)
  {
    id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v48 = v5;

    id v49 = v47;
    BOOL v50 = v48;
  }
  else
  {
    id v49 = 0;
    BOOL v50 = 0;
  }
  *(void *)(v51 + 600) = v50;
  *(void *)(v51 + 592) = v49;
  if (v50)
  {
    *(void *)(v51 + 16) = v49;
    *(void *)(v51 + 24) = v50;
    if ((String.isEmpty.getter() & 1) == 0)
    {
      id v46 = *(void *)(v51 + 280);
      id v45 = *(void **)(v51 + 272);
      *(void *)(v51 + 608) = type metadata accessor for SAUIDecoratedText();
      id v6 = SAUIAppPunchOut.__allocating_init()();
      *(void *)(v51 + 616) = v6;
      *(void *)(v51 + 208) = v6;
      *(void *)(v51 + 624) = *v45;
      swift_retain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountNumber", 0xDuLL, 1);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      id v7 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 56))(v46, 0, 1);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v51 + 632) = v8;
      *uint64_t v8 = *(void *)(v51 + 80);
      v8[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
      uint64_t v9 = *(void *)(v51 + 336);
      id v10 = *(void *)(v51 + 280);
      return SearchForAccountsCATs.labelForResponseSlot(slot:)(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  id v44 = objc_msgSend(*(id *)(v51 + 264), sel_balance);
  if (v44)
  {
    id v42 = objc_msgSend(v44, sel_amount);

    id v43 = v42;
  }
  else
  {
    id v43 = 0;
  }
  *(void *)(v51 + 176) = v43;
  id v41 = *(void *)(v51 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v51 + 176));
  if (v41)
  {
    uint64_t v40 = objc_msgSend(*(id *)(v51 + 264), sel_balance);
    *(void *)(v51 + 648) = v40;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    uint64_t v12 = (void *)swift_task_alloc();
    uint64_t v13 = (uint64_t)v40;
    *(void *)(v51 + 656) = v12;
    *uint64_t v12 = *(void *)(v51 + 80);
    v12[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v14 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v13, v14);
  }
  id v15 = objc_msgSend(*(id *)(v51 + 264), sel_secondaryBalance);
  id v38 = v15;
  if (v15)
  {
    id v36 = objc_msgSend(v15, sel_amount);

    id v37 = v36;
  }
  else
  {
    id v37 = 0;
  }
  *(void *)(v51 + 184) = v37;
  id v35 = *(void *)(v51 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v51 + 184));
  if (v35)
  {
    id v34 = objc_msgSend(*(id *)(v51 + 264), sel_secondaryBalance);
    *(void *)(v51 + 712) = v34;
    uint64_t v16 = (void *)swift_task_alloc();
    uint64_t v13 = (uint64_t)v34;
    *(void *)(v51 + 720) = v16;
    *uint64_t v16 = *(void *)(v51 + 80);
    v16[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v14 = 0;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v13, v14);
  }
  id v27 = *(id *)(v51 + 424);
  uint64_t v28 = *(id *)(v51 + 416);
  char v29 = *(id *)(v51 + 408);
  id v30 = *(id *)(v51 + 400);
  id v31 = *(id *)(v51 + 392);
  id v32 = *(id *)(v51 + 384);
  id v33 = *(id *)(v51 + 376);
  char v26 = *(id *)(v51 + 368);
  uint64_t v17 = v32;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v32, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v18 = v31;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v31, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v19 = v30;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v30, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v20 = v29;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v29, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v21 = v28;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v28, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v22 = v27;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v27, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v23 = v33;
  objc_msgSend(v26, sel_setItemGroupView_, v33);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v24 = *(uint64_t (**)(uint64_t))(*(void *)(v51 + 80) + 8);
  uint64_t v25 = *(void *)(v51 + 368);
  return v24(v25);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v1;
  v4[10] = *v1;
  v4[80] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[35]);
    swift_release();
    id v2 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  char v8;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  BOOL v30;
  id v31;
  id v32;
  id v33;
  char has_malloc_size;
  id v35;
  BOOL v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  Class isa;
  id v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;

  BOOL v50 = *(void **)(v0 + 616);
  id v51 = *(void *)(v0 + 600);
  id v44 = *(void *)(v0 + 592);
  id v47 = *(void **)(v0 + 408);
  id v42 = *(void *)(v0 + 336);
  uint64_t v40 = *(void *)(v0 + 328);
  id v41 = *(void *)(v0 + 320);
  *(void *)(v0 + 80) = v0;
  id v1 = TemplatingResult.resultSectionsAsString.getter();
  id v43 = (void *)MEMORY[0x2611B9130](v1);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v41);
  swift_bridgeObjectRelease();
  objc_msgSend(v50, (SEL)0x1F6A7A518, v43);

  id v49 = SAUIAppPunchOut.__allocating_init()();
  *(void *)(v0 + 216) = v49;
  swift_bridgeObjectRetain();
  id v45 = (void *)MEMORY[0x2611B9130](v44, v51);
  swift_bridgeObjectRelease();
  objc_msgSend(v49, (SEL)0x1F6A7A518, v45);

  id v2 = v50;
  objc_msgSend(v47, sel_setDecoratedTitle_, v50);

  _allocateUninitializedArray<A>(_:)();
  id v46 = v3;
  id v4 = v49;
  *id v46 = v49;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v47, sel_setDecoratedValues_, isa);

  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(*(id *)(v0 + 264), sel_balance);
  id v52 = v5;
  if (v5)
  {
    id v37 = objc_msgSend(v5, sel_amount);

    id v38 = v37;
  }
  else
  {
    id v38 = 0;
  }
  *(void *)(v39 + 176) = v38;
  id v36 = *(void *)(v39 + 176) != 0;
  outlined destroy of SFRichText?((id *)(v39 + 176));
  if (v36)
  {
    id v35 = objc_msgSend(*(id *)(v39 + 264), sel_balance);
    *(void *)(v39 + 648) = v35;
    has_malloc_uint32_t size = _swift_stdlib_has_malloc_size();
    id v6 = (void *)swift_task_alloc();
    id v7 = (uint64_t)v35;
    *(void *)(v39 + 656) = v6;
    *id v6 = *(void *)(v39 + 80);
    v6[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v8 = has_malloc_size & 1;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v7, v8);
  }
  id v10 = objc_msgSend(*(id *)(v39 + 264), sel_secondaryBalance);
  id v33 = v10;
  if (v10)
  {
    id v31 = objc_msgSend(v10, sel_amount);

    id v32 = v31;
  }
  else
  {
    id v32 = 0;
  }
  *(void *)(v39 + 184) = v32;
  id v30 = *(void *)(v39 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v39 + 184));
  if (v30)
  {
    char v29 = objc_msgSend(*(id *)(v39 + 264), sel_secondaryBalance);
    *(void *)(v39 + 712) = v29;
    id v11 = (void *)swift_task_alloc();
    id v7 = (uint64_t)v29;
    *(void *)(v39 + 720) = v11;
    *id v11 = *(void *)(v39 + 80);
    v11[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    uint64_t v8 = 0;
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)(v7, v8);
  }
  id v22 = *(id *)(v39 + 424);
  uint64_t v23 = *(id *)(v39 + 416);
  id v24 = *(id *)(v39 + 408);
  uint64_t v25 = *(id *)(v39 + 400);
  char v26 = *(id *)(v39 + 392);
  id v27 = *(id *)(v39 + 384);
  uint64_t v28 = *(id *)(v39 + 376);
  uint64_t v21 = *(id *)(v39 + 368);
  uint64_t v12 = v27;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v27, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v13 = v26;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v26, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v14 = v25;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v25, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v15 = v24;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v24, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v16 = v23;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v23, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v17 = v22;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v18 = v28;
  objc_msgSend(v21, sel_setItemGroupView_, v28);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)(v39 + 80) + 8);
  id v20 = *(void *)(v39 + 368);
  return v19(v20);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  id v4 = (id)v0[83];
  id v1 = (void *)v0[52];
  id v5 = (id)v0[33];
  v0[10] = v0;
  objc_msgSend(v1, sel_setDecoratedTitle_);

  id v7 = objc_msgSend(v5, sel_balance);
  v0[85] = v7;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 688) = v2;
  *id v2 = *(void *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  return SearchForAccountsViewBuilder.buildWatchBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  BOOL v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  Class isa;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  id v1 = *(void *)(v0 + 696);
  *(void *)(v0 + 80) = v0;
  if (v1)
  {
    id v32 = *(void **)(v33 + 696);
    id v30 = *(void **)(v33 + 416);
    *(void *)(v33 + 200) = v32;
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    char v29 = v2;
    id v3 = v32;
    *char v29 = v32;
    _finalizeUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setDecoratedValues_, isa);
  }
  id v4 = objc_msgSend(*(id *)(v33 + 264), sel_secondaryBalance);
  uint64_t v28 = v4;
  if (v4)
  {
    char v26 = objc_msgSend(v4, sel_amount);

    id v27 = v26;
  }
  else
  {
    id v27 = 0;
  }
  *(void *)(v33 + 184) = v27;
  uint64_t v25 = *(void *)(v33 + 184) != 0;
  outlined destroy of SFRichText?((id *)(v33 + 184));
  if (v25)
  {
    id v24 = objc_msgSend(*(id *)(v33 + 264), sel_secondaryBalance);
    *(void *)(v33 + 712) = v24;
    id v5 = (void *)swift_task_alloc();
    *(void *)(v33 + 720) = v5;
    void *v5 = *(void *)(v33 + 80);
    v5[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
    return SearchForAccountsViewBuilder.buildWatchBalanceLabel(for:isPrimary:)((uint64_t)v24, 0);
  }
  else
  {
    uint64_t v17 = *(id *)(v33 + 424);
    uint64_t v18 = *(id *)(v33 + 416);
    uint64_t v19 = *(id *)(v33 + 408);
    id v20 = *(id *)(v33 + 400);
    uint64_t v21 = *(id *)(v33 + 392);
    id v22 = *(id *)(v33 + 384);
    uint64_t v23 = *(id *)(v33 + 376);
    uint64_t v16 = *(id *)(v33 + 368);
    id v7 = v22;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v22, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    uint64_t v8 = v21;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v21, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    uint64_t v9 = v20;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v20, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    id v10 = v19;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v19, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    id v11 = v18;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v18, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    uint64_t v12 = v17;
    SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v17, (uint64_t)&protocol witness table for SASTPropertyListItem);
    swift_unknownObjectRelease();
    uint64_t v13 = v23;
    objc_msgSend(v16, sel_setItemGroupView_, v23);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)(v33 + 80) + 8);
    id v15 = *(void *)(v33 + 368);
    return v14(v15);
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  id v4 = (id)v0[91];
  id v1 = (void *)v0[53];
  id v5 = (id)v0[33];
  v0[10] = v0;
  objc_msgSend(v1, sel_setDecoratedTitle_);

  id v7 = objc_msgSend(v5, sel_secondaryBalance);
  v0[93] = v7;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v6 + 752) = v2;
  *id v2 = *(void *)(v6 + 80);
  v2[1] = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  return SearchForAccountsViewBuilder.buildWatchBalanceText(for:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  Class isa;
  void *v25;
  void *v26;
  uint64_t v27;

  id v1 = *(void *)(v0 + 760);
  *(void *)(v0 + 80) = v0;
  if (v1)
  {
    uint64_t v25 = (void *)v26[95];
    uint64_t v23 = (void *)v26[53];
    v26[24] = v25;
    type metadata accessor for SAUIDecoratedText();
    _allocateUninitializedArray<A>(_:)();
    id v22 = v2;
    id v3 = v25;
    void *v22 = v25;
    _finalizeUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_setDecoratedValues_, isa);
  }
  id v15 = (id)v26[53];
  uint64_t v16 = (id)v26[52];
  uint64_t v17 = (id)v26[51];
  uint64_t v18 = (id)v26[50];
  uint64_t v19 = (id)v26[49];
  id v20 = (id)v26[48];
  uint64_t v21 = (id)v26[47];
  uint64_t v14 = (id)v26[46];
  id v4 = v20;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v20, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v5 = v19;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v19, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v6 = v18;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v18, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v7 = v17;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v17, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v8 = v16;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v16, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  uint64_t v9 = v15;
  SASTItemGroup.addToTemplateIfApplicable(_:)((uint64_t)v15, (uint64_t)&protocol witness table for SASTPropertyListItem);
  swift_unknownObjectRelease();
  id v10 = v21;
  objc_msgSend(v14, sel_setItemGroupView_, v21);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = *(uint64_t (**)(uint64_t))(v26[10] + 8);
  uint64_t v12 = v26[46];
  return v11(v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  id v4 = (id)v0[55];
  id v5 = (id)v0[53];
  id v6 = (id)v0[52];
  id v7 = (id)v0[51];
  uint64_t v8 = (id)v0[50];
  uint64_t v9 = (id)v0[49];
  id v10 = (id)v0[48];
  id v11 = (id)v0[47];
  uint64_t v12 = (id)v0[46];
  id v1 = v0[39];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  id v5 = (id)v0[55];
  id v6 = (id)v0[53];
  id v7 = (id)v0[52];
  uint64_t v8 = (id)v0[51];
  uint64_t v9 = (id)v0[50];
  id v10 = (id)v0[49];
  id v11 = (id)v0[48];
  uint64_t v12 = (id)v0[47];
  uint64_t v13 = (id)v0[46];
  id v4 = v0[38];
  id v1 = v0[37];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  id v4 = (id)v0[70];
  id v5 = (id)v0[53];
  id v6 = (id)v0[52];
  id v7 = (id)v0[51];
  uint64_t v8 = (id)v0[50];
  uint64_t v9 = (id)v0[49];
  id v10 = (id)v0[48];
  id v11 = (id)v0[47];
  uint64_t v12 = (id)v0[46];
  id v1 = v0[36];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  id v4 = (id)v0[77];
  id v5 = (id)v0[53];
  id v6 = (id)v0[52];
  id v7 = (id)v0[51];
  uint64_t v8 = (id)v0[50];
  uint64_t v9 = (id)v0[49];
  id v10 = (id)v0[48];
  id v11 = (id)v0[47];
  uint64_t v12 = (id)v0[46];
  id v1 = v0[35];
  v0[10] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  id v1 = (void *)v0[81];
  id v4 = (id)v0[53];
  id v5 = (id)v0[52];
  id v6 = (id)v0[51];
  id v7 = (id)v0[50];
  uint64_t v8 = (id)v0[49];
  uint64_t v9 = (id)v0[48];
  id v10 = (id)v0[47];
  id v11 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  id v1 = (void *)v0[85];
  id v4 = (id)v0[53];
  id v5 = (id)v0[52];
  id v6 = (id)v0[51];
  id v7 = (id)v0[50];
  uint64_t v8 = (id)v0[49];
  uint64_t v9 = (id)v0[48];
  id v10 = (id)v0[47];
  id v11 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  id v1 = (void *)v0[89];
  id v4 = (id)v0[53];
  id v5 = (id)v0[52];
  id v6 = (id)v0[51];
  id v7 = (id)v0[50];
  uint64_t v8 = (id)v0[49];
  uint64_t v9 = (id)v0[48];
  id v10 = (id)v0[47];
  id v11 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  id v1 = (void *)v0[93];
  id v4 = (id)v0[53];
  id v5 = (id)v0[52];
  id v6 = (id)v0[51];
  id v7 = (id)v0[50];
  uint64_t v8 = (id)v0[49];
  uint64_t v9 = (id)v0[48];
  id v10 = (id)v0[47];
  id v11 = (id)v0[46];
  v0[10] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[10] + 8);
  return v2();
}

uint64_t SearchForAccountsViewBuilder.makeTemplateAction(for:app:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 664) = a1;
  *(void *)(v5 + 672) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {

    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 696) = a1;
  *(void *)(v5 + 704) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {

    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 728) = a1;
  *(void *)(v5 + 736) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {

    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = *v2;
  *(void *)(v5 + 760) = a1;
  *(void *)(v5 + 768) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  else
  {

    id v3 = SearchForAccountsViewBuilder.makeTemplateAction(for:app:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

void implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v6 = objc_msgSend(a1, sel_templateItems);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v2 = v4;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  *a2 = v2;
}

uint64_t SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 136) = v2;
  *(void *)(v3 + 128) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 48) = v3;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 232) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TemplatingResult();
  *(void *)(v3 + 160) = v4;
  *(void *)(v3 + 168) = *(void *)(v4 - 8);
  *(void *)(v3 + 176) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v3 + 184) = v5;
  *(void *)(v3 + 192) = *(void *)(v5 - 8);
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = a2;
  *(void *)(v3 + 72) = v2;
  return MEMORY[0x270FA2498](SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:), 0);
}

uint64_t SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:)()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v37 = *(void *)(v0 + 184);
  *(void *)(v0 + 48) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v1, v2, v37);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 80) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v38 = *(unsigned int *)(v0 + 236);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v41 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v40, v39))
  {
    id v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = createStorage<A>(capacity:type:)(0);
    *(void *)(v35 + 88) = v31;
    *(void *)(v35 + 96) = v32;
    *(void *)(v35 + 104) = v33;
    serialize(_:at:)(0, (unsigned char **)(v35 + 88));
    serialize(_:at:)(0, (unsigned char **)(v35 + 88));
    *(void *)(v35 + 112) = v41;
    id v34 = (void *)swift_task_alloc();
    v34[2] = v35 + 88;
    v34[3] = v35 + 96;
    v34[4] = v35 + 104;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25D85A000, v40, v39, "#SearchForAccountsHandleIntentStrategy fillWatchLabelForAccountIfNeeded", v31, v38);
    destroyStorage<A>(_:count:)(v32, 0, v30);
    destroyStorage<A>(_:count:)(v33, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v31, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v35 + 200);
  uint64_t v27 = *(void *)(v35 + 184);
  uint64_t v28 = *(void **)(v35 + 120);
  uint64_t v25 = *(void *)(v35 + 192);

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  char v29 = static Constants.PaymentAccountType.fromINAccountType(_:)((uint64_t)objc_msgSend(v28, sel_accountType));
  if (v29 == 9
    || (*(unsigned char *)(v35 + 232) = v29,
        *(unsigned char *)(v35 + 233) = v29,
        *(unsigned char *)(v35 + 234) = 0,
        lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
  {
    id v21 = objc_msgSend(*(id *)(v35 + 120), sel_accountNumber);
    if (v21)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v12;

      uint64_t v19 = v17;
      uint64_t v20 = v18;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    if (v20)
    {
      *(void *)(v35 + 16) = v19;
      *(void *)(v35 + 24) = v20;
      if ((String.isEmpty.getter() & 1) == 0)
      {
        id v16 = **(id **)(v35 + 128);
        id v13 = v16;
        swift_bridgeObjectRetain();
        id v15 = (id)MEMORY[0x2611B9130](v19, v20);
        swift_bridgeObjectRelease();
        objc_msgSend(v16, sel_setText_, v15);
      }
      swift_bridgeObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)(v35 + 48) + 8);
    return v14();
  }
  else
  {
    *(void *)(v35 + 208) = **(void **)(v35 + 136);
    swift_retain();
    Constants.PaymentAccountType.asCATIDForLoc.getter(v29);
    if (v3)
    {
      uint64_t v24 = *(void *)(v35 + 152);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v4 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 56))(v24, 0, 1);
    }
    else
    {
      uint64_t v22 = *(void *)(v35 + 152);
      uint64_t v11 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v22, 1);
    }
    uint64_t v23 = *(void *)(v35 + 144);
    uint64_t v5 = type metadata accessor for SpeakableString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v23, 1);
    id v6 = (void *)swift_task_alloc();
    *(void *)(v35 + 216) = v6;
    *id v6 = *(void *)(v35 + 48);
    v6[1] = SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:);
    uint64_t v7 = *(void *)(v35 + 176);
    uint64_t v8 = *(void *)(v35 + 152);
    uint64_t v9 = *(void *)(v35 + 144);
    return SearchForAccountsCATs.labelForEnum(accountType:balanceType:)(v7, v8, v9);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[6] = *v1;
  v5[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:);
  }
  else
  {
    uint64_t v4 = v5[19];
    outlined destroy of SpeakableString?(v5[18]);
    outlined destroy of SpeakableString?(v4);
    swift_release();
    uint64_t v2 = SearchForAccountsViewBuilder.fillWatchLabelForAccountIfNeeded(account:label:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  id v6 = v0[22];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[20];
  uint64_t v8 = (id *)v0[16];
  v0[6] = v0;
  uint64_t v9 = TemplatingResult.resultSectionsAsString.getter();
  uint64_t v12 = v1;
  v0[4] = v9;
  v0[5] = v1;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  uint64_t v11 = *v8;
  uint64_t v2 = *v8;
  swift_bridgeObjectRetain();
  id v10 = (id)MEMORY[0x2611B9130](v9, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setText_, v10);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0[6] + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = v0[19];
  uint64_t v1 = v0[18];
  v0[6] = v0;
  outlined destroy of SpeakableString?(v1);
  outlined destroy of SpeakableString?(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[6] + 8);
  return v2();
}

void implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v6 = objc_msgSend(a1, sel_templateItems);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v2 = v4;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  *a2 = v2;
}

uint64_t protocol witness for SearchForAccountsViewBuilding.buildSnippets(for:app:intent:) in conformance SearchForAccountsViewBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for TCCResponseProviding.promptToEnableApp(appDisplayInfo:deviceState:catOverrides:) in conformance TCCResponses;
  return SearchForAccountsViewBuilder.buildSnippets(for:app:intent:)(a1, a2, a3);
}

uint64_t sub_25D912F68()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPaymentAccount]);
  unint64_t v1 = lazy protocol witness table accessor for type [INPaymentAccount] and conformance [A]();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_25D913198()
{
  return swift_deallocObject();
}

uint64_t sub_25D9131C4()
{
  return swift_deallocObject();
}

uint64_t sub_25D9131F0()
{
  return swift_deallocObject();
}

uint64_t sub_25D913230()
{
  return swift_deallocObject();
}

uint64_t sub_25D913270()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t *a1@<X8>)
{
  implicit closure #3 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_25D9132B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D9133DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D913408()
{
  return swift_deallocObject();
}

uint64_t sub_25D913434()
{
  return swift_deallocObject();
}

uint64_t sub_25D913474()
{
  return swift_deallocObject();
}

uint64_t sub_25D9134B4()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(uint64_t *a1@<X8>)
{
  implicit closure #2 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_25D9134FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D91353C()
{
  return swift_deallocObject();
}

uint64_t sub_25D913568()
{
  return swift_deallocObject();
}

uint64_t sub_25D913594()
{
  return swift_deallocObject();
}

uint64_t sub_25D9135D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D913614()
{
  return swift_deallocObject();
}

uint64_t sub_25D913654()
{
  return swift_deallocObject();
}

uint64_t sub_25D913694()
{
  return swift_deallocObject();
}

uint64_t sub_25D9136C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D9136EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D91372C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for INPaymentAccount()
{
  uint64_t v2 = lazy cache variable for type metadata for INPaymentAccount;
  if (!lazy cache variable for type metadata for INPaymentAccount)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INPaymentAccount);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType;
  if (!lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Constants.PaymentAccountType and conformance Constants.PaymentAccountType);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for SASTViewTemplateAction()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTViewTemplateAction;
  if (!lazy cache variable for type metadata for SASTViewTemplateAction)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTViewTemplateAction);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for SASTPropertyListItem()
{
  uint64_t v2 = lazy cache variable for type metadata for SASTPropertyListItem;
  if (!lazy cache variable for type metadata for SASTPropertyListItem)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SASTPropertyListItem);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t destroy for SearchForAccountsViewBuilder(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0(a1 + 8);
}

void *initializeWithCopy for SearchForAccountsViewBuilder(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  uint64_t v2 = a2[4];
  a1[4] = v2;
  a1[5] = a2[5];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void *assignWithCopy for SearchForAccountsViewBuilder(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_retain();
  *a1 = v3;
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
}

void *assignWithTake for SearchForAccountsViewBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 1));
  memcpy(a1 + 1, a2 + 1, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchForAccountsViewBuilder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)a1)) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchForAccountsViewBuilder(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)uint64_t result = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchForAccountsViewBuilder()
{
  return &type metadata for SearchForAccountsViewBuilder;
}

void *PayeeDisambiguationStrategy.__allocating_init()()
{
  uint64_t v40 = 0;
  id v52 = implicit closure #1 in PayeeDisambiguationStrategy.init();
  id v53 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v57 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v84 = 0;
  uint64_t v79 = 0;
  uint64_t v26 = 0;
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v46 - 8);
  uint64_t v45 = v46 - 8;
  unint64_t v27 = (*(void *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v42 = (char *)v17 - v27;
  unint64_t v28 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v40);
  char v29 = (char *)v17 - v28;
  uint64_t v36 = type metadata accessor for SendPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v84 = v38;
  uint64_t v34 = type metadata accessor for Globals();
  uint64_t v30 = v83;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v83);
  id v31 = &v82;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v32 = &v81;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v33 = &v80;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v35 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v30, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
  uint64_t v79 = v35;
  swift_retain();
  swift_retain();
  os_log_type_t v39 = v78;
  v78[3] = v34;
  v78[4] = &protocol witness table for Globals;
  v78[0] = v35;
  unint64_t v37 = type metadata accessor for INSendPaymentIntent();
  type metadata accessor for INSendPaymentIntentResponse();
  uint64_t v41 = v77;
  default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(v77);
  uint64_t v0 = PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(v38, (uint64_t)v39, v40, (uint64_t)v41);
  uint64_t v1 = v42;
  id v43 = v0;
  swift_retain();
  uint64_t v85 = v43;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v1, v2, v46);
  uint64_t v68 = Logger.logObject.getter();
  int v69 = static os_log_type_t.debug.getter();
  id v49 = &v75;
  uint64_t v75 = 12;
  unint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v50 = v76;
  uint64_t v51 = 17;
  uint64_t v55 = 7;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 32;
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = 8;
  uint64_t v54 = 32;
  uint64_t v3 = swift_allocObject();
  uint64_t v56 = v3;
  *(void *)(v3 + 16) = v52;
  *(void *)(v3 + 24) = 0;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v56;
  uint64_t v58 = v4;
  *(void *)(v4 + 16) = v53;
  *(void *)(v4 + 24) = v5;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v58;
  uint64_t v65 = v6;
  *(void *)(v6 + 16) = v57;
  *(void *)(v6 + 24) = v7;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  id v66 = v8;
  swift_retain();
  uint64_t v9 = v60;
  uint64_t v10 = v66;
  *id v66 = v59;
  v10[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9;
  swift_retain();
  uint64_t v11 = v62;
  uint64_t v12 = v66;
  v66[2] = v61;
  void v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  id v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
  uint64_t v14 = v66;
  v66[4] = v64;
  v14[5] = v13;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, (os_log_type_t)v69))
  {
    uint64_t v15 = v26;
    uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v21 = createStorage<A>(capacity:type:)(1);
    uint64_t v22 = &v74;
    id v74 = v19;
    uint64_t v23 = &v73;
    uint64_t v73 = v20;
    uint64_t v24 = &v72;
    uint64_t v72 = v21;
    serialize(_:at:)(2, &v74);
    serialize(_:at:)(1, v22);
    uint64_t v70 = v59;
    uint64_t v71 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
    uint64_t v25 = v15;
    if (v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v70 = v61;
      uint64_t v71 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v74, (uint64_t)&v73, (uint64_t)&v72);
      v17[1] = 0;
      uint64_t v70 = v64;
      uint64_t v71 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v74, (uint64_t)&v73, (uint64_t)&v72);
      _os_log_impl(&dword_25D85A000, v68, (os_log_type_t)v69, "#ContactDisambiguationStrategy<%s> init", v19, v50);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v46);
  swift_release();
  swift_release();
  swift_release();
  return v43;
}

void *PayerDisambiguationStrategy.__allocating_init()()
{
  uint64_t v40 = 0;
  id v52 = implicit closure #1 in PayerDisambiguationStrategy.init();
  id v53 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v57 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v84 = 0;
  uint64_t v79 = 0;
  uint64_t v26 = 0;
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v46 - 8);
  uint64_t v45 = v46 - 8;
  unint64_t v27 = (*(void *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v42 = (char *)v17 - v27;
  unint64_t v28 = (*(void *)(*(void *)(type metadata accessor for CATOption() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v40);
  char v29 = (char *)v17 - v28;
  uint64_t v36 = type metadata accessor for RequestPaymentCATs();
  default argument 0 of CATWrapper.init(options:globals:)();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v84 = v38;
  uint64_t v34 = type metadata accessor for Globals();
  uint64_t v30 = v83;
  default argument 0 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)(v83);
  id v31 = &v82;
  default argument 1 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v32 = &v81;
  default argument 2 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v33 = &v80;
  default argument 3 of Globals.init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)();
  uint64_t v35 = Globals.__allocating_init(contactResolver:deviceState:aceServiceInvoker:outputPublisher:)((uint64_t)v30, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33);
  uint64_t v79 = v35;
  swift_retain();
  swift_retain();
  os_log_type_t v39 = v78;
  v78[3] = v34;
  v78[4] = &protocol witness table for Globals;
  v78[0] = v35;
  unint64_t v37 = type metadata accessor for INRequestPaymentIntent();
  type metadata accessor for INRequestPaymentIntentResponse();
  uint64_t v41 = v77;
  default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(v77);
  uint64_t v0 = PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(v38, (uint64_t)v39, v40, (uint64_t)v41);
  uint64_t v1 = v42;
  id v43 = v0;
  swift_retain();
  uint64_t v85 = v43;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v1, v2, v46);
  uint64_t v68 = Logger.logObject.getter();
  int v69 = static os_log_type_t.debug.getter();
  id v49 = &v75;
  uint64_t v75 = 12;
  unint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v50 = v76;
  uint64_t v51 = 17;
  uint64_t v55 = 7;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 32;
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = 8;
  uint64_t v54 = 32;
  uint64_t v3 = swift_allocObject();
  uint64_t v56 = v3;
  *(void *)(v3 + 16) = v52;
  *(void *)(v3 + 24) = 0;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v56;
  uint64_t v58 = v4;
  *(void *)(v4 + 16) = v53;
  *(void *)(v4 + 24) = v5;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v58;
  uint64_t v65 = v6;
  *(void *)(v6 + 16) = v57;
  *(void *)(v6 + 24) = v7;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  id v66 = v8;
  swift_retain();
  uint64_t v9 = v60;
  uint64_t v10 = v66;
  *id v66 = v59;
  v10[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9;
  swift_retain();
  uint64_t v11 = v62;
  uint64_t v12 = v66;
  v66[2] = v61;
  void v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  id v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
  uint64_t v14 = v66;
  v66[4] = v64;
  v14[5] = v13;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, (os_log_type_t)v69))
  {
    uint64_t v15 = v26;
    uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v21 = createStorage<A>(capacity:type:)(1);
    uint64_t v22 = &v74;
    id v74 = v19;
    uint64_t v23 = &v73;
    uint64_t v73 = v20;
    uint64_t v24 = &v72;
    uint64_t v72 = v21;
    serialize(_:at:)(2, &v74);
    serialize(_:at:)(1, v22);
    uint64_t v70 = v59;
    uint64_t v71 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24);
    uint64_t v25 = v15;
    if (v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v70 = v61;
      uint64_t v71 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v74, (uint64_t)&v73, (uint64_t)&v72);
      v17[1] = 0;
      uint64_t v70 = v64;
      uint64_t v71 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v70, (uint64_t)&v74, (uint64_t)&v73, (uint64_t)&v72);
      _os_log_impl(&dword_25D85A000, v68, (os_log_type_t)v69, "#ContactDisambiguationStrategy<%s> init", v19, v50);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v19, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v46);
  swift_release();
  swift_release();
  swift_release();
  return v43;
}

uint64_t ContactDisambiguationStrategy.catFamily.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  return v2;
}

uint64_t default argument 3 of ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

void *ContactDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, a2, a3, a4);
}

void *ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v48 = a1;
  uint64_t v47 = a2;
  id v45 = a3;
  uint64_t v46 = a4;
  uint64_t v64 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  id v66 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v70 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  char v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v96 = 0;
  uint64_t v95 = 0;
  uint64_t v94 = 0;
  uint64_t v44 = 0;
  uint64_t v58 = (void *)*v4;
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v53 = v54 - 8;
  unint64_t v49 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (char *)&v32 - v49;
  uint64_t v51 = (char *)&v32 - v49;
  uint64_t v99 = MEMORY[0x270FA5388](v48);
  uint64_t v57 = v58[12];
  uint64_t v98 = v57;
  uint64_t v97 = v6;
  uint64_t v96 = v7;
  uint64_t v95 = v8;
  uint64_t v94 = v50;
  uint64_t v55 = v58[10];
  uint64_t v93 = v55;
  uint64_t v56 = v58[11];
  uint64_t v92 = v56;
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v5, v9, v54);
  uint64_t v68 = 7;
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = v56;
  uint64_t v12 = v57;
  id v13 = v58;
  uint64_t v65 = v10;
  void v10[2] = v55;
  v10[3] = v11;
  v10[4] = v12;
  void v10[5] = v13[13];
  char v81 = Logger.logObject.getter();
  int v82 = static os_log_type_t.debug.getter();
  uint64_t v61 = &v90;
  uint64_t v90 = 12;
  unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v62 = v91;
  uint64_t v63 = 17;
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 32;
  uint64_t v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 8;
  uint64_t v67 = 32;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v65;
  uint64_t v69 = v14;
  *(void *)(v14 + 16) = v64;
  *(void *)(v14 + 24) = v15;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v69;
  uint64_t v71 = v16;
  *(void *)(v16 + 16) = v66;
  *(void *)(v16 + 24) = v17;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v71;
  uint64_t v78 = v18;
  *(void *)(v18 + 16) = v70;
  *(void *)(v18 + 24) = v19;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v76 = _allocateUninitializedArray<A>(_:)();
  uint64_t v79 = v20;
  swift_retain();
  uint64_t v21 = v73;
  uint64_t v22 = v79;
  *uint64_t v79 = v72;
  v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  swift_retain();
  uint64_t v23 = v75;
  uint64_t v24 = v79;
  v79[2] = v74;
  v24[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
  swift_retain();
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v78;
  uint64_t v26 = v79;
  v79[4] = v77;
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v81, (os_log_type_t)v82))
  {
    uint64_t v27 = v44;
    unint64_t v37 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v38 = createStorage<A>(capacity:type:)(0);
    uint64_t v39 = createStorage<A>(capacity:type:)(1);
    uint64_t v40 = &v87;
    uint64_t v87 = v37;
    uint64_t v41 = &v86;
    uint64_t v86 = v38;
    uint64_t v42 = &v85;
    uint64_t v85 = v39;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(1, v40);
    uint64_t v83 = v72;
    uint64_t v84 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
    uint64_t v43 = v27;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      uint64_t v83 = v74;
      uint64_t v84 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      uint64_t v35 = 0;
      uint64_t v83 = v77;
      uint64_t v84 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      _os_log_impl(&dword_25D85A000, v81, (os_log_type_t)v82, "#ContactDisambiguationStrategy<%s> init", v37, v62);
      destroyStorage<A>(_:count:)(v38, 0, v36);
      destroyStorage<A>(_:count:)(v39, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v37, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v54);
  swift_retain();
  uint64_t v28 = v47;
  v50[2] = v48;
  uint64_t v33 = v89;
  outlined init with copy of GlobalsProviding(v28, (uint64_t)v89);
  outlined init with take of CommonLabelsProviding(v33, v50 + 3);
  id v29 = v45;
  uint64_t v30 = v46;
  unsigned char v50[8] = v45;
  uint64_t v34 = v88;
  outlined init with copy of GlobalsProviding(v30, (uint64_t)v88);
  outlined init with take of CommonLabelsProviding(v34, v50 + 9);
  __swift_destroy_boxed_opaque_existential_0(v46);

  __swift_destroy_boxed_opaque_existential_0(v47);
  swift_release();
  return v50;
}

uint64_t ContactDisambiguationStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v55 = a1;
  uint64_t v54 = a2;
  uint64_t v48 = 0;
  uint64_t v72 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  id v74 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v78 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v104 = 0;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v40 = 0;
  uint64_t v65 = (void *)*v3;
  uint64_t v41 = type metadata accessor for Parse();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = v41 - 8;
  unint64_t v44 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](0);
  uint64_t v45 = (uint64_t)v30 - v44;
  unint64_t v46 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)v30 - v46;
  uint64_t v49 = type metadata accessor for USOParse();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = v49 - 8;
  unint64_t v52 = (*(void *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v48);
  uint64_t v53 = (char *)v30 - v52;
  int v104 = (char *)v30 - v52;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v60 = v61 - 8;
  unint64_t v56 = (*(void *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v55);
  uint64_t v7 = (char *)v30 - v56;
  uint64_t v58 = (char *)v30 - v56;
  uint64_t v103 = v6;
  uint64_t v102 = v8;
  uint64_t v62 = v65[10];
  uint64_t v101 = v62;
  uint64_t v100 = v57;
  uint64_t v63 = v65[11];
  uint64_t v99 = v63;
  uint64_t v64 = v65[12];
  uint64_t v98 = v64;
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v7, v9, v61);
  uint64_t v76 = 7;
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = v63;
  uint64_t v12 = v64;
  id v13 = v65;
  uint64_t v73 = v10;
  void v10[2] = v62;
  v10[3] = v11;
  v10[4] = v12;
  uint64_t v66 = v13[13];
  void v10[5] = v66;
  uint64_t v89 = Logger.logObject.getter();
  int v90 = static os_log_type_t.debug.getter();
  uint64_t v69 = &v96;
  uint64_t v96 = 12;
  unint64_t v67 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v70 = v97;
  uint64_t v71 = 17;
  uint64_t v81 = swift_allocObject();
  *(unsigned char *)(v81 + 16) = 32;
  uint64_t v83 = swift_allocObject();
  *(unsigned char *)(v83 + 16) = 8;
  uint64_t v75 = 32;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v73;
  uint64_t v77 = v14;
  *(void *)(v14 + 16) = v72;
  *(void *)(v14 + 24) = v15;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v77;
  uint64_t v79 = v16;
  *(void *)(v16 + 16) = v74;
  *(void *)(v16 + 24) = v17;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v79;
  uint64_t v86 = v18;
  *(void *)(v18 + 16) = v78;
  *(void *)(v18 + 24) = v19;
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v84 = _allocateUninitializedArray<A>(_:)();
  uint64_t v87 = v20;
  swift_retain();
  uint64_t v21 = v81;
  uint64_t v22 = v87;
  *uint64_t v87 = v80;
  v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  swift_retain();
  uint64_t v23 = v83;
  uint64_t v24 = v87;
  v87[2] = v82;
  v24[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
  swift_retain();
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
  uint64_t v26 = v87;
  v87[4] = v85;
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v89, (os_log_type_t)v90))
  {
    uint64_t v27 = v40;
    uint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v33 = createStorage<A>(capacity:type:)(0);
    uint64_t v34 = createStorage<A>(capacity:type:)(1);
    uint64_t v35 = &v95;
    uint64_t v95 = v32;
    uint64_t v36 = &v94;
    uint64_t v94 = v33;
    unint64_t v37 = &v93;
    uint64_t v93 = v34;
    serialize(_:at:)(2, &v95);
    serialize(_:at:)(1, v35);
    uint32_t v91 = v80;
    uint64_t v92 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37);
    uint64_t v38 = v27;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      uint32_t v91 = v82;
      uint64_t v92 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)&v95, (uint64_t)&v94, (uint64_t)&v93);
      v30[1] = 0;
      uint32_t v91 = v85;
      uint64_t v92 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)&v95, (uint64_t)&v94, (uint64_t)&v93);
      _os_log_impl(&dword_25D85A000, v89, (os_log_type_t)v90, "#ContactDisambiguationStrategy<%s> actionForInput", v32, v70);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v32, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v61);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v42 + 88))(v47, v41) == *MEMORY[0x263F6FF80])
  {
    uint64_t v28 = v53;
    (*(void (**)(char *, uint64_t))(v42 + 96))(v47, v41);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v28, v47, v49);
    if (USOParse.isOrdinalDisambiguation.getter())
    {
      static ActionForInput.handle()();
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v53, v49);
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v49);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v41);
  }
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v45, v62, *(void *)(v66 + 8), v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v45, v41);
}

uint64_t ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  v2[9] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  void v2[4] = 0;
  v2[6] = 0;
  uint64_t v9 = (void *)*v1;
  v2[10] = *v1;
  v2[11] = v9[10];
  uint64_t v3 = type metadata accessor for ParameterResolutionRecord();
  v2[12] = v3;
  uint64_t v6 = *(void *)(v3 - 8);
  v2[13] = v6;
  v2[14] = *(void *)(v6 + 64);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v2[20] = swift_task_alloc();
  v2[3] = a1;
  void v2[4] = v7;
  v2[21] = v9[11];
  v2[22] = v9[12];
  return MEMORY[0x270FA2498](ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:), 0);
}

uint64_t ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v92 = v0;
  uint64_t v61 = *(void *)(v0 + 176);
  uint64_t v60 = *(void *)(v0 + 168);
  uint64_t v53 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v54 = *(void *)(v0 + 136);
  uint64_t v55 = *(void *)(v0 + 128);
  uint64_t v65 = *(void *)(v0 + 120);
  uint64_t v63 = *(void *)(v0 + 104);
  uint64_t v66 = *(void *)(v0 + 96);
  uint64_t v59 = *(void *)(v0 + 88);
  uint64_t v57 = *(void *)(v0 + 80);
  uint64_t v58 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = SignpostName.makeDisambiguationItemContainer.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v53);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  unint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  v56(v1, v3, v55);
  unint64_t v68 = (void *)swift_allocObject();
  v68[2] = v59;
  v68[3] = v60;
  v68[4] = v61;
  uint64_t v62 = *(void *)(v57 + 104);
  v68[5] = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v65, v58, v66);
  unint64_t v64 = (*(unsigned __int8 *)(v63 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  uint64_t v71 = (char *)swift_allocObject();
  *((void *)v71 + 2) = v59;
  *((void *)v71 + 3) = v60;
  *((void *)v71 + 4) = v61;
  *((void *)v71 + 5) = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(&v71[v64], v65, v66);
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 40) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 184);
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 32;
  uint64_t v74 = swift_allocObject();
  *(unsigned char *)(v74 + 16) = 8;
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v69 + 24) = v68;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v70 + 24) = v69;
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v75 + 24) = v70;
  uint64_t v76 = swift_allocObject();
  *(unsigned char *)(v76 + 16) = 64;
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = 8;
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = partial apply for implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:);
  *(void *)(v72 + 24) = v71;
  uint64_t v78 = swift_allocObject();
  *(void *)(v78 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v78 + 24) = v72;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v79 = v4;
  swift_retain();
  *uint64_t v79 = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[1] = v73;
  swift_retain();
  v79[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[3] = v74;
  swift_retain();
  v79[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[5] = v75;
  swift_retain();
  v79[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[7] = v76;
  swift_retain();
  v79[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[9] = v77;
  swift_retain();
  v79[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[11] = v78;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v80, v81))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v50 = createStorage<A>(capacity:type:)(1);
    uint64_t v51 = createStorage<A>(capacity:type:)(1);
    uint64_t v87 = buf;
    uint64_t v88 = v50;
    uint64_t v89 = v51;
    serialize(_:at:)(2, &v87);
    serialize(_:at:)(2, &v87);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    int v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v91 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
    _os_log_impl(&dword_25D85A000, v80, v81, "#ContactDisambiguationStrategy<%s> Intent resolution result: %@", buf, size);
    destroyStorage<A>(_:count:)(v50, 1, v48);
    destroyStorage<A>(_:count:)(v51, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v42 = *(void *)(v52 + 152);
  uint64_t v43 = *(void *)(v52 + 128);
  uint64_t v41 = *(void *)(v52 + 136);

  unint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v44(v42, v43);
  id v46 = (id)ParameterResolutionRecord.result.getter();
  id v45 = objc_msgSend(v46, sel_disambiguationItems);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for INPerson();
  uint64_t v47 = _arrayConditionalCast<A, B>(_:)();
  if (v47)
  {
    uint64_t v24 = *(void *)(v52 + 176);
    uint64_t v23 = *(void *)(v52 + 168);
    uint64_t v5 = *(void *)(v52 + 144);
    uint64_t v21 = *(void *)(v52 + 128);
    uint64_t v22 = *(void *)(v52 + 88);
    *(void *)(v52 + 48) = v47;
    swift_bridgeObjectRelease();

    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    v56(v5, v6, v21);
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = v22;
    v27[3] = v23;
    v27[4] = v24;
    id v27[5] = v62;
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v47;
    swift_retain();
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = partial apply for implicit closure #1 in SearchForAccountsViewBuilder.buildWatchSnippets(for:app:intent:);
    *(void *)(v30 + 24) = v25;
    swift_release();
    oslog = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    *(void *)(v52 + 56) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v26 = *(_DWORD *)(v52 + 188);
    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = 32;
    uint64_t v33 = swift_allocObject();
    *(unsigned char *)(v33 + 16) = 8;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(void *)(v28 + 24) = v27;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v29 + 24) = v28;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v34 + 24) = v29;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 32;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 8;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
    *(void *)(v31 + 24) = v30;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v37 + 24) = v31;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v38 = v7;
    swift_retain();
    *uint64_t v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v32;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v33;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v38[5] = v34;
    swift_retain();
    v38[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[7] = v35;
    swift_retain();
    v38[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[9] = v36;
    swift_retain();
    v38[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[11] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v40))
    {
      uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      uint64_t v20 = createStorage<A>(capacity:type:)(2);
      int v82 = v18;
      uint64_t v83 = v19;
      uint64_t v84 = v20;
      serialize(_:at:)(2, &v82);
      serialize(_:at:)(2, &v82);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v33;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v86 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
      _os_log_impl(&dword_25D85A000, oslog, v40, "#ContactDisambiguationStrategy<%s> INPersons retrieved from disambiguation items: %s", v18, v26);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v18, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v15 = *(void *)(v52 + 144);
    uint64_t v16 = *(void *)(v52 + 128);

    v44(v15, v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INPerson>);
    *(void *)(v52 + 64) = v47;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    Sequence.sorted(by:)();
    uint64_t v13 = *(void *)(v52 + 160);
    uint64_t v14 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
    swift_bridgeObjectRelease();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)(v52 + 16) + 8);
    return v8(v14);
  }
  else
  {
    uint64_t v12 = *(void *)(v52 + 160);
    swift_bridgeObjectRelease();

    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v10 = 2;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 17;
    swift_willThrow();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)())(*(void *)(v52 + 16) + 8);
    return v11();
  }
}

uint64_t implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  return ParameterResolutionRecord.result.getter();
}

uint64_t closure #1 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(id *a1, id *a2)
{
  id v3 = *a2;
  id v5 = [*a1 (SEL)0x1F65C3018];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = [v3 (SEL)0x1F65C3018];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v6 = static String.< infix(_:_:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[70] = v4;
  v5[69] = a4;
  v5[68] = a3;
  v5[67] = a2;
  v5[66] = a1;
  v5[33] = v5;
  v5[34] = 0;
  v5[35] = 0;
  v5[36] = 0;
  v5[37] = 0;
  v5[39] = 0;
  v5[41] = 0;
  v5[45] = 0;
  v5[47] = 0;
  v5[50] = 0;
  v5[54] = 0;
  v5[55] = 0;
  v5[57] = 0;
  v5[60] = 0;
  v5[62] = 0;
  v5[31] = 0;
  v5[32] = 0;
  v5[64] = 0;
  uint64_t v19 = (void *)*v4;
  v5[71] = *v4;
  v5[72] = v19[10];
  uint64_t v6 = type metadata accessor for IntentPromptAnswer();
  v5[73] = v6;
  v5[74] = *(void *)(v6 - 8);
  v5[75] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  v5[76] = v7;
  v5[77] = *(void *)(v7 - 8);
  v5[78] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PersonNameComponents();
  v5[79] = v8;
  v5[80] = *(void *)(v8 - 8);
  v5[81] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v5[82] = swift_task_alloc();
  v5[83] = swift_task_alloc();
  v5[84] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  v5[85] = v9;
  uint64_t v14 = *(void *)(v9 - 8);
  v5[86] = v14;
  v5[87] = *(void *)(v14 + 64);
  v5[88] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Parse.DirectInvocation();
  v5[89] = v10;
  v5[90] = *(void *)(v10 - 8);
  v5[91] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Parse();
  v5[92] = v11;
  v5[93] = *(void *)(v11 - 8);
  v5[94] = swift_task_alloc();
  v5[95] = swift_task_alloc();
  v5[96] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v5[97] = v12;
  v5[98] = *(void *)(v12 - 8);
  v5[99] = swift_task_alloc();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  v5[103] = swift_task_alloc();
  v5[104] = swift_task_alloc();
  v5[105] = swift_task_alloc();
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  v5[109] = swift_task_alloc();
  v5[34] = a2;
  v5[35] = a3;
  v5[36] = a4;
  v5[37] = v18;
  v5[110] = v19[11];
  v5[111] = v19[12];
  return MEMORY[0x270FA2498](ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:), 0);
}

uint64_t ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v474 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v407 = *(void *)(v1 + 888);
  uint64_t v406 = *(void *)(v1 + 880);
  uint64_t v401 = *(void *)(v1 + 872);
  uint64_t v2 = *(void *)(v1 + 864);
  uint64_t v402 = *(void *)(v1 + 784);
  uint64_t v403 = *(void *)(v1 + 776);
  uint64_t v405 = *(void *)(v1 + 576);
  uint64_t v408 = *(void *)(v1 + 568);
  *(void *)(v1 + 264) = v1;
  id v3 = SignpostName.parseDisambiguationResult.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v3, v3[1], *((unsigned __int8 *)v3 + 16), v401);
  uint64_t v4 = Logger.payments.unsafeMutableAddressor();
  v404 = *(void (**)(uint64_t, uint64_t, uint64_t))(v402 + 16);
  v404(v2, v4, v403);
  v411 = (void *)swift_allocObject();
  v411[2] = v405;
  v411[3] = v406;
  v411[4] = v407;
  uint64_t v409 = *(void *)(v408 + 104);
  v411[5] = v409;
  oslog = Logger.logObject.getter();
  os_log_type_t v419 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 304) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v1 + 896);
  uint64_t v414 = swift_allocObject();
  *(unsigned char *)(v414 + 16) = 32;
  uint64_t v415 = swift_allocObject();
  *(unsigned char *)(v415 + 16) = 8;
  uint64_t v412 = swift_allocObject();
  *(void *)(v412 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v412 + 24) = v411;
  uint64_t v413 = swift_allocObject();
  *(void *)(v413 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v413 + 24) = v412;
  uint64_t v416 = swift_allocObject();
  *(void *)(v416 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v416 + 24) = v413;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v417 = v5;
  swift_retain();
  void *v417 = partial apply for closure #1 in OSLogArguments.append(_:);
  v417[1] = v414;
  swift_retain();
  v417[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v417[3] = v415;
  swift_retain();
  v417[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v417[5] = v416;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v419))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v399 = createStorage<A>(capacity:type:)(0);
    uint64_t v400 = createStorage<A>(capacity:type:)(1);
    v469 = buf;
    uint64_t v470 = v399;
    uint64_t v471 = v400;
    serialize(_:at:)(2, &v469);
    serialize(_:at:)(1, &v469);
    v472 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v473 = v414;
    closure #1 in osLogInternal(_:log:type:)(&v472, (uint64_t)&v469, (uint64_t)&v470, (uint64_t)&v471);
    v472 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v473 = v415;
    closure #1 in osLogInternal(_:log:type:)(&v472, (uint64_t)&v469, (uint64_t)&v470, (uint64_t)&v471);
    v472 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v473 = v416;
    closure #1 in osLogInternal(_:log:type:)(&v472, (uint64_t)&v469, (uint64_t)&v470, (uint64_t)&v471);
    _os_log_impl(&dword_25D85A000, oslog, v419, "#ContactDisambiguationStrategy<%s> Running parseDisambiguationResult()", buf, size);
    destroyStorage<A>(_:count:)(v399, 0, v397);
    destroyStorage<A>(_:count:)(v400, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v387 = *(void *)(v1 + 864);
  uint64_t v388 = *(void *)(v1 + 776);
  uint64_t v395 = *(void *)(v1 + 768);
  uint64_t v396 = *(void *)(v1 + 736);
  uint64_t v386 = *(void *)(v1 + 784);
  uint64_t v394 = *(void *)(v1 + 744);

  uint32_t v389 = *(void (**)(uint64_t, uint64_t))(v386 + 8);
  v389(v387, v388);
  uint64_t v390 = swift_allocObject();
  *(void *)(v1 + 312) = v390 + 16;
  *(void *)(v390 + 16) = 0;
  *(void *)(v390 + 24) = 0;
  *(void *)(v1 + 320) = 0;
  uint64_t v420 = 0;
  char v421 = 1;
  uint64_t v392 = PaginatedItemContainer.items.getter();
  unint64_t v391 = type metadata accessor for INPerson();
  uint64_t v393 = MEMORY[0x2611B9380](v392);
  *(void *)(v1 + 328) = v393;
  swift_bridgeObjectRelease();
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v394 + 88))(v395, v396) != *MEMORY[0x263F6FF70])
  {
    uint64_t v319 = *(void *)(v1 + 760);
    uint64_t v320 = *(void *)(v1 + 736);
    uint64_t v317 = *(void *)(v1 + 560);
    uint64_t v318 = *(void *)(v1 + 744);
    Input.parse.getter();
    outlined init with copy of GlobalsProviding(v317 + 24, v1 + 16);
    uint64_t v316 = *(void *)(v1 + 40);
    uint64_t v315 = *(void *)(v1 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v316);
    (*(void (**)(uint64_t))(v315 + 24))(v316);
    outlined init with copy of GlobalsProviding(v317 + 72, v1 + 96);
    id v322 = Parse.toSiriKitIntent(previousIntent:aceService:contactResolver:)(0, 0, v1 + 56, v1 + 96);
    __swift_destroy_boxed_opaque_existential_0(v1 + 96);
    __swift_destroy_boxed_opaque_existential_0(v1 + 56);
    __swift_destroy_boxed_opaque_existential_0(v1 + 16);
    uint64_t v321 = *(void (**)(uint64_t, uint64_t))(v318 + 8);
    v321(v319, v320);
    if (v322)
    {
      uint64_t v314 = swift_dynamicCastUnknownClass();
      if (v314)
      {
        uint64_t v313 = (void *)v314;
      }
      else
      {

        uint64_t v313 = 0;
      }
      uint64_t v312 = v313;
    }
    else
    {
      uint64_t v312 = 0;
    }
    if (v312)
    {
      uint64_t v296 = *(void *)(v1 + 888);
      uint64_t v295 = *(void *)(v1 + 880);
      uint64_t v16 = *(void *)(v1 + 840);
      uint64_t v293 = *(void *)(v1 + 776);
      uint64_t v294 = *(void *)(v1 + 576);
      *(void *)(v1 + 480) = v312;
      uint64_t v17 = Logger.payments.unsafeMutableAddressor();
      v404(v16, v17, v293);
      v298 = (void *)swift_allocObject();
      v298[2] = v294;
      v298[3] = v295;
      v298[4] = v296;
      v298[5] = v409;
      id v18 = v312;
      v301 = (void *)swift_allocObject();
      v301[2] = v294;
      v301[3] = v295;
      v301[4] = v296;
      v301[5] = v409;
      v301[6] = v312;
      uint64_t v310 = Logger.logObject.getter();
      os_log_type_t v311 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 488) = 22;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v297 = *(_DWORD *)(v1 + 924);
      uint64_t v303 = swift_allocObject();
      *(unsigned char *)(v303 + 16) = 32;
      uint64_t v304 = swift_allocObject();
      *(unsigned char *)(v304 + 16) = 8;
      uint64_t v299 = swift_allocObject();
      *(void *)(v299 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(void *)(v299 + 24) = v298;
      uint64_t v300 = swift_allocObject();
      *(void *)(v300 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v300 + 24) = v299;
      uint64_t v305 = swift_allocObject();
      *(void *)(v305 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v305 + 24) = v300;
      uint64_t v306 = swift_allocObject();
      *(unsigned char *)(v306 + 16) = 32;
      uint64_t v307 = swift_allocObject();
      *(unsigned char *)(v307 + 16) = 8;
      uint64_t v302 = swift_allocObject();
      *(void *)(v302 + 16) = partial apply for implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
      *(void *)(v302 + 24) = v301;
      uint64_t v308 = swift_allocObject();
      *(void *)(v308 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v308 + 24) = v302;
      _allocateUninitializedArray<A>(_:)();
      v309 = v19;
      swift_retain();
      void *v309 = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[1] = v303;
      swift_retain();
      v309[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[3] = v304;
      swift_retain();
      v309[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[5] = v305;
      swift_retain();
      v309[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[7] = v306;
      swift_retain();
      v309[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[9] = v307;
      swift_retain();
      v309[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v309[11] = v308;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v310, v311))
      {
        v290 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v291 = createStorage<A>(capacity:type:)(0);
        uint64_t v292 = createStorage<A>(capacity:type:)(2);
        v454 = v290;
        uint64_t v455 = v291;
        uint64_t v456 = v292;
        serialize(_:at:)(2, &v454);
        serialize(_:at:)(2, &v454);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v303;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v304;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v305;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v306;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v307;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        v457 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v458 = v308;
        closure #1 in osLogInternal(_:log:type:)(&v457, (uint64_t)&v454, (uint64_t)&v455, (uint64_t)&v456);
        _os_log_impl(&dword_25D85A000, v310, v311, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, Intent: %s", v290, v297);
        destroyStorage<A>(_:count:)(v291, 0, v289);
        destroyStorage<A>(_:count:)(v292, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v290, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v287 = *(void *)(v1 + 840);
      uint64_t v288 = *(void *)(v1 + 776);

      v389(v287, v288);
      Input.parse.getter();
      Swift::String v21 = Parse.toContactId()();
      v321(*(void *)(v1 + 752), *(void *)(v1 + 736));
      if (v20)
      {

        v286._uint64_t countAndFlagsBits = 0;
        v286._object = 0;
      }
      else
      {
        Swift::String v286 = v21;
      }
      *(Swift::String *)(v390 + 16) = v286;
      swift_bridgeObjectRelease();
    }
    v321(*(void *)(v1 + 768), *(void *)(v1 + 736));
    goto LABEL_33;
  }
  uint64_t v380 = *(void *)(v1 + 768);
  uint64_t v382 = *(void *)(v1 + 728);
  uint64_t v381 = *(void *)(v1 + 712);
  uint64_t v379 = *(void *)(v1 + 720);
  (*(void (**)(void))(*(void *)(v1 + 744) + 96))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v379 + 32))(v382, v380, v381);
  *(void *)(v1 + 496) = v382;
  uint64_t v383 = static PaymentsDirectInvocations.from(_:)(v382);
  uint64_t v384 = v7;
  unsigned __int8 v385 = v6;
  if (v6 == 255) {
    goto LABEL_16;
  }
  if (!v6)
  {
    uint64_t v344 = *(void *)(v1 + 888);
    uint64_t v343 = *(void *)(v1 + 880);
    uint64_t v11 = *(void *)(v1 + 856);
    uint64_t v341 = *(void *)(v1 + 776);
    uint64_t v342 = *(void *)(v1 + 576);
    *(void *)(v1 + 512) = v383;
    uint64_t v12 = Logger.payments.unsafeMutableAddressor();
    v404(v11, v12, v341);
    uint64_t v346 = (void *)swift_allocObject();
    v346[2] = v342;
    v346[3] = v343;
    v346[4] = v344;
    v346[5] = v409;
    uint64_t v349 = swift_allocObject();
    *(void *)(v349 + 16) = v383;
    log = Logger.logObject.getter();
    os_log_type_t v359 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 520) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v345 = *(_DWORD *)(v1 + 932);
    uint64_t v351 = swift_allocObject();
    *(unsigned char *)(v351 + 16) = 32;
    uint64_t v352 = swift_allocObject();
    *(unsigned char *)(v352 + 16) = 8;
    uint64_t v347 = swift_allocObject();
    *(void *)(v347 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(void *)(v347 + 24) = v346;
    uint64_t v348 = swift_allocObject();
    *(void *)(v348 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v348 + 24) = v347;
    uint64_t v353 = swift_allocObject();
    *(void *)(v353 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v353 + 24) = v348;
    uint64_t v354 = swift_allocObject();
    *(unsigned char *)(v354 + 16) = 0;
    uint64_t v355 = swift_allocObject();
    *(unsigned char *)(v355 + 16) = 8;
    uint64_t v350 = swift_allocObject();
    *(void *)(v350 + 16) = partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(void *)(v350 + 24) = v349;
    uint64_t v356 = swift_allocObject();
    *(void *)(v356 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v356 + 24) = v350;
    _allocateUninitializedArray<A>(_:)();
    uint32_t v357 = v13;
    swift_retain();
    *uint32_t v357 = partial apply for closure #1 in OSLogArguments.append(_:);
    v357[1] = v351;
    swift_retain();
    v357[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v357[3] = v352;
    swift_retain();
    v357[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v357[5] = v353;
    swift_retain();
    v357[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v357[7] = v354;
    swift_retain();
    v357[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v357[9] = v355;
    swift_retain();
    v357[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v357[11] = v356;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v359))
    {
      unint64_t v338 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v337 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v339 = createStorage<A>(capacity:type:)(0);
      uint64_t v340 = createStorage<A>(capacity:type:)(1);
      v464 = v338;
      uint64_t v465 = v339;
      uint64_t v466 = v340;
      serialize(_:at:)(2, &v464);
      serialize(_:at:)(2, &v464);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v468 = v351;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v468 = v352;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v468 = v353;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v468 = v354;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v468 = v355;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      v467 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v468 = v356;
      closure #1 in osLogInternal(_:log:type:)(&v467, (uint64_t)&v464, (uint64_t)&v465, (uint64_t)&v466);
      _os_log_impl(&dword_25D85A000, log, v359, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, personDisambiguation DI selected index: %ld", v338, v345);
      destroyStorage<A>(_:count:)(v339, 0, v337);
      destroyStorage<A>(_:count:)(v340, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v338, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v335 = *(void *)(v1 + 856);
    uint64_t v336 = *(void *)(v1 + 776);

    v389(v335, v336);
    uint64_t v420 = v383;
    char v421 = 0;
    outlined consume of PaymentsDirectInvocations?(v383, v384, 0);
    goto LABEL_17;
  }
  if (v6 != 2)
  {
LABEL_16:
    uint64_t v328 = *(void *)(v1 + 872);
    uint64_t v326 = *(void *)(v1 + 728);
    uint64_t v327 = *(void *)(v1 + 712);
    uint64_t v325 = *(void *)(v1 + 720);
    uint64_t v324 = Parse.DirectInvocation.identifier.getter();
    uint64_t v323 = v14;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v15 = v324;
    *(void *)(v15 + 8) = v323;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0;
    *(unsigned char *)(v15 + 48) = 0;
    swift_willThrow();
    outlined consume of PaymentsDirectInvocations?(v383, v384, v385);
    (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v326, v327);
    outlined destroy of SFRichText?((id *)(v1 + 320));
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v328);
    goto LABEL_99;
  }
  uint64_t v363 = *(void *)(v1 + 888);
  uint64_t v362 = *(void *)(v1 + 880);
  uint64_t v8 = *(void *)(v1 + 848);
  uint64_t v360 = *(void *)(v1 + 776);
  uint64_t v361 = *(void *)(v1 + 576);
  swift_bridgeObjectRetain();
  *(void *)(v1 + 248) = v383;
  *(void *)(v1 + 256) = v384;
  uint64_t v9 = Logger.payments.unsafeMutableAddressor();
  v404(v8, v9, v360);
  uint32_t v365 = (void *)swift_allocObject();
  v365[2] = v361;
  v365[3] = v362;
  v365[4] = v363;
  v365[5] = v409;
  swift_bridgeObjectRetain();
  uint64_t v368 = swift_allocObject();
  *(void *)(v368 + 16) = v383;
  *(void *)(v368 + 24) = v384;
  uint64_t v377 = Logger.logObject.getter();
  os_log_type_t v378 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 504) = 22;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v364 = *(_DWORD *)(v1 + 928);
  uint64_t v370 = swift_allocObject();
  *(unsigned char *)(v370 + 16) = 32;
  uint64_t v371 = swift_allocObject();
  *(unsigned char *)(v371 + 16) = 8;
  uint64_t v366 = swift_allocObject();
  *(void *)(v366 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v366 + 24) = v365;
  uint64_t v367 = swift_allocObject();
  *(void *)(v367 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v367 + 24) = v366;
  uint64_t v372 = swift_allocObject();
  *(void *)(v372 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v372 + 24) = v367;
  uint64_t v373 = swift_allocObject();
  *(unsigned char *)(v373 + 16) = 32;
  uint64_t v374 = swift_allocObject();
  *(unsigned char *)(v374 + 16) = 8;
  uint64_t v369 = swift_allocObject();
  *(void *)(v369 + 16) = partial apply for implicit closure #1 in static Logger.logForCrash(_:);
  *(void *)(v369 + 24) = v368;
  uint64_t v375 = swift_allocObject();
  *(void *)(v375 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v375 + 24) = v369;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v376 = v10;
  swift_retain();
  *uint64_t v376 = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[1] = v370;
  swift_retain();
  v376[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[3] = v371;
  swift_retain();
  v376[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[5] = v372;
  swift_retain();
  v376[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[7] = v373;
  swift_retain();
  v376[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[9] = v374;
  swift_retain();
  v376[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v376[11] = v375;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v377, v378))
  {
    unint64_t v332 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v331 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v333 = createStorage<A>(capacity:type:)(0);
    uint64_t v334 = createStorage<A>(capacity:type:)(2);
    v459 = v332;
    uint64_t v460 = v333;
    uint64_t v461 = v334;
    serialize(_:at:)(2, &v459);
    serialize(_:at:)(2, &v459);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v370;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v371;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v372;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v373;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v374;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    v462 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v463 = v375;
    closure #1 in osLogInternal(_:log:type:)(&v462, (uint64_t)&v459, (uint64_t)&v460, (uint64_t)&v461);
    _os_log_impl(&dword_25D85A000, v377, v378, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, contactPicker DI selected id: %s", v332, v364);
    destroyStorage<A>(_:count:)(v333, 0, v331);
    destroyStorage<A>(_:count:)(v334, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v332, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v329 = *(void *)(v1 + 848);
  uint64_t v330 = *(void *)(v1 + 776);

  v389(v329, v330);
  swift_bridgeObjectRetain();
  *(void *)(v390 + 16) = v383;
  *(void *)(v390 + 24) = v384;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PaymentsDirectInvocations?(v383, v384, v385);
LABEL_17:
  (*(void (**)(void, void))(*(void *)(v1 + 720) + 8))(*(void *)(v1 + 728), *(void *)(v1 + 712));
LABEL_33:
  uint64_t v22 = *(void *)(v1 + 832);
  uint64_t v267 = *(void *)(v1 + 776);
  uint64_t v271 = *(void *)(v1 + 704);
  uint64_t v272 = *(void *)(v1 + 680);
  uint64_t v269 = *(void *)(v1 + 544);
  uint64_t v268 = *(void *)(v1 + 688);
  uint64_t v23 = Logger.payments.unsafeMutableAddressor();
  v404(v22, v23, v267);
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v268 + 16))(v271, v269, v272);
  unint64_t v270 = (*(unsigned __int8 *)(v268 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v268 + 80);
  uint64_t v275 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v268 + 32))(v275 + v270, v271, v272);
  uint64_t v284 = Logger.logObject.getter();
  os_log_type_t v285 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 336) = 22;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v273 = *(_DWORD *)(v1 + 900);
  uint64_t v277 = swift_allocObject();
  *(unsigned char *)(v277 + 16) = 32;
  uint64_t v278 = swift_allocObject();
  *(unsigned char *)(v278 + 16) = 8;
  uint64_t v274 = swift_allocObject();
  *(void *)(v274 + 16) = partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(void *)(v274 + 24) = v390;
  uint64_t v279 = swift_allocObject();
  *(void *)(v279 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v279 + 24) = v274;
  uint64_t v280 = swift_allocObject();
  *(unsigned char *)(v280 + 16) = 32;
  uint64_t v281 = swift_allocObject();
  *(unsigned char *)(v281 + 16) = 8;
  uint64_t v276 = swift_allocObject();
  *(void *)(v276 + 16) = partial apply for implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(void *)(v276 + 24) = v275;
  uint64_t v282 = swift_allocObject();
  *(void *)(v282 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v282 + 24) = v276;
  _allocateUninitializedArray<A>(_:)();
  v283 = v24;
  swift_retain();
  void *v283 = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[1] = v277;
  swift_retain();
  v283[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[3] = v278;
  swift_retain();
  v283[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[5] = v279;
  swift_retain();
  v283[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[7] = v280;
  swift_retain();
  v283[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[9] = v281;
  swift_retain();
  v283[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v283[11] = v282;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v284, v285))
  {
    uint32_t v264 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v265 = createStorage<A>(capacity:type:)(0);
    uint64_t v266 = createStorage<A>(capacity:type:)(2);
    v449 = v264;
    uint64_t v450 = v265;
    uint64_t v451 = v266;
    serialize(_:at:)(2, &v449);
    serialize(_:at:)(2, &v449);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v277;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v278;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v279;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v280;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v281;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    v452 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v453 = v282;
    closure #1 in osLogInternal(_:log:type:)(&v452, (uint64_t)&v449, (uint64_t)&v450, (uint64_t)&v451);
    _os_log_impl(&dword_25D85A000, v284, v285, "comparing personId %s to paginatedItems: %s", v264, v273);
    destroyStorage<A>(_:count:)(v265, 0, v263);
    destroyStorage<A>(_:count:)(v266, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v264, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v261 = *(void *)(v1 + 832);
  uint64_t v262 = *(void *)(v1 + 776);

  v389(v261, v262);
  if ((v421 & 1) != 0 || (*(void *)(v1 + 456) = v420, v420 < 0) || v420 >= v393)
  {
    *(void *)(v1 + 352) = PaginatedItemContainer.items.getter();
    *(void *)(swift_task_alloc() + 16) = v390 + 16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    Sequence.first(where:)();
    swift_task_dealloc();
    outlined destroy of [SFCardSection]();
    id v233 = *(id *)(v1 + 344);
    if (v233)
    {
      uint64_t v217 = *(void *)(v1 + 888);
      uint64_t v216 = *(void *)(v1 + 880);
      uint64_t v29 = *(void *)(v1 + 816);
      uint64_t v214 = *(void *)(v1 + 776);
      uint64_t v215 = *(void *)(v1 + 576);
      *(void *)(v1 + 440) = v233;
      id v30 = v233;
      id v31 = v233;
      uint64_t v32 = *(void **)(v1 + 320);
      *(void *)(v1 + 320) = v233;

      uint64_t v33 = Logger.payments.unsafeMutableAddressor();
      v404(v29, v33, v214);
      uint64_t v219 = (void *)swift_allocObject();
      v219[2] = v215;
      v219[3] = v216;
      v219[4] = v217;
      v219[5] = v409;
      uint64_t v222 = swift_allocObject();
      *(void *)(v222 + 16) = v233;
      uint64_t v231 = Logger.logObject.getter();
      os_log_type_t v232 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 448) = 22;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v218 = *(_DWORD *)(v1 + 916);
      uint64_t v224 = swift_allocObject();
      *(unsigned char *)(v224 + 16) = 32;
      uint64_t v225 = swift_allocObject();
      *(unsigned char *)(v225 + 16) = 8;
      uint64_t v220 = swift_allocObject();
      *(void *)(v220 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(void *)(v220 + 24) = v219;
      uint64_t v221 = swift_allocObject();
      *(void *)(v221 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v221 + 24) = v220;
      uint64_t v226 = swift_allocObject();
      *(void *)(v226 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v226 + 24) = v221;
      uint64_t v227 = swift_allocObject();
      *(unsigned char *)(v227 + 16) = 32;
      uint64_t v228 = swift_allocObject();
      *(unsigned char *)(v228 + 16) = 8;
      uint64_t v223 = swift_allocObject();
      *(void *)(v223 + 16) = partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
      *(void *)(v223 + 24) = v222;
      uint64_t v229 = swift_allocObject();
      *(void *)(v229 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v229 + 24) = v223;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v230 = v34;
      swift_retain();
      *uint64_t v230 = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[1] = v224;
      swift_retain();
      v230[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[3] = v225;
      swift_retain();
      v230[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[5] = v226;
      swift_retain();
      v230[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[7] = v227;
      swift_retain();
      v230[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[9] = v228;
      swift_retain();
      v230[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v230[11] = v229;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v231, v232))
      {
        uint64_t v211 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v212 = createStorage<A>(capacity:type:)(0);
        uint64_t v213 = createStorage<A>(capacity:type:)(2);
        v439 = v211;
        uint64_t v440 = v212;
        uint64_t v441 = v213;
        serialize(_:at:)(2, &v439);
        serialize(_:at:)(2, &v439);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v224;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v225;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v226;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v227;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v228;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        v442 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v443 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v442, (uint64_t)&v439, (uint64_t)&v440, (uint64_t)&v441);
        _os_log_impl(&dword_25D85A000, v231, v232, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, selected person by ID: %s", v211, v218);
        destroyStorage<A>(_:count:)(v212, 0, v210);
        destroyStorage<A>(_:count:)(v213, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v211, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v208 = *(void *)(v1 + 816);
      uint64_t v209 = *(void *)(v1 + 776);

      v389(v208, v209);
    }
  }
  else
  {
    uint64_t v244 = *(void *)(v1 + 888);
    uint64_t v243 = *(void *)(v1 + 880);
    uint64_t v240 = *(void *)(v1 + 824);
    uint64_t v241 = *(void *)(v1 + 776);
    uint64_t v242 = *(void *)(v1 + 576);
    PaginatedItemContainer.items.getter();
    Array.subscript.getter();
    id v245 = *(id *)(v1 + 464);
    swift_bridgeObjectRelease();
    id v25 = v245;
    uint32_t v26 = *(void **)(v1 + 320);
    *(void *)(v1 + 320) = v245;

    uint64_t v27 = Logger.payments.unsafeMutableAddressor();
    v404(v240, v27, v241);
    uint64_t v247 = (void *)swift_allocObject();
    v247[2] = v242;
    v247[3] = v243;
    v247[4] = v244;
    v247[5] = v409;
    uint64_t v250 = swift_allocObject();
    *(void *)(v250 + 16) = v245;
    uint64_t v259 = Logger.logObject.getter();
    os_log_type_t v260 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 472) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v246 = *(_DWORD *)(v1 + 920);
    uint64_t v252 = swift_allocObject();
    *(unsigned char *)(v252 + 16) = 32;
    uint64_t v253 = swift_allocObject();
    *(unsigned char *)(v253 + 16) = 8;
    uint64_t v248 = swift_allocObject();
    *(void *)(v248 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
    *(void *)(v248 + 24) = v247;
    uint64_t v249 = swift_allocObject();
    *(void *)(v249 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v249 + 24) = v248;
    uint64_t v254 = swift_allocObject();
    *(void *)(v254 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v254 + 24) = v249;
    uint64_t v255 = swift_allocObject();
    *(unsigned char *)(v255 + 16) = 32;
    uint64_t v256 = swift_allocObject();
    *(unsigned char *)(v256 + 16) = 8;
    uint64_t v251 = swift_allocObject();
    *(void *)(v251 + 16) = partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
    *(void *)(v251 + 24) = v250;
    uint64_t v257 = swift_allocObject();
    *(void *)(v257 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v257 + 24) = v251;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v258 = v28;
    swift_retain();
    *uint64_t v258 = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[1] = v252;
    swift_retain();
    v258[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[3] = v253;
    swift_retain();
    v258[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[5] = v254;
    swift_retain();
    v258[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[7] = v255;
    swift_retain();
    v258[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[9] = v256;
    swift_retain();
    v258[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v258[11] = v257;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v259, v260))
    {
      uint64_t v237 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v238 = createStorage<A>(capacity:type:)(0);
      uint64_t v239 = createStorage<A>(capacity:type:)(2);
      v444 = v237;
      uint64_t v445 = v238;
      uint64_t v446 = v239;
      serialize(_:at:)(2, &v444);
      serialize(_:at:)(2, &v444);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v252;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v253;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v254;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v255;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v256;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      v447 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v448 = v257;
      closure #1 in osLogInternal(_:log:type:)(&v447, (uint64_t)&v444, (uint64_t)&v445, (uint64_t)&v446);
      _os_log_impl(&dword_25D85A000, v259, v260, "#ContactDisambiguationStrategy<%s> parseDisambiguationResult, selected participant ordinally or by direct invocation: %s", v237, v246);
      destroyStorage<A>(_:count:)(v238, 0, v236);
      destroyStorage<A>(_:count:)(v239, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v237, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v234 = *(void *)(v1 + 824);
    uint64_t v235 = *(void *)(v1 + 776);

    v389(v234, v235);
  }
  swift_beginAccess();
  id v207 = *(id *)(v1 + 320);
  id v35 = v207;
  swift_endAccess();
  if (v207)
  {
    id v36 = v207;
    id v37 = v207;
    id v38 = v207;
    id v39 = v207;
    id v40 = v207;
    id v41 = v207;
    *(void *)(v1 + 360) = v207;
    id v206 = objc_msgSend(v207, sel_personHandle);
    if (v206)
    {
      *(void *)(v1 + 432) = v206;

      id v42 = v206;
      id v205 = objc_msgSend(v207, sel_nameComponents);
      if (v205)
      {
        uint64_t v204 = *(void *)(v1 + 672);
        uint64_t v202 = *(void *)(v1 + 648);
        uint64_t v203 = *(void *)(v1 + 632);
        uint64_t v201 = *(void *)(v1 + 640);
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 32))(v204, v202, v203);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v204, 0, 1, v203);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 640) + 56))(*(void *)(v1 + 672), 1, 1, *(void *)(v1 + 632));
      }

      id v200 = objc_msgSend(v207, sel_nameComponents);
      if (v200)
      {
        uint64_t v199 = *(void *)(v1 + 656);
        uint64_t v197 = *(void *)(v1 + 648);
        uint64_t v198 = *(void *)(v1 + 632);
        uint64_t v196 = *(void *)(v1 + 640);
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 32))(v199, v197, v198);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v196 + 56))(v199, 0, 1, v198);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 640) + 56))(*(void *)(v1 + 656), 1, 1, *(void *)(v1 + 632));
      }
      uint32_t v195 = *(void **)(v1 + 664);
      uint64_t v194 = *(void *)(v1 + 632);
      uint64_t v193 = *(void *)(v1 + 640);
      outlined init with take of PersonNameComponents?(*(const void **)(v1 + 656), v195);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v193 + 48))(v195, 1, v194))
      {
        outlined destroy of PersonNameComponents?(*(void *)(v1 + 664));

        v192._uint64_t countAndFlagsBits = 0;
        v192._object = 0;
      }
      else
      {
        uint64_t v188 = *(void *)(v1 + 664);
        uint64_t v190 = *(void *)(v1 + 648);
        uint64_t v191 = *(void *)(v1 + 632);
        uint64_t v189 = *(void *)(v1 + 640);
        (*(void (**)(uint64_t))(v189 + 16))(v190);
        outlined destroy of PersonNameComponents?(v188);

        Swift::String v43 = PersonNameComponents.formatted()();
        (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v190, v191);
        Swift::String v192 = v43;
      }
      *(Swift::String *)(v1 + 232) = v192;
      if (*(void *)(v1 + 240))
      {
        uint64_t v44 = *(void *)(v1 + 240);
        *(void *)(v1 + 216) = *(void *)(v1 + 232);
        *(void *)(v1 + 224) = v44;
      }
      else
      {
        id v45 = String.EMPTY.unsafeMutableAddressor();
        outlined init with copy of String(v45, (void *)(v1 + 216));
        outlined destroy of String.UTF8View();
      }
      uint64_t v184 = *(void *)(v1 + 216);
      uint64_t v185 = *(void *)(v1 + 224);
      id v186 = objc_msgSend(v207, sel_image);

      id v187 = objc_msgSend(v207, sel_contactIdentifier);
      if (v187)
      {
        uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v181 = v46;

        uint64_t v182 = v180;
        uint64_t v183 = v181;
      }
      else
      {
        uint64_t v182 = 0;
        uint64_t v183 = 0;
      }

      id v179 = objc_msgSend(v207, sel_customIdentifier);
      if (v179)
      {
        uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v176 = v47;

        uint64_t v177 = v175;
        uint64_t v178 = v176;
      }
      else
      {
        uint64_t v177 = 0;
        uint64_t v178 = 0;
      }
      uint64_t v174 = *(void *)(v1 + 672);

      id v48 = INPerson.__allocating_init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v206, v174, v184, v185, v186, v182, v183, v177, v178);
      uint64_t v49 = *(void **)(v1 + 360);
      *(void *)(v1 + 360) = v48;
    }
    else
    {
    }
    uint64_t v171 = *(void *)(v1 + 576);
    type metadata accessor for ParameterResolutionRecord();
    id v172 = (id)ParameterResolutionRecord.intent.getter();
    id v173 = (id)(*(uint64_t (**)(uint64_t))(v409 + 16))(v171);

    if (v173)
    {
      id v170 = objc_msgSend(v173, sel_siriMatches);
      if (v170)
      {
        uint64_t v168 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v169 = v168;
      }
      else
      {
        uint64_t v169 = 0;
      }

      uint64_t v167 = v169;
    }
    else
    {
      uint64_t v167 = 0;
    }
    *(void *)(v1 + 384) = v167;
    if (*(void *)(v1 + 384))
    {
      *(void *)(v1 + 376) = *(void *)(v1 + 384);
    }
    else
    {
      *(void *)(v1 + 376) = Array.init()();
      outlined destroy of [SFCardSection]();
    }
    uint64_t v165 = *(void *)(v1 + 376);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v1 + 392) = v165;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    lazy protocol witness table accessor for type [INPerson] and conformance [A]();
    char v166 = Collection.isEmpty.getter();
    outlined destroy of [SFCardSection]();
    swift_bridgeObjectRelease();
    if (v166)
    {
      uint64_t v154 = *(void *)(v1 + 888);
      uint64_t v153 = *(void *)(v1 + 880);
      uint64_t v50 = *(void *)(v1 + 808);
      uint64_t v151 = *(void *)(v1 + 776);
      uint64_t v152 = *(void *)(v1 + 576);
      uint64_t v51 = Logger.payments.unsafeMutableAddressor();
      v404(v50, v51, v151);
      uint64_t v156 = (void *)swift_allocObject();
      v156[2] = v152;
      v156[3] = v153;
      v156[4] = v154;
      v156[5] = v409;
      uint64_t v163 = Logger.logObject.getter();
      os_log_type_t v164 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 416) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v155 = *(_DWORD *)(v1 + 912);
      uint64_t v159 = swift_allocObject();
      *(unsigned char *)(v159 + 16) = 32;
      uint64_t v160 = swift_allocObject();
      *(unsigned char *)(v160 + 16) = 8;
      uint64_t v157 = swift_allocObject();
      *(void *)(v157 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
      *(void *)(v157 + 24) = v156;
      uint64_t v158 = swift_allocObject();
      *(void *)(v158 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v158 + 24) = v157;
      uint64_t v161 = swift_allocObject();
      *(void *)(v161 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v161 + 24) = v158;
      _allocateUninitializedArray<A>(_:)();
      unint64_t v162 = v52;
      swift_retain();
      *unint64_t v162 = partial apply for closure #1 in OSLogArguments.append(_:);
      v162[1] = v159;
      swift_retain();
      v162[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v162[3] = v160;
      swift_retain();
      v162[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v162[5] = v161;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v163, v164))
      {
        uint64_t v148 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v149 = createStorage<A>(capacity:type:)(0);
        uint64_t v150 = createStorage<A>(capacity:type:)(1);
        v434 = v148;
        uint64_t v435 = v149;
        uint64_t v436 = v150;
        serialize(_:at:)(2, &v434);
        serialize(_:at:)(1, &v434);
        v437 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v438 = v159;
        closure #1 in osLogInternal(_:log:type:)(&v437, (uint64_t)&v434, (uint64_t)&v435, (uint64_t)&v436);
        v437 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v438 = v160;
        closure #1 in osLogInternal(_:log:type:)(&v437, (uint64_t)&v434, (uint64_t)&v435, (uint64_t)&v436);
        v437 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v438 = v161;
        closure #1 in osLogInternal(_:log:type:)(&v437, (uint64_t)&v434, (uint64_t)&v435, (uint64_t)&v436);
        _os_log_impl(&dword_25D85A000, v163, v164, "#ContactDisambiguationStrategy<%s> appending selectedPerson to empty persons array", v148, v155);
        destroyStorage<A>(_:count:)(v149, 0, v147);
        destroyStorage<A>(_:count:)(v150, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v148, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v144 = *(void *)(v1 + 808);
      uint64_t v145 = *(void *)(v1 + 776);

      v389(v144, v145);
      uint64_t v146 = *(void **)(v1 + 360);
      id v53 = v146;
      *(void *)(v1 + 424) = v146;
      Array.append(_:)();
    }
    else
    {
      ParameterResolutionRecord.parameter.getter();
      uint64_t v143 = ParameterIdentifier.multicardinalIndex.getter();
      if (v54)
      {
        (*(void (**)(void, void))(*(void *)(v1 + 616) + 8))(*(void *)(v1 + 624), *(void *)(v1 + 608));
      }
      else
      {
        uint64_t v127 = *(void *)(v1 + 888);
        uint64_t v126 = *(void *)(v1 + 880);
        uint64_t v55 = *(void *)(v1 + 800);
        uint64_t v124 = *(void *)(v1 + 776);
        uint64_t v56 = *(void *)(v1 + 624);
        uint64_t v57 = *(void *)(v1 + 616);
        uint64_t v58 = *(void *)(v1 + 608);
        uint64_t v125 = *(void *)(v1 + 576);
        *(void *)(v1 + 400) = v143;
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
        uint64_t v59 = Logger.payments.unsafeMutableAddressor();
        v404(v55, v59, v124);
        uint64_t v129 = (void *)swift_allocObject();
        v129[2] = v125;
        v129[3] = v126;
        v129[4] = v127;
        uint64_t v129[5] = v409;
        uint64_t v132 = swift_allocObject();
        *(void *)(v132 + 16) = v143;
        uint64_t v141 = Logger.logObject.getter();
        os_log_type_t v142 = static os_log_type_t.debug.getter();
        *(void *)(v1 + 408) = 22;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v128 = *(_DWORD *)(v1 + 908);
        uint64_t v134 = swift_allocObject();
        *(unsigned char *)(v134 + 16) = 32;
        uint64_t v135 = swift_allocObject();
        *(unsigned char *)(v135 + 16) = 8;
        uint64_t v130 = swift_allocObject();
        *(void *)(v130 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
        *(void *)(v130 + 24) = v129;
        uint64_t v131 = swift_allocObject();
        *(void *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v131 + 24) = v130;
        uint64_t v136 = swift_allocObject();
        *(void *)(v136 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v136 + 24) = v131;
        uint64_t v137 = swift_allocObject();
        *(unsigned char *)(v137 + 16) = 0;
        uint64_t v138 = swift_allocObject();
        *(unsigned char *)(v138 + 16) = 8;
        uint64_t v133 = swift_allocObject();
        *(void *)(v133 + 16) = partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
        *(void *)(v133 + 24) = v132;
        uint64_t v139 = swift_allocObject();
        *(void *)(v139 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *(void *)(v139 + 24) = v133;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v140 = v60;
        swift_retain();
        *uint64_t v140 = partial apply for closure #1 in OSLogArguments.append(_:);
        v140[1] = v134;
        swift_retain();
        void v140[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v140[3] = v135;
        swift_retain();
        v140[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v140[5] = v136;
        swift_retain();
        v140[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v140[7] = v137;
        swift_retain();
        v140[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v140[9] = v138;
        swift_retain();
        v140[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v140[11] = v139;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v141, v142))
        {
          uint64_t v121 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v122 = createStorage<A>(capacity:type:)(0);
          uint64_t v123 = createStorage<A>(capacity:type:)(1);
          v429 = v121;
          uint64_t v430 = v122;
          uint64_t v431 = v123;
          serialize(_:at:)(2, &v429);
          serialize(_:at:)(2, &v429);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v433 = v134;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v433 = v135;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v433 = v136;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v433 = v137;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v433 = v138;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          v432 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
          uint64_t v433 = v139;
          closure #1 in osLogInternal(_:log:type:)(&v432, (uint64_t)&v429, (uint64_t)&v430, (uint64_t)&v431);
          _os_log_impl(&dword_25D85A000, v141, v142, "#ContactDisambiguationStrategy<%s> setting selectedPerson to multicardinalValueIndex %ld", v121, v128);
          destroyStorage<A>(_:count:)(v122, 0, v120);
          destroyStorage<A>(_:count:)(v123, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v121, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v116 = *(void *)(v1 + 800);
        uint64_t v117 = *(void *)(v1 + 776);

        v389(v116, v117);
        Swift::String v118 = *(void **)(v1 + 360);
        id v61 = v118;
        uint64_t v119 = (void (*)(void))Array.subscript.modify();
        uint64_t v63 = *v62;
        *uint64_t v62 = v118;

        v119();
      }
    }
    uint64_t v114 = *(void *)(v1 + 872);
    uint64_t v115 = *(void *)(v1 + 600);
    uint64_t v113 = *(void *)(v1 + 584);
    uint64_t v111 = *(void *)(v1 + 576);
    uint64_t v112 = *(void *)(v1 + 592);
    id v109 = (id)ParameterResolutionRecord.intent.getter();
    Class v108 = *(void **)(v1 + 360);
    id v64 = v108;
    id v106 = (id)ParameterResolutionRecord.intent.getter();
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(v409 + 24))(v111);
    id v107 = (id)MEMORY[0x2611B9130](v65);

    swift_bridgeObjectRelease();
    objc_msgSend(v109, sel_setValue_forKeyPath_, v108, v107);

    swift_unknownObjectRelease();
    uint64_t v110 = *(void **)(v1 + 360);
    id v66 = v110;
    unint64_t v428 = v391;
    v427 = v110;
    ParameterResolutionRecord.intent.getter();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    static DisambiguationResult.chosenItem(_:)();
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v115, v113);
    outlined destroy of [SFCardSection]();

    outlined destroy of SFRichText?((id *)(v1 + 320));
    swift_release();
    $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
    outlined destroy of Signpost.OpenSignpost(v114);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v67 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
    return v67();
  }
  uint64_t v86 = *(void *)(v1 + 888);
  uint64_t v85 = *(void *)(v1 + 880);
  uint64_t v69 = *(void *)(v1 + 792);
  uint64_t v83 = *(void *)(v1 + 776);
  uint64_t v84 = *(void *)(v1 + 576);
  uint64_t v70 = Logger.payments.unsafeMutableAddressor();
  v404(v69, v70, v83);
  uint64_t v88 = (void *)swift_allocObject();
  v88[2] = v84;
  v88[3] = v85;
  v88[4] = v86;
  v88[5] = v409;
  swift_retain();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v420;
  *(unsigned char *)(v92 + 24) = v421 & 1;
  int v104 = Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.error.getter();
  *(void *)(v1 + 368) = 32;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v87 = *(_DWORD *)(v1 + 904);
  uint64_t v94 = swift_allocObject();
  *(unsigned char *)(v94 + 16) = 32;
  uint64_t v95 = swift_allocObject();
  *(unsigned char *)(v95 + 16) = 8;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v89 + 24) = v88;
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v90 + 24) = v89;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v96 + 24) = v90;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 32;
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = 8;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(void *)(v91 + 24) = v390;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v99 + 24) = v91;
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 32;
  uint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 8;
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = partial apply for specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  *(void *)(v93 + 24) = v92;
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v102 + 24) = v93;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v103 = v71;
  swift_retain();
  *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v94;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  Builtin::Word v103[3] = v95;
  swift_retain();
  v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[5] = v96;
  swift_retain();
  v103[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[7] = v97;
  swift_retain();
  v103[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[9] = v98;
  swift_retain();
  v103[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[11] = v99;
  swift_retain();
  v103[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[13] = v100;
  swift_retain();
  v103[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[15] = v101;
  swift_retain();
  v103[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[17] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v81 = createStorage<A>(capacity:type:)(0);
    uint64_t v82 = createStorage<A>(capacity:type:)(3);
    v422 = v80;
    uint64_t v423 = v81;
    uint64_t v424 = v82;
    serialize(_:at:)(2, &v422);
    serialize(_:at:)(3, &v422);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v94;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    v425 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v426 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v425, (uint64_t)&v422, (uint64_t)&v423, (uint64_t)&v424);
    _os_log_impl(&dword_25D85A000, v104, v105, "#ContactDisambiguationStrategy<%s> Could not resolve disambiguation selection from id: %s or index: %s", v80, v87);
    destroyStorage<A>(_:count:)(v81, 0, v79);
    destroyStorage<A>(_:count:)(v82, 3, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](v80, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v78 = *(void *)(v1 + 872);
  uint64_t v74 = *(void *)(v1 + 792);
  uint64_t v75 = *(void *)(v1 + 776);

  v389(v74, v75);
  swift_beginAccess();
  uint64_t v76 = *(void *)(v390 + 16);
  uint64_t v77 = *(void *)(v390 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(void *)uint64_t v72 = v76;
  *(void *)(v72 + 8) = v77;
  *(void *)(v72 + 16) = 0;
  *(void *)(v72 + 24) = 0;
  *(void *)(v72 + 32) = 0;
  *(void *)(v72 + 40) = 0;
  *(unsigned char *)(v72 + 48) = 13;
  swift_willThrow();
  outlined destroy of SFRichText?((id *)(v1 + 320));
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v78);
LABEL_99:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v73 = *(uint64_t (**)(void))(*(void *)(v1 + 264) + 8);
  return v73();
}

uint64_t implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void *a1)
{
  id v1 = a1;
  swift_getWitnessTable();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  unsigned __int8 v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  return String.init<A>(describing:)();
}

uint64_t specialized implicit closure #11 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return String.init<A>(describing:)();
}

uint64_t closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1, void *a2)
{
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = *a1;
  uint64_t v14 = a2;
  uint64_t v7 = INPerson.identifier.getter();
  uint64_t v8 = v2;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = v9;
  uint64_t v13 = v10;
  if (!v8)
  {
    if (!v13)
    {
      outlined destroy of String.UTF8View();
      char v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of String(v12, &v11);
  if (!v13)
  {
    outlined destroy of String.UTF8View();
LABEL_8:
    outlined destroy of DIIdentifier();
    char v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  char v5 = v4;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return String.init<A>(describing:)();
}

id INPerson.__allocating_init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 656) = v3;
  *(void *)(v4 + 648) = a3;
  *(void *)(v4 + 640) = a2;
  *(void *)(v4 + 632) = a1;
  *(void *)(v4 + 664) = *v3;
  *(void *)(v4 + 456) = v4;
  *(void *)(v4 + 464) = 0;
  *(void *)(v4 + 472) = 0;
  *(void *)(v4 + 480) = 0;
  *(void *)(v4 + 496) = 0;
  *(void *)(v4 + 504) = 0;
  *(void *)(v4 + 520) = 0;
  *(unsigned char *)(v4 + 1072) = 0;
  *(void *)(v4 + 576) = 0;
  *(unsigned char *)(v4 + 1080) = 0;
  *(void *)(v4 + 584) = 0;
  *(void *)(v4 + 592) = 0;
  uint64_t v14 = (void *)*v3;
  *(void *)(v4 + 672) = *v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v4 + 680) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AceOutput();
  *(void *)(v4 + 688) = v5;
  *(void *)(v4 + 696) = *(void *)(v5 - 8);
  *(void *)(v4 + 704) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  *(void *)(v4 + 712) = v6;
  *(void *)(v4 + 720) = *(void *)(v6 - 8);
  *(void *)(v4 + 728) = swift_task_alloc();
  type metadata accessor for DialogPhase();
  *(void *)(v4 + 736) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v4 + 744) = v7;
  *(void *)(v4 + 752) = *(void *)(v7 - 8);
  *(void *)(v4 + 760) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NLContextUpdate();
  *(void *)(v4 + 768) = v8;
  *(void *)(v4 + 776) = *(void *)(v8 - 8);
  *(void *)(v4 + 784) = swift_task_alloc();
  *(void *)(v4 + 792) = swift_task_alloc();
  *(void *)(v4 + 800) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v4 + 808) = v9;
  *(void *)(v4 + 816) = *(void *)(v9 - 8);
  *(void *)(v4 + 824) = swift_task_alloc();
  *(void *)(v4 + 832) = swift_task_alloc();
  *(void *)(v4 + 840) = swift_task_alloc();
  *(void *)(v4 + 848) = swift_task_alloc();
  type metadata accessor for Signpost.OpenSignpost();
  *(void *)(v4 + 856) = swift_task_alloc();
  *(void *)(v4 + 464) = a2;
  *(void *)(v4 + 472) = a3;
  *(void *)(v4 + 864) = v14[10];
  *(void *)(v4 + 480) = v13;
  *(void *)(v4 + 872) = v14[11];
  *(void *)(v4 + 880) = v14[12];
  return MEMORY[0x270FA2498](ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:), 0);
}

uint64_t ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v117 = v0;
  uint64_t v98 = *(void *)(v0 + 880);
  uint64_t v97 = *(void *)(v0 + 872);
  uint64_t v96 = *(void *)(v0 + 864);
  uint64_t v92 = *(void *)(v0 + 856);
  uint64_t v1 = *(void *)(v0 + 848);
  uint64_t v93 = *(void *)(v0 + 816);
  uint64_t v94 = *(void *)(v0 + 808);
  uint64_t v99 = *(void *)(v0 + 672);
  *(void *)(v0 + 456) = v0;
  uint64_t v2 = SignpostName.makePromptForDisambiguation.unsafeMutableAddressor();
  static Signpost.begin(_:)(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v92);
  uint64_t v3 = Logger.payments.unsafeMutableAddressor();
  uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
  *(void *)(v0 + 888) = v95;
  *(void *)(v0 + 896) = (v93 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v95(v1, v3, v94);
  uint64_t v102 = (void *)swift_allocObject();
  v102[2] = v96;
  v102[3] = v97;
  v102[4] = v98;
  uint64_t v100 = *(void *)(v99 + 104);
  *(void *)(v0 + 904) = v100;
  v102[5] = v100;
  id v109 = Logger.logObject.getter();
  os_log_type_t v110 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 488) = 12;
  *(void *)(v0 + 912) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 920) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 928) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1076);
  uint64_t v105 = swift_allocObject();
  *(unsigned char *)(v105 + 16) = 32;
  uint64_t v106 = swift_allocObject();
  *(unsigned char *)(v106 + 16) = 8;
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v103 + 24) = v102;
  uint64_t v104 = swift_allocObject();
  *(void *)(v104 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v104 + 24) = v103;
  uint64_t v107 = swift_allocObject();
  *(void *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v107 + 24) = v104;
  *(void *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  Class v108 = v4;
  swift_retain();
  *Class v108 = partial apply for closure #1 in OSLogArguments.append(_:);
  v108[1] = v105;
  swift_retain();
  v108[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v108[3] = v106;
  swift_retain();
  v108[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v108[5] = v107;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v109, v110))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v89 = createStorage<A>(capacity:type:)(0);
    uint64_t v90 = createStorage<A>(capacity:type:)(1);
    uint64_t v112 = buf;
    uint64_t v113 = v89;
    uint64_t v114 = v90;
    serialize(_:at:)(2, &v112);
    serialize(_:at:)(1, &v112);
    uint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v116 = v105;
    closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
    uint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v116 = v106;
    closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
    uint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v116 = v107;
    closure #1 in osLogInternal(_:log:type:)(&v115, (uint64_t)&v112, (uint64_t)&v113, (uint64_t)&v114);
    _os_log_impl(&dword_25D85A000, v109, v110, "#ContactDisambiguationStrategy<%s> Running makePromptForDisambiguation()", buf, size);
    destroyStorage<A>(_:count:)(v89, 0, v87);
    destroyStorage<A>(_:count:)(v90, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v82 = *(void *)(v91 + 848);
  uint64_t v83 = *(void *)(v91 + 808);
  uint64_t v81 = *(void *)(v91 + 816);

  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  *(void *)(v91 + 944) = v84;
  *(void *)(v91 + 952) = (v81 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v84(v82, v83);
  *(void *)(v91 + 960) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v85 = (unsigned char *)PaginatedItemContainer.items.getter();
  char v86 = static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(v85);
  swift_bridgeObjectRelease();
  if (v86)
  {
    uint64_t v79 = PaginatedItemContainer.items.getter();
    char v80 = static ContactDisambiguationStrategy.handleType(for:)(v79);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v91 + 1073) = v80;
  }
  else
  {
    *(unsigned char *)(v91 + 1073) = 4;
  }
  uint64_t v74 = *(void *)(v91 + 656);
  type metadata accessor for DisambiguationViewBuilder();
  char v72 = *(unsigned char *)(v91 + 1073);
  uint64_t v73 = PaginatedItemContainer.items.getter();
  outlined init with copy of GlobalsProviding(v74 + 24, v91 + 16);
  uint64_t v71 = *(void *)(v91 + 40);
  uint64_t v70 = *(void *)(v91 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v91 + 16), v71);
  (*(void (**)(uint64_t))(v70 + 16))(v71);
  uint64_t v77 = DisambiguationViewBuilder.__allocating_init(contactDisambiguationType:persons:deviceState:)(v72, v73, (uint64_t)&v111);
  *(void *)(v91 + 968) = v77;
  __swift_destroy_boxed_opaque_existential_0(v91 + 16);
  *(void *)(v91 + 496) = v77;
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.app.getter();
  outlined init with copy of GlobalsProviding(v74 + 24, v91 + 56);
  uint64_t v76 = *(void *)(v91 + 80);
  uint64_t v75 = *(void *)(v91 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v91 + 56), v76);
  (*(void (**)(uint64_t))(v75 + 16))(v76);
  __swift_project_boxed_opaque_existential_1((void *)(v91 + 96), *(void *)(v91 + 120));
  dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_0(v91 + 96);
  __swift_destroy_boxed_opaque_existential_0(v91 + 56);
  uint64_t v78 = DisambiguationViewBuilder.makeDisambiguationItems(app:compact:)();
  *(void *)(v91 + 976) = v78;
  swift_release();
  *(void *)(v91 + 504) = v78;
  if (static RFFeatureFlags.ResponseFramework.SMART.getter())
  {
    uint64_t v5 = *(void *)(v91 + 840);
    uint64_t v65 = *(void *)(v91 + 808);
    uint64_t v6 = Logger.payments.unsafeMutableAddressor();
    v95(v5, v6, v65);
    oslog = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.debug.getter();
    *(void *)(v91 + 568) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v66 = *(_DWORD *)(v91 + 1092);
    uint64_t v69 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v67))
    {
      id v61 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v62 = createStorage<A>(capacity:type:)(0);
      uint64_t v63 = createStorage<A>(capacity:type:)(0);
      *(void *)(v91 + 600) = v61;
      *(void *)(v91 + 608) = v62;
      *(void *)(v91 + 616) = v63;
      serialize(_:at:)(0, (unsigned char **)(v91 + 600));
      serialize(_:at:)(0, (unsigned char **)(v91 + 600));
      *(void *)(v91 + 624) = v69;
      id v64 = (void *)swift_task_alloc();
      v64[2] = v91 + 600;
      v64[3] = v91 + 608;
      v64[4] = v91 + 616;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, oslog, v67, "SnippetViews for disambiguation using RF 2.0", v61, v66);
      destroyStorage<A>(_:count:)(v62, 0, v60);
      destroyStorage<A>(_:count:)(v63, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v61, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v51 = *(void *)(v91 + 864);
    uint64_t v48 = *(void *)(v91 + 840);
    uint64_t v49 = *(void *)(v91 + 808);
    uint64_t v55 = *(void *)(v91 + 800);
    uint64_t v56 = *(void *)(v91 + 792);
    uint64_t v57 = *(void *)(v91 + 768);
    uint64_t v58 = *(void *)(v91 + 656);
    uint64_t v54 = *(void *)(v91 + 776);

    v84(v48, v49);
    uint64_t v50 = PaginatedItemContainer.items.getter();
    *(void *)(v91 + 984) = v50;
    *(void *)(v91 + 576) = v50;
    BOOL v52 = v51 == type metadata accessor for INSendPaymentIntent();
    *(unsigned char *)(v91 + 1080) = v52;
    uint64_t v53 = PaginatedItemContainer.items.getter();
    static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)(v53, v52, v55);
    swift_bridgeObjectRelease();
    static DialogPhase.clarification.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v56, v55, v57);
    *(void *)(swift_task_alloc() + 16) = v56;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    *(void *)(v91 + 992) = v7;
    *(void *)(v91 + 1000) = (v54 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v56, v57);
    uint64_t v59 = *(void **)(v58 + 64);
    id v8 = v59;
    if (v59)
    {
      *(void *)(v91 + 592) = v59;
      type metadata accessor for ContactResolutionSnippetGenerator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
      id v9 = v59;
      *(void *)(v91 + 584) = ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:)();
    }
    else
    {
      uint64_t v44 = *(void *)(v91 + 656);
      type metadata accessor for ContactResolutionSnippetGenerator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MobileSMS", 0x13uLL, 1);
      outlined init with copy of GlobalsProviding(v44 + 24, v91 + 416);
      uint64_t v46 = *(void *)(v91 + 440);
      uint64_t v45 = *(void *)(v91 + 448);
      __swift_project_boxed_opaque_existential_1((void *)(v91 + 416), v46);
      (*(void (**)(uint64_t))(v45 + 16))(v46);
      default argument 1 of ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)();
      uint64_t v47 = ContactResolutionSnippetGenerator.__allocating_init(appBundleId:globals:deviceState:)();
      __swift_destroy_boxed_opaque_existential_0(v91 + 416);
      *(void *)(v91 + 584) = v47;
    }
    *(void *)(v91 + 1008) = *(void *)(v91 + 584);
    swift_retain();
    uint64_t v42 = PaymentsDirectInvocations.Identifiers.rawValue.getter(0);
    uint64_t v43 = v10;
    *(void *)(v91 + 1016) = v10;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v91 + 1024) = v11;
    *uint64_t v11 = *(void *)(v91 + 456);
    v11[1] = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v12 = *(void *)(v91 + 760);
    uint64_t v13 = *(void *)(v91 + 632);
    return MEMORY[0x270F65F98](v13, v50, v42, v43, v12);
  }
  else
  {
    uint64_t v14 = *(void *)(v91 + 832);
    uint64_t v37 = *(void *)(v91 + 808);
    uint64_t v15 = Logger.payments.unsafeMutableAddressor();
    v95(v14, v15, v37);
    log = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    *(void *)(v91 + 512) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v38 = *(_DWORD *)(v91 + 1084);
    uint64_t v41 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v39))
    {
      uint64_t v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v34 = createStorage<A>(capacity:type:)(0);
      uint64_t v35 = createStorage<A>(capacity:type:)(0);
      *(void *)(v91 + 536) = v33;
      *(void *)(v91 + 544) = v34;
      *(void *)(v91 + 552) = v35;
      serialize(_:at:)(0, (unsigned char **)(v91 + 536));
      serialize(_:at:)(0, (unsigned char **)(v91 + 536));
      *(void *)(v91 + 560) = v41;
      id v36 = (void *)swift_task_alloc();
      v36[2] = v91 + 536;
      v36[3] = v91 + 544;
      v36[4] = v91 + 552;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25D85A000, log, v39, "AceViews for disambiguation", v33, v38);
      destroyStorage<A>(_:count:)(v34, 0, v32);
      destroyStorage<A>(_:count:)(v35, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v33, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v91 + 864);
    uint64_t v20 = *(void *)(v91 + 832);
    uint64_t v21 = *(void *)(v91 + 808);
    uint64_t v29 = *(void *)(v91 + 656);

    v84(v20, v21);
    uint64_t v25 = ParameterResolutionRecord.app.getter();
    type metadata accessor for SiriKitDisambiguationList();
    PaginatedItemContainer.items.getter();
    type metadata accessor for INPerson();
    _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRetain();
    _swift_stdlib_has_malloc_size();
    default argument 4 of static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    uint64_t v24 = SiriKitDisambiguationList.__allocating_init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
    swift_bridgeObjectRelease();
    outlined init with copy of GlobalsProviding(v29 + 24, v91 + 136);
    uint64_t v23 = *(void *)(v91 + 160);
    uint64_t v22 = *(void *)(v91 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v91 + 136), v23);
    (*(void (**)(uint64_t))(v22 + 16))(v23);
    uint64_t v16 = type metadata accessor for SiriKitDisambiguationSnippetFactory();
    uint64_t v26 = static AceViewProviding.makeAceViewsForDisambiguation(app:disambiguationList:deviceState:disambiguationSnippetProvider:)(v25, v24, (void *)(v91 + 176), v16, (uint64_t)&protocol witness table for SiriKitDisambiguationSnippetFactory);
    *(void *)(v91 + 1040) = v26;
    __swift_destroy_boxed_opaque_existential_0(v91 + 176);
    __swift_destroy_boxed_opaque_existential_0(v91 + 136);
    swift_release();
    swift_release();
    *(void *)(v91 + 520) = v26;
    id v28 = (id)ParameterResolutionRecord.intent.getter();
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(v100 + 16))(v27);
    *(void *)(v91 + 1048) = v30;

    id v31 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v29 + 184)
                                                   + **(int **)(*(void *)v29 + 184));
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v91 + 1056) = v17;
    *uint64_t v17 = *(void *)(v91 + 456);
    v17[1] = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v18 = *(void *)(v91 + 728);
    return v31(v18, v30);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 456) = *v1;
  *(void *)(v4 + 1032) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  id v8 = (void (*)(uint64_t, uint64_t))v0[124];
  id v9 = v0[107];
  uint64_t v6 = v0[100];
  uint64_t v7 = v0[96];
  uint64_t v4 = v0[95];
  uint64_t v3 = v0[94];
  uint64_t v5 = v0[93];
  v0[57] = v0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[57] + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  uint64_t v4 = *v1 + 16;
  *(void *)(v5 + 456) = *v1;
  *(void *)(v5 + 1064) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  }
  else
  {

    uint64_t v2 = ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *buf;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint32_t size;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v57 = v0;
  uint64_t v41 = *(void *)(v0 + 904);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 888);
  id v40 = *(void *)(v0 + 880);
  os_log_type_t v39 = *(void *)(v0 + 872);
  uint32_t v38 = *(void *)(v0 + 864);
  uint64_t v1 = *(void *)(v0 + 824);
  id v36 = *(void *)(v0 + 808);
  *(void *)(v0 + 456) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  v37(v1, v2, v36);
  uint64_t v43 = (void *)swift_allocObject();
  v43[2] = v38;
  v43[3] = v39;
  v43[4] = v40;
  v43[5] = v41;
  uint64_t v50 = Logger.logObject.getter();
  uint64_t v51 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 528) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1088);
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 32;
  uint64_t v47 = swift_allocObject();
  *(unsigned char *)(v47 + 16) = 8;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v44 + 24) = v43;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v45 + 24) = v44;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v48 + 24) = v45;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v49 = v3;
  swift_retain();
  *uint64_t v49 = partial apply for closure #1 in OSLogArguments.append(_:);
  v49[1] = v46;
  swift_retain();
  v49[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  void v49[3] = v47;
  swift_retain();
  v49[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v49[5] = v48;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v4 = *(void *)(v35 + 1064);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v33 = createStorage<A>(capacity:type:)(0);
    uint64_t v34 = createStorage<A>(capacity:type:)(1);
    BOOL v52 = buf;
    uint64_t v53 = v33;
    uint64_t v54 = v34;
    serialize(_:at:)(2, &v52);
    serialize(_:at:)(1, &v52);
    uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v56 = v46;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)&v52, (uint64_t)&v53, (uint64_t)&v54);
    if (v4) {
      return result;
    }
    uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v56 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)&v52, (uint64_t)&v53, (uint64_t)&v54);
    uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v56 = v48;
    closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)&v52, (uint64_t)&v53, (uint64_t)&v54);
    _os_log_impl(&dword_25D85A000, v50, v51, "#ContactDisambiguationStrategy<%s> Creating SDAs and updating NLContext()", buf, size);
    destroyStorage<A>(_:count:)(v33, 0, v31);
    destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v35 + 944);
  uint64_t v11 = *(void *)(v35 + 864);
  uint64_t v30 = *(void *)(v35 + 856);
  id v8 = *(void *)(v35 + 824);
  id v9 = *(void *)(v35 + 808);
  uint64_t v25 = *(void *)(v35 + 784);
  uint64_t v26 = *(void *)(v35 + 768);
  id v28 = *(void *)(v35 + 728);
  uint64_t v29 = *(void *)(v35 + 712);
  uint64_t v24 = *(void *)(v35 + 704);
  uint64_t v23 = *(void *)(v35 + 688);
  uint64_t v20 = *(void *)(v35 + 680);
  uint64_t v16 = *(void *)(v35 + 656);
  uint64_t v21 = *(uint64_t **)(v35 + 632);
  uint64_t v19 = *(void *)(v35 + 776);
  uint64_t v27 = *(void *)(v35 + 720);
  uint64_t v22 = *(void *)(v35 + 696);

  v10(v8, v9);
  uint64_t v12 = v11 == type metadata accessor for INSendPaymentIntent();
  *(unsigned char *)(v35 + 1072) = v12;
  uint64_t v13 = PaginatedItemContainer.items.getter();
  static PaymentsContextProvider.personDisambiguationContextUpdate(persons:isSend:)(v13, v12, v25);
  swift_bridgeObjectRelease();
  outlined init with copy of GlobalsProviding(v16 + 24, v35 + 216);
  uint64_t v15 = *(void *)(v35 + 240);
  uint64_t v14 = *(void *)(v35 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v35 + 216), v15);
  (*(void (**)(uint64_t))(v14 + 16))(v15);
  outlined init with copy of GlobalsProviding(v16 + 24, v35 + 296);
  uint64_t v18 = *(void *)(v35 + 320);
  uint64_t v17 = *(void *)(v35 + 328);
  __swift_project_boxed_opaque_existential_1((void *)(v35 + 296), v18);
  (*(void (**)(uint64_t))(v17 + 16))(v18);
  __swift_project_boxed_opaque_existential_1((void *)(v35 + 336), *(void *)(v35 + 360));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v25, v26);
  (*(void (**)(uint64_t))(v19 + 56))(v20);
  type metadata accessor for SABaseCommand();
  _allocateUninitializedArray<A>(_:)();
  *(void *)(v35 + 376) = 0;
  *(void *)(v35 + 384) = 0;
  *(void *)(v35 + 392) = 0;
  *(void *)(v35 + 400) = 0;
  *(void *)(v35 + 408) = 0;
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?(v35 + 376);
  swift_bridgeObjectRelease();
  outlined destroy of NLContextUpdate?(v20);
  __swift_destroy_boxed_opaque_existential_0(v35 + 336);
  __swift_destroy_boxed_opaque_existential_0(v35 + 296);
  __swift_destroy_boxed_opaque_existential_0(v35 + 256);
  __swift_destroy_boxed_opaque_existential_0(v35 + 216);
  v21[3] = v23;
  void v21[4] = MEMORY[0x263F6FFF0];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(boxed_opaque_existential_1, v24, v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(v35 + 456) + 8);
  return v7();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  id v8 = (void (*)(uint64_t, uint64_t))v0[124];
  id v9 = v0[107];
  uint64_t v6 = v0[100];
  uint64_t v7 = v0[96];
  uint64_t v4 = v0[95];
  uint64_t v3 = v0[94];
  uint64_t v5 = v0[93];
  v0[57] = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0[57] + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[131];
  uint64_t v4 = v0[107];
  v0[57] = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  $defer #1 <A, B>() in PaymentsRCHFlowStrategy.makeIntentFromParse(parse:currentIntent:)();
  outlined destroy of Signpost.OpenSignpost(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[57] + 8);
  return v2();
}

uint64_t static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(unsigned char *a1)
{
  uint64_t v275 = a1;
  uint64_t v299 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  v301 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v305 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v312 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v250 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v251 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v252 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v253 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v254 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v256 = closure #1 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  uint64_t v257 = closure #2 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  uint64_t v258 = partial apply for closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  uint64_t v259 = partial apply for closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  os_log_type_t v260 = partial apply for closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  uint64_t v261 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v262 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v263 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint32_t v264 = partial apply for implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:);
  uint64_t v265 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  uint64_t v266 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  uint64_t v267 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  uint64_t v268 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v271 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v272 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v273 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v362 = 0;
  uint64_t v361 = 0;
  uint64_t v274 = 0;
  char v347 = 0;
  char v345 = 0;
  unsigned __int8 v344 = 0;
  Swift::String v339 = (Swift::String)0;
  uint64_t v328 = 0;
  uint64_t v329 = 0;
  uint64_t v323 = 0;
  uint64_t v324 = 0;
  uint64_t v285 = type metadata accessor for Logger();
  v283 = *(void **)(v285 - 8);
  uint64_t v284 = v285 - 8;
  uint64_t v279 = v283[8];
  unint64_t v276 = (v279 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v275);
  uint64_t v277 = (char *)&v96 - v276;
  unint64_t v278 = v276;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v280 = (char *)&v96 - v278;
  unint64_t v281 = (v279 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v96 - v281;
  uint64_t v282 = (char *)&v96 - v281;
  uint64_t v362 = v3;
  uint64_t v361 = v5;
  uint64_t v288 = v5[10];
  uint64_t v360 = v288;
  uint64_t v289 = v5[11];
  uint64_t v359 = v289;
  uint64_t v290 = v5[12];
  uint64_t v358 = v290;
  uint64_t v6 = Logger.payments.unsafeMutableAddressor();
  Swift::String v286 = (void (*)(char *, uint64_t, uint64_t))v283[2];
  uint64_t v287 = v283 + 2;
  v286(v4, v6, v285);
  uint64_t v303 = 7;
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = v289;
  uint64_t v9 = v290;
  uint64_t v10 = v291;
  uint64_t v300 = v7;
  void v7[2] = v288;
  v7[3] = v8;
  unsigned char v7[4] = v9;
  uint64_t v292 = *(void *)(v10 + 104);
  uint64_t v7[5] = v292;
  uint64_t v316 = Logger.logObject.getter();
  int v317 = static os_log_type_t.debug.getter();
  uint64_t v295 = &v356;
  uint64_t v356 = 12;
  unint64_t v293 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v294 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v296 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v297 = v357;
  uint64_t v298 = 17;
  uint64_t v308 = swift_allocObject();
  *(unsigned char *)(v308 + 16) = 32;
  uint64_t v310 = swift_allocObject();
  *(unsigned char *)(v310 + 16) = 8;
  uint64_t v302 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v300;
  uint64_t v304 = v11;
  *(void *)(v11 + 16) = v299;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v304;
  uint64_t v306 = v13;
  *(void *)(v13 + 16) = v301;
  *(void *)(v13 + 24) = v14;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v306;
  uint64_t v313 = v15;
  *(void *)(v15 + 16) = v305;
  *(void *)(v15 + 24) = v16;
  uint64_t v315 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v311 = _allocateUninitializedArray<A>(_:)();
  uint64_t v314 = v17;
  swift_retain();
  uint64_t v18 = v308;
  uint64_t v19 = v314;
  *uint64_t v314 = v307;
  v19[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = v310;
  uint64_t v21 = v314;
  v314[2] = v309;
  v21[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
  swift_retain();
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v313;
  uint64_t v23 = v314;
  v314[4] = v312;
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v316, (os_log_type_t)v317))
  {
    uint64_t v24 = v274;
    uint64_t v243 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v242 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v244 = createStorage<A>(capacity:type:)(0);
    uint64_t v245 = createStorage<A>(capacity:type:)(1);
    uint32_t v246 = v322;
    v322[0] = v243;
    uint64_t v247 = &v321;
    uint64_t v321 = v244;
    uint64_t v248 = &v320;
    uint64_t v320 = v245;
    serialize(_:at:)(2, v322);
    serialize(_:at:)(1, v246);
    uint64_t v318 = v307;
    uint64_t v319 = v308;
    closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)v246, (uint64_t)v247, (uint64_t)v248);
    uint64_t v249 = v24;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      uint64_t v318 = v309;
      uint64_t v319 = v310;
      closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)v322, (uint64_t)&v321, (uint64_t)&v320);
      uint64_t v240 = 0;
      uint64_t v318 = v312;
      uint64_t v319 = v313;
      closure #1 in osLogInternal(_:log:type:)(&v318, (uint64_t)v322, (uint64_t)&v321, (uint64_t)&v320);
      uint64_t v239 = 0;
      _os_log_impl(&dword_25D85A000, v316, (os_log_type_t)v317, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier", v243, v297);
      destroyStorage<A>(_:count:)(v244, 0, v242);
      destroyStorage<A>(_:count:)(v245, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v243, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v241 = v239;
    }
  }
  else
  {
    uint64_t v25 = v274;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v241 = v25;
  }
  uint64_t v232 = v241;

  id v233 = (void (*)(char *, uint64_t))v283[1];
  uint64_t v234 = v283 + 1;
  v233(v282, v285);
  swift_bridgeObjectRetain();
  uint64_t v237 = &v355;
  uint64_t v355 = v275;
  uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  unint64_t v236 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  int v238 = Collection.isEmpty.getter();
  outlined destroy of [SFCardSection]();
  if (v238)
  {
    uint64_t v76 = v277;
    uint64_t v77 = Logger.payments.unsafeMutableAddressor();
    v286(v76, v77, v285);
    uint64_t v109 = 7;
    uint64_t v78 = (void *)swift_allocObject();
    uint64_t v79 = v289;
    uint64_t v80 = v290;
    uint64_t v81 = v292;
    uint64_t v107 = v78;
    v78[2] = v288;
    v78[3] = v79;
    v78[4] = v80;
    void v78[5] = v81;
    uint64_t v117 = Logger.logObject.getter();
    int v118 = static os_log_type_t.debug.getter();
    v353[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v105 = v354;
    uint64_t v106 = 17;
    uint64_t v112 = swift_allocObject();
    *(unsigned char *)(v112 + 16) = 32;
    uint64_t v113 = swift_allocObject();
    *(unsigned char *)(v113 + 16) = 8;
    uint64_t v108 = 32;
    uint64_t v82 = swift_allocObject();
    uint64_t v83 = v107;
    uint64_t v110 = v82;
    *(void *)(v82 + 16) = v250;
    *(void *)(v82 + 24) = v83;
    uint64_t v84 = swift_allocObject();
    uint64_t v85 = v110;
    uint64_t v111 = v84;
    *(void *)(v84 + 16) = v251;
    *(void *)(v84 + 24) = v85;
    uint64_t v86 = swift_allocObject();
    uint64_t v87 = v111;
    uint64_t v115 = v86;
    *(void *)(v86 + 16) = v252;
    *(void *)(v86 + 24) = v87;
    uint64_t v114 = _allocateUninitializedArray<A>(_:)();
    uint64_t v116 = v88;
    swift_retain();
    uint64_t v89 = v112;
    uint64_t v90 = v116;
    *uint64_t v116 = v253;
    v90[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v89;
    swift_retain();
    uint64_t v91 = v113;
    uint64_t v92 = v116;
    v116[2] = v254;
    v92[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
    swift_retain();
    uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v115;
    uint64_t v94 = v116;
    v116[4] = v255;
    v94[5] = v93;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v117, (os_log_type_t)v118))
    {
      uint64_t v95 = v232;
      uint64_t v98 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v99 = createStorage<A>(capacity:type:)(0);
      uint64_t v100 = createStorage<A>(capacity:type:)(1);
      uint64_t v101 = v353;
      v353[0] = v98;
      uint64_t v102 = &v352;
      uint64_t v352 = v99;
      uint64_t v103 = &v351;
      uint64_t v351 = v100;
      serialize(_:at:)(2, v353);
      serialize(_:at:)(1, v101);
      uint64_t v349 = v253;
      uint64_t v350 = v112;
      closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v101, (uint64_t)v102, (uint64_t)v103);
      uint64_t v104 = v95;
      if (v95)
      {
        __break(1u);
      }
      else
      {
        uint64_t v349 = v254;
        uint64_t v350 = v113;
        closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v353, (uint64_t)&v352, (uint64_t)&v351);
        uint64_t v96 = 0;
        uint64_t v349 = v255;
        uint64_t v350 = v115;
        closure #1 in osLogInternal(_:log:type:)(&v349, (uint64_t)v353, (uint64_t)&v352, (uint64_t)&v351);
        _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v118, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier no recipients provided, returning false", v98, v105);
        destroyStorage<A>(_:count:)(v99, 0, v97);
        destroyStorage<A>(_:count:)(v100, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v98, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v233(v277, v285);
    int v119 = 0;
    return v119 & 1;
  }
  uint64_t v26 = v232;
  uint64_t v348 = v275;
  unint64_t v229 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  uint64_t result = Sequence.allSatisfy(_:)();
  uint64_t v230 = v26;
  int v231 = result;
  if (!v26)
  {
    int v226 = v231;
    char v347 = v231 & 1;
    uint64_t v346 = v275;
    int v28 = Sequence.allSatisfy(_:)();
    uint64_t v227 = 0;
    int v228 = v28;
    int v225 = v28;
    char v345 = v28 & 1;
    if (v226)
    {
      swift_bridgeObjectRetain();
      uint64_t v223 = &v325;
      uint64_t v325 = v275;
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      id v224 = v326;
      if (v326)
      {
        id v222 = v224;
        id v220 = v224;
        id v221 = objc_msgSend(v224, sel_contactIdentifier);
        if (v221)
        {
          id v219 = v221;
          id v214 = v221;
          uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v216 = v29;

          uint64_t v217 = v215;
          uint64_t v218 = v216;
        }
        else
        {
          uint64_t v217 = 0;
          uint64_t v218 = 0;
        }
        uint64_t v211 = v218;
        uint64_t v210 = v217;

        uint64_t v212 = v210;
        uint64_t v213 = v211;
      }
      else
      {
        uint64_t v212 = 0;
        uint64_t v213 = 0;
      }
      uint64_t v208 = v213;
      uint64_t v209 = v212;
      if (v213)
      {
        uint64_t v206 = v209;
        uint64_t v207 = v208;
        uint64_t v30 = v227;
        uint64_t v201 = v208;
        uint64_t v203 = v209;
        uint64_t v323 = v209;
        uint64_t v324 = v208;
        v322[1] = v275;
        swift_bridgeObjectRetain();
        uint64_t v202 = &v96;
        MEMORY[0x270FA5388](v258);
        id v31 = &v96 - 4;
        float v31[2] = v203;
        v31[3] = v32;
        uint64_t result = Sequence.allSatisfy(_:)();
        uint64_t v204 = v30;
        int v205 = result;
        if (!v30)
        {
          int v199 = v205;
          swift_bridgeObjectRelease();
          unsigned __int8 v344 = v199 & 1;
          swift_bridgeObjectRelease();
          uint64_t v200 = v204;
LABEL_45:
          uint64_t v42 = v280;
          uint64_t v133 = v200;
          uint64_t v43 = Logger.payments.unsafeMutableAddressor();
          v286(v42, v43, v285);
          uint64_t v143 = 7;
          uint64_t v44 = (void *)swift_allocObject();
          uint64_t v45 = v289;
          uint64_t v46 = v290;
          uint64_t v47 = v292;
          uint64_t v136 = v44;
          v44[2] = v288;
          v44[3] = v45;
          v44[4] = v46;
          v44[5] = v47;
          int v134 = v344;
          uint64_t v139 = 17;
          uint64_t v140 = swift_allocObject();
          *(unsigned char *)(v140 + 16) = v134 & 1;
          uint64_t v154 = Logger.logObject.getter();
          int v155 = static os_log_type_t.debug.getter();
          v337[1] = (unsigned char *)18;
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v135 = v338;
          uint64_t v146 = swift_allocObject();
          *(unsigned char *)(v146 + 16) = 32;
          uint64_t v147 = swift_allocObject();
          *(unsigned char *)(v147 + 16) = 8;
          uint64_t v142 = 32;
          uint64_t v48 = swift_allocObject();
          uint64_t v49 = v136;
          uint64_t v137 = v48;
          *(void *)(v48 + 16) = v261;
          *(void *)(v48 + 24) = v49;
          uint64_t v50 = swift_allocObject();
          uint64_t v51 = v137;
          uint64_t v138 = v50;
          *(void *)(v50 + 16) = v262;
          *(void *)(v50 + 24) = v51;
          uint64_t v52 = swift_allocObject();
          uint64_t v53 = v138;
          uint64_t v148 = v52;
          *(void *)(v52 + 16) = v263;
          *(void *)(v52 + 24) = v53;
          uint64_t v149 = swift_allocObject();
          *(unsigned char *)(v149 + 16) = 0;
          uint64_t v150 = swift_allocObject();
          *(unsigned char *)(v150 + 16) = 4;
          uint64_t v54 = swift_allocObject();
          uint64_t v55 = v140;
          uint64_t v141 = v54;
          *(void *)(v54 + 16) = v264;
          *(void *)(v54 + 24) = v55;
          uint64_t v56 = swift_allocObject();
          uint64_t v57 = v141;
          uint64_t v144 = v56;
          *(void *)(v56 + 16) = v265;
          *(void *)(v56 + 24) = v57;
          uint64_t v58 = swift_allocObject();
          uint64_t v59 = v144;
          uint64_t v145 = v58;
          *(void *)(v58 + 16) = v266;
          *(void *)(v58 + 24) = v59;
          uint64_t v60 = swift_allocObject();
          uint64_t v61 = v145;
          uint64_t v152 = v60;
          *(void *)(v60 + 16) = v267;
          *(void *)(v60 + 24) = v61;
          uint64_t v151 = _allocateUninitializedArray<A>(_:)();
          uint64_t v153 = v62;
          swift_retain();
          uint64_t v63 = v146;
          id v64 = v153;
          *uint64_t v153 = v268;
          v64[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63;
          swift_retain();
          uint64_t v65 = v147;
          uint32_t v66 = v153;
          v153[2] = v269;
          v66[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
          swift_retain();
          os_log_type_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
          unint64_t v68 = v153;
          v153[4] = v270;
          v68[5] = v67;
          swift_retain();
          uint64_t v69 = v149;
          uint64_t v70 = v153;
          v153[6] = v271;
          v70[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
          swift_retain();
          uint64_t v71 = v150;
          char v72 = v153;
          v153[8] = v272;
          v72[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71;
          swift_retain();
          uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v152;
          uint64_t v74 = v153;
          v153[10] = v273;
          v74[11] = v73;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v154, (os_log_type_t)v155))
          {
            uint64_t v75 = v133;
            uint64_t v125 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v126 = createStorage<A>(capacity:type:)(0);
            uint64_t v127 = createStorage<A>(capacity:type:)(1);
            uint64_t v129 = v337;
            v337[0] = v125;
            uint64_t v130 = &v336;
            uint64_t v336 = v126;
            uint64_t v131 = &v335;
            uint64_t v335 = v127;
            unsigned int v128 = 2;
            serialize(_:at:)(2, v337);
            serialize(_:at:)(v128, v129);
            uint64_t v333 = v268;
            uint64_t v334 = v146;
            closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v129, (uint64_t)v130, (uint64_t)v131);
            uint64_t v132 = v75;
            if (v75)
            {
              __break(1u);
            }
            else
            {
              uint64_t v333 = v269;
              uint64_t v334 = v147;
              closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v337, (uint64_t)&v336, (uint64_t)&v335);
              uint64_t v123 = 0;
              uint64_t v333 = v270;
              uint64_t v334 = v148;
              closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v337, (uint64_t)&v336, (uint64_t)&v335);
              uint64_t v122 = 0;
              uint64_t v333 = v271;
              uint64_t v334 = v149;
              closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v337, (uint64_t)&v336, (uint64_t)&v335);
              uint64_t v121 = 0;
              uint64_t v333 = v272;
              uint64_t v334 = v150;
              closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v337, (uint64_t)&v336, (uint64_t)&v335);
              uint64_t v120 = 0;
              uint64_t v333 = v273;
              uint64_t v334 = v152;
              closure #1 in osLogInternal(_:log:type:)(&v333, (uint64_t)v337, (uint64_t)&v336, (uint64_t)&v335);
              _os_log_impl(&dword_25D85A000, v154, (os_log_type_t)v155, "#ContactDisambiguationStrategy<%s> allHaveSameIdentifier %{BOOL}d", v125, v135);
              destroyStorage<A>(_:count:)(v126, 0, v124);
              destroyStorage<A>(_:count:)(v127, 1, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x2611B9630](v125, MEMORY[0x263F8E778]);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }

          v233(v280, v285);
          int v119 = v344;
          return v119 & 1;
        }
        goto LABEL_59;
      }
    }
    if (v225)
    {
      swift_bridgeObjectRetain();
      uint64_t v197 = &v330;
      uint64_t v330 = v275;
      Collection.first.getter();
      outlined destroy of [SFCardSection]();
      id v198 = v331;
      if (v331)
      {
        id v196 = v198;
        id v194 = v198;
        id v195 = objc_msgSend(v198, sel_customIdentifier);
        if (v195)
        {
          id v193 = v195;
          id v188 = v195;
          uint64_t v189 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v190 = v33;

          uint64_t v191 = v189;
          uint64_t v192 = v190;
        }
        else
        {
          uint64_t v191 = 0;
          uint64_t v192 = 0;
        }
        uint64_t v185 = v192;
        uint64_t v184 = v191;

        uint64_t v186 = v184;
        uint64_t v187 = v185;
      }
      else
      {
        uint64_t v186 = 0;
        uint64_t v187 = 0;
      }
      uint64_t v182 = v187;
      uint64_t v183 = v186;
      if (v187)
      {
        uint64_t v180 = v183;
        uint64_t v181 = v182;
        uint64_t v34 = v227;
        uint64_t v175 = v182;
        uint64_t v177 = v183;
        uint64_t v328 = v183;
        uint64_t v329 = v182;
        uint64_t v327 = v275;
        swift_bridgeObjectRetain();
        uint64_t v176 = &v96;
        MEMORY[0x270FA5388](v259);
        uint64_t v35 = &v96 - 4;
        v35[2] = v177;
        v35[3] = v36;
        uint64_t result = Sequence.allSatisfy(_:)();
        uint64_t v178 = v34;
        int v179 = result;
        if (v34) {
          goto LABEL_60;
        }
        int v173 = v179;
        swift_bridgeObjectRelease();
        unsigned __int8 v344 = v173 & 1;
        swift_bridgeObjectRelease();
        uint64_t v174 = v178;
LABEL_44:
        uint64_t v200 = v174;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v171 = &v341;
    uint64_t v341 = v275;
    Collection.first.getter();
    outlined destroy of [SFCardSection]();
    id v172 = v342;
    if (v342)
    {
      id v170 = v172;
      id v166 = v172;
      id v167 = objc_msgSend(v172, sel_displayName);
      *(void *)&unsigned long long v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v168 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#PromptCancelled", 0x1EuLL, 1) = v37;

      unsigned long long v169 = v168;
    }
    else
    {
      unsigned long long v169 = 0uLL;
    }
    Swift::String v340 = (Swift::String)v169;
    if (*((void *)&v169 + 1))
    {
      Swift::String v343 = v340;
    }
    else
    {
      Swift::String v343 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      outlined destroy of String.UTF8View();
    }
    Swift::String v164 = v343;
    Swift::String v339 = v343;
    int v165 = String.isEmpty.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v165 & 1) == 0)
    {
      uint64_t v38 = v227;
      unint64_t v332 = v275;
      swift_bridgeObjectRetain();
      uint64_t v161 = &v96;
      MEMORY[0x270FA5388](v260);
      os_log_type_t v39 = &v96 - 4;
      v39[2] = v164._countAndFlagsBits;
      v39[3] = v40;
      int v41 = Sequence.allSatisfy(_:)();
      uint64_t v162 = v38;
      int v163 = v41;
      if (!v38)
      {
        int v158 = v163;
        swift_bridgeObjectRelease();
        int v159 = v158;
        uint64_t v160 = v162;
LABEL_42:
        uint64_t v157 = v160;
        int v156 = v159;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned __int8 v344 = v156 & 1;
        swift_bridgeObjectRelease();
        uint64_t v174 = v157;
        goto LABEL_44;
      }
      __break(1u);
    }
    int v159 = 0;
    uint64_t v160 = v227;
    goto LABEL_42;
  }
  __break(1u);
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t static ContactDisambiguationStrategy.handleType(for:)(uint64_t a1)
{
  uint64_t v203 = a1;
  unint64_t v229 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  int v231 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v235 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v182 = closure #1 in static ContactDisambiguationStrategy.handleType(for:);
  uint64_t v183 = closure #2 in static ContactDisambiguationStrategy.handleType(for:);
  uint64_t v184 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v185 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v186 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v188 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v189 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v190 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v191 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v192 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v196 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v197 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v198 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  int v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v281 = 0;
  uint64_t v280 = 0;
  uint64_t v202 = 0;
  char v273 = 0;
  char v271 = 0;
  uint64_t v215 = type metadata accessor for Logger();
  uint64_t v213 = *(void **)(v215 - 8);
  uint64_t v214 = v215 - 8;
  uint64_t v209 = v213[8];
  unint64_t v204 = (v209 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](v203);
  int v205 = (char *)v91 - v204;
  unint64_t v206 = v204;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v207 = (char *)v91 - v206;
  unint64_t v208 = (v209 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v210 = (char *)v91 - v208;
  unint64_t v211 = (v209 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v91 - v211;
  uint64_t v212 = (char *)v91 - v211;
  uint64_t v281 = v4;
  uint64_t v280 = v6;
  uint64_t v218 = v6[10];
  uint64_t v279 = v218;
  uint64_t v219 = v6[11];
  uint64_t v278 = v219;
  uint64_t v220 = v6[12];
  uint64_t v277 = v220;
  uint64_t v7 = Logger.payments.unsafeMutableAddressor();
  uint64_t v216 = (void (*)(char *, uint64_t, uint64_t))v213[2];
  uint64_t v217 = v213 + 2;
  v216(v5, v7, v215);
  uint64_t v233 = 7;
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = v219;
  uint64_t v10 = v220;
  uint64_t v11 = v221;
  uint64_t v230 = v8;
  void v8[2] = v218;
  void v8[3] = v9;
  v8[4] = v10;
  uint64_t v222 = *(void *)(v11 + 104);
  v8[5] = v222;
  uint32_t v246 = Logger.logObject.getter();
  int v247 = static os_log_type_t.debug.getter();
  int v225 = &v275;
  uint64_t v275 = 12;
  unint64_t v223 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v224 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v226 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v227 = v276;
  uint64_t v228 = 17;
  uint64_t v238 = swift_allocObject();
  *(unsigned char *)(v238 + 16) = 32;
  uint64_t v240 = swift_allocObject();
  *(unsigned char *)(v240 + 16) = 8;
  uint64_t v232 = 32;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v230;
  uint64_t v234 = v12;
  *(void *)(v12 + 16) = v229;
  *(void *)(v12 + 24) = v13;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v234;
  uint64_t v236 = v14;
  *(void *)(v14 + 16) = v231;
  *(void *)(v14 + 24) = v15;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v236;
  uint64_t v243 = v16;
  *(void *)(v16 + 16) = v235;
  *(void *)(v16 + 24) = v17;
  uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v241 = _allocateUninitializedArray<A>(_:)();
  uint64_t v244 = v18;
  swift_retain();
  uint64_t v19 = v238;
  uint64_t v20 = v244;
  *uint64_t v244 = v237;
  v20[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  uint64_t v21 = v240;
  uint64_t v22 = v244;
  v244[2] = v239;
  void v22[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  swift_retain();
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v243;
  uint64_t v24 = v244;
  v244[4] = v242;
  v24[5] = v23;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v246, (os_log_type_t)v247))
  {
    uint64_t v25 = v202;
    uint64_t v175 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v176 = createStorage<A>(capacity:type:)(0);
    uint64_t v177 = createStorage<A>(capacity:type:)(1);
    uint64_t v178 = &v252;
    uint64_t v252 = v175;
    int v179 = &v251;
    uint64_t v251 = v176;
    uint64_t v180 = &v250;
    uint64_t v250 = v177;
    serialize(_:at:)(2, &v252);
    serialize(_:at:)(1, v178);
    uint64_t v248 = v237;
    uint64_t v249 = v238;
    closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)v178, (uint64_t)v179, (uint64_t)v180);
    uint64_t v181 = v25;
    if (v25)
    {
      __break(1u);
    }
    else
    {
      uint64_t v248 = v239;
      uint64_t v249 = v240;
      closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)&v252, (uint64_t)&v251, (uint64_t)&v250);
      uint64_t v172 = 0;
      uint64_t v27 = v172;
      uint64_t v248 = v242;
      uint64_t v249 = v243;
      closure #1 in osLogInternal(_:log:type:)(&v248, (uint64_t)&v252, (uint64_t)&v251, (uint64_t)&v250);
      uint64_t v171 = v27;
      _os_log_impl(&dword_25D85A000, v246, (os_log_type_t)v247, "#ContactDisambiguationStrategy<%s> handleType(for:)", v175, v227);
      destroyStorage<A>(_:count:)(v176, 0, v174);
      destroyStorage<A>(_:count:)(v177, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v175, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v173 = v171;
    }
  }
  else
  {
    uint64_t v26 = v202;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v173 = v26;
  }
  uint64_t v28 = v173;

  int v165 = (void (*)(char *, uint64_t))v213[1];
  id v166 = v213 + 1;
  v165(v212, v215);
  uint64_t v274 = v203;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  unint64_t v168 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();
  uint64_t result = Sequence.allSatisfy(_:)();
  uint64_t v169 = v28;
  int v170 = result;
  if (v28)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    int v162 = v170;
    char v273 = v170 & 1;
    uint64_t v272 = v203;
    int v30 = Sequence.allSatisfy(_:)();
    uint64_t v163 = 0;
    int v164 = v30;
    int v161 = v30;
    char v271 = v30 & 1;
    if (v162)
    {
      id v31 = v210;
      uint64_t v32 = Logger.payments.unsafeMutableAddressor();
      v216(v31, v32, v215);
      uint64_t v151 = 7;
      uint64_t v33 = (void *)swift_allocObject();
      uint64_t v34 = v219;
      uint64_t v35 = v220;
      uint64_t v36 = v222;
      uint64_t v149 = v33;
      v33[2] = v218;
      v33[3] = v34;
      v33[4] = v35;
      v33[5] = v36;
      int v159 = Logger.logObject.getter();
      int v160 = static os_log_type_t.debug.getter();
      v257[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v147 = v258;
      uint64_t v148 = 17;
      uint64_t v154 = swift_allocObject();
      *(unsigned char *)(v154 + 16) = 32;
      uint64_t v155 = swift_allocObject();
      *(unsigned char *)(v155 + 16) = 8;
      uint64_t v150 = 32;
      uint64_t v37 = swift_allocObject();
      uint64_t v38 = v149;
      uint64_t v152 = v37;
      *(void *)(v37 + 16) = v196;
      *(void *)(v37 + 24) = v38;
      uint64_t v39 = swift_allocObject();
      uint64_t v40 = v152;
      uint64_t v153 = v39;
      *(void *)(v39 + 16) = v197;
      *(void *)(v39 + 24) = v40;
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = v153;
      uint64_t v157 = v41;
      *(void *)(v41 + 16) = v198;
      *(void *)(v41 + 24) = v42;
      uint64_t v156 = _allocateUninitializedArray<A>(_:)();
      int v158 = v43;
      swift_retain();
      uint64_t v44 = v154;
      uint64_t v45 = v158;
      *int v158 = v199;
      v45[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
      swift_retain();
      uint64_t v46 = v155;
      uint64_t v47 = v158;
      v158[2] = v200;
      v47[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
      swift_retain();
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v157;
      uint64_t v49 = v158;
      v158[4] = v201;
      v49[5] = v48;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v159, (os_log_type_t)v160))
      {
        uint64_t v50 = v163;
        uint64_t v140 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v141 = createStorage<A>(capacity:type:)(0);
        uint64_t v142 = createStorage<A>(capacity:type:)(1);
        uint64_t v143 = v257;
        v257[0] = v140;
        uint64_t v144 = &v256;
        uint64_t v256 = v141;
        uint64_t v145 = &v255;
        uint64_t v255 = v142;
        serialize(_:at:)(2, v257);
        serialize(_:at:)(1, v143);
        uint64_t v253 = v199;
        uint64_t v254 = v154;
        closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)v143, (uint64_t)v144, (uint64_t)v145);
        uint64_t v146 = v50;
        if (v50)
        {
          __break(1u);
        }
        else
        {
          uint64_t v253 = v200;
          uint64_t v254 = v155;
          closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)v257, (uint64_t)&v256, (uint64_t)&v255);
          uint64_t v138 = 0;
          uint64_t v253 = v201;
          uint64_t v254 = v157;
          closure #1 in osLogInternal(_:log:type:)(&v253, (uint64_t)v257, (uint64_t)&v256, (uint64_t)&v255);
          _os_log_impl(&dword_25D85A000, v159, (os_log_type_t)v160, "#ContactDisambiguationStrategy<%s> handleType(for:) found .allEmail", v140, v147);
          destroyStorage<A>(_:count:)(v141, 0, v139);
          destroyStorage<A>(_:count:)(v142, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v140, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v210, v215);
      return 1;
    }
    else if (v161)
    {
      uint64_t v51 = v207;
      uint64_t v52 = Logger.payments.unsafeMutableAddressor();
      v216(v51, v52, v215);
      uint64_t v127 = 7;
      uint64_t v53 = (void *)swift_allocObject();
      uint64_t v54 = v219;
      uint64_t v55 = v220;
      uint64_t v56 = v222;
      uint64_t v125 = v53;
      v53[2] = v218;
      v53[3] = v54;
      v53[4] = v55;
      v53[5] = v56;
      uint32_t v135 = Logger.logObject.getter();
      int v136 = static os_log_type_t.debug.getter();
      v263[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v123 = v264;
      uint64_t v124 = 17;
      uint64_t v130 = swift_allocObject();
      *(unsigned char *)(v130 + 16) = 32;
      uint64_t v131 = swift_allocObject();
      *(unsigned char *)(v131 + 16) = 8;
      uint64_t v126 = 32;
      uint64_t v57 = swift_allocObject();
      uint64_t v58 = v125;
      uint64_t v128 = v57;
      *(void *)(v57 + 16) = v190;
      *(void *)(v57 + 24) = v58;
      uint64_t v59 = swift_allocObject();
      uint64_t v60 = v128;
      uint64_t v129 = v59;
      *(void *)(v59 + 16) = v191;
      *(void *)(v59 + 24) = v60;
      uint64_t v61 = swift_allocObject();
      uint64_t v62 = v129;
      uint64_t v133 = v61;
      *(void *)(v61 + 16) = v192;
      *(void *)(v61 + 24) = v62;
      uint64_t v132 = _allocateUninitializedArray<A>(_:)();
      int v134 = v63;
      swift_retain();
      uint64_t v64 = v130;
      uint64_t v65 = v134;
      *int v134 = v193;
      v65[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v64;
      swift_retain();
      uint64_t v66 = v131;
      os_log_type_t v67 = v134;
      v134[2] = v194;
      v67[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
      swift_retain();
      unint64_t v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v133;
      uint64_t v69 = v134;
      v134[4] = v195;
      v69[5] = v68;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v135, (os_log_type_t)v136))
      {
        uint64_t v70 = v163;
        uint64_t v116 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v117 = createStorage<A>(capacity:type:)(0);
        uint64_t v118 = createStorage<A>(capacity:type:)(1);
        int v119 = v263;
        v263[0] = v116;
        uint64_t v120 = &v262;
        uint64_t v262 = v117;
        uint64_t v121 = &v261;
        uint64_t v261 = v118;
        serialize(_:at:)(2, v263);
        serialize(_:at:)(1, v119);
        uint64_t v259 = v193;
        uint64_t v260 = v130;
        closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)v119, (uint64_t)v120, (uint64_t)v121);
        uint64_t v122 = v70;
        if (v70)
        {
          __break(1u);
        }
        else
        {
          uint64_t v259 = v194;
          uint64_t v260 = v131;
          closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)v263, (uint64_t)&v262, (uint64_t)&v261);
          uint64_t v114 = 0;
          uint64_t v259 = v195;
          uint64_t v260 = v133;
          closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)v263, (uint64_t)&v262, (uint64_t)&v261);
          _os_log_impl(&dword_25D85A000, v135, (os_log_type_t)v136, "#ContactDisambiguationStrategy<%s> handleType(for:) found .allPhone", v116, v123);
          destroyStorage<A>(_:count:)(v117, 0, v115);
          destroyStorage<A>(_:count:)(v118, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v116, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v207, v215);
      return 0;
    }
    else
    {
      uint64_t v71 = v205;
      uint64_t v72 = Logger.payments.unsafeMutableAddressor();
      v216(v71, v72, v215);
      uint64_t v104 = 7;
      uint64_t v73 = (void *)swift_allocObject();
      uint64_t v74 = v219;
      uint64_t v75 = v220;
      uint64_t v76 = v222;
      uint64_t v102 = v73;
      v73[2] = v218;
      v73[3] = v74;
      v73[4] = v75;
      v73[5] = v76;
      uint64_t v112 = Logger.logObject.getter();
      int v113 = static os_log_type_t.debug.getter();
      v269[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v100 = v270;
      uint64_t v101 = 17;
      uint64_t v107 = swift_allocObject();
      *(unsigned char *)(v107 + 16) = 32;
      uint64_t v108 = swift_allocObject();
      *(unsigned char *)(v108 + 16) = 8;
      uint64_t v103 = 32;
      uint64_t v77 = swift_allocObject();
      uint64_t v78 = v102;
      uint64_t v105 = v77;
      *(void *)(v77 + 16) = v184;
      *(void *)(v77 + 24) = v78;
      uint64_t v79 = swift_allocObject();
      uint64_t v80 = v105;
      uint64_t v106 = v79;
      *(void *)(v79 + 16) = v185;
      *(void *)(v79 + 24) = v80;
      uint64_t v81 = swift_allocObject();
      uint64_t v82 = v106;
      uint64_t v110 = v81;
      *(void *)(v81 + 16) = v186;
      *(void *)(v81 + 24) = v82;
      uint64_t v109 = _allocateUninitializedArray<A>(_:)();
      uint64_t v111 = v83;
      swift_retain();
      uint64_t v84 = v107;
      uint64_t v85 = v111;
      *uint64_t v111 = v187;
      v85[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v84;
      swift_retain();
      uint64_t v86 = v108;
      uint64_t v87 = v111;
      v111[2] = v188;
      v87[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
      swift_retain();
      uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v110;
      uint64_t v89 = v111;
      v111[4] = v189;
      v89[5] = v88;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v112, (os_log_type_t)v113))
      {
        uint64_t v90 = v163;
        uint64_t v93 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v94 = createStorage<A>(capacity:type:)(0);
        uint64_t v95 = createStorage<A>(capacity:type:)(1);
        uint64_t v96 = v269;
        v269[0] = v93;
        uint64_t v97 = &v268;
        uint64_t v268 = v94;
        uint64_t v98 = &v267;
        uint64_t v267 = v95;
        serialize(_:at:)(2, v269);
        serialize(_:at:)(1, v96);
        uint64_t v265 = v187;
        uint64_t v266 = v107;
        closure #1 in osLogInternal(_:log:type:)(&v265, (uint64_t)v96, (uint64_t)v97, (uint64_t)v98);
        uint64_t v99 = v90;
        if (v90)
        {
          __break(1u);
        }
        else
        {
          uint64_t v265 = v188;
          uint64_t v266 = v108;
          closure #1 in osLogInternal(_:log:type:)(&v265, (uint64_t)v269, (uint64_t)&v268, (uint64_t)&v267);
          v91[1] = 0;
          uint64_t v265 = v189;
          uint64_t v266 = v110;
          closure #1 in osLogInternal(_:log:type:)(&v265, (uint64_t)v269, (uint64_t)&v268, (uint64_t)&v267);
          _os_log_impl(&dword_25D85A000, v112, (os_log_type_t)v113, "#ContactDisambiguationStrategy<%s> handleType(for:) found .phoneAndEmail", v93, v100);
          destroyStorage<A>(_:count:)(v94, 0, v92);
          destroyStorage<A>(_:count:)(v95, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v93, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v165(v205, v215);
      return 2;
    }
  }
  return result;
}

uint64_t closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v9 = a2;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v8 = 0;
  uint64_t v19 = type metadata accessor for ResponseType();
  uint64_t v17 = *(void *)(v19 - 8);
  uint64_t v18 = v19 - 8;
  unint64_t v6 = (*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = (char *)&v6 - v6;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLContextUpdate?);
  unint64_t v7 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v15 = (char *)&v6 - v7;
  uint64_t v22 = a1;
  uint64_t v21 = v4;
  unsigned int v13 = 1;
  unsigned int v12 = 0;
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  uint64_t v10 = *(void *)(v14 - 8);
  uint64_t v11 = v14 - 8;
  (*(void (**)(char *, uint64_t))(v10 + 16))(v15, v9);
  (*(void (**)(char *, void, void, uint64_t))(v10 + 56))(v15, v12, v13, v14);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, *MEMORY[0x263F6FA28], v19);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t default argument 1 of ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)()
{
  return CATGlobals.__allocating_init()();
}

uint64_t ContactDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](ContactDisambiguationStrategy.disambiguationPromptDialog(person:), 0);
}

uint64_t ContactDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  *(void *)(v0 + 16) = v0;
  lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
  swift_allocError();
  *(void *)uint64_t v1 = 11;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 17;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v2();
}

uint64_t closure #1 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  id v6 = objc_msgSend(*a1, sel_contactIdentifier);
  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v1;

    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (!v5)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  int v3 = String.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v3 ^ 1) & 1;
}

uint64_t closure #2 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  id v6 = objc_msgSend(*a1, sel_customIdentifier);
  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v1;

    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (!v5)
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of String.UTF8View();
  }
  int v3 = String.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v3 ^ 1) & 1;
}

uint64_t closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = *a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = objc_msgSend(v19, sel_contactIdentifier);
  if (v13)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v3;

    uint64_t v9 = v7;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRetain();
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = v9;
  uint64_t v16 = v10;
  if (!a3)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      char v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of DIIdentifier();
    char v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  char v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = *a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = objc_msgSend(v19, sel_customIdentifier);
  if (v13)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v3;

    uint64_t v9 = v7;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRetain();
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = v9;
  uint64_t v16 = v10;
  if (!a3)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      char v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of DIIdentifier();
    char v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  char v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  id v2 = objc_msgSend(*a1, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();

  return v3 & 1;
}

uint64_t implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(char a1)
{
  return a1 & 1;
}

uint64_t closure #1 in static ContactDisambiguationStrategy.handleType(for:)(id *a1)
{
  id v20 = 0;
  id v20 = *a1;
  id v12 = v20;
  char v13 = INPerson.hasHandleLabel.getter();
  id v1 = v20;
  if (v13) {
    char v11 = 1;
  }
  else {
    char v11 = INPerson.hasHandleValue.getter();
  }

  id v2 = v20;
  if (v11)
  {
    id v19 = objc_msgSend(v20, sel_personHandle);
    if (v19)
    {
      id v7 = v19;
      id v3 = v19;
      outlined destroy of SFRichText?(&v19);
      id v8 = objc_msgSend(v7, sel_type);

      id v9 = v8;
      char v10 = 0;
    }
    else
    {
      outlined destroy of SFRichText?(&v19);
      id v9 = 0;
      char v10 = 1;
    }
    id v15 = v9;
    char v16 = v10 & 1;
    uint64_t v17 = 1;
    char v18 = 0;
    if (v10 & 1) != 0 || (outlined init with copy of Int?((uint64_t)&v15, (uint64_t)&v14), (v18))
    {
      char v6 = 0;
    }
    else
    {
      type metadata accessor for INPersonHandleType();
      lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
      char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    char v5 = v6;
  }
  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t closure #2 in static ContactDisambiguationStrategy.handleType(for:)(id *a1)
{
  id v20 = 0;
  id v20 = *a1;
  id v12 = v20;
  char v13 = INPerson.hasHandleLabel.getter();
  id v1 = v20;
  if (v13) {
    char v11 = 1;
  }
  else {
    char v11 = INPerson.hasHandleValue.getter();
  }

  id v2 = v20;
  if (v11)
  {
    id v19 = objc_msgSend(v20, sel_personHandle);
    if (v19)
    {
      id v7 = v19;
      id v3 = v19;
      outlined destroy of SFRichText?(&v19);
      id v8 = objc_msgSend(v7, sel_type);

      id v9 = v8;
      char v10 = 0;
    }
    else
    {
      outlined destroy of SFRichText?(&v19);
      id v9 = 0;
      char v10 = 1;
    }
    id v15 = v9;
    char v16 = v10 & 1;
    uint64_t v17 = 2;
    char v18 = 0;
    if (v10 & 1) != 0 || (outlined init with copy of Int?((uint64_t)&v15, (uint64_t)&v14), (v18))
    {
      char v6 = 0;
    }
    else
    {
      type metadata accessor for INPersonHandleType();
      lazy protocol witness table accessor for type INPersonHandleType and conformance INPersonHandleType();
      char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    char v5 = v6;
  }
  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t ContactDisambiguationStrategy.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  outlined destroy of SFRichText?((id *)(v0 + 64));
  __swift_destroy_boxed_opaque_existential_0(v0 + 72);
  return v2;
}

uint64_t ContactDisambiguationStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ContactDisambiguationStrategyProviding.catFamily.getter in conformance ContactDisambiguationStrategy<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactDisambiguationStrategy.catFamily.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance ContactDisambiguationStrategy<A1, B1, C1>()
{
  return NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for ContactDisambiguationStrategy();
  return MEMORY[0x2611B6EF0](a1, v3, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactDisambiguationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = *v2;
  uint64_t v7 = v3 + 16;
  uint64_t v8 = v3 + 16;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v8 + 8);
  }
  else
  {
    **(void **)(v7 + 8) = a1;
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v8 + 8);
  }
  return v4();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  void *v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  char v13 = v5;
  v5[6] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v13[7] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  v13[2] = a4[10];
  v13[3] = v7;
  void v13[4] = v8;
  v13[5] = v9;
  uint64_t v10 = type metadata accessor for ContactDisambiguationStrategy();
  *uint64_t v6 = v13[6];
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66628](a1, a2, a3, v10, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = *v1;
  uint64_t v5 = v2 + 48;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v5 + 8);
  }
  return v3();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  char v13 = v5;
  v5[6] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v13[7] = v6;
  uint64_t v7 = a4[11];
  uint64_t v8 = a4[12];
  uint64_t v9 = a4[13];
  v13[2] = a4[10];
  v13[3] = v7;
  void v13[4] = v8;
  v13[5] = v9;
  uint64_t v10 = type metadata accessor for ContactDisambiguationStrategy();
  *uint64_t v6 = v13[6];
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66638](a1, a2, a3, v10, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v12 = v4;
  v4[6] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v12[7] = v5;
  uint64_t v6 = a3[11];
  uint64_t v7 = a3[12];
  uint64_t v8 = a3[13];
  v12[2] = a3[10];
  void v12[3] = v6;
  void v12[4] = v7;
  v12[5] = v8;
  uint64_t v9 = type metadata accessor for ContactDisambiguationStrategy();
  void *v5 = v12[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66630](a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v12 = v4;
  v4[6] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v12[7] = v5;
  uint64_t v6 = a3[11];
  uint64_t v7 = a3[12];
  uint64_t v8 = a3[13];
  v12[2] = a3[10];
  void v12[3] = v6;
  void v12[4] = v7;
  v12[5] = v8;
  uint64_t v9 = type metadata accessor for ContactDisambiguationStrategy();
  void *v5 = v12[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66648](a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>()
{
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v14 = v6;
  v6[6] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v14[7] = v7;
  uint64_t v8 = a5[11];
  uint64_t v9 = a5[12];
  uint64_t v10 = a5[13];
  v14[2] = a5[10];
  v14[3] = v8;
  v14[4] = v9;
  v14[5] = v10;
  uint64_t v11 = type metadata accessor for ContactDisambiguationStrategy();
  *uint64_t v7 = v14[6];
  v7[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F68168](a1, a2, a3, a4, v11, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v15 = v7;
  v7[6] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v15[7] = v8;
  uint64_t v9 = a6[11];
  uint64_t v10 = a6[12];
  uint64_t v11 = a6[13];
  v15[2] = a6[10];
  void v15[3] = v9;
  v15[4] = v10;
  v15[5] = v11;
  uint64_t v12 = type metadata accessor for ContactDisambiguationStrategy();
  *uint64_t v8 = v15[6];
  v8[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F68170](a1, a2, a3, a4, a5, v12, a7);
}

unint64_t implicit closure #1 in PayeeDisambiguationStrategy.init()()
{
  return type metadata accessor for INSendPaymentIntent();
}

uint64_t PayeeDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  v3[22] = v2;
  v3[21] = a2;
  v3[20] = a1;
  v3[14] = v3;
  v3[15] = 0;
  v3[16] = 0;
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[23] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[24] = swift_task_alloc();
  v3[15] = a2;
  v3[16] = v2;
  return MEMORY[0x270FA2498](PayeeDisambiguationStrategy.disambiguationPromptDialog(person:), 0);
}

uint64_t PayeeDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  *(void *)(v0 + 112) = v0;
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for SendPaymentCATs();
  uint64_t v31 = swift_dynamicCastClass();
  if (v31)
  {
    uint64_t v29 = v31;
  }
  else
  {
    swift_release();
    uint64_t v29 = 0;
  }
  v30[25] = v29;
  if (v29)
  {
    uint64_t v28 = (void *)v30[21];
    v30[17] = v29;
    id v1 = v28;
    if (v28)
    {
      uint64_t v25 = (void *)v30[21];
      uint64_t v26 = v30[23];
      uint64_t v22 = v30[22];
      v30[18] = v25;
      type metadata accessor for DialogPerson();
      id v2 = v25;
      swift_retain();
      outlined init with copy of GlobalsProviding(v22 + 24, (uint64_t)(v30 + 2));
      swift_release();
      uint64_t v24 = v30[5];
      uint64_t v23 = v30[6];
      __swift_project_boxed_opaque_existential_1(v30 + 2, v24);
      (*(void (**)(uint64_t))(v23 + 16))(v24);
      __swift_project_boxed_opaque_existential_1(v30 + 7, v30[10]);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v27 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      v30[26] = v27;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v30 + 7));
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v30 + 2));
      v30[19] = v27;
      SendPaymentSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 56))(v26, 0, 1);
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      v30[27] = v4;
      *uint64_t v4 = v30[14];
      v4[1] = PayeeDisambiguationStrategy.disambiguationPromptDialog(person:);
      uint64_t v5 = v30[23];
      uint64_t v6 = v30[20];
      return SendPaymentCATs.disambiguateSlotValue(slot:payee:)(v6, v5, v27);
    }
    uint64_t v18 = SendPaymentSlots.rawValue.getter(0);
    uint64_t v19 = v8;
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    v30[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v30[13] = v10;
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    type metadata accessor for INSendPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v21 = String.init(stringInterpolation:)();
    uint64_t v20 = v13;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v14 = v18;
    *(void *)(v14 + 8) = v19;
    *(Swift::String *)(v14 + 16) = v9;
    *(void *)(v14 + 32) = v21;
    *(void *)(v14 + 40) = v20;
    *(unsigned char *)(v14 + 48) = 9;
    swift_willThrow();
    swift_release();
  }
  else
  {
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SendPayment#DisambiguateSlotValue", 0x21uLL, 1);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v16 = v15;
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0;
    *(unsigned char *)(v16 + 48) = 6;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v30[14] + 8);
  return v17();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v1;
  v5[14] = *v1;
  v5[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = PayeeDisambiguationStrategy.disambiguationPromptDialog(person:);
  }
  else
  {
    uint64_t v4 = v5[23];
    swift_release();
    outlined destroy of SpeakableString?(v4);
    id v2 = PayeeDisambiguationStrategy.disambiguationPromptDialog(person:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  uint64_t v4;

  uint64_t v3 = *(id *)(v0 + 168);
  *(void *)(v0 + 112) = v0;
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(*(void *)(v0 + 112) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = v0[23];
  uint64_t v4 = (id)v0[21];
  v0[14] = v0;
  swift_release();
  outlined destroy of SpeakableString?(v3);
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0[14] + 8);
  return v1();
}

void *PayeeDisambiguationStrategy.__allocating_init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return PayeeDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, a2, a3, a4);
}

void *PayeeDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v17 = 0;
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v13 = a4;
  swift_retain();
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v12);
  id v4 = a3;
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v11);
  uint64_t v10 = ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)(a1, (uint64_t)v12, a3, (uint64_t)v11);
  swift_retain();
  uint64_t v17 = v10;
  __swift_destroy_boxed_opaque_existential_0(a4);

  __swift_destroy_boxed_opaque_existential_0(a2);
  swift_release();
  swift_release();
  return v10;
}

uint64_t PayeeDisambiguationStrategy.deinit()
{
  return ContactDisambiguationStrategy.deinit();
}

uint64_t PayeeDisambiguationStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t implicit closure #1 in PayerDisambiguationStrategy.init()()
{
  return type metadata accessor for INRequestPaymentIntent();
}

uint64_t PayerDisambiguationStrategy.disambiguationPromptDialog(person:)(uint64_t a1, uint64_t a2)
{
  v3[22] = v2;
  v3[21] = a2;
  v3[20] = a1;
  v3[14] = v3;
  v3[15] = 0;
  v3[16] = 0;
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[23] = swift_task_alloc();
  type metadata accessor for Locale();
  v3[24] = swift_task_alloc();
  v3[15] = a2;
  v3[16] = v2;
  return MEMORY[0x270FA2498](PayerDisambiguationStrategy.disambiguationPromptDialog(person:), 0);
}

uint64_t PayerDisambiguationStrategy.disambiguationPromptDialog(person:)()
{
  *(void *)(v0 + 112) = v0;
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for RequestPaymentCATs();
  uint64_t v31 = swift_dynamicCastClass();
  if (v31)
  {
    uint64_t v29 = v31;
  }
  else
  {
    swift_release();
    uint64_t v29 = 0;
  }
  v30[25] = v29;
  if (v29)
  {
    uint64_t v28 = (void *)v30[21];
    v30[17] = v29;
    id v1 = v28;
    if (v28)
    {
      uint64_t v25 = (void *)v30[21];
      uint64_t v27 = v30[23];
      uint64_t v22 = v30[22];
      v30[18] = v25;
      type metadata accessor for DialogPerson();
      id v2 = v25;
      swift_retain();
      outlined init with copy of GlobalsProviding(v22 + 24, (uint64_t)(v30 + 2));
      swift_release();
      uint64_t v24 = v30[5];
      uint64_t v23 = v30[6];
      __swift_project_boxed_opaque_existential_1(v30 + 2, v24);
      (*(void (**)(uint64_t))(v23 + 16))(v24);
      __swift_project_boxed_opaque_existential_1(v30 + 7, v30[10]);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v26 = DialogPerson.__allocating_init(namedPerson:locale:useConversationalName:)();
      v30[26] = v26;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v30 + 7));
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v30 + 2));
      v30[19] = v26;
      RequestPaymentSlots.rawValue.getter(0);
      String.toSpeakableString.getter();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for SpeakableString();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 56))(v27, 0, 1);
      id v4 = (void *)swift_task_alloc();
      v30[27] = v4;
      *id v4 = v30[14];
      v4[1] = PayerDisambiguationStrategy.disambiguationPromptDialog(person:);
      uint64_t v5 = v30[23];
      uint64_t v6 = v30[20];
      return RequestPaymentCATs.disambiguateSlotValue(slot:)(v6, v5);
    }
    uint64_t v18 = RequestPaymentSlots.rawValue.getter(0);
    uint64_t v19 = v8;
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    v30[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v30[13] = v10;
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    type metadata accessor for INRequestPaymentIntent();
    DefaultStringInterpolation.appendInterpolation(_:)();
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of String.UTF8View();
    uint64_t v21 = String.init(stringInterpolation:)();
    uint64_t v20 = v13;
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(void *)uint64_t v14 = v18;
    *(void *)(v14 + 8) = v19;
    *(Swift::String *)(v14 + 16) = v9;
    *(void *)(v14 + 32) = v21;
    *(void *)(v14 + 40) = v20;
    *(unsigned char *)(v14 + 48) = 9;
    swift_willThrow();
    swift_release();
  }
  else
  {
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequestPayment#DisambiguateSlotValue", 0x24uLL, 1);
    lazy protocol witness table accessor for type PaymentsError and conformance PaymentsError();
    swift_allocError();
    *(Swift::String *)uint64_t v16 = v15;
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = 0;
    *(unsigned char *)(v16 + 48) = 6;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v30[14] + 8);
  return v17();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v1;
  v4[14] = *v1;
  v4[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = PayerDisambiguationStrategy.disambiguationPromptDialog(person:);
  }
  else
  {
    outlined destroy of SpeakableString?(v4[23]);
    id v2 = PayeeDisambiguationStrategy.disambiguationPromptDialog(person:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  id v4;
  uint64_t v5;

  id v1 = v0[23];
  id v4 = (id)v0[21];
  v0[14] = v0;
  outlined destroy of SpeakableString?(v1);
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[14] + 8);
  return v2();
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v28 = type metadata accessor for PersonNameComponents();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v29 + 48))(a2, 1) == 1)
  {
    Class v18 = 0;
  }
  else
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a2, v28);
    Class v18 = isa;
  }
  if (a4)
  {
    uint64_t v15 = MEMORY[0x2611B9130](a3);
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (a7)
  {
    uint64_t v13 = MEMORY[0x2611B9130](a6);
    swift_bridgeObjectRelease();
    uint64_t v14 = (void *)v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (a9)
  {
    uint64_t v11 = MEMORY[0x2611B9130](a8);
    swift_bridgeObjectRelease();
    Swift::String v12 = (void *)v11;
  }
  else
  {
    Swift::String v12 = 0;
  }
  id v10 = objc_msgSend(v26, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_, a1, v18, v16, a5, v14);

  return v10;
}

uint64_t sub_25D92A304()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A330()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  uint64_t v21 = a6;
  v13[1] = a7;
  uint64_t v14 = partial apply for closure #1 in serialize<A>(_:at:);
  uint64_t v25 = a6;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = a6 - 8;
  v13[0] = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = (uint64_t)v13 - v13[0];
  v8(v7);
  uint64_t v16 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  uint64_t v23 = *v17;
  uint64_t v24 = v23 + v16;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v20, v14, (uint64_t)v22, v21, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  uint64_t v9 = v18;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  *v17 += v16;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  uint64_t v21 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = a5 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v18 = (char *)&v12 - v16;
  uint64_t v20 = v9 + *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t result = v17();
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v18, v12);
  }
  return result;
}

uint64_t sub_25D92A61C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A65C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A69C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A6DC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A708()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A734()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A774()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A7B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A7F4()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_25D92A868()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A894()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A8C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A900()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A940()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A980()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A9CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92A9F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AA24()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AA64()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AAA4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AAE4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AB30()
{
  uint64_t v2 = *(void *)(type metadata accessor for ParameterResolutionRecord() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  type metadata accessor for ParameterResolutionRecord();

  return implicit closure #2 in ContactDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)();
}

uint64_t sub_25D92ACC0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92ACEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AD18()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AD58()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AD98()
{
  return swift_deallocObject();
}

uint64_t sub_25D92ADD8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92AE04()
{
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25D92AE94()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7 = (id)a4();
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  id v4 = *a2;
  if (*a2)
  {
    *id v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {
  }
}

uint64_t sub_25D92B024()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_25D92B070()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B0BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B0FC()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  unint64_t v1 = lazy protocol witness table accessor for type [INPerson] and conformance [A]();

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [INPerson] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [INPerson] and conformance [A];
  if (!lazy protocol witness table cache variable for type [INPerson] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [INPerson]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [INPerson] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25D92B220()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B24C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B278()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B2B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B2F8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B338()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B364()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B390()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B3D0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B494()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B4E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B50C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B538()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B578()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B5B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B5F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return implicit closure #8 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t sub_25D92B640()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>)
                 - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #9 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(v2);
}

uint64_t sub_25D92B77C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B7A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B7D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B814()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B854()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B880()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B8AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B8EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1)
{
  return closure #1 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_25D92B958()
{
  return swift_deallocObject();
}

uint64_t sub_25D92B9A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return specialized implicit closure #16 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t sub_25D92B9E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BA0C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BA38()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BA78()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BAB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BAF8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BB24()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BB50()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BB90()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BBD0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BBFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BC28()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BC68()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BD2C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BD78()
{
  return swift_deallocObject();
}

NSJSONWritingOptions partial apply for implicit closure #21 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return NSJSONWritingOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_25D92BDAC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BDD8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BE04()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BE44()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BE84()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BEC4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BEF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92BF1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_25D92BF68()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];

  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_25D92C098()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C0E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C110()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C13C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C17C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C1BC()
{
  return swift_deallocObject();
}

void *outlined init with take of PersonNameComponents?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for PersonNameComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PersonNameComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *outlined init with copy of String(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

uint64_t sub_25D92C414()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C460()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #13 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return specialized implicit closure #11 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 16));
}

uint64_t sub_25D92C4A8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C4D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C500()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C540()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C580()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C5C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C5EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C618()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C658()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C698()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C6E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C724()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C750()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C77C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C7BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C7FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C83C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C868()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C894()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C8D4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C914()
{
  return swift_deallocObject();
}

uint64_t sub_25D92C960()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  return implicit closure #7 in ContactDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(*(void **)(v0 + 48));
}

uint64_t sub_25D92C9E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CA10()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CA3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CA7C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CABC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CAFC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CB28()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CB54()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CB94()
{
  return swift_deallocObject();
}

uint64_t outlined consume of PaymentsDirectInvocations?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of PaymentsDirectInvocations(result, a2, a3);
  }
  return result;
}

uint64_t sub_25D92CC24()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CC70()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CCB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CCDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CD08()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CD48()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CD88()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CDC8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CDF4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CE20()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CE60()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CEA0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CEEC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CF18()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CF44()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CF70()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CFB0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92CFF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D030()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D05C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D088()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D0C8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D108()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D154()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D180()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D1AC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D1EC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D22C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D26C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D2B8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D2E4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D310()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D350()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D390()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #1 in ContactDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_25D92D3D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D424()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D450()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D47C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D4BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D4FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D53C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D588()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D5B4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D5E0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D620()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D660()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D6A0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D6EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)()
{
  return implicit closure #6 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(*(unsigned char *)(v0 + 16) & 1);
}

uint64_t sub_25D92D724()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D750()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D77C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D7BC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D7FC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D83C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92D868()
{
  return swift_deallocObject();
}

BOOL implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return (a1() & 1) != 0;
}

uint64_t sub_25D92D8E8()
{
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25D92D95C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_25D92D9E4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int32)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_25D92DA30()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)partial apply(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  uint64_t v5 = MEMORY[0x263F8E548];

  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  return closure #5 in implicit closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1) & 1;
}

uint64_t partial apply for closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  return closure #4 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t partial apply for closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(id *a1)
{
  return closure #3 in static ContactDisambiguationStrategy.allHaveSameIdentifier(recipients:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_25D92DBF0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DC3C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DC68()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DC94()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DCD4()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DD14()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DD54()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DDA0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DDCC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DDF8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DE38()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DE78()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DEB8()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DF04()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DF30()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DF5C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DF9C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92DFDC()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E01C()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E068()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E094()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E0C0()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E100()
{
  return swift_deallocObject();
}

uint64_t sub_25D92E140()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for ContactDisambiguationStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for ContactDisambiguationStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PayeeDisambiguationStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for PayeeDisambiguationStrategy;
  if (!type metadata singleton initialization cache for PayeeDisambiguationStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for PayeeDisambiguationStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for PayerDisambiguationStrategy()
{
  uint64_t v1 = type metadata singleton initialization cache for PayerDisambiguationStrategy;
  if (!type metadata singleton initialization cache for PayerDisambiguationStrategy) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t instantiation function for generic protocol witness table for ContactDisambiguationStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in ContactDisambiguationStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for NeedsDisambiguationFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactDisambiguationStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t PaymentsBaseCATs.buttonCancel(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonCancel()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.buttonCancel(), 0);
}

uint64_t PaymentsBaseCATs.buttonCancel()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonCancel", 0x19uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonCancel", 0x19uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonYes(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.buttonYes()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.buttonYes(), 0);
}

uint64_t PaymentsBaseCATs.buttonYes()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonYes", 0x16uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ButtonYes", 0x16uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.confirmApp(app:completion:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.confirmApp(app:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  void v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.confirmApp(app:), 0);
}

uint64_t PaymentsBaseCATs.confirmApp(app:)()
{
  uint64_t v11 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  v0[8] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (v11)
  {
    uint64_t v8 = v9[6];
    v10[2]._object = (void *)type metadata accessor for SirikitApp();
    v10[1]._uint64_t countAndFlagsBits = v8;
  }
  else
  {
    v10[1]._uint64_t countAndFlagsBits = 0;
    v10[1]._object = 0;
    v10[2]._uint64_t countAndFlagsBits = 0;
    v10[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v9[9] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v3 = (void *)swift_task_alloc();
  v9[10] = v3;
  *uint64_t v3 = v9[2];
  v3[1] = RequestPaymentCATs.intentConfirmationPrompt(paymentsConcept:);
  uint64_t v4 = v9[5];
  return v7(v4, v1._countAndFlagsBits, v1._object, v6);
}

uint64_t PaymentsBaseCATs.confirmApp(app:)(uint64_t a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ConfirmApp", 0x17uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  *Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app", 3uLL, 1);
  swift_retain();
  if (a1)
  {
    v3[2]._object = (void *)type metadata accessor for SirikitApp();
    v3[1]._uint64_t countAndFlagsBits = a1;
  }
  else
  {
    v3[1]._uint64_t countAndFlagsBits = 0;
    v3[1]._object = 0;
    v3[2]._uint64_t countAndFlagsBits = 0;
    v3[2]._object = 0;
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.disambiguateApp(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.disambiguateApp()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.disambiguateApp(), 0);
}

uint64_t PaymentsBaseCATs.disambiguateApp()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#DisambiguateApp", 0x1CuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:completion:)(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  unint64_t v42 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v49);
  uint64_t v43 = (char *)v33 - v42;
  unint64_t v44 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)v33 - v44;
  uint64_t v62 = v8;
  uint64_t v61 = v9;
  uint64_t v60 = v10;
  uint64_t v58 = v11;
  uint64_t v59 = v12;
  uint64_t v57 = v5;
  unsigned int v50 = 1;
  Swift::String v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v47 = _allocateUninitializedArray<A>(_:)();
  uint64_t v48 = v13;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v50 & 1);
  uint64_t v15 = v49;
  unint64_t v16 = v51;
  *uint64_t v48 = v14;
  outlined init with copy of SpeakableString?(v15, v16);
  uint64_t v52 = type metadata accessor for SpeakableString();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  uint64_t v55 = *(unsigned int (**)(char *, void))(v53 + 48);
  uint64_t v56 = v53 + 48;
  if (v55(v51, v50) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v51);
    uint64_t v32 = v48;
    v48[1]._uint64_t countAndFlagsBits = 0;
    v32[1]._object = 0;
    v32[2]._uint64_t countAndFlagsBits = 0;
    v32[2]._object = 0;
  }
  else
  {
    uint64_t v17 = v48;
    v48[2]._object = (void *)v52;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v17[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(boxed_opaque_existential_1, v51, v52);
  }
  Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v48[3] = v19;
  swift_retain();
  if (v38)
  {
    uint64_t v37 = v38;
    uint64_t v36 = v38;
    uint64_t v20 = type metadata accessor for PaymentsDialogConcept();
    uint64_t v21 = v48;
    uint64_t v22 = v36;
    v48[5]._object = (void *)v20;
    v21[4]._uint64_t countAndFlagsBits = v22;
  }
  else
  {
    uint64_t v31 = v48;
    v48[4]._uint64_t countAndFlagsBits = 0;
    v31[4]._object = 0;
    v31[5]._uint64_t countAndFlagsBits = 0;
    v31[5]._object = 0;
  }
  uint64_t v34 = v48 + 7;
  unsigned int v35 = 1;
  Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  uint64_t v24 = v39;
  uint64_t v25 = v43;
  v48[6] = v23;
  outlined init with copy of SpeakableString?(v24, v25);
  if (((unsigned int (*)(char *, void, uint64_t))v55)(v43, v35, v52) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v43);
    int v30 = v48;
    v48[7]._uint64_t countAndFlagsBits = 0;
    v30[7]._object = 0;
    v30[8]._uint64_t countAndFlagsBits = 0;
    v30[8]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v34->_countAndFlagsBits;
    v48[8]._object = (void *)v52;
    uint64_t v27 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(v27, v43, v52);
  }
  uint64_t v28 = v47;
  _finalizeUninitializedArray<A>(_:)();
  v33[1] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v33[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = v4;
  v5[10] = a4;
  v5[9] = a3;
  v5[8] = a2;
  v5[7] = a1;
  void v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:), 0);
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)()
{
  Swift::String v19 = (void *)v0[13];
  uint64_t v18 = (const void *)v0[8];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  v0[14] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v17 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  outlined init with copy of SpeakableString?(v18, v19);
  uint64_t v20 = type metadata accessor for SpeakableString();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(void *, uint64_t))(v21 + 48);
  if (v22(v19, 1) == 1)
  {
    outlined destroy of SpeakableString?(v16[13]);
    v17[1]._uint64_t countAndFlagsBits = 0;
    v17[1]._object = 0;
    v17[2]._uint64_t countAndFlagsBits = 0;
    v17[2]._object = 0;
  }
  else
  {
    uint64_t v15 = v16[13];
    v17[2]._object = (void *)v20;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v17[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 32))(boxed_opaque_existential_1, v15, v20);
  }
  uint64_t v14 = v16[9];
  void v17[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  swift_retain();
  if (v14)
  {
    uint64_t v13 = v16[9];
    v17[5]._object = (void *)type metadata accessor for PaymentsDialogConcept();
    v17[4]._uint64_t countAndFlagsBits = v13;
  }
  else
  {
    v17[4]._uint64_t countAndFlagsBits = 0;
    v17[4]._object = 0;
    v17[5]._uint64_t countAndFlagsBits = 0;
    v17[5]._object = 0;
  }
  uint64_t v12 = (void *)v16[12];
  uint64_t v11 = (const void *)v16[10];
  v17[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v11, v12);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v22)(v12, 1, v20) == 1)
  {
    outlined destroy of SpeakableString?(v16[12]);
    v17[7]._uint64_t countAndFlagsBits = 0;
    v17[7]._object = 0;
    v17[8]._uint64_t countAndFlagsBits = 0;
    v17[8]._object = 0;
  }
  else
  {
    uint64_t v10 = v16[12];
    v17[8]._object = (void *)v20;
    uint64_t v4 = __swift_allocate_boxed_opaque_existential_1(&v17[7]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 32))(v4, v10, v20);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v8 = KeyValuePairs.init(dictionaryLiteral:)();
  v16[15] = v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v5 = (void *)swift_task_alloc();
  v16[16] = v5;
  void *v5 = v16[2];
  v5[1] = PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:);
  uint64_t v6 = v16[7];
  return v9(v6, v1._countAndFlagsBits, v1._object, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t PaymentsBaseCATs.errorWithCode(errorCode:paymentsConcept:intentType:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  Swift::String v45 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v56 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  unint64_t v38 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v45);
  uint64_t v39 = (char *)v30 - v38;
  unint64_t v40 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v47 = (char *)v30 - v40;
  uint64_t v56 = v7;
  uint64_t v55 = v8;
  uint64_t v54 = v9;
  uint64_t v53 = v4;
  unsigned int v46 = 1;
  Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#ErrorWithCode", 0x1AuLL, 1);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v43 = _allocateUninitializedArray<A>(_:)();
  unint64_t v44 = v10;
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, v46 & 1);
  uint64_t v12 = v45;
  uint64_t v13 = v47;
  *unint64_t v44 = v11;
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v48 = type metadata accessor for SpeakableString();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v48 - 8;
  uint64_t v51 = *(unsigned int (**)(char *, void))(v49 + 48);
  uint64_t v52 = v49 + 48;
  if (v51(v47, v46) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v47);
    uint64_t v29 = v44;
    v44[1]._uint64_t countAndFlagsBits = 0;
    v29[1]._object = 0;
    v29[2]._uint64_t countAndFlagsBits = 0;
    v29[2]._object = 0;
  }
  else
  {
    uint64_t v14 = v44;
    v44[2]._object = (void *)v48;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v14[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(boxed_opaque_existential_1, v47, v48);
  }
  Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paymentsConcept", 0xFuLL, 1);
  v44[3] = v16;
  swift_retain();
  if (v36)
  {
    uint64_t v34 = v36;
    uint64_t v33 = v36;
    uint64_t v17 = type metadata accessor for PaymentsDialogConcept();
    uint64_t v18 = v44;
    uint64_t v19 = v33;
    v44[5]._object = (void *)v17;
    v18[4]._uint64_t countAndFlagsBits = v19;
  }
  else
  {
    uint64_t v28 = v44;
    v44[4]._uint64_t countAndFlagsBits = 0;
    v28[4]._object = 0;
    v28[5]._uint64_t countAndFlagsBits = 0;
    v28[5]._object = 0;
  }
  uint64_t v31 = v44 + 7;
  unsigned int v32 = 1;
  Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("intentType", 0xAuLL, 1);
  uint64_t v21 = v37;
  uint64_t v22 = v39;
  v44[6] = v20;
  outlined init with copy of SpeakableString?(v21, v22);
  if (((unsigned int (*)(char *, void, uint64_t))v51)(v39, v32, v48) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v39);
    uint64_t v27 = v44;
    v44[7]._uint64_t countAndFlagsBits = 0;
    v27[7]._object = 0;
    v27[8]._uint64_t countAndFlagsBits = 0;
    v27[8]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v31->_countAndFlagsBits;
    v44[8]._object = (void *)v48;
    uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v24, v39, v48);
  }
  uint64_t v25 = v43;
  _finalizeUninitializedArray<A>(_:)();
  v30[0] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v30[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.knownIntentResponse(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.knownIntentResponse()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.knownIntentResponse(), 0);
}

uint64_t PaymentsBaseCATs.knownIntentResponse()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#KnownIntentResponse", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#KnownIntentResponse", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:completion:)(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a1;
  Swift::String v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v62 = 0;
  unint64_t v45 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v54);
  unsigned int v46 = (char *)v36 - v45;
  unint64_t v47 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v48 = (char *)v36 - v47;
  unint64_t v49 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v56 = (char *)v36 - v49;
  uint64_t v67 = v10;
  uint64_t v66 = v11;
  uint64_t v65 = v12;
  uint64_t v63 = v13;
  uint64_t v64 = v14;
  uint64_t v62 = v5;
  unsigned int v55 = 1;
  Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v52 = _allocateUninitializedArray<A>(_:)();
  uint64_t v53 = v15;
  Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v55 & 1);
  uint64_t v17 = v54;
  uint64_t v18 = v56;
  *uint64_t v53 = v16;
  outlined init with copy of SpeakableString?(v17, v18);
  uint64_t v57 = type metadata accessor for SpeakableString();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v57 - 8;
  uint64_t v60 = *(unsigned int (**)(char *, void))(v58 + 48);
  uint64_t v61 = v58 + 48;
  if (v60(v56, v55) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v56);
    uint64_t v35 = v53;
    v53[1]._uint64_t countAndFlagsBits = 0;
    v35[1]._object = 0;
    v35[2]._uint64_t countAndFlagsBits = 0;
    v35[2]._object = 0;
  }
  else
  {
    uint64_t v19 = v53;
    v53[2]._object = (void *)v57;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v19[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(boxed_opaque_existential_1, v56, v57);
  }
  uint64_t v39 = v53 + 4;
  unsigned int v40 = 1;
  Swift::String v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  uint64_t v22 = v41;
  uint64_t v23 = v48;
  v53[3] = v21;
  outlined init with copy of SpeakableString?(v22, v23);
  if (((unsigned int (*)(char *, void, uint64_t))v60)(v48, v40, v57) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v48);
    uint64_t v34 = v53;
    v53[4]._uint64_t countAndFlagsBits = 0;
    v34[4]._object = 0;
    v34[5]._uint64_t countAndFlagsBits = 0;
    v34[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v39->_countAndFlagsBits;
    v53[5]._object = (void *)v57;
    uint64_t v25 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(v25, v48, v57);
  }
  uint64_t v37 = v53 + 7;
  unsigned int v38 = 1;
  Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  uint64_t v27 = v42;
  uint64_t v28 = v46;
  v53[6] = v26;
  outlined init with copy of SpeakableString?(v27, v28);
  if (((unsigned int (*)(char *, void, uint64_t))v60)(v46, v38, v57) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v46);
    uint64_t v33 = v53;
    v53[7]._uint64_t countAndFlagsBits = 0;
    v33[7]._object = 0;
    v33[8]._uint64_t countAndFlagsBits = 0;
    v33[8]._object = 0;
  }
  else
  {
    uint64_t v29 = &v37->_countAndFlagsBits;
    v53[8]._object = (void *)v57;
    int v30 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(v30, v46, v57);
  }
  uint64_t v31 = v52;
  _finalizeUninitializedArray<A>(_:)();
  v36[1] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v36[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = v4;
  v5[10] = a4;
  v5[9] = a3;
  v5[8] = a2;
  v5[7] = a1;
  void v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v4;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:), 0);
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)()
{
  Swift::String v21 = (void *)v0[14];
  Swift::String v20 = (const void *)v0[8];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  v0[15] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v19 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v20, v21);
  uint64_t v22 = type metadata accessor for SpeakableString();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(void *, uint64_t))(v23 + 48);
  if (v24(v21, 1) == 1)
  {
    outlined destroy of SpeakableString?(v18[14]);
    v19[1]._uint64_t countAndFlagsBits = 0;
    v19[1]._object = 0;
    v19[2]._uint64_t countAndFlagsBits = 0;
    v19[2]._object = 0;
  }
  else
  {
    uint64_t v17 = v18[14];
    v19[2]._object = (void *)v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v19[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v17, v22);
  }
  Swift::String v16 = (void *)v18[13];
  uint64_t v15 = (const void *)v18[9];
  v19[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  outlined init with copy of SpeakableString?(v15, v16);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v24)(v16, 1, v22) == 1)
  {
    outlined destroy of SpeakableString?(v18[13]);
    v19[4]._uint64_t countAndFlagsBits = 0;
    v19[4]._object = 0;
    v19[5]._uint64_t countAndFlagsBits = 0;
    v19[5]._object = 0;
  }
  else
  {
    uint64_t v14 = v18[13];
    v19[5]._object = (void *)v22;
    uint64_t v4 = __swift_allocate_boxed_opaque_existential_1(&v19[4]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 32))(v4, v14, v22);
  }
  uint64_t v13 = (void *)v18[12];
  uint64_t v12 = (const void *)v18[10];
  v19[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v24)(v13, 1, v22) == 1)
  {
    outlined destroy of SpeakableString?(v18[12]);
    v19[7]._uint64_t countAndFlagsBits = 0;
    v19[7]._object = 0;
    v19[8]._uint64_t countAndFlagsBits = 0;
    v19[8]._object = 0;
  }
  else
  {
    uint64_t v11 = v18[12];
    v19[8]._object = (void *)v22;
    uint64_t v5 = __swift_allocate_boxed_opaque_existential_1(&v19[7]._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 32))(v5, v11, v22);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v9 = KeyValuePairs.init(dictionaryLiteral:)();
  v18[16] = v9;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v6 = (void *)swift_task_alloc();
  v18[17] = v6;
  *uint64_t v6 = v18[2];
  v6[1] = PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:);
  uint64_t v7 = v18[7];
  return v10(v7, v1._countAndFlagsBits, v1._object, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t PaymentsBaseCATs.labelForEnum(accountType:amountType:balanceType:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a4;
  Swift::String v50 = a1;
  uint64_t v39 = a2;
  unsigned int v40 = a3;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  unint64_t v41 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v50);
  uint64_t v42 = (char *)v33 - v41;
  unint64_t v43 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v44 = (char *)v33 - v43;
  unint64_t v45 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v52 = (char *)v33 - v45;
  uint64_t v61 = v9;
  uint64_t v60 = v10;
  uint64_t v59 = v11;
  uint64_t v58 = v4;
  unsigned int v51 = 1;
  Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForEnum", 0x19uLL, 1);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v48 = _allocateUninitializedArray<A>(_:)();
  unint64_t v49 = v12;
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, v51 & 1);
  uint64_t v14 = v50;
  uint64_t v15 = v52;
  *unint64_t v49 = v13;
  outlined init with copy of SpeakableString?(v14, v15);
  uint64_t v53 = type metadata accessor for SpeakableString();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = v53 - 8;
  uint64_t v56 = *(unsigned int (**)(char *, void))(v54 + 48);
  uint64_t v57 = v54 + 48;
  if (v56(v52, v51) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v52);
    unsigned int v32 = v49;
    v49[1]._uint64_t countAndFlagsBits = 0;
    v32[1]._object = 0;
    v32[2]._uint64_t countAndFlagsBits = 0;
    v32[2]._object = 0;
  }
  else
  {
    Swift::String v16 = v49;
    v49[2]._object = (void *)v53;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v16[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(boxed_opaque_existential_1, v52, v53);
  }
  uint64_t v36 = v49 + 4;
  unsigned int v37 = 1;
  Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amountType", 0xAuLL, 1);
  uint64_t v19 = v39;
  Swift::String v20 = v44;
  void v49[3] = v18;
  outlined init with copy of SpeakableString?(v19, v20);
  if (((unsigned int (*)(char *, void, uint64_t))v56)(v44, v37, v53) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v44);
    uint64_t v31 = v49;
    v49[4]._uint64_t countAndFlagsBits = 0;
    v31[4]._object = 0;
    v31[5]._uint64_t countAndFlagsBits = 0;
    v31[5]._object = 0;
  }
  else
  {
    p_uint64_t countAndFlagsBits = &v36->_countAndFlagsBits;
    v49[5]._object = (void *)v53;
    uint64_t v22 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(v22, v44, v53);
  }
  uint64_t v34 = v49 + 7;
  unsigned int v35 = 1;
  Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balanceType", 0xBuLL, 1);
  uint64_t v24 = v40;
  uint64_t v25 = v42;
  v49[6] = v23;
  outlined init with copy of SpeakableString?(v24, v25);
  if (((unsigned int (*)(char *, void, uint64_t))v56)(v42, v35, v53) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v42);
    int v30 = v49;
    v49[7]._uint64_t countAndFlagsBits = 0;
    v30[7]._object = 0;
    v30[8]._uint64_t countAndFlagsBits = 0;
    v30[8]._object = 0;
  }
  else
  {
    Swift::String v26 = &v34->_countAndFlagsBits;
    v49[8]._object = (void *)v53;
    uint64_t v27 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(v27, v42, v53);
  }
  uint64_t v28 = v48;
  _finalizeUninitializedArray<A>(_:)();
  v33[0] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v33[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForPreferences(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.labelForPreferences()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.labelForPreferences(), 0);
}

uint64_t PaymentsBaseCATs.labelForPreferences()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForPreferences", 0x20uLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#LabelForPreferences", 0x20uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent(), 0);
}

uint64_t PaymentsBaseCATs.noAppFoundOnDeviceToSupportIntent()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoAppFoundOnDeviceToSupportIntent", 0x2EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoAppFoundOnDeviceToSupportIntent", 0x2EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noResultsResponse(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.noResultsResponse()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.noResultsResponse(), 0);
}

uint64_t PaymentsBaseCATs.noResultsResponse()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoResultsResponse", 0x1EuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#NoResultsResponse", 0x1EuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  Swift::String v21 = a1;
  v15[4] = a2;
  v15[5] = a3;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v23 = (char *)v15 - v16;
  uint64_t v30 = MEMORY[0x270FA5388](v21);
  uint64_t v28 = v4;
  uint64_t v29 = v5;
  uint64_t v27 = v3;
  unsigned int v22 = 1;
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v19 = _allocateUninitializedArray<A>(_:)();
  Swift::String v20 = v6;
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, v22 & 1);
  uint64_t v8 = v21;
  uint64_t v9 = v23;
  Swift::String *v20 = v7;
  outlined init with copy of SpeakableString?(v8, v9);
  uint64_t v24 = type metadata accessor for SpeakableString();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  if ((*(unsigned int (**)(char *, void))(v25 + 48))(v23, v22) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v23);
    uint64_t v14 = v20;
    v20[1]._uint64_t countAndFlagsBits = 0;
    v14[1]._object = 0;
    v14[2]._uint64_t countAndFlagsBits = 0;
    v14[2]._object = 0;
  }
  else
  {
    uint64_t v10 = v20;
    v20[2]._object = (void *)v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v10[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
  }
  uint64_t v12 = v19;
  _finalizeUninitializedArray<A>(_:)();
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v15[2] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)(uint64_t a1, uint64_t a2)
{
  v3[7] = v2;
  void v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[8] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.slotDisplayValue(slotName:), 0);
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)()
{
  Swift::String v13 = (void *)v0[8];
  uint64_t v12 = (const void *)v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  v0[9] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  p_uint64_t countAndFlagsBits = &v2->_countAndFlagsBits;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, 1);
  outlined init with copy of SpeakableString?(v12, v13);
  uint64_t v14 = type metadata accessor for SpeakableString();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v15 + 48))(v13, 1) == 1)
  {
    outlined destroy of SpeakableString?(v10[8]);
    p_countAndFlagsBits[2] = 0;
    p_countAndFlagsBits[3] = 0;
    p_countAndFlagsBits[4] = 0;
    p_countAndFlagsBits[5] = 0;
  }
  else
  {
    uint64_t v9 = v10[8];
    p_countAndFlagsBits[5] = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(p_countAndFlagsBits + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v9, v14);
  }
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v7 = KeyValuePairs.init(dictionaryLiteral:)();
  v10[10] = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v4 = (void *)swift_task_alloc();
  v10[11] = v4;
  *uint64_t v4 = v10[2];
  v4[1] = RequestPaymentCATs.disambiguateSlotValue(slot:);
  uint64_t v5 = v10[5];
  return v8(v5, v1._countAndFlagsBits, v1._object, v7);
}

uint64_t PaymentsBaseCATs.slotDisplayValue(slotName:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = a2;
  uint64_t v18 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v13 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v20 = (char *)v12 - v13;
  uint64_t v25 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = v2;
  unsigned int v19 = 1;
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#SlotDisplayValue", 0x1DuLL, 1);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  uint64_t v16 = _allocateUninitializedArray<A>(_:)();
  Swift::String v17 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("slotName", 8uLL, v19 & 1);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  *Swift::String v17 = v4;
  outlined init with copy of SpeakableString?(v5, v6);
  uint64_t v21 = type metadata accessor for SpeakableString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  if ((*(unsigned int (**)(char *, void))(v22 + 48))(v20, v19) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v20);
    uint64_t v11 = v17;
    v17[1]._uint64_t countAndFlagsBits = 0;
    v11[1]._object = 0;
    v11[2]._uint64_t countAndFlagsBits = 0;
    v11[2]._object = 0;
  }
  else
  {
    uint64_t v7 = v17;
    v17[2]._object = (void *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v7[1]._countAndFlagsBits);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v20, v21);
  }
  uint64_t v9 = v16;
  _finalizeUninitializedArray<A>(_:)();
  v12[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12[1] = KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch(completion:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch()(uint64_t a1)
{
  v2[5] = v1;
  void v2[4] = a1;
  void v2[2] = v2;
  v2[3] = 0;
  v2[3] = v1;
  return MEMORY[0x270FA2498](PaymentsBaseCATs.unsupportedOnWatch(), 0);
}

uint64_t PaymentsBaseCATs.unsupportedOnWatch()()
{
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1);
  v0[6] = v1._object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v6 = KeyValuePairs.init(dictionaryLiteral:)();
  v0[7] = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))(MEMORY[0x263F6D058] + (int)*MEMORY[0x263F6D058]);
  uint64_t v2 = (void *)swift_task_alloc();
  v5[8] = v2;
  *uint64_t v2 = v5[2];
  v2[1] = PaymentsUnsupportedIntentCATs.disabledSurfIntent();
  uint64_t v3 = v5[4];
  return v7(v3, v1._countAndFlagsBits, v1._object, v6);
}

{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any?));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  KeyValuePairs.init(dictionaryLiteral:)();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PaymentsBaseCATs()
{
  uint64_t v1 = type metadata singleton initialization cache for PaymentsBaseCATs;
  if (!type metadata singleton initialization cache for PaymentsBaseCATs) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata completion function for PaymentsBaseCATs()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t PaymentsBaseCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PaymentsBaseCATs.init(templateDir:options:globals:)(a1, a2, a3);
}

uint64_t PaymentsBaseCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = a1;
  uint64_t v17 = a2;
  id v14 = a3;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = type metadata accessor for CATOption();
  uint64_t v15 = *(void *)(v18 - 8);
  uint64_t v16 = v18 - 8;
  unint64_t v10 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v18);
  uint64_t v12 = (char *)&v9 - v10;
  unint64_t v11 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v4 = (const void *)MEMORY[0x270FA5388](v19);
  unint64_t v13 = (char *)&v9 - v11;
  uint64_t v23 = v4;
  uint64_t v22 = v5;
  uint64_t v21 = v6;
  uint64_t v24 = v3;
  outlined init with copy of URL?(v4, (char *)&v9 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v17, v18);
  id v7 = v14;
  uint64_t v20 = CATWrapper.init(templateDir:options:globals:)();
  swift_retain();
  uint64_t v24 = v20;

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v18);
  outlined destroy of URL?(v19);
  swift_release();
  return v20;
}

uint64_t ObjC metadata update function for PaymentsBaseCATs()
{
  return type metadata accessor for PaymentsBaseCATs();
}

uint64_t BaseStrategy.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  __swift_destroy_boxed_opaque_existential_0(v0 + 144);
  return v2;
}

uint64_t BaseStrategy.ttsEnabled.getter()
{
  unint64_t v13 = 0;
  uint64_t v2 = (void *)*v0;
  unint64_t v13 = v0;
  uint64_t v12 = v2[10];
  uint64_t v11 = v2[11];
  uint64_t v10 = v2[12];
  outlined init with copy of GlobalsProviding((uint64_t)(v0 + 13), (uint64_t)v7);
  uint64_t v4 = v8;
  uint64_t v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  char v5 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  return v5 & 1;
}

uint64_t BaseStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v42 = a1;
  uint64_t v36 = 0;
  uint64_t v59 = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  uint64_t v61 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v65 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v35 = 0;
  uint64_t v52 = (void *)*v2;
  uint64_t v37 = type metadata accessor for Parse();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = v37 - 8;
  unint64_t v40 = (*(void *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v41 = (uint64_t)v25 - v40;
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v48 - 8);
  uint64_t v47 = v48 - 8;
  unint64_t v43 = (*(void *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v42);
  uint64_t v4 = (char *)v25 - v43;
  unint64_t v45 = (char *)v25 - v43;
  uint64_t v89 = v3;
  uint64_t v88 = v44;
  uint64_t v49 = v52[10];
  uint64_t v87 = v49;
  uint64_t v50 = v52[11];
  uint64_t v86 = v50;
  uint64_t v51 = v52[12];
  uint64_t v85 = v51;
  uint64_t v5 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v4, v5, v48);
  uint64_t v63 = 7;
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = v50;
  uint64_t v8 = v51;
  uint64_t v9 = v52;
  uint64_t v60 = v6;
  void v6[2] = v49;
  v6[3] = v7;
  void v6[4] = v8;
  uint64_t v53 = v9[13];
  v6[5] = v53;
  uint64_t v76 = Logger.logObject.getter();
  int v77 = static os_log_type_t.debug.getter();
  uint64_t v56 = &v83;
  uint64_t v83 = 12;
  unint64_t v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v57 = v84;
  uint64_t v58 = 17;
  uint64_t v68 = swift_allocObject();
  *(unsigned char *)(v68 + 16) = 32;
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 8;
  uint64_t v62 = 32;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v60;
  uint64_t v64 = v10;
  *(void *)(v10 + 16) = v59;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v64;
  uint64_t v66 = v12;
  *(void *)(v12 + 16) = v61;
  *(void *)(v12 + 24) = v13;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v66;
  uint64_t v73 = v14;
  *(void *)(v14 + 16) = v65;
  *(void *)(v14 + 24) = v15;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v71 = _allocateUninitializedArray<A>(_:)();
  uint64_t v74 = v16;
  swift_retain();
  uint64_t v17 = v68;
  uint64_t v18 = v74;
  *uint64_t v74 = v67;
  v18[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = v70;
  uint64_t v20 = v74;
  v74[2] = v69;
  void v20[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v73;
  uint64_t v22 = v74;
  v74[4] = v72;
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v76, (os_log_type_t)v77))
  {
    uint64_t v23 = v35;
    uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v28 = createStorage<A>(capacity:type:)(0);
    uint64_t v29 = createStorage<A>(capacity:type:)(1);
    uint64_t v30 = &v82;
    uint64_t v82 = v27;
    uint64_t v31 = &v81;
    uint64_t v81 = v28;
    unsigned int v32 = &v80;
    uint64_t v80 = v29;
    serialize(_:at:)(2, &v82);
    serialize(_:at:)(1, v30);
    uint64_t v78 = v67;
    uint64_t v79 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)v30, (uint64_t)v31, (uint64_t)v32);
    uint64_t v33 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      uint64_t v78 = v69;
      uint64_t v79 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v82, (uint64_t)&v81, (uint64_t)&v80);
      v25[1] = 0;
      uint64_t v78 = v72;
      uint64_t v79 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v78, (uint64_t)&v82, (uint64_t)&v81, (uint64_t)&v80);
      _os_log_impl(&dword_25D85A000, v76, (os_log_type_t)v77, "#BaseStrategy<%s> actionForInput", v27, v57);
      destroyStorage<A>(_:count:)(v28, 0, v26);
      destroyStorage<A>(_:count:)(v29, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v27, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v48);
  Input.parse.getter();
  static FlowUtil.actionForInput(parse:intentType:)(v41, v49, v53, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v41, v37);
}

uint64_t BaseStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  uint64_t v9 = (void *)*v2;
  v3[7] = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[11] = v9[10];
  v3[5] = v7;
  v3[12] = v9[11];
  v3[13] = v9[12];
  return MEMORY[0x270FA2498](BaseStrategy.makeIntentExecutionBehavior(app:intent:), 0);
}

uint64_t BaseStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v36 = v0;
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v2 = Logger.payments.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v2, v16);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v17;
  void v22[3] = v18;
  v22[4] = v19;
  v22[5] = *(void *)(v20 + 104);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 48) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 112);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 32;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #1 in ContactDisambiguationStrategy.init(catFamily:globals:mockGlobals:contactResolver:);
  *(void *)(v23 + 24) = v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v27 + 24) = v24;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v28 = v3;
  swift_retain();
  *uint64_t v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  id v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v31 = buf;
    uint64_t v32 = v12;
    uint64_t v33 = v13;
    serialize(_:at:)(2, &v31);
    serialize(_:at:)(1, &v31);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    _os_log_impl(&dword_25D85A000, v29, v30, "#BaseStrategy<%s> makeIntentExecutionBehavior", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611B9630](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v8 = v14[10];
  uint64_t v7 = v14[8];
  uint64_t v6 = v14[9];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v9 = static SiriKitIntentExecutionBehavior.standard()();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v14[2] + 8);
  return v4(v9);
}

uint64_t BaseStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](BaseStrategy.makeIntentHandledResponse(rchRecord:), 0);
}

uint64_t BaseStrategy.makeIntentHandledResponse(rchRecord:)()
{
  *(void *)(v0 + 16) = v0;
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t BaseStrategy.commonLabelsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GlobalsProviding(v1 + 24, a1);
}

uint64_t BaseStrategy.globals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GlobalsProviding(v1 + 104, a1);
}

uint64_t BaseStrategy.errorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GlobalsProviding(v1 + 144, a1);
}

uint64_t BaseStrategy.__allocating_init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t BaseStrategy.init<A>(globals:catFamily:commonLabelsProvider:contactResolver:errorProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  uint64_t v33 = a6;
  uint64_t v10 = (void *)*v7;
  uint64_t v32 = a1;
  uint64_t v31 = a2;
  uint64_t v30 = v10[12];
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  uint64_t v27 = a5;
  uint64_t v26 = v7;
  uint64_t v25 = v10[10];
  uint64_t v24 = v10[11];
  outlined init with copy of GlobalsProviding(a1, (uint64_t)v23);
  outlined init with take of CommonLabelsProviding(v23, v7 + 13);
  swift_retain();
  void v7[2] = a2;
  outlined init with copy of GlobalsProviding(a3, (uint64_t)v22);
  outlined init with take of CommonLabelsProviding(v22, v7 + 3);
  outlined init with copy of GlobalsProviding(a4, (uint64_t)v21);
  outlined init with take of CommonLabelsProviding(v21, v7 + 8);
  void v20[3] = a6;
  v20[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
  uint64_t v12 = *(void *)(a6 - 8);
  (*(void (**)(uint64_t *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a5);
  outlined init with take of CommonLabelsProviding(v20, v7 + 18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, a6);
  __swift_destroy_boxed_opaque_existential_0(a4);
  __swift_destroy_boxed_opaque_existential_0(a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v19;
}

uint64_t sub_25D9348F0()
{
  return swift_deallocObject();
}

uint64_t BaseStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseStrategyProviding.commonLabelsProvider.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.commonLabelsProvider.getter(a1);
}

uint64_t protocol witness for BaseStrategyProviding.globals.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.globals.getter(a1);
}

uint64_t protocol witness for BaseStrategyProviding.errorProvider.getter in conformance BaseStrategy<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return BaseStrategy.errorProvider.getter(a1);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance BaseStrategy<A1, B1, C1>()
{
  return HandleIntentFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v12 = v4;
  v4[6] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v12[7] = v5;
  uint64_t v6 = a3[11];
  uint64_t v7 = a3[12];
  uint64_t v8 = a3[13];
  v12[2] = a3[10];
  void v12[3] = v6;
  void v12[4] = v7;
  v12[5] = v8;
  uint64_t v9 = type metadata accessor for BaseStrategy();
  void *v5 = v12[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66378](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v12 = v4;
  v4[6] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v12[7] = v5;
  uint64_t v6 = a3[11];
  uint64_t v7 = a3[12];
  uint64_t v8 = a3[13];
  v12[2] = a3[10];
  void v12[3] = v6;
  void v12[4] = v7;
  v12[5] = v8;
  uint64_t v9 = type metadata accessor for BaseStrategy();
  void *v5 = v12[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66380](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 208)
                                                + **(int **)(**(void **)v2 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 184)
                                                + **(int **)(**(void **)v2 + 184));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 192)
                                                + **(int **)(**(void **)v2 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v12 = v4;
  v4[6] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v12[7] = v5;
  uint64_t v6 = a3[11];
  uint64_t v7 = a3[12];
  uint64_t v8 = a3[13];
  v12[2] = a3[10];
  void v12[3] = v6;
  void v12[4] = v7;
  v12[5] = v8;
  uint64_t v9 = type metadata accessor for BaseStrategy();
  void *v5 = v12[6];
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactDisambiguationStrategy<A, B, C>;
  return MEMORY[0x270F66368](a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 200)
                                                + **(int **)(**(void **)v2 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance SearchForAccountsContinueInAppStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance BaseStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 176)
                                                + **(int **)(**(void **)v2 + 176));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance PaymentsRCHFlowStrategy<A, B>;
  return v8(a1, a2);
}

uint64_t sub_25D935340()
{
  return swift_deallocObject();
}

uint64_t sub_25D93536C()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  return _typeName(_:qualified:)();
}

uint64_t sub_25D9353CC()
{
  return swift_deallocObject();
}

uint64_t sub_25D93540C()
{
  return swift_deallocObject();
}

uint64_t sub_25D93544C()
{
  return swift_deallocObject();
}

uint64_t sub_25D93548C()
{
  return swift_deallocObject();
}

uint64_t sub_25D9354D8()
{
  return swift_deallocObject();
}

uint64_t sub_25D935504()
{
  return swift_deallocObject();
}

uint64_t sub_25D935530()
{
  return swift_deallocObject();
}

uint64_t sub_25D935570()
{
  return swift_deallocObject();
}

uint64_t sub_25D9355B0()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for BaseStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for BaseStrategy()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t instantiation function for generic protocol witness table for BaseStrategy<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in BaseStrategy<A, B, C>()
{
  return swift_getWitnessTable();
}

double default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return 0.0;
}

uint64_t default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)()
{
  return static Float.greatestFiniteMagnitude.getter();
}

uint64_t static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  id v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_noVerb_common_Payment();
  type metadata accessor for INSendPaymentIntent();
  return Transformer.init(transform:)();
}

{
  id v2;
  uint64_t v6;
  unsigned char v7[40];
  uint64_t v8;
  void *v9;

  uint64_t v9 = a1;
  uint64_t v8 = a2;
  id v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_pay_common_Payment();
  type metadata accessor for INSendPaymentIntent();
  return Transformer.init(transform:)();
}

{
  id v2;
  uint64_t v6;
  unsigned char v7[40];
  uint64_t v8;
  void *v9;

  uint64_t v9 = a1;
  uint64_t v8 = a2;
  id v2 = a1;
  outlined init with copy of GlobalsProviding(a2, (uint64_t)v7);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of CommonLabelsProviding(v7, (void *)(v6 + 24));
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  type metadata accessor for INRequestPaymentIntent();
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  v562 = v3;
  uint64_t v635 = v2;
  id v634 = v4;
  v633 = v5;
  v563 = v1;
  uint64_t v626 = 0;
  v664 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v668 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v670 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v672 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v675 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v564 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v565 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v566 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v567 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v568 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v569 = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v570 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v571 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v572 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v573 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v574 = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v575 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v576 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v577 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v578 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v579 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v580 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v581 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v582 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v583 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v584 = closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v585 = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v586 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v587 = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v588 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v589 = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v590 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v591 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v592 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v593 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v594 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v595 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v596 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v597 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v598 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v599 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v600 = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v601 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v602 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v603 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v604 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v605 = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v606 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v607 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v608 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v609 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v770 = 0;
  v769 = 0;
  uint64_t v768 = 0;
  uint64_t v767 = 0;
  uint64_t v766 = 0;
  uint64_t v761 = 0;
  Class v755 = 0;
  uint64_t v746 = 0;
  uint64_t v733 = 0;
  uint64_t v730 = 0;
  uint64_t v731 = 0;
  uint64_t v729 = 0;
  Swift::Float v727 = 0.0;
  v726._uint64_t countAndFlagsBits = 0;
  v726._object = 0;
  uint64_t v724 = 0;
  uint64_t v725 = 0;
  uint64_t v712 = 0;
  uint64_t v692 = 0;
  uint64_t v691 = 0;
  unint64_t v610 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v611 = (uint64_t)&v196 - v610;
  uint64_t v612 = type metadata accessor for ContactResolverConfig();
  uint64_t v613 = *(void *)(v612 - 8);
  uint64_t v614 = v612 - 8;
  unint64_t v615 = (*(void *)(v613 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v626);
  v616 = (char *)&v196 - v615;
  uint64_t v617 = type metadata accessor for ContactQuery();
  uint64_t v619 = *(void *)(v617 - 8);
  uint64_t v618 = v617 - 8;
  uint64_t v620 = v619;
  uint64_t v621 = *(void *)(v619 + 64);
  unint64_t v622 = (v621 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v617);
  v623 = (char *)&v196 - v622;
  unint64_t v624 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v196 - v622);
  v625 = (char *)&v196 - v624;
  v770 = (char *)&v196 - v624;
  unint64_t v627 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v626);
  v628 = (char *)&v196 - v627;
  unint64_t v629 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v630 = (char *)&v196 - v629;
  unint64_t v631 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  v632 = (char *)&v196 - v631;
  v769 = (char *)&v196 - v631;
  uint64_t v655 = type metadata accessor for Logger();
  v653 = *(void **)(v655 - 8);
  uint64_t v654 = v655 - 8;
  uint64_t v636 = v653[8];
  unint64_t v637 = (v636 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v635);
  v638 = (char *)&v196 - v637;
  unint64_t v639 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v640 = (char *)&v196 - v639;
  unint64_t v641 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v642 = (char *)&v196 - v641;
  unint64_t v643 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v644 = (char *)&v196 - v643;
  unint64_t v645 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v646 = (char *)&v196 - v645;
  unint64_t v647 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v648 = (char *)&v196 - v647;
  unint64_t v649 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v650 = (char *)&v196 - v649;
  unint64_t v651 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = (uint64_t *)MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v196 - v651;
  v652 = (char *)&v196 - v651;
  uint64_t v665 = *v25;
  uint64_t v768 = v665;
  uint64_t v767 = v27;
  uint64_t v766 = v28;
  uint64_t v29 = Logger.payments.unsafeMutableAddressor();
  v656 = (void (*)(char *, uint64_t, uint64_t))v653[2];
  v657 = v653 + 2;
  v656(v26, v29, v655);
  swift_retain();
  v679 = Logger.logObject.getter();
  int v680 = static os_log_type_t.debug.getter();
  v660 = &v764;
  uint64_t v764 = 12;
  unint64_t v658 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v659 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v661 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v662 = v765;
  uint64_t v663 = 17;
  uint64_t v667 = 7;
  uint64_t v671 = swift_allocObject();
  *(unsigned char *)(v671 + 16) = 32;
  uint64_t v673 = swift_allocObject();
  *(unsigned char *)(v673 + 16) = 8;
  uint64_t v666 = 32;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v665;
  uint64_t v669 = v30;
  *(void *)(v30 + 16) = v664;
  *(void *)(v30 + 24) = v31;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v669;
  uint64_t v676 = v32;
  *(void *)(v32 + 16) = v668;
  *(void *)(v32 + 24) = v33;
  uint64_t v678 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v674 = _allocateUninitializedArray<A>(_:)();
  v677 = v34;
  swift_retain();
  uint64_t v35 = v671;
  uint64_t v36 = v677;
  *v677 = v670;
  v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  swift_retain();
  uint64_t v37 = v673;
  uint64_t v38 = v677;
  v677[2] = v672;
  v38[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  swift_retain();
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v676;
  unint64_t v40 = v677;
  v677[4] = v675;
  v40[5] = v39;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v679, (os_log_type_t)v680))
  {
    v555 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v554 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v556 = createStorage<A>(capacity:type:)(0);
    uint64_t v557 = createStorage<A>(capacity:type:)(1);
    v558 = &v685;
    v685 = v555;
    v559 = &v684;
    uint64_t v684 = v556;
    v560 = &v683;
    uint64_t v683 = v557;
    serialize(_:at:)(2, &v685);
    serialize(_:at:)(1, v558);
    uint64_t v41 = v563;
    v681 = v670;
    uint64_t v682 = v671;
    closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v558, (uint64_t)v559, (uint64_t)v560);
    v561 = v41;
    if (v41)
    {
      __break(1u);
    }
    else
    {
      v681 = v672;
      uint64_t v682 = v673;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)&v685, (uint64_t)&v684, (uint64_t)&v683);
      uint64_t v552 = 0;
      v681 = v675;
      uint64_t v682 = v676;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)&v685, (uint64_t)&v684, (uint64_t)&v683);
      v551 = 0;
      _os_log_impl(&dword_25D85A000, v679, (os_log_type_t)v680, "#Transformer for noVerb_common_Payment task %s", v555, v662);
      destroyStorage<A>(_:count:)(v556, 0, v554);
      destroyStorage<A>(_:count:)(v557, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v555, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v553 = v551;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v553 = v563;
  }
  uint64_t v42 = v650;
  v535 = v553;

  v536 = (void (*)(char *, uint64_t))v653[1];
  v537 = v653 + 1;
  v536(v652, v655);
  uint64_t v43 = Logger.payments.unsafeMutableAddressor();
  v656(v42, v43, v655);
  id v44 = v634;
  uint64_t v541 = 7;
  uint64_t v542 = swift_allocObject();
  *(void *)(v542 + 16) = v634;
  v549 = Logger.logObject.getter();
  int v550 = static os_log_type_t.debug.getter();
  uint64_t v762 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v538 = v763;
  uint64_t v539 = 17;
  uint64_t v544 = swift_allocObject();
  *(unsigned char *)(v544 + 16) = 32;
  uint64_t v545 = swift_allocObject();
  *(unsigned char *)(v545 + 16) = 8;
  uint64_t v540 = 32;
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v542;
  uint64_t v543 = v45;
  *(void *)(v45 + 16) = v564;
  *(void *)(v45 + 24) = v46;
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v543;
  uint64_t v547 = v47;
  *(void *)(v47 + 16) = v565;
  *(void *)(v47 + 24) = v48;
  uint64_t v546 = _allocateUninitializedArray<A>(_:)();
  v548 = v49;
  swift_retain();
  uint64_t v50 = v544;
  uint64_t v51 = v548;
  *v548 = v566;
  v51[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v50;
  swift_retain();
  uint64_t v52 = v545;
  uint64_t v53 = v548;
  v548[2] = v567;
  v53[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  swift_retain();
  unint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v547;
  unint64_t v55 = v548;
  v548[4] = v568;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v549, (os_log_type_t)v550))
  {
    v528 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v527 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v529 = createStorage<A>(capacity:type:)(0);
    uint64_t v530 = createStorage<A>(capacity:type:)(1);
    v531 = &v690;
    v690 = v528;
    v532 = &v689;
    uint64_t v689 = v529;
    v533 = &v688;
    uint64_t v688 = v530;
    serialize(_:at:)(2, &v690);
    serialize(_:at:)(1, v531);
    uint64_t v56 = v535;
    v686 = v566;
    uint64_t v687 = v544;
    closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)v531, (uint64_t)v532, (uint64_t)v533);
    v534 = v56;
    if (v56)
    {
      __break(1u);
    }
    else
    {
      v686 = v567;
      uint64_t v687 = v545;
      closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)&v690, (uint64_t)&v689, (uint64_t)&v688);
      uint64_t v525 = 0;
      v686 = v568;
      uint64_t v687 = v547;
      closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)&v690, (uint64_t)&v689, (uint64_t)&v688);
      v524 = 0;
      _os_log_impl(&dword_25D85A000, v549, (os_log_type_t)v550, "#Transformer for noVerb_common_Payment previous intent is %s", v528, v538);
      destroyStorage<A>(_:count:)(v529, 0, v527);
      destroyStorage<A>(_:count:)(v530, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v528, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v526 = v524;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v526 = v535;
  }
  v521 = v526;

  v536(v650, v655);
  uint64_t v522 = swift_allocObject();
  uint64_t v523 = v522 + 16;
  uint64_t v761 = v522 + 16;
  id v57 = v634;
  if (v634)
  {
    id v520 = v634;
    id v519 = v634;
    id v58 = objc_msgSend(v634, sel_payee);
    uint64_t v59 = v519;
    *(void *)(v522 + 16) = v58;
  }
  else
  {
    *(void *)(v522 + 16) = 0;
  }
  id v60 = v634;
  if (v634)
  {
    id v518 = v634;
    id v517 = v634;
    Class v760 = (Class)objc_msgSend(v634, sel_currencyAmount);
  }
  else
  {
    Class v760 = 0;
  }
  id v61 = v634;
  if (v634)
  {
    id v516 = v634;
    id v514 = v634;
    id v515 = objc_msgSend(v634, sel_note);
    if (v515)
    {
      id v513 = v515;
      id v508 = v515;
      uint64_t v509 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v510 = v62;

      uint64_t v511 = v509;
      BOOL v512 = v510;
    }
    else
    {
      uint64_t v511 = 0;
      BOOL v512 = 0;
    }
    v758 = (objc_class *)v511;
    BOOL v759 = v512;
  }
  else
  {
    v758 = 0;
    BOOL v759 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  uint64_t v507 = v757;
  if (v757)
  {
    uint64_t v506 = v507;
    uint64_t v501 = v507;
    uint64_t v733 = v507;
    swift_release();
    v502 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v619 + 56);
    uint64_t v503 = v619 + 56;
    v502(v632, 1, 1, v617);
    uint64_t v504 = dispatch thunk of UsoEntity_common_Payment.payee.getter();
    if (v504
      && (uint64_t v500 = v504,
          uint64_t v498 = v504,
          uint64_t v499 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter(),
          swift_release(),
          v499))
    {
      uint64_t v497 = v499;
      uint64_t v494 = v499;
      uint64_t v495 = CodeGenBase.entity.getter();
      swift_release();
      uint64_t v496 = v495;
    }
    else
    {
      uint64_t v496 = 0;
    }
    uint64_t v492 = v496;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v493 = v732;
    if (v732)
    {
      uint64_t v491 = v493;
      uint64_t v488 = v493;
      uint64_t v691 = v493;
      UsoEntity_common_Person.toContactQuery()();
      v502(v630, 0, 1, v617);
      outlined assign with take of ContactQuery?(v630, v632);
      swift_release();
    }
    else
    {
      uint64_t v490 = dispatch thunk of UsoEntity_common_Payment.payee.getter();
      if (v490)
      {
        uint64_t v489 = v490;
        uint64_t v485 = v490;
        uint64_t v486 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter();
        swift_release();
        uint64_t v487 = v486;
      }
      else
      {
        uint64_t v487 = 0;
      }
      uint64_t v484 = v487;
      if (v487)
      {
        uint64_t v483 = v484;
        uint64_t v482 = v484;
        uint64_t v692 = v484;
        UsoEntity_common_Agent.toContactQuery()();
        v502(v630, 0, 1, v617);
        outlined assign with take of ContactQuery?(v630, v632);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v632, v628);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v619 + 48))(v628, 1, v617) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v628);
      v481 = v521;
    }
    else
    {
      uint64_t v63 = v648;
      uint64_t v464 = v620;
      v467 = *(void (**)(char *, char *, uint64_t))(v619 + 32);
      uint64_t v466 = v619 + 32;
      v467(v625, v628, v617);
      uint64_t v64 = Logger.payments.unsafeMutableAddressor();
      v656(v63, v64, v655);
      v462 = *(void (**)(char *, char *, uint64_t))(v619 + 16);
      uint64_t v463 = v619 + 16;
      v462(v623, v625, v617);
      unint64_t v465 = (*(unsigned __int8 *)(v464 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v464 + 80);
      uint64_t v471 = 7;
      uint64_t v472 = swift_allocObject();
      v467((char *)(v472 + v465), v623, v617);
      v479 = Logger.logObject.getter();
      int v480 = static os_log_type_t.debug.getter();
      v713[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v468 = v714;
      uint64_t v469 = 17;
      uint64_t v474 = swift_allocObject();
      *(unsigned char *)(v474 + 16) = 32;
      uint64_t v475 = swift_allocObject();
      *(unsigned char *)(v475 + 16) = 8;
      uint64_t v470 = 32;
      uint64_t v65 = swift_allocObject();
      uint64_t v66 = v472;
      uint64_t v473 = v65;
      *(void *)(v65 + 16) = v569;
      *(void *)(v65 + 24) = v66;
      uint64_t v67 = swift_allocObject();
      uint64_t v68 = v473;
      uint64_t v477 = v67;
      *(void *)(v67 + 16) = v570;
      *(void *)(v67 + 24) = v68;
      uint64_t v476 = _allocateUninitializedArray<A>(_:)();
      v478 = v69;
      swift_retain();
      uint64_t v70 = v474;
      uint64_t v71 = v478;
      *v478 = v571;
      v71[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
      swift_retain();
      uint64_t v72 = v475;
      uint64_t v73 = v478;
      v478[2] = v572;
      v73[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v72;
      swift_retain();
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v477;
      uint64_t v75 = v478;
      v478[4] = v573;
      v75[5] = v74;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v479, (os_log_type_t)v480))
      {
        uint64_t v455 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v454 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v456 = createStorage<A>(capacity:type:)(0);
        uint64_t v457 = createStorage<A>(capacity:type:)(1);
        uint64_t v458 = &v697;
        v697 = v455;
        v459 = &v696;
        uint64_t v696 = v456;
        uint64_t v460 = &v695;
        uint64_t v695 = v457;
        serialize(_:at:)(2, &v697);
        serialize(_:at:)(1, v458);
        uint64_t v76 = v521;
        v693 = v571;
        uint64_t v694 = v474;
        closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)v458, (uint64_t)v459, (uint64_t)v460);
        uint64_t v461 = v76;
        if (v76)
        {
          __break(1u);
        }
        else
        {
          v693 = v572;
          uint64_t v694 = v475;
          closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
          uint64_t v452 = 0;
          v693 = v573;
          uint64_t v694 = v477;
          closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
          uint64_t v451 = 0;
          _os_log_impl(&dword_25D85A000, v479, (os_log_type_t)v480, "#Transformer payee contact in USO parse as ContactQuery is: %s", v455, v468);
          destroyStorage<A>(_:count:)(v456, 0, v454);
          destroyStorage<A>(_:count:)(v457, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v455, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v453 = v451;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v453 = v521;
      }
      uint64_t v445 = v453;

      v536(v648, v655);
      uint64_t v446 = v633[3];
      uint64_t v447 = v633[4];
      __swift_project_boxed_opaque_existential_1(v633, v446);
      uint64_t v441 = _allocateUninitializedArray<A>(_:)();
      v462(v77, v625, v617);
      uint64_t v78 = v441;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v444 = v78;
      uint64_t v442 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      uint64_t v443 = v713;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v613 + 16))(v616, v442, v612);
      swift_endAccess();
      uint64_t v79 = v445;
      uint64_t v80 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v447 + 16))(v444, v616, v446);
      uint64_t v448 = (uint64_t)v79;
      uint64_t v449 = v80;
      uint64_t v450 = v79;
      if (v79)
      {
        id v196 = v450;
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        (*(void (**)(char *, uint64_t))(v613 + 8))(v616, v612);
        swift_bridgeObjectRelease();

        uint64_t v439 = v197;
        uint64_t v440 = v198;
      }
      else
      {
        uint64_t v438 = v449;
        (*(void (**)(char *, uint64_t))(v613 + 8))(v616, v612);
        swift_bridgeObjectRelease();
        uint64_t v439 = v438;
        uint64_t v440 = v448;
      }
      uint64_t v81 = v646;
      uint64_t v423 = (void *)v440;
      uint64_t v424 = v439;
      uint64_t v712 = v439;
      uint64_t v82 = Logger.payments.unsafeMutableAddressor();
      v656(v81, v82, v655);
      swift_bridgeObjectRetain();
      uint64_t v428 = 7;
      uint64_t v429 = swift_allocObject();
      *(void *)(v429 + 16) = v424;
      uint64_t v436 = Logger.logObject.getter();
      int v437 = static os_log_type_t.debug.getter();
      uint64_t v710 = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v425 = v711;
      uint64_t v426 = 17;
      uint64_t v431 = swift_allocObject();
      *(unsigned char *)(v431 + 16) = 32;
      uint64_t v432 = swift_allocObject();
      *(unsigned char *)(v432 + 16) = 8;
      uint64_t v427 = 32;
      uint64_t v83 = swift_allocObject();
      uint64_t v84 = v429;
      uint64_t v430 = v83;
      *(void *)(v83 + 16) = v574;
      *(void *)(v83 + 24) = v84;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v430;
      uint64_t v434 = v85;
      *(void *)(v85 + 16) = v575;
      *(void *)(v85 + 24) = v86;
      uint64_t v433 = _allocateUninitializedArray<A>(_:)();
      uint64_t v435 = v87;
      swift_retain();
      uint64_t v88 = v431;
      uint64_t v89 = v435;
      *uint64_t v435 = v576;
      v89[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
      swift_retain();
      uint64_t v90 = v432;
      uint64_t v91 = v435;
      v435[2] = v577;
      v91[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
      swift_retain();
      uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v434;
      uint64_t v93 = v435;
      v435[4] = v578;
      v93[5] = v92;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v436, (os_log_type_t)v437))
      {
        uint64_t v416 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v417 = createStorage<A>(capacity:type:)(0);
        uint64_t v418 = createStorage<A>(capacity:type:)(1);
        os_log_type_t v419 = &v702;
        v702 = v416;
        uint64_t v420 = &v701;
        uint64_t v701 = v417;
        char v421 = &v700;
        uint64_t v700 = v418;
        serialize(_:at:)(2, &v702);
        serialize(_:at:)(1, v419);
        uint64_t v94 = v423;
        v698 = v576;
        uint64_t v699 = v431;
        closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)v419, (uint64_t)v420, (uint64_t)v421);
        v422 = v94;
        if (v94)
        {
          __break(1u);
        }
        else
        {
          v698 = v577;
          uint64_t v699 = v432;
          closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)&v702, (uint64_t)&v701, (uint64_t)&v700);
          uint64_t v413 = 0;
          v698 = v578;
          uint64_t v699 = v434;
          closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)&v702, (uint64_t)&v701, (uint64_t)&v700);
          uint64_t v412 = 0;
          _os_log_impl(&dword_25D85A000, v436, (os_log_type_t)v437, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v416, v425);
          destroyStorage<A>(_:count:)(v417, 0, v415);
          destroyStorage<A>(_:count:)(v418, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v416, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v414 = v412;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v414 = v423;
      }
      v411 = v414;

      v536(v646, v655);
      swift_bridgeObjectRetain();
      if (v424)
      {
        uint64_t v410 = v424;
        uint64_t v407 = v424;
        swift_bridgeObjectRetain();
        uint64_t v406 = v703;
        v703[0] = v407;
        uint64_t v405 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        uint64_t v408 = v703[1];
        swift_bridgeObjectRelease();
        uint64_t v409 = v408;
      }
      else
      {
        uint64_t v409 = 0;
      }
      uint64_t v95 = v644;
      uint64_t v96 = *(void **)(v522 + 16);
      *(void *)(v522 + 16) = v409;

      uint64_t v97 = Logger.payments.unsafeMutableAddressor();
      v656(v95, v97, v655);
      swift_retain();
      uint64_t v403 = Logger.logObject.getter();
      int v404 = static os_log_type_t.debug.getter();
      v708[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v393 = v709;
      uint64_t v394 = 17;
      uint64_t v396 = 7;
      uint64_t v398 = swift_allocObject();
      *(unsigned char *)(v398 + 16) = 32;
      uint64_t v399 = swift_allocObject();
      *(unsigned char *)(v399 + 16) = 8;
      uint64_t v395 = 32;
      uint64_t v98 = swift_allocObject();
      uint64_t v99 = v522;
      uint64_t v397 = v98;
      *(void *)(v98 + 16) = v579;
      *(void *)(v98 + 24) = v99;
      uint64_t v100 = swift_allocObject();
      uint64_t v101 = v397;
      uint64_t v401 = v100;
      *(void *)(v100 + 16) = v580;
      *(void *)(v100 + 24) = v101;
      uint64_t v400 = _allocateUninitializedArray<A>(_:)();
      uint64_t v402 = v102;
      swift_retain();
      uint64_t v103 = v398;
      uint64_t v104 = v402;
      *uint64_t v402 = v581;
      v104[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v103;
      swift_retain();
      uint64_t v105 = v399;
      uint64_t v106 = v402;
      v402[2] = v582;
      v106[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v105;
      swift_retain();
      uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v401;
      uint64_t v108 = v402;
      v402[4] = v583;
      v108[5] = v107;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v403, (os_log_type_t)v404))
      {
        uint64_t v386 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v387 = createStorage<A>(capacity:type:)(0);
        uint64_t v388 = createStorage<A>(capacity:type:)(1);
        uint32_t v389 = v708;
        v708[0] = v386;
        uint64_t v390 = &v707;
        uint64_t v707 = v387;
        unint64_t v391 = &v706;
        uint64_t v706 = v388;
        serialize(_:at:)(2, v708);
        serialize(_:at:)(1, v389);
        uint64_t v109 = v411;
        v704 = v581;
        uint64_t v705 = v398;
        closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v389, (uint64_t)v390, (uint64_t)v391);
        uint64_t v392 = v109;
        if (v109)
        {
          __break(1u);
        }
        else
        {
          v704 = v582;
          uint64_t v705 = v399;
          closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v708, (uint64_t)&v707, (uint64_t)&v706);
          uint64_t v383 = 0;
          v704 = v583;
          uint64_t v705 = v401;
          closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v708, (uint64_t)&v707, (uint64_t)&v706);
          uint64_t v382 = 0;
          _os_log_impl(&dword_25D85A000, v403, (os_log_type_t)v404, "#Transformer resolved payee from matches as %s", v386, v393);
          destroyStorage<A>(_:count:)(v387, 0, v385);
          destroyStorage<A>(_:count:)(v388, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v386, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v384 = v382;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v384 = v411;
      }
      uint64_t v381 = v384;

      v536(v644, v655);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v619 + 8))(v625, v617);
      v481 = v381;
    }
    uint64_t v379 = v481;
    uint64_t v380 = dispatch thunk of UsoEntity_common_Payment.amount.getter();
    if (v380)
    {
      uint64_t v378 = v380;
      uint64_t v375 = v380;
      uint64_t v729 = v380;
      uint64_t v376 = dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter();
      if (v376)
      {
        uint64_t v374 = v376;
        uint64_t v371 = v376;
        uint64_t v372 = CodeGenBase.entity.getter();
        swift_release();
        uint64_t v373 = v372;
      }
      else
      {
        uint64_t v373 = 0;
      }
      uint64_t v368 = v373;
      double v110 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v367 = *(float *)&v110;
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v365 = v111;
      float v366 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v112 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      uint64_t v728 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v368, v367, v365, v366, v112);
      Swift::Float v369 = *(float *)&v728;
      int v370 = BYTE4(v728);
      swift_release();
      if ((v370 & 1) == 0)
      {
        Swift::Float v364 = v369;
        Swift::Float v362 = v369;
        Swift::Float v727 = v369;
        Swift::String v726 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        uint64_t v363 = dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter();
        if (v363)
        {
          uint64_t v361 = v363;
          uint64_t v358 = v363;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          uint64_t v359 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v359)
          {
            uint64_t v356 = v359;
            uint64_t v715 = v359;
            uint64_t v354 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            int v113 = v379;
            uint64_t result = Sequence.first(where:)();
            uint64_t v355 = v113;
            if (v113)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            uint64_t v351 = type metadata accessor for UsoIdentifier();
            uint64_t v352 = *(void *)(v351 - 8);
            uint64_t v353 = v351 - 8;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v352 + 48))(v611, 1) != 1)
            {
              uint64_t v346 = UsoIdentifier.value.getter();
              uint64_t v347 = v115;
              (*(void (**)(uint64_t, uint64_t))(v352 + 8))(v611, v351);
              uint64_t v348 = v346;
              uint64_t v349 = v347;
              uint64_t v350 = v355;
LABEL_83:
              Swift::String v343 = v350;
              uint64_t v344 = v349;
              uint64_t v345 = v348;
              uint64_t v724 = v348;
              uint64_t v725 = v349;
              v722._uint64_t countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v722._object = v116;
              if (v116)
              {
                Swift::String v723 = v722;
              }
              else
              {
                Swift::String v723 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              uint64_t v117 = v642;
              Swift::String v317 = v723;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              Swift::String v726 = v317;
              swift_bridgeObjectRelease();
              uint64_t v118 = Logger.payments.unsafeMutableAddressor();
              v656(v117, v118, v655);
              uint64_t v327 = 7;
              uint64_t v319 = swift_allocObject();
              *(Swift::Float *)(v319 + 16) = v362;
              uint64_t v326 = 32;
              uint64_t v119 = swift_allocObject();
              uint64_t v120 = v317._object;
              uint64_t v321 = v119;
              *(void *)(v119 + 16) = v317._countAndFlagsBits;
              *(void *)(v119 + 24) = v120;
              swift_bridgeObjectRetain();
              uint64_t v121 = swift_allocObject();
              uint64_t v122 = v344;
              uint64_t v328 = v121;
              *(void *)(v121 + 16) = v345;
              *(void *)(v121 + 24) = v122;
              uint64_t v341 = Logger.logObject.getter();
              int v342 = static os_log_type_t.debug.getter();
              v720[1] = (unsigned char *)v326;
              UnsignedInteger<>.init<A>(_:)();
              uint32_t v318 = v721;
              uint64_t v324 = 17;
              uint64_t v330 = swift_allocObject();
              int v323 = 32;
              *(unsigned char *)(v330 + 16) = 32;
              uint64_t v331 = swift_allocObject();
              int v325 = 8;
              *(unsigned char *)(v331 + 16) = 8;
              uint64_t v123 = swift_allocObject();
              uint64_t v124 = v319;
              uint64_t v320 = v123;
              *(void *)(v123 + 16) = v585;
              *(void *)(v123 + 24) = v124;
              uint64_t v125 = swift_allocObject();
              uint64_t v126 = v320;
              uint64_t v332 = v125;
              *(void *)(v125 + 16) = v586;
              *(void *)(v125 + 24) = v126;
              uint64_t v333 = swift_allocObject();
              *(unsigned char *)(v333 + 16) = v323;
              uint64_t v334 = swift_allocObject();
              *(unsigned char *)(v334 + 16) = v325;
              uint64_t v127 = swift_allocObject();
              uint64_t v128 = v321;
              uint64_t v322 = v127;
              *(void *)(v127 + 16) = v587;
              *(void *)(v127 + 24) = v128;
              uint64_t v129 = swift_allocObject();
              uint64_t v130 = v322;
              uint64_t v335 = v129;
              *(void *)(v129 + 16) = v588;
              *(void *)(v129 + 24) = v130;
              uint64_t v336 = swift_allocObject();
              *(unsigned char *)(v336 + 16) = v323;
              uint64_t v337 = swift_allocObject();
              *(unsigned char *)(v337 + 16) = v325;
              uint64_t v131 = swift_allocObject();
              uint64_t v132 = v328;
              uint64_t v329 = v131;
              *(void *)(v131 + 16) = v589;
              *(void *)(v131 + 24) = v132;
              uint64_t v133 = swift_allocObject();
              uint64_t v134 = v329;
              uint64_t v339 = v133;
              *(void *)(v133 + 16) = v590;
              *(void *)(v133 + 24) = v134;
              uint64_t v338 = _allocateUninitializedArray<A>(_:)();
              Swift::String v340 = v135;
              swift_retain();
              uint64_t v136 = v330;
              uint64_t v137 = v340;
              *Swift::String v340 = v591;
              v137[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
              swift_retain();
              uint64_t v138 = v331;
              uint64_t v139 = v340;
              v340[2] = v592;
              v139[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v138;
              swift_retain();
              uint64_t v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v332;
              uint64_t v141 = v340;
              v340[4] = v593;
              v141[5] = v140;
              swift_retain();
              uint64_t v142 = v333;
              uint64_t v143 = v340;
              v340[6] = v594;
              v143[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v142;
              swift_retain();
              uint64_t v144 = v334;
              uint64_t v145 = v340;
              v340[8] = v595;
              v145[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v144;
              swift_retain();
              uint64_t v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v335;
              uint32_t v147 = v340;
              v340[10] = v596;
              v147[11] = v146;
              swift_retain();
              uint64_t v148 = v336;
              uint64_t v149 = v340;
              v340[12] = v597;
              v149[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
              swift_retain();
              uint64_t v150 = v337;
              uint64_t v151 = v340;
              v340[14] = v598;
              v151[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v150;
              swift_retain();
              uint64_t v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v339;
              uint64_t v153 = v340;
              v340[16] = v599;
              v153[17] = v152;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v341, (os_log_type_t)v342))
              {
                uint64_t v310 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                uint64_t v311 = createStorage<A>(capacity:type:)(0);
                uint64_t v312 = createStorage<A>(capacity:type:)(3);
                uint64_t v313 = v720;
                v720[0] = v310;
                uint64_t v314 = &v719;
                uint64_t v719 = v311;
                uint64_t v315 = &v718;
                uint64_t v718 = v312;
                serialize(_:at:)(2, v720);
                serialize(_:at:)(3, v313);
                uint64_t v154 = v343;
                v716 = v591;
                uint64_t v717 = v330;
                closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v313, (uint64_t)v314, (uint64_t)v315);
                uint64_t v316 = v154;
                if (v154)
                {
                  __break(1u);
                }
                else
                {
                  v716 = v592;
                  uint64_t v717 = v331;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v307 = 0;
                  v716 = v593;
                  uint64_t v717 = v332;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v306 = 0;
                  v716 = v594;
                  uint64_t v717 = v333;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v305 = 0;
                  v716 = v595;
                  uint64_t v717 = v334;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v304 = 0;
                  v716 = v596;
                  uint64_t v717 = v335;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v303 = 0;
                  v716 = v597;
                  uint64_t v717 = v336;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v302 = 0;
                  v716 = v598;
                  uint64_t v717 = v337;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v301 = 0;
                  v716 = v599;
                  uint64_t v717 = v339;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v300 = 0;
                  _os_log_impl(&dword_25D85A000, v341, (os_log_type_t)v342, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v310, v318);
                  destroyStorage<A>(_:count:)(v311, 0, v309);
                  destroyStorage<A>(_:count:)(v312, 3, MEMORY[0x263F8EE58] + 8);
                  MEMORY[0x2611B9630](v310, MEMORY[0x263F8E778]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  uint64_t v308 = v300;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                uint64_t v308 = v343;
              }
              uint64_t v298 = v308;

              v536(v642, v655);
              int v299 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if (v299)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v296 = 0;
                unint64_t v297 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v362), v362);
                Class isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v155, v317).super.isa;
                Class v157 = v760;
                Class v760 = isa;
              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              uint64_t v377 = v298;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v611);
            uint64_t v360 = v355;
          }
          else
          {
            uint64_t v360 = v379;
          }
        }
        else
        {
          uint64_t v360 = v379;
        }
        uint64_t v348 = 0;
        uint64_t v349 = 0;
        uint64_t v350 = v360;
        goto LABEL_83;
      }
      swift_release();
      uint64_t v377 = v379;
    }
    else
    {
      uint64_t v377 = v379;
    }
LABEL_96:
    unint64_t v293 = v377;
    uint64_t v294 = dispatch thunk of UsoEntity_common_Payment.memo.getter();
    uint64_t v295 = v158;
    if (v158)
    {
      uint64_t v291 = v294;
      uint64_t v292 = v295;
      BOOL v290 = v295;
      uint64_t v289 = v294;
      uint64_t v730 = v294;
      uint64_t v731 = v295;
      swift_bridgeObjectRetain();
      v758 = (objc_class *)v289;
      BOOL v759 = v290;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v632);
    swift_release();
    v505 = v293;
    goto LABEL_99;
  }
  swift_release();
  v505 = v521;
LABEL_99:
  uint64_t v269 = v505;
  type metadata accessor for INSendPaymentIntent();
  uint32_t v270 = &v756;
  uint64_t v278 = 32;
  swift_beginAccess();
  id v271 = *(id *)(v522 + 16);
  id v159 = v271;
  swift_endAccess();
  Class v272 = v760;
  int v160 = v760;
  char v273 = v758;
  BOOL v274 = v759;
  swift_bridgeObjectRetain();
  v771.value.super.Class isa = (Class)v271;
  v771.is_nil = (char)v272;
  v772.value.super.Class isa = v273;
  v772.is_nil = v274;
  v162.super.super.Class isa = INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(v771, v772, v161).super.super.isa;
  uint64_t v163 = v640;
  Class v275 = v162.super.super.isa;
  Class v755 = v162.super.super.isa;
  uint64_t v164 = Logger.payments.unsafeMutableAddressor();
  v656(v163, v164, v655);
  int v165 = v275;
  uint64_t v279 = 7;
  uint64_t v280 = swift_allocObject();
  *(void *)(v280 + 16) = v275;
  uint64_t v287 = Logger.logObject.getter();
  int v288 = static os_log_type_t.debug.getter();
  uint64_t v753 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v276 = v754;
  uint64_t v277 = 17;
  uint64_t v282 = swift_allocObject();
  *(unsigned char *)(v282 + 16) = 32;
  uint64_t v283 = swift_allocObject();
  *(unsigned char *)(v283 + 16) = 8;
  uint64_t v166 = swift_allocObject();
  uint64_t v167 = v280;
  uint64_t v281 = v166;
  *(void *)(v166 + 16) = v600;
  *(void *)(v166 + 24) = v167;
  uint64_t v168 = swift_allocObject();
  uint64_t v169 = v281;
  uint64_t v285 = v168;
  *(void *)(v168 + 16) = v601;
  *(void *)(v168 + 24) = v169;
  uint64_t v284 = _allocateUninitializedArray<A>(_:)();
  Swift::String v286 = v170;
  swift_retain();
  uint64_t v171 = v282;
  uint64_t v172 = v286;
  void *v286 = v602;
  v172[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171;
  swift_retain();
  uint64_t v173 = v283;
  uint64_t v174 = v286;
  v286[2] = v603;
  v174[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v173;
  swift_retain();
  uint64_t v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v285;
  uint64_t v176 = v286;
  v286[4] = v604;
  v176[5] = v175;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v287, (os_log_type_t)v288))
  {
    uint64_t v262 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v263 = createStorage<A>(capacity:type:)(0);
    uint64_t v264 = createStorage<A>(capacity:type:)(1);
    uint64_t v265 = &v738;
    v738 = v262;
    uint64_t v266 = &v737;
    uint64_t v737 = v263;
    uint64_t v267 = &v736;
    uint64_t v736 = v264;
    serialize(_:at:)(2, &v738);
    serialize(_:at:)(1, v265);
    uint64_t v177 = v269;
    v734 = v602;
    uint64_t v735 = v282;
    closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)v265, (uint64_t)v266, (uint64_t)v267);
    uint64_t v268 = v177;
    if (v177)
    {
      __break(1u);
    }
    else
    {
      v734 = v603;
      uint64_t v735 = v283;
      closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)&v738, (uint64_t)&v737, (uint64_t)&v736);
      uint64_t v259 = 0;
      v734 = v604;
      uint64_t v735 = v285;
      closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)&v738, (uint64_t)&v737, (uint64_t)&v736);
      uint32_t v258 = 0;
      _os_log_impl(&dword_25D85A000, v287, (os_log_type_t)v288, "#Transformer returning intent %s", v262, v276);
      destroyStorage<A>(_:count:)(v263, 0, v261);
      destroyStorage<A>(_:count:)(v264, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v262, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v260 = v258;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v260 = v269;
  }
  uint64_t v256 = v260;

  v536(v640, v655);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  uint64_t v257 = v751;
  swift_release();
  if (v257)
  {
    uint64_t v255 = v257;
    uint64_t v252 = v257;
    uint64_t v253 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v254 = v253;
  }
  else
  {
    uint64_t v254 = 0;
  }
  uint64_t v750 = v254;
  swift_retain();
  if (v750)
  {
    uint64_t v752 = v750;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    uint64_t v251 = v749;
    swift_release();
    if (v251
      && (uint64_t v250 = v251,
          uint64_t v248 = v251,
          uint64_t v249 = dispatch thunk of UsoEntity_common_Payment.payer.getter(),
          swift_release(),
          v249))
    {
      uint64_t v247 = v249;
      uint64_t v244 = v249;
      uint64_t v245 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      uint64_t v246 = v245;
    }
    else
    {
      uint64_t v246 = 0;
    }
    uint64_t v748 = v246;
    swift_retain();
    if (v748)
    {
      uint64_t v752 = v748;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      uint64_t v243 = v747;
      swift_release();
      if (v243
        && (uint64_t v242 = v243,
            uint64_t v240 = v243,
            uint64_t v241 = dispatch thunk of UsoEntity_common_Payment.payee.getter(),
            swift_release(),
            v241))
      {
        uint64_t v239 = v241;
        uint64_t v238 = v241;
        uint64_t v752 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        uint64_t v752 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  uint64_t v237 = v752;
  if (v752)
  {
    uint64_t v236 = v237;
    uint64_t v231 = v237;
    uint64_t v746 = v237;
    uint64_t v178 = v275;
    uint64_t v232 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v233 = UsoEntity_common_App.appIdentifier.getter();
    uint64_t v234 = v179;
    if (v179)
    {
      uint64_t v229 = v233;
      uint64_t v230 = v234;
      uint64_t v226 = v234;
      uint64_t v227 = MEMORY[0x2611B9130](v233);
      swift_bridgeObjectRelease();
      uint64_t v228 = (void *)v227;
    }
    else
    {
      uint64_t v228 = 0;
    }
    uint64_t v180 = v638;
    id v213 = v228;
    uint64_t v212 = &v745;
    uint64_t v216 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v275, v232, v213, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v181 = Logger.payments.unsafeMutableAddressor();
    v656(v180, v181, v655);
    swift_retain();
    unint64_t v224 = Logger.logObject.getter();
    int v225 = static os_log_type_t.debug.getter();
    v743[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v214 = v744;
    uint64_t v215 = 17;
    uint64_t v217 = 7;
    uint64_t v219 = swift_allocObject();
    *(unsigned char *)(v219 + 16) = 32;
    uint64_t v220 = swift_allocObject();
    *(unsigned char *)(v220 + 16) = 8;
    uint64_t v182 = swift_allocObject();
    uint64_t v183 = v231;
    uint64_t v218 = v182;
    *(void *)(v182 + 16) = v605;
    *(void *)(v182 + 24) = v183;
    uint64_t v184 = swift_allocObject();
    uint64_t v185 = v218;
    uint64_t v222 = v184;
    *(void *)(v184 + 16) = v606;
    *(void *)(v184 + 24) = v185;
    uint64_t v221 = _allocateUninitializedArray<A>(_:)();
    unint64_t v223 = v186;
    swift_retain();
    uint64_t v187 = v219;
    id v188 = v223;
    *unint64_t v223 = v607;
    v188[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v187;
    swift_retain();
    uint64_t v189 = v220;
    uint64_t v190 = v223;
    v223[2] = v608;
    v190[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v189;
    swift_retain();
    uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v222;
    uint64_t v192 = v223;
    v223[4] = v609;
    v192[5] = v191;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v224, (os_log_type_t)v225))
    {
      int v205 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v206 = createStorage<A>(capacity:type:)(0);
      uint64_t v207 = createStorage<A>(capacity:type:)(1);
      unint64_t v208 = v743;
      v743[0] = v205;
      uint64_t v209 = &v742;
      uint64_t v742 = v206;
      uint64_t v210 = &v741;
      uint64_t v741 = v207;
      serialize(_:at:)(2, v743);
      serialize(_:at:)(1, v208);
      id v193 = v256;
      v739 = v607;
      uint64_t v740 = v219;
      closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v208, (uint64_t)v209, (uint64_t)v210);
      unint64_t v211 = v193;
      if (v193)
      {
        __break(1u);
      }
      else
      {
        v739 = v608;
        uint64_t v740 = v220;
        closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v743, (uint64_t)&v742, (uint64_t)&v741);
        uint64_t v202 = 0;
        v739 = v609;
        uint64_t v740 = v222;
        closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v743, (uint64_t)&v742, (uint64_t)&v741);
        uint64_t v201 = 0;
        _os_log_impl(&dword_25D85A000, v224, (os_log_type_t)v225, "#Transformer found app to use for intent as %s", v205, v214);
        destroyStorage<A>(_:count:)(v206, 0, v204);
        destroyStorage<A>(_:count:)(v207, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v205, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v203 = v201;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v203 = v256;
    }
    uint64_t v200 = v203;

    v536(v638, v655);
    swift_release();
    uint64_t v235 = v200;
  }
  else
  {
    uint64_t v235 = v256;
  }
  int v199 = v235;
  id v194 = v275;
  Class v195 = v275;
  Class *v562 = v275;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v760);
  return swift_release();
}

{
  void *v1;
  uint64_t v2;
  Class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t (**v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t (**v38)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (**v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t (**v53)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v55)(uint64_t, uint64_t, uint64_t);
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t (**v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t (**v73)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v75)(uint64_t, uint64_t, uint64_t);
  void *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t (**v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t (**v91)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v93)(uint64_t, uint64_t, uint64_t);
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t (**v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t (**v106)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v108)(uint64_t, uint64_t, uint64_t);
  void *v109;
  double v110;
  float v111;
  float v112;
  void *v113;
  uint64_t result;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (**v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t (**v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t (**v139)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t (**v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t (**v145)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t (**v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t (**v151)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v153)(uint64_t, uint64_t, uint64_t);
  void *v154;
  NSDecimalNumber *v155;
  Class isa;
  Class v157;
  uint64_t v158;
  id v159;
  objc_class *v160;
  Swift::String_optional v161;
  INSendPaymentIntent v162;
  char *v163;
  uint64_t v164;
  objc_class *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (**v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t (**v172)(uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t (**v174)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v176)(uint64_t, uint64_t, uint64_t);
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  objc_class *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (**v190)(uint64_t, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t (**v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t (**v194)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v196)(uint64_t, uint64_t, uint64_t);
  void *v197;
  objc_class *v198;
  Class v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned char **v212;
  uint64_t *v213;
  uint64_t *v214;
  void *v215;
  long long *v216;
  uint64_t *v217;
  id v218;
  long long v219;
  uint32_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t (**v230)(uint64_t, uint64_t, uint64_t);
  NSObject *v231;
  int v232;
  void *v233;
  long long v234;
  long long v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  long long v246;
  long long v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  long long v257;
  long long v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint8_t *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned char **v272;
  uint64_t *v273;
  uint64_t *v274;
  void *v275;
  void *v276;
  char *v277;
  id v278;
  Class v279;
  objc_class *v280;
  BOOL v281;
  Class v282;
  uint32_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (**v293)(uint64_t, uint64_t, uint64_t);
  NSObject *v294;
  int v295;
  uint64_t v296;
  BOOL v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void *v305;
  int v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint8_t *v317;
  uint64_t v318;
  uint64_t v319;
  unsigned char **v320;
  uint64_t *v321;
  uint64_t *v322;
  void *v323;
  Swift::String v324;
  uint32_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t (**v347)(uint64_t, uint64_t, uint64_t);
  NSObject *v348;
  int v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  uint64_t v363;
  void *object;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  Swift::Float v369;
  uint64_t v370;
  Swift::Float v371;
  float v372;
  float v373;
  float v374;
  uint64_t v375;
  Swift::Float v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  void *v388;
  void *v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  uint8_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned char **v396;
  uint64_t *v397;
  uint64_t *v398;
  void *v399;
  uint32_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t (**v409)(uint64_t, uint64_t, uint64_t);
  NSObject *v410;
  int v411;
  uint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  void *v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  uint8_t *v423;
  uint64_t v424;
  uint64_t v425;
  unsigned char **v426;
  uint64_t *v427;
  uint64_t *v428;
  void *v429;
  void *v430;
  uint64_t v431;
  uint32_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t (**v442)(uint64_t, uint64_t, uint64_t);
  NSObject *v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  void *v458;
  uint64_t v459;
  void *v460;
  uint64_t v461;
  uint8_t *v462;
  uint64_t v463;
  uint64_t v464;
  unsigned char **v465;
  uint64_t *v466;
  uint64_t *v467;
  void *v468;
  void (*v469)(char *, char *, uint64_t);
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  void (*v474)(char *, char *, uint64_t);
  uint32_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t (**v485)(uint64_t, uint64_t, uint64_t);
  NSObject *v486;
  int v487;
  void *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  void (*v509)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  id v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  BOOL v519;
  id v520;
  id v521;
  id v522;
  id v523;
  id v524;
  id v525;
  id v526;
  id v527;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  void *v531;
  uint64_t v532;
  void *v533;
  uint64_t v534;
  uint8_t *v535;
  uint64_t v536;
  uint64_t v537;
  unsigned char **v538;
  uint64_t *v539;
  uint64_t *v540;
  void *v541;
  void *v542;
  void (*v543)(char *, uint64_t);
  void *v544;
  uint32_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t (**v555)(uint64_t, uint64_t, uint64_t);
  NSObject *v556;
  int v557;
  void *v558;
  uint64_t v559;
  void *v560;
  uint64_t v561;
  uint8_t *v562;
  uint64_t v563;
  uint64_t v564;
  unsigned char **v565;
  uint64_t *v566;
  uint64_t *v567;
  void *v568;
  Class *v569;
  void *v570;
  uint64_t (*v571)();
  uint64_t (*v572)();
  uint64_t (*v573)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v574)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v575)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v576)();
  uint64_t (*v577)();
  uint64_t (*v578)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v579)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v580)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v581)();
  uint64_t (*v582)();
  uint64_t (*v583)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v584)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v585)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v586)();
  uint64_t (*v587)();
  uint64_t (*v588)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v589)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v590)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v591)(uint64_t);
  uint64_t (*v592)();
  uint64_t (*v593)();
  uint64_t (*v594)();
  uint64_t (*v595)();
  uint64_t (*v596)();
  uint64_t (*v597)();
  uint64_t (*v598)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v599)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v600)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v601)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v602)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v603)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v604)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v605)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v606)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v607)();
  uint64_t (*v608)();
  uint64_t (*v609)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v610)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v611)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v612)();
  uint64_t (*v613)();
  uint64_t (*v614)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v615)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v616)(uint64_t, uint64_t, uint64_t);
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  char *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  char *v630;
  unint64_t v631;
  char *v632;
  uint64_t v633;
  unint64_t v634;
  char *v635;
  unint64_t v636;
  char *v637;
  unint64_t v638;
  char *v639;
  void *v640;
  id v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  char *v645;
  unint64_t v646;
  char *v647;
  unint64_t v648;
  char *v649;
  unint64_t v650;
  char *v651;
  unint64_t v652;
  char *v653;
  unint64_t v654;
  char *v655;
  unint64_t v656;
  char *v657;
  unint64_t v658;
  char *v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  void (*v663)(char *, uint64_t, uint64_t);
  void *v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t *v667;
  unint64_t v668;
  uint32_t v669;
  uint64_t v670;
  uint64_t (*v671)();
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t (*v675)();
  uint64_t v676;
  uint64_t (*v677)(uint64_t, uint64_t, uint64_t);
  uint64_t v678;
  uint64_t (*v679)(uint64_t, uint64_t, uint64_t);
  uint64_t v680;
  uint64_t v681;
  uint64_t (*v682)(uint64_t, uint64_t, uint64_t);
  uint64_t v683;
  uint64_t (**v684)(uint64_t, uint64_t, uint64_t);
  uint64_t v685;
  NSObject *v686;
  int v687;
  uint64_t (*v688)(uint64_t, uint64_t, uint64_t);
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unsigned char *v692;
  uint64_t (*v693)(uint64_t, uint64_t, uint64_t);
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  unsigned char *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t (*v700)(uint64_t, uint64_t, uint64_t);
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unsigned char *v704;
  uint64_t (*v705)(uint64_t, uint64_t, uint64_t);
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  unsigned char *v709;
  void v710[2];
  uint64_t (*v711)(uint64_t, uint64_t, uint64_t);
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unsigned char *v715[2];
  uint32_t v716;
  uint64_t v717;
  uint32_t v718;
  uint64_t v719;
  void v720[4];
  uint32_t v721;
  uint64_t v722;
  uint64_t (*v723)(uint64_t, uint64_t, uint64_t);
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unsigned char *v727[2];
  uint32_t v728;
  Swift::String v729;
  Swift::String v730;
  uint64_t v731;
  uint64_t v732;
  Swift::String v733;
  Swift::Float v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t (*v741)(uint64_t, uint64_t, uint64_t);
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unsigned char *v745;
  uint64_t (*v746)(uint64_t, uint64_t, uint64_t);
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unsigned char *v750[2];
  uint32_t v751;
  uint64_t v752;
  long long v753;
  uint64_t v754;
  long long v755;
  uint64_t v756;
  long long v757;
  uint64_t v758;
  long long v759;
  uint64_t v760;
  uint32_t v761;
  Class v762;
  char v763;
  uint64_t v764;
  objc_class *v765;
  BOOL v766;
  Class v767;
  uint64_t v768;
  uint64_t v769;
  uint32_t v770;
  uint64_t v771;
  uint32_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  char *v776;
  char *v777;
  INPerson_optional v778;
  INCurrencyAmount_optional v779;

  uint64_t v2 = MEMORY[0x270FA5388](a1);
  v569 = v3;
  v642 = v2;
  unint64_t v641 = v4;
  v640 = v5;
  v570 = v1;
  v633 = 0;
  uint64_t v671 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v675 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v677 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v679 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v682 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v571 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v572 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v573 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v574 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v575 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v576 = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v577 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v578 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v579 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v580 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v581 = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v582 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v583 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v584 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v585 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v586 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v587 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v588 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v589 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v590 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v591 = closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v592 = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v593 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v594 = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v595 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v596 = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v597 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v598 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v599 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v600 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v601 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v602 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v603 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v604 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v605 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v606 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v607 = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v608 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v609 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v610 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v611 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v612 = partial apply for implicit closure #8 in ConfirmationViewBuilder.makePaymentConfirmationWatchViews<A, B>(app:intent:response:confirmLabelProvider:);
  uint64_t v613 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v614 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v615 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v616 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v777 = 0;
  v776 = 0;
  v775 = 0;
  v774 = 0;
  v773 = 0;
  uint64_t v768 = 0;
  uint64_t v762 = 0;
  uint64_t v753 = 0uLL;
  uint64_t v740 = 0;
  uint64_t v737 = 0;
  v738 = 0;
  uint64_t v736 = 0;
  v734 = 0.0;
  v733._uint64_t countAndFlagsBits = 0;
  v733._object = 0;
  uint64_t v731 = 0;
  uint64_t v732 = 0;
  uint64_t v719 = 0;
  uint64_t v699 = 0;
  v698 = 0;
  uint64_t v617 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v618 = (uint64_t)&v200 - v617;
  uint64_t v619 = type metadata accessor for ContactResolverConfig();
  uint64_t v620 = *(void *)(v619 - 8);
  uint64_t v621 = v619 - 8;
  unint64_t v622 = (*(void *)(v620 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v633);
  v623 = (char *)&v200 - v622;
  unint64_t v624 = type metadata accessor for ContactQuery();
  uint64_t v626 = *(void *)(v624 - 8);
  v625 = v624 - 8;
  unint64_t v627 = v626;
  v628 = *(void *)(v626 + 64);
  unint64_t v629 = (v628 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v624);
  v630 = (char *)&v200 - v629;
  unint64_t v631 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v200 - v629);
  v632 = (char *)&v200 - v631;
  v777 = (char *)&v200 - v631;
  id v634 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v633);
  uint64_t v635 = (char *)&v200 - v634;
  uint64_t v636 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v637 = (char *)&v200 - v636;
  v638 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  unint64_t v639 = (char *)&v200 - v638;
  v776 = (char *)&v200 - v638;
  uint32_t v662 = type metadata accessor for Logger();
  v660 = *(void **)(v662 - 8);
  unint64_t v661 = v662 - 8;
  unint64_t v643 = v660[8];
  v644 = (v643 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v642);
  unint64_t v645 = (char *)&v200 - v644;
  v646 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v647 = (char *)&v200 - v646;
  v648 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v649 = (char *)&v200 - v648;
  v650 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  unint64_t v651 = (char *)&v200 - v650;
  v652 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v653 = (char *)&v200 - v652;
  uint64_t v654 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v655 = (char *)&v200 - v654;
  v656 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v657 = (char *)&v200 - v656;
  unint64_t v658 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = (uint64_t *)MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v200 - v658;
  unint64_t v659 = (char *)&v200 - v658;
  v672 = *v25;
  v775 = v672;
  v774 = v27;
  v773 = v28;
  uint64_t v29 = Logger.payments.unsafeMutableAddressor();
  uint64_t v663 = (void (*)(char *, uint64_t, uint64_t))v660[2];
  v664 = v660 + 2;
  v663(v26, v29, v662);
  swift_retain();
  v686 = Logger.logObject.getter();
  uint64_t v687 = static os_log_type_t.debug.getter();
  uint64_t v667 = &v771;
  INPerson_optional v771 = 12;
  uint64_t v665 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v666 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v668 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v669 = v772;
  v670 = 17;
  uint64_t v674 = 7;
  uint64_t v678 = swift_allocObject();
  *(unsigned char *)(v678 + 16) = 32;
  int v680 = swift_allocObject();
  *(unsigned char *)(v680 + 16) = 8;
  uint64_t v673 = 32;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v672;
  uint64_t v676 = v30;
  *(void *)(v30 + 16) = v671;
  *(void *)(v30 + 24) = v31;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v676;
  uint64_t v683 = v32;
  *(void *)(v32 + 16) = v675;
  *(void *)(v32 + 24) = v33;
  v685 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  v681 = _allocateUninitializedArray<A>(_:)();
  uint64_t v684 = v34;
  swift_retain();
  uint64_t v35 = v678;
  uint64_t v36 = v684;
  *uint64_t v684 = v677;
  v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  swift_retain();
  uint64_t v37 = v680;
  uint64_t v38 = v684;
  v684[2] = v679;
  v38[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  swift_retain();
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v683;
  unint64_t v40 = v684;
  v684[4] = v682;
  v40[5] = v39;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v686, (os_log_type_t)v687))
  {
    v562 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v561 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v563 = createStorage<A>(capacity:type:)(0);
    v564 = createStorage<A>(capacity:type:)(1);
    v565 = &v692;
    uint64_t v692 = v562;
    v566 = &v691;
    uint64_t v691 = v563;
    v567 = &v690;
    v690 = v564;
    serialize(_:at:)(2, &v692);
    serialize(_:at:)(1, v565);
    uint64_t v41 = v570;
    uint64_t v688 = v677;
    uint64_t v689 = v678;
    closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)v565, (uint64_t)v566, (uint64_t)v567);
    v568 = v41;
    if (v41)
    {
      __break(1u);
    }
    else
    {
      uint64_t v688 = v679;
      uint64_t v689 = v680;
      closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)&v692, (uint64_t)&v691, (uint64_t)&v690);
      v559 = 0;
      uint64_t v688 = v682;
      uint64_t v689 = v683;
      closure #1 in osLogInternal(_:log:type:)(&v688, (uint64_t)&v692, (uint64_t)&v691, (uint64_t)&v690);
      v558 = 0;
      _os_log_impl(&dword_25D85A000, v686, (os_log_type_t)v687, "#Transformer for pay_common_Payment task %s", v562, v669);
      destroyStorage<A>(_:count:)(v563, 0, v561);
      destroyStorage<A>(_:count:)(v564, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v562, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v560 = v558;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v560 = v570;
  }
  uint64_t v42 = v657;
  uint64_t v542 = v560;

  uint64_t v543 = (void (*)(char *, uint64_t))v660[1];
  uint64_t v544 = v660 + 1;
  v543(v659, v662);
  uint64_t v43 = Logger.payments.unsafeMutableAddressor();
  v663(v42, v43, v662);
  id v44 = v641;
  v548 = 7;
  v549 = swift_allocObject();
  *(void *)(v549 + 16) = v641;
  uint64_t v556 = Logger.logObject.getter();
  uint64_t v557 = static os_log_type_t.debug.getter();
  v769 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v545 = v770;
  uint64_t v546 = 17;
  v551 = swift_allocObject();
  *(unsigned char *)(v551 + 16) = 32;
  uint64_t v552 = swift_allocObject();
  *(unsigned char *)(v552 + 16) = 8;
  uint64_t v547 = 32;
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v549;
  int v550 = v45;
  *(void *)(v45 + 16) = v571;
  *(void *)(v45 + 24) = v46;
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v550;
  uint64_t v554 = v47;
  *(void *)(v47 + 16) = v572;
  *(void *)(v47 + 24) = v48;
  v553 = _allocateUninitializedArray<A>(_:)();
  v555 = v49;
  swift_retain();
  uint64_t v50 = v551;
  uint64_t v51 = v555;
  uint8_t *v555 = v573;
  v51[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v50;
  swift_retain();
  uint64_t v52 = v552;
  uint64_t v53 = v555;
  v555[2] = v574;
  v53[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  swift_retain();
  unint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v554;
  unint64_t v55 = v555;
  v555[4] = v575;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v556, (os_log_type_t)v557))
  {
    v535 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v534 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v536 = createStorage<A>(capacity:type:)(0);
    v537 = createStorage<A>(capacity:type:)(1);
    uint32_t v538 = &v697;
    v697 = v535;
    uint64_t v539 = &v696;
    uint64_t v696 = v536;
    uint64_t v540 = &v695;
    uint64_t v695 = v537;
    serialize(_:at:)(2, &v697);
    serialize(_:at:)(1, v538);
    uint64_t v56 = v542;
    v693 = v573;
    uint64_t v694 = v551;
    closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)v538, (uint64_t)v539, (uint64_t)v540);
    uint64_t v541 = v56;
    if (v56)
    {
      __break(1u);
    }
    else
    {
      v693 = v574;
      uint64_t v694 = v552;
      closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
      v532 = 0;
      v693 = v575;
      uint64_t v694 = v554;
      closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
      v531 = 0;
      _os_log_impl(&dword_25D85A000, v556, (os_log_type_t)v557, "#Transformer for pay_common_Payment previous intent is %s", v535, v545);
      destroyStorage<A>(_:count:)(v536, 0, v534);
      destroyStorage<A>(_:count:)(v537, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v535, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v533 = v531;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v533 = v542;
  }
  v528 = v533;

  v543(v657, v662);
  uint64_t v529 = swift_allocObject();
  uint64_t v530 = v529 + 16;
  uint64_t v768 = v529 + 16;
  id v57 = v641;
  if (v641)
  {
    uint64_t v527 = v641;
    v526 = v641;
    id v58 = objc_msgSend(v641, sel_payee);
    uint64_t v59 = v526;
    *(void *)(v529 + 16) = v58;
  }
  else
  {
    *(void *)(v529 + 16) = 0;
  }
  id v60 = v641;
  if (v641)
  {
    uint64_t v525 = v641;
    v524 = v641;
    uint64_t v767 = (Class)objc_msgSend(v641, sel_currencyAmount);
  }
  else
  {
    uint64_t v767 = 0;
  }
  id v61 = v641;
  if (v641)
  {
    uint64_t v523 = v641;
    v521 = v641;
    uint64_t v522 = objc_msgSend(v641, sel_note);
    if (v522)
    {
      id v520 = v522;
      id v515 = v522;
      id v516 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v517 = v62;

      id v518 = v516;
      id v519 = v517;
    }
    else
    {
      id v518 = 0;
      id v519 = 0;
    }
    uint32_t v765 = (objc_class *)v518;
    uint64_t v766 = v519;
  }
  else
  {
    uint32_t v765 = 0;
    uint64_t v766 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  id v514 = v764;
  if (v764)
  {
    id v513 = v514;
    id v508 = v514;
    uint64_t v740 = v514;
    swift_release();
    uint64_t v509 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v626 + 56);
    uint64_t v510 = v626 + 56;
    v509(v639, 1, 1, v624);
    uint64_t v511 = dispatch thunk of UsoEntity_common_Payment.payee.getter();
    if (v511
      && (uint64_t v507 = v511,
          v505 = v511,
          uint64_t v506 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter(),
          swift_release(),
          v506))
    {
      uint64_t v504 = v506;
      uint64_t v501 = v506;
      v502 = CodeGenBase.entity.getter();
      swift_release();
      uint64_t v503 = v502;
    }
    else
    {
      uint64_t v503 = 0;
    }
    uint64_t v499 = v503;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v500 = v739;
    if (v739)
    {
      uint64_t v498 = v500;
      uint64_t v495 = v500;
      v698 = v500;
      UsoEntity_common_Person.toContactQuery()();
      v509(v637, 0, 1, v624);
      outlined assign with take of ContactQuery?(v637, v639);
      swift_release();
    }
    else
    {
      uint64_t v497 = dispatch thunk of UsoEntity_common_Payment.payee.getter();
      if (v497)
      {
        uint64_t v496 = v497;
        uint64_t v492 = v497;
        uint64_t v493 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter();
        swift_release();
        uint64_t v494 = v493;
      }
      else
      {
        uint64_t v494 = 0;
      }
      uint64_t v491 = v494;
      if (v494)
      {
        uint64_t v490 = v491;
        uint64_t v489 = v491;
        uint64_t v699 = v491;
        UsoEntity_common_Agent.toContactQuery()();
        v509(v637, 0, 1, v624);
        outlined assign with take of ContactQuery?(v637, v639);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v639, v635);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v626 + 48))(v635, 1, v624) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v635);
      uint64_t v488 = v528;
    }
    else
    {
      uint64_t v63 = v655;
      uint64_t v471 = v627;
      uint64_t v474 = *(void (**)(char *, char *, uint64_t))(v626 + 32);
      uint64_t v473 = v626 + 32;
      v474(v632, v635, v624);
      uint64_t v64 = Logger.payments.unsafeMutableAddressor();
      v663(v63, v64, v662);
      uint64_t v469 = *(void (**)(char *, char *, uint64_t))(v626 + 16);
      uint64_t v470 = v626 + 16;
      v469(v630, v632, v624);
      uint64_t v472 = (*(unsigned __int8 *)(v471 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v471 + 80);
      v478 = 7;
      v479 = swift_allocObject();
      v474((char *)(v479 + v472), v630, v624);
      uint64_t v486 = Logger.logObject.getter();
      uint64_t v487 = static os_log_type_t.debug.getter();
      v720[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v475 = v721;
      uint64_t v476 = 17;
      v481 = swift_allocObject();
      *(unsigned char *)(v481 + 16) = 32;
      uint64_t v482 = swift_allocObject();
      *(unsigned char *)(v482 + 16) = 8;
      uint64_t v477 = 32;
      uint64_t v65 = swift_allocObject();
      uint64_t v66 = v479;
      int v480 = v65;
      *(void *)(v65 + 16) = v576;
      *(void *)(v65 + 24) = v66;
      uint64_t v67 = swift_allocObject();
      uint64_t v68 = v480;
      uint64_t v484 = v67;
      *(void *)(v67 + 16) = v577;
      *(void *)(v67 + 24) = v68;
      uint64_t v483 = _allocateUninitializedArray<A>(_:)();
      uint64_t v485 = v69;
      swift_retain();
      uint64_t v70 = v481;
      uint64_t v71 = v485;
      *uint64_t v485 = v578;
      v71[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
      swift_retain();
      uint64_t v72 = v482;
      uint64_t v73 = v485;
      v485[2] = v579;
      v73[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v72;
      swift_retain();
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v484;
      uint64_t v75 = v485;
      v485[4] = v580;
      v75[5] = v74;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v486, (os_log_type_t)v487))
      {
        v462 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v461 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v463 = createStorage<A>(capacity:type:)(0);
        uint64_t v464 = createStorage<A>(capacity:type:)(1);
        unint64_t v465 = &v704;
        v704 = v462;
        uint64_t v466 = &v703;
        v703 = v463;
        v467 = &v702;
        v702 = v464;
        serialize(_:at:)(2, &v704);
        serialize(_:at:)(1, v465);
        uint64_t v76 = v528;
        uint64_t v700 = v578;
        uint64_t v701 = v481;
        closure #1 in osLogInternal(_:log:type:)(&v700, (uint64_t)v465, (uint64_t)v466, (uint64_t)v467);
        uint32_t v468 = v76;
        if (v76)
        {
          __break(1u);
        }
        else
        {
          uint64_t v700 = v579;
          uint64_t v701 = v482;
          closure #1 in osLogInternal(_:log:type:)(&v700, (uint64_t)&v704, (uint64_t)&v703, (uint64_t)&v702);
          v459 = 0;
          uint64_t v700 = v580;
          uint64_t v701 = v484;
          closure #1 in osLogInternal(_:log:type:)(&v700, (uint64_t)&v704, (uint64_t)&v703, (uint64_t)&v702);
          uint64_t v458 = 0;
          _os_log_impl(&dword_25D85A000, v486, (os_log_type_t)v487, "#Transformer payee contact in USO parse as ContactQuery is: %s", v462, v475);
          destroyStorage<A>(_:count:)(v463, 0, v461);
          destroyStorage<A>(_:count:)(v464, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v462, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v460 = v458;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v460 = v528;
      }
      uint64_t v452 = v460;

      v543(v655, v662);
      uint64_t v453 = v640[3];
      uint64_t v454 = v640[4];
      __swift_project_boxed_opaque_existential_1(v640, v453);
      uint64_t v448 = _allocateUninitializedArray<A>(_:)();
      v469(v77, v632, v624);
      uint64_t v78 = v448;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v451 = v78;
      uint64_t v449 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      uint64_t v450 = v720;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v620 + 16))(v623, v449, v619);
      swift_endAccess();
      uint64_t v79 = v452;
      uint64_t v80 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v454 + 16))(v451, v623, v453);
      uint64_t v455 = (uint64_t)v79;
      uint64_t v456 = v80;
      uint64_t v457 = v79;
      if (v79)
      {
        uint64_t v200 = v457;
        uint64_t v201 = 0;
        uint64_t v202 = 0;
        (*(void (**)(char *, uint64_t))(v620 + 8))(v623, v619);
        swift_bridgeObjectRelease();

        uint64_t v446 = v201;
        uint64_t v447 = v202;
      }
      else
      {
        uint64_t v445 = v456;
        (*(void (**)(char *, uint64_t))(v620 + 8))(v623, v619);
        swift_bridgeObjectRelease();
        uint64_t v446 = v445;
        uint64_t v447 = v455;
      }
      uint64_t v81 = v653;
      uint64_t v430 = (void *)v447;
      uint64_t v431 = v446;
      uint64_t v719 = v446;
      uint64_t v82 = Logger.payments.unsafeMutableAddressor();
      v663(v81, v82, v662);
      swift_bridgeObjectRetain();
      uint64_t v435 = 7;
      uint64_t v436 = swift_allocObject();
      *(void *)(v436 + 16) = v431;
      uint64_t v443 = Logger.logObject.getter();
      uint64_t v444 = static os_log_type_t.debug.getter();
      uint64_t v717 = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v432 = v718;
      uint64_t v433 = 17;
      uint64_t v438 = swift_allocObject();
      *(unsigned char *)(v438 + 16) = 32;
      uint64_t v439 = swift_allocObject();
      *(unsigned char *)(v439 + 16) = 8;
      uint64_t v434 = 32;
      uint64_t v83 = swift_allocObject();
      uint64_t v84 = v436;
      int v437 = v83;
      *(void *)(v83 + 16) = v581;
      *(void *)(v83 + 24) = v84;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v437;
      uint64_t v441 = v85;
      *(void *)(v85 + 16) = v582;
      *(void *)(v85 + 24) = v86;
      uint64_t v440 = _allocateUninitializedArray<A>(_:)();
      uint64_t v442 = v87;
      swift_retain();
      uint64_t v88 = v438;
      uint64_t v89 = v442;
      *uint64_t v442 = v583;
      v89[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
      swift_retain();
      uint64_t v90 = v439;
      uint64_t v91 = v442;
      v442[2] = v584;
      v91[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
      swift_retain();
      uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v441;
      uint64_t v93 = v442;
      v442[4] = v585;
      v93[5] = v92;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v443, (os_log_type_t)v444))
      {
        uint64_t v423 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v422 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v424 = createStorage<A>(capacity:type:)(0);
        uint32_t v425 = createStorage<A>(capacity:type:)(1);
        uint64_t v426 = &v709;
        uint32_t v709 = v423;
        uint64_t v427 = &v708;
        v708 = v424;
        uint64_t v428 = &v707;
        uint64_t v707 = v425;
        serialize(_:at:)(2, &v709);
        serialize(_:at:)(1, v426);
        uint64_t v94 = v430;
        uint64_t v705 = v583;
        uint64_t v706 = v438;
        closure #1 in osLogInternal(_:log:type:)(&v705, (uint64_t)v426, (uint64_t)v427, (uint64_t)v428);
        uint64_t v429 = v94;
        if (v94)
        {
          __break(1u);
        }
        else
        {
          uint64_t v705 = v584;
          uint64_t v706 = v439;
          closure #1 in osLogInternal(_:log:type:)(&v705, (uint64_t)&v709, (uint64_t)&v708, (uint64_t)&v707);
          uint64_t v420 = 0;
          uint64_t v705 = v585;
          uint64_t v706 = v441;
          closure #1 in osLogInternal(_:log:type:)(&v705, (uint64_t)&v709, (uint64_t)&v708, (uint64_t)&v707);
          os_log_type_t v419 = 0;
          _os_log_impl(&dword_25D85A000, v443, (os_log_type_t)v444, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v423, v432);
          destroyStorage<A>(_:count:)(v424, 0, v422);
          destroyStorage<A>(_:count:)(v425, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v423, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          char v421 = v419;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        char v421 = v430;
      }
      uint64_t v418 = v421;

      v543(v653, v662);
      swift_bridgeObjectRetain();
      if (v431)
      {
        uint64_t v417 = v431;
        uint64_t v414 = v431;
        swift_bridgeObjectRetain();
        uint64_t v413 = v710;
        v710[0] = v414;
        uint64_t v412 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        uint64_t v415 = v710[1];
        swift_bridgeObjectRelease();
        uint64_t v416 = v415;
      }
      else
      {
        uint64_t v416 = 0;
      }
      uint64_t v95 = v651;
      uint64_t v96 = *(void **)(v529 + 16);
      *(void *)(v529 + 16) = v416;

      uint64_t v97 = Logger.payments.unsafeMutableAddressor();
      v663(v95, v97, v662);
      swift_retain();
      uint64_t v410 = Logger.logObject.getter();
      v411 = static os_log_type_t.debug.getter();
      v715[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v400 = v716;
      uint64_t v401 = 17;
      uint64_t v403 = 7;
      uint64_t v405 = swift_allocObject();
      *(unsigned char *)(v405 + 16) = 32;
      uint64_t v406 = swift_allocObject();
      *(unsigned char *)(v406 + 16) = 8;
      uint64_t v402 = 32;
      uint64_t v98 = swift_allocObject();
      uint64_t v99 = v529;
      int v404 = v98;
      *(void *)(v98 + 16) = v586;
      *(void *)(v98 + 24) = v99;
      uint64_t v100 = swift_allocObject();
      uint64_t v101 = v404;
      uint64_t v408 = v100;
      *(void *)(v100 + 16) = v587;
      *(void *)(v100 + 24) = v101;
      uint64_t v407 = _allocateUninitializedArray<A>(_:)();
      uint64_t v409 = v102;
      swift_retain();
      uint64_t v103 = v405;
      uint64_t v104 = v409;
      *uint64_t v409 = v588;
      v104[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v103;
      swift_retain();
      uint64_t v105 = v406;
      uint64_t v106 = v409;
      v409[2] = v589;
      v106[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v105;
      swift_retain();
      uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v408;
      uint64_t v108 = v409;
      v409[4] = v590;
      v108[5] = v107;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v410, (os_log_type_t)v411))
      {
        uint32_t v393 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v392 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v394 = createStorage<A>(capacity:type:)(0);
        uint64_t v395 = createStorage<A>(capacity:type:)(1);
        uint64_t v396 = v715;
        v715[0] = v393;
        uint64_t v397 = &v714;
        uint32_t v714 = v394;
        uint64_t v398 = &v713;
        v713 = v395;
        serialize(_:at:)(2, v715);
        serialize(_:at:)(1, v396);
        uint64_t v109 = v418;
        uint32_t v711 = v588;
        uint64_t v712 = v405;
        closure #1 in osLogInternal(_:log:type:)(&v711, (uint64_t)v396, (uint64_t)v397, (uint64_t)v398);
        uint64_t v399 = v109;
        if (v109)
        {
          __break(1u);
        }
        else
        {
          uint32_t v711 = v589;
          uint64_t v712 = v406;
          closure #1 in osLogInternal(_:log:type:)(&v711, (uint64_t)v715, (uint64_t)&v714, (uint64_t)&v713);
          uint64_t v390 = 0;
          uint32_t v711 = v590;
          uint64_t v712 = v408;
          closure #1 in osLogInternal(_:log:type:)(&v711, (uint64_t)v715, (uint64_t)&v714, (uint64_t)&v713);
          uint32_t v389 = 0;
          _os_log_impl(&dword_25D85A000, v410, (os_log_type_t)v411, "#Transformer resolved payee from matches as %s", v393, v400);
          destroyStorage<A>(_:count:)(v394, 0, v392);
          destroyStorage<A>(_:count:)(v395, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v393, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          unint64_t v391 = v389;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        unint64_t v391 = v418;
      }
      uint64_t v388 = v391;

      v543(v651, v662);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v626 + 8))(v632, v624);
      uint64_t v488 = v388;
    }
    uint64_t v386 = v488;
    uint64_t v387 = dispatch thunk of UsoEntity_common_Payment.amount.getter();
    if (v387)
    {
      uint64_t v385 = v387;
      uint64_t v382 = v387;
      uint64_t v736 = v387;
      uint64_t v383 = dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter();
      if (v383)
      {
        uint64_t v381 = v383;
        uint64_t v378 = v383;
        uint64_t v379 = CodeGenBase.entity.getter();
        swift_release();
        uint64_t v380 = v379;
      }
      else
      {
        uint64_t v380 = 0;
      }
      uint64_t v375 = v380;
      double v110 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      uint64_t v374 = *(float *)&v110;
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      uint64_t v372 = v111;
      uint64_t v373 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v112 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      uint64_t v735 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v375, v374, v372, v373, v112);
      uint64_t v376 = *(float *)&v735;
      uint64_t v377 = BYTE4(v735);
      swift_release();
      if ((v377 & 1) == 0)
      {
        uint64_t v371 = v376;
        Swift::Float v369 = v376;
        v734 = v376;
        uint64_t v733 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        int v370 = dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter();
        if (v370)
        {
          uint64_t v368 = v370;
          float v365 = v370;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          float v366 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v366)
          {
            uint64_t v363 = v366;
            Swift::String v722 = v366;
            uint64_t v361 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            int v113 = v386;
            uint64_t result = Sequence.first(where:)();
            Swift::Float v362 = v113;
            if (v113)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            uint64_t v358 = type metadata accessor for UsoIdentifier();
            uint64_t v359 = *(void *)(v358 - 8);
            uint64_t v360 = v358 - 8;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v359 + 48))(v618, 1) != 1)
            {
              uint64_t v353 = UsoIdentifier.value.getter();
              uint64_t v354 = v115;
              (*(void (**)(uint64_t, uint64_t))(v359 + 8))(v618, v358);
              uint64_t v355 = v353;
              uint64_t v356 = v354;
              uint32_t v357 = v362;
LABEL_83:
              uint64_t v350 = v357;
              uint64_t v351 = v356;
              uint64_t v352 = v355;
              uint64_t v731 = v355;
              uint64_t v732 = v356;
              v729._uint64_t countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v729._object = v116;
              if (v116)
              {
                uint64_t v730 = v729;
              }
              else
              {
                uint64_t v730 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              uint64_t v117 = v649;
              uint64_t v324 = v730;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v733 = v324;
              swift_bridgeObjectRelease();
              uint64_t v118 = Logger.payments.unsafeMutableAddressor();
              v663(v117, v118, v662);
              uint64_t v334 = 7;
              uint64_t v326 = swift_allocObject();
              *(Swift::Float *)(v326 + 16) = v369;
              uint64_t v333 = 32;
              uint64_t v119 = swift_allocObject();
              uint64_t v120 = v324._object;
              uint64_t v328 = v119;
              *(void *)(v119 + 16) = v324._countAndFlagsBits;
              *(void *)(v119 + 24) = v120;
              swift_bridgeObjectRetain();
              uint64_t v121 = swift_allocObject();
              uint64_t v122 = v351;
              uint64_t v335 = v121;
              *(void *)(v121 + 16) = v352;
              *(void *)(v121 + 24) = v122;
              uint64_t v348 = Logger.logObject.getter();
              uint64_t v349 = static os_log_type_t.debug.getter();
              v727[1] = (unsigned char *)v333;
              UnsignedInteger<>.init<A>(_:)();
              int v325 = v728;
              uint64_t v331 = 17;
              uint64_t v337 = swift_allocObject();
              uint64_t v330 = 32;
              *(unsigned char *)(v337 + 16) = 32;
              uint64_t v338 = swift_allocObject();
              uint64_t v332 = 8;
              *(unsigned char *)(v338 + 16) = 8;
              uint64_t v123 = swift_allocObject();
              uint64_t v124 = v326;
              uint64_t v327 = v123;
              *(void *)(v123 + 16) = v592;
              *(void *)(v123 + 24) = v124;
              uint64_t v125 = swift_allocObject();
              uint64_t v126 = v327;
              uint64_t v339 = v125;
              *(void *)(v125 + 16) = v593;
              *(void *)(v125 + 24) = v126;
              Swift::String v340 = swift_allocObject();
              *(unsigned char *)(v340 + 16) = v330;
              uint64_t v341 = swift_allocObject();
              *(unsigned char *)(v341 + 16) = v332;
              uint64_t v127 = swift_allocObject();
              uint64_t v128 = v328;
              uint64_t v329 = v127;
              *(void *)(v127 + 16) = v594;
              *(void *)(v127 + 24) = v128;
              uint64_t v129 = swift_allocObject();
              uint64_t v130 = v329;
              int v342 = v129;
              *(void *)(v129 + 16) = v595;
              *(void *)(v129 + 24) = v130;
              Swift::String v343 = swift_allocObject();
              *(unsigned char *)(v343 + 16) = v330;
              uint64_t v344 = swift_allocObject();
              *(unsigned char *)(v344 + 16) = v332;
              uint64_t v131 = swift_allocObject();
              uint64_t v132 = v335;
              uint64_t v336 = v131;
              *(void *)(v131 + 16) = v596;
              *(void *)(v131 + 24) = v132;
              uint64_t v133 = swift_allocObject();
              uint64_t v134 = v336;
              uint64_t v346 = v133;
              *(void *)(v133 + 16) = v597;
              *(void *)(v133 + 24) = v134;
              uint64_t v345 = _allocateUninitializedArray<A>(_:)();
              uint64_t v347 = v135;
              swift_retain();
              uint64_t v136 = v337;
              uint64_t v137 = v347;
              *uint64_t v347 = v598;
              v137[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
              swift_retain();
              uint64_t v138 = v338;
              uint64_t v139 = v347;
              v347[2] = v599;
              v139[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v138;
              swift_retain();
              uint64_t v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v339;
              uint64_t v141 = v347;
              v347[4] = v600;
              v141[5] = v140;
              swift_retain();
              uint64_t v142 = v340;
              uint64_t v143 = v347;
              v347[6] = v601;
              v143[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v142;
              swift_retain();
              uint64_t v144 = v341;
              uint64_t v145 = v347;
              v347[8] = v602;
              v145[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v144;
              swift_retain();
              uint64_t v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v342;
              uint32_t v147 = v347;
              v347[10] = v603;
              v147[11] = v146;
              swift_retain();
              uint64_t v148 = v343;
              uint64_t v149 = v347;
              v347[12] = v604;
              v149[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
              swift_retain();
              uint64_t v150 = v344;
              uint64_t v151 = v347;
              v347[14] = v605;
              v151[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v150;
              swift_retain();
              uint64_t v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v346;
              uint64_t v153 = v347;
              v347[16] = v606;
              v153[17] = v152;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v348, (os_log_type_t)v349))
              {
                Swift::String v317 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                uint64_t v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                uint32_t v318 = createStorage<A>(capacity:type:)(0);
                uint64_t v319 = createStorage<A>(capacity:type:)(3);
                uint64_t v320 = v727;
                v727[0] = v317;
                uint64_t v321 = &v726;
                Swift::String v726 = v318;
                uint64_t v322 = &v725;
                uint64_t v725 = v319;
                serialize(_:at:)(2, v727);
                serialize(_:at:)(3, v320);
                uint64_t v154 = v350;
                Swift::String v723 = v598;
                uint64_t v724 = v337;
                closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v320, (uint64_t)v321, (uint64_t)v322);
                int v323 = v154;
                if (v154)
                {
                  __break(1u);
                }
                else
                {
                  Swift::String v723 = v599;
                  uint64_t v724 = v338;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v314 = 0;
                  Swift::String v723 = v600;
                  uint64_t v724 = v339;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v313 = 0;
                  Swift::String v723 = v601;
                  uint64_t v724 = v340;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v312 = 0;
                  Swift::String v723 = v602;
                  uint64_t v724 = v341;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v311 = 0;
                  Swift::String v723 = v603;
                  uint64_t v724 = v342;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v310 = 0;
                  Swift::String v723 = v604;
                  uint64_t v724 = v343;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v309 = 0;
                  Swift::String v723 = v605;
                  uint64_t v724 = v344;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v308 = 0;
                  Swift::String v723 = v606;
                  uint64_t v724 = v346;
                  closure #1 in osLogInternal(_:log:type:)(&v723, (uint64_t)v727, (uint64_t)&v726, (uint64_t)&v725);
                  uint64_t v307 = 0;
                  _os_log_impl(&dword_25D85A000, v348, (os_log_type_t)v349, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v317, v325);
                  destroyStorage<A>(_:count:)(v318, 0, v316);
                  destroyStorage<A>(_:count:)(v319, 3, MEMORY[0x263F8EE58] + 8);
                  MEMORY[0x2611B9630](v317, MEMORY[0x263F8E778]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  uint64_t v315 = v307;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                uint64_t v315 = v350;
              }
              uint64_t v305 = v315;

              v543(v649, v662);
              uint64_t v306 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if (v306)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v303 = 0;
                uint64_t v304 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v369), v369);
                Class isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v155, v324).super.isa;
                Class v157 = v767;
                uint64_t v767 = isa;
              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              uint64_t v384 = v305;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v618);
            float v367 = v362;
          }
          else
          {
            float v367 = v386;
          }
        }
        else
        {
          float v367 = v386;
        }
        uint64_t v355 = 0;
        uint64_t v356 = 0;
        uint32_t v357 = v367;
        goto LABEL_83;
      }
      swift_release();
      uint64_t v384 = v386;
    }
    else
    {
      uint64_t v384 = v386;
    }
LABEL_96:
    uint64_t v300 = v384;
    uint64_t v301 = dispatch thunk of UsoEntity_common_Payment.memo.getter();
    uint64_t v302 = v158;
    if (v158)
    {
      uint64_t v298 = v301;
      int v299 = v302;
      unint64_t v297 = v302;
      uint64_t v296 = v301;
      uint64_t v737 = v301;
      v738 = v302;
      swift_bridgeObjectRetain();
      uint32_t v765 = (objc_class *)v296;
      uint64_t v766 = v297;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v639);
    swift_release();
    BOOL v512 = v300;
    goto LABEL_99;
  }
  swift_release();
  BOOL v512 = v528;
LABEL_99:
  uint32_t v276 = v512;
  type metadata accessor for INSendPaymentIntent();
  uint64_t v277 = &v763;
  uint64_t v285 = 32;
  swift_beginAccess();
  uint64_t v278 = *(id *)(v529 + 16);
  id v159 = v278;
  swift_endAccess();
  uint64_t v279 = v767;
  int v160 = v767;
  uint64_t v280 = v765;
  uint64_t v281 = v766;
  swift_bridgeObjectRetain();
  v778.value.super.Class isa = (Class)v278;
  v778.is_nil = (char)v279;
  v779.value.super.Class isa = v280;
  v779.is_nil = v281;
  v162.super.super.Class isa = INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(v778, v779, v161).super.super.isa;
  uint64_t v163 = v647;
  uint64_t v282 = v162.super.super.isa;
  uint64_t v762 = v162.super.super.isa;
  uint64_t v164 = Logger.payments.unsafeMutableAddressor();
  v663(v163, v164, v662);
  int v165 = v282;
  Swift::String v286 = 7;
  uint64_t v287 = swift_allocObject();
  *(void *)(v287 + 16) = v282;
  uint64_t v294 = Logger.logObject.getter();
  uint64_t v295 = static os_log_type_t.debug.getter();
  Class v760 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v283 = v761;
  uint64_t v284 = 17;
  uint64_t v289 = swift_allocObject();
  *(unsigned char *)(v289 + 16) = 32;
  BOOL v290 = swift_allocObject();
  *(unsigned char *)(v290 + 16) = 8;
  uint64_t v166 = swift_allocObject();
  uint64_t v167 = v287;
  int v288 = v166;
  *(void *)(v166 + 16) = v607;
  *(void *)(v166 + 24) = v167;
  uint64_t v168 = swift_allocObject();
  uint64_t v169 = v288;
  uint64_t v292 = v168;
  *(void *)(v168 + 16) = v608;
  *(void *)(v168 + 24) = v169;
  uint64_t v291 = _allocateUninitializedArray<A>(_:)();
  unint64_t v293 = v170;
  swift_retain();
  uint64_t v171 = v289;
  uint64_t v172 = v293;
  void *v293 = v609;
  v172[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171;
  swift_retain();
  uint64_t v173 = v290;
  uint64_t v174 = v293;
  v293[2] = v610;
  v174[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v173;
  swift_retain();
  uint64_t v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v292;
  uint64_t v176 = v293;
  v293[4] = v611;
  v176[5] = v175;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v294, (os_log_type_t)v295))
  {
    uint64_t v269 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint32_t v270 = createStorage<A>(capacity:type:)(0);
    id v271 = createStorage<A>(capacity:type:)(1);
    Class v272 = &v745;
    uint64_t v745 = v269;
    char v273 = &v744;
    uint32_t v744 = v270;
    BOOL v274 = &v743;
    v743 = v271;
    serialize(_:at:)(2, &v745);
    serialize(_:at:)(1, v272);
    uint64_t v177 = v276;
    uint64_t v741 = v609;
    uint64_t v742 = v289;
    closure #1 in osLogInternal(_:log:type:)(&v741, (uint64_t)v272, (uint64_t)v273, (uint64_t)v274);
    Class v275 = v177;
    if (v177)
    {
      __break(1u);
    }
    else
    {
      uint64_t v741 = v610;
      uint64_t v742 = v290;
      closure #1 in osLogInternal(_:log:type:)(&v741, (uint64_t)&v745, (uint64_t)&v744, (uint64_t)&v743);
      uint64_t v266 = 0;
      uint64_t v741 = v611;
      uint64_t v742 = v292;
      closure #1 in osLogInternal(_:log:type:)(&v741, (uint64_t)&v745, (uint64_t)&v744, (uint64_t)&v743);
      uint64_t v265 = 0;
      _os_log_impl(&dword_25D85A000, v294, (os_log_type_t)v295, "#Transformer returning intent %s", v269, v283);
      destroyStorage<A>(_:count:)(v270, 0, v268);
      destroyStorage<A>(_:count:)(v271, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v269, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v267 = v265;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v267 = v276;
  }
  uint64_t v263 = v267;

  v543(v647, v662);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  uint64_t v264 = v758;
  swift_release();
  if (v264
    && (uint64_t v262 = v264,
        uint64_t v260 = v264,
        uint64_t v261 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(),
        swift_release(),
        v261))
  {
    uint64_t v259 = v261;
    uint64_t v256 = v261;
    *(void *)&uint64_t v257 = UsoEntity_common_App.appIdentifier.getter();
    *((void *)&v257 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v178;
    swift_release();
    uint32_t v258 = v257;
  }
  else
  {
    uint32_t v258 = 0uLL;
  }
  uint64_t v757 = v258;
  swift_retain();
  if (*((void *)&v757 + 1))
  {
    BOOL v759 = v757;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Target.target.getter();
    uint64_t v255 = v756;
    swift_release();
    if (!v255) {
      goto LABEL_134;
    }
    uint64_t v254 = v255;
    uint64_t v252 = v255;
    uint64_t v253 = dispatch thunk of UsoEntity_common_Payment.payer.getter();
    swift_release();
    if (!v253) {
      goto LABEL_134;
    }
    uint64_t v251 = v253;
    uint64_t v249 = v253;
    uint64_t v250 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    if (v250)
    {
      uint64_t v248 = v250;
      uint64_t v245 = v250;
      *(void *)&uint64_t v246 = UsoEntity_common_App.appIdentifier.getter();
      *((void *)&v246 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v179;
      swift_release();
      uint64_t v247 = v246;
    }
    else
    {
LABEL_134:
      uint64_t v247 = 0uLL;
    }
    Class v755 = v247;
    swift_retain();
    if (*((void *)&v755 + 1))
    {
      BOOL v759 = v755;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      uint64_t v244 = v754;
      swift_release();
      if (!v244) {
        goto LABEL_133;
      }
      uint64_t v243 = v244;
      uint64_t v241 = v244;
      uint64_t v242 = dispatch thunk of UsoEntity_common_Payment.payee.getter();
      swift_release();
      if (v242
        && (uint64_t v240 = v242,
            uint64_t v238 = v242,
            uint64_t v239 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(),
            swift_release(),
            v239))
      {
        uint64_t v237 = v239;
        uint64_t v236 = v239;
        *(void *)&BOOL v759 = UsoEntity_common_App.appIdentifier.getter();
        *((void *)&v759 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v180;
        swift_release();
      }
      else
      {
LABEL_133:
        BOOL v759 = 0uLL;
      }
      outlined destroy of String.UTF8View();
    }
    swift_release();
    outlined destroy of String.UTF8View();
  }
  swift_release();
  uint64_t v235 = v759;
  if (*((void *)&v759 + 1))
  {
    uint64_t v234 = v235;
    uint64_t v181 = v645;
    uint64_t v219 = v235;
    uint64_t v753 = v235;
    uint64_t v182 = v282;
    uint64_t v216 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    uint64_t v218 = (id)MEMORY[0x2611B9130](v219, *((void *)&v219 + 1));
    swift_bridgeObjectRelease();
    uint64_t v217 = &v752;
    uint64_t v222 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v282, v216, v218, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v183 = Logger.payments.unsafeMutableAddressor();
    v663(v181, v183, v662);
    swift_bridgeObjectRetain();
    unint64_t v223 = 7;
    uint64_t v184 = swift_allocObject();
    uint64_t v185 = *((void *)&v219 + 1);
    unint64_t v224 = v184;
    *(void *)(v184 + 16) = v219;
    *(void *)(v184 + 24) = v185;
    uint64_t v231 = Logger.logObject.getter();
    uint64_t v232 = static os_log_type_t.debug.getter();
    v750[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v220 = v751;
    uint64_t v221 = 17;
    uint64_t v226 = swift_allocObject();
    *(unsigned char *)(v226 + 16) = 32;
    uint64_t v227 = swift_allocObject();
    *(unsigned char *)(v227 + 16) = 8;
    uint64_t v186 = swift_allocObject();
    uint64_t v187 = v224;
    int v225 = v186;
    *(void *)(v186 + 16) = v612;
    *(void *)(v186 + 24) = v187;
    id v188 = swift_allocObject();
    uint64_t v189 = v225;
    uint64_t v229 = v188;
    *(void *)(v188 + 16) = v613;
    *(void *)(v188 + 24) = v189;
    uint64_t v228 = _allocateUninitializedArray<A>(_:)();
    uint64_t v230 = v190;
    swift_retain();
    uint64_t v191 = v226;
    uint64_t v192 = v230;
    *uint64_t v230 = v614;
    v192[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191;
    swift_retain();
    id v193 = v227;
    id v194 = v230;
    v230[2] = v615;
    v194[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v193;
    swift_retain();
    Class v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v229;
    id v196 = v230;
    v230[4] = v616;
    v196[5] = v195;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v231, (os_log_type_t)v232))
    {
      uint64_t v209 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v210 = createStorage<A>(capacity:type:)(0);
      unint64_t v211 = createStorage<A>(capacity:type:)(1);
      uint64_t v212 = v750;
      v750[0] = v209;
      id v213 = &v749;
      uint64_t v749 = v210;
      uint32_t v214 = &v748;
      uint64_t v748 = v211;
      serialize(_:at:)(2, v750);
      serialize(_:at:)(1, v212);
      uint64_t v197 = v263;
      uint64_t v746 = v614;
      uint64_t v747 = v226;
      closure #1 in osLogInternal(_:log:type:)(&v746, (uint64_t)v212, (uint64_t)v213, (uint64_t)v214);
      uint64_t v215 = v197;
      if (v197)
      {
        __break(1u);
      }
      else
      {
        uint64_t v746 = v615;
        uint64_t v747 = v227;
        closure #1 in osLogInternal(_:log:type:)(&v746, (uint64_t)v750, (uint64_t)&v749, (uint64_t)&v748);
        uint64_t v206 = 0;
        uint64_t v746 = v616;
        uint64_t v747 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v746, (uint64_t)v750, (uint64_t)&v749, (uint64_t)&v748);
        int v205 = 0;
        _os_log_impl(&dword_25D85A000, v231, (os_log_type_t)v232, "#Transformer found appIdentifier to use for intent as %s", v209, v220);
        destroyStorage<A>(_:count:)(v210, 0, v208);
        destroyStorage<A>(_:count:)(v211, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v209, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v207 = v205;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v207 = v263;
    }
    uint64_t v204 = v207;

    v543(v645, v662);
    swift_bridgeObjectRelease();
    uint64_t v233 = v204;
  }
  else
  {
    uint64_t v233 = v263;
  }
  uint64_t v203 = v233;
  uint64_t v198 = v282;
  int v199 = v282;
  *v569 = v282;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v767);
  return swift_release();
}

{
  void *v1;
  uint64_t v2;
  Class *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t (**v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t (**v38)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (**v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t (**v53)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v55)(uint64_t, uint64_t, uint64_t);
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t (**v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t (**v73)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v75)(uint64_t, uint64_t, uint64_t);
  void *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t (**v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t (**v91)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v93)(uint64_t, uint64_t, uint64_t);
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t (**v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t (**v106)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v108)(uint64_t, uint64_t, uint64_t);
  void *v109;
  double v110;
  float v111;
  float v112;
  void *v113;
  uint64_t result;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (**v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t (**v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t (**v139)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t (**v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t (**v145)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t (**v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t (**v151)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v153)(uint64_t, uint64_t, uint64_t);
  void *v154;
  NSDecimalNumber *v155;
  Class isa;
  Class v157;
  uint64_t v158;
  id v159;
  objc_class *v160;
  Swift::String_optional v161;
  INRequestPaymentIntent v162;
  char *v163;
  uint64_t v164;
  objc_class *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (**v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t (**v172)(uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t (**v174)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v176)(uint64_t, uint64_t, uint64_t);
  void *v177;
  objc_class *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (**v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  uint64_t (**v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t (**v190)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v192)(uint64_t, uint64_t, uint64_t);
  void *v193;
  objc_class *v194;
  Class v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint8_t *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned char **v208;
  uint64_t *v209;
  uint64_t *v210;
  void *v211;
  uint64_t *v212;
  id v213;
  uint32_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (**v223)(uint64_t, uint64_t, uint64_t);
  NSObject *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  long long *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint8_t *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned char **v265;
  uint64_t *v266;
  uint64_t *v267;
  void *v268;
  void *v269;
  char *v270;
  id v271;
  Class v272;
  objc_class *v273;
  BOOL v274;
  Class v275;
  uint32_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t (**v286)(uint64_t, uint64_t, uint64_t);
  NSObject *v287;
  int v288;
  uint64_t v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  int v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint8_t *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned char **v313;
  uint64_t *v314;
  uint64_t *v315;
  void *v316;
  Swift::String v317;
  uint32_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t (**v340)(uint64_t, uint64_t, uint64_t);
  NSObject *v341;
  int v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  void *object;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  Swift::Float v362;
  uint64_t v363;
  Swift::Float v364;
  float v365;
  float v366;
  float v367;
  uint64_t v368;
  Swift::Float v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  void *v381;
  void *v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint8_t *v386;
  uint64_t v387;
  uint64_t v388;
  unsigned char **v389;
  uint64_t *v390;
  uint64_t *v391;
  void *v392;
  uint32_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t (**v402)(uint64_t, uint64_t, uint64_t);
  NSObject *v403;
  int v404;
  uint64_t v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  void *v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  uint8_t *v416;
  uint64_t v417;
  uint64_t v418;
  unsigned char **v419;
  uint64_t *v420;
  uint64_t *v421;
  void *v422;
  void *v423;
  uint64_t v424;
  uint32_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t (**v435)(uint64_t, uint64_t, uint64_t);
  NSObject *v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  void *v451;
  uint64_t v452;
  void *v453;
  uint64_t v454;
  uint8_t *v455;
  uint64_t v456;
  uint64_t v457;
  unsigned char **v458;
  uint64_t *v459;
  uint64_t *v460;
  void *v461;
  void (*v462)(char *, char *, uint64_t);
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  void (*v467)(char *, char *, uint64_t);
  uint32_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t (**v478)(uint64_t, uint64_t, uint64_t);
  NSObject *v479;
  int v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void (*v502)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  id v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  BOOL v512;
  id v513;
  id v514;
  id v515;
  id v516;
  id v517;
  id v518;
  id v519;
  id v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  uint64_t v525;
  void *v526;
  uint64_t v527;
  uint8_t *v528;
  uint64_t v529;
  uint64_t v530;
  unsigned char **v531;
  uint64_t *v532;
  uint64_t *v533;
  void *v534;
  void *v535;
  void (*v536)(char *, uint64_t);
  void *v537;
  uint32_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t (**v548)(uint64_t, uint64_t, uint64_t);
  NSObject *v549;
  int v550;
  void *v551;
  uint64_t v552;
  void *v553;
  uint64_t v554;
  uint8_t *v555;
  uint64_t v556;
  uint64_t v557;
  unsigned char **v558;
  uint64_t *v559;
  uint64_t *v560;
  void *v561;
  Class *v562;
  void *v563;
  uint64_t (*v564)();
  uint64_t (*v565)();
  uint64_t (*v566)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v567)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v568)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v569)();
  uint64_t (*v570)();
  uint64_t (*v571)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v572)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v573)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v574)();
  uint64_t (*v575)();
  uint64_t (*v576)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v577)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v578)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v579)();
  uint64_t (*v580)();
  uint64_t (*v581)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v582)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v583)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v584)(uint64_t);
  uint64_t (*v585)();
  uint64_t (*v586)();
  uint64_t (*v587)();
  uint64_t (*v588)();
  uint64_t (*v589)();
  uint64_t (*v590)();
  uint64_t (*v591)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v592)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v593)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v594)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v595)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v596)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v597)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v598)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v599)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v600)();
  uint64_t (*v601)();
  uint64_t (*v602)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v603)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v604)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v605)();
  uint64_t (*v606)();
  uint64_t (*v607)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v608)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v609)(uint64_t, uint64_t, uint64_t);
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  char *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  char *v623;
  unint64_t v624;
  char *v625;
  uint64_t v626;
  unint64_t v627;
  char *v628;
  unint64_t v629;
  char *v630;
  unint64_t v631;
  char *v632;
  void *v633;
  id v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  char *v638;
  unint64_t v639;
  char *v640;
  unint64_t v641;
  char *v642;
  unint64_t v643;
  char *v644;
  unint64_t v645;
  char *v646;
  unint64_t v647;
  char *v648;
  unint64_t v649;
  char *v650;
  unint64_t v651;
  char *v652;
  void *v653;
  uint64_t v654;
  uint64_t v655;
  void (*v656)(char *, uint64_t, uint64_t);
  void *v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t *v660;
  unint64_t v661;
  uint32_t v662;
  uint64_t v663;
  uint64_t (*v664)();
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t (*v668)();
  uint64_t v669;
  uint64_t (*v670)(uint64_t, uint64_t, uint64_t);
  uint64_t v671;
  uint64_t (*v672)(uint64_t, uint64_t, uint64_t);
  uint64_t v673;
  uint64_t v674;
  uint64_t (*v675)(uint64_t, uint64_t, uint64_t);
  uint64_t v676;
  uint64_t (**v677)(uint64_t, uint64_t, uint64_t);
  uint64_t v678;
  NSObject *v679;
  int v680;
  uint64_t (*v681)(uint64_t, uint64_t, uint64_t);
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unsigned char *v685;
  uint64_t (*v686)(uint64_t, uint64_t, uint64_t);
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned char *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t (*v693)(uint64_t, uint64_t, uint64_t);
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  unsigned char *v697;
  uint64_t (*v698)(uint64_t, uint64_t, uint64_t);
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned char *v702;
  void v703[2];
  uint64_t (*v704)(uint64_t, uint64_t, uint64_t);
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned char *v708[2];
  uint32_t v709;
  uint64_t v710;
  uint32_t v711;
  uint64_t v712;
  void v713[4];
  uint32_t v714;
  uint64_t v715;
  uint64_t (*v716)(uint64_t, uint64_t, uint64_t);
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unsigned char *v720[2];
  uint32_t v721;
  Swift::String v722;
  Swift::String v723;
  uint64_t v724;
  uint64_t v725;
  Swift::String v726;
  Swift::Float v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t (*v734)(uint64_t, uint64_t, uint64_t);
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unsigned char *v738;
  uint64_t (*v739)(uint64_t, uint64_t, uint64_t);
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned char *v743[2];
  uint32_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint32_t v754;
  Class v755;
  char v756;
  uint64_t v757;
  objc_class *v758;
  BOOL v759;
  Class v760;
  uint64_t v761;
  uint64_t v762;
  uint32_t v763;
  uint64_t v764;
  uint32_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  char *v769;
  char *v770;
  INPerson_optional v771;
  INCurrencyAmount_optional v772;

  uint64_t v2 = MEMORY[0x270FA5388](a1);
  v562 = v3;
  uint64_t v635 = v2;
  id v634 = v4;
  v633 = v5;
  v563 = v1;
  uint64_t v626 = 0;
  v664 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v668 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v670 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v672 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v675 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v564 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v565 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v566 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v567 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v568 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v569 = partial apply for implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v570 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v571 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v572 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v573 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v574 = partial apply for implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v575 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v576 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v577 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v578 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v579 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v580 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v581 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v582 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v583 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v584 = closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v585 = partial apply for implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v586 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v587 = partial apply for specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v588 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v589 = partial apply for implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v590 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v591 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v592 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v593 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v594 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v595 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v596 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v597 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v598 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v599 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v600 = partial apply for implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v601 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v602 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v603 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v604 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v605 = partial apply for implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:);
  v606 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v607 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v608 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v609 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v770 = 0;
  v769 = 0;
  uint64_t v768 = 0;
  uint64_t v767 = 0;
  uint64_t v766 = 0;
  uint64_t v761 = 0;
  Class v755 = 0;
  uint64_t v746 = 0;
  uint64_t v733 = 0;
  uint64_t v730 = 0;
  uint64_t v731 = 0;
  uint64_t v729 = 0;
  Swift::Float v727 = 0.0;
  v726._uint64_t countAndFlagsBits = 0;
  v726._object = 0;
  uint64_t v724 = 0;
  uint64_t v725 = 0;
  uint64_t v712 = 0;
  uint64_t v692 = 0;
  uint64_t v691 = 0;
  unint64_t v610 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v611 = (uint64_t)&v196 - v610;
  uint64_t v612 = type metadata accessor for ContactResolverConfig();
  uint64_t v613 = *(void *)(v612 - 8);
  uint64_t v614 = v612 - 8;
  unint64_t v615 = (*(void *)(v613 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v626);
  v616 = (char *)&v196 - v615;
  uint64_t v617 = type metadata accessor for ContactQuery();
  uint64_t v619 = *(void *)(v617 - 8);
  uint64_t v618 = v617 - 8;
  uint64_t v620 = v619;
  uint64_t v621 = *(void *)(v619 + 64);
  unint64_t v622 = (v621 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v617);
  v623 = (char *)&v196 - v622;
  unint64_t v624 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v196 - v622);
  v625 = (char *)&v196 - v624;
  v770 = (char *)&v196 - v624;
  unint64_t v627 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v626);
  v628 = (char *)&v196 - v627;
  unint64_t v629 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v630 = (char *)&v196 - v629;
  unint64_t v631 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  v632 = (char *)&v196 - v631;
  v769 = (char *)&v196 - v631;
  uint64_t v655 = type metadata accessor for Logger();
  v653 = *(void **)(v655 - 8);
  uint64_t v654 = v655 - 8;
  uint64_t v636 = v653[8];
  unint64_t v637 = (v636 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v635);
  v638 = (char *)&v196 - v637;
  unint64_t v639 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v640 = (char *)&v196 - v639;
  unint64_t v641 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v642 = (char *)&v196 - v641;
  unint64_t v643 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v644 = (char *)&v196 - v643;
  unint64_t v645 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v646 = (char *)&v196 - v645;
  unint64_t v647 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v648 = (char *)&v196 - v647;
  unint64_t v649 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v650 = (char *)&v196 - v649;
  unint64_t v651 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = (uint64_t *)MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v196 - v651;
  v652 = (char *)&v196 - v651;
  uint64_t v665 = *v25;
  uint64_t v768 = v665;
  uint64_t v767 = v27;
  uint64_t v766 = v28;
  uint64_t v29 = Logger.payments.unsafeMutableAddressor();
  v656 = (void (*)(char *, uint64_t, uint64_t))v653[2];
  v657 = v653 + 2;
  v656(v26, v29, v655);
  swift_retain();
  v679 = Logger.logObject.getter();
  int v680 = static os_log_type_t.debug.getter();
  v660 = &v764;
  uint64_t v764 = 12;
  unint64_t v658 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v659 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v661 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v662 = v765;
  uint64_t v663 = 17;
  uint64_t v667 = 7;
  uint64_t v671 = swift_allocObject();
  *(unsigned char *)(v671 + 16) = 32;
  uint64_t v673 = swift_allocObject();
  *(unsigned char *)(v673 + 16) = 8;
  uint64_t v666 = 32;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v665;
  uint64_t v669 = v30;
  *(void *)(v30 + 16) = v664;
  *(void *)(v30 + 24) = v31;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v669;
  uint64_t v676 = v32;
  *(void *)(v32 + 16) = v668;
  *(void *)(v32 + 24) = v33;
  uint64_t v678 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v674 = _allocateUninitializedArray<A>(_:)();
  v677 = v34;
  swift_retain();
  uint64_t v35 = v671;
  uint64_t v36 = v677;
  *v677 = v670;
  v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  swift_retain();
  uint64_t v37 = v673;
  uint64_t v38 = v677;
  v677[2] = v672;
  v38[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  swift_retain();
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v676;
  unint64_t v40 = v677;
  v677[4] = v675;
  v40[5] = v39;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v679, (os_log_type_t)v680))
  {
    v555 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v554 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v556 = createStorage<A>(capacity:type:)(0);
    uint64_t v557 = createStorage<A>(capacity:type:)(1);
    v558 = &v685;
    v685 = v555;
    v559 = &v684;
    uint64_t v684 = v556;
    v560 = &v683;
    uint64_t v683 = v557;
    serialize(_:at:)(2, &v685);
    serialize(_:at:)(1, v558);
    uint64_t v41 = v563;
    v681 = v670;
    uint64_t v682 = v671;
    closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)v558, (uint64_t)v559, (uint64_t)v560);
    v561 = v41;
    if (v41)
    {
      __break(1u);
    }
    else
    {
      v681 = v672;
      uint64_t v682 = v673;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)&v685, (uint64_t)&v684, (uint64_t)&v683);
      uint64_t v552 = 0;
      v681 = v675;
      uint64_t v682 = v676;
      closure #1 in osLogInternal(_:log:type:)(&v681, (uint64_t)&v685, (uint64_t)&v684, (uint64_t)&v683);
      v551 = 0;
      _os_log_impl(&dword_25D85A000, v679, (os_log_type_t)v680, "#Transformer for requestMoney_common_Payment task %s", v555, v662);
      destroyStorage<A>(_:count:)(v556, 0, v554);
      destroyStorage<A>(_:count:)(v557, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v555, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v553 = v551;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v553 = v563;
  }
  uint64_t v42 = v650;
  v535 = v553;

  v536 = (void (*)(char *, uint64_t))v653[1];
  v537 = v653 + 1;
  v536(v652, v655);
  uint64_t v43 = Logger.payments.unsafeMutableAddressor();
  v656(v42, v43, v655);
  id v44 = v634;
  uint64_t v541 = 7;
  uint64_t v542 = swift_allocObject();
  *(void *)(v542 + 16) = v634;
  v549 = Logger.logObject.getter();
  int v550 = static os_log_type_t.debug.getter();
  uint64_t v762 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v538 = v763;
  uint64_t v539 = 17;
  uint64_t v544 = swift_allocObject();
  *(unsigned char *)(v544 + 16) = 32;
  uint64_t v545 = swift_allocObject();
  *(unsigned char *)(v545 + 16) = 8;
  uint64_t v540 = 32;
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v542;
  uint64_t v543 = v45;
  *(void *)(v45 + 16) = v564;
  *(void *)(v45 + 24) = v46;
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v543;
  uint64_t v547 = v47;
  *(void *)(v47 + 16) = v565;
  *(void *)(v47 + 24) = v48;
  uint64_t v546 = _allocateUninitializedArray<A>(_:)();
  v548 = v49;
  swift_retain();
  uint64_t v50 = v544;
  uint64_t v51 = v548;
  *v548 = v566;
  v51[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v50;
  swift_retain();
  uint64_t v52 = v545;
  uint64_t v53 = v548;
  v548[2] = v567;
  v53[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  swift_retain();
  unint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v547;
  unint64_t v55 = v548;
  v548[4] = v568;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v549, (os_log_type_t)v550))
  {
    v528 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v527 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v529 = createStorage<A>(capacity:type:)(0);
    uint64_t v530 = createStorage<A>(capacity:type:)(1);
    v531 = &v690;
    v690 = v528;
    v532 = &v689;
    uint64_t v689 = v529;
    v533 = &v688;
    uint64_t v688 = v530;
    serialize(_:at:)(2, &v690);
    serialize(_:at:)(1, v531);
    uint64_t v56 = v535;
    v686 = v566;
    uint64_t v687 = v544;
    closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)v531, (uint64_t)v532, (uint64_t)v533);
    v534 = v56;
    if (v56)
    {
      __break(1u);
    }
    else
    {
      v686 = v567;
      uint64_t v687 = v545;
      closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)&v690, (uint64_t)&v689, (uint64_t)&v688);
      uint64_t v525 = 0;
      v686 = v568;
      uint64_t v687 = v547;
      closure #1 in osLogInternal(_:log:type:)(&v686, (uint64_t)&v690, (uint64_t)&v689, (uint64_t)&v688);
      v524 = 0;
      _os_log_impl(&dword_25D85A000, v549, (os_log_type_t)v550, "#Transformer for requestMoney_common_Payment previous intent is %s", v528, v538);
      destroyStorage<A>(_:count:)(v529, 0, v527);
      destroyStorage<A>(_:count:)(v530, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v528, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v526 = v524;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v526 = v535;
  }
  v521 = v526;

  v536(v650, v655);
  uint64_t v522 = swift_allocObject();
  uint64_t v523 = v522 + 16;
  uint64_t v761 = v522 + 16;
  id v57 = v634;
  if (v634)
  {
    id v520 = v634;
    id v519 = v634;
    id v58 = objc_msgSend(v634, sel_payer);
    uint64_t v59 = v519;
    *(void *)(v522 + 16) = v58;
  }
  else
  {
    *(void *)(v522 + 16) = 0;
  }
  id v60 = v634;
  if (v634)
  {
    id v518 = v634;
    id v517 = v634;
    Class v760 = (Class)objc_msgSend(v634, sel_currencyAmount);
  }
  else
  {
    Class v760 = 0;
  }
  id v61 = v634;
  if (v634)
  {
    id v516 = v634;
    id v514 = v634;
    id v515 = objc_msgSend(v634, sel_note);
    if (v515)
    {
      id v513 = v515;
      id v508 = v515;
      uint64_t v509 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v510 = v62;

      uint64_t v511 = v509;
      BOOL v512 = v510;
    }
    else
    {
      uint64_t v511 = 0;
      BOOL v512 = 0;
    }
    v758 = (objc_class *)v511;
    BOOL v759 = v512;
  }
  else
  {
    v758 = 0;
    BOOL v759 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  uint64_t v507 = v757;
  if (v757)
  {
    uint64_t v506 = v507;
    uint64_t v501 = v507;
    uint64_t v733 = v507;
    swift_release();
    v502 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v619 + 56);
    uint64_t v503 = v619 + 56;
    v502(v632, 1, 1, v617);
    uint64_t v504 = dispatch thunk of UsoEntity_common_Payment.payer.getter();
    if (v504
      && (uint64_t v500 = v504,
          uint64_t v498 = v504,
          uint64_t v499 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter(),
          swift_release(),
          v499))
    {
      uint64_t v497 = v499;
      uint64_t v494 = v499;
      uint64_t v495 = CodeGenBase.entity.getter();
      swift_release();
      uint64_t v496 = v495;
    }
    else
    {
      uint64_t v496 = 0;
    }
    uint64_t v492 = v496;
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v493 = v732;
    if (v732)
    {
      uint64_t v491 = v493;
      uint64_t v488 = v493;
      uint64_t v691 = v493;
      UsoEntity_common_Person.toContactQuery()();
      v502(v630, 0, 1, v617);
      outlined assign with take of ContactQuery?(v630, v632);
      swift_release();
    }
    else
    {
      uint64_t v490 = dispatch thunk of UsoEntity_common_Payment.payer.getter();
      if (v490)
      {
        uint64_t v489 = v490;
        uint64_t v485 = v490;
        uint64_t v486 = dispatch thunk of UsoEntity_common_PaymentAccount.holder.getter();
        swift_release();
        uint64_t v487 = v486;
      }
      else
      {
        uint64_t v487 = 0;
      }
      uint64_t v484 = v487;
      if (v487)
      {
        uint64_t v483 = v484;
        uint64_t v482 = v484;
        uint64_t v692 = v484;
        UsoEntity_common_Agent.toContactQuery()();
        v502(v630, 0, 1, v617);
        outlined assign with take of ContactQuery?(v630, v632);
        swift_release();
      }
    }
    outlined init with copy of ContactQuery?(v632, v628);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v619 + 48))(v628, 1, v617) == 1)
    {
      outlined destroy of ContactQuery?((uint64_t)v628);
      v481 = v521;
    }
    else
    {
      uint64_t v63 = v648;
      uint64_t v464 = v620;
      v467 = *(void (**)(char *, char *, uint64_t))(v619 + 32);
      uint64_t v466 = v619 + 32;
      v467(v625, v628, v617);
      uint64_t v64 = Logger.payments.unsafeMutableAddressor();
      v656(v63, v64, v655);
      v462 = *(void (**)(char *, char *, uint64_t))(v619 + 16);
      uint64_t v463 = v619 + 16;
      v462(v623, v625, v617);
      unint64_t v465 = (*(unsigned __int8 *)(v464 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v464 + 80);
      uint64_t v471 = 7;
      uint64_t v472 = swift_allocObject();
      v467((char *)(v472 + v465), v623, v617);
      v479 = Logger.logObject.getter();
      int v480 = static os_log_type_t.debug.getter();
      v713[3] = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v468 = v714;
      uint64_t v469 = 17;
      uint64_t v474 = swift_allocObject();
      *(unsigned char *)(v474 + 16) = 32;
      uint64_t v475 = swift_allocObject();
      *(unsigned char *)(v475 + 16) = 8;
      uint64_t v470 = 32;
      uint64_t v65 = swift_allocObject();
      uint64_t v66 = v472;
      uint64_t v473 = v65;
      *(void *)(v65 + 16) = v569;
      *(void *)(v65 + 24) = v66;
      uint64_t v67 = swift_allocObject();
      uint64_t v68 = v473;
      uint64_t v477 = v67;
      *(void *)(v67 + 16) = v570;
      *(void *)(v67 + 24) = v68;
      uint64_t v476 = _allocateUninitializedArray<A>(_:)();
      v478 = v69;
      swift_retain();
      uint64_t v70 = v474;
      uint64_t v71 = v478;
      *v478 = v571;
      v71[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
      swift_retain();
      uint64_t v72 = v475;
      uint64_t v73 = v478;
      v478[2] = v572;
      v73[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v72;
      swift_retain();
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v477;
      uint64_t v75 = v478;
      v478[4] = v573;
      v75[5] = v74;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v479, (os_log_type_t)v480))
      {
        uint64_t v455 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v454 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v456 = createStorage<A>(capacity:type:)(0);
        uint64_t v457 = createStorage<A>(capacity:type:)(1);
        uint64_t v458 = &v697;
        v697 = v455;
        v459 = &v696;
        uint64_t v696 = v456;
        uint64_t v460 = &v695;
        uint64_t v695 = v457;
        serialize(_:at:)(2, &v697);
        serialize(_:at:)(1, v458);
        uint64_t v76 = v521;
        v693 = v571;
        uint64_t v694 = v474;
        closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)v458, (uint64_t)v459, (uint64_t)v460);
        uint64_t v461 = v76;
        if (v76)
        {
          __break(1u);
        }
        else
        {
          v693 = v572;
          uint64_t v694 = v475;
          closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
          uint64_t v452 = 0;
          v693 = v573;
          uint64_t v694 = v477;
          closure #1 in osLogInternal(_:log:type:)(&v693, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)&v695);
          uint64_t v451 = 0;
          _os_log_impl(&dword_25D85A000, v479, (os_log_type_t)v480, "#Transformer payee contact in USO parse as ContactQuery is: %s", v455, v468);
          destroyStorage<A>(_:count:)(v456, 0, v454);
          destroyStorage<A>(_:count:)(v457, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v455, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v453 = v451;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v453 = v521;
      }
      uint64_t v445 = v453;

      v536(v648, v655);
      uint64_t v446 = v633[3];
      uint64_t v447 = v633[4];
      __swift_project_boxed_opaque_existential_1(v633, v446);
      uint64_t v441 = _allocateUninitializedArray<A>(_:)();
      v462(v77, v625, v617);
      uint64_t v78 = v441;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v444 = v78;
      uint64_t v442 = SiriKitContactResolver.defaultConfig.unsafeMutableAddressor();
      uint64_t v443 = v713;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v613 + 16))(v616, v442, v612);
      swift_endAccess();
      uint64_t v79 = v445;
      uint64_t v80 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v447 + 16))(v444, v616, v446);
      uint64_t v448 = (uint64_t)v79;
      uint64_t v449 = v80;
      uint64_t v450 = v79;
      if (v79)
      {
        id v196 = v450;
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        (*(void (**)(char *, uint64_t))(v613 + 8))(v616, v612);
        swift_bridgeObjectRelease();

        uint64_t v439 = v197;
        uint64_t v440 = v198;
      }
      else
      {
        uint64_t v438 = v449;
        (*(void (**)(char *, uint64_t))(v613 + 8))(v616, v612);
        swift_bridgeObjectRelease();
        uint64_t v439 = v438;
        uint64_t v440 = v448;
      }
      uint64_t v81 = v646;
      uint64_t v423 = (void *)v440;
      uint64_t v424 = v439;
      uint64_t v712 = v439;
      uint64_t v82 = Logger.payments.unsafeMutableAddressor();
      v656(v81, v82, v655);
      swift_bridgeObjectRetain();
      uint64_t v428 = 7;
      uint64_t v429 = swift_allocObject();
      *(void *)(v429 + 16) = v424;
      uint64_t v436 = Logger.logObject.getter();
      int v437 = static os_log_type_t.debug.getter();
      uint64_t v710 = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v425 = v711;
      uint64_t v426 = 17;
      uint64_t v431 = swift_allocObject();
      *(unsigned char *)(v431 + 16) = 32;
      uint64_t v432 = swift_allocObject();
      *(unsigned char *)(v432 + 16) = 8;
      uint64_t v427 = 32;
      uint64_t v83 = swift_allocObject();
      uint64_t v84 = v429;
      uint64_t v430 = v83;
      *(void *)(v83 + 16) = v574;
      *(void *)(v83 + 24) = v84;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v430;
      uint64_t v434 = v85;
      *(void *)(v85 + 16) = v575;
      *(void *)(v85 + 24) = v86;
      uint64_t v433 = _allocateUninitializedArray<A>(_:)();
      uint64_t v435 = v87;
      swift_retain();
      uint64_t v88 = v431;
      uint64_t v89 = v435;
      *uint64_t v435 = v576;
      v89[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
      swift_retain();
      uint64_t v90 = v432;
      uint64_t v91 = v435;
      v435[2] = v577;
      v91[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
      swift_retain();
      uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v434;
      uint64_t v93 = v435;
      v435[4] = v578;
      v93[5] = v92;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v436, (os_log_type_t)v437))
      {
        uint64_t v416 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v417 = createStorage<A>(capacity:type:)(0);
        uint64_t v418 = createStorage<A>(capacity:type:)(1);
        os_log_type_t v419 = &v702;
        v702 = v416;
        uint64_t v420 = &v701;
        uint64_t v701 = v417;
        char v421 = &v700;
        uint64_t v700 = v418;
        serialize(_:at:)(2, &v702);
        serialize(_:at:)(1, v419);
        uint64_t v94 = v423;
        v698 = v576;
        uint64_t v699 = v431;
        closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)v419, (uint64_t)v420, (uint64_t)v421);
        v422 = v94;
        if (v94)
        {
          __break(1u);
        }
        else
        {
          v698 = v577;
          uint64_t v699 = v432;
          closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)&v702, (uint64_t)&v701, (uint64_t)&v700);
          uint64_t v413 = 0;
          v698 = v578;
          uint64_t v699 = v434;
          closure #1 in osLogInternal(_:log:type:)(&v698, (uint64_t)&v702, (uint64_t)&v701, (uint64_t)&v700);
          uint64_t v412 = 0;
          _os_log_impl(&dword_25D85A000, v436, (os_log_type_t)v437, "#Transformer SiriKitContactResolver found matches for payee in USO parse: %s", v416, v425);
          destroyStorage<A>(_:count:)(v417, 0, v415);
          destroyStorage<A>(_:count:)(v418, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v416, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v414 = v412;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v414 = v423;
      }
      v411 = v414;

      v536(v646, v655);
      swift_bridgeObjectRetain();
      if (v424)
      {
        uint64_t v410 = v424;
        uint64_t v407 = v424;
        swift_bridgeObjectRetain();
        uint64_t v406 = v703;
        v703[0] = v407;
        uint64_t v405 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        lazy protocol witness table accessor for type [INPerson] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [SFCardSection]();
        uint64_t v408 = v703[1];
        swift_bridgeObjectRelease();
        uint64_t v409 = v408;
      }
      else
      {
        uint64_t v409 = 0;
      }
      uint64_t v95 = v644;
      uint64_t v96 = *(void **)(v522 + 16);
      *(void *)(v522 + 16) = v409;

      uint64_t v97 = Logger.payments.unsafeMutableAddressor();
      v656(v95, v97, v655);
      swift_retain();
      uint64_t v403 = Logger.logObject.getter();
      int v404 = static os_log_type_t.debug.getter();
      v708[1] = (unsigned char *)12;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v393 = v709;
      uint64_t v394 = 17;
      uint64_t v396 = 7;
      uint64_t v398 = swift_allocObject();
      *(unsigned char *)(v398 + 16) = 32;
      uint64_t v399 = swift_allocObject();
      *(unsigned char *)(v399 + 16) = 8;
      uint64_t v395 = 32;
      uint64_t v98 = swift_allocObject();
      uint64_t v99 = v522;
      uint64_t v397 = v98;
      *(void *)(v98 + 16) = v579;
      *(void *)(v98 + 24) = v99;
      uint64_t v100 = swift_allocObject();
      uint64_t v101 = v397;
      uint64_t v401 = v100;
      *(void *)(v100 + 16) = v580;
      *(void *)(v100 + 24) = v101;
      uint64_t v400 = _allocateUninitializedArray<A>(_:)();
      uint64_t v402 = v102;
      swift_retain();
      uint64_t v103 = v398;
      uint64_t v104 = v402;
      *uint64_t v402 = v581;
      v104[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v103;
      swift_retain();
      uint64_t v105 = v399;
      uint64_t v106 = v402;
      v402[2] = v582;
      v106[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v105;
      swift_retain();
      uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v401;
      uint64_t v108 = v402;
      v402[4] = v583;
      v108[5] = v107;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v403, (os_log_type_t)v404))
      {
        uint64_t v386 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v387 = createStorage<A>(capacity:type:)(0);
        uint64_t v388 = createStorage<A>(capacity:type:)(1);
        uint32_t v389 = v708;
        v708[0] = v386;
        uint64_t v390 = &v707;
        uint64_t v707 = v387;
        unint64_t v391 = &v706;
        uint64_t v706 = v388;
        serialize(_:at:)(2, v708);
        serialize(_:at:)(1, v389);
        uint64_t v109 = v411;
        v704 = v581;
        uint64_t v705 = v398;
        closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v389, (uint64_t)v390, (uint64_t)v391);
        uint64_t v392 = v109;
        if (v109)
        {
          __break(1u);
        }
        else
        {
          v704 = v582;
          uint64_t v705 = v399;
          closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v708, (uint64_t)&v707, (uint64_t)&v706);
          uint64_t v383 = 0;
          v704 = v583;
          uint64_t v705 = v401;
          closure #1 in osLogInternal(_:log:type:)(&v704, (uint64_t)v708, (uint64_t)&v707, (uint64_t)&v706);
          uint64_t v382 = 0;
          _os_log_impl(&dword_25D85A000, v403, (os_log_type_t)v404, "#Transformer resolved payer from matches as %s", v386, v393);
          destroyStorage<A>(_:count:)(v387, 0, v385);
          destroyStorage<A>(_:count:)(v388, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611B9630](v386, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v384 = v382;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        uint64_t v384 = v411;
      }
      uint64_t v381 = v384;

      v536(v644, v655);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v619 + 8))(v625, v617);
      v481 = v381;
    }
    uint64_t v379 = v481;
    uint64_t v380 = dispatch thunk of UsoEntity_common_Payment.amount.getter();
    if (v380)
    {
      uint64_t v378 = v380;
      uint64_t v375 = v380;
      uint64_t v729 = v380;
      uint64_t v376 = dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter();
      if (v376)
      {
        uint64_t v374 = v376;
        uint64_t v371 = v376;
        uint64_t v372 = CodeGenBase.entity.getter();
        swift_release();
        uint64_t v373 = v372;
      }
      else
      {
        uint64_t v373 = 0;
      }
      uint64_t v368 = v373;
      double v110 = default argument 1 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v367 = *(float *)&v110;
      default argument 2 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v365 = v111;
      float v366 = default argument 3 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      float v112 = default argument 4 of static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)();
      uint64_t v728 = static USOEntityNumberExtractor.resolveEntityAsFloat(entity:minValue:maxValue:smallAmount:largeAmount:)(v368, v367, v365, v366, v112);
      Swift::Float v369 = *(float *)&v728;
      int v370 = BYTE4(v728);
      swift_release();
      if ((v370 & 1) == 0)
      {
        Swift::Float v364 = v369;
        Swift::Float v362 = v369;
        Swift::Float v727 = v369;
        Swift::String v726 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        uint64_t v363 = dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter();
        if (v363)
        {
          uint64_t v361 = v363;
          uint64_t v358 = v363;
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("name", 4uLL, 1)._object;
          uint64_t v359 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
          swift_bridgeObjectRelease();
          swift_release();
          if (v359)
          {
            uint64_t v356 = v359;
            uint64_t v715 = v359;
            uint64_t v354 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
            lazy protocol witness table accessor for type [UsoIdentifier] and conformance [A]();
            int v113 = v379;
            uint64_t result = Sequence.first(where:)();
            uint64_t v355 = v113;
            if (v113)
            {
              __break(1u);
              return result;
            }
            outlined destroy of [SFCardSection]();
            uint64_t v351 = type metadata accessor for UsoIdentifier();
            uint64_t v352 = *(void *)(v351 - 8);
            uint64_t v353 = v351 - 8;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v352 + 48))(v611, 1) != 1)
            {
              uint64_t v346 = UsoIdentifier.value.getter();
              uint64_t v347 = v115;
              (*(void (**)(uint64_t, uint64_t))(v352 + 8))(v611, v351);
              uint64_t v348 = v346;
              uint64_t v349 = v347;
              uint64_t v350 = v355;
LABEL_83:
              Swift::String v343 = v350;
              uint64_t v344 = v349;
              uint64_t v345 = v348;
              uint64_t v724 = v348;
              uint64_t v725 = v349;
              v722._uint64_t countAndFlagsBits = UsoEntity_common_CurrencyAmount.currencyIdentifier.getter();
              v722._object = v116;
              if (v116)
              {
                Swift::String v723 = v722;
              }
              else
              {
                Swift::String v723 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
                outlined destroy of String.UTF8View();
              }
              uint64_t v117 = v642;
              Swift::String v317 = v723;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              Swift::String v726 = v317;
              swift_bridgeObjectRelease();
              uint64_t v118 = Logger.payments.unsafeMutableAddressor();
              v656(v117, v118, v655);
              uint64_t v327 = 7;
              uint64_t v319 = swift_allocObject();
              *(Swift::Float *)(v319 + 16) = v362;
              uint64_t v326 = 32;
              uint64_t v119 = swift_allocObject();
              uint64_t v120 = v317._object;
              uint64_t v321 = v119;
              *(void *)(v119 + 16) = v317._countAndFlagsBits;
              *(void *)(v119 + 24) = v120;
              swift_bridgeObjectRetain();
              uint64_t v121 = swift_allocObject();
              uint64_t v122 = v344;
              uint64_t v328 = v121;
              *(void *)(v121 + 16) = v345;
              *(void *)(v121 + 24) = v122;
              uint64_t v341 = Logger.logObject.getter();
              int v342 = static os_log_type_t.debug.getter();
              v720[1] = (unsigned char *)v326;
              UnsignedInteger<>.init<A>(_:)();
              uint32_t v318 = v721;
              uint64_t v324 = 17;
              uint64_t v330 = swift_allocObject();
              int v323 = 32;
              *(unsigned char *)(v330 + 16) = 32;
              uint64_t v331 = swift_allocObject();
              int v325 = 8;
              *(unsigned char *)(v331 + 16) = 8;
              uint64_t v123 = swift_allocObject();
              uint64_t v124 = v319;
              uint64_t v320 = v123;
              *(void *)(v123 + 16) = v585;
              *(void *)(v123 + 24) = v124;
              uint64_t v125 = swift_allocObject();
              uint64_t v126 = v320;
              uint64_t v332 = v125;
              *(void *)(v125 + 16) = v586;
              *(void *)(v125 + 24) = v126;
              uint64_t v333 = swift_allocObject();
              *(unsigned char *)(v333 + 16) = v323;
              uint64_t v334 = swift_allocObject();
              *(unsigned char *)(v334 + 16) = v325;
              uint64_t v127 = swift_allocObject();
              uint64_t v128 = v321;
              uint64_t v322 = v127;
              *(void *)(v127 + 16) = v587;
              *(void *)(v127 + 24) = v128;
              uint64_t v129 = swift_allocObject();
              uint64_t v130 = v322;
              uint64_t v335 = v129;
              *(void *)(v129 + 16) = v588;
              *(void *)(v129 + 24) = v130;
              uint64_t v336 = swift_allocObject();
              *(unsigned char *)(v336 + 16) = v323;
              uint64_t v337 = swift_allocObject();
              *(unsigned char *)(v337 + 16) = v325;
              uint64_t v131 = swift_allocObject();
              uint64_t v132 = v328;
              uint64_t v329 = v131;
              *(void *)(v131 + 16) = v589;
              *(void *)(v131 + 24) = v132;
              uint64_t v133 = swift_allocObject();
              uint64_t v134 = v329;
              uint64_t v339 = v133;
              *(void *)(v133 + 16) = v590;
              *(void *)(v133 + 24) = v134;
              uint64_t v338 = _allocateUninitializedArray<A>(_:)();
              Swift::String v340 = v135;
              swift_retain();
              uint64_t v136 = v330;
              uint64_t v137 = v340;
              *Swift::String v340 = v591;
              v137[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
              swift_retain();
              uint64_t v138 = v331;
              uint64_t v139 = v340;
              v340[2] = v592;
              v139[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v138;
              swift_retain();
              uint64_t v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v332;
              uint64_t v141 = v340;
              v340[4] = v593;
              v141[5] = v140;
              swift_retain();
              uint64_t v142 = v333;
              uint64_t v143 = v340;
              v340[6] = v594;
              v143[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v142;
              swift_retain();
              uint64_t v144 = v334;
              uint64_t v145 = v340;
              v340[8] = v595;
              v145[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v144;
              swift_retain();
              uint64_t v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v335;
              uint32_t v147 = v340;
              v340[10] = v596;
              v147[11] = v146;
              swift_retain();
              uint64_t v148 = v336;
              uint64_t v149 = v340;
              v340[12] = v597;
              v149[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
              swift_retain();
              uint64_t v150 = v337;
              uint64_t v151 = v340;
              v340[14] = v598;
              v151[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v150;
              swift_retain();
              uint64_t v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v339;
              uint64_t v153 = v340;
              v340[16] = v599;
              v153[17] = v152;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v341, (os_log_type_t)v342))
              {
                uint64_t v310 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
                uint64_t v309 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                uint64_t v311 = createStorage<A>(capacity:type:)(0);
                uint64_t v312 = createStorage<A>(capacity:type:)(3);
                uint64_t v313 = v720;
                v720[0] = v310;
                uint64_t v314 = &v719;
                uint64_t v719 = v311;
                uint64_t v315 = &v718;
                uint64_t v718 = v312;
                serialize(_:at:)(2, v720);
                serialize(_:at:)(3, v313);
                uint64_t v154 = v343;
                v716 = v591;
                uint64_t v717 = v330;
                closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v313, (uint64_t)v314, (uint64_t)v315);
                uint64_t v316 = v154;
                if (v154)
                {
                  __break(1u);
                }
                else
                {
                  v716 = v592;
                  uint64_t v717 = v331;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v307 = 0;
                  v716 = v593;
                  uint64_t v717 = v332;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v306 = 0;
                  v716 = v594;
                  uint64_t v717 = v333;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v305 = 0;
                  v716 = v595;
                  uint64_t v717 = v334;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v304 = 0;
                  v716 = v596;
                  uint64_t v717 = v335;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v303 = 0;
                  v716 = v597;
                  uint64_t v717 = v336;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v302 = 0;
                  v716 = v598;
                  uint64_t v717 = v337;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v301 = 0;
                  v716 = v599;
                  uint64_t v717 = v339;
                  closure #1 in osLogInternal(_:log:type:)(&v716, (uint64_t)v720, (uint64_t)&v719, (uint64_t)&v718);
                  uint64_t v300 = 0;
                  _os_log_impl(&dword_25D85A000, v341, (os_log_type_t)v342, "#Transformer found currency, %s %s. Raw usoIdentifier was %s", v310, v318);
                  destroyStorage<A>(_:count:)(v311, 0, v309);
                  destroyStorage<A>(_:count:)(v312, 3, MEMORY[0x263F8EE58] + 8);
                  MEMORY[0x2611B9630](v310, MEMORY[0x263F8E778]);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  uint64_t v308 = v300;
                }
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                uint64_t v308 = v343;
              }
              uint64_t v298 = v308;

              v536(v642, v655);
              int v299 = String.isEmpty.getter();
              swift_bridgeObjectRelease();
              if (v299)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v296 = 0;
                unint64_t v297 = type metadata accessor for INCurrencyAmount();
                type metadata accessor for NSDecimalNumber();
                NSDecimalNumber.__allocating_init(value:)((NSDecimalNumber *)LODWORD(v362), v362);
                Class isa = INCurrencyAmount.__allocating_init(amount:currencyCode:)(v155, v317).super.isa;
                Class v157 = v760;
                Class v760 = isa;
              }
              swift_bridgeObjectRelease();
              outlined destroy of String.UTF8View();
              swift_release();
              uint64_t v377 = v298;
              goto LABEL_96;
            }
            outlined destroy of UsoIdentifier?(v611);
            uint64_t v360 = v355;
          }
          else
          {
            uint64_t v360 = v379;
          }
        }
        else
        {
          uint64_t v360 = v379;
        }
        uint64_t v348 = 0;
        uint64_t v349 = 0;
        uint64_t v350 = v360;
        goto LABEL_83;
      }
      swift_release();
      uint64_t v377 = v379;
    }
    else
    {
      uint64_t v377 = v379;
    }
LABEL_96:
    unint64_t v293 = v377;
    uint64_t v294 = dispatch thunk of UsoEntity_common_Payment.memo.getter();
    uint64_t v295 = v158;
    if (v158)
    {
      uint64_t v291 = v294;
      uint64_t v292 = v295;
      BOOL v290 = v295;
      uint64_t v289 = v294;
      uint64_t v730 = v294;
      uint64_t v731 = v295;
      swift_bridgeObjectRetain();
      v758 = (objc_class *)v289;
      BOOL v759 = v290;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of ContactQuery?((uint64_t)v632);
    swift_release();
    v505 = v293;
    goto LABEL_99;
  }
  swift_release();
  v505 = v521;
LABEL_99:
  uint64_t v269 = v505;
  type metadata accessor for INRequestPaymentIntent();
  uint32_t v270 = &v756;
  uint64_t v278 = 32;
  swift_beginAccess();
  id v271 = *(id *)(v522 + 16);
  id v159 = v271;
  swift_endAccess();
  Class v272 = v760;
  int v160 = v760;
  char v273 = v758;
  BOOL v274 = v759;
  swift_bridgeObjectRetain();
  v771.value.super.Class isa = (Class)v271;
  v771.is_nil = (char)v272;
  v772.value.super.Class isa = v273;
  v772.is_nil = v274;
  v162.super.super.Class isa = INRequestPaymentIntent.__allocating_init(payer:currencyAmount:note:)(v771, v772, v161).super.super.isa;
  uint64_t v163 = v640;
  Class v275 = v162.super.super.isa;
  Class v755 = v162.super.super.isa;
  uint64_t v164 = Logger.payments.unsafeMutableAddressor();
  v656(v163, v164, v655);
  int v165 = v275;
  uint64_t v279 = 7;
  uint64_t v280 = swift_allocObject();
  *(void *)(v280 + 16) = v275;
  uint64_t v287 = Logger.logObject.getter();
  int v288 = static os_log_type_t.debug.getter();
  uint64_t v753 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v276 = v754;
  uint64_t v277 = 17;
  uint64_t v282 = swift_allocObject();
  *(unsigned char *)(v282 + 16) = 32;
  uint64_t v283 = swift_allocObject();
  *(unsigned char *)(v283 + 16) = 8;
  uint64_t v166 = swift_allocObject();
  uint64_t v167 = v280;
  uint64_t v281 = v166;
  *(void *)(v166 + 16) = v600;
  *(void *)(v166 + 24) = v167;
  uint64_t v168 = swift_allocObject();
  uint64_t v169 = v281;
  uint64_t v285 = v168;
  *(void *)(v168 + 16) = v601;
  *(void *)(v168 + 24) = v169;
  uint64_t v284 = _allocateUninitializedArray<A>(_:)();
  Swift::String v286 = v170;
  swift_retain();
  uint64_t v171 = v282;
  uint64_t v172 = v286;
  void *v286 = v602;
  v172[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171;
  swift_retain();
  uint64_t v173 = v283;
  uint64_t v174 = v286;
  v286[2] = v603;
  v174[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v173;
  swift_retain();
  uint64_t v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v285;
  uint64_t v176 = v286;
  v286[4] = v604;
  v176[5] = v175;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v287, (os_log_type_t)v288))
  {
    uint64_t v262 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v263 = createStorage<A>(capacity:type:)(0);
    uint64_t v264 = createStorage<A>(capacity:type:)(1);
    uint64_t v265 = &v738;
    v738 = v262;
    uint64_t v266 = &v737;
    uint64_t v737 = v263;
    uint64_t v267 = &v736;
    uint64_t v736 = v264;
    serialize(_:at:)(2, &v738);
    serialize(_:at:)(1, v265);
    uint64_t v177 = v269;
    v734 = v602;
    uint64_t v735 = v282;
    closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)v265, (uint64_t)v266, (uint64_t)v267);
    uint64_t v268 = v177;
    if (v177)
    {
      __break(1u);
    }
    else
    {
      v734 = v603;
      uint64_t v735 = v283;
      closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)&v738, (uint64_t)&v737, (uint64_t)&v736);
      uint64_t v259 = 0;
      v734 = v604;
      uint64_t v735 = v285;
      closure #1 in osLogInternal(_:log:type:)(&v734, (uint64_t)&v738, (uint64_t)&v737, (uint64_t)&v736);
      uint32_t v258 = 0;
      _os_log_impl(&dword_25D85A000, v287, (os_log_type_t)v288, "#Transformer returned intent %s", v262, v276);
      destroyStorage<A>(_:count:)(v263, 0, v261);
      destroyStorage<A>(_:count:)(v264, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v262, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v260 = v258;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v260 = v269;
  }
  uint64_t v256 = v260;

  v536(v640, v655);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  uint64_t v257 = v751;
  swift_release();
  if (v257)
  {
    uint64_t v255 = v257;
    uint64_t v252 = v257;
    uint64_t v253 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v254 = v253;
  }
  else
  {
    uint64_t v254 = 0;
  }
  uint64_t v750 = v254;
  swift_retain();
  if (v750)
  {
    uint64_t v752 = v750;
  }
  else
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Target.target.getter();
    uint64_t v251 = v749;
    swift_release();
    if (v251
      && (uint64_t v250 = v251,
          uint64_t v248 = v251,
          uint64_t v249 = dispatch thunk of UsoEntity_common_Payment.payee.getter(),
          swift_release(),
          v249))
    {
      uint64_t v247 = v249;
      uint64_t v244 = v249;
      uint64_t v245 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      uint64_t v246 = v245;
    }
    else
    {
      uint64_t v246 = 0;
    }
    uint64_t v748 = v246;
    swift_retain();
    if (v748)
    {
      uint64_t v752 = v748;
    }
    else
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      uint64_t v243 = v747;
      swift_release();
      if (v243
        && (uint64_t v242 = v243,
            uint64_t v240 = v243,
            uint64_t v241 = dispatch thunk of UsoEntity_common_Payment.payer.getter(),
            swift_release(),
            v241))
      {
        uint64_t v239 = v241;
        uint64_t v238 = v241;
        uint64_t v752 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        uint64_t v752 = 0;
      }
      outlined destroy of ContiguousArray<A1>();
    }
    swift_release();
    outlined destroy of ContiguousArray<A1>();
  }
  swift_release();
  uint64_t v237 = v752;
  if (v752)
  {
    uint64_t v236 = v237;
    uint64_t v231 = v237;
    uint64_t v746 = v237;
    uint64_t v178 = v275;
    uint64_t v232 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v233 = UsoEntity_common_App.appIdentifier.getter();
    uint64_t v234 = v179;
    if (v179)
    {
      uint64_t v229 = v233;
      uint64_t v230 = v234;
      uint64_t v226 = v234;
      uint64_t v227 = MEMORY[0x2611B9130](v233);
      swift_bridgeObjectRelease();
      uint64_t v228 = (void *)v227;
    }
    else
    {
      uint64_t v228 = 0;
    }
    uint64_t v180 = v638;
    id v213 = v228;
    uint64_t v212 = &v745;
    uint64_t v216 = 32;
    swift_beginAccess();
    objc_setAssociatedObject(v275, v232, v213, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v181 = Logger.payments.unsafeMutableAddressor();
    v656(v180, v181, v655);
    swift_retain();
    unint64_t v224 = Logger.logObject.getter();
    int v225 = static os_log_type_t.debug.getter();
    v743[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v214 = v744;
    uint64_t v215 = 17;
    uint64_t v217 = 7;
    uint64_t v219 = swift_allocObject();
    *(unsigned char *)(v219 + 16) = 32;
    uint64_t v220 = swift_allocObject();
    *(unsigned char *)(v220 + 16) = 8;
    uint64_t v182 = swift_allocObject();
    uint64_t v183 = v231;
    uint64_t v218 = v182;
    *(void *)(v182 + 16) = v605;
    *(void *)(v182 + 24) = v183;
    uint64_t v184 = swift_allocObject();
    uint64_t v185 = v218;
    uint64_t v222 = v184;
    *(void *)(v184 + 16) = v606;
    *(void *)(v184 + 24) = v185;
    uint64_t v221 = _allocateUninitializedArray<A>(_:)();
    unint64_t v223 = v186;
    swift_retain();
    uint64_t v187 = v219;
    id v188 = v223;
    *unint64_t v223 = v607;
    v188[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v187;
    swift_retain();
    uint64_t v189 = v220;
    uint64_t v190 = v223;
    v223[2] = v608;
    v190[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v189;
    swift_retain();
    uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v222;
    uint64_t v192 = v223;
    v223[4] = v609;
    v192[5] = v191;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v224, (os_log_type_t)v225))
    {
      int v205 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v206 = createStorage<A>(capacity:type:)(0);
      uint64_t v207 = createStorage<A>(capacity:type:)(1);
      unint64_t v208 = v743;
      v743[0] = v205;
      uint64_t v209 = &v742;
      uint64_t v742 = v206;
      uint64_t v210 = &v741;
      uint64_t v741 = v207;
      serialize(_:at:)(2, v743);
      serialize(_:at:)(1, v208);
      id v193 = v256;
      v739 = v607;
      uint64_t v740 = v219;
      closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v208, (uint64_t)v209, (uint64_t)v210);
      unint64_t v211 = v193;
      if (v193)
      {
        __break(1u);
      }
      else
      {
        v739 = v608;
        uint64_t v740 = v220;
        closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v743, (uint64_t)&v742, (uint64_t)&v741);
        uint64_t v202 = 0;
        v739 = v609;
        uint64_t v740 = v222;
        closure #1 in osLogInternal(_:log:type:)(&v739, (uint64_t)v743, (uint64_t)&v742, (uint64_t)&v741);
        uint64_t v201 = 0;
        _os_log_impl(&dword_25D85A000, v224, (os_log_type_t)v225, "#Transformer found app to use for intent as %s", v205, v214);
        destroyStorage<A>(_:count:)(v206, 0, v204);
        destroyStorage<A>(_:count:)(v207, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611B9630](v205, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v203 = v201;
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v203 = v256;
    }
    uint64_t v200 = v203;

    v536(v638, v655);
    swift_release();
    uint64_t v235 = v200;
  }
  else
  {
    uint64_t v235 = v256;
  }
  int v199 = v235;
  id v194 = v275;
  Class v195 = v275;
  Class *v562 = v275;

  outlined destroy of String.UTF8View();
  outlined destroy of SFRichText?((id *)&v760);
  return swift_release();
}

uint64_t sub_25D939A64()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

{
  return closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(a1);
}

uint64_t implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_pay_common_Payment();
  return String.init<A>(describing:)();
}

{
  swift_retain();
  type metadata accessor for UsoTask_requestMoney_common_Payment();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INSendPaymentIntent?);
  return String.init<A>(describing:)();
}

{
  id v1;

  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INRequestPaymentIntent?);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return ContactQuery.description.getter();
}

uint64_t implicit closure #4 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = v1;
  swift_bridgeObjectRetain();
  *uint64_t v3 = a1;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[INPerson]?]);
  lazy protocol witness table accessor for type [[INPerson]?] and conformance [A]();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  swift_beginAccess();
  id v1 = *(id *)(a1 + 16);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return String.init<A>(describing:)();
}

uint64_t closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v6 = UsoIdentifier.namespace.getter();
  uint64_t v7 = v1;
  swift_bridgeObjectRetain();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currencyUnit", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v9[0] = v6;
  v9[1] = v7;
  Swift::String v10 = v2;
  if (!v7)
  {
    if (!v10._object)
    {
      outlined destroy of String.UTF8View();
      char v5 = 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  outlined init with copy of String(v9, &v8);
  if (!v10._object)
  {
    outlined destroy of String.UTF8View();
LABEL_8:
    outlined destroy of DIIdentifier();
    char v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  char v5 = v4;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t implicit closure #7 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return String.init<A>(describing:)();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized implicit closure #8 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
}

uint64_t implicit closure #9 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return String.init<A>(describing:)();
}

void __swiftcall NSDecimalNumber.__allocating_init(value:)(NSDecimalNumber *__return_ptr retstr, Swift::Float value)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSDecimalNumber.init(value:)();
}

INCurrencyAmount __swiftcall INCurrencyAmount.__allocating_init(amount:currencyCode:)(NSDecimalNumber *amount, Swift::String currencyCode)
{
  uint64_t countAndFlagsBits = currencyCode._countAndFlagsBits;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INCurrencyAmount)@nonobjc INCurrencyAmount.init(amount:currencyCode:)(amount, countAndFlagsBits);
}

INSendPaymentIntent __swiftcall INSendPaymentIntent.__allocating_init(payee:currencyAmount:note:)(INPerson_optional payee, INCurrencyAmount_optional currencyAmount, Swift::String_optional note)
{
  Class isa = payee.value.super.isa;
  char v5 = *(void **)&payee.is_nil;
  Class v6 = currencyAmount.value.super.isa;
  uint64_t v7 = *(void *)&currencyAmount.is_nil;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INSendPaymentIntent)@nonobjc INSendPaymentIntent.init(payee:currencyAmount:note:)(isa, v5, (uint64_t)v6, v7);
}

uint64_t implicit closure #10 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for INSendPaymentIntent();
  lazy protocol witness table accessor for type INSendPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

{
  id v1;

  id v1 = a1;
  type metadata accessor for INRequestPaymentIntent();
  lazy protocol witness table accessor for type INRequestPaymentIntent and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #13 in closure #1 in static Transformer<>.transformer(previousIntent:contactResolver:)()
{
  return String.init<A>(describing:)();
}

{
  UsoEntity_common_App.appIdentifier.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  return String.init<A>(describing:)();
}

uint64_t sub_25D93E554()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_25D942928()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

INRequestPaymentIntent __swiftcall INRequestPaymentIntent.__allocating_init(payer:currencyAmount:note:)(INPerson_optional payer, INCurrencyAmount_optional currencyAmount, Swift::String_optional note)
{
  Class isa = payer.value.super.isa;
  char v5 = *(void **)&payer.is_nil;
  Class v6 = currencyAmount.value.super.isa;
  uint64_t v7 = *(void *)&currencyAmount.is_nil;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (INRequestPaymentIntent)@nonobjc INRequestPaymentIntent.init(payer:currencyAmount:note:)(isa, v5, (uint64_t)v6, v7);
}

uint64_t static Transformer<>.transformer(previousIntent:)(void *a1)
{
  id v1 = a1;
  *(void *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_request_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

{
  id v1;

  id v1 = a1;
  *(void *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_summarise_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

{
  id v1;

  id v1 = a1;
  *(void *)(swift_allocObject() + 16) = a1;
  type metadata accessor for UsoTask_noVerb_common_PaymentAccount();
  type metadata accessor for INSearchForAccountsIntent();
  return Transformer.init(transform:)();
}

id *closure #1 in static Transformer<>.transformer(previousIntent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v233 = a3;
  uint64_t v246 = a1;
  id v245 = a2;
  uint64_t v264 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v268 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint32_t v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Class v272 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  Class v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v235 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v236 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v240 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v241 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v244 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v327 = 0;
  uint64_t v326 = 0;
  id v313 = 0;
  uint64_t v297 = 0;
  uint64_t v296 = 0;
  long long v291 = 0u;
  long long v292 = 0u;
  uint64_t v255 = type metadata accessor for Logger();
  uint64_t v253 = *(void **)(v255 - 8);
  uint64_t v254 = v255 - 8;
  unint64_t v247 = (v253[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v246);
  uint64_t v248 = (char *)&v77 - v247;
  unint64_t v249 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v250 = (char *)&v77 - v249;
  unint64_t v251 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (uint64_t *)MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v77 - v251;
  uint64_t v252 = (char *)&v77 - v251;
  uint64_t v265 = *v7;
  uint64_t v327 = v265;
  uint64_t v326 = v9;
  uint64_t v10 = Logger.payments.unsafeMutableAddressor();
  uint64_t v256 = (void (*)(char *, uint64_t, uint64_t))v253[2];
  uint64_t v257 = v253 + 2;
  v256(v8, v10, v255);
  swift_retain();
  uint64_t v279 = Logger.logObject.getter();
  int v280 = static os_log_type_t.debug.getter();
  uint64_t v260 = &v324;
  uint64_t v324 = 12;
  unint64_t v258 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v259 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v261 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v262 = v325;
  uint64_t v263 = 17;
  uint64_t v267 = 7;
  uint64_t v271 = swift_allocObject();
  *(unsigned char *)(v271 + 16) = 32;
  uint64_t v273 = swift_allocObject();
  *(unsigned char *)(v273 + 16) = 8;
  uint64_t v266 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v265;
  uint64_t v269 = v11;
  *(void *)(v11 + 16) = v264;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v269;
  uint64_t v276 = v13;
  *(void *)(v13 + 16) = v268;
  *(void *)(v13 + 24) = v14;
  uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v274 = _allocateUninitializedArray<A>(_:)();
  uint64_t v277 = v15;
  swift_retain();
  uint64_t v16 = v271;
  uint64_t v17 = v277;
  *uint64_t v277 = v270;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v273;
  uint64_t v19 = v277;
  v277[2] = v272;
  v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v276;
  uint64_t v21 = v277;
  v277[4] = v275;
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v279, (os_log_type_t)v280))
  {
    uint64_t v226 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v227 = createStorage<A>(capacity:type:)(0);
    uint64_t v228 = createStorage<A>(capacity:type:)(1);
    uint64_t v229 = &v285;
    uint64_t v285 = v226;
    uint64_t v230 = &v284;
    uint64_t v284 = v227;
    uint64_t v231 = &v283;
    uint64_t v283 = v228;
    serialize(_:at:)(2, &v285);
    serialize(_:at:)(1, v229);
    uint64_t v22 = v234;
    uint64_t v281 = v270;
    uint64_t v282 = v271;
    closure #1 in osLogInternal(_:log:type:)(&v281, (uint64_t)v229, (uint64_t)v230, (uint64_t)v231);
    uint64_t v232 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v281 = v272;
      uint64_t v282 = v273;
      closure #1 in osLogInternal(_:log:type:)(&v281, (uint64_t)&v285, (uint64_t)&v284, (uint64_t)&v283);
      uint64_t v223 = 0;
      uint64_t v281 = v275;
      uint64_t v282 = v276;
      closure #1 in osLogInternal(_:log:type:)(&v281, (uint64_t)&v285, (uint64_t)&v284, (uint64_t)&v283);
      uint64_t v222 = 0;
      _os_log_impl(&dword_25D85A000, v279, (os_log_type_t)v280, "#Transformer for request_common_PaymentAccount task %s", v226, v262);
      destroyStorage<A>(_:count:)(v227, 0, v225);
      destroyStorage<A>(_:count:)(v228, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v226, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v224 = v222;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v224 = v234;
  }
  uint64_t v23 = v250;
  uint64_t v206 = v224;

  uint64_t v207 = (void (*)(char *, uint64_t))v253[1];
  unint64_t v208 = v253 + 1;
  v207(v252, v255);
  uint64_t v24 = Logger.payments.unsafeMutableAddressor();
  v256(v23, v24, v255);
  id v25 = v245;
  uint64_t v212 = 7;
  uint64_t v213 = swift_allocObject();
  *(void *)(v213 + 16) = v245;
  uint64_t v220 = Logger.logObject.getter();
  int v221 = static os_log_type_t.debug.getter();
  v322[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v209 = v323;
  uint64_t v210 = 17;
  uint64_t v215 = swift_allocObject();
  *(unsigned char *)(v215 + 16) = 32;
  uint64_t v216 = swift_allocObject();
  *(unsigned char *)(v216 + 16) = 8;
  uint64_t v211 = 32;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v213;
  uint64_t v214 = v26;
  *(void *)(v26 + 16) = v235;
  *(void *)(v26 + 24) = v27;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v214;
  uint64_t v218 = v28;
  *(void *)(v28 + 16) = v236;
  *(void *)(v28 + 24) = v29;
  uint64_t v217 = _allocateUninitializedArray<A>(_:)();
  uint64_t v219 = v30;
  swift_retain();
  uint64_t v31 = v215;
  uint64_t v32 = v219;
  void *v219 = v237;
  v32[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
  swift_retain();
  uint64_t v33 = v216;
  uint64_t v34 = v219;
  v219[2] = v238;
  v34[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
  swift_retain();
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v218;
  uint64_t v36 = v219;
  v219[4] = v239;
  uint64_t v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v220, (os_log_type_t)v221))
  {
    int v199 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v200 = createStorage<A>(capacity:type:)(0);
    uint64_t v201 = createStorage<A>(capacity:type:)(1);
    uint64_t v202 = &v290;
    BOOL v290 = v199;
    uint64_t v203 = &v289;
    uint64_t v289 = v200;
    uint64_t v204 = &v288;
    uint64_t v288 = v201;
    serialize(_:at:)(2, &v290);
    serialize(_:at:)(1, v202);
    uint64_t v37 = v206;
    Swift::String v286 = v237;
    uint64_t v287 = v215;
    closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)v202, (uint64_t)v203, (uint64_t)v204);
    uint64_t v205 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      Swift::String v286 = v238;
      uint64_t v287 = v216;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v290, (uint64_t)&v289, (uint64_t)&v288);
      uint64_t v196 = 0;
      Swift::String v286 = v239;
      uint64_t v287 = v218;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v290, (uint64_t)&v289, (uint64_t)&v288);
      uint64_t v195 = 0;
      _os_log_impl(&dword_25D85A000, v220, (os_log_type_t)v221, "#Transformer for request_common_PaymentAccount previous intent is %s", v199, v209);
      destroyStorage<A>(_:count:)(v200, 0, v198);
      destroyStorage<A>(_:count:)(v201, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v199, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v197 = v195;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v197 = v206;
  }
  uint64_t v194 = v197;

  v207(v250, v255);
  id v38 = v245;
  if (v245)
  {
    id v193 = v245;
    id v192 = v245;
    v322[0] = objc_msgSend(v245, sel_accountNickname);
  }
  else
  {
    v322[0] = 0;
  }
  id v39 = v245;
  if (v245)
  {
    id v191 = v245;
    id v187 = v245;
    id v188 = objc_msgSend(v245, sel_accountType);

    uint64_t v189 = (uint64_t)v188;
    int v190 = 0;
  }
  else
  {
    uint64_t v189 = 0;
    int v190 = 1;
  }
  uint64_t v319 = v189;
  char v320 = v190 & 1;
  if (v190) {
    uint64_t v321 = 0;
  }
  else {
    uint64_t v321 = v319;
  }
  id v40 = v245;
  if (v245)
  {
    id v186 = v245;
    id v185 = v245;
    id v318 = objc_msgSend(v245, sel_organizationName);
  }
  else
  {
    id v318 = 0;
  }
  id v41 = v245;
  if (v245)
  {
    id v184 = v245;
    id v180 = v245;
    id v181 = objc_msgSend(v245, sel_requestedBalanceType);

    uint64_t v182 = (uint64_t)v181;
    int v183 = 0;
  }
  else
  {
    uint64_t v182 = 0;
    int v183 = 1;
  }
  uint64_t v315 = v182;
  char v316 = v183 & 1;
  if (v183) {
    uint64_t v317 = 1;
  }
  else {
    uint64_t v317 = v315;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  uint64_t v176 = v314;
  swift_release();
  NSJSONWritingOptions v177 = static PaymentAccountInformation.from(_:)(v176);
  id v179 = v42;
  *(void *)&long long v178 = v43;
  *((void *)&v178 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v44;
  swift_release();
  if (v179 != (id)1)
  {
    *(void *)&long long v174 = v177;
    *((void *)&v174 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v179;
    long long v175 = v178;
    uint64_t v171 = *((void *)&v178 + 1);
    id v173 = (id)v178;
    long long v172 = v174;
    long long v291 = v174;
    long long v292 = v178;
    id v45 = v179;
    id v46 = v322[0];
    v322[0] = *((id *)&v172 + 1);

    uint64_t v321 = v171;
    id v47 = v173;
    id v48 = v318;
    id v318 = v173;

    uint64_t v317 = v172;
  }
  type metadata accessor for INSearchForAccountsIntent();
  id v168 = v322[0];
  id v49 = v322[0];
  uint64_t v166 = v321;
  uint64_t v167 = v318;
  id v50 = v318;
  id v169 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v168, v166, v167);
  id v313 = v169;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  uint64_t v170 = v312;
  swift_release();
  if (v170)
  {
    uint64_t v165 = v170;
    uint64_t v162 = v170;
    uint64_t v163 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v164 = v163;
  }
  else
  {
    uint64_t v164 = 0;
  }
  uint64_t v161 = v164;
  if (v164)
  {
    uint64_t v160 = v161;
    uint64_t v157 = v161;
    uint64_t v297 = v161;
    uint64_t v158 = type metadata accessor for App();
    UsoEntity_common_App.appIdentifier.getter();
    uint64_t v159 = App.__allocating_init(appIdentifier:)();
    uint64_t v296 = v159;
    if (App.isFirstParty.getter())
    {
      uint64_t v156 = &v294;
      uint64_t v294 = v321;
      uint64_t v154 = &v293;
      uint64_t v293 = 0;
      uint64_t v155 = type metadata accessor for INAccountType();
      lazy protocol witness table accessor for type INAccountType and conformance INAccountType();
      if (== infix<A>(_:_:)())
      {
        INBalanceType.rawValue.getter();
        Class isa = Int._bridgeToObjectiveC()().super.super.isa;
        Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
        object = v51._object;
        id v152 = (id)MEMORY[0x2611B9130](v51._countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v169, sel_setValue_forKeyPath_, isa, v152);

        swift_unknownObjectRelease();
      }
    }
    id v52 = v169;
    uint64_t v148 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v149 = UsoEntity_common_App.appIdentifier.getter();
    uint64_t v150 = v53;
    if (v53)
    {
      uint64_t v146 = v149;
      uint64_t v147 = v150;
      uint64_t v143 = v150;
      uint64_t v144 = MEMORY[0x2611B9130](v149);
      swift_bridgeObjectRelease();
      uint64_t v145 = (void *)v144;
    }
    else
    {
      uint64_t v145 = 0;
    }
    id v142 = v145;
    uint64_t v141 = &v295;
    swift_beginAccess();
    objc_setAssociatedObject(v169, v148, v142, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  uint64_t v140 = v311;
  swift_release();
  if (v140
    && (uint64_t v139 = v140,
        uint64_t v137 = v140,
        uint64_t v138 = dispatch thunk of UsoEntity_common_PaymentAccount.accountType.getter(),
        swift_release(),
        v138))
  {
    uint64_t v136 = v138;
    uint64_t v131 = v138;
    uint64_t v132 = dispatch thunk of UsoEntity_common_PaymentAccountType.name.getter();
    uint64_t v133 = v54;
    swift_release();
    uint64_t v134 = v132;
    uint64_t v135 = v133;
  }
  else
  {
    uint64_t v134 = 0;
    uint64_t v135 = 0;
  }
  uint64_t v129 = v135;
  uint64_t v128 = v134;
  swift_bridgeObjectRetain();
  Swift::String v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Apple Cash", 0xAuLL, 1);
  uint64_t countAndFlagsBits = v55._countAndFlagsBits;
  uint64_t v130 = v55._object;
  swift_bridgeObjectRetain();
  v308[0] = v128;
  v308[1] = v129;
  uint64_t v309 = countAndFlagsBits;
  uint64_t v310 = v130;
  if (v129)
  {
    outlined init with copy of String(v308, v298);
    if (v310)
    {
      uint64_t v120 = v298[0];
      uint64_t v123 = v298[1];
      swift_bridgeObjectRetain();
      uint64_t v121 = v309;
      uint64_t v124 = v308;
      uint64_t v122 = v310;
      swift_bridgeObjectRetain();
      int v125 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String.UTF8View();
      int v126 = v125;
      goto LABEL_56;
    }
    outlined destroy of String.UTF8View();
    goto LABEL_58;
  }
  if (v310)
  {
LABEL_58:
    outlined destroy of DIIdentifier();
    int v126 = 0;
    goto LABEL_56;
  }
  outlined destroy of String.UTF8View();
  int v126 = 1;
LABEL_56:
  int v119 = v126;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v119)
  {
    uint64_t v118 = &v301;
    uint64_t v301 = v321;
    uint64_t v116 = &v300;
    uint64_t v300 = 0;
    uint64_t v117 = type metadata accessor for INAccountType();
    lazy protocol witness table accessor for type INAccountType and conformance INAccountType();
    if (== infix<A>(_:_:)())
    {
      INBalanceType.rawValue.getter();
      Class v115 = Int._bridgeToObjectiveC()().super.super.isa;
      Swift::String v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accountType", 0xBuLL, 1);
      int v113 = v56._object;
      id v114 = (id)MEMORY[0x2611B9130](v56._countAndFlagsBits);
      swift_bridgeObjectRelease();
      objc_msgSend(v169, sel_setValue_forKeyPath_, v115, v114);

      swift_unknownObjectRelease();
    }
    id v57 = v169;
    uint64_t v109 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v110 = static AppUtil.walletApp.getter();
    uint64_t v111 = App.appIdentifier.getter();
    uint64_t v112 = v58;
    if (v58)
    {
      uint64_t v107 = v111;
      uint64_t v108 = v112;
      uint64_t v104 = v112;
      uint64_t v105 = MEMORY[0x2611B9130](v111);
      swift_bridgeObjectRelease();
      uint64_t v106 = (void *)v105;
    }
    else
    {
      uint64_t v106 = 0;
    }
    id v103 = v106;
    swift_release();
    uint64_t v102 = &v299;
    swift_beginAccess();
    objc_setAssociatedObject(v169, v109, v103, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  uint64_t v59 = v248;
  uint64_t v60 = Logger.payments.unsafeMutableAddressor();
  v256(v59, v60, v255);
  id v61 = v169;
  uint64_t v92 = 7;
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v169;
  uint64_t v100 = Logger.logObject.getter();
  int v101 = static os_log_type_t.debug.getter();
  v306[1] = (unsigned char *)12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v89 = v307;
  uint64_t v90 = 17;
  uint64_t v95 = swift_allocObject();
  *(unsigned char *)(v95 + 16) = 32;
  uint64_t v96 = swift_allocObject();
  *(unsigned char *)(v96 + 16) = 8;
  uint64_t v91 = 32;
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = v93;
  uint64_t v94 = v62;
  *(void *)(v62 + 16) = v240;
  *(void *)(v62 + 24) = v63;
  uint64_t v64 = swift_allocObject();
  uint64_t v65 = v94;
  uint64_t v98 = v64;
  *(void *)(v64 + 16) = v241;
  *(void *)(v64 + 24) = v65;
  uint64_t v97 = _allocateUninitializedArray<A>(_:)();
  uint64_t v99 = v66;
  swift_retain();
  uint64_t v67 = v95;
  uint64_t v68 = v99;
  *uint64_t v99 = v242;
  v68[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
  swift_retain();
  uint64_t v69 = v96;
  uint64_t v70 = v99;
  v99[2] = v243;
  v70[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
  swift_retain();
  uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
  uint64_t v72 = v99;
  v99[4] = v244;
  uint64_t v72[5] = v71;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v100, (os_log_type_t)v101))
  {
    uint64_t v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v83 = createStorage<A>(capacity:type:)(0);
    uint64_t v84 = createStorage<A>(capacity:type:)(1);
    uint64_t v85 = v306;
    v306[0] = v82;
    uint64_t v86 = &v305;
    uint64_t v305 = v83;
    uint64_t v87 = &v304;
    uint64_t v304 = v84;
    serialize(_:at:)(2, v306);
    serialize(_:at:)(1, v85);
    uint64_t v73 = v194;
    uint64_t v302 = v242;
    uint64_t v303 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v302, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
    uint64_t v88 = v73;
    if (v73)
    {
      __break(1u);
    }
    else
    {
      uint64_t v302 = v243;
      uint64_t v303 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v302, (uint64_t)v306, (uint64_t)&v305, (uint64_t)&v304);
      uint64_t v79 = 0;
      uint64_t v302 = v244;
      uint64_t v303 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v302, (uint64_t)v306, (uint64_t)&v305, (uint64_t)&v304);
      uint64_t v78 = 0;
      _os_log_impl(&dword_25D85A000, v100, (os_log_type_t)v101, "#Transformer newly transformed intent is %s", v82, v89);
      destroyStorage<A>(_:count:)(v83, 0, v81);
      destroyStorage<A>(_:count:)(v84, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v82, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v80 = v78;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v80 = v194;
  }
  uint64_t v77 = v80;

  v207(v248, v255);
  id v74 = v169;
  id v75 = v169;
  *uint64_t v233 = v169;

  outlined destroy of SFRichText?(&v318);
  uint64_t result = v322;
  outlined destroy of SFRichText?(v322);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t (**v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (**v19)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (**v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t (**v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t (**v63)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id *result;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  long long *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned char **v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  uint32_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (**v116)(uint64_t, uint64_t, uint64_t);
  NSObject *v117;
  int v118;
  uint64_t v119;
  long long v120;
  id v121;
  long long v122;
  long long v123;
  uint64_t v124;
  NSJSONWritingOptions v125;
  long long v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  int v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  int v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned char **v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  void *v156;
  uint32_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (**v167)(uint64_t, uint64_t, uint64_t);
  NSObject *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned char **v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t (*v183)();
  uint64_t (*v184)();
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v188)();
  uint64_t (*v189)();
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  id v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  unint64_t v197;
  char *v198;
  unint64_t v199;
  char *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t);
  void *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  uint32_t v210;
  uint64_t v211;
  uint64_t (*v212)();
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)();
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t (*v220)(uint64_t, uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t (**v225)(uint64_t, uint64_t, uint64_t);
  uint64_t v226;
  NSObject *v227;
  int v228;
  uint64_t (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned char *v233;
  uint64_t (*v234)(uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned char *v238;
  long long v239;
  long long v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned char *v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint32_t v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  id v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  id v260[2];
  uint32_t v261;
  uint64_t v262;
  uint32_t v263;
  uint64_t v264;
  uint64_t v265;

  id v181 = a3;
  uint64_t v194 = a1;
  id v193 = a2;
  uint64_t v212 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v216 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v183 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  id v184 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v188 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v189 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  int v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v265 = 0;
  uint64_t v264 = 0;
  unint64_t v251 = 0;
  unint64_t v247 = 0;
  uint64_t v239 = 0u;
  uint64_t v240 = 0u;
  uint64_t v203 = type metadata accessor for Logger();
  uint64_t v201 = *(void **)(v203 - 8);
  uint64_t v202 = v203 - 8;
  uint64_t v195 = (v201[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v194);
  uint64_t v196 = (char *)&v72 - v195;
  uint64_t v197 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v198 = (char *)&v72 - v197;
  int v199 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (uint64_t *)MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v72 - v199;
  uint64_t v200 = (char *)&v72 - v199;
  uint64_t v213 = *v7;
  uint64_t v265 = v213;
  uint64_t v264 = v9;
  uint64_t v10 = Logger.payments.unsafeMutableAddressor();
  uint64_t v204 = (void (*)(char *, uint64_t, uint64_t))v201[2];
  uint64_t v205 = v201 + 2;
  v204(v8, v10, v203);
  swift_retain();
  uint64_t v227 = Logger.logObject.getter();
  uint64_t v228 = static os_log_type_t.debug.getter();
  unint64_t v208 = &v262;
  uint32_t v262 = 12;
  uint64_t v206 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v207 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint32_t v209 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v210 = v263;
  uint64_t v211 = 17;
  uint64_t v215 = 7;
  uint64_t v219 = swift_allocObject();
  *(unsigned char *)(v219 + 16) = 32;
  int v221 = swift_allocObject();
  *(unsigned char *)(v221 + 16) = 8;
  uint64_t v214 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v213;
  uint64_t v217 = v11;
  *(void *)(v11 + 16) = v212;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v217;
  uint64_t v224 = v13;
  *(void *)(v13 + 16) = v216;
  *(void *)(v13 + 24) = v14;
  uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v222 = _allocateUninitializedArray<A>(_:)();
  uint64_t v225 = v15;
  swift_retain();
  uint64_t v16 = v219;
  uint64_t v17 = v225;
  *uint64_t v225 = v218;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v221;
  uint64_t v19 = v225;
  v225[2] = v220;
  v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v224;
  uint64_t v21 = v225;
  v225[4] = v223;
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v227, (os_log_type_t)v228))
  {
    long long v174 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    long long v175 = createStorage<A>(capacity:type:)(0);
    uint64_t v176 = createStorage<A>(capacity:type:)(1);
    NSJSONWritingOptions v177 = &v233;
    uint64_t v233 = v174;
    long long v178 = &v232;
    uint64_t v232 = v175;
    id v179 = &v231;
    uint64_t v231 = v176;
    serialize(_:at:)(2, &v233);
    serialize(_:at:)(1, v177);
    uint64_t v22 = v182;
    uint64_t v229 = v218;
    uint64_t v230 = v219;
    closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)v177, (uint64_t)v178, (uint64_t)v179);
    id v180 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v229 = v220;
      uint64_t v230 = v221;
      closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)&v233, (uint64_t)&v232, (uint64_t)&v231);
      uint64_t v171 = 0;
      uint64_t v229 = v223;
      uint64_t v230 = v224;
      closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)&v233, (uint64_t)&v232, (uint64_t)&v231);
      uint64_t v170 = 0;
      _os_log_impl(&dword_25D85A000, v227, (os_log_type_t)v228, "#Transformer for summarise_common_PaymentAccount task %s", v174, v210);
      destroyStorage<A>(_:count:)(v175, 0, v173);
      destroyStorage<A>(_:count:)(v176, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v174, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      long long v172 = v170;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    long long v172 = v182;
  }
  uint64_t v23 = v198;
  uint64_t v154 = v172;

  uint64_t v155 = (void (*)(char *, uint64_t))v201[1];
  uint64_t v156 = v201 + 1;
  v155(v200, v203);
  uint64_t v24 = Logger.payments.unsafeMutableAddressor();
  v204(v23, v24, v203);
  id v25 = v193;
  uint64_t v160 = 7;
  uint64_t v161 = swift_allocObject();
  *(void *)(v161 + 16) = v193;
  id v168 = Logger.logObject.getter();
  id v169 = static os_log_type_t.debug.getter();
  v260[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v157 = v261;
  uint64_t v158 = 17;
  uint64_t v163 = swift_allocObject();
  *(unsigned char *)(v163 + 16) = 32;
  uint64_t v164 = swift_allocObject();
  *(unsigned char *)(v164 + 16) = 8;
  uint64_t v159 = 32;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v161;
  uint64_t v162 = v26;
  *(void *)(v26 + 16) = v183;
  *(void *)(v26 + 24) = v27;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v162;
  uint64_t v166 = v28;
  *(void *)(v28 + 16) = v184;
  *(void *)(v28 + 24) = v29;
  uint64_t v165 = _allocateUninitializedArray<A>(_:)();
  uint64_t v167 = v30;
  swift_retain();
  uint64_t v31 = v163;
  uint64_t v32 = v167;
  *uint64_t v167 = v185;
  v32[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
  swift_retain();
  uint64_t v33 = v164;
  uint64_t v34 = v167;
  v167[2] = v186;
  v34[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
  swift_retain();
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v166;
  uint64_t v36 = v167;
  v167[4] = v187;
  uint64_t v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v168, (os_log_type_t)v169))
  {
    uint64_t v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v148 = createStorage<A>(capacity:type:)(0);
    uint64_t v149 = createStorage<A>(capacity:type:)(1);
    uint64_t v150 = &v238;
    uint64_t v238 = v147;
    uint64_t v151 = &v237;
    uint64_t v237 = v148;
    id v152 = &v236;
    uint64_t v236 = v149;
    serialize(_:at:)(2, &v238);
    serialize(_:at:)(1, v150);
    uint64_t v37 = v154;
    uint64_t v234 = v185;
    uint64_t v235 = v163;
    closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
    uint64_t v153 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      uint64_t v234 = v186;
      uint64_t v235 = v164;
      closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)&v238, (uint64_t)&v237, (uint64_t)&v236);
      uint64_t v144 = 0;
      uint64_t v234 = v187;
      uint64_t v235 = v166;
      closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)&v238, (uint64_t)&v237, (uint64_t)&v236);
      uint64_t v143 = 0;
      _os_log_impl(&dword_25D85A000, v168, (os_log_type_t)v169, "#Transformer for summarise_common_PaymentAccount previous intent is %s", v147, v157);
      destroyStorage<A>(_:count:)(v148, 0, v146);
      destroyStorage<A>(_:count:)(v149, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v147, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v145 = v143;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v145 = v154;
  }
  id v142 = v145;

  v155(v198, v203);
  id v38 = v193;
  if (v193)
  {
    uint64_t v141 = v193;
    uint64_t v140 = v193;
    v260[0] = objc_msgSend(v193, sel_accountNickname);
  }
  else
  {
    v260[0] = 0;
  }
  id v39 = v193;
  if (v193)
  {
    uint64_t v139 = v193;
    uint64_t v135 = v193;
    uint64_t v136 = objc_msgSend(v193, sel_accountType);

    uint64_t v137 = (uint64_t)v136;
    uint64_t v138 = 0;
  }
  else
  {
    uint64_t v137 = 0;
    uint64_t v138 = 1;
  }
  uint64_t v257 = v137;
  unint64_t v258 = v138 & 1;
  if (v138) {
    unint64_t v259 = 0;
  }
  else {
    unint64_t v259 = v257;
  }
  id v40 = v193;
  if (v193)
  {
    uint64_t v134 = v193;
    uint64_t v133 = v193;
    uint64_t v256 = objc_msgSend(v193, sel_organizationName);
  }
  else
  {
    uint64_t v256 = 0;
  }
  id v41 = v193;
  if (v193)
  {
    uint64_t v132 = v193;
    uint64_t v128 = v193;
    uint64_t v129 = objc_msgSend(v193, sel_requestedBalanceType);

    uint64_t v130 = (uint64_t)v129;
    uint64_t v131 = 0;
  }
  else
  {
    uint64_t v130 = 0;
    uint64_t v131 = 1;
  }
  uint64_t v253 = v130;
  uint64_t v254 = v131 & 1;
  if (v131) {
    uint64_t v255 = 1;
  }
  else {
    uint64_t v255 = v253;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  uint64_t v124 = v252;
  swift_release();
  int v125 = static PaymentAccountInformation.from(_:)(v124);
  uint64_t v127 = v42;
  *(void *)&int v126 = v43;
  *((void *)&v126 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v44;
  swift_release();
  if (v127 != (id)1)
  {
    *(void *)&uint64_t v122 = v125;
    *((void *)&v122 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v127;
    uint64_t v123 = v126;
    int v119 = *((void *)&v126 + 1);
    uint64_t v121 = (id)v126;
    uint64_t v120 = v122;
    uint64_t v239 = v122;
    uint64_t v240 = v126;
    id v45 = v127;
    id v46 = v260[0];
    v260[0] = *((id *)&v120 + 1);

    unint64_t v259 = v119;
    id v47 = v121;
    id v48 = v256;
    uint64_t v256 = v121;

    uint64_t v255 = v120;
  }
  type metadata accessor for INSearchForAccountsIntent();
  uint64_t v104 = v260[0];
  id v49 = v260[0];
  uint64_t v102 = v259;
  id v103 = v256;
  id v50 = v256;
  Swift::String v51 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v104, v102, v103);
  id v52 = v196;
  uint64_t v105 = v51;
  unint64_t v251 = v51;
  uint64_t v53 = Logger.payments.unsafeMutableAddressor();
  v204(v52, v53, v203);
  uint64_t v54 = v105;
  uint64_t v109 = 7;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = v105;
  uint64_t v117 = Logger.logObject.getter();
  uint64_t v118 = static os_log_type_t.debug.getter();
  unint64_t v249 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v106 = v250;
  uint64_t v107 = 17;
  uint64_t v112 = swift_allocObject();
  *(unsigned char *)(v112 + 16) = 32;
  int v113 = swift_allocObject();
  *(unsigned char *)(v113 + 16) = 8;
  uint64_t v108 = 32;
  Swift::String v55 = swift_allocObject();
  Swift::String v56 = v110;
  uint64_t v111 = v55;
  *(void *)(v55 + 16) = v188;
  *(void *)(v55 + 24) = v56;
  id v57 = swift_allocObject();
  uint64_t v58 = v111;
  Class v115 = v57;
  *(void *)(v57 + 16) = v189;
  *(void *)(v57 + 24) = v58;
  id v114 = _allocateUninitializedArray<A>(_:)();
  uint64_t v116 = v59;
  swift_retain();
  uint64_t v60 = v112;
  id v61 = v116;
  *uint64_t v116 = v190;
  v61[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v60;
  swift_retain();
  uint64_t v62 = v113;
  uint64_t v63 = v116;
  v116[2] = v191;
  v63[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
  swift_retain();
  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v115;
  uint64_t v65 = v116;
  v116[4] = v192;
  v65[5] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    uint64_t v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v96 = createStorage<A>(capacity:type:)(0);
    uint64_t v97 = createStorage<A>(capacity:type:)(1);
    uint64_t v98 = &v245;
    id v245 = v95;
    uint64_t v99 = &v244;
    uint64_t v244 = v96;
    uint64_t v100 = &v243;
    uint64_t v243 = v97;
    serialize(_:at:)(2, &v245);
    serialize(_:at:)(1, v98);
    uint64_t v66 = v142;
    uint64_t v241 = v190;
    uint64_t v242 = v112;
    closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100);
    int v101 = v66;
    if (v66)
    {
      __break(1u);
    }
    else
    {
      uint64_t v241 = v191;
      uint64_t v242 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)&v245, (uint64_t)&v244, (uint64_t)&v243);
      uint64_t v92 = 0;
      uint64_t v241 = v192;
      uint64_t v242 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)&v245, (uint64_t)&v244, (uint64_t)&v243);
      uint64_t v91 = 0;
      _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v118, "#Transformer newly transformed intent is %s", v95, v106);
      destroyStorage<A>(_:count:)(v96, 0, v94);
      destroyStorage<A>(_:count:)(v97, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v95, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v93 = v91;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v93 = v142;
  }
  uint32_t v89 = v93;

  v155(v196, v203);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  uint64_t v90 = v248;
  swift_release();
  if (v90)
  {
    uint64_t v88 = v90;
    uint64_t v85 = v90;
    uint64_t v86 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v87 = v86;
  }
  else
  {
    uint64_t v87 = 0;
  }
  uint64_t v84 = v87;
  if (v87)
  {
    uint64_t v83 = v84;
    uint64_t v79 = v84;
    unint64_t v247 = v84;
    uint64_t v67 = v105;
    uint64_t v80 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v81 = UsoEntity_common_App.appIdentifier.getter();
    uint64_t v82 = v68;
    if (v68)
    {
      uint64_t v77 = v81;
      uint64_t v78 = v82;
      id v74 = v82;
      id v75 = MEMORY[0x2611B9130](v81);
      swift_bridgeObjectRelease();
      uint64_t v76 = (void *)v75;
    }
    else
    {
      uint64_t v76 = 0;
    }
    uint64_t v73 = v76;
    uint64_t v72 = &v246;
    swift_beginAccess();
    objc_setAssociatedObject(v105, v80, v73, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
  uint64_t v69 = v105;
  uint64_t v70 = v105;
  *id v181 = v105;

  outlined destroy of SFRichText?(&v256);
  uint64_t result = v260;
  outlined destroy of SFRichText?(v260);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t (**v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (**v19)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (**v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t (**v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t (**v63)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id *result;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  long long *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned char **v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  uint32_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (**v116)(uint64_t, uint64_t, uint64_t);
  NSObject *v117;
  int v118;
  uint64_t v119;
  long long v120;
  id v121;
  long long v122;
  long long v123;
  uint64_t v124;
  NSJSONWritingOptions v125;
  long long v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  int v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  int v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned char **v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  void *v156;
  uint32_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (**v167)(uint64_t, uint64_t, uint64_t);
  NSObject *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned char **v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t (*v183)();
  uint64_t (*v184)();
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v188)();
  uint64_t (*v189)();
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  id v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  unint64_t v197;
  char *v198;
  unint64_t v199;
  char *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t);
  void *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  uint32_t v210;
  uint64_t v211;
  uint64_t (*v212)();
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)();
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t (*v220)(uint64_t, uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t (**v225)(uint64_t, uint64_t, uint64_t);
  uint64_t v226;
  NSObject *v227;
  int v228;
  uint64_t (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned char *v233;
  uint64_t (*v234)(uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned char *v238;
  long long v239;
  long long v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned char *v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint32_t v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  id v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  id v260[2];
  uint32_t v261;
  uint64_t v262;
  uint32_t v263;
  uint64_t v264;
  uint64_t v265;

  id v181 = a3;
  uint64_t v194 = a1;
  id v193 = a2;
  uint64_t v212 = partial apply for implicit closure #1 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v216 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v183 = partial apply for implicit closure #2 in closure #1 in static Transformer<>.transformer(previousIntent:);
  id v184 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  id v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v188 = partial apply for implicit closure #5 in closure #1 in static Transformer<>.transformer(previousIntent:);
  uint64_t v189 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  int v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v265 = 0;
  uint64_t v264 = 0;
  unint64_t v251 = 0;
  unint64_t v247 = 0;
  uint64_t v239 = 0u;
  uint64_t v240 = 0u;
  uint64_t v203 = type metadata accessor for Logger();
  uint64_t v201 = *(void **)(v203 - 8);
  uint64_t v202 = v203 - 8;
  uint64_t v195 = (v201[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v194);
  uint64_t v196 = (char *)&v72 - v195;
  uint64_t v197 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v198 = (char *)&v72 - v197;
  int v199 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (uint64_t *)MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v72 - v199;
  uint64_t v200 = (char *)&v72 - v199;
  uint64_t v213 = *v7;
  uint64_t v265 = v213;
  uint64_t v264 = v9;
  uint64_t v10 = Logger.payments.unsafeMutableAddressor();
  uint64_t v204 = (void (*)(char *, uint64_t, uint64_t))v201[2];
  uint64_t v205 = v201 + 2;
  v204(v8, v10, v203);
  swift_retain();
  uint64_t v227 = Logger.logObject.getter();
  uint64_t v228 = static os_log_type_t.debug.getter();
  unint64_t v208 = &v262;
  uint32_t v262 = 12;
  uint64_t v206 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v207 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint32_t v209 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v210 = v263;
  uint64_t v211 = 17;
  uint64_t v215 = 7;
  uint64_t v219 = swift_allocObject();
  *(unsigned char *)(v219 + 16) = 32;
  int v221 = swift_allocObject();
  *(unsigned char *)(v221 + 16) = 8;
  uint64_t v214 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v213;
  uint64_t v217 = v11;
  *(void *)(v11 + 16) = v212;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v217;
  uint64_t v224 = v13;
  *(void *)(v13 + 16) = v216;
  *(void *)(v13 + 24) = v14;
  uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v222 = _allocateUninitializedArray<A>(_:)();
  uint64_t v225 = v15;
  swift_retain();
  uint64_t v16 = v219;
  uint64_t v17 = v225;
  *uint64_t v225 = v218;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v221;
  uint64_t v19 = v225;
  v225[2] = v220;
  v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v224;
  uint64_t v21 = v225;
  v225[4] = v223;
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v227, (os_log_type_t)v228))
  {
    long long v174 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    long long v175 = createStorage<A>(capacity:type:)(0);
    uint64_t v176 = createStorage<A>(capacity:type:)(1);
    NSJSONWritingOptions v177 = &v233;
    uint64_t v233 = v174;
    long long v178 = &v232;
    uint64_t v232 = v175;
    id v179 = &v231;
    uint64_t v231 = v176;
    serialize(_:at:)(2, &v233);
    serialize(_:at:)(1, v177);
    uint64_t v22 = v182;
    uint64_t v229 = v218;
    uint64_t v230 = v219;
    closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)v177, (uint64_t)v178, (uint64_t)v179);
    id v180 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v229 = v220;
      uint64_t v230 = v221;
      closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)&v233, (uint64_t)&v232, (uint64_t)&v231);
      uint64_t v171 = 0;
      uint64_t v229 = v223;
      uint64_t v230 = v224;
      closure #1 in osLogInternal(_:log:type:)(&v229, (uint64_t)&v233, (uint64_t)&v232, (uint64_t)&v231);
      uint64_t v170 = 0;
      _os_log_impl(&dword_25D85A000, v227, (os_log_type_t)v228, "#Transformer for noVerb_common_PaymentAccount task %s", v174, v210);
      destroyStorage<A>(_:count:)(v175, 0, v173);
      destroyStorage<A>(_:count:)(v176, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v174, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      long long v172 = v170;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    long long v172 = v182;
  }
  uint64_t v23 = v198;
  uint64_t v154 = v172;

  uint64_t v155 = (void (*)(char *, uint64_t))v201[1];
  uint64_t v156 = v201 + 1;
  v155(v200, v203);
  uint64_t v24 = Logger.payments.unsafeMutableAddressor();
  v204(v23, v24, v203);
  id v25 = v193;
  uint64_t v160 = 7;
  uint64_t v161 = swift_allocObject();
  *(void *)(v161 + 16) = v193;
  id v168 = Logger.logObject.getter();
  id v169 = static os_log_type_t.debug.getter();
  v260[1] = (id)12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v157 = v261;
  uint64_t v158 = 17;
  uint64_t v163 = swift_allocObject();
  *(unsigned char *)(v163 + 16) = 32;
  uint64_t v164 = swift_allocObject();
  *(unsigned char *)(v164 + 16) = 8;
  uint64_t v159 = 32;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v161;
  uint64_t v162 = v26;
  *(void *)(v26 + 16) = v183;
  *(void *)(v26 + 24) = v27;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v162;
  uint64_t v166 = v28;
  *(void *)(v28 + 16) = v184;
  *(void *)(v28 + 24) = v29;
  uint64_t v165 = _allocateUninitializedArray<A>(_:)();
  uint64_t v167 = v30;
  swift_retain();
  uint64_t v31 = v163;
  uint64_t v32 = v167;
  *uint64_t v167 = v185;
  v32[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
  swift_retain();
  uint64_t v33 = v164;
  uint64_t v34 = v167;
  v167[2] = v186;
  v34[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
  swift_retain();
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v166;
  uint64_t v36 = v167;
  v167[4] = v187;
  uint64_t v36[5] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v168, (os_log_type_t)v169))
  {
    uint64_t v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v148 = createStorage<A>(capacity:type:)(0);
    uint64_t v149 = createStorage<A>(capacity:type:)(1);
    uint64_t v150 = &v238;
    uint64_t v238 = v147;
    uint64_t v151 = &v237;
    uint64_t v237 = v148;
    id v152 = &v236;
    uint64_t v236 = v149;
    serialize(_:at:)(2, &v238);
    serialize(_:at:)(1, v150);
    uint64_t v37 = v154;
    uint64_t v234 = v185;
    uint64_t v235 = v163;
    closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
    uint64_t v153 = v37;
    if (v37)
    {
      __break(1u);
    }
    else
    {
      uint64_t v234 = v186;
      uint64_t v235 = v164;
      closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)&v238, (uint64_t)&v237, (uint64_t)&v236);
      uint64_t v144 = 0;
      uint64_t v234 = v187;
      uint64_t v235 = v166;
      closure #1 in osLogInternal(_:log:type:)(&v234, (uint64_t)&v238, (uint64_t)&v237, (uint64_t)&v236);
      uint64_t v143 = 0;
      _os_log_impl(&dword_25D85A000, v168, (os_log_type_t)v169, "#Transformer for noVerb_common_PaymentAccount previous intent is %s", v147, v157);
      destroyStorage<A>(_:count:)(v148, 0, v146);
      destroyStorage<A>(_:count:)(v149, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v147, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v145 = v143;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v145 = v154;
  }
  id v142 = v145;

  v155(v198, v203);
  id v38 = v193;
  if (v193)
  {
    uint64_t v141 = v193;
    uint64_t v140 = v193;
    v260[0] = objc_msgSend(v193, sel_accountNickname);
  }
  else
  {
    v260[0] = 0;
  }
  id v39 = v193;
  if (v193)
  {
    uint64_t v139 = v193;
    uint64_t v135 = v193;
    uint64_t v136 = objc_msgSend(v193, sel_accountType);

    uint64_t v137 = (uint64_t)v136;
    uint64_t v138 = 0;
  }
  else
  {
    uint64_t v137 = 0;
    uint64_t v138 = 1;
  }
  uint64_t v257 = v137;
  unint64_t v258 = v138 & 1;
  if (v138) {
    unint64_t v259 = 0;
  }
  else {
    unint64_t v259 = v257;
  }
  id v40 = v193;
  if (v193)
  {
    uint64_t v134 = v193;
    uint64_t v133 = v193;
    uint64_t v256 = objc_msgSend(v193, sel_organizationName);
  }
  else
  {
    uint64_t v256 = 0;
  }
  id v41 = v193;
  if (v193)
  {
    uint64_t v132 = v193;
    uint64_t v128 = v193;
    uint64_t v129 = objc_msgSend(v193, sel_requestedBalanceType);

    uint64_t v130 = (uint64_t)v129;
    uint64_t v131 = 0;
  }
  else
  {
    uint64_t v130 = 0;
    uint64_t v131 = 1;
  }
  uint64_t v253 = v130;
  uint64_t v254 = v131 & 1;
  if (v131) {
    uint64_t v255 = 1;
  }
  else {
    uint64_t v255 = v253;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  uint64_t v124 = v252;
  swift_release();
  int v125 = static PaymentAccountInformation.from(_:)(v124);
  uint64_t v127 = v42;
  *(void *)&int v126 = v43;
  *((void *)&v126 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v44;
  swift_release();
  if (v127 != (id)1)
  {
    *(void *)&uint64_t v122 = v125;
    *((void *)&v122 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PaymentsBase#UnsupportedOnWatch", 0x1FuLL, 1) = v127;
    uint64_t v123 = v126;
    int v119 = *((void *)&v126 + 1);
    uint64_t v121 = (id)v126;
    uint64_t v120 = v122;
    uint64_t v239 = v122;
    uint64_t v240 = v126;
    id v45 = v127;
    id v46 = v260[0];
    v260[0] = *((id *)&v120 + 1);

    unint64_t v259 = v119;
    id v47 = v121;
    id v48 = v256;
    uint64_t v256 = v121;

    uint64_t v255 = v120;
  }
  type metadata accessor for INSearchForAccountsIntent();
  uint64_t v104 = v260[0];
  id v49 = v260[0];
  uint64_t v102 = v259;
  id v103 = v256;
  id v50 = v256;
  Swift::String v51 = INSearchForAccountsIntent.__allocating_init(accountNickname:accountType:organizationName:requestedBalanceType:)(v104, v102, v103);
  id v52 = v196;
  uint64_t v105 = v51;
  unint64_t v251 = v51;
  uint64_t v53 = Logger.payments.unsafeMutableAddressor();
  v204(v52, v53, v203);
  uint64_t v54 = v105;
  uint64_t v109 = 7;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = v105;
  uint64_t v117 = Logger.logObject.getter();
  uint64_t v118 = static os_log_type_t.debug.getter();
  unint64_t v249 = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v106 = v250;
  uint64_t v107 = 17;
  uint64_t v112 = swift_allocObject();
  *(unsigned char *)(v112 + 16) = 32;
  int v113 = swift_allocObject();
  *(unsigned char *)(v113 + 16) = 8;
  uint64_t v108 = 32;
  Swift::String v55 = swift_allocObject();
  Swift::String v56 = v110;
  uint64_t v111 = v55;
  *(void *)(v55 + 16) = v188;
  *(void *)(v55 + 24) = v56;
  id v57 = swift_allocObject();
  uint64_t v58 = v111;
  Class v115 = v57;
  *(void *)(v57 + 16) = v189;
  *(void *)(v57 + 24) = v58;
  id v114 = _allocateUninitializedArray<A>(_:)();
  uint64_t v116 = v59;
  swift_retain();
  uint64_t v60 = v112;
  id v61 = v116;
  *uint64_t v116 = v190;
  v61[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v60;
  swift_retain();
  uint64_t v62 = v113;
  uint64_t v63 = v116;
  v116[2] = v191;
  v63[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
  swift_retain();
  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v115;
  uint64_t v65 = v116;
  v116[4] = v192;
  v65[5] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    uint64_t v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v96 = createStorage<A>(capacity:type:)(0);
    uint64_t v97 = createStorage<A>(capacity:type:)(1);
    uint64_t v98 = &v245;
    id v245 = v95;
    uint64_t v99 = &v244;
    uint64_t v244 = v96;
    uint64_t v100 = &v243;
    uint64_t v243 = v97;
    serialize(_:at:)(2, &v245);
    serialize(_:at:)(1, v98);
    uint64_t v66 = v142;
    uint64_t v241 = v190;
    uint64_t v242 = v112;
    closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100);
    int v101 = v66;
    if (v66)
    {
      __break(1u);
    }
    else
    {
      uint64_t v241 = v191;
      uint64_t v242 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)&v245, (uint64_t)&v244, (uint64_t)&v243);
      uint64_t v92 = 0;
      uint64_t v241 = v192;
      uint64_t v242 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v241, (uint64_t)&v245, (uint64_t)&v244, (uint64_t)&v243);
      uint64_t v91 = 0;
      _os_log_impl(&dword_25D85A000, v117, (os_log_type_t)v118, "#Transformer newly transformed intent is %s", v95, v106);
      destroyStorage<A>(_:count:)(v96, 0, v94);
      destroyStorage<A>(_:count:)(v97, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611B9630](v95, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v93 = v91;
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v93 = v142;
  }
  uint32_t v89 = v93;

  v155(v196, v203);
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  uint64_t v90 = v248;
  swift_release();
  if (v90)
  {
    uint64_t v88 = v90;
    uint64_t v85 = v90;
    uint64_t v86 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    uint64_t v87 = v86;
  }
  else
  {
    uint64_t v87 = 0;
  }
  uint64_t v84 = v87;
  if (v87)
  {
    uint64_t v83 = v84;
    uint64_t v79 = v84;
    unint64_t v247 = v84;
    uint64_t v67 = v105;
    uint64_t v80 = Constants.intentAppIDAssociatedKey.unsafeMutableAddressor();
    uint64_t v81 = UsoEntity_common_App.appIdentifier.getter();
    uint64_t v82 = v68;
    if (v68)
    {
      uint64_t v77 = v81;
      uint64_t v78 = v82;
      id v74 = v82;
      id v75 = MEMORY[0x2611B9130](v81);
      swift_bridgeObjectRelease();
      uint64_t v76 = (void *)v75;
    }
    else
    {
      uint64_t v76 = 0;
    }
    uint64_t v73 = v76;
    uint64_t v72 = &v246;
    swift_beginAccess();
    objc_setAssociatedObject(v105, v80, v73, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
  uint64_t v69 = v105;
  uint64_t v70 = v105;
  *id v181 = v105;

  outlined destroy of SFRichText?(&v256);
  uint64_t result = v260;
  outlined destroy of SFRichText?(v260);
  return result;
}