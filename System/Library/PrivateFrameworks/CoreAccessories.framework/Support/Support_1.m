void _iAP2MediaLibraryMsgCleanupCB(uint64_t a1, int a2)
{
  BOOL v4;
  NSObject *v5;
  int v6;
  int MsgID;
  int MsgLen;
  uint64_t v9;
  NSObject *v10;
  void *EndpointWithUUID;
  uint64_t v12;
  _DWORD *Feature;
  CFTypeRef *v14;
  const char *CStringPtr;
  uint64_t MediaLibraryForUID;
  BOOL v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  const void *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *label;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned char v39[10];
  unsigned char v40[18];
  __int16 v41;
  unsigned char v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  if (gLogObjects) {
    v4 = gNumLogObjects < 31;
  }
  else {
    v4 = 1;
  }
  if (v4)
  {
    v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    v5 = *(NSObject **)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (a1)
    {
      v6 = *(unsigned __int16 *)(a1 + 48);
      MsgID = iAP2MsgGetMsgID(a1);
      MsgLen = iAP2MsgGetMsgLen(a1);
    }
    else
    {
      MsgID = 0;
      v6 = 0;
      MsgLen = 0;
    }
    v38 = 67110402;
    *(_DWORD *)v39 = (unsigned __int16)a1;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v6;
    *(_WORD *)v40 = 1024;
    *(_DWORD *)&v40[2] = MsgID;
    *(_WORD *)&v40[6] = 1024;
    *(_DWORD *)&v40[8] = MsgLen;
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = a2;
    v41 = 2080;
    *(void *)v42 = dispatch_queue_get_label(0);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "iAP 2MediaLibraryMsg Cleanup callback fired! msg=%hxh context=%hxh msgID=%xh msgLen=%d needDelete=%d currentDispatchQueue: %s", (uint8_t *)&v38, 0x2Au);
  }
  if (a1)
  {
    v9 = *(void *)(a1 + 48);
    if (!v9) {
      goto LABEL_75;
    }
    if (gLogObjects && gNumLogObjects >= 31)
    {
      v10 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _iAP2MediaLibraryMsgCleanupCB_cold_5(a1, (uint64_t *)v9, v10);
    }
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v9);
    if (!EndpointWithUUID)
    {
LABEL_75:
      if (!a2) {
        return;
      }
      goto LABEL_62;
    }
    if (*((_DWORD *)EndpointWithUUID + 7) == 4) {
      v12 = EndpointWithUUID[7];
    }
    else {
      v12 = 0;
    }
    Feature = (_DWORD *)iap2_feature_getFeature(v12, 0xDu);
    v14 = (CFTypeRef *)(v9 + 8);
    CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v9 + 8), 0x8000100u);
    MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v12, CStringPtr);
    if (MediaLibraryForUID && *(void *)(MediaLibraryForUID + 152) == a1)
    {
      *(void *)(MediaLibraryForUID + 152) = 0;
      if (!a2) {
        return;
      }
    }
    else if (!a2)
    {
      return;
    }
    if (gLogObjects) {
      v17 = gNumLogObjects <= 30;
    }
    else {
      v17 = 1;
    }
    v18 = !v17;
    if (Feature)
    {
      if (v18)
      {
        v19 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(void *)v9;
        v30 = *(void *)(v9 + 8);
        v31 = *(void *)(v9 + 16);
        v32 = *(_DWORD *)(v9 + 24);
        v33 = *(unsigned __int8 *)(v9 + 28);
        v34 = Feature[5];
        v35 = Feature[6];
        v36 = Feature[3];
        v37 = Feature[4];
        v38 = 138414594;
        *(void *)v39 = v29;
        *(_WORD *)&v39[8] = 2112;
        *(void *)v40 = v30;
        *(_WORD *)&v40[8] = 2112;
        *(void *)&v40[10] = v31;
        v41 = 1024;
        *(_DWORD *)v42 = v32;
        *(_WORD *)&v42[4] = 1024;
        *(_DWORD *)&v42[6] = v33;
        v43 = 1024;
        v44 = v34;
        v45 = 1024;
        v46 = v36;
        v47 = 1024;
        v48 = v35;
        v49 = 1024;
        v50 = v37;
        v51 = 1024;
        v52 = 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "_iAP2MediaLibraryMsgCleanupCB: cleanup context (accessoryUID=%@ libraryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d), ml (updateMessagesInFlight=%d--/%d updateMessagesPendingSend=%d/%d), needDelete=%d", (uint8_t *)&v38, 0x4Au);
      }
      v21 = Feature[5];
      if (v21) {
        Feature[5] = v21 - 1;
      }
      if (Feature[6] >= Feature[4]) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v18)
      {
        v20 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        _iAP2MediaLibraryMsgCleanupCB_cold_2();
      }
    }
    if (!*(unsigned char *)(v9 + 28))
    {
      *(unsigned char *)(v9 + 28) = 1;
      platform_mediaLibrary_confirmLibraryUpdate(*(void **)v9, *(void **)(v9 + 8), *(void **)(v9 + 16), *(unsigned int *)(v9 + 24));
    }
LABEL_56:
    if (*(void *)v9)
    {
      CFRelease(*(CFTypeRef *)v9);
      *(void *)v9 = 0;
    }
    if (*v14)
    {
      CFRelease(*v14);
      *v14 = 0;
    }
    v22 = *(const void **)(v9 + 16);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v9 + 16) = 0;
    }
LABEL_62:
    if (gLogObjects && gNumLogObjects >= 32)
    {
      v23 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = iAP2MsgGetMsgID(a1);
      v25 = iAP2MsgGetMsgLen(a1);
      label = dispatch_queue_get_label(0);
      v38 = 67109634;
      *(_DWORD *)v39 = v24;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v25;
      *(_WORD *)v40 = 2080;
      *(void *)&v40[2] = label;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "iAP2 MediaLibrary Msg Cleanup callback deleting msg! needDelete=True msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v38, 0x18u);
    }
    v27 = *(void **)(a1 + 48);
    if (v27)
    {
      free(v27);
      *(void *)(a1 + 48) = 0;
    }
    v28 = *(void **)(a1 + 24);
    if (v28) {
      free(v28);
    }
    free((void *)a1);
  }
}

void __MsgSentOutCB(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v1);
      if (EndpointWithUUID)
      {
        uint64_t v3 = EndpointWithUUID[7];
        if (v3)
        {
          uint64_t Feature = iap2_feature_getFeature(v3, 0xDu);
          if (Feature)
          {
            v5 = (_DWORD *)Feature;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              v6 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              v6 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
              __MsgSentOutCB_cold_1();
            }
            unsigned int v7 = v5[6];
            if (v7) {
              v5[6] = --v7;
            }
            ++v5[5];
            if (!*(unsigned char *)(v1 + 28) && v7 < v5[4])
            {
              *(unsigned char *)(v1 + 28) = 1;
              platform_mediaLibrary_confirmLibraryUpdate(*(void **)v1, *(void **)(v1 + 8), *(void **)(v1 + 16), *(unsigned int *)(v1 + 24));
            }
          }
        }
      }
    }
  }
}

const char *_iap2_mediaLibrary_sendUpdateMsg(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFString *a5, int a6, int a7, int a8)
{
  result = GetCStringFromCFString(a5);
  v40 = a1;
  if (a1 && a2)
  {
    v14 = *(uint64_t **)(a4 + 48);
    v15 = (char *)result;
    if (gLogObjects) {
      BOOL v16 = gNumLogObjects < 31;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      v17 = *(NSObject **)(gLogObjects + 240);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = v40[1];
      int MsgID = iAP2MsgGetMsgID(a4);
      int MsgLen = iAP2MsgGetMsgLen(a4);
      uint64_t v21 = *v14;
      uint64_t v22 = v14[1];
      *(_DWORD *)buf = 138414594;
      uint64_t v42 = v18;
      __int16 v43 = 2112;
      uint64_t v44 = a3;
      __int16 v45 = 1024;
      int v46 = a6;
      __int16 v47 = 1024;
      int v48 = a7;
      __int16 v49 = 1024;
      int v50 = a8;
      __int16 v51 = 1024;
      *(_DWORD *)v52 = (unsigned __int16)a4;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = MsgID;
      LOWORD(v53) = 1024;
      *(_DWORD *)((char *)&v53 + 2) = MsgLen;
      HIWORD(v53) = 2112;
      *(void *)v54 = v21;
      *(_WORD *)&v54[8] = 2112;
      uint64_t v55 = v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_iap2_mediaLibrary_sendUpdateMsg %@ libraryUID=%@ fullUpdate=%d progress=%d sendCount=%d pOutMsg(%hxh ID=%xh len=%d): context=(accessoryUID=%@ libraryUID=%@)", buf, 0x4Eu);
    }
    if (a6) {
      iAP2MsgAddVoidParam(a4, 0, 6);
    }
    iAP2MsgAddStringParam(a4, 0, 1, v15);
    iAP2MsgAddU8Param(a4, 0, 7, a7);
    if (v14)
    {
      v23 = (const void *)v14[2];
      if (v23)
      {
        CFRelease(v23);
        v14[2] = 0;
      }
      if (a5) {
        v14[2] = (uint64_t)CFRetain(a5);
      }
      *((_DWORD *)v14 + 6) = a8;
    }
    if (gLogObjects && gNumLogObjects >= 31)
    {
      v24 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      v24 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = v40[1];
      int v26 = iAP2MsgGetMsgID(a4);
      int v27 = iAP2MsgGetMsgLen(a4);
      if (v14)
      {
        uint64_t v30 = *v14;
        uint64_t v29 = v14[1];
        uint64_t v31 = v14[2];
        int v28 = *((_DWORD *)v14 + 6);
        int v32 = *((unsigned __int8 *)v14 + 28);
      }
      else
      {
        int v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = 0;
      }
      int v33 = a2[5];
      int v34 = a2[6];
      int v35 = a2[3];
      int v36 = a2[4];
      *(_DWORD *)buf = 138415874;
      uint64_t v42 = v25;
      __int16 v43 = 2112;
      uint64_t v44 = a3;
      __int16 v45 = 1024;
      int v46 = (unsigned __int16)a4;
      __int16 v47 = 1024;
      int v48 = v26;
      __int16 v49 = 1024;
      int v50 = v27;
      __int16 v51 = 2112;
      *(void *)v52 = v30;
      *(_WORD *)&v52[8] = 2112;
      uint64_t v53 = v29;
      *(_WORD *)v54 = 2112;
      *(void *)&v54[2] = v31;
      LOWORD(v55) = 1024;
      *(_DWORD *)((char *)&v55 + 2) = v28;
      HIWORD(v55) = 1024;
      int v56 = v32;
      __int16 v57 = 1024;
      int v58 = a6;
      __int16 v59 = 1024;
      int v60 = v33;
      __int16 v61 = 1024;
      int v62 = v35;
      __int16 v63 = 1024;
      int v64 = v34;
      __int16 v65 = 1024;
      int v66 = v36;
      _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "_iap2_mediaLibrary_sendUpdateMsg %@ libraryUID=%@ send message(%hxh ID=%xh len=%d): context=(accessoryUID=%@ libraryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d) fullUpdate=%d updateMessagesInFlight=%d/%d updateMessagesPendingSend=%d++/%d", buf, 0x70u);
    }
    ++a2[6];
    return (const char *)iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v40, a4);
  }
  return result;
}

uint64_t iap2_mediaLibrary_updatePlaylistContentHandler(uint64_t result, _DWORD *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (uint64_t)a2;
  uint64_t v3 = result;
  result = 0;
  if (!a2) {
    return result;
  }
  v4 = *(void **)(v3 + 8);
  if (!v4) {
    return result;
  }
  if (*a2 != 3) {
    return 0;
  }
  v5 = &unk_100239000;
  v6 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    unsigned int v7 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    unsigned int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v110 = v3;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t v8 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    int v11 = *(_DWORD *)(v2 + 32);
    CFArrayRef Count = *(const __CFArray **)(v2 + 40);
    if (Count) {
      v13 = ".";
    }
    else {
      v13 = "nil ";
    }
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    *(_DWORD *)buf = 138413826;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    *(void *)&buf[24] = v8;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v10;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v11;
    *(_WORD *)&buf[48] = 2080;
    *(void *)&buf[50] = v13;
    *(_WORD *)&buf[58] = 2048;
    *(void *)&buf[60] = Count;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_updatePlaylistContentHandler %@ libraryUID=%@ revision=%@ persistentID=%llu style=%d data(%scount=%lu)", buf, 0x44u);
    v5 = &unk_100239000;
    uint64_t v3 = v110;
  }
  CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v2 + 8), 0x8000100u);
  uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v3, CStringPtr);
  if (!MediaLibraryForUID) {
    goto LABEL_103;
  }
  BOOL v16 = (unsigned __int8 *)MediaLibraryForUID;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    v17 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    int v18 = *((_DWORD *)v16 + 33);
    int v19 = *v16;
    *(_DWORD *)buf = 138413314;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v16 + 1;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = v16 + 65;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v18;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "iap2_mediaLibrary_updatePlaylistContentHandler %@ mediaLibraryInfo(name='%s' uid='%s' type=%u started=%d)", buf, 0x2Cu);
  }
  if (!*v16 || (v20 = *(void *)(v3 + 32)) == 0 || (uint64_t v21 = *(unsigned __int8 **)(v20 + 24)) == 0)
  {
LABEL_103:
    platform_mediaLibrary_confirmLibraryPlaylistContentUpdate(v4, *(void **)(v2 + 8), *(void **)(v2 + 16));
    return 0;
  }
  int SessionForService = iAP2LinkGetSessionForService(*(void *)(v20 + 24), 1);
  SessionInfo = iAP2LinkGetSessionInfo(v21, SessionForService);
  if (SessionInfo) {
    unsigned int v107 = SessionInfo[2];
  }
  else {
    unsigned int v107 = 0;
  }
  unsigned __int8 v117 = 0;
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v115[0] = v23;
  v115[1] = v23;
  v115[2] = v23;
  v115[3] = v23;
  unint64_t v116 = 0xAAAAAAAAAAAAAAAALL;
  CFArrayRef v24 = *(const __CFArray **)(v2 + 40);
  if (v24) {
    CFIndex v112 = CFArrayGetCount(v24);
  }
  else {
    CFIndex v112 = 0;
  }
  v105 = v21;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    uint64_t v25 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    uint64_t v25 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v58 = *(void *)(v2 + 8);
    uint64_t v59 = *(void *)(v2 + 16);
    uint64_t v60 = *(void *)(v2 + 24);
    int v61 = *(_DWORD *)(v2 + 32);
    int v62 = *(unsigned __int16 *)(v2 + 40);
    *(_DWORD *)buf = 138414082;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v58;
    *(_WORD *)&buf[22] = 2112;
    *(void *)&buf[24] = v59;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v60;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v61;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v62;
    *(_WORD *)&buf[54] = 1024;
    *(_DWORD *)&buf[56] = SessionForService;
    *(_WORD *)&buf[60] = 1024;
    *(_DWORD *)&buf[62] = v107;
    _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "updatePlaylistContentHandler: accessoryUID=%@ libraryUID=%@ revision=%@ persistentID=%llu style=%d data=%hxh session=%u sessionVer=%u", buf, 0x42u);
  }
  int v26 = *(_DWORD *)(v2 + 32);
  v109 = v4;
  if (v26 != 2)
  {
    if (v26 == 1)
    {
      *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf[8] = v27;
      *(_OWORD *)&buf[40] = v27;
      *(_OWORD *)&buf[24] = v27;
      buf[8] = 0;
      *(void *)buf = v16;
      CFStringRef v28 = *(const __CFString **)(v2 + 16);
      *(void *)&buf[16] = *(void *)(v2 + 24);
      CFStringGetCString(v28, &buf[24], 32, 0x8000100u);
      v114[0] = 0xDAAAAAA00;
      v114[1] = 0;
      v114[2] = buf;
      TransferEntryForuint64_t Feature = iap2_sessionFileTransfer_findTransferEntryForFeature(v3, 128, (unsigned __int8 *)v114, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryRevisionPlaylistPersistentID);
      if (gLogObjects) {
        BOOL v30 = gNumLogObjects <= 30;
      }
      else {
        BOOL v30 = 1;
      }
      int v31 = !v30;
      if (!TransferEntryForFeature)
      {
        if (v31)
        {
          int v46 = *(NSObject **)(gLogObjects + 240);
        }
        else
        {
          int v46 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        __int16 v47 = &unk_100239000;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v56 = *(void *)(v2 + 24);
          *(_DWORD *)valuePtr = 134217984;
          *(void *)&valuePtr[4] = v56;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "updatePlaylistContentHandler: failed to get existing persistentIDs fileXfer for playlist(%llu)!", valuePtr, 0xCu);
        }
        unsigned int v54 = 0;
        int v48 = 0;
        int v57 = 0;
        uint64_t inited = 0;
LABEL_120:
        __int16 v63 = (void *)inited;
        if (!v48) {
          goto LABEL_203;
        }
        goto LABEL_121;
      }
      unint64_t v32 = TransferEntryForFeature;
      if (v31)
      {
        int v33 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        int v33 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        iap2_mediaLibrary_updatePlaylistContentHandler_cold_6((unsigned __int8 *)v32, v33);
      }
      __int16 v47 = &unk_100239000;
      unsigned __int8 v117 = *(unsigned char *)v32;
      int v48 = *(_DWORD **)(v32 + 8);
      if (!v112)
      {
        unsigned int v54 = 0;
        uint64_t inited = 0;
LABEL_119:
        int v57 = 3;
        goto LABEL_120;
      }
      __int16 v49 = malloc_type_malloc(8 * v112, 0x100004000313F17uLL);
      if (v49)
      {
        uint64_t inited = (uint64_t)v49;
        *(void *)valuePtr = 0xAAAAAAAAAAAAAAAALL;
        if (v112 < 1)
        {
          unsigned int v54 = 0;
        }
        else
        {
          CFIndex v51 = 0;
          v52 = v49;
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v51);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
            unsigned char *v52 = valuePtr[7];
            v52[1] = valuePtr[6];
            v52[2] = valuePtr[5];
            v52[3] = valuePtr[4];
            v52[4] = valuePtr[3];
            v52[5] = valuePtr[2];
            v52[6] = valuePtr[1];
            v52[7] = valuePtr[0];
            ++v51;
            v52 += 8;
          }
          while (v112 != v51);
          unsigned int v54 = 8 * v112;
        }
        goto LABEL_119;
      }
      goto LABEL_103;
    }
    goto LABEL_158;
  }
  if (v107 < 2)
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      __int16 v45 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      __int16 v45 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      iap2_mediaLibrary_updatePlaylistContentHandler_cold_11(v107, v45);
    }
    goto LABEL_158;
  }
  if (!iAP2FileTransferAllocateBufferID((uint64_t)v105, SessionForService, &v117))
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      uint64_t v55 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      uint64_t v55 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT)) {
      iap2_mediaLibrary_updatePlaylistContentHandler_cold_9(v55);
    }
LABEL_158:
    __int16 v63 = 0;
    goto LABEL_159;
  }
  uint64_t v113 = v2;
  v111 = v16;
  if (v112 < 1)
  {
    uint64_t v108 = 0;
    goto LABEL_171;
  }
  CFIndex v34 = 0;
  uint64_t v108 = 0;
  do
  {
    int v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v34);
    if (!v35 || !*v16) {
      goto LABEL_77;
    }
    *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[32] = v36;
    *(_OWORD *)&buf[48] = v36;
    *(_OWORD *)buf = v36;
    *(_OWORD *)&buf[16] = v36;
    platform_mediaLibrary_getStructPlaylistContentItem(v2, (uint64_t)v35, (uint64_t)buf);
    uint64_t v37 = 0;
    int v38 = 4;
    do
    {
      int v39 = v38;
      if (((unint64_t)*(unsigned int *)buf >> v37))
      {
        v38 += 4;
        if ((int)v37 <= 11)
        {
          if (v37)
          {
            if (v37 == 1)
            {
              v40 = *(const char **)&buf[16];
            }
            else
            {
              if (v37 != 6) {
                goto LABEL_74;
              }
              v40 = *(const char **)&buf[24];
            }
LABEL_73:
            int v38 = v39 + strlen(v40) + 5;
          }
          else
          {
            int v38 = v39 + 12;
          }
        }
        else
        {
          switch((int)v37)
          {
            case 12:
              v40 = *(const char **)&buf[32];
              goto LABEL_73;
            case 14:
              v40 = *(const char **)&buf[40];
              goto LABEL_73;
            case 16:
              v40 = *(const char **)&buf[48];
              goto LABEL_73;
            case 18:
              v40 = *(const char **)&buf[56];
              goto LABEL_73;
            default:
              break;
          }
        }
      }
LABEL_74:
      ++v37;
    }
    while (v37 != 28);
    uint64_t v2 = v113;
    v6 = (_DWORD *)&unk_100239000;
    v5 = (void *)&unk_100239000;
    if (v38)
    {
      LODWORD(v108) = v108 + 1;
      HIDWORD(v108) += v38;
      goto LABEL_86;
    }
LABEL_77:
    uint64_t v41 = v5[49];
    int v42 = v6[100];
    if (v41) {
      BOOL v43 = v42 < 31;
    }
    else {
      BOOL v43 = 1;
    }
    if (v43)
    {
      uint64_t v44 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v41;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v42;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
    }
    else
    {
      uint64_t v44 = *(NSObject **)(v41 + 240);
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "updatePlaylistContentHandler: WARNING: record size is 0 for index %ld", buf, 0xCu);
    }
LABEL_86:
    BOOL v16 = v111;
    ++v34;
  }
  while (v34 != v112);
LABEL_171:
  __int16 v47 = v6;
  __int16 v63 = malloc_type_malloc((HIDWORD(v108) + 22), 0x4C8C8113uLL);
  iAP2MsgInit((uint64_t)v115, 0, (uint64_t)v63, HIDWORD(v108) + 22, 0, 0);
  iAP2MsgAddU32Param((uint64_t)v115, 0, 0, v108);
  iAP2MsgAddU32Param((uint64_t)v115, 0, 1, 0);
  if (v112 >= 1)
  {
    CFIndex v84 = 0;
    int v104 = (unsigned __int16)v16;
    while (1)
    {
      v86 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v113 + 40), v84);
      uint64_t v87 = v5[49];
      int v88 = v47[100];
      if (!v87 || v88 < 31)
      {
        v90 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v87;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v88;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          v90 = &_os_log_default;
        }
      }
      else
      {
        v90 = *(NSObject **)(v87 + 240);
      }
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v110;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v104;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = (v85 + 144) & 0xFFF0;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = (unsigned __int16)v86;
        _os_log_debug_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "_iap2_mediaLibrary_playlistContentItemUpdateHandler: pEndpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh", buf, 0x1Au);
      }
      v5 = (void *)&unk_100239000;
      BOOL v16 = v111;
      if (v86)
      {
        if (*v111) {
          break;
        }
      }
LABEL_200:
      if (++v84 == v112) {
        goto LABEL_201;
      }
    }
    *(void *)&long long v91 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[32] = v91;
    *(_OWORD *)&buf[48] = v91;
    *(_OWORD *)buf = v91;
    *(_OWORD *)&buf[16] = v91;
    v92 = iAP2MsgAddGroupParam((uint64_t)v115, 2);
    platform_mediaLibrary_getStructPlaylistContentItem(v113, (uint64_t)v86, (uint64_t)buf);
    uint64_t v93 = 0;
    while (2)
    {
      if (((unint64_t)*(unsigned int *)buf >> v93))
      {
        if ((int)v93 <= 11)
        {
          if (v93)
          {
            if (v93 == 1)
            {
              v94 = *(char **)&buf[16];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 1;
            }
            else
            {
              if (v93 != 6) {
                goto LABEL_199;
              }
              v94 = *(char **)&buf[24];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 6;
            }
LABEL_198:
            iAP2MsgAddStringParam((uint64_t)v115, v95, v96, v94);
          }
          else
          {
            iAP2MsgAddU64Param((uint64_t)v115, (uint64_t)v92, 0, *(unint64_t *)&buf[8]);
          }
        }
        else
        {
          switch((int)v93)
          {
            case 12:
              v94 = *(char **)&buf[32];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 12;
              goto LABEL_198;
            case 14:
              v94 = *(char **)&buf[40];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 14;
              goto LABEL_198;
            case 16:
              v94 = *(char **)&buf[48];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 16;
              goto LABEL_198;
            case 18:
              v94 = *(char **)&buf[56];
              uint64_t v95 = (uint64_t)v92;
              __int16 v96 = 18;
              goto LABEL_198;
            default:
              break;
          }
        }
      }
LABEL_199:
      if (++v93 == 28) {
        goto LABEL_200;
      }
      continue;
    }
  }
LABEL_201:
  unint64_t FirstParam = iAP2MsgGetFirstParam((uint64_t)v115, 0);
  uint64_t inited = iAP2LinkRunLoopInitImplementation(FirstParam);
  v98 = malloc_type_malloc(0x38uLL, 0x102004091BE1796uLL);
  v98[8] = v117;
  *(void *)v98 = v16;
  uint64_t v2 = v113;
  *((void *)v98 + 2) = *(void *)(v113 + 24);
  CFStringGetCString(*(CFStringRef *)(v113 + 16), v98 + 24, 32, 0x8000100u);
  int v48 = malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
  iAP2FileTransferCreate(v105, SessionForService, v117, 0, 0, 0, (uint64_t)v48);
  if ((iap2_sessionFileTransfer_addTransferForFeature(v110, 13, (uint64_t)v48, (uint64_t)v98) & 1) == 0)
  {
    uint64_t v99 = v5[49];
    v6 = v47;
    if (v99 && (int)v47[100] >= 31)
    {
      v100 = *(NSObject **)(v99 + 240);
    }
    else
    {
      v100 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v117;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "updatePlaylistContentHandler: ERROR: failed to create and add fileXfer (bufferID=%u) to list", buf, 8u);
    }
    free(v98);
    v5 = (void *)&unk_100239000;
    if (v48) {
      free(v48);
    }
LABEL_159:
    uint64_t v77 = v5[49];
    if (v77 && (int)v6[100] >= 31)
    {
      v78 = *(NSObject **)(v77 + 240);
    }
    else
    {
      v78 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
    {
      uint64_t v79 = *(void *)(v2 + 8);
      uint64_t v80 = *(void *)(v2 + 16);
      uint64_t v81 = *(void *)(v2 + 24);
      int v82 = *(_DWORD *)(v2 + 32);
      int v83 = *(unsigned __int16 *)(v2 + 40);
      *(_DWORD *)buf = 138414082;
      *(void *)&uint8_t buf[4] = v109;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v79;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&buf[24] = v80;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v81;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = v82;
      *(_WORD *)&buf[48] = 1024;
      *(_DWORD *)&buf[50] = v83;
      *(_WORD *)&buf[54] = 1024;
      *(_DWORD *)&buf[56] = SessionForService;
      *(_WORD *)&buf[60] = 1024;
      *(_DWORD *)&buf[62] = v107;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "updatePlaylistContentHandler: WARNING: No fileXfer created to handle playlistContent; accessoryUID=%@ libraryUID"
        "=%@ revision=%@ persistentID=%llu style=%d data=%hxh session=%u sessionVer=%u",
        buf,
        0x42u);
    }
LABEL_166:
    if (v63) {
      free(v63);
    }
    goto LABEL_168;
  }
  unsigned int v54 = HIDWORD(v108) + 16;
  int v57 = 6;
  if (!v48)
  {
LABEL_203:
    v6 = v47;
    v5 = (void *)&unk_100239000;
    goto LABEL_159;
  }
LABEL_121:
  if (v107 >= 2 && v57)
  {
    unint64_t v124 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v64 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v122 = v64;
    long long v123 = v64;
    long long v120 = v64;
    long long v121 = v64;
    *(_OWORD *)&buf[64] = v64;
    long long v119 = v64;
    *(_OWORD *)&buf[32] = v64;
    *(_OWORD *)&buf[48] = v64;
    *(_OWORD *)buf = v64;
    *(_OWORD *)&buf[16] = v64;
    CFIndex Length = CFStringGetLength(*(CFStringRef *)(v2 + 8));
    *(_WORD *)buf = Length + 9;
    *(void *)&buf[8] = *(void *)(v2 + 24);
    if ((unint64_t)(Length + 1) < 0x3C) {
      CFIndex v66 = Length + 1;
    }
    else {
      CFIndex v66 = 60;
    }
    CFStringGetCString(*(CFStringRef *)(v2 + 8), &buf[16], v66, 0x8000100u);
    buf[75] = 0;
    if (*(_DWORD *)(v2 + 32) == 2) {
      int v67 = 7;
    }
    else {
      int v67 = 4;
    }
    iAP2FileTransferTypeData((uint64_t)v48, v67, (unsigned __int16 *)buf);
  }
  if (gLogObjects) {
    BOOL v68 = v47[100] <= 30;
  }
  else {
    BOOL v68 = 1;
  }
  int v69 = !v68;
  if (v48[26])
  {
    if (v69)
    {
      v70 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      v70 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      int v72 = v48[26];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v72;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "updatePlaylistContentHandler: ERROR: File transfer in wrong state (%d)", buf, 8u);
    }
    iAP2FileTransferCancel((uint64_t)v48);
    goto LABEL_166;
  }
  if (v69)
  {
    v71 = *(NSObject **)(gLogObjects + 240);
  }
  else
  {
    v71 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
  {
    uint64_t v73 = *(void *)(v2 + 8);
    uint64_t v74 = *(void *)(v2 + 16);
    uint64_t v75 = *(void *)(v2 + 24);
    *(_DWORD *)buf = 138413314;
    *(void *)&uint8_t buf[4] = v109;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v73;
    *(_WORD *)&buf[22] = 2112;
    *(void *)&buf[24] = v74;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v75;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v117;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "updatePlaylistContentHandler: %@ libraryUID=%@ revision=%@ persistentID=%llu, start file transfer, bufferID=%u", buf, 0x30u);
  }
  if ((iAP2FileTransferStart((uint64_t)v48, inited, v54, v54, (uint64_t)__handleTransferEnd, (uint64_t)v63, 0, 0) & 1) == 0)
  {
    if (gLogObjects && (int)v47[100] >= 31)
    {
      v76 = *(NSObject **)(gLogObjects + 240);
    }
    else
    {
      v76 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      uint64_t v101 = *(void *)(v2 + 8);
      uint64_t v102 = *(void *)(v2 + 16);
      uint64_t v103 = *(void *)(v2 + 24);
      *(_DWORD *)buf = 138413314;
      *(void *)&uint8_t buf[4] = v109;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v101;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&buf[24] = v102;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v103;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = v117;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "updatePlaylistContentHandler: %@ libraryUID=%@ revision=%@ persistentID=%llu, Failed to start file transfer!!! bufferID=%u", buf, 0x30u);
    }
    iAP2FileTransferCancel((uint64_t)v48);
    iAP2FileTransferRelease((uint64_t)v48);
  }
LABEL_168:
  platform_mediaLibrary_confirmLibraryPlaylistContentUpdate(v109, *(void **)(v2 + 8), *(void **)(v2 + 16));
  platform_mediaLibrary_deleteParams((void *)v2);
  return 1;
}

uint64_t _compareLibraryRevisionPlaylistPersistentID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != 13 || *(_DWORD *)(a2 + 4) != 13) {
    return -1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  LODWORD(result) = strncmp((const char *)(*(void *)v2 + 65), (const char *)(*(void *)v3 + 65), 0x40uLL);
  if (result) {
    return (int)result;
  }
  LODWORD(result) = strncmp((const char *)(v2 + 24), (const char *)(v3 + 24), 0x20uLL);
  if (result) {
    return (int)result;
  }
  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v3 + 16);
  BOOL v7 = v5 == v6;
  BOOL v8 = v5 > v6;
  uint64_t v9 = 1;
  if (!v8) {
    uint64_t v9 = -1;
  }
  if (v7) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t __handleTransferEnd(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (a2)
    {
      if (*(void *)v3)
      {
        if (gLogObjects) {
          BOOL v4 = gNumLogObjects < 31;
        }
        else {
          BOOL v4 = 1;
        }
        if (v4)
        {
          unint64_t v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          unint64_t v5 = *(NSObject **)(gLogObjects + 240);
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          __handleTransferEnd_cold_2();
        }
        unsigned int v6 = *(_DWORD *)(v3 + 104);
        uint64_t result = 1;
        if (v6 <= 7 && ((1 << v6) & 0xD0) != 0)
        {
          if (*(void *)(v3 + 16))
          {
            if (*(void **)(v3 + 64) == a2)
            {
              free(a2);
              *(void *)(v3 + 64) = 0;
            }
            else
            {
              if (gLogObjects && gNumLogObjects >= 31)
              {
                BOOL v7 = *(NSObject **)(gLogObjects + 240);
              }
              else
              {
                BOOL v7 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
              {
                int v9 = *(_DWORD *)(v3 + 104);
                int v10 = *(unsigned __int8 *)(v3 + 109);
                int v11 = *(unsigned __int16 *)(v3 + 16);
                int v12 = *(unsigned __int16 *)(v3 + 64);
                int v13 = 136316674;
                v14 = "__handleTransferEnd";
                __int16 v15 = 1024;
                int v16 = (unsigned __int16)v3;
                __int16 v17 = 1024;
                int v18 = v9;
                __int16 v19 = 1024;
                int v20 = v10;
                __int16 v21 = 1024;
                int v22 = v11;
                __int16 v23 = 1024;
                int v24 = (unsigned __int16)a2;
                __int16 v25 = 1024;
                int v26 = v12;
                _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!", (uint8_t *)&v13, 0x30u);
              }
            }
          }
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 40) = 0;
          uint64_t v8 = *(void *)(*(void *)v3 + 176);
          if (v8)
          {
            uint64_t result = *(void *)(v8 + 16);
            if (result)
            {
              iap2_sessionFileTransfer_removeTransferForFeature(result, 13, v3);
              return 1;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

const char *GetCStringFromCFString(const __CFString *a1)
{
  uint64_t result = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!result)
  {
    if (CFStringGetCString(a1, GetCStringFromCFString_buff, 256, 0x8000100u)) {
      return GetCStringFromCFString_buff;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *_createFeature_14(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _createFeature", buf, 2u);
  }
  *(_DWORD *)buf = 0;
  uint64_t v11 = 0;
  unsigned int v10 = 0;
  if (!a1) {
    return 0;
  }
  BOOL v4 = malloc_type_calloc(1uLL, 0x38uLL, 0x1080040A967669AuLL);
  if (!v4) {
    return v4;
  }
  _calcWindowSize(a1, 0, (int *)buf, (unsigned int *)&v11 + 1, (unsigned int *)&v11, (int *)&v10);
  *(unsigned char *)BOOL v4 = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[4] = 0;
  int v5 = HIDWORD(v11);
  int v6 = *(_DWORD *)buf;
  *((_DWORD *)v4 + 1) = *(_DWORD *)buf;
  *((_DWORD *)v4 + 2) = v5;
  unsigned int v7 = v10;
  int v8 = v11;
  *((_DWORD *)v4 + 3) = v11;
  v4[2] = v7;
  *((_DWORD *)v4 + 6) = 0;
  if (v6)
  {
    if (v5) {
      goto LABEL_14;
    }
  }
  else
  {
    *((_DWORD *)v4 + 1) = 1;
    if (v5)
    {
LABEL_14:
      if (v8) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
  }
  *((_DWORD *)v4 + 2) = 1;
  if (v8)
  {
LABEL_15:
    if (!v7) {
      goto LABEL_20;
    }
    return v4;
  }
LABEL_19:
  *((_DWORD *)v4 + 3) = 1;
  if (!v7) {
LABEL_20:
  }
    *((_DWORD *)v4 + 4) = 1;
  return v4;
}

uint64_t _destroyFeature_14(void **a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 21;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v5 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _destroyFeature", buf, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    unsigned int v7 = *a1;
    if (*a1)
    {
      uint64_t v41 = a1;
      if (*(unsigned char *)v7)
      {
        platform_mediaLibrary_accessoryDetached(*(void **)(a2 + 8));
        uint64_t v43 = *((unsigned int *)v7 + 12);
        if ((int)v43 >= 1)
        {
          uint64_t v8 = 0;
          int v42 = v7;
          while (1)
          {
            int v9 = *(void **)(v7[5] + 8 * v8);
            if (v9) {
              break;
            }
LABEL_61:
            if (++v8 == v43) {
              goto LABEL_62;
            }
          }
          *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v56 = v10;
          long long v57 = v10;
          unint64_t v54 = 0xAAAAAAAAAAAAAA00;
          uint64_t v44 = v9;
          *(void *)buf = v9;
          uint64_t v55 = 0;
          LOBYTE(v56) = 0;
          v45[0] = 0xDAAAAAA00;
          v45[1] = 0;
          v45[2] = buf;
          TransferEntryForuint64_t Feature = iap2_sessionFileTransfer_findTransferEntryForFeature(a2, 128, (unsigned __int8 *)v45, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryUID);
          uint64_t v12 = gLogObjects;
          int v13 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v14 = gNumLogObjects <= 30;
          }
          else {
            BOOL v14 = 1;
          }
          int v15 = !v14;
          if (TransferEntryForFeature)
          {
            int v16 = (unsigned __int8 *)TransferEntryForFeature;
            if (v15)
            {
              __int16 v17 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              __int16 v17 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v12;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v46, 0x12u);
                __int16 v17 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int v46 = 136315394;
              *(void *)__int16 v47 = (char *)v44 + 1;
              *(_WORD *)&v47[8] = 2080;
              *(void *)int v48 = (char *)v44 + 65;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "cleanupPendingFileTransfers: for library '%s' (%s)", v46, 0x16u);
            }
            unsigned int v19 = -1;
            do
            {
              uint64_t v20 = gLogObjects;
              int v21 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v22 = gNumLogObjects < 31;
              }
              else {
                BOOL v22 = 1;
              }
              if (v22)
              {
                __int16 v23 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int v46 = 134218240;
                  *(void *)__int16 v47 = v20;
                  *(_WORD *)&v47[8] = 1024;
                  *(_DWORD *)int v48 = v21;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v46, 0x12u);
                  __int16 v23 = &_os_log_default;
                }
              }
              else
              {
                __int16 v23 = *(NSObject **)(gLogObjects + 240);
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                int v24 = *v16;
                int v25 = *((_DWORD *)v16 + 1);
                uint64_t v26 = obfuscatedPointer(*((void *)v16 + 1));
                int v27 = *(unsigned __int8 *)(*((void *)v16 + 1) + 109);
                int v28 = *((unsigned __int16 *)v16 + 8);
                *(_DWORD *)int v46 = 67110144;
                *(_DWORD *)__int16 v47 = v24;
                *(_WORD *)&v47[4] = 1024;
                *(_DWORD *)&v47[6] = v25;
                *(_WORD *)int v48 = 2048;
                *(void *)&v48[2] = v26;
                __int16 v49 = 1024;
                int v50 = v27;
                __int16 v51 = 1024;
                int v52 = v28;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "cleanupPendingFileTransfers: xferEntry(bufferID=%u type=%u fileXfer=%p(0x%02x) context=%hxh)", v46, 0x24u);
              }
              iap2_sessionFileTransfer_removeTransferForFeature(a2, 13, *((void *)v16 + 1));
              unint64_t v29 = iap2_sessionFileTransfer_findTransferEntryForFeature(a2, 128, (unsigned __int8 *)v45, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryUID);
              int v16 = (unsigned __int8 *)v29;
              unsigned int v30 = v19 + 1;
              if (!v29) {
                break;
              }
              ++v19;
            }
            while (v19 < 0x3E7);
            unsigned int v7 = v42;
            int v31 = v44;
            if (!v29 || v30 < 0x3E7) {
              goto LABEL_58;
            }
            uint64_t v32 = gLogObjects;
            int v33 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              CFIndex v34 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              CFIndex v34 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v32;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v33;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v46, 0x12u);
                CFIndex v34 = &_os_log_default;
              }
            }
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_58;
            }
            *(_WORD *)int v46 = 0;
            int v35 = v34;
            os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
            uint64_t v37 = "Reached max file transfer entries before stopping cleanup!";
            uint32_t v38 = 2;
          }
          else
          {
            if (v15)
            {
              int v18 = *(NSObject **)(gLogObjects + 240);
            }
            else
            {
              int v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v12;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", v46, 0x12u);
                int v18 = &_os_log_default;
              }
            }
            int v31 = v44;
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
              goto LABEL_58;
            }
            *(_DWORD *)int v46 = 136315394;
            *(void *)__int16 v47 = (char *)v44 + 1;
            *(_WORD *)&v47[8] = 2080;
            *(void *)int v48 = (char *)v44 + 65;
            int v35 = v18;
            os_log_type_t v36 = OS_LOG_TYPE_INFO;
            uint64_t v37 = "cleanupPendingFileTransfers: for library '%s' (%s), No transfers found to cleanup!";
            uint32_t v38 = 22;
          }
          _os_log_impl((void *)&_mh_execute_header, v35, v36, v37, v46, v38);
LABEL_58:
          uint64_t v39 = v31[19];
          if (v39) {
            iAP2MsgCleanup(v39);
          }
          *(void *)(v7[5] + 8 * v8) = 0;
          free(v31);
          --*((_DWORD *)v7 + 12);
          goto LABEL_61;
        }
      }
LABEL_62:
      platform_mediaLibrary_decrementUserCount();
      v40 = (void *)v7[5];
      if (v40)
      {
        free(v40);
        v7[5] = 0;
      }
      if (*v41)
      {
        free(*v41);
        *uint64_t v41 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_9(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _startFeatureFromDevice", v7, 2u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
  if (Feature)
  {
    platform_mediaLibrary_incrementUserCount();
    if (!a1 || (int v5 = *(void **)(a1 + 8)) == 0) {
      int v5 = 0;
    }
    platform_mediaLibrary_accessoryAttached(v5, *(unsigned int *)(Feature + 4));
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_12(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_gskMsgMediaLibraryList, 0xAu, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xDu);
    iap2_identification_setIdentifiedForFeature(a1, 0xDu);
  }
  return v3;
}

void _calcWindowSize(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  uint64_t v6 = a1;
  unsigned int v7 = &unk_100239000;
  if (!a1)
  {
    int v16 = 0;
    unsigned int v20 = 0;
    unint64_t v33 = 0;
    unsigned int v32 = 0;
    unsigned int v23 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v39 = 0;
    int v26 = 0;
    int v25 = 0;
    goto LABEL_87;
  }
  unsigned int LinkMaxCumAck = iap2_endpoint_getLinkMaxCumAck(a1);
  unsigned int MaxSendPayloadSizeWithOverride = iap2_endpoint_getMaxSendPayloadSizeWithOverride(v6);
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 31;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v12 = *(NSObject **)(gLogObjects + 240);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *(void *)(v6 + 8);
    int v15 = (const char *)(a2 + 65);
    *(_DWORD *)buf = 138413314;
    if (!a2) {
      int v15 = "<none>";
    }
    uint64_t v42 = v14;
    __int16 v43 = 2080;
    uint64_t v44 = v15;
    __int16 v45 = 1024;
    int v46 = MaxSendPayloadSizeWithOverride;
    __int16 v47 = 1024;
    int v48 = LinkMaxCumAck;
    __int16 v49 = 1024;
    unsigned int v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _calcWindowSize: %@ - %s, maxPayloadSize %d, linkPeerMaxCumAck %d, linkPeerMaxOutstanding %d", buf, 0x28u);
  }
  int v16 = 0;
  unint64_t v33 = __PAIR64__(LinkMaxCumAck, MaxSendPayloadSizeWithOverride);
  if (!a2)
  {
    LODWORD(v6) = 0;
    unsigned int v20 = 0;
    unsigned int v32 = 0;
    unsigned int v23 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v39 = 0;
    int v26 = 0;
    int v25 = 0;
    unsigned int v7 = (void *)&unk_100239000;
    goto LABEL_87;
  }
  unsigned int v7 = &unk_100239000;
  if (!MaxSendPayloadSizeWithOverride)
  {
    LODWORD(v6) = 0;
    unsigned int v20 = 0;
    unsigned int v32 = 0;
    unsigned int v23 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v39 = 0;
    int v26 = 0;
    int v25 = 0;
    goto LABEL_87;
  }
  int v16 = 0;
  uint64_t v17 = *(void *)(a2 + 144);
  unint64_t v18 = 1;
  do
  {
    if ((v18 & v17) != 0)
    {
      if ((v18 & v17) == 0 || !v13)
      {
        switch(v18)
        {
          case 1uLL:
          case 4uLL:
            v16 += 12;
            goto LABEL_26;
          case 2uLL:
            v16 += 68;
            goto LABEL_26;
          case 3uLL:
          case 5uLL:
          case 6uLL:
          case 7uLL:
            goto LABEL_26;
          case 8uLL:
            goto LABEL_25;
          default:
            JUMPOUT(0);
        }
      }
      BOOL v13 = v18 - 16 >= 0x30;
      if (v18 - 16 <= 0x30 && ((1 << (v18 - 16)) & 0x1000000010001) != 0
        || (BOOL v13 = v18 >= 0x100, v18 == 256))
      {
LABEL_25:
        v16 += 5;
      }
    }
LABEL_26:
    v18 *= 2;
  }
  while (v18);
  LODWORD(v6) = 0;
  uint64_t v19 = 1;
  do
  {
    if ((v19 & *(void *)(a2 + 136)) == 0) {
      goto LABEL_64;
    }
    if (v19 > 2047)
    {
      if (v19 < 0x10000)
      {
        if (v19 < 0x2000)
        {
          if (v19 == 2048)
          {
LABEL_63:
            LODWORD(v6) = v6 + 12;
            goto LABEL_64;
          }
          if (v19 != 4096) {
            goto LABEL_64;
          }
LABEL_62:
          LODWORD(v6) = v6 + 68;
          goto LABEL_64;
        }
        switch(v19)
        {
          case 0x2000:
            goto LABEL_63;
          case 0x4000:
            goto LABEL_62;
          case 0x8000:
            goto LABEL_63;
        }
      }
      else if (v19 >= 0x80000)
      {
        if (v19 == 0x80000 || v19 == 0x2000000)
        {
LABEL_53:
          LODWORD(v6) = v6 + 5;
          goto LABEL_64;
        }
        if (v19 == 0x8000000) {
          goto LABEL_59;
        }
      }
      else
      {
        switch(v19)
        {
          case 0x10000:
            goto LABEL_62;
          case 0x20000:
            goto LABEL_63;
          case 0x40000:
            goto LABEL_62;
        }
      }
    }
    else
    {
      if (v19 <= 63)
      {
        switch(v19)
        {
          case 1:
            goto LABEL_63;
          case 2:
            goto LABEL_62;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_64;
          case 4:
          case 8:
            goto LABEL_53;
          default:
            if (v19 == 16)
            {
              LODWORD(v6) = v6 + 8;
            }
            else if (v19 == 32)
            {
              goto LABEL_63;
            }
            break;
        }
        goto LABEL_64;
      }
      if (v19 <= 255)
      {
        if (v19 != 64)
        {
          if (v19 != 128) {
            goto LABEL_64;
          }
LABEL_59:
          LODWORD(v6) = v6 + 6;
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      if (v19 == 256 || v19 == 512 || v19 == 1024) {
        goto LABEL_59;
      }
    }
LABEL_64:
    v19 *= 2;
  }
  while (v19);
  if (v16 | v6)
  {
    if ((int)v6 + 124 <= (v16 + 124)) {
      unsigned int v20 = v16 + 124;
    }
    else {
      unsigned int v20 = v6 + 124;
    }
    unsigned int v21 = (v20 + (MaxSendPayloadSizeWithOverride >> 1) - 1) / v20 * v20;
    unsigned int v22 = v21 * LinkMaxCumAck;
    if (v21 * LinkMaxCumAck > 0x186A0) {
      unsigned int v21 = 0x186A0 / LinkMaxCumAck;
    }
    unsigned int v32 = v21;
    if (v22 > 0x186A0) {
      unsigned int v23 = 0x186A0 / LinkMaxCumAck / v20;
    }
    else {
      unsigned int v23 = (v20 + (MaxSendPayloadSizeWithOverride >> 1) - 1) / v20;
    }
    if (!v23)
    {
      if (gLogObjects && gNumLogObjects >= 31)
      {
        int v24 = *(NSObject **)(gLogObjects + 240);
      }
      else
      {
        int v24 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        _calcWindowSize_cold_4();
      }
      unsigned int v23 = 1;
      unsigned int v7 = &unk_100239000;
    }
    int v25 = 5 * v23;
    int v26 = 1;
    int v39 = 5;
  }
  else
  {
    int v16 = 0;
    LODWORD(v6) = 0;
    unsigned int v20 = 0;
    unsigned int v32 = 0;
    unsigned int v23 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v39 = 0;
    int v25 = 0;
    int v26 = 1;
  }
LABEL_87:
  uint64_t v27 = v7[49];
  if (v27) {
    BOOL v28 = gNumLogObjects < 31;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28)
  {
    unint64_t v29 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    unint64_t v29 = *(NSObject **)(v27 + 240);
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (!a1 || (uint64_t v30 = *(void *)(a1 + 8)) == 0) {
      uint64_t v30 = 0;
    }
    *(_DWORD *)buf = 138415362;
    uint64_t v42 = v30;
    if (a2) {
      int v31 = (const char *)(a2 + 65);
    }
    else {
      int v31 = "<none>";
    }
    __int16 v43 = 2080;
    uint64_t v44 = v31;
    __int16 v45 = 1024;
    int v46 = v26;
    __int16 v47 = 1024;
    int v48 = v25;
    __int16 v49 = 1024;
    unsigned int v50 = v23;
    __int16 v51 = 1024;
    unsigned int v52 = v32;
    __int16 v53 = 1024;
    unsigned int v54 = LinkMaxCumAck;
    __int16 v55 = 1024;
    int v56 = v39;
    __int16 v57 = 1024;
    int v58 = v33;
    __int16 v59 = 1024;
    int v60 = HIDWORD(v33);
    __int16 v61 = 1024;
    unsigned int v62 = v20;
    __int16 v63 = 1024;
    int v64 = v16;
    __int16 v65 = 1024;
    int v66 = v6;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "iAP2MediaLibrary _calcWindowSize: %@ - %s success=%d window=%d recordsPerMessage=%d recordBytesPerMessage=%d maxUpdateMessagesInFlight=%d maxupdateMessagesPendingSend=%d maxPayloadSize=%d linkPeerMaxCumAck=%d estMaxRecordSize=%d playlistSize=%d itemSize=%d", buf, 0x58u);
  }
  if (v26)
  {
    if (a3) {
      *a3 = v25;
    }
    if (a4) {
      *a4 = v23;
    }
    if (a5) {
      *a5 = LinkMaxCumAck;
    }
    if (a6) {
      *a6 = v39;
    }
  }
}

uint64_t _compareLibraryUID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == 13 && *(_DWORD *)(a2 + 4) == 13) {
    return strncmp((const char *)(**(void **)(a1 + 16) + 65), (const char *)(**(void **)(a2 + 16) + 65), 0x40uLL);
  }
  else {
    return -1;
  }
}

uint64_t iAP2MsgParserInit(__int16 a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  *(_WORD *)a2 = 0;
  *(_WORD *)(a2 + 2) = a1;
  *(void *)(a2 + 8) = a2 + 32;
  *(void *)(a2 + 16) = a3;
  *(_WORD *)(a2 + 24) = a4;
  return a2;
}

uint64_t iAP2MsgParserConsumeByte(unsigned __int16 *a1, char a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (v4 >= a1[1])
  {
    if (_iAP2LogEnableMask)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects < 20;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        int v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_nvmInfo_getPairingStatus_cold_1(v13, v14);
        }
      }
      else
      {
        int v16 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *a1;
        int v18 = a1[1];
        int v19 = 136315906;
        unsigned int v20 = "_consumeByteInternal";
        __int16 v21 = 1024;
        int v22 = 134;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d ERROR: message parse error, length (%u) passed allocated buffer length (%u)", (uint8_t *)&v19, 0x1Eu);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 1) + v4) = a2;
    int v5 = *a1 + 1;
    unsigned int v6 = ++*a1;
    if (v6 != v5) {
      return 0;
    }
    unsigned int v7 = a1[12];
    uint64_t v8 = (unsigned __int8 *)*((void *)a1 + 1);
    if (*v8 == v7 >> 8)
    {
      if (v6 < 2) {
        return 0;
      }
      if (v8[1] == v7)
      {
        if (v6 >= 4)
        {
          int v9 = v8[2];
          int v10 = v8[3];
          if ((v10 | (v9 << 8)) == v6)
          {
            uint64_t result = 0;
            unsigned int v12 = a1[1];
            if (v12 >= 6 && v6 <= v12)
            {
              uint64_t result = iAP2MsgInitWithSom(a3, v7, bswap32(*((unsigned __int16 *)v8 + 2)) >> 16, (uint64_t)v8, v12, 0, 0);
              *(unsigned char *)(*(void *)(result + 24) + 2) = v9;
              *(unsigned char *)(*(void *)(result + 24) + 3) = v10;
              *(void *)(result + 32) += (int)(v6 - 6);
            }
            goto LABEL_23;
          }
        }
        return 0;
      }
    }
  }
  uint64_t result = 0;
LABEL_23:
  *a1 = 0;
  return result;
}

uint64_t iap2_externalaccessory_statusEASessionHandler(uint64_t *a1, uint64_t a2)
{
  id v2 = 0;
  int v43 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = a1;
    if (iAP2MsgGetMsgID(a2) == 59907)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        v40 = v4;
        int v41 = 0;
        int v42 = 0;
        LOWORD(v4) = 0;
        int v7 = 2;
        uint64_t v8 = &unk_100239000;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          if (ParamID == 1)
          {
            int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v43);
            if (v43)
            {
              int v39 = logObjectForModule_1(9);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                iap2_externalaccessory_statusEASessionHandler_cold_9(a2, v39);
              }
              return 0;
            }
            int v7 = DataAsU8;
            uint64_t v16 = v8[49];
            int v17 = gNumLogObjects;
            if (v16) {
              BOOL v18 = gNumLogObjects < 10;
            }
            else {
              BOOL v18 = 1;
            }
            if (v18)
            {
              int v24 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)__int16 v45 = v16;
                *(_WORD *)&v45[8] = 1024;
                int v46 = v17;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v24 = &_os_log_default;
              }
            }
            else
            {
              int v24 = *(NSObject **)(v16 + 72);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)__int16 v45 = v7;
              _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "eaSessinoIDStatus for SessionIDStatus = %d", buf, 8u);
            }
            int v42 = 1;
          }
          else
          {
            int v10 = ParamID;
            if (ParamID)
            {
              int v19 = v8;
              uint64_t v20 = v8[49];
              int v21 = gNumLogObjects;
              if (v20) {
                BOOL v22 = gNumLogObjects < 10;
              }
              else {
                BOOL v22 = 1;
              }
              if (v22)
              {
                __int16 v23 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)__int16 v45 = v20;
                  *(_WORD *)&v45[8] = 1024;
                  int v46 = v21;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  __int16 v23 = &_os_log_default;
                }
              }
              else
              {
                __int16 v23 = *(NSObject **)(v20 + 72);
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v45 = v10;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
              }
              uint64_t v8 = v19;
            }
            else
            {
              int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v43);
              if (v43)
              {
                uint32_t v38 = logObjectForModule_1(9);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                  iap2_externalaccessory_statusEASessionHandler_cold_8(a2, v38);
                }
                return 0;
              }
              LODWORD(v4) = DataAsU16;
              uint64_t v12 = v8[49];
              int v13 = gNumLogObjects;
              if (v12 && gNumLogObjects >= 10)
              {
                int v14 = *(NSObject **)(v12 + 72);
              }
              else
              {
                int v14 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)__int16 v45 = v12;
                  *(_WORD *)&v45[8] = 1024;
                  int v46 = v13;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  int v14 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v45 = v4;
                _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "eaSessionID for SessionIDStatus = %d", buf, 8u);
              }
              int v41 = 1;
            }
          }
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        }
        while (NextParam);
        if ((v41 & v42 & 1) == 0) {
          return 0;
        }
        uint64_t v25 = v8[49];
        if (v25 && gNumLogObjects >= 10)
        {
          int v26 = *(NSObject **)(v25 + 72);
        }
        else
        {
          int v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v45 = (unsigned __int16)v4;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = v7;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "SessionStatusMsg: eaSessionID %d, sessionStatus %d", buf, 0xEu);
        }
        if (v7 == 1)
        {
          id v29 = platform_externalAccessory_copyEndpointUUIDForEASessionID((unsigned __int16)v4);
          int v30 = _iap2_externalAccessory_removeEASessionStruct((uint64_t)v40, v29);
          if (v29) {
            CFRelease(v29);
          }
          if (v30) {
            _iAP2_closeEASession(v40, (unsigned __int16)v4);
          }
          id v2 = platform_externalAccessory_accessoryCloseExternalAccessorySession((unsigned __int16)v4);
          if ((v2 & 1) == 0)
          {
            uint64_t v31 = v8[49];
            if (v31 && gNumLogObjects >= 30)
            {
              unsigned int v32 = *(NSObject **)(v31 + 232);
            }
            else
            {
              unsigned int v32 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              iap2_externalaccessory_statusEASessionHandler_cold_5((unsigned __int16)v4, v32);
            }
          }
          uint64_t v36 = v8[49];
          if (v36 && gNumLogObjects >= 30)
          {
            uint64_t v37 = *(NSObject **)(v36 + 232);
          }
          else
          {
            uint64_t v37 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Close iAP2 EA Session based on accessory sending eiAP2ParamEA_SessionStatus_SessionStatusClosed", buf, 2u);
          }
          return (uint64_t)v2;
        }
        if (!v7)
        {
          uint64_t v27 = v8[49];
          if (v27 && gNumLogObjects >= 10)
          {
            BOOL v28 = *(NSObject **)(v27 + 72);
          }
          else
          {
            BOOL v28 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int16 v45 = (unsigned __int16)v4;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "SessionStatus OK for sessionID %d", buf, 8u);
          }
          return 1;
        }
        uint64_t v33 = v8[49];
        if (v33 && gNumLogObjects >= 10)
        {
          CFIndex v34 = *(NSObject **)(v33 + 72);
        }
        else
        {
          CFIndex v34 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          iap2_externalaccessory_statusEASessionHandler_cold_1();
        }
      }
    }
    return 0;
  }
  return (uint64_t)v2;
}

uint64_t _iap2_externalAccessory_removeEASessionStruct(uint64_t a1, const void *a2)
{
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  uint64_t Value = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, a2);
      if (Value)
      {
        CFDictionaryRemoveValue((CFMutableDictionaryRef)__gActiveEASessionStructs, a2);
        _iap2_externalAccessory_cleanupEASessionStruct((void *)Value);
        free((void *)Value);
        uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
        if (Feature) {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(Feature + 32), a2);
        }
        uint64_t Value = 1;
      }
    }
  }
  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  return Value;
}

uint64_t _iAP2_closeEASession(uint64_t *a1, unsigned int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 30;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v5 = *(NSObject **)(gLogObjects + 232);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    _iAP2_closeEASession_cold_6((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    if (a1) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_10:
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v12 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    uint64_t v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _iAP2_closeEASession_cold_4((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18);
  }
  if (!*a1) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 30)
  {
    int v19 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    int v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    _iAP2_closeEASession_cold_2((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  }
  if (!a1[1]) {
    return 0;
  }
  uint64_t v26 = iAP2MsgInit((uint64_t)(a1 + 15), 59905, a1[24], 0xFFFF, 0, 0);
  iAP2MsgAddU16Param(v26, 0, 0, a2);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v27 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    uint64_t v27 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v29[0] = 67109376;
    v29[1] = a2;
    __int16 v30 = 1024;
    unsigned int v31 = a2;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "closing EA session for sessionID %d (0x%X)", (uint8_t *)v29, 0xEu);
  }
  return iap2_sessionControl_sendOutgoingMessage(a1, v26);
}

uint64_t iap2_externalAccessory_openEASession(uint64_t a1, const __CFDictionary *a2)
{
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionIDKey);
  int valuePtr = -1431655766;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  unsigned __int16 v5 = valuePtr;
  uint64_t v6 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x20uLL, 0x1060040DC31F451uLL);
  v6[1] = 0;
  *((void *)v6 + 1) = CFArrayCreateMutable(kCFAllocatorDefault, 8, &kCFTypeArrayCallBacks);
  *((void *)v6 + 2) = CFArrayCreateMutable(kCFAllocatorDefault, 8, &kCFTypeArrayCallBacks);
  unsigned __int16 *v6 = v5;
  v6[2] = iap2_endpoint_getMaxSendPayloadSize(a1);
  unsigned int v7 = 0;
  *((void *)v6 + 3) = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(a1 + 8));
  do
  {
    CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v6[2]);
    CFArrayAppendValue(*((CFMutableArrayRef *)v6 + 1), Mutable);
    CFRelease(Mutable);
  }
  while (v7++ < 7);
  CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  CFDictionarySetValue((CFMutableDictionaryRef)__gActiveEASessionStructs, v10, v6);
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Feature + 32), v10, v6);
  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, v10);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v13 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    uint64_t v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    iap2_externalAccessory_openEASession_cold_3();
  }
  uint64_t v14 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  uint64_t v15 = malloc_type_malloc(0xFFFFuLL, 0x4367D058uLL);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v16 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    uint64_t v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      CFStringRef v17 = *(const __CFString **)(a1 + 8);
    }
    else {
      CFStringRef v17 = @"Null";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)uint64_t v25 = "iap2_externalAccessory_openEASession";
    *(_WORD *)&v25[8] = 1024;
    *(_DWORD *)uint64_t v26 = 1294;
    *(_WORD *)&v26[4] = 2112;
    CFStringRef v27 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _iap2_externalAccessory_openEASessionSent endpointUUID: %@", buf, 0x1Cu);
  }
  uint64_t v18 = iAP2MsgInit((uint64_t)v14, 59904, (uint64_t)v15, 0xFFFF, (uint64_t)_iap2_externalAccessory_openEASessionSent, (uint64_t)MutableCopy);
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessoryProtocolIndexKey);
  unsigned __int8 v22 = -86;
  CFNumberGetValue(v19, kCFNumberCharType, &v22);
  iAP2MsgAddU8Param(v18, 0, 0, v22);
  iAP2MsgAddU16Param(v18, 0, 1, (unsigned __int16)valuePtr);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v20 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    uint64_t v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)uint64_t v25 = v22;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = valuePtr;
    *(_WORD *)uint64_t v26 = 1024;
    *(_DWORD *)&v26[2] = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "opening EA session for protocol %d with sessionID %d (0x%X)", buf, 0x14u);
  }
  return iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK((uint64_t *)a1, v18);
}

void _iap2_externalAccessory_openEASessionSent(uint64_t a1, int a2)
{
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  if (a1 && (BOOL v4 = *(const void **)(a1 + 48)) != 0)
  {
    CFNumberRef Value = (unsigned __int16 *)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, *(const void **)(a1 + 48));
    if (Value)
    {
      uint64_t v6 = Value;
      *((unsigned char *)Value + 2) = 1;
      if (gLogObjects && gNumLogObjects >= 30)
      {
        unsigned int v7 = *(NSObject **)(gLogObjects + 232);
      }
      else
      {
        unsigned int v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *v6;
        v11[0] = 67109378;
        v11[1] = v9;
        __int16 v12 = 2112;
        uint64_t v13 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Open EA Session Sent for sessionID %d, UUID %@, start incoming data notifications", (uint8_t *)v11, 0x12u);
      }
      platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID((uint64_t)v4);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 30)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 232);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _iap2_externalAccessory_openEASessionSent_cold_1();
      }
    }
    pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
    CFRelease(v4);
  }
  else
  {
    pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  }
  *(void *)(a1 + 48) = 0;
  if (a2)
  {
    CFStringRef v10 = *(void **)(a1 + 24);
    if (v10)
    {
      free(v10);
      *(void *)(a1 + 24) = 0;
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t iap2_externalAccessory_closeEASession(uint64_t *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xAu);
    if (Feature)
    {
      uint64_t v6 = Feature;
      unsigned int v7 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(Feature + 24), Value);
      if (v7)
      {
        uint64_t v8 = v7;
        CFDictionaryRemoveValue((CFMutableDictionaryRef)_gActiveEASessions, Value);
        CFDictionaryRemoveAllValues(v8);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 24), Value);
      }
    }
  }
  if (_iap2_externalAccessory_removeEASessionStruct((uint64_t)a1, Value))
  {
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionIDKey);
    int valuePtr = -1431655766;
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    return _iAP2_closeEASession(a1, (unsigned __int16)valuePtr);
  }
  else
  {
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 30;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      __int16 v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      __int16 v12 = *(NSObject **)(gLogObjects + 232);
    }
    uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      iap2_externalAccessory_closeEASession_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t iap2_externalAccessory_outgoingEADataAvailable(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1 || !*(void *)(a1 + 32) || !iap2_endpoint_isInitialized(a1)) {
    goto LABEL_49;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
LABEL_49:
    uint64_t v9 = 0;
    goto LABEL_74;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  if (!v5) {
    goto LABEL_49;
  }
  CFNumberRef Value = CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  unsigned int v7 = (unsigned __int16 *)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, Value);
  if (!v7) {
    goto LABEL_49;
  }
  uint64_t v8 = v7;
  uint64_t v9 = 1;
  *((unsigned char *)v7 + 3) = 1;
  if (Value) {
    BOOL v10 = *((unsigned char *)v7 + 2) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*((void *)v7 + 2))
    {
      do
      {
        CFArrayRef v11 = (const __CFArray *)*((void *)v8 + 1);
        if (!v11) {
          break;
        }
        if (CFArrayGetCount(v11) < 1) {
          break;
        }
        CFNumberRef ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 1), 0);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t v13 = ValueAtIndex;
        CFDataSetLength(ValueAtIndex, v8[2]);
        v52.length = v8[2];
        v52.location = 0;
        CFDataReplaceBytes(v13, v52, 0, 0);
        CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 2), v13);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v8 + 1), 0);
        id MutableEADataFromAppForSessionUUID = platform_externalAccessory_retrieveMutableEADataFromAppForSessionUUID((uint64_t)Value, v8[2]);
        if (!MutableEADataFromAppForSessionUUID)
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            int v35 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            int v35 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            int v36 = *v8;
            *(_DWORD *)buf = 67109120;
            LODWORD(v49) = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Replacing buffers after failed read from app for sessionID %d", buf, 8u);
          }
          CFArrayRef v37 = (const __CFArray *)*((void *)v8 + 2);
          if (v37)
          {
            if (*((void *)v8 + 1))
            {
              CFIndex v38 = CFArrayGetCount(v37) - 1;
              int v39 = CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 2), v38);
              if (v39)
              {
                CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 1), v39);
                CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v8 + 2), v38);
              }
            }
          }
          *((unsigned char *)v8 + 3) = 0;
          goto LABEL_63;
        }
        uint64_t v15 = MutableEADataFromAppForSessionUUID;
        uint64_t v16 = *(void *)(a1 + 32);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 24);
          if (v17)
          {
            CFRetain(Value);
            CFRetain(v15);
            unsigned int SessionForService = iAP2LinkGetSessionForService(v17, 2);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr((CFMutableDataRef)v15);
            *(_WORD *)MutableBytePtr = bswap32(*v8) >> 16;
            unsigned int Length = CFDataGetLength((CFDataRef)v15);
            BOOL v21 = iAP2LinkQueueSendData(v17, MutableBytePtr, Length, SessionForService, (uint64_t)Value, (uint64_t)_iap2_externalAccessory_eaDataQueuedCB, 0, 0);
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v24 = gNumLogObjects <= 29;
            }
            else {
              BOOL v24 = 1;
            }
            int v25 = !v24;
            if (v21)
            {
              if (v25)
              {
                uint64_t v26 = *(NSObject **)(gLogObjects + 232);
              }
              else
              {
                uint64_t v26 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v49 = v22;
                  __int16 v50 = 1024;
                  int v51 = v23;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  uint64_t v26 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              {
                CFIndex v28 = CFDataGetLength((CFDataRef)v15);
                int v29 = *v8;
                *(_DWORD *)buf = 134218240;
                uint64_t v49 = v28 - 2;
                __int16 v50 = 1024;
                int v51 = v29;
                _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "queued %lu ea bytes for eaSession %d", buf, 0x12u);
              }
            }
            else
            {
              if (v25)
              {
                CFStringRef v27 = *(NSObject **)(gLogObjects + 232);
              }
              else
              {
                CFStringRef v27 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v49 = v22;
                  __int16 v50 = 1024;
                  int v51 = v23;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  CFStringRef v27 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                CFIndex v33 = CFDataGetLength((CFDataRef)v15);
                int v34 = *v8;
                *(_DWORD *)buf = 134218240;
                uint64_t v49 = v33 - 2;
                __int16 v50 = 1024;
                int v51 = v34;
                _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Unable to queue %lu ea bytes for eaSession %d", buf, 0x12u);
              }
            }
            CFRelease(v15);
          }
        }
        if (CFDataGetLength((CFDataRef)v15) != v8[2])
        {
          *((unsigned char *)v8 + 3) = 0;
          CFRelease(v15);
          goto LABEL_63;
        }
        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 30)
        {
          unsigned int v32 = *(NSObject **)(gLogObjects + 232);
        }
        else
        {
          unsigned int v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v49 = v30;
            __int16 v50 = 1024;
            int v51 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            unsigned int v32 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          iap2_externalAccessory_outgoingEADataAvailable_cold_4(&v46, v47);
        }
        CFRelease(v15);
      }
      while (*((void *)v8 + 2));
    }
    if (gLogObjects) {
      BOOL v43 = gNumLogObjects < 10;
    }
    else {
      BOOL v43 = 1;
    }
    if (v43)
    {
      uint64_t v44 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v44 = *(NSObject **)(gLogObjects + 72);
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      int v45 = *v8;
      *(_DWORD *)buf = 67109120;
      LODWORD(v49) = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "No available data buffer for EA Session ID %d", buf, 8u);
    }
LABEL_63:
    CFArrayRef v40 = (const __CFArray *)*((void *)v8 + 1);
    if (!v40 || CFArrayGetCount(v40) <= 0)
    {
      if (gLogObjects && gNumLogObjects >= 30)
      {
        int v41 = *(NSObject **)(gLogObjects + 232);
      }
      else
      {
        int v41 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v49 = (uint64_t)Value;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "free buffers are not remaining for eaSessionUUID %@, stop notifications", buf, 0xCu);
      }
      platform_externalAccessory_stopIncomingDataNotificationsForEASessionUUID((uint64_t)Value);
    }
    uint64_t v9 = 1;
  }
LABEL_74:
  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  return v9;
}

uint64_t iap2_externalAccessory_sendOutgoingEAData(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2 & 1;
  }
  if (!*(void *)(a1 + 32)
    || !iap2_endpoint_isInitialized(a1)
    || (uint64_t v4 = *(void *)(v2 + 32)) == 0
    || (uint64_t v5 = *(void *)(v4 + 24)) == 0)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  uint64_t v6 = (const void *)kCFACCExternalAccessorySessionIDKey;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionIDKey);
  unsigned __int16 valuePtr = -21846;
  CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
  uint64_t v8 = (const void *)kCFACCExternalAccessorySessionDataKey;
  CFDataRef v9 = (const __CFData *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionDataKey);
  unint64_t Length = CFDataGetLength(v9);
  BOOL v10 = (const void *)kCFACCExternalAccessorySessionUUIDKey;
  CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v11);
  unsigned int SessionForService = iAP2LinkGetSessionForService(v5, 2);
  if (v11) {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v11);
  }
  uint64_t Feature = iap2_feature_getFeature(v2, 0xAu);
  uint64_t v74 = v5;
  if (Feature && CFDictionaryGetValue(*(CFDictionaryRef *)(Feature + 24), Copy))
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 232);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      iap2_externalAccessory_sendOutgoingEAData_cold_8();
    }
  }
  else
  {
    *(_DWORD *)buf = valuePtr;
    uint64_t v15 = iap2_feature_getFeature(v2, 0xAu);
    uint64_t v16 = v2;
    if (v15)
    {
      uint64_t v17 = v15;
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
      CFDictionaryAddValue(Mutable, v6, v19);
      CFRelease(v19);
      CFStringRef v20 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(v16 + 8));
      CFDictionaryAddValue(Mutable, kCFACCExternalAccessoryProtocolEndpointUUIDKey, v20);
      CFRelease(v20);
      CFDictionaryAddValue(Mutable, v10, Copy);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v17 + 24), Copy, Mutable);
      CFDictionaryAddValue((CFMutableDictionaryRef)_gActiveEASessions, Copy, Mutable);
      CFRelease(Mutable);
    }
    uint64_t v2 = v16;
    uint64_t v5 = v74;
  }
  uint64_t v21 = iap2_feature_getFeature(v2, 0xAu);
  if (v21)
  {
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v21 + 24), Copy);
    if (v22)
    {
      CFDataRef v23 = (const __CFData *)CFDictionaryGetValue(v22, v8);
      if (v23)
      {
        if (CFDataGetLength(v23))
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            BOOL v24 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            BOOL v24 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
            iap2_externalAccessory_sendOutgoingEAData_cold_6();
          }
          _queueOutgoingDataForEASessionUUID(v2, Copy, v9);
          if (gLogObjects && gNumLogObjects >= 30)
          {
            __int16 v63 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            __int16 v63 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG)) {
            iap2_externalAccessory_sendOutgoingEAData_cold_4(&valuePtr, (uint64_t)v11, v63);
          }
          LOBYTE(v2) = 1;
LABEL_125:
          if (!Copy) {
            return v2 & 1;
          }
LABEL_126:
          CFRelease(Copy);
          return v2 & 1;
        }
      }
    }
  }
  uint64_t v25 = iap2_feature_getFeature(v2, 0xAu);
  CFStringRef cf = Copy;
  if (v25) {
    v71 = CFDictionaryGetValue(*(CFDictionaryRef *)(v25 + 24), v11);
  }
  else {
    v71 = 0;
  }
  size_t v26 = (unsigned __int16)(iap2_endpoint_getMaxSendPayloadSize(v2) - 2);
  if (Length % v26) {
    unint64_t v27 = Length / v26 + 1;
  }
  else {
    unint64_t v27 = Length / v26;
  }
  BytePtr = CFDataGetBytePtr(v9);
  if (!v27)
  {
    LOBYTE(v2) = 0;
    if (!Copy) {
      return v2 & 1;
    }
    goto LABEL_126;
  }
  uint64_t v66 = v2;
  uint64_t v28 = 0;
  LOBYTE(v2) = 0;
  unsigned __int16 v29 = 0;
  uint64_t v30 = 0;
  if (Length >= v26) {
    size_t v31 = v26;
  }
  else {
    size_t v31 = 0;
  }
  if (Length % v26) {
    size_t v31 = Length % v26;
  }
  size_t __n = v26;
  size_t v70 = v31;
  size_t v32 = (v31 + 2);
  size_t v33 = (v26 + 2);
  do
  {
    if (v27 - v28 < 2)
    {
      int v42 = (char *)malloc_type_calloc(1uLL, v32, 0x5FE1B306uLL);
      if (v42)
      {
        int v35 = v42;
        *(_WORD *)int v42 = bswap32(valuePtr) >> 16;
        memcpy(v42 + 2, &BytePtr[v30], v70);
        BOOL v43 = iAP2LinkQueueSendData(v5, v35, v32, SessionForService, (uint64_t)v71, (uint64_t)_eaDataQueuedCB, 0, 0);
        LOBYTE(v2) = v43;
        uint64_t v44 = gLogObjects;
        int v45 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v46 = gNumLogObjects <= 29;
        }
        else {
          BOOL v46 = 1;
        }
        int v47 = !v46;
        if (v43)
        {
          if (v47)
          {
            int v48 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            int v48 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&long long v81 = v44;
              WORD4(v81) = 1024;
              *(_DWORD *)((char *)&v81 + 10) = v45;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            LODWORD(v81) = v70;
            WORD2(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 6) = v29;
            WORD5(v81) = 1024;
            HIDWORD(v81) = valuePtr;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "queued %d ea bytes for LAST packet %d, eaSession %d", buf, 0x14u);
          }
          v30 += v70;
          goto LABEL_101;
        }
        if (v47)
        {
          int v56 = *(NSObject **)(gLogObjects + 232);
        }
        else
        {
          int v56 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&long long v81 = v44;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v45;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 67109632;
        LODWORD(v81) = v70;
        WORD2(v81) = 1024;
        *(_DWORD *)((char *)&v81 + 6) = v29;
        WORD5(v81) = 1024;
        HIDWORD(v81) = valuePtr;
        int v60 = v56;
        __int16 v61 = "unable to queue %d ea bytes for LAST packet %d, eaSession %d";
        goto LABEL_106;
      }
      uint64_t v52 = gLogObjects;
      int v53 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v54 = gNumLogObjects < 30;
      }
      else {
        BOOL v54 = 1;
      }
      if (v54)
      {
        int v58 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&long long v81 = v52;
          WORD4(v81) = 1024;
          *(_DWORD *)((char *)&v81 + 10) = v53;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      else
      {
        int v58 = *(NSObject **)(gLogObjects + 232);
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        iap2_externalAccessory_sendOutgoingEAData_cold_2(&v75, v76);
      }
    }
    else
    {
      int v34 = (char *)malloc_type_calloc(1uLL, v33, 0x211BD654uLL);
      if (v34)
      {
        int v35 = v34;
        *(_WORD *)int v34 = bswap32(valuePtr) >> 16;
        memcpy(v34 + 2, &BytePtr[v30], __n);
        BOOL v36 = iAP2LinkQueueSendData(v5, v35, v33, SessionForService, (uint64_t)v71, (uint64_t)_eaDataQueuedCB, 0, 0);
        LOBYTE(v2) = v36;
        uint64_t v37 = gLogObjects;
        int v38 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v39 = gNumLogObjects <= 29;
        }
        else {
          BOOL v39 = 1;
        }
        int v40 = !v39;
        if (v36)
        {
          if (v40)
          {
            int v41 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            int v41 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&long long v81 = v37;
              WORD4(v81) = 1024;
              *(_DWORD *)((char *)&v81 + 10) = v38;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109632;
            LODWORD(v81) = __n;
            WORD2(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 6) = v29;
            WORD5(v81) = 1024;
            HIDWORD(v81) = valuePtr;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "queued %d ea bytes for packet %d, eaSession %d", buf, 0x14u);
          }
          v30 += __n;
          goto LABEL_101;
        }
        if (v40)
        {
          __int16 v55 = *(NSObject **)(gLogObjects + 232);
        }
        else
        {
          __int16 v55 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&long long v81 = v37;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v38;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 67109632;
        LODWORD(v81) = __n;
        WORD2(v81) = 1024;
        *(_DWORD *)((char *)&v81 + 6) = v29;
        WORD5(v81) = 1024;
        HIDWORD(v81) = valuePtr;
        int v60 = v55;
        __int16 v61 = "Unable to queue %d ea bytes for packet %d, eaSession %d";
LABEL_106:
        _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, v61, buf, 0x14u);
LABEL_101:
        uint64_t v5 = v74;
        char v59 = v2 ^ 1;
        free(v35);
        goto LABEL_102;
      }
      uint64_t v49 = gLogObjects;
      int v50 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v51 = gNumLogObjects < 30;
      }
      else {
        BOOL v51 = 1;
      }
      if (v51)
      {
        __int16 v57 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&long long v81 = v49;
          WORD4(v81) = 1024;
          *(_DWORD *)((char *)&v81 + 10) = v50;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      else
      {
        __int16 v57 = *(NSObject **)(gLogObjects + 232);
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        iap2_externalAccessory_sendOutgoingEAData_cold_2(&v77, v78);
      }
    }
    char v59 = 0;
LABEL_102:
    if (v27 <= ++v29) {
      break;
    }
    uint64_t v28 = v29;
  }
  while ((v59 & 1) == 0);
  CFStringRef Copy = cf;
  if ((v59 & 1) == 0) {
    goto LABEL_125;
  }
  if (gLogObjects && gNumLogObjects >= 30)
  {
    unsigned int v62 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    unsigned int v62 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109888;
    LODWORD(v81) = valuePtr;
    WORD2(v81) = 2048;
    *(void *)((char *)&v81 + 6) = v30;
    HIWORD(v81) = 1024;
    int v82 = Length - v30;
    __int16 v83 = 1024;
    int v84 = Length;
    _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "Queue overrun encountered for eaSession %d. byteCounter = %llu, remainingBytes = %d, originalLen was %d", buf, 0x1Eu);
  }
  CFDataRef v65 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, &BytePtr[v30], (Length - v30), kCFAllocatorNull);
  _queueOutgoingDataForEASessionUUID(v66, cf, v65);
  CFRelease(v65);
  if (cf) {
    goto LABEL_126;
  }
  return v2 & 1;
}

void _queueOutgoingDataForEASessionUUID(uint64_t a1, const void *a2, const __CFData *a3)
{
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
    if (Feature)
    {
      uint64_t v6 = Feature;
      unsigned int Length = CFDataGetLength(a3);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 24), a2);
      if (Value)
      {
        CFDataRef v9 = Value;
        BOOL v10 = (const void *)kCFACCExternalAccessorySessionDataKey;
        CFMutableDataRef Mutable = (__CFData *)CFDictionaryGetValue(Value, kCFACCExternalAccessorySessionDataKey);
        if (Mutable
          || (CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0),
              CFDictionaryAddValue(v9, v10, Mutable),
              CFRelease(Mutable),
              Mutable))
        {
          if (CFDataGetLength(Mutable) + Length > 0x500000)
          {
            if (gLogObjects && gNumLogObjects >= 30)
            {
              uint64_t v14 = *(NSObject **)(gLogObjects + 232);
            }
            else
            {
              uint64_t v14 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              _queueOutgoingDataForEASessionUUID_cold_3();
            }
          }
          else
          {
            BytePtr = CFDataGetBytePtr(a3);
            CFDataAppendBytes(Mutable, BytePtr, Length);
            if (gLogObjects && gNumLogObjects >= 30)
            {
              uint64_t v13 = *(NSObject **)(gLogObjects + 232);
            }
            else
            {
              uint64_t v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
              _queueOutgoingDataForEASessionUUID_cold_1(Length, v13);
            }
          }
        }
      }
    }
  }
}

void _eaDataQueuedCB(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
    if (Value && CFDictionaryContainsKey((CFDictionaryRef)_gActiveEASessions, Value))
    {
      uint64_t v4 = (const void *)kCFACCExternalAccessorySessionDataKey;
      CFDataRef v5 = (const __CFData *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionDataKey);
      if (v5)
      {
        if (CFDataGetLength(v5))
        {
          uint64_t v6 = CFDictionaryGetValue(theDict, kCFACCExternalAccessoryProtocolEndpointUUIDKey);
          if (gLogObjects && gNumLogObjects >= 30)
          {
            unsigned int v7 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            unsigned int v7 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
            _eaDataQueuedCB_cold_14();
          }
          EndpointWithUUID = acc_manager_getEndpointWithUUID(v6);
          if (EndpointWithUUID)
          {
            uint64_t v12 = EndpointWithUUID[7];
            uint64_t v13 = *(void *)(v12 + 32);
            if (v13)
            {
              uint64_t v14 = *(void *)(v13 + 24);
              if (v14)
              {
                unsigned int SessionForService = iAP2LinkGetSessionForService(*(void *)(v13 + 24), 2);
                CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionIDKey);
                if (v16)
                {
                  unsigned __int16 valuePtr = -21846;
                  CFNumberGetValue(v16, kCFNumberSInt16Type, &valuePtr);
                  CFDataRef v17 = (const __CFData *)CFDictionaryGetValue(theDict, v4);
                  if (v17)
                  {
                    CFDataRef v18 = v17;
                    unint64_t Length = CFDataGetLength(v17);
                    unsigned __int16 v20 = iap2_endpoint_getMaxSendPayloadSize(v12) - 2;
                    if (Length <= v20) {
                      unsigned __int16 v21 = Length;
                    }
                    else {
                      unsigned __int16 v21 = v20;
                    }
                    BytePtr = CFDataGetBytePtr(v18);
                    unsigned int v23 = v21 + 2;
                    BOOL v24 = (char *)malloc_type_calloc(1uLL, v23, 0xCC2A5FE7uLL);
                    if (v24)
                    {
                      uint64_t v25 = v24;
                      *(_WORD *)BOOL v24 = bswap32(valuePtr) >> 16;
                      memcpy(v24 + 2, BytePtr, v21);
                      BOOL v26 = iAP2LinkQueueSendData(v14, v25, v23, SessionForService, (uint64_t)theDict, (uint64_t)_eaDataQueuedCB, 0, 0);
                      if (gLogObjects) {
                        BOOL v27 = gNumLogObjects <= 29;
                      }
                      else {
                        BOOL v27 = 1;
                      }
                      int v28 = !v27;
                      if (v26)
                      {
                        if (v28)
                        {
                          unsigned __int16 v29 = *(NSObject **)(gLogObjects + 232);
                        }
                        else
                        {
                          unsigned __int16 v29 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 67109376;
                          int v37 = v21;
                          __int16 v38 = 1024;
                          int v39 = valuePtr;
                          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "queued %d ea bytes for cached data in one packet, eaSession %d", buf, 0xEu);
                        }
                        if (gLogObjects && gNumLogObjects >= 30)
                        {
                          size_t v32 = *(NSObject **)(gLogObjects + 232);
                        }
                        else
                        {
                          size_t v32 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
                          _eaDataQueuedCB_cold_9(v21, v32);
                        }
                        v40.location = 0;
                        v40.length = v21;
                        CFDataDeleteBytes(v18, v40);
                        int v33 = CFDataGetLength(v18);
                        if (gLogObjects && gNumLogObjects >= 30)
                        {
                          int v34 = *(NSObject **)(gLogObjects + 232);
                        }
                        else
                        {
                          int v34 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                          _eaDataQueuedCB_cold_7(v33, Length, v34);
                        }
                      }
                      else
                      {
                        if (v28)
                        {
                          size_t v31 = *(NSObject **)(gLogObjects + 232);
                        }
                        else
                        {
                          size_t v31 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                          _eaDataQueuedCB_cold_12();
                        }
                      }
                      free(v25);
                    }
                    else
                    {
                      if (gLogObjects && gNumLogObjects >= 30)
                      {
                        uint64_t v30 = *(NSObject **)(gLogObjects + 232);
                      }
                      else
                      {
                        uint64_t v30 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                        _eaDataQueuedCB_cold_5();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 30)
        {
          BOOL v10 = *(NSObject **)(gLogObjects + 232);
        }
        else
        {
          BOOL v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          _eaDataQueuedCB_cold_3();
        }
      }
    }
    else
    {
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 30;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        CFDataRef v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        CFDataRef v9 = *(NSObject **)(gLogObjects + 232);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _eaDataQueuedCB_cold_1();
      }
    }
  }
}

void *_createEAFeature(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = malloc_type_calloc(1uLL, 0x28uLL, 0x600409743DB05uLL);
  uint64_t v2 = v1;
  if (v1)
  {
    v1[4] = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    if (_createEAFeature_onceToken != -1) {
      dispatch_once(&_createEAFeature_onceToken, &__block_literal_global_20);
    }
  }
  return v2;
}

uint64_t _destroyEAFeature(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (void **)result;
    uint64_t v3 = *(void *)result;
    if (*(void *)result)
    {
      platform_externalAccessory_removeEAASessionCountForConnection(*(void *)(a2 + 16));
      if (*(void *)v3)
      {
        CFRelease(*(CFTypeRef *)v3);
        *(void *)uint64_t v3 = 0;
      }
      CFArrayRef v4 = *(const __CFArray **)(v3 + 8);
      if (v4)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          for (CFIndex i = 0; i != v6; ++i)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 8), i);
            CFDataRef v9 = (const void *)ValueAtIndex[1];
            if (v9) {
              CFRelease(v9);
            }
            free(ValueAtIndex);
          }
        }
        BOOL v10 = *(const void **)(v3 + 8);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(v3 + 8) = 0;
        }
      }
      CFStringRef v11 = *(__CFDictionary **)(v3 + 16);
      if (v11)
      {
        CFDictionaryRemoveAllValues(v11);
        uint64_t v12 = *(const void **)(v3 + 16);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(v3 + 16) = 0;
        }
      }
      CFDictionaryRef v13 = *(const __CFDictionary **)(v3 + 24);
      if (v13)
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_deactiveEASession, 0);
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 24));
        uint64_t v14 = *(const void **)(v3 + 24);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(v3 + 24) = 0;
        }
      }
      pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
      CFDictionaryRef v15 = *(const __CFDictionary **)(v3 + 32);
      if (v15)
      {
        CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_deactiveEASessionStruct, 0);
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 32));
        CFNumberRef v16 = *(const void **)(v3 + 32);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v3 + 32) = 0;
        }
      }
      pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
      if (*v2)
      {
        free(*v2);
        *uint64_t v2 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkEAIdentificationInfo(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  char v18 = 0;
  uint64_t v3 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkEAIdentificationInfo_kMsgExternalAccessoryList, 3u, &v18);
  if (v18) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (!Feature)
    {
      iap2_features_createFeature(a1, 0xAu);
      uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
    }
    CFArrayRef v12 = *(const __CFArray **)(Feature + 8);
    if (!v12 || !CFArrayGetCount(v12))
    {
      uint64_t v14 = 0;
      uint64_t v5 = 14;
      do
      {
        iap2_identification_rejectMsgID(a1, *(unsigned __int16 *)((char *)&_checkEAIdentificationInfo_kMsgExternalAccessoryList + v14), *(_DWORD *)((char *)&_checkEAIdentificationInfo_kMsgExternalAccessoryList + v14 + 4), 0xEu);
        v14 += 12;
      }
      while (v14 != 36);
      goto LABEL_30;
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3;
    if (v18) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = Feature == 0;
    }
    if (!v6)
    {
      CFArrayRef v7 = *(const __CFArray **)(Feature + 8);
      if (v7)
      {
        if (CFArrayGetCount(v7) >= 1)
        {
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(Feature + 8));
          if (Count >= 1)
          {
            CFIndex v9 = Count;
            for (CFIndex i = 0; i != v9; ++i)
            {
              CFNumberRef ValueAtIndex = (unsigned __int16 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(Feature + 8), i);
              if (!*((unsigned char *)ValueAtIndex + 22) && (*((_DWORD *)ValueAtIndex + 4) - 3) >= 2)
              {
                uint64_t v5 = 11;
                iap2_identification_addRejectGroup(a1, 10, *ValueAtIndex, 0xBu);
              }
            }
          }
        }
      }
    }
  }
  if (v18 && !v5)
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      CFDictionaryRef v13 = *(NSObject **)(gLogObjects + 232);
    }
    else
    {
      CFDictionaryRef v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Successfully identified for iAP2 ExternalAccessory", buf, 2u);
    }
    iap2_identification_setIdentifiedForFeature(a1, 0xAu);
    return 0;
  }
LABEL_30:
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects < 30;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    CFNumberRef v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    CFNumberRef v16 = *(NSObject **)(gLogObjects + 232);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to identify for iAP2 EA, rejectReason = %d", buf, 8u);
  }
  return v5;
}

void _handleIdentificationRejection_2(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  if (Feature)
  {
    uint64_t v2 = Feature;
    uint64_t v3 = *(__CFDictionary **)(Feature + 16);
    if (v3) {
      CFDictionaryRemoveAllValues(v3);
    }
    CFArrayRef v4 = *(const __CFArray **)(v2 + 8);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 8), i);
          CFIndex v9 = (const void *)ValueAtIndex[1];
          if (v9) {
            CFRelease(v9);
          }
          free(ValueAtIndex);
        }
      }
      BOOL v10 = *(const void **)(v2 + 8);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v2 + 8) = 0;
      }
    }
    if (*(void *)v2)
    {
      CFRelease(*(CFTypeRef *)v2);
      *(void *)uint64_t v2 = 0;
    }
  }
}

void ___createEAFeature_block_invoke(id a1)
{
  _gActiveEASessions = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __gActiveEASessionStructs = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
}

void _CFDictionaryApplierFunction_deactiveEASession(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 30;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      CFArrayRef v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFArrayRef v4 = *(NSObject **)(gLogObjects + 232);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_deactiveEASession_cold_1();
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)_gActiveEASessions, Value);
  }
}

void _CFDictionaryApplierFunction_deactiveEASessionStruct(const void *a1, void *a2)
{
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 30;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 232);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      CFArrayRef v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2: removing iAP2ExternalAccessory_Session_t eaSessionUUID %@ from global list", (uint8_t *)&v6, 0xCu);
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)__gActiveEASessionStructs, a1);
    _iap2_externalAccessory_cleanupEASessionStruct(a2);
    free(a2);
  }
}

void _iap2_externalAccessory_cleanupEASessionStruct(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    a1[3] = 0;
    BOOL v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    a1[1] = 0;
    BOOL v4 = (const void *)a1[2];
    if (v4) {
      CFRelease(v4);
    }
    a1[2] = 0;
  }
}

BOOL _parseIdentificationSupportedEAProtocol(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v54 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3) != 10)
  {
    BOOL v26 = 0;
    unsigned int v15 = 17;
LABEL_108:
    iap2_identification_addRejectParam(a1, 10, v15);
    return !v26;
  }
  unsigned __int8 valuePtr = 0;
  iap2_features_createFeature(a1, 0xAu);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  CFArrayRef v7 = (void *)&unk_100239000;
  BOOL v8 = (_DWORD *)&unk_100239000;
  if (!FirstParam)
  {
    CFStringRef v27 = 0;
    unsigned int v15 = 17;
    goto LABEL_40;
  }
  CFIndex v9 = (unsigned __int16 *)FirstParam;
  uint64_t v48 = a1;
  uint64_t v52 = 0;
  BOOL v10 = 0;
  __int16 DataAsU16 = 0;
  CFStringRef v49 = 0;
  char v11 = 0;
  BOOL v12 = 0;
  char v13 = 0;
  BOOL v14 = 0;
  int v50 = 5;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)v9))
    {
      case 0u:
        if (!v10)
        {
          LOBYTE(v52) = iAP2MsgGetDataAsU8(v9, &v54);
          unsigned __int8 valuePtr = v52;
          BOOL v16 = v54 == 0;
          BOOL v10 = v54 == 0;
          goto LABEL_26;
        }
        unsigned int v15 = 5;
        BOOL v10 = 1;
        break;
      case 1u:
        if (v14)
        {
          unsigned int v15 = 5;
          BOOL v14 = 1;
        }
        else
        {
          DataAsString = iAP2MsgGetDataAsString(v9, (BOOL *)&v54);
          if (!v54)
          {
            CFStringRef v49 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
            BOOL v14 = v49 != 0;
            goto LABEL_30;
          }
          BOOL v14 = 0;
          unsigned int v15 = 15;
        }
        break;
      case 2u:
        if (v13)
        {
          unsigned int v15 = 5;
          char v13 = 1;
        }
        else
        {
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(v9, &v54);
          BOOL v19 = v54 == 0;
          int v50 = DataAsU8;
          BOOL v20 = DataAsU8 < 5;
          char v13 = v19 && v20;
          if (v19 && v20) {
            unsigned int v15 = 17;
          }
          else {
            unsigned int v15 = 15;
          }
        }
        break;
      case 3u:
        if (v12)
        {
          unsigned int v15 = 5;
          BOOL v12 = 1;
        }
        else
        {
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(v9, &v54);
          BOOL v16 = v54 == 0;
          BOOL v12 = v54 == 0;
          int v21 = HIDWORD(v52);
          if (!v54) {
            int v21 = 2;
          }
          HIDWORD(v52) = v21;
LABEL_26:
          if (v16) {
            unsigned int v15 = 17;
          }
          else {
            unsigned int v15 = 15;
          }
        }
        break;
      case 4u:
        if (v11) {
          unsigned int v15 = 5;
        }
        else {
          unsigned int v15 = 17;
        }
        char v11 = 1;
        break;
      default:
LABEL_30:
        unsigned int v15 = 17;
        break;
    }
    NextParam = iAP2MsgGetNextParam(a2, a3, v9);
    if (!NextParam) {
      break;
    }
    CFIndex v9 = NextParam;
  }
  while (v15 == 17);
  if (!v10 || !v14 || v15 != 17)
  {
    a1 = v48;
    CFStringRef v27 = v49;
    BOOL v8 = (int *)&unk_100239000;
    CFArrayRef v7 = &unk_100239000;
LABEL_40:
    int v54 = -1;
    uint64_t v28 = v7[49];
    if (v28 && v8[100] >= 30)
    {
      unsigned __int16 v29 = *(NSObject **)(v28 + 232);
    }
    else
    {
      unsigned __int16 v29 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Invalid EA Protocol param! (need to log more details later)", buf, 2u);
    }
    if (v27) {
      CFRelease(v27);
    }
    goto LABEL_107;
  }
  if (gLogObjects && gNumLogObjects >= 30)
  {
    unsigned int v23 = *(NSObject **)(gLogObjects + 232);
    CFStringRef v24 = v49;
    unsigned __int8 v25 = v52;
  }
  else
  {
    unsigned int v23 = &_os_log_default;
    CFStringRef v24 = v49;
    unsigned __int8 v25 = v52;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    CFStringRef v56 = v24;
    __int16 v57 = 1024;
    int v58 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Adding EA protocol %@, protocolID %d", buf, 0x12u);
  }
  uint64_t v30 = malloc_type_calloc(1uLL, 0x20uLL, 0x106004016586FA1uLL);
  if (!v30)
  {
    int v54 = -1;
    if (gLogObjects && gNumLogObjects >= 30)
    {
      __int16 v38 = *(NSObject **)(gLogObjects + 232);
      a1 = v48;
    }
    else
    {
      __int16 v38 = &_os_log_default;
      a1 = v48;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      _parseIdentificationSupportedEAProtocol_cold_2();
      if (!v24) {
        goto LABEL_106;
      }
    }
    else if (!v24)
    {
LABEL_106:
      unsigned int v15 = 17;
LABEL_107:
      BOOL v26 = v54;
      goto LABEL_108;
    }
    CFRelease(v24);
    goto LABEL_106;
  }
  size_t v31 = v30;
  *uint64_t v30 = v25;
  *((void *)v30 + 1) = v24;
  *((unsigned char *)v30 + 23) = v11 & 1;
  v30[10] = DataAsU16;
  *((unsigned char *)v30 + 22) = v12;
  *((_DWORD *)v30 + 6) = HIDWORD(v52);
  int v32 = v50;
  if ((v13 & 1) == 0) {
    int v32 = 1;
  }
  *((_DWORD *)v30 + 4) = v32;
  a1 = v48;
  uint64_t Feature = iap2_feature_getFeature(v48, 0xAu);
  if (!Feature)
  {
    int v54 = -1;
    if (gLogObjects && gNumLogObjects >= 30)
    {
      int v39 = *(NSObject **)(gLogObjects + 232);
    }
    else
    {
      int v39 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      _parseIdentificationSupportedEAProtocol_cold_4();
      if (!v24) {
        goto LABEL_105;
      }
    }
    else if (!v24)
    {
LABEL_105:
      free(v31);
      goto LABEL_106;
    }
    CFRelease(v24);
    goto LABEL_105;
  }
  uint64_t v34 = Feature;
  if (!*(void *)(Feature + 8)) {
    *(void *)(Feature + 8) = CFArrayCreateMutable(kCFAllocatorDefault, 1, 0);
  }
  if (!*(void *)(v34 + 24)) {
    *(void *)(v34 + 24) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  if (!*(void *)(v34 + 16)) {
    *(void *)(v34 + 16) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, 0);
  }
  if (!*(void *)(v34 + 32)) {
    *(void *)(v34 + 32) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, 0);
  }
  CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
  CFIndex CountOfKey = CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v34 + 16), v35);
  if (CountOfKey)
  {
    if (gLogObjects && gNumLogObjects >= 1)
    {
      int v37 = *(NSObject **)gLogObjects;
    }
    else
    {
      int v37 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationSupportedEAProtocol_cold_6(&valuePtr, v24, v37);
    }
    int v54 = -1;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v34 + 16));
    CFArrayRef v40 = *(const __CFArray **)(v34 + 8);
    if (v40)
    {
      CFIndex Count = CFArrayGetCount(v40);
      if (Count >= 1)
      {
        CFIndex v42 = Count;
        for (CFIndex i = 0; i != v42; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 8), i);
          int v45 = (const void *)ValueAtIndex[1];
          if (v45) {
            CFRelease(v45);
          }
          free(ValueAtIndex);
        }
      }
      BOOL v46 = *(const void **)(v34 + 8);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(v34 + 8) = 0;
      }
    }
    if (v24) {
      CFRelease(v24);
    }
    free(v31);
    unsigned int v15 = 17;
  }
  else
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v34 + 16), v35, v31);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v34 + 8), v31);
    unsigned int v15 = 0;
  }
  if (v35) {
    CFRelease(v35);
  }
  BOOL v26 = v54;
  if (CountOfKey) {
    goto LABEL_108;
  }
  return !v26;
}

BOOL _parseIdentificationPreferredBundleSeedID(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v16 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3) != 11)
  {
    BOOL v7 = 0;
    unsigned int v12 = 17;
LABEL_27:
    iap2_identification_addRejectParam(a1, 11, v12);
    return !v7;
  }
  CFStringRef v5 = iAP2MsgCopyDataAsCFString(a3, &v16);
  CFStringRef v6 = v5;
  BOOL v7 = v16;
  if (!v5 || v16)
  {
    unsigned int v12 = 10;
    if (!v5) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  iap2_features_createFeature(a1, 0xAu);
  uint64_t Feature = (const void **)iap2_feature_getFeature(a1, 0xAu);
  if (!Feature)
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      char v13 = *(NSObject **)(gLogObjects + 232);
    }
    else
    {
      char v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationPreferredBundleSeedID_cold_1();
    }
    unsigned int v12 = 17;
LABEL_26:
    CFRelease(v6);
    BOOL v7 = v16;
    goto LABEL_27;
  }
  CFIndex v9 = Feature;
  BOOL v10 = *Feature;
  if (v10) {
    CFRelease(v10);
  }
  *CFIndex v9 = v6;
  CFRetain(v6);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    char v11 = *(NSObject **)(gLogObjects + 232);
  }
  else
  {
    char v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v14 = *v9;
    *(_DWORD *)buf = 138412290;
    char v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "preferredAppBundleSeedID %@", buf, 0xCu);
  }
  CFRelease(v6);
  BOOL v7 = v16;
  return !v7;
}

uint64_t _iap2_externalAccessory_eaDataQueuedCB(uint64_t a1, const void *a2)
{
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  if (a2)
  {
    CFDictionaryRef Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, a2);
    if (Value)
    {
      BOOL v4 = Value;
      EndpointWithUUID = acc_manager_getEndpointWithUUID(Value[3]);
      if (EndpointWithUUID)
      {
        if (EndpointWithUUID[7])
        {
          CFArrayRef v6 = (const __CFArray *)v4[2];
          if (v6)
          {
            if (v4[1])
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
              CFArrayAppendValue((CFMutableArrayRef)v4[1], ValueAtIndex);
              CFArrayRemoveValueAtIndex((CFMutableArrayRef)v4[2], 0);
            }
          }
        }
        CFArrayRef v8 = (const __CFArray *)v4[1];
        if (v8 && CFArrayGetCount(v8) >= 1)
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            CFIndex v9 = *(NSObject **)(gLogObjects + 232);
          }
          else
          {
            CFIndex v9 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
            _iap2_externalAccessory_eaDataQueuedCB_cold_1();
          }
          platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID((uint64_t)a2);
        }
      }
    }
  }
  CFRelease(a2);
  return pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
}

void OUTLINED_FUNCTION_9_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

unsigned char *_createFeature_15(unsigned char *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
    if (result) {
      const char *result = 0;
    }
  }
  return result;
}

id _destroyFeature_15(void **a1, void *a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    if (*a2 && (uint64_t v5 = a2[1]) != 0 && *a1)
    {
      if ((platform_usb_set_mode_monitoring(v5, 0) & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          CFArrayRef v6 = *(NSObject **)(gLogObjects + 264);
        }
        else
        {
          CFArrayRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _destroyFeature_cold_3();
        }
      }
      id v2 = platform_usb_set_fault_monitoring(a2[1], 0);
      if ((v2 & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          BOOL v7 = *(NSObject **)(gLogObjects + 264);
        }
        else
        {
          BOOL v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          _destroyFeature_cold_1();
        }
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t _startFeatureFromDevice_10(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    if (!*(void *)result || !*(void *)(result + 8)) {
      return 0;
    }
    if (iap2_identification_isIdentifiedForOutgoingMessageID(result, 0x7E01u))
    {
      iAP2MsgInit((uint64_t)(v1 + 15), 32257, v1[24], 0xFFFF, 0, 0);
      if (!*v1)
      {
        int v3 = 0;
        return v3 != 0;
      }
      unsigned int mode = platform_usb_get_mode(v1[1]);
      if (mode)
      {
        int v3 = 0;
        if (mode != 1)
        {
LABEL_28:
          platform_usb_set_mode_monitoring(v1[1], 1);
          return v3 != 0;
        }
        __int16 v4 = 1;
      }
      else
      {
        __int16 v4 = 0;
      }
      iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0, v4);
      if (iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15)))
      {
        int v3 = 1;
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          CFArrayRef v6 = *(NSObject **)(gLogObjects + 264);
        }
        else
        {
          CFArrayRef v6 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _startFeatureFromDevice_cold_1();
        }
        int v3 = 0;
      }
      goto LABEL_28;
    }
    if (gLogObjects && gNumLogObjects >= 34)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      _startFeatureFromDevice_cold_3();
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_13(uint64_t *a1)
{
  char v26 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs((uint64_t)a1, (uint64_t)&_checkIdentificationInfo__kMsgUSBHostModeList, 3u, &v26);
  if (v2) {
    return v2;
  }
  if (!v26) {
    return 0;
  }
  if (!*a1
    || acc_endpoint_getTransportType(*a1) != 6
    && acc_endpoint_getTransportType(*a1)
    && acc_endpoint_getTransportType(*a1) != 7
    && acc_endpoint_getTransportType(*a1) != 1
    && acc_endpoint_getTransportType(*a1) != 5)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      char v13 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      char v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
    int TransportType = acc_endpoint_getTransportType(*a1);
    *(_DWORD *)buf = 67109120;
    LODWORD(v28) = TransportType;
    BOOL v16 = "Identified for USB Host Mode from non invalide connection (type=%d)";
    CFDataRef v17 = v13;
    uint32_t v18 = 8;
    goto LABEL_40;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)iap2_identification_transportComponents((uint64_t)a1);
  if (!v3 || (v4 = v3, (CFIndex Count = CFDictionaryGetCount(v3)) == 0))
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      BOOL v14 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      BOOL v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
    *(_WORD *)buf = 0;
    BOOL v16 = "Identified for USB Host Mode without identifying for a usbHost transportComponent";
    CFDataRef v17 = v14;
    uint32_t v18 = 2;
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v16, buf, v18);
LABEL_41:
    uint64_t v19 = 12;
    goto LABEL_43;
  }
  uint64_t v6 = Count;
  __chkstk_darwin(Count);
  CFArrayRef v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(v4, 0, (const void **)v8);
  if (v6 < 1)
  {
LABEL_42:
    uint64_t v19 = 12;
    goto LABEL_43;
  }
  unsigned int v23 = v25;
  *(void *)&long long v9 = 134218240;
  long long v22 = v9;
  while (1)
  {
    if (!*(void *)v8)
    {
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 34)
      {
        unsigned int v12 = *(NSObject **)(gLogObjects + 264);
      }
      else
      {
        unsigned int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v22;
          uint64_t v28 = v10;
          __int16 v29 = 1024;
          int v30 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          unsigned int v12 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _getEndpointSampleRates_cold_1(&v24, v23, v12);
      }
      goto LABEL_23;
    }
    if (*(_DWORD *)(*(void *)v8 + 20) == 2) {
      break;
    }
LABEL_23:
    v8 += 8;
    if (!--v6) {
      goto LABEL_42;
    }
  }
  iap2_features_createFeature((uint64_t)a1, 0x13u);
  iap2_identification_setIdentifiedForFeature((uint64_t)a1, 0x13u);
  uint64_t v19 = 0;
LABEL_43:
  if (v26)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      BOOL v20 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      BOOL v20 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      _checkIdentificationInfo_cold_1_3();
    }
  }
  return v19;
}

uint64_t iap2_usbHostMode_StartUSBHostModeHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    CFDictionaryRef v4 = *(NSObject **)(gLogObjects + 264);
  }
  else
  {
    CFDictionaryRef v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)long long v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "startUSBHostMode: %@", buf, 0xCu);
  }
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v6 = 0;
  if (a2 && a1[1])
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x13u);
    if (!Feature)
    {
      if (gLogObjects && gNumLogObjects >= 34)
      {
        uint32_t v18 = *(NSObject **)(gLogObjects + 264);
      }
      else
      {
        uint32_t v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        iap2_usbHostMode_StartUSBHostModeHandler_cold_1();
      }
      return 0;
    }
    CFArrayRef v8 = (unsigned char *)Feature;
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 2)
        {
          *CFArrayRef v8 = 1;
        }
        else
        {
          int v12 = ParamID;
          uint64_t v13 = gLogObjects;
          int v14 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 34)
          {
            unsigned int v15 = *(NSObject **)(gLogObjects + 264);
          }
          else
          {
            unsigned int v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v22 = v13;
              *(_WORD *)&v22[8] = 1024;
              int v23 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              unsigned int v15 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)long long v22 = v12;
            *(_WORD *)&v22[4] = 1024;
            *(_DWORD *)&v22[6] = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
    }
    if ((platform_usb_set_mode(a1[1], 1) & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 34)
      {
        uint64_t v19 = *(NSObject **)(gLogObjects + 264);
      }
      else
      {
        uint64_t v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        iap2_usbHostMode_StartUSBHostModeHandler_cold_5();
      }
      return 0;
    }
    if (*v8)
    {
      uint64_t v6 = 1;
      if ((platform_usb_set_fault_monitoring(a1[1], 1) & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          CFDataRef v17 = *(NSObject **)(gLogObjects + 264);
        }
        else
        {
          CFDataRef v17 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          iap2_usbHostMode_StartUSBHostModeHandler_cold_3();
        }
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return v6;
}

uint64_t iap2_usbHostMode_StopUSBHostModeHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    CFDictionaryRef v4 = *(NSObject **)(gLogObjects + 264);
  }
  else
  {
    CFDictionaryRef v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    int v13 = 138412290;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "stopUSBHostMode: %@", (uint8_t *)&v13, 0xCu);
  }
  if (!a1 || !*a1) {
    return 0;
  }
  id v6 = 0;
  if (!a2 || !a1[1]) {
    return (uint64_t)v6;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x13u);
  if (!Feature)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      uint64_t v10 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      uint64_t v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StartUSBHostModeHandler_cold_1();
    }
    return 0;
  }
  CFArrayRef v8 = (unsigned char *)Feature;
  if ((platform_usb_set_mode(a1[1], 0) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      int v11 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StopUSBHostModeHandler_cold_5();
    }
    return 0;
  }
  if (!*v8) {
    return 1;
  }
  id v6 = platform_usb_set_fault_monitoring(a1[1], 0);
  if ((v6 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      long long v9 = *(NSObject **)(gLogObjects + 264);
    }
    else
    {
      long long v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StopUSBHostModeHandler_cold_3();
    }
  }
  *CFArrayRef v8 = 0;
  return (uint64_t)v6;
}

CFNumberRef iap2_usbHostMode_USBModeChangeNotification(uint64_t *a1, const __CFDictionary *a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    CFDictionaryRef v4 = *(NSObject **)(gLogObjects + 264);
  }
  else
  {
    CFDictionaryRef v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    CFDictionaryRef v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "USBModeChangeNotification: %@ attributes=%@", buf, 0x16u);
  }
  CFNumberRef result = 0;
  if (a1)
  {
    if (a2)
    {
      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a2, @"USBMode");
      unsigned __int8 valuePtr = -1;
      if (result)
      {
        CFNumberRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberCharType, &valuePtr);
        if (result)
        {
          iAP2MsgInit((uint64_t)(a1 + 15), 32257, a1[24], 0xFFFF, 0, 0);
          if (gLogObjects && gNumLogObjects >= 34)
          {
            size_t v7 = *(NSObject **)(gLogObjects + 264);
          }
          else
          {
            size_t v7 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = a1[1];
            *(_DWORD *)buf = 138412546;
            uint64_t v13 = v8;
            __int16 v14 = 1024;
            LODWORD(v15) = valuePtr;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "USBModeChangeNotification: %@ usbMode=%d", buf, 0x12u);
          }
          if (valuePtr)
          {
            CFNumberRef result = 0;
            if (valuePtr != 1) {
              return result;
            }
            __int16 v9 = 1;
          }
          else
          {
            __int16 v9 = 0;
          }
          iAP2MsgAddVoidParam((uint64_t)(a1 + 15), 0, v9);
          if (iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15)))
          {
            return (const __CFNumber *)1;
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 34)
            {
              uint64_t v10 = *(NSObject **)(gLogObjects + 264);
            }
            else
            {
              uint64_t v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            CFNumberRef result = (const __CFNumber *)os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
            if (result)
            {
              iap2_usbHostMode_USBModeChangeNotification_cold_1();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _requestAppLaunchHandler(void *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  if (!*a1) {
    return 0;
  }
  if (!*(void *)*a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 2u);
  if (!Feature) {
    return 0;
  }
  BOOL v46 = (unsigned char *)Feature;
  if (gLogObjects && gNumLogObjects >= 29)
  {
    id v6 = *(NSObject **)(gLogObjects + 224);
  }
  else
  {
    id v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)int v54 = iAP2MsgGetMsgID(a2);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received Request App Launch message (0x%04X)!", buf, 8u);
  }
  int v47 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    int v48 = 0;
    __int16 v9 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v11 = gLogObjects;
      int v12 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v13 = gNumLogObjects < 29;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        __int16 v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)int v54 = v11;
          *(_WORD *)&v54[8] = 1024;
          int v55 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          __int16 v14 = &_os_log_default;
        }
      }
      else
      {
        __int16 v14 = *(NSObject **)(gLogObjects + 224);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v54 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }
      if (ParamID == 1)
      {
        *(_DWORD *)buf = -1431655766;
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          int v41 = logObjectForModule_1(28);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            _requestAppLaunchHandler_cold_4(a2);
          }
LABEL_82:
          uint64_t v2 = 0;
          if (v9) {
            goto LABEL_83;
          }
          return v2;
        }
        if (DataAsU8 <= 1) {
          unsigned int v16 = DataAsU8;
        }
        else {
          unsigned int v16 = 0;
        }
        int v48 = v16;
      }
      else if (ParamID)
      {
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v19 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          uint64_t v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v54 = v17;
            *(_WORD *)&v54[8] = 1024;
            int v55 = v18;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v19 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v54 = ParamID;
          *(_WORD *)&v54[4] = 1024;
          *(_DWORD *)&v54[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
      }
      else
      {
        *(_DWORD *)buf = -1431655766;
        if (v9) {
          CFRelease(v9);
        }
        __int16 v9 = (__CFString *)iAP2MsgCopyDataAsCFString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          int v39 = logObjectForModule_1(28);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_1(a2);
          }
          goto LABEL_82;
        }
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_45;
      }
    }
  }
  __int16 v9 = 0;
  int v48 = 0;
LABEL_45:
  if (gLogObjects && gNumLogObjects >= 29)
  {
    int v21 = *(NSObject **)(gLogObjects + 224);
    long long v22 = v47;
    int v23 = v48;
  }
  else
  {
    int v21 = &_os_log_default;
    long long v22 = v47;
    int v23 = v48;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)int v54 = v9;
    *(_WORD *)&v54[8] = 1024;
    int v55 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Request app launch for %@: %{coreacc:iAP2ParamID_RequestAppLaunch_AppLaunchMethod_t}d!", buf, 0x12u);
  }
  if (!v9)
  {
    BOOL v43 = logObjectForModule_1(28);
    uint64_t v2 = 0;
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
      return v2;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Missing AppBundleID - ignoring message", buf, 2u);
    return 0;
  }
  unsigned int v24 = platform_system_isApplicationInForeground(v9);
  char v25 = v24;
  if (v24)
  {
    if (gLogObjects && gNumLogObjects >= 29)
    {
      char v26 = *(NSObject **)(gLogObjects + 224);
    }
    else
    {
      char v26 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    int v23 = 1;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)int v54 = v9;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Application already in foreground (%@), launching without dialog...", buf, 0xCu);
    }
  }
  else if (!v23)
  {
    if (*v46)
    {
      uint64_t v44 = logObjectForModule_1(28);
      uint64_t v2 = 1;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        uint64_t v45 = v22[1];
        *(_DWORD *)buf = 138412290;
        *(void *)int v54 = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "App Launch dialog is already active, ignoring app launch request for endpoint %@...", buf, 0xCu);
      }
      goto LABEL_83;
    }
    int v23 = 0;
    *BOOL v46 = 1;
  }
  CFArrayRef v27 = (const __CFArray *)platform_externalAccessory_copyEAProtocolsForEndpointUUID(v22[1]);
  if (v27)
  {
    CFArrayRef v28 = v27;
    CFIndex Count = CFArrayGetCount(v27);
    if (Count < 1)
    {
      BOOL v32 = 0;
    }
    else
    {
      CFIndex v30 = Count;
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, 0);
      BOOL v32 = 1;
      if (CFStringCompare(ValueAtIndex, @"com.apple.mfi.launch_notify_previous", 1uLL))
      {
        CFIndex v33 = 1;
        do
        {
          CFIndex v34 = v33;
          if (v30 == v33) {
            break;
          }
          CFStringRef v35 = (const __CFString *)CFArrayGetValueAtIndex(v28, v33);
          CFComparisonResult v36 = CFStringCompare(v35, @"com.apple.mfi.launch_notify_previous", 1uLL);
          CFIndex v33 = v34 + 1;
        }
        while (v36);
        BOOL v32 = v34 < v30;
      }
    }
    CFRelease(v28);
  }
  else
  {
    BOOL v32 = 0;
  }
  int v37 = (const void *)v22[1];
  if (!v37) {
    goto LABEL_82;
  }
  uint64_t v2 = (uint64_t)CFRetain(v37);
  if (v2)
  {
    CFRetain(v9);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___requestAppLaunchHandler_block_invoke;
    block[3] = &__block_descriptor_tmp_20_0;
    int v50 = v23;
    char v51 = v25;
    BOOL v52 = v32;
    block[4] = v9;
    block[5] = v2;
    block[6] = v22;
    dispatch_async(global_queue, block);
    uint64_t v2 = 1;
  }
LABEL_83:
  CFRelease(v9);
  return v2;
}

void ___requestAppLaunchHandler_block_invoke(uint64_t a1)
{
  if (platform_system_isAppInstalledWithBundleID(*(void *)(a1 + 32)))
  {
    if (*(_DWORD *)(a1 + 56) == 1)
    {
      unsigned int v2 = platform_system_isLockScreenUIDisplayed();
      if (v2) {
        BOOL v3 = *(unsigned char *)(a1 + 60) == 0;
      }
      else {
        BOOL v3 = 0;
      }
      if (gLogObjects && gNumLogObjects >= 29)
      {
        int v12 = *(NSObject **)(gLogObjects + 224);
      }
      else
      {
        int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        BOOL v13 = "NO";
        if (v3) {
          __int16 v14 = "YES";
        }
        else {
          __int16 v14 = "NO";
        }
        int v15 = *(unsigned __int8 *)(a1 + 60);
        if (v2) {
          unsigned int v16 = "YES";
        }
        else {
          unsigned int v16 = "NO";
        }
        *(_DWORD *)buf = 136315650;
        CFArrayRef v40 = v14;
        __int16 v41 = 2080;
        CFIndex v42 = v16;
        if (v15) {
          BOOL v13 = "YES";
        }
        __int16 v43 = 2080;
        uint64_t v44 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "launchToBackground: %s (lockScreenDisplayed: %s, alreadyInForeground: %s)", buf, 0x20u);
      }
      if (v3)
      {
        if (gLogObjects && gNumLogObjects >= 29)
        {
          uint64_t v17 = *(NSObject **)(gLogObjects + 224);
        }
        else
        {
          uint64_t v17 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v29 = *(const char **)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          CFArrayRef v40 = v29;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Launching application to background (without dialog): %@", buf, 0xCu);
        }
        platform_system_launchApplicationToBackground(*(void **)(a1 + 32));
      }
      else if (!*(unsigned char *)(a1 + 60))
      {
        if (gLogObjects && gNumLogObjects >= 29)
        {
          int v18 = *(NSObject **)(gLogObjects + 224);
        }
        else
        {
          int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          CFIndex v30 = *(const char **)(a1 + 32);
          int v31 = *(unsigned __int8 *)(a1 + 61);
          *(_DWORD *)buf = 138412546;
          CFArrayRef v40 = v30;
          __int16 v41 = 1024;
          LODWORD(v42) = v31;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Launching application to foreground (without dialog): %@: report primary app?: %{BOOL}d", buf, 0x12u);
        }
        platform_system_launchApplication(*(void **)(a1 + 32), *(unsigned char *)(a1 + 61));
      }
    }
    else
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
      if (EndpointWithUUID)
      {
        uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);
        id v6 = (const void *)platform_system_copyAppNameForBundleID(*(void *)(a1 + 32));
        size_t v7 = (const void *)acc_strings_copyPlaceholder_Unknown();
        CFTypeRef v8 = acc_accInfo_retainedProperty(AccessoryInfo, 1, v7);
        __int16 v9 = (const void *)acc_strings_copyPlaceholder_Unknown();
        CFTypeRef v10 = acc_accInfo_retainedProperty(AccessoryInfo, 0, v9);
        if (v6) {
          CFTypeRef v11 = CFRetain(v6);
        }
        else {
          CFTypeRef v11 = 0;
        }
        uint64_t v19 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v20 = CFBundleCopyLocalizedString(v19, @"%@ would like to communicate with the %@ %@.", @"%@ would like to communicate with the %@ %@.", 0);
        CFStringRef v21 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v20, v6, v8, v10);
        long long v22 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v23 = CFBundleCopyLocalizedString(v22, @"Allow", @"Allow", 0);
        unsigned int v24 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v25 = CFBundleCopyLocalizedString(v24, @"Ignore", @"Ignore", 0);
        CFStringRef cf = acc_userNotifications_createIdentifier(@"app-launch", *(void *)(*(void *)(a1 + 48) + 8));
        if (v6)
        {
          CFTypeRef v34 = v8;
          char v26 = ACCUNCreate(1, (uint64_t)v11, (uint64_t)v21, (uint64_t)v23, (uint64_t)v25, 0, 1, (uint64_t)cf, 0.0, *(void *)(*(void *)(a1 + 48) + 16));
          CFRetain(*(CFTypeRef *)(a1 + 32));
          CFRetain(*(CFTypeRef *)(a1 + 40));
          if (gLogObjects && gNumLogObjects >= 29)
          {
            CFArrayRef v27 = *(NSObject **)(gLogObjects + 224);
          }
          else
          {
            CFArrayRef v27 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            CFArrayRef v28 = *(const char **)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            CFArrayRef v40 = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Prompting user to launch application: %@...", buf, 0xCu);
          }
          v36[0] = _NSConcreteStackBlock;
          v36[1] = 0x40000000;
          v36[2] = ___requestAppLaunchHandler_block_invoke_15;
          v36[3] = &__block_descriptor_tmp_19;
          char v38 = *(unsigned char *)(a1 + 61);
          long long v37 = *(_OWORD *)(a1 + 32);
          ACCUNManagerPresentNotification(v26, v36);
          CFTypeRef v8 = v34;
          if (v26) {
            CFRelease(v26);
          }
        }
        if (v11) {
          CFRelease(v11);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v20) {
          CFRelease(v20);
        }
        if (v23) {
          CFRelease(v23);
        }
        if (v25) {
          CFRelease(v25);
        }
        if (v6) {
          CFRelease(v6);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  BOOL v32 = *(const void **)(a1 + 32);
  if (v32) {
    CFRelease(v32);
  }
  CFIndex v33 = *(const void **)(a1 + 40);
  if (v33) {
    CFRelease(v33);
  }
}

void ___requestAppLaunchHandler_block_invoke_15(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 28;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 224);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User did not approve app launch for %@ - ignoring", buf, 0xCu);
    }
  }
  else
  {
    if (v4)
    {
      id v6 = *(NSObject **)(gLogObjects + 224);
    }
    else
    {
      id v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Launching application to foreground (user approved): %@; report primary app?: %{BOOL}d",
        buf,
        0x12u);
    }
    platform_system_launchApplication(*(void **)(a1 + 32), *(unsigned char *)(a1 + 48));
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
  if (EndpointWithUUID)
  {
    CFTypeRef v11 = EndpointWithUUID;
    if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
    {
      uint64_t v12 = v11[7];
      if (v12)
      {
        BOOL v13 = *(NSObject **)(v12 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = ___requestAppLaunchHandler_block_invoke_16;
        block[3] = &__block_descriptor_tmp_11;
        block[4] = v12;
        dispatch_sync(v13, block);
      }
    }
  }
  __int16 v14 = *(const void **)(a1 + 32);
  if (v14) {
    CFRelease(v14);
  }
  int v15 = *(const void **)(a1 + 40);
  if (v15) {
    CFRelease(v15);
  }
}

unsigned char *___requestAppLaunchHandler_block_invoke_16(uint64_t a1)
{
  CFNumberRef result = (unsigned char *)iap2_feature_getFeature(*(void *)(a1 + 32), 2u);
  if (result) {
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *_createFeature_16(unsigned char *result)
{
  if (result)
  {
    CFNumberRef result = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
    if (result) {
      unsigned char *result = 0;
    }
  }
  return result;
}

BOOL _destroyFeature_16(void **a1)
{
  if (a1)
  {
    unsigned int v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0;
    }
  }
  return a1 != 0;
}

uint64_t _checkIdentificationInfo_14(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList_0, 1u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 2u);
  }
  return v3;
}

void *accSNTPTimeSync_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200403C432F0CuLL);
    if (v2)
    {
      dispatch_queue_t v3 = dispatch_queue_create("ACCSNTPTimeSyncQ", 0);
      v2[3] = v3;
      if (v3)
      {
        *uint64_t v2 = a1;
        _accSNTPTimeSync_endpoint_initSession((uint64_t)v2);
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)platform_timeSync_getAccessoryTime, @"com.apple.coreaccessories.ACCTimeSyncTest", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
        platform_timeSync_startServer();
      }
    }
  }
  else
  {
    char v6 = logObjectForModule_21();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v6);
    }
    return 0;
  }
  return v2;
}

void *logObjectForModule_21()
{
  if (gLogObjects && gNumLogObjects >= 59) {
    return *(void **)(gLogObjects + 464);
  }
  v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t _accSNTPTimeSync_endpoint_initSession(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v1 = *(NSObject **)(gLogObjects + 464);
  }
  else
  {
    uint64_t v1 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_queue_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SNTP Time Sync  initSession complete ", v3, 2u);
  }
  return 1;
}

uint64_t accSNTPTimeSync_endpoint_publish(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (BOOL *)result;
    CFNumberRef result = *(void *)result;
    if (result)
    {
      int Protocol = acc_endpoint_getProtocol(result);
      if (gLogObjects && gNumLogObjects >= 59)
      {
        dispatch_queue_t v3 = *(NSObject **)(gLogObjects + 464);
      }
      else
      {
        dispatch_queue_t v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(_DWORD *)(*v1 + 24);
        v5[0] = 67109120;
        v5[1] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "accSNTPTimeSync publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d ", (uint8_t *)v5, 8u);
      }
      if (Protocol == 15)
      {
        if (acc_endpoint_isPublished(*v1))
        {
          _accSNTPTimeSync_endpoint_cleanupSession();
          _accSNTPTimeSync_endpoint_initSession((uint64_t)v1);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void _accSNTPTimeSync_endpoint_cleanupSession()
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    v0 = *(NSObject **)(gLogObjects + 464);
  }
  else
  {
    v0 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SNTP Time Sync  cleanupSession - no session data to cleanup at the moment. ", v1, 2u);
  }
}

uint64_t accSNTPTimeSync_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    if (*(void *)result)
    {
      _accSNTPTimeSync_endpoint_cleanupSession();
      dispatch_sync(*((dispatch_queue_t *)*v1 + 3), &__block_literal_global_21);
      dispatch_release(*((dispatch_object_t *)*v1 + 3));
      *((void *)*v1 + 3) = 0;
      if (*v1)
      {
        free(*v1);
        *uint64_t v1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t accSNTPTimeSync_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    dispatch_queue_t v3 = (void *)result;
    CFNumberRef result = 0;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        int v4 = v3[3];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000;
        _DWORD v5[2] = __accSNTPTimeSync_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_3_1;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1;
      }
    }
  }
  return result;
}

void __accSNTPTimeSync_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  _accSNTPTimeSync_endpoint_processIncomingData(*(void *)(a1 + 32), *(CFDataRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _accSNTPTimeSync_endpoint_processIncomingData(uint64_t result, CFDataRef theData)
{
  if (!result) {
    return result;
  }
  dispatch_queue_t v3 = (void *)result;
  CFNumberRef result = 0;
  if (!theData || !*v3) {
    return result;
  }
  if (!*(void *)*v3) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (!BytePtr)
  {
    uint64_t v7 = logObjectForModule_21();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    CFNumberRef result = 0;
    if (!v8) {
      return result;
    }
    *(_WORD *)int v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not get data ptr from dataIn object!", v9, 2u);
    return 0;
  }
  if (Length != 48) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 59)
  {
    char v6 = *(NSObject **)(gLogObjects + 464);
  }
  else
  {
    char v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _accSNTPTimeSync_endpoint_processIncomingData_cold_1((uint64_t)v3, (uint64_t)theData, v6);
  }
  platform_timeSync_setSystemTime((uint64_t)theData);
  return 1;
}

uint64_t accSNTPTimeSync_endpoint_getAccessoryTime(void *a1, long long *a2)
{
  if (!a1 || (uint64_t v2 = (uint64_t *)a1, !*(void *)a1))
  {
LABEL_10:
    CFRelease(a1);
    return 0;
  }
  int v4 = (char *)malloc_type_calloc(1uLL, 0x32uLL, 0x8DEDD0C2uLL);
  if (!v4)
  {
    uint64_t v12 = logObjectForModule_21();
    a1 = (void *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      int v13 = 136315138;
      __int16 v14 = "accSNTPTimeSync_endpoint_getAccessoryTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s calloc failed.", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_10;
  }
  uint64_t v5 = (UInt8 *)v4;
  *(_WORD *)int v4 = 12289;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_OWORD *)(v4 + 34) = a2[2];
  *(_OWORD *)(v4 + 18) = v7;
  *(_OWORD *)(v4 + 2) = v6;
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 50);
  if (Mutable)
  {
    int v9 = Mutable;
    CFDataAppendBytes(Mutable, v5, 50);
    uint64_t v10 = accSNTPTimeSync_endpoint_sendOutgoingData(v2, v9);
    CFRelease(v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  free(v5);
  return v10;
}

uint64_t accSNTPTimeSync_endpoint_sendOutgoingData(uint64_t *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  acc_platform_packetLogging_logSNTPTimeSyncMsg(*a1, a2, 0);

  return acc_endpoint_sendOutgoingData(v3, (const __CFData *)a2);
}

uint64_t accSNTPTimeSync_endpoint_sendAccessoryTime(void *a1, long long *a2)
{
  if (!a1 || (uint64_t v2 = (uint64_t *)a1, !*(void *)a1))
  {
LABEL_10:
    CFRelease(a1);
    return 0;
  }
  int v4 = (char *)malloc_type_calloc(1uLL, 0x32uLL, 0xB69F4C6AuLL);
  if (!v4)
  {
    uint64_t v12 = logObjectForModule_21();
    a1 = (void *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      int v13 = 136315138;
      __int16 v14 = "accSNTPTimeSync_endpoint_sendAccessoryTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s calloc failed.", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_10;
  }
  uint64_t v5 = (UInt8 *)v4;
  *(_WORD *)int v4 = 12291;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_OWORD *)(v4 + 34) = a2[2];
  *(_OWORD *)(v4 + 18) = v7;
  *(_OWORD *)(v4 + 2) = v6;
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 50);
  if (Mutable)
  {
    int v9 = Mutable;
    CFDataAppendBytes(Mutable, v5, 50);
    uint64_t v10 = accSNTPTimeSync_endpoint_sendOutgoingData(v2, v9);
    CFRelease(v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  free(v5);
  return v10;
}

void sub_1000C7078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

ACCUserNotification *ACCUNCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  __int16 v19 = objc_alloc_init(ACCUserNotification);
  [(ACCUserNotification *)v19 setType:a1];
  [(ACCUserNotification *)v19 setTitle:a2];
  [(ACCUserNotification *)v19 setMessage:a3];
  [(ACCUserNotification *)v19 setDefaultButtonName:a4];
  [(ACCUserNotification *)v19 setOtherButtonName:a5];
  [(ACCUserNotification *)v19 setIconURL:a6];
  [(ACCUserNotification *)v19 setIsModal:a7];
  [(ACCUserNotification *)v19 setTimeout:a9];
  [(ACCUserNotification *)v19 setIdentifier:a8];
  [(ACCUserNotification *)v19 setGroupIdentifier:a10];
  return v19;
}

BOOL ACCUNSetIdentifier(void *a1, uint64_t a2)
{
  if (a1) {
    [a1 setIdentifier:a2];
  }
  return a1 != 0;
}

BOOL ACCUNSetGroupIdentifier(void *a1, uint64_t a2)
{
  if (a1) {
    [a1 setGroupIdentifier:a2];
  }
  return a1 != 0;
}

id _getWiFiSharingPluginInstance()
{
  v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformWiFiSharingProtocol fallbackToTransportPlugins:0];

  return v1;
}

uint64_t platform_wifisharing_request_device_wifi_information(const void *a1)
{
  int isDeviceLocked = platform_system_isDeviceLocked();
  if (!isDeviceLocked)
  {
    CFTypeRef v11 = _getWiFiSharingPluginInstance();
    uint64_t v12 = v11;
    if (!v11)
    {
LABEL_78:

      return isDeviceLocked ^ 1u;
    }
    if ([v11 isDeviceConnectedToWiFi])
    {
      int v13 = systemInfo_systemSupportsWAPI();
      __int16 v14 = (__CFBundle *)acc_strings_bundleCF();
      if (v13) {
        CFStringRef v15 = @"Share WLAN Settings?";
      }
      else {
        CFStringRef v15 = @"Share Wi-Fi Settings?";
      }
      CFStringRef v30 = CFBundleCopyLocalizedString(v14, v15, v15, 0);
      int v31 = systemInfo_systemSupportsWAPI();
      BOOL v32 = (__CFBundle *)acc_strings_bundleCF();
      if (v31) {
        CFStringRef v33 = @"Do you want to share your WLAN settings so this accessory can connect to the WLAN network?";
      }
      else {
        CFStringRef v33 = @"Do you want to share your Wi-Fi settings so this accessory can connect to the Wi-Fi network?";
      }
      CFStringRef v34 = CFBundleCopyLocalizedString(v32, v33, v33, 0);
      CFStringRef v35 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v36 = CFBundleCopyLocalizedString(v35, @"Allow", @"Allow", 0);
      long long v37 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v38 = CFBundleCopyLocalizedString(v37, @"Ignore", @"Ignore", 0);
      CFStringRef Identifier = acc_userNotifications_createIdentifier(@"wifi-sharing-share", (uint64_t)a1);
      EndpointWithUUID = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
      __int16 v41 = ACCUNCreate(1, (uint64_t)v30, (uint64_t)v34, (uint64_t)v36, (uint64_t)v38, 0, 1, (uint64_t)Identifier, 0.0, **EndpointWithUUID);
      CFRetain(a1);
      CFStringRef v56 = _NSConcreteStackBlock;
      uint64_t v57 = 3221225472;
      int v58 = ___presentShareWiFiCredentialsNotification_block_invoke;
      char v59 = &__block_descriptor_40_e8_v12__0i8l;
      int v60 = a1;
      ACCUNManagerPresentNotification(v41, &v56);
      if (v41) {
        CFRelease(v41);
      }
      if (v30) {
        CFRelease(v30);
      }
      if (v34) {
        CFRelease(v34);
      }
      if (v36) {
        CFRelease(v36);
      }
      if (!v38) {
        goto LABEL_70;
      }
      CFStringRef v42 = v38;
    }
    else
    {
      uint64_t v25 = systemInfo_copyDeviceClass();
      if (!v25)
      {
        if (gLogObjects && gNumLogObjects >= 8)
        {
          __int16 v43 = *(id *)(gLogObjects + 56);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v43 = &_os_log_default;
          id v54 = &_os_log_default;
        }
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          platform_wifisharing_request_device_wifi_information_cold_3(v43);
        }

        goto LABEL_78;
      }
      CFStringRef v26 = (const __CFString *)v25;
      int v27 = systemInfo_systemSupportsWAPI();
      CFArrayRef v28 = (__CFBundle *)acc_strings_bundleCF();
      if (v27) {
        CFStringRef v29 = @"Connect to WLAN";
      }
      else {
        CFStringRef v29 = @"Connect to Wi-Fi";
      }
      CFStringRef v44 = CFBundleCopyLocalizedString(v28, v29, v29, 0);
      int v45 = systemInfo_systemSupportsWAPI();
      BOOL v46 = (__CFBundle *)acc_strings_bundleCF();
      if (v45) {
        CFStringRef v47 = @"This accessory would like to use a WLAN network. Connect this %@ to WLAN if you want to share WLAN settings with this accessory.";
      }
      else {
        CFStringRef v47 = @"This accessory would like to use a Wi-Fi network. Connect this %@ to Wi-Fi if you want to share Wi-Fi settings with this accessory.";
      }
      CFStringRef v48 = CFBundleCopyLocalizedString(v46, v47, v47, 0);
      CFStringRef v49 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v48, v26);
      int v50 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v51 = CFBundleCopyLocalizedString(v50, @"OK", @"OK", 0);
      CFStringRef Identifier = acc_userNotifications_createIdentifier(@"wifi-sharing-connect", (uint64_t)a1);
      BOOL v52 = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
      int v53 = ACCUNCreate(1, (uint64_t)v44, (uint64_t)v49, (uint64_t)v51, 0, 0, 1, (uint64_t)Identifier, 0.0, **v52);
      CFRetain(a1);
      CFStringRef v56 = _NSConcreteStackBlock;
      uint64_t v57 = 3221225472;
      int v58 = ___presentConnectToWiFiNotification_block_invoke;
      char v59 = &__block_descriptor_40_e8_v12__0i8l;
      int v60 = a1;
      ACCUNManagerPresentNotification(v53, &v56);
      if (v53) {
        CFRelease(v53);
      }
      if (v44) {
        CFRelease(v44);
      }
      if (v49) {
        CFRelease(v49);
      }
      if (v48) {
        CFRelease(v48);
      }
      if (v51) {
        CFRelease(v51);
      }
      CFStringRef v42 = v26;
    }
    CFRelease(v42);
LABEL_70:
    if (Identifier) {
      CFRelease(Identifier);
    }
    goto LABEL_78;
  }
  uint64_t v3 = systemInfo_copyDeviceClass();
  if (!v3)
  {
    if (gLogObjects) {
      BOOL v16 = gNumLogObjects < 8;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v12 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    else
    {
      uint64_t v12 = *(id *)(gLogObjects + 56);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_wifisharing_request_device_wifi_information_cold_1(v12);
    }
    goto LABEL_78;
  }
  int v4 = (const void *)v3;
  uint64_t v5 = (__CFBundle *)acc_strings_bundleCF();
  CFStringRef v6 = CFBundleCopyLocalizedString(v5, @"%@ is Locked", @"%@ is Locked", 0);
  CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v6, v4);
  int v8 = systemInfo_systemSupportsWAPI();
  int v9 = (__CFBundle *)acc_strings_bundleCF();
  if (v8) {
    CFStringRef v10 = @"This accessory would like to use the WLAN network. Unlock your %@ to configure WLAN settings.";
  }
  else {
    CFStringRef v10 = @"This accessory would like to use the Wi-Fi network. Unlock your %@ to configure Wi-Fi settings.";
  }
  CFStringRef v18 = CFBundleCopyLocalizedString(v9, v10, v10, 0);
  CFStringRef v19 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v18, v4);
  int v20 = (__CFBundle *)acc_strings_bundleCF();
  CFStringRef v21 = CFBundleCopyLocalizedString(v20, @"OK", @"OK", 0);
  CFStringRef v22 = acc_userNotifications_createIdentifier(@"wifi-sharing-unlock", (uint64_t)a1);
  CFStringRef v23 = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
  unsigned int v24 = ACCUNCreate(1, (uint64_t)v7, (uint64_t)v19, (uint64_t)v21, 0, 0, 1, (uint64_t)v22, 0.0, **v23);
  CFRetain(a1);
  CFStringRef v56 = _NSConcreteStackBlock;
  uint64_t v57 = 3221225472;
  int v58 = ___presentUnlockForWiFiSharingNotification_block_invoke;
  char v59 = &__block_descriptor_40_e8_v12__0i8l;
  int v60 = a1;
  ACCUNManagerPresentNotification(v24, &v56);
  if (v24) {
    CFRelease(v24);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v21) {
    CFRelease(v21);
  }
  CFRelease(v4);
  if (v22) {
    CFRelease(v22);
  }
  return isDeviceLocked ^ 1u;
}

id platform_wifisharing_accessory_wifi_configuration_information(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v14 = _getWiFiSharingPluginInstance();
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects < 7;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v17 = &_os_log_default;
    id v16 = &_os_log_default;
  }
  else
  {
    id v17 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    int v29 = 138413826;
    CFStringRef v30 = a1;
    __int16 v31 = 2112;
    uint64_t v32 = a2;
    __int16 v33 = 2112;
    uint64_t v34 = a3;
    __int16 v35 = 2112;
    uint64_t v36 = a4;
    __int16 v37 = 2112;
    uint64_t v38 = a5;
    __int16 v39 = 2112;
    uint64_t v40 = a6;
    __int16 v41 = 1024;
    int v42 = a7;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "wifi config info: %@, BSSID=%@ SSID=%@ Passphrase=%@ securityType=%@ channel=%@ supportsWirelessCarPlay=%d", (uint8_t *)&v29, 0x44u);
  }

  if (v14)
  {
    id v18 = objc_alloc_init((Class)NSMutableDictionary);
    CFStringRef v19 = v18;
    if (a2) {
      [v18 setObject:a2 forKey:kCFWiFiSharing_WiFiNetworkInformationWifiBSSID];
    }
    if (a3) {
      [v19 setObject:a3 forKey:kCFWiFiSharing_WiFiNetworkInformationWifiSSID];
    }
    if (a4) {
      [v19 setObject:a4 forKey:kCFWiFiSharing_WiFiNetworkInformationWifiPassphrase];
    }
    if (a5) {
      [v19 setObject:a5 forKey:kCFWiFiSharing_WiFiNetworkInformationSecurityType];
    }
    if (a6) {
      [v19 setObject:a6 forKey:kCFWiFiSharing_WiFiNetworkInformationChannel];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      int v20 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v20 = &_os_log_default;
      id v22 = &_os_log_default;
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 138412546;
      CFStringRef v30 = v19;
      __int16 v31 = 1024;
      LODWORD(v32) = a7;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Accessory WiFi Config Information %@, supportsWirelessCarPlay = %d", (uint8_t *)&v29, 0x12u);
    }

    if (!a7)
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        CFStringRef v26 = *(id *)(gLogObjects + 48);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFStringRef v26 = &_os_log_default;
        id v27 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Accessory WiFi Config Information only supported for CarPlay!!!", (uint8_t *)&v29, 2u);
      }

      id v21 = 0;
      goto LABEL_46;
    }
    CFStringRef v23 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
    ConnectionWithUUID = acc_manager_getConnectionWithUUID(v23);
    if (acc_connection_getType((uint64_t)ConnectionWithUUID) == 2)
    {
      uint64_t v25 = +[NSNumber numberWithUnsignedInt:platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(a1)];
      [v19 setObject:v25 forKey:kCFWiFiSharing_LegacyAccessoryExternalAccessoryConnectionID];

      id v21 = [v14 handleAccessoryWiFiInformationForWirelessCarPlay:v19];
      if (!v23) {
        goto LABEL_46;
      }
    }
    else
    {
      id v21 = 0;
      if (!v23)
      {
LABEL_46:

        goto LABEL_47;
      }
    }
    CFRelease(v23);
    goto LABEL_46;
  }
  id v21 = 0;
LABEL_47:

  return v21;
}

void platform_wifisharing_request_accessory_wifi_information(const void *a1)
{
  CFRetain(a1);
  uint64_t v2 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __platform_wifisharing_request_accessory_wifi_information_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v2, block);
}

void __platform_wifisharing_request_accessory_wifi_information_block_invoke(uint64_t a1)
{
  accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 25, 0);
  uint64_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void ___presentUnlockForWiFiSharingNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    int v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User dismissed Unlock for WiFi sharing - ignoring", v6, 2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void ___presentConnectToWiFiNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    int v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dismissed Connect to WiFi for WiFi Sharing alert", v6, 2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void ___presentShareWiFiCredentialsNotification_block_invoke(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 7;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v5 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User did not approve wifi sharing", buf, 2u);
    }

    uint64_t v46 = kCFWiFiSharing_WiFiNetworkInformationStatus;
    int v8 = +[NSNumber numberWithUnsignedInt:1];
    CFStringRef v47 = v8;
    int v9 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];

    if (gLogObjects && gNumLogObjects >= 8)
    {
      CFStringRef v10 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v10 = &_os_log_default;
      id v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      ___presentShareWiFiCredentialsNotification_block_invoke_cold_4((uint64_t)v9, v10);
    }

    uint64_t v12 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = ___presentShareWiFiCredentialsNotification_block_invoke_102;
    block[3] = &unk_1002189B8;
    uint64_t v13 = *(void *)(a1 + 32);
    id v37 = v9;
    uint64_t v38 = v13;
    id v14 = v9;
    dispatch_async(v12, block);
  }
  else
  {
    if (v4)
    {
      CFStringRef v6 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v6 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sharing WiFi credentials with accessory...", buf, 2u);
    }

    id v16 = *(const void **)(a1 + 32);
    id v17 = _getWiFiSharingPluginInstance();
    id v14 = v17;
    if (v17)
    {
      id v18 = [v17 copyDeviceWiFiNetworkInformation];
      if (gLogObjects && gNumLogObjects >= 8)
      {
        CFStringRef v19 = *(id *)(gLogObjects + 56);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFStringRef v19 = &_os_log_default;
        id v20 = &_os_log_default;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        ___presentShareWiFiCredentialsNotification_block_invoke_cold_1((uint64_t)v18, v19);
      }

      CFRetain(v16);
      id v21 = dispatch_get_global_queue(0, 0);
      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v40 = 3221225472;
      __int16 v41 = ___handleDeviceWiFiConfigurationInformation_block_invoke;
      int v42 = &unk_1002189B8;
      CFStringRef v44 = v16;
      id v22 = v18;
      id v43 = v22;
      dispatch_async(v21, buf);

      CFStringRef v23 = [v22 objectForKey:kCFWiFiSharing_WiFiNetworkInformationStatus];
      if ([v23 unsignedIntValue] == 2)
      {
        int v24 = systemInfo_systemSupportsWAPI();
        uint64_t v25 = (__CFBundle *)acc_strings_bundleCF();
        if (v24) {
          CFStringRef v26 = @"WLAN Settings";
        }
        else {
          CFStringRef v26 = @"Wi-Fi Settings";
        }
        CFStringRef v27 = CFBundleCopyLocalizedString(v25, v26, v26, 0);
        CFArrayRef v28 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v29 = CFBundleCopyLocalizedString(v28, @"This network’s settings are not available for sharing with accessories.", @"This network’s settings are not available for sharing with accessories.", 0);
        CFStringRef v30 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v31 = CFBundleCopyLocalizedString(v30, @"OK", @"OK", 0);
        CFStringRef Identifier = acc_userNotifications_createIdentifier(@"wifi-sharing-unavailable", (uint64_t)v16);
        EndpointWithUUID = (uint64_t **)acc_manager_getEndpointWithUUID(v16);
        uint64_t v34 = ACCUNCreate(1, (uint64_t)v27, (uint64_t)v29, (uint64_t)v31, 0, 0, 1, (uint64_t)Identifier, 0.0, **EndpointWithUUID);
        CFRetain(v16);
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472;
        v45[2] = ___presentWiFiSharingUnavailableNotification_block_invoke;
        void v45[3] = &__block_descriptor_40_e8_v12__0i8l;
        v45[4] = v16;
        ACCUNManagerPresentNotification(v34, v45);
        if (v34) {
          CFRelease(v34);
        }
        if (v27) {
          CFRelease(v27);
        }
        if (v29) {
          CFRelease(v29);
        }
        if (v31) {
          CFRelease(v31);
        }
        if (Identifier) {
          CFRelease(Identifier);
        }
      }
    }
  }

  __int16 v35 = *(const void **)(a1 + 32);
  if (v35) {
    CFRelease(v35);
  }
}

uint64_t ___presentShareWiFiCredentialsNotification_block_invoke_102(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 24, *(void *)(a1 + 32));
}

void ___handleDeviceWiFiConfigurationInformation_block_invoke(uint64_t a1)
{
  accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 24, *(void *)(a1 + 32));
  BOOL v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void ___presentWiFiSharingUnavailableNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    int v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dismissed WiFi unavailable alert", v6, 2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t iAP2ListArrayGetBuffSize(int a1, char a2)
{
  return ((a2 + 2) * a1 + 11) & 0x1FFFC;
}

uint64_t iAP2ListArrayInit(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a3 <= 0xFD)
  {
    uint64_t v4 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 1) = a2;
    *(_WORD *)(a1 + 2) = -1;
    *(unsigned char *)(a1 + 4) = 0;
    *(unsigned char *)(a1 + 5) = a3;
    *(_WORD *)(a1 + 6) = 0;
    uint64_t v5 = a3 + 2;
    CFStringRef v6 = (unsigned char *)(a1 + 9);
    do
    {
      *(v6 - 1) = v4 + 1;
      unsigned char *v6 = v4 - 1;
      v6 += v5;
      ++v4;
    }
    while (a2 != v4);
    uint64_t v3 = 0;
    *(unsigned char *)(a1 + 9) = -1;
    *(unsigned char *)(a1 + 8 + v5 * (unint64_t)(a2 - 1)) = -1;
  }
  return v3;
}

unsigned char *iAP2ListArrayCleanup(unsigned char *result, void (*a2)(unsigned __int8 *))
{
  if (result && a2)
  {
    uint64_t v3 = (uint64_t)result;
    int v4 = result[1];
    unsigned int v5 = result[5];
    if (*result)
    {
      for (unsigned int i = result[2]; i != 255; unsigned int i = *v7)
      {
        id v7 = (unsigned __int8 *)(v3 + 8 + (*(unsigned __int8 *)(v3 + 5) + 2) * (unint64_t)i);
        a2(v7 + 2);
      }
    }
    return (unsigned char *)iAP2ListArrayInit(v3, v4, v5);
  }
  return result;
}

uint64_t iAP2ListArrayFindItem(unsigned char *a1, uint64_t a2, uint64_t (*a3)(unsigned __int8 *, uint64_t, uint64_t))
{
  LOBYTE(v3) = -1;
  if (a2 && a1 && a3 && *a1 && a1[2] != 255)
  {
    uint64_t v7 = a1[5];
    unsigned int v3 = a1[2];
    do
    {
      int v8 = &a1[(a1[5] + 2) * (unint64_t)v3 + 8];
      if (!a3(v8 + 2, a2, v7)) {
        break;
      }
      unsigned int v3 = *v8;
    }
    while (v3 != 255);
  }
  return v3;
}

unint64_t iAP2ListArrayItemForIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 != 255)
  {
    if (*(unsigned __int8 *)(a1 + 1) <= a2) {
      return 0;
    }
    else {
      return a1 + (*(unsigned __int8 *)(a1 + 5) + 2) * (unint64_t)a2 + 10;
    }
  }
  return v2;
}

unsigned __int8 *iAP2ListArrayGetCount(unsigned __int8 *result)
{
  if (result) {
    return (unsigned __int8 *)*result;
  }
  return result;
}

uint64_t iAP2ListArrayGetAvailSpace(unsigned char *a1)
{
  if (a1) {
    return (a1[1] - *a1);
  }
  else {
    return 0;
  }
}

uint64_t iAP2ListArrayGetFirstItemIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2);
  }
  else {
    return 255;
  }
}

uint64_t iAP2ListArrayGetLastItemIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 3);
  }
  else {
    return 255;
  }
}

uint64_t iAP2ListArrayGetNextItemIndex(uint64_t a1, unsigned int a2)
{
  uint64_t result = 255;
  if (a1)
  {
    if (a2 != 255) {
      return *(unsigned __int8 *)(a1 + (*(unsigned __int8 *)(a1 + 5) + 2) * (unint64_t)a2 + 8);
    }
  }
  return result;
}

uint64_t iAP2ListArrayAddItemAfter(unsigned __int8 *a1, unsigned int a2, void *__src)
{
  uint64_t v3 = 255;
  if (a1 && __src)
  {
    if (*a1 >= a1[1])
    {
      return 255;
    }
    else
    {
      uint64_t v3 = a1[4];
      if (v3 == 255) {
        iAP2ListArrayAddItemAfter_cold_1();
      }
      unsigned int v6 = a1[2];
      int v7 = a1[3];
      size_t v8 = a1[5];
      int v9 = a1 + 8;
      CFStringRef v10 = &a1[(v8 + 2) * (unint64_t)a1[4] + 8];
      uint64_t v11 = *v10;
      a1[4] = v11;
      if (v11 != 255) {
        v9[(v8 + 2) * (unint64_t)v11 + 1] = -1;
      }
      *(_WORD *)CFStringRef v10 = -1;
      memcpy(v10 + 2, __src, v8);
      if (a2 == 255)
      {
        if (v6 != 255)
        {
          v9[(a1[5] + 2) * (unint64_t)v6 + 1] = v3;
          *CFStringRef v10 = v6;
        }
        a1[2] = v3;
      }
      else
      {
        unsigned int v12 = a1[5] + 2;
        unint64_t v13 = v12 * (unint64_t)a2;
        uint64_t v14 = v9[v13];
        if (v14 != 255) {
          v9[v12 * (unint64_t)v9[v13] + 1] = v3;
        }
        *CFStringRef v10 = v14;
        v9[v13] = v3;
        v10[1] = a2;
      }
      if (v7 == a2) {
        a1[3] = v3;
      }
      ++*a1;
    }
  }
  return v3;
}

uint64_t iAP2ListArrayAddItemInOrder(unsigned __int8 *a1, void *__src, uint64_t (*a3)(unsigned __int8 *, void *, uint64_t))
{
  uint64_t result = 255;
  if (__src && a1 && a3)
  {
    int v7 = a1[2];
    if (v7 == 255
      || (uint64_t v8 = a1[5], v9 = &a1[(v8 + 2) * (unint64_t)a1[2] + 8], a3(v9 + 2, __src, v8) > 0))
    {
      unsigned __int8 v10 = -1;
    }
    else
    {
      do
      {
        unsigned __int8 v10 = v7;
        int v7 = *v9;
        if (v7 == 255) {
          break;
        }
        int v9 = &a1[(a1[5] + 2) * (unint64_t)*v9 + 8];
      }
      while (a3(v9 + 2, __src, v8) < 1);
    }
    return iAP2ListArrayAddItemAfter(a1, v10, __src);
  }
  return result;
}

unsigned char *iAP2ListArrayDeleteItem(unsigned char *result, unsigned int a2, uint64_t (*a3)(unsigned __int8 *))
{
  if (result)
  {
    char v3 = a2;
    if (a2 != 255)
    {
      int v4 = result;
      char v5 = *result;
      if (*result)
      {
        int v6 = result[2];
        int v7 = result + 8;
        unsigned int v8 = result[5] + 2;
        int v9 = &result[v8 * (unint64_t)a2 + 8];
        unsigned int v10 = *v9;
        unsigned int v11 = v9[1];
        if (result[3] == a2) {
          result[3] = v11;
        }
        if (v6 == a2) {
          result[2] = v10;
        }
        unsigned int v12 = result[4];
        if (v11 != 255) {
          v7[v8 * (unint64_t)v11] = v10;
        }
        if (v10 != 255) {
          v7[v8 * (unint64_t)v10 + 1] = v11;
        }
        unsigned char *result = v5 - 1;
        if (a3) {
          uint64_t result = (unsigned char *)a3(v9 + 2);
        }
        if (v12 != 255) {
          v7[(v4[5] + 2) * (unint64_t)v12 + 1] = v3;
        }
        *int v9 = v12;
        v4[4] = v3;
      }
    }
  }
  return result;
}

uint64_t iap2_appLinks_start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x18u);
  if (!Feature || *(unsigned char *)(Feature + 104)) {
    return 0;
  }
  uint64_t v52 = Feature;
  CFStringRef v49 = (void *)a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    CFMutableSetRef Mutable = 0;
    CFMutableSetRef v8 = 0;
LABEL_79:
    if ((unint64_t)Mutable | (unint64_t)v8)
    {
      _removeSubscribers(v49, (CFSetRef *)v52);
      if (*(void *)v52)
      {
        CFRelease(*(CFTypeRef *)v52);
        *(void *)uint64_t v52 = 0;
      }
      if (Mutable)
      {
        *(void *)uint64_t v52 = CFRetain(Mutable);
        if (CFSetGetCount(Mutable)) {
          *(unsigned char *)(v52 + 20) = 1;
        }
      }
      else
      {
        *(void *)uint64_t v52 = 0;
      }
      uint64_t v34 = *(const void **)(v52 + 24);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(v52 + 24) = 0;
      }
      if (v8)
      {
        *(void *)(v52 + 24) = CFRetain(v8);
        if (CFSetGetCount(v8)) {
          *(unsigned char *)(v52 + 44) = 1;
        }
      }
      else
      {
        *(void *)(v52 + 24) = 0;
      }
      if (*v49)
      {
        if (*(unsigned char *)(v52 + 20) && *(void *)v52 && CFSetGetCount(*(CFSetRef *)v52) >= 1)
        {
          uint64_t v35 = (uint64_t)iap2_accAuthentication_copyCertificateSerial((uint64_t)v49);
          if (!v35)
          {
            unsigned __int8 v36 = 0;
LABEL_112:
            *(unsigned char *)(v52 + 104) = v36 | v35;
            if (gLogObjects && gNumLogObjects >= 50)
            {
              int v42 = *(NSObject **)(gLogObjects + 392);
            }
            else
            {
              int v42 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            uint64_t v2 = 1;
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              uint64_t v43 = v49[1];
              *(_DWORD *)buf = 138412290;
              *(void *)CFStringRef v56 = v43;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "App Links started for EndpointUUID: %@", buf, 0xCu);
            }
            goto LABEL_119;
          }
          unsigned __int8 v36 = platform_appLinks_addSubscriberForSubFeature(v49[1], 0, *(void *)v52, *(unsigned __int16 *)(v52 + 18), v35);
          CFRelease((CFTypeRef)v35);
        }
        else
        {
          unsigned __int8 v36 = 0;
        }
        if (*(unsigned char *)(v52 + 44))
        {
          CFSetRef v37 = *(const __CFSet **)(v52 + 24);
          if (v37)
          {
            if (CFSetGetCount(v37) >= 1)
            {
              CFTypeRef v38 = iap2_accAuthentication_copyCertificateSerial((uint64_t)v49);
              if (v38)
              {
                __int16 v39 = v38;
                LOBYTE(v35) = platform_appLinks_addSubscriberForSubFeature(v49[1], 1, *(void *)(v52 + 24), *(unsigned __int16 *)(v52 + 42), (uint64_t)v38);
                CFRelease(v39);
                goto LABEL_112;
              }
            }
          }
        }
      }
      else
      {
        unsigned __int8 v36 = 0;
      }
      LOBYTE(v35) = 0;
      goto LABEL_112;
    }
    return 0;
  }
  int v7 = (unsigned __int16 *)FirstParam;
  CFMutableSetRef v8 = 0;
  CFMutableSetRef Mutable = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    int v54 = 0;
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      unint64_t v13 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      unint64_t v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)CFStringRef v56 = v11;
        *(_WORD *)&v56[8] = 1024;
        int v57 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        unint64_t v13 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)CFStringRef v56 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }
    switch(ParamID)
    {
      case 0:
        if (Mutable) {
          goto LABEL_108;
        }
        unint64_t v14 = iAP2MsgGetFirstParam(a2, v7);
        if (!v14)
        {
          CFMutableSetRef Mutable = 0;
          goto LABEL_76;
        }
        NextParam = (unsigned __int16 *)v14;
        CFMutableSetRef Mutable = 0;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          unsigned __int16 valuePtr = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v16 = gLogObjects;
          int v17 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            id v18 = *(NSObject **)(gLogObjects + 392);
          }
          else
          {
            id v18 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFStringRef v56 = v16;
              *(_WORD *)&v56[8] = 1024;
              int v57 = v17;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              id v18 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)CFStringRef v56 = valuePtr;
            _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }
          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          if (Mutable || (CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1, &kCFTypeSetCallBacks)) != 0) {
            CFSetAddValue(Mutable, v19);
          }
          if (v19) {
            CFRelease(v19);
          }
          NextParam = iAP2MsgGetNextParam(a2, v7, NextParam);
          if (!NextParam) {
            goto LABEL_76;
          }
        }
        uint64_t v40 = logObjectForModule_22();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          iap2_appLinks_start_cold_2((uint64_t)&valuePtr, a2);
        }
        goto LABEL_108;
      case 1:
        if (v50) {
          goto LABEL_39;
        }
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          int v45 = logObjectForModule_22();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
          }
          goto LABEL_108;
        }
        *(_WORD *)(v52 + 16) = DataAsU16;
LABEL_39:
        LOBYTE(v50) = 1;
        goto LABEL_76;
      case 2:
        if ((v50 & 0x100000000) != 0) {
          goto LABEL_43;
        }
        __int16 v24 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          uint64_t v46 = logObjectForModule_22();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_108;
        }
        *(_WORD *)(v52 + 18) = v24;
LABEL_43:
        BYTE4(v50) = 1;
        goto LABEL_76;
      case 3:
        if (v8) {
          goto LABEL_108;
        }
        unint64_t v25 = iAP2MsgGetFirstParam(a2, v7);
        if (!v25)
        {
          CFMutableSetRef v8 = 0;
LABEL_76:
          int v7 = iAP2MsgGetNextParam(a2, 0, v7);
          if (!v7) {
            goto LABEL_79;
          }
          continue;
        }
        CFStringRef v26 = (unsigned __int16 *)v25;
        CFMutableSetRef v8 = 0;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          unsigned __int16 valuePtr = iAP2MsgGetParamID((uint64_t)v26);
          uint64_t v27 = gLogObjects;
          int v28 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            CFStringRef v29 = *(NSObject **)(gLogObjects + 392);
          }
          else
          {
            CFStringRef v29 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFStringRef v56 = v27;
              *(_WORD *)&v56[8] = 1024;
              int v57 = v28;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              CFStringRef v29 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)CFStringRef v56 = valuePtr;
            _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }
          if (!iAP2MsgIsDataVoid(v26)) {
            break;
          }
          CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          if (v8 || (CFMutableSetRef v8 = CFSetCreateMutable(kCFAllocatorDefault, 1, &kCFTypeSetCallBacks)) != 0) {
            CFSetAddValue(v8, v30);
          }
          if (v30) {
            CFRelease(v30);
          }
          CFStringRef v26 = iAP2MsgGetNextParam(a2, v7, v26);
          if (!v26) {
            goto LABEL_76;
          }
        }
        __int16 v41 = logObjectForModule_22();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          iap2_appLinks_start_cold_5((uint64_t)&valuePtr, a2);
        }
LABEL_108:
        uint64_t v2 = 0;
LABEL_119:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v8) {
          CFRelease(v8);
        }
        return v2;
      case 4:
        if (v51) {
          goto LABEL_65;
        }
        __int16 v31 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          CFStringRef v47 = logObjectForModule_22();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_108;
        }
        *(_WORD *)(v52 + 40) = v31;
LABEL_65:
        LOBYTE(v51) = 1;
        goto LABEL_76;
      case 5:
        if ((v51 & 0x100000000) != 0) {
          goto LABEL_69;
        }
        __int16 v32 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          CFStringRef v48 = logObjectForModule_22();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_108;
        }
        *(_WORD *)(v52 + 42) = v32;
LABEL_69:
        BYTE4(v51) = 1;
        goto LABEL_76;
      default:
        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 50)
        {
          id v22 = *(NSObject **)(gLogObjects + 392);
        }
        else
        {
          id v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)CFStringRef v56 = v20;
            *(_WORD *)&v56[8] = 1024;
            int v57 = v21;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            id v22 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)CFStringRef v56 = ParamID;
          *(_WORD *)&v56[4] = 1024;
          *(_DWORD *)&v56[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        goto LABEL_76;
    }
  }
}

void *logObjectForModule_22()
{
  if (gLogObjects && gNumLogObjects >= 50) {
    return *(void **)(gLogObjects + 392);
  }
  v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

id _removeSubscribers(void *a1, CFSetRef *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = 0;
  if (!a2 || !*a1) {
    return v3;
  }
  id v3 = *a2 && CFSetGetCount(*a2) >= 1 ? platform_appLinks_removeSubscriberForSubFeature(a1[1], 0) : 0;
  CFSetRef v5 = a2[3];
  if (!v5 || CFSetGetCount(v5) < 1) {
    return v3;
  }
  uint64_t v6 = a1[1];

  return platform_appLinks_removeSubscriberForSubFeature(v6, 1);
}

id iap2_appLinks_stop(void *a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (Feature && (uint64_t v5 = Feature, *(unsigned char *)(Feature + 104)))
    {
      *(unsigned char *)(Feature + 104) = 0;
      *(unsigned char *)(Feature + 20) = 0;
      *(unsigned char *)(Feature + 44) = 0;
      id v2 = _removeSubscribers(a1, (CFSetRef *)Feature);
      if (gLogObjects && gNumLogObjects >= 50)
      {
        uint64_t v6 = *(NSObject **)(gLogObjects + 392);
      }
      else
      {
        uint64_t v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = a1[1];
        int v15 = 138412290;
        uint64_t v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "App Links stopped for EndpointUUID: %@", (uint8_t *)&v15, 0xCu);
      }
      if (*(void *)v5)
      {
        CFRelease(*(CFTypeRef *)v5);
        *(void *)uint64_t v5 = 0;
      }
      CFMutableSetRef v8 = *(const void **)(v5 + 24);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(v5 + 24) = 0;
      }
      int v9 = *(const void **)(v5 + 80);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v5 + 80) = 0;
      }
      unsigned int v10 = *(const void **)(v5 + 72);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v5 + 72) = 0;
      }
      uint64_t v11 = *(const void **)(v5 + 96);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v5 + 96) = 0;
      }
      int v12 = *(const void **)(v5 + 56);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v5 + 56) = 0;
      }
      unint64_t v13 = *(const void **)(v5 + 64);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(v5 + 64) = 0;
      }
      *(_WORD *)(v5 + 90) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_appLinks_requestAppIcons(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x18u);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (!*(unsigned char *)(result + 104)) {
    return 0;
  }
  uint64_t result = iAP2MsgGetFirstParam(a2, 0);
  if (!result) {
    return result;
  }
  NextParam = (unsigned __int16 *)result;
  uint64_t v29 = a1;
  uint64_t v30 = v5;
  uint64_t v7 = 0;
  do
  {
    unsigned __int16 valuePtr = -21846;
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    unsigned __int16 valuePtr = ParamID;
    BOOL v31 = 0;
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v34 = v9;
        *(_WORD *)&v34[8] = 1024;
        LODWORD(v35) = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        unsigned int ParamID = valuePtr;
        uint64_t v11 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v34 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      unsigned int ParamID = valuePtr;
    }
    if (ParamID > 1)
    {
      uint64_t v16 = gLogObjects;
      int v17 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 50)
      {
        id v18 = *(NSObject **)(gLogObjects + 392);
      }
      else
      {
        id v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v34 = v16;
          *(_WORD *)&v34[8] = 1024;
          LODWORD(v35) = v17;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          id v18 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = valuePtr;
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v34 = v19;
        *(_WORD *)&v34[4] = 1024;
        *(_DWORD *)&v34[6] = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
      }
    }
    else
    {
      CFStringRef v12 = iAP2MsgCopyDataAsCFString(NextParam, &v31);
      if (!v31) {
        goto LABEL_29;
      }
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 50)
      {
        int v15 = *(NSObject **)(gLogObjects + 392);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v34 = v13;
          *(_WORD *)&v34[8] = 1024;
          LODWORD(v35) = v14;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v15 = &_os_log_default;
        }
      }
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_29:
        if (!v12) {
          goto LABEL_40;
        }
LABEL_30:
        if (v7 || (uint64_t v7 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks)) != 0)
        {
          CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          CFNumberRef v23 = v22;
          if (Mutable && v22)
          {
            CFDictionaryAddValue(Mutable, @"CARApplicationBundleIdentifierKey", v12);
            CFDictionaryAddValue(Mutable, @"appLinksSubFeature", v23);
            CFArrayAppendValue(v7, Mutable);
            goto LABEL_36;
          }
          if (Mutable) {
LABEL_36:
          }
            CFRelease(Mutable);
          if (v23) {
            CFRelease(v23);
          }
        }
        CFRelease(v12);
        goto LABEL_40;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v34 = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "iAP2MsgCopyDataAsCFString failed with err: %x", buf, 8u);
      if (v12) {
        goto LABEL_30;
      }
    }
LABEL_40:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
  }
  while (NextParam);
  if (!v7) {
    return 0;
  }
  uint64_t result = CFArrayGetCount(v7);
  if (result)
  {
    __int16 v24 = *(const void **)(v5 + 72);
    if (v24) {
      CFRelease(v24);
    }
    *(void *)(v5 + 72) = v7;
    uint64_t v25 = gLogObjects;
    int v26 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v27 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      uint64_t v27 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v34 = v25;
        *(_WORD *)&v34[8] = 1024;
        LODWORD(v35) = v26;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        uint64_t v7 = *(__CFArray **)(v30 + 72);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = *(void *)(v29 + 8);
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v34 = v28;
      *(_WORD *)&v34[8] = 2112;
      uint64_t v35 = v7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "EndpointUUID: %@ received app icon list: %@", buf, 0x16u);
      uint64_t v7 = *(__CFArray **)(v30 + 72);
    }
    return platform_appLinks_requestAppIcons(*(void *)(v29 + 8), (uint64_t)v7);
  }
  return result;
}

uint64_t iap2_appLinks_appLinksUpdateHandler(uint64_t *a1, CFDictionaryRef theDict)
{
  int v89 = 0;
  uint64_t valuePtr = 0;
  if (!a1) {
    return 0;
  }
  if (!theDict) {
    return 0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"appLinksState");
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(theDict, @"appList");
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"appLinksSubFeature");
  if (!Value) {
    return 0;
  }
  CFNumberRef v7 = v6;
  if (!v6) {
    return 0;
  }
  if (!v5) {
    return 0;
  }
  CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
  CFNumberGetValue(v7, kCFNumberIntType, &v89);
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
  if (!Feature) {
    return 0;
  }
  int v9 = v89;
  if (v89 == 1)
  {
    *(void *)(Feature + 32) = valuePtr;
  }
  else if (v89)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v10 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      iap2_appLinks_appLinksUpdateHandler_cold_8();
    }
    int v9 = v89;
  }
  else
  {
    *(void *)(Feature + 8) = valuePtr;
  }
  if (!*a1) {
    return 0;
  }
  uint64_t v87 = a1;
  if (v9 == 1)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFStringRef v12 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      CFStringRef v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = a1[1];
      *(_DWORD *)buf = 138412290;
      *(void *)long long v91 = v23;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received EA app links update for endpoint: %@", buf, 0xCu);
    }
    uint64_t v24 = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (!v24) {
      return 0;
    }
    uint64_t v25 = v24;
    if (!*(unsigned char *)(v24 + 104) || !*(unsigned char *)(v24 + 44)) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v26 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v26 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFArrayGetCount(v5);
      *(_DWORD *)buf = 134217984;
      *(void *)long long v91 = Count;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "app links count: %ld", buf, 0xCu);
    }
    if (CFArrayGetCount(v5)) {
      unsigned int v81 = _calculateListCap(v25, 1, v5);
    }
    else {
      unsigned int v81 = 0;
    }
    uint64_t v29 = (uint64_t)(a1 + 15);
    iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0, 0);
    unint64_t v30 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 3, *(unsigned char *)(v25 + 32));
    if (*(void *)(v25 + 32) == 2)
    {
      if (!(iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0, 5, v81) | v30))
      {
LABEL_80:
        if (!CFArrayGetCount(v5)) {
          return 0;
        }
        unsigned int v85 = _iAP2MessageCutoffSize((uint64_t)a1);
        iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0, 0);
        if (!v81) {
          return 0;
        }
        CFIndex v31 = 0;
        __int16 v32 = 0;
        int v79 = 0;
        uint64_t v83 = v81 - 1;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v31);
          if (!ValueAtIndex) {
            goto LABEL_112;
          }
          CFDictionaryRef v34 = ValueAtIndex;
          uint64_t v35 = iAP2MsgAddGroupParam(v29, 4);
          if (v35) {
            ++v32;
          }
          iAP2MsgAddU16Param(v29, (uint64_t)v35, 0, (unsigned __int16)v31);
          CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v34, @"CARApplicationBundleIdentifierKey");
          iAP2MsgAddCFStringParam(v29, (uint64_t)v35, 1, v36);
          CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v34, @"CARApplicationLocalizedNameKey");
          iAP2MsgAddCFStringParam(v29, (uint64_t)v35, 2, v37);
          if (*(_WORD *)(v25 + 42))
          {
            CFDataRef v38 = (const __CFData *)CFDictionaryGetValue(v34, @"iconDataHash");
            if (v38)
            {
              CFDataRef v39 = v38;
              BytePtr = CFDataGetBytePtr(v38);
              unsigned __int16 Length = CFDataGetLength(v39);
              iAP2MsgAddDataParam(v29, (uint64_t)v35, 4, BytePtr, Length);
            }
            CFMutableSetRef Mutable = *(__CFSet **)(v25 + 64);
            if (!Mutable)
            {
              CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1, &kCFTypeSetCallBacks);
              *(void *)(v25 + 64) = Mutable;
            }
            uint64_t v43 = CFDictionaryGetValue(v34, @"CARApplicationBundleIdentifierKey");
            CFSetAddValue(Mutable, v43);
          }
          unsigned int MsgLen = iAP2MsgGetMsgLen(v29);
          uint64_t v45 = gLogObjects;
          int v46 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            CFStringRef v47 = *(NSObject **)(gLogObjects + 392);
          }
          else
          {
            CFStringRef v47 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v91 = v45;
              *(_WORD *)&v91[8] = 1024;
              v92[0] = v46;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)long long v91 = MsgLen;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v85;
            _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "messageSize: %d bytes, messageCutoffSize: %d bytes", buf, 0xEu);
          }
          if (MsgLen <= v85 && v83 != v31) {
            goto LABEL_112;
          }
          uint64_t v48 = gLogObjects;
          int v49 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            uint64_t v50 = *(NSObject **)(gLogObjects + 392);
          }
          else
          {
            uint64_t v50 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)long long v91 = v48;
              *(_WORD *)&v91[8] = 1024;
              v92[0] = v49;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)long long v91 = (unsigned __int16)v79;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v31 + 1;
            LOWORD(v92[0]) = 1024;
            *(_DWORD *)((char *)v92 + 2) = v81;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Sending AppLinksUpdate message (%d, entry: %d/%d)", buf, 0x14u);
            ++v79;
          }
          if (!v32) {
            goto LABEL_111;
          }
          iap2_sessionControl_sendOutgoingMessage(a1, v29);
          if (v31 < (int)v83) {
            break;
          }
LABEL_112:
          if (v81 == ++v31) {
            return 0;
          }
        }
        iAP2MsgInit(v29, 44289, a1[24], 0xFFFF, 0, 0);
LABEL_111:
        __int16 v32 = 0;
        goto LABEL_112;
      }
    }
    else if (!v30)
    {
      goto LABEL_80;
    }
    iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    goto LABEL_80;
  }
  if (v9)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v13 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      uint64_t v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      iap2_appLinks_appLinksUpdateHandler_cold_1();
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = a1[1];
      *(_DWORD *)buf = 138412290;
      *(void *)long long v91 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Received CarPlay app links update for endpoint: %@", buf, 0xCu);
    }
    uint64_t v15 = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (v15)
    {
      uint64_t v16 = v15;
      if (*(unsigned char *)(v15 + 104))
      {
        if (*(unsigned char *)(v15 + 20))
        {
          CFTypeRef v17 = iap2_accAuthentication_copyCertificateSerial((uint64_t)a1);
          if (v17)
          {
            CFTypeRef v18 = v17;
            char isCarPlayPairedWithCertSerial = platform_CarPlay_isCarPlayPairedWithCertSerial((uint64_t)v17);
            if (gLogObjects) {
              BOOL v20 = gNumLogObjects <= 49;
            }
            else {
              BOOL v20 = 1;
            }
            int v21 = !v20;
            CFStringRef cf = v18;
            if ((isCarPlayPairedWithCertSerial & 1) == 0)
            {
              if (v21)
              {
                v76 = *(NSObject **)(gLogObjects + 392);
              }
              else
              {
                v76 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Accessory is not paired to CarPlay, app links are unavailable!", buf, 2u);
              }
LABEL_184:
              CFRelease(cf);
              return 0;
            }
            if (v21)
            {
              CFNumberRef v22 = *(NSObject **)(gLogObjects + 392);
            }
            else
            {
              CFNumberRef v22 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              CFIndex v28 = CFArrayGetCount(v5);
              *(_DWORD *)buf = 134217984;
              *(void *)long long v91 = v28;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "app links count: %ld", buf, 0xCu);
            }
            if (CFArrayGetCount(v5)) {
              unsigned int v82 = _calculateListCap(v16, 0, v5);
            }
            else {
              unsigned int v82 = 0;
            }
            uint64_t v51 = (uint64_t)(a1 + 15);
            iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0, 0);
            unint64_t v52 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 0, *(unsigned char *)(v16 + 8));
            if (*(void *)(v16 + 8) == 2)
            {
              if (!(iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0, 2, v82) | v52)) {
                goto LABEL_120;
              }
            }
            else if (!v52)
            {
LABEL_120:
              if (CFArrayGetCount(v5))
              {
                unsigned int v86 = _iAP2MessageCutoffSize((uint64_t)a1);
                iAP2MsgInit(v51, 44289, a1[24], 0xFFFF, 0, 0);
                if (v82)
                {
                  CFIndex v53 = 0;
                  __int16 v54 = 0;
                  int v80 = 0;
                  uint64_t v84 = v82 - 1;
                  while (1)
                  {
                    CFDictionaryRef v55 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v53);
                    if (v55)
                    {
                      CFDictionaryRef v56 = v55;
                      int v57 = iAP2MsgAddGroupParam(v51, 1);
                      if (v57) {
                        ++v54;
                      }
                      CFStringRef v58 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationCategoryKey");
                      if (!v58) {
                        goto LABEL_184;
                      }
                      CFStringRef v59 = v58;
                      iAP2MsgAddU16Param(v51, (uint64_t)v57, 0, (unsigned __int16)v53);
                      if (CFStringCompare(v59, @"audio", 0))
                      {
                        if (CFStringCompare(v59, @"calling", 0))
                        {
                          if (CFStringCompare(v59, @"messaging", 0))
                          {
                            if (CFStringCompare(v59, @"navigation", 0))
                            {
                              if (CFStringCompare(v59, @"automaker", 0))
                              {
                                if (CFStringCompare(v59, @"quick ordering", 0))
                                {
                                  if (CFStringCompare(v59, @"charging", 0))
                                  {
                                    if (CFStringCompare(v59, @"parking", 0))
                                    {
                                      if (CFStringCompare(v59, @"productivity", 0))
                                      {
                                        if (CFStringCompare(v59, @"fueling", 0))
                                        {
                                          if (CFStringCompare(v59, @"driving task", 0)) {
                                            unsigned int v60 = 0;
                                          }
                                          else {
                                            unsigned int v60 = 12;
                                          }
                                        }
                                        else
                                        {
                                          unsigned int v60 = 11;
                                        }
                                      }
                                      else
                                      {
                                        unsigned int v60 = 10;
                                      }
                                    }
                                    else
                                    {
                                      unsigned int v60 = 9;
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v60 = 8;
                                  }
                                }
                                else
                                {
                                  unsigned int v60 = 7;
                                }
                              }
                              else
                              {
                                unsigned int v60 = 5;
                              }
                            }
                            else
                            {
                              unsigned int v60 = 3;
                            }
                          }
                          else
                          {
                            unsigned int v60 = 1;
                          }
                        }
                        else
                        {
                          unsigned int v60 = 2;
                        }
                      }
                      else
                      {
                        unsigned int v60 = 4;
                      }
                      iAP2MsgAddU16Param(v51, (uint64_t)v57, 3, v60);
                      CFStringRef v61 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationBundleIdentifierKey");
                      iAP2MsgAddCFStringParam(v51, (uint64_t)v57, 1, v61);
                      CFStringRef v62 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationLocalizedNameKey");
                      iAP2MsgAddCFStringParam(v51, (uint64_t)v57, 2, v62);
                      if (*(_WORD *)(v16 + 18))
                      {
                        CFDataRef v63 = (const __CFData *)CFDictionaryGetValue(v56, @"iconDataHash");
                        if (v63)
                        {
                          CFDataRef v64 = v63;
                          CFDataRef v65 = CFDataGetBytePtr(v63);
                          unsigned __int16 v66 = CFDataGetLength(v64);
                          iAP2MsgAddDataParam(v51, (uint64_t)v57, 4, v65, v66);
                        }
                        int v67 = *(__CFSet **)(v16 + 56);
                        if (!v67)
                        {
                          int v67 = CFSetCreateMutable(kCFAllocatorDefault, 1, &kCFTypeSetCallBacks);
                          *(void *)(v16 + 56) = v67;
                        }
                        BOOL v68 = CFDictionaryGetValue(v56, @"CARApplicationBundleIdentifierKey");
                        CFSetAddValue(v67, v68);
                      }
                      unsigned int v69 = iAP2MsgGetMsgLen(v51);
                      uint64_t v70 = gLogObjects;
                      int v71 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 50)
                      {
                        int v72 = *(NSObject **)(gLogObjects + 392);
                      }
                      else
                      {
                        int v72 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          *(void *)long long v91 = v70;
                          *(_WORD *)&v91[8] = 1024;
                          v92[0] = v71;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                        }
                      }
                      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)long long v91 = v69;
                        *(_WORD *)&v91[4] = 1024;
                        *(_DWORD *)&v91[6] = v86;
                        _os_log_debug_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "messageSize: %d bytes, messageCutoffSize: %d bytes", buf, 0xEu);
                      }
                      if (v69 > v86 || v84 == v53)
                      {
                        uint64_t v73 = gLogObjects;
                        int v74 = gNumLogObjects;
                        if (gLogObjects && gNumLogObjects >= 50)
                        {
                          char v75 = *(NSObject **)(gLogObjects + 392);
                        }
                        else
                        {
                          char v75 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)long long v91 = v73;
                            *(_WORD *)&v91[8] = 1024;
                            v92[0] = v74;
                            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                          }
                        }
                        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 67109632;
                          *(_DWORD *)long long v91 = (unsigned __int16)v80;
                          *(_WORD *)&v91[4] = 1024;
                          *(_DWORD *)&v91[6] = v53 + 1;
                          LOWORD(v92[0]) = 1024;
                          *(_DWORD *)((char *)v92 + 2) = v82;
                          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Sending AppLinksUpdate message (%d, entry: %d/%d)", buf, 0x14u);
                          ++v80;
                        }
                        if (!v54) {
                          goto LABEL_175;
                        }
                        iap2_sessionControl_sendOutgoingMessage(v87, v51);
                        if (v53 < (int)v84) {
                          break;
                        }
                      }
                    }
LABEL_176:
                    if (v82 == ++v53) {
                      goto LABEL_184;
                    }
                  }
                  iAP2MsgInit(v51, 44289, v87[24], 0xFFFF, 0, 0);
LABEL_175:
                  __int16 v54 = 0;
                  goto LABEL_176;
                }
              }
              goto LABEL_184;
            }
            iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
            goto LABEL_120;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t iap2_appLinks_appLinksAppIconHandler(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0x18u);
      if (result)
      {
        uint64_t v5 = result;
        CFMutableSetRef Mutable = *(__CFArray **)(result + 96);
        if (!Mutable)
        {
          CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          *(void *)(v5 + 96) = Mutable;
        }
        CFArrayAppendValue(Mutable, a2);
        _appLinksProcessAppIcon(a1);
        return 1;
      }
    }
  }
  return result;
}

uint64_t _appLinksProcessAppIcon(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = iap2_feature_getFeature(result, 0x18u);
    if (result)
    {
      uint64_t v2 = result;
      pthread_mutex_lock(&_gIconLock);
      if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), 0);
        CFTypeRef v4 = CFRetain(ValueAtIndex);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), 0);
        uint64_t v5 = *(NSObject **)(v2 + 48);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 0x40000000;
        v6[2] = ___appLinksProcessAppIcon_block_invoke;
        v6[3] = &__block_descriptor_tmp_13;
        v6[4] = v1;
        v6[5] = v4;
        dispatch_async(v5, v6);
      }
      return pthread_mutex_unlock(&_gIconLock);
    }
  }
  return result;
}

unsigned char *_createFeature_17(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 0x70uLL, 0x10600409A92A957uLL);
  id v3 = v2;
  if (v2)
  {
    v2[104] = 0;
    v2[20] = 0;
    *(void *)uint64_t v2 = 0;
    *((_DWORD *)v2 + 4) = 0;
    v2[44] = 0;
    *((void *)v2 + 3) = 0;
    *((_DWORD *)v2 + 10) = 0;
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.accessoryd.appLinks.iconQueue", 0);
    *((void *)v3 + 7) = 0;
    *((void *)v3 + 8) = 0;
    *((void *)v3 + 6) = v4;
    *((void *)v3 + 10) = 0;
    *((_DWORD *)v3 + 22) = 0;
    iAP2LinkRegisterEventCallback(*(void *)(*(void *)(a1 + 32) + 24), 1u, (uint64_t)_appLinksiAP2LinkEventNotifyHandler);
  }
  return v3;
}

uint64_t _destroyFeature_17(CFSetRef **a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      if (*((unsigned char *)v5 + 104)) {
        _removeSubscribers(a2, *a1);
      }
      if (*((unsigned char *)v5 + 89))
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)a2, *((unsigned __int8 *)v5 + 90));
        if (TransferEntry)
        {
          unint64_t v7 = TransferEntry;
          uint64_t v8 = *(void *)(TransferEntry + 8);
          if (v8)
          {
            iap2_sessionFileTransfer_removeTransferForFeature((uint64_t)a2, 24, v8);
            uint64_t v9 = *(void *)(v7 + 8);
            if (*(void *)(v9 + 64))
            {
              free(*(void **)(v9 + 64));
              uint64_t v9 = *(void *)(v7 + 8);
              *(void *)(v9 + 64) = 0;
            }
            iAP2FileTransferRelease(v9);
          }
        }
        pthread_mutex_lock(&_gIconLock);
        *(_WORD *)((char *)v5 + 89) = 0;
        pthread_mutex_unlock(&_gIconLock);
      }
      CFSetRef v10 = v5[10];
      if (v10)
      {
        CFRelease(v10);
        v5[10] = 0;
      }
      *((_WORD *)v5 + 45) = 0;
      if (*v5)
      {
        CFRelease(*v5);
        CFSetRef *v5 = 0;
      }
      CFSetRef v11 = v5[3];
      if (v11)
      {
        CFRelease(v11);
        v5[3] = 0;
      }
      CFSetRef v12 = v5[9];
      if (v12)
      {
        CFRelease(v12);
        v5[9] = 0;
      }
      CFSetRef v13 = v5[12];
      if (v13)
      {
        CFRelease(v13);
        v5[12] = 0;
      }
      CFSetRef v14 = v5[7];
      if (v14)
      {
        CFRelease(v14);
        v5[7] = 0;
      }
      CFSetRef v15 = v5[8];
      if (v15)
      {
        CFRelease(v15);
        v5[8] = 0;
      }
      uint64_t v16 = v5[6];
      if (v16)
      {
        dispatch_release(v16);
        void v5[6] = 0;
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_15(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList_1, 5u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 0x18u);
  }
  return v3;
}

float _appLinksiAP2LinkEventNotifyHandler(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || a2 != 1) {
    return result;
  }
  if (a3) {
    uint64_t v5 = *(unsigned __int8 **)(a3 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 50)
  {
    char v6 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    char v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = obfuscatedPointer(a3);
    if (a3)
    {
      uint64_t v25 = obfuscatedPointer(*(void *)(a3 + 64));
      int v24 = *(unsigned __int8 *)(a3 + 109);
      int v26 = *(_DWORD *)(a3 + 104);
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = 0;
      int v26 = -1;
    }
    if (v5)
    {
      int v28 = *v5;
      int v29 = v5[1];
      int v27 = v5[2];
      int v30 = v5[3];
    }
    else
    {
      int v27 = -1;
      int v28 = -1;
      int v29 = -1;
      int v30 = -1;
    }
    int v41 = 134219776;
    *(void *)int v42 = v23;
    *(_WORD *)&v42[8] = 2048;
    uint64_t v43 = v25;
    *(_WORD *)CFStringRef v44 = 1024;
    *(_DWORD *)&v44[2] = v24;
    *(_WORD *)uint64_t v45 = 1024;
    *(_DWORD *)&v45[2] = v26;
    __int16 v46 = 1024;
    int v47 = v28;
    __int16 v48 = 1024;
    int v49 = v29;
    __int16 v50 = 1024;
    int v51 = v27;
    __int16 v52 = 1024;
    int v53 = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got kiAP2LinkEventNotifyBuffXferStateChange fileXfer=%p(endCBUserInfo=%p ID=%u state=%d) context(needCancel=%d lastSeenSetupState=%d sentSetup=%d gotStart=%d)", (uint8_t *)&v41, 0x3Au);
    if (!a3) {
      return result;
    }
  }
  else if (!a3)
  {
    return result;
  }
  if (!*(void *)(a3 + 64)) {
    return result;
  }
  if (*(_WORD *)(a3 + 112) != 8) {
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 176);
  if (!v8) {
    return result;
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9 || !v5) {
    return result;
  }
  int v10 = *(_DWORD *)(a3 + 104);
  if (v10 != 2) {
    goto LABEL_28;
  }
  if (v5[2])
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFSetRef v13 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      CFSetRef v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v41 = 134218240;
        *(void *)int v42 = v11;
        *(_WORD *)&v42[8] = 1024;
        LODWORD(v43) = v12;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v41, 0x12u);
        int v10 = *(_DWORD *)(a3 + 104);
        goto LABEL_25;
      }
    }
    int v10 = 2;
LABEL_25:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(unsigned __int8 *)(a3 + 109);
      int v35 = *(unsigned __int16 *)(a3 + 112);
      int v36 = v5[3];
      int v41 = 67110144;
      *(_DWORD *)int v42 = v34;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v35;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = v10;
      HIWORD(v43) = 1024;
      *(_DWORD *)CFStringRef v44 = v36;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)uint64_t v45 = 1;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->gotStart %d->%d", (uint8_t *)&v41, 0x20u);
      int v10 = *(_DWORD *)(a3 + 104);
    }
    v5[3] = 1;
LABEL_28:
    if (v10 == 3 && v5[1])
    {
      if (gLogObjects && gNumLogObjects >= 50)
      {
        CFSetRef v14 = *(NSObject **)(gLogObjects + 392);
      }
      else
      {
        CFSetRef v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v37 = *(unsigned __int8 *)(a3 + 109);
        int v38 = *(unsigned __int16 *)(a3 + 112);
        int v39 = *(_DWORD *)(a3 + 104);
        int v40 = v5[2];
        int v41 = 67110144;
        *(_DWORD *)int v42 = v37;
        *(_WORD *)&v42[4] = 1024;
        *(_DWORD *)&v42[6] = v38;
        LOWORD(v43) = 1024;
        *(_DWORD *)((char *)&v43 + 2) = v39;
        HIWORD(v43) = 1024;
        *(_DWORD *)CFStringRef v44 = v40;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)uint64_t v45 = 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->sentSetup %d->%d", (uint8_t *)&v41, 0x20u);
      }
      _DWORD v5[2] = 1;
    }
  }
  if (gLogObjects && gNumLogObjects >= 50)
  {
    CFSetRef v15 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    CFSetRef v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
  int v17 = *(_DWORD *)(a3 + 104);
  if (v16)
  {
    int v31 = *(unsigned __int8 *)(a3 + 109);
    int v32 = *(unsigned __int16 *)(a3 + 112);
    int v33 = v5[1];
    int v41 = 67110144;
    *(_DWORD *)int v42 = v31;
    *(_WORD *)&v42[4] = 1024;
    *(_DWORD *)&v42[6] = v32;
    LOWORD(v43) = 1024;
    *(_DWORD *)((char *)&v43 + 2) = v17;
    HIWORD(v43) = 1024;
    *(_DWORD *)CFStringRef v44 = v33;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)uint64_t v45 = v17 == 1;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->lastSeenSetupState %d->%d", (uint8_t *)&v41, 0x20u);
    int v17 = *(_DWORD *)(a3 + 104);
  }
  v5[1] = v17 == 1;
  if (*v5)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFTypeRef v18 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      CFTypeRef v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      int v19 = *(unsigned __int8 *)(a3 + 109);
      int v20 = *(unsigned __int16 *)(a3 + 112);
      int v21 = *(_DWORD *)(a3 + 104);
      int v41 = 67109632;
      *(_DWORD *)int v42 = v19;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v20;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cancel fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v41, 0x14u);
    }
    unsigned __int8 *v5 = 0;
    iAP2FileTransferCancel(a3);
    iap2_sessionFileTransfer_removeTransferForFeature(v9, 24, a3);
    CFNumberRef v22 = *(void **)(a3 + 64);
    if (v22)
    {
      free(v22);
      *(void *)(a3 + 64) = 0;
    }
    iAP2FileTransferRelease(a3);
  }
  return result;
}

uint64_t _calculateListCap(uint64_t a1, int a2, CFArrayRef theArray)
{
  unsigned __int16 v3 = 0;
  if (a1 && theArray)
  {
    if (a2 == 1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
    }
    else if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 50)
      {
        char v6 = *(NSObject **)(gLogObjects + 392);
      }
      else
      {
        char v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        _calculateListCap_cold_2();
      }
      unsigned int v5 = 0;
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    }
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v8 = Count;
    if ((unsigned __int16)Count <= v5 || v5 == 0) {
      unsigned __int16 v3 = Count;
    }
    else {
      unsigned __int16 v3 = v5;
    }
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v10 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12[0] = 67109888;
      v12[1] = v3;
      __int16 v13 = 2048;
      CFIndex v14 = v8;
      __int16 v15 = 1024;
      int v16 = 0;
      __int16 v17 = 1024;
      unsigned int v18 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "listCap: %d (listCount: %ld, hardCap: %d, listMax: %d)", (uint8_t *)v12, 0x1Eu);
    }
  }
  return v3;
}

uint64_t _iAP2MessageCutoffSize(uint64_t a1)
{
  unsigned int MaxSendPayloadSize = iap2_endpoint_getMaxSendPayloadSize(a1);
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109376;
    v4[1] = MaxSendPayloadSize;
    __int16 v5 = 1024;
    unsigned int v6 = MaxSendPayloadSize >> 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "maxPayloadSize: %d, messageCutoffSize: %d", (uint8_t *)v4, 0xEu);
  }
  return MaxSendPayloadSize >> 1;
}

void ___appLinksProcessAppIcon_block_invoke(uint64_t a1)
{
  _appLinksAppIconResponse(*(uint64_t **)(a1 + 32), *(const __CFDictionary **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void _appLinksAppIconResponse(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!*a1) {
    return;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
  if (!Feature) {
    return;
  }
  uint64_t v5 = Feature;
  if (!*(unsigned char *)(Feature + 104)) {
    return;
  }
  CFIndex Count = CFDictionaryGetCount(a2);
  if (!Count) {
    return;
  }
  size_t v7 = 8 * Count;
  __chkstk_darwin(Count);
  CFIndex v8 = (CFDictionaryRef *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = memset(v8, 170, v7);
  __chkstk_darwin(v9);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(a2, (const void **)v8, (const void **)v8);
  CFStringRef v10 = (const __CFString *)*v8;
  if (!*v8) {
    return;
  }
  CFDictionaryRef v11 = *v8;
  CFNumberRef Value = CFDictionaryGetValue(*v8, @"iconData");
  CFDataRef v13 = (const __CFData *)CFDictionaryGetValue(v11, @"iconDataHash");
  CFSetRef v14 = *(const __CFSet **)(v5 + 56);
  if ((v14 && CFSetContainsValue(v14, v10)
     || (CFSetRef v15 = *(const __CFSet **)(v5 + 64)) != 0 && CFSetContainsValue(v15, v10))
    && Value
    && v13
    && CFDataGetLength((CFDataRef)Value)
    && CFDataGetLength(v13))
  {
    if (*(unsigned char *)(v5 + 88))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v5 + 96), 0, a2);
      return;
    }
    int v19 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
    int v20 = malloc_type_malloc(0xFFFFuLL, 0x6599D3D9uLL);
    pthread_mutex_lock(&_gIconLock);
    *(unsigned char *)(v5 + 88) = 1;
    pthread_mutex_unlock(&_gIconLock);
    if (*(unsigned char *)(v5 + 89))
    {
      unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)a1, *(unsigned __int8 *)(v5 + 90));
      if (TransferEntry)
      {
        uint64_t v22 = *(void *)(TransferEntry + 8);
        if (v22) {
          _cancelPendingTransfer(v22);
        }
      }
      pthread_mutex_lock(&_gIconLock);
      *(_WORD *)(v5 + 89) = 0;
      pthread_mutex_unlock(&_gIconLock);
    }
    uint64_t v23 = a1[4];
    if (!v23 || (uint64_t v24 = *(void *)(v23 + 24)) == 0)
    {
LABEL_53:
      pthread_mutex_lock(&_gIconLock);
      *(unsigned char *)(v5 + 88) = 0;
      pthread_mutex_unlock(&_gIconLock);
      if (v19) {
        free(v19);
      }
      if (v20) {
        free(v20);
      }
      return;
    }
    int v41 = v20;
    uint64_t v25 = (uint64_t)v19;
    int SessionForService = iAP2LinkGetSessionForService(v24, 1);
    pthread_mutex_lock(&_gIconLock);
    int v27 = (char *)(v5 + 90);
    BOOL BufferID = iAP2FileTransferAllocateBufferID(*(void *)(a1[4] + 24), SessionForService, (unsigned char *)(v5 + 90));
    pthread_mutex_unlock(&_gIconLock);
    if (BufferID)
    {
      pthread_mutex_lock(&_gIconLock);
      *(unsigned char *)(v5 + 89) = 1;
      pthread_mutex_unlock(&_gIconLock);
      int v29 = *(const void **)(v5 + 80);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(v5 + 80) = 0;
      }
      *(void *)(v5 + 80) = CFRetain(Value);
      *(unsigned char *)(v5 + 91) = 8;
      int v30 = malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
      int v19 = (void *)v25;
      int v20 = v41;
      if (v30)
      {
        int v31 = v30;
        iAP2FileTransferCreate(*(unsigned __int8 **)(a1[4] + 24), SessionForService, *v27, 0, 0, 0, (uint64_t)v30);
        unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v55 = v32;
        long long v56 = v32;
        long long v53 = v32;
        long long v54 = v32;
        long long v51 = v32;
        long long v52 = v32;
        long long v49 = v32;
        long long v50 = v32;
        *(_OWORD *)&buf[16] = v32;
        *(_OWORD *)buf = v32;
        *(_WORD *)buf = CFStringGetLength(v10) + 1;
        CFStringGetCString(v10, &buf[8], *(unsigned __int16 *)buf, 0x8000100u);
        BYTE2(v57) = 0;
        iAP2FileTransferTypeData((uint64_t)v31, 8, (unsigned __int16 *)buf);
        if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)a1, 24, (uint64_t)v31, 0))
        {
          int v33 = malloc_type_malloc(0x10uLL, 0x102004075F474C6uLL);
          *(void *)int v33 = a1;
          v33[8] = *v27;
          *((_DWORD *)v33 + 3) = 8;
          int v34 = logObjectForModule_22();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v35 = a1[1];
            int v42 = 136315650;
            uint64_t v43 = "_appLinksAppIconResponse";
            __int16 v44 = 1024;
            int v45 = 1678;
            __int16 v46 = 2112;
            uint64_t v47 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _appIconFileTransferIDSent endpointUUID: %@", (uint8_t *)&v42, 0x1Cu);
          }
          iAP2MsgInit(v25, 44292, (uint64_t)v20, 0xFFFF, (uint64_t)_appIconFileTransferIDSent, (uint64_t)v33);
          iAP2MsgAddCFStringParam(v25, 0, 0, v10);
          iAP2MsgAddU8Param(v25, 0, 1, 1);
          iAP2MsgAddU8Param(v25, 0, 2, *v27);
          BytePtr = CFDataGetBytePtr(v13);
          unsigned __int16 Length = CFDataGetLength(v13);
          iAP2MsgAddDataParam(v25, 0, 3, BytePtr, Length);
          if ((iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(a1, v25) & 1) == 0) {
            iAP2FileTransferCancel((uint64_t)v31);
          }
          return;
        }
        int v39 = logObjectForModule_22();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          _appLinksAppIconResponse_cold_2(v39);
        }
        free(v31);
      }
      goto LABEL_53;
    }
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v38 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v38 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      _appLinksAppIconResponse_cold_3(v38);
    }
  }
  else
  {
    int v16 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
    __int16 v17 = malloc_type_malloc(0xFFFFuLL, 0x98D3B453uLL);
    if (gLogObjects && gNumLogObjects >= 50)
    {
      unsigned int v18 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      unsigned int v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "_appLinksAppIconResponse";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1733;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _appIconFileTransferIDSent", buf, 0x12u);
    }
    iAP2MsgInit((uint64_t)v16, 44292, (uint64_t)v17, 0xFFFF, (uint64_t)_appIconFileTransferIDSent, 0);
    iAP2MsgAddCFStringParam((uint64_t)v16, 0, 0, v10);
    iAP2MsgAddU8Param((uint64_t)v16, 0, 1, 0);
    iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)v16);
  }
}

void _cancelPendingTransfer(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 109);
    int v4 = *(unsigned __int16 *)(a1 + 112);
    int v5 = *(_DWORD *)(a1 + 104);
    int v19 = 67109632;
    int v20 = v3;
    __int16 v21 = 1024;
    int v22 = v4;
    __int16 v23 = 1024;
    int v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "_cancelPendingTransfer fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 176);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      CFIndex v8 = *(unsigned char **)(a1 + 64);
      if (v8)
      {
        *CFIndex v8 = 1;
        int v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 2 || v8[3]) {
          goto LABEL_13;
        }
      }
      else
      {
        int v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 2)
        {
LABEL_13:
          if (gLogObjects && gNumLogObjects >= 50)
          {
            CFStringRef v10 = *(NSObject **)(gLogObjects + 392);
          }
          else
          {
            CFStringRef v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            int v11 = *(unsigned __int8 *)(a1 + 109);
            int v12 = *(unsigned __int16 *)(a1 + 112);
            int v13 = *(_DWORD *)(a1 + 104);
            int v19 = 67109632;
            int v20 = v11;
            __int16 v21 = 1024;
            int v22 = v12;
            __int16 v23 = 1024;
            int v24 = v13;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "_cancelPendingTransfer: Call Cancel fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
          }
          if (v8) {
            *CFIndex v8 = 0;
          }
          iAP2FileTransferCancel(a1);
          iap2_sessionFileTransfer_removeTransferForFeature(v7, 24, a1);
          CFSetRef v14 = *(void **)(a1 + 64);
          if (v14)
          {
            free(v14);
            *(void *)(a1 + 64) = 0;
          }
          iAP2FileTransferRelease(a1);
          return;
        }
      }
      if (v9)
      {
        if (v9 == 5 && v8) {
          *CFIndex v8 = 0;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 50)
        {
          CFSetRef v15 = *(NSObject **)(gLogObjects + 392);
        }
        else
        {
          CFSetRef v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = *(unsigned __int8 *)(a1 + 109);
          int v17 = *(unsigned __int16 *)(a1 + 112);
          int v18 = *(_DWORD *)(a1 + 104);
          int v19 = 67109632;
          int v20 = v16;
          __int16 v21 = 1024;
          int v22 = v17;
          __int16 v23 = 1024;
          int v24 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "_cancelPendingTransfer: Call Start fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
        }
        iAP2FileTransferStart(a1, 0, 0, 0, (uint64_t)_appIconFileTransferEndHandler, 0, 0, 0);
      }
    }
  }
}

void _appIconFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v5 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)buf = 134218754;
      CFStringRef v34 = (const __CFString *)v6;
      __int16 v35 = 1024;
      *(_DWORD *)int v36 = v7;
      *(_WORD *)&void v36[4] = 1024;
      *(_DWORD *)&v36[6] = a2;
      *(_WORD *)int v37 = 2080;
      *(void *)&v37[2] = dispatch_queue_get_label(0);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#AppIcon File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d currentDispatchQueue: %s", buf, 0x22u);
    }
    if (v4)
    {
      if (*(_DWORD *)(v4 + 12) == 8)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0x18u);
          if (Feature)
          {
            uint64_t v9 = Feature;
            if (gLogObjects && gNumLogObjects >= 50)
            {
              CFStringRef v10 = *(NSObject **)(gLogObjects + 392);
            }
            else
            {
              CFStringRef v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v11 = *(unsigned __int8 *)(v4 + 8);
              int v12 = *(_DWORD *)(v4 + 12);
              int v13 = *(unsigned __int8 *)(v9 + 90);
              int v14 = *(unsigned __int8 *)(v9 + 89);
              int v15 = *(unsigned __int8 *)(v9 + 91);
              *(_DWORD *)buf = 138544642;
              CFStringRef v34 = @"#AppIcon";
              __int16 v35 = 1024;
              *(_DWORD *)int v36 = v11;
              *(_WORD *)&void v36[4] = 1024;
              *(_DWORD *)&v36[6] = v12;
              *(_WORD *)int v37 = 1024;
              *(_DWORD *)&v37[2] = v13;
              *(_WORD *)&v37[6] = 1024;
              *(_DWORD *)&v37[8] = v14;
              LOWORD(v38) = 1024;
              *(_DWORD *)((char *)&v38 + 2) = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@ File transfer ID sent callback fired! context(ID=%u type=%u) currentTransferInfo(ID=%u valid=%d type=%u)", buf, 0x2Au);
            }
            if (!*(unsigned char *)(v9 + 91) || *(_DWORD *)(v4 + 12) == *(unsigned __int8 *)(v9 + 91))
            {
              unint64_t v16 = *(void *)v4;
              if (*(void *)v4)
              {
                if (iap2_feature_getFeature(*(void *)v4, 0x18u))
                {
                  int v17 = *(char *)(v4 + 8);
                  if (v17 < 0)
                  {
                    if (*(unsigned char *)(v9 + 89))
                    {
                      if (*(unsigned __int8 *)(v9 + 90) == v17)
                      {
                        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(v16, *(unsigned __int8 *)(v4 + 8));
                        if (TransferEntry)
                        {
                          uint64_t v21 = *(void *)(TransferEntry + 8);
                          if (v21)
                          {
                            if (*(_DWORD *)(v21 + 104))
                            {
                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v22 = *(NSObject **)(gLogObjects + 392);
                              }
                              else
                              {
                                int v22 = &_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }
                              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                                _appIconFileTransferIDSent_cold_6(v21, (int *)(v21 + 104), v22);
                              }
                            }
                            else
                            {
                              CFDataRef v23 = *(const __CFData **)(v9 + 80);
                              if (v23)
                              {
                                BytePtr = CFDataGetBytePtr(v23);
                                unsigned int Length = CFDataGetLength(*(CFDataRef *)(v9 + 80));
                              }
                              else
                              {
                                unsigned int Length = 0;
                                BytePtr = 0;
                              }
                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v24 = *(NSObject **)(gLogObjects + 392);
                              }
                              else
                              {
                                int v24 = &_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }
                              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                              {
                                int v25 = *(unsigned __int8 *)(v21 + 109);
                                int v26 = *(_DWORD *)(v21 + 104);
                                uint64_t v27 = obfuscatedPointer((uint64_t)BytePtr);
                                *(_DWORD *)buf = 138544642;
                                CFStringRef v34 = @"#AppIcon";
                                __int16 v35 = 2048;
                                *(void *)int v36 = v21;
                                *(_WORD *)&v36[8] = 1024;
                                *(_DWORD *)int v37 = v25;
                                *(_WORD *)&v37[4] = 1024;
                                *(_DWORD *)&v37[6] = v26;
                                *(_WORD *)&v37[10] = 2048;
                                uint64_t v38 = v27;
                                __int16 v39 = 1024;
                                unsigned int v40 = Length;
                                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%{public}@ start transfer (%p id=%d state=%d) pBuffer=%p bufferLen=%u", buf, 0x32u);
                              }
                              int v28 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
                              *int v28 = 0;
                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v29 = *(NSObject **)(gLogObjects + 392);
                              }
                              else
                              {
                                int v29 = &_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }
                              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
                                _appIconFileTransferIDSent_cold_3(v21, (int *)(v21 + 104), v29);
                              }
                              if ((iAP2FileTransferStart(v21, (uint64_t)BytePtr, Length, Length, (uint64_t)_appIconFileTransferEndHandler, (uint64_t)v28, 0, 0) & 1) == 0)
                              {
                                if (gLogObjects && gNumLogObjects >= 50)
                                {
                                  int v30 = *(NSObject **)(gLogObjects + 392);
                                }
                                else
                                {
                                  int v30 = &_os_log_default;
                                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                  }
                                }
                                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                                  _appIconFileTransferIDSent_cold_1(v30);
                                }
                                iAP2FileTransferCancel(v21);
                                iAP2FileTransferRelease(v21);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2)
    {
      int v18 = (void *)a1[6];
      if (v18)
      {
        free(v18);
        a1[6] = 0;
      }
      int v19 = (void *)a1[3];
      if (v19) {
        free(v19);
      }
      free(a1);
    }
  }
}

uint64_t _appIconFileTransferEndHandler(uint64_t a1, void *a2)
{
  if (!a1 || !*(void *)a1) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a1 + 104);
    int v40 = 67109120;
    LODWORD(v41) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#AppIcon File transfer end callback fired! state: %d", (uint8_t *)&v40, 8u);
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 176);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(v7, 0x18u);
  if (!Feature || !*(void *)a1) {
    return 0;
  }
  uint64_t v9 = Feature;
  if (gLogObjects && gNumLogObjects >= 50)
  {
    CFStringRef v10 = *(NSObject **)(gLogObjects + 392);
  }
  else
  {
    CFStringRef v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = *(_DWORD *)(a1 + 104);
    int v12 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(unsigned __int8 *)(v9 + 90);
    int v15 = *(unsigned __int8 *)(v9 + 89);
    int v16 = *(unsigned __int8 *)(v9 + 91);
    int v40 = 138544898;
    CFStringRef v41 = @"#AppIcon";
    __int16 v42 = 1024;
    *(_DWORD *)uint64_t v43 = v11;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v12;
    *(_WORD *)__int16 v44 = 2048;
    *(void *)&v44[2] = v13;
    __int16 v45 = 1024;
    int v46 = v14;
    __int16 v47 = 1024;
    int v48 = v15;
    __int16 v49 = 1024;
    int v50 = v16;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@ File transfer end callback fired! fileXfer(state=%d bufferID=%u size=%llu) currentTransferInfo(transferID=%u valid=%d type=%d)", (uint8_t *)&v40, 0x34u);
  }
  uint64_t v18 = a1 + 104;
  unsigned int v17 = *(_DWORD *)(a1 + 104);
  if (v17 > 7 || ((1 << v17) & 0xD0) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFDataRef v23 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      CFDataRef v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      _appIconFileTransferEndHandler_cold_1(v18, v23, v29, v30, v31, v32, v33, v34);
    }
    return 0;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v19 = *(void *)(*(void *)a1 + 176);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20) {
    return 0;
  }
  uint64_t v21 = iap2_sessionFileTransfer_removeTransferForFeature(*(void *)(v19 + 16), 24, a1);
  if ((v21 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v22 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v22 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      _appIconFileTransferEndHandler_cold_4(v22);
    }
  }
  int v24 = *(unsigned __int8 *)(a1 + 109);
  if (*(void **)(a1 + 64) == a2)
  {
    if (a2)
    {
      free(a2);
      *(void *)(a1 + 64) = 0;
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v25 = *(NSObject **)(gLogObjects + 392);
    }
    else
    {
      int v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    {
      int v36 = *(_DWORD *)(a1 + 104);
      int v37 = *(unsigned __int8 *)(a1 + 109);
      int v38 = *(unsigned __int16 *)(a1 + 16);
      int v39 = *(unsigned __int16 *)(a1 + 64);
      int v40 = 138545154;
      CFStringRef v41 = @"#AppIcon";
      __int16 v42 = 2080;
      *(void *)uint64_t v43 = "_handleFileTransferEnd";
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)__int16 v44 = (unsigned __int16)a1;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&unsigned char v44[6] = v36;
      __int16 v45 = 1024;
      int v46 = v37;
      __int16 v47 = 1024;
      int v48 = v38;
      __int16 v49 = 1024;
      int v50 = (unsigned __int16)a2;
      __int16 v51 = 1024;
      int v52 = v39;
      _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "%{public}@ %s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!", (uint8_t *)&v40, 0x3Au);
    }
  }
  iAP2FileTransferRelease(a1);
  uint64_t v26 = iap2_feature_getFeature(v20, 0x18u);
  if (v26)
  {
    uint64_t v27 = v26;
    pthread_mutex_lock(&_gIconLock);
    if (*(unsigned char *)(v9 + 89) && v24 == *(unsigned __int8 *)(v9 + 90))
    {
      int v28 = *(const void **)(v9 + 80);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(v9 + 80) = 0;
      }
      *(unsigned char *)(v9 + 91) = 0;
      *(_WORD *)(v9 + 89) = 0;
    }
    *(unsigned char *)(v27 + 88) = 0;
    pthread_mutex_unlock(&_gIconLock);
    _appLinksProcessAppIcon(v20);
  }
  return v21;
}

void init_logging_signposts()
{
}

void init_logging_signpost_modules(uint64_t a1, char a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __init_logging_signpost_modules_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  char v4 = a2;
  void block[4] = a3;
  void block[5] = a1;
  if (init_logging_signpost_modules_onceToken != -1) {
    dispatch_once(&init_logging_signpost_modules_onceToken, block);
  }
}

void __init_logging_signpost_modules_block_invoke(uint64_t a1)
{
  uint64_t v2 = &off_1001B7000;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(const char **)(v6 + v3);
      if (!v7)
      {
        uint64_t v7 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v12) = v4;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Subsystem missing for logging module %d!\n(Check LoggingSignpostModuleEntry_t table)", buf, 8u);
          uint64_t v6 = *(void *)(a1 + 32);
          uint64_t v7 = "<Undefined>";
        }
      }
      CFIndex v8 = *(const char **)(v6 + v3 + 8);
      if (!v8)
      {
        CFIndex v8 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __init_logging_signpost_modules_block_invoke_cold_1(v15, v4, &v16);
          CFIndex v8 = "<Undefined>";
        }
      }
      os_log_t v9 = os_log_create(v7, v8);
      *(void *)(*(void *)(a1 + 40) + 8 * v4) = v9;
      if (v9)
      {
        ++v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          int v12 = v7;
          __int16 v13 = 2080;
          int v14 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Created log object %s: %s", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v12 = v7;
        __int16 v13 = 2080;
        int v14 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to create os_log_t object %s: %s!", buf, 0x16u);
      }
      ++v4;
      unint64_t v10 = *(unsigned __int8 *)(a1 + 48);
      v3 += 16;
    }
    while (v4 < v10);
    uint64_t v2 = &off_1001B7000;
  }
  else
  {
    LODWORD(v10) = 0;
    int v5 = 0;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = *((void *)v2 + 392);
    LODWORD(v12) = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Created %d log object(s)!", buf, 8u);
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 48);
  }
  gLogSignpostObjects = *(void *)(a1 + 40);
  gNumLogSignpostObjects = v10;
}

uint64_t platform_nowPlaying_setPlaybackElapsedTime(unsigned int a1)
{
  uint64_t v2 = +[ACCNowPlayingServer sharedServer];
  uint64_t v3 = +[NSNumber numberWithLong:a1];
  [v2 setPlaybackElapsedTime:v3];

  return 1;
}

uint64_t platform_nowPlaying_setPlaybackQueueIndex(unsigned int a1)
{
  uint64_t v2 = +[ACCNowPlayingServer sharedServer];
  uint64_t v3 = +[NSNumber numberWithLong:a1];
  [v2 setPlaybackQueueIndex:v3];

  return 1;
}

uint64_t platform_nowPlaying_mediaItemAttributesUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0, 4, a1);
}

uint64_t platform_nowPlaying_mediaItemArtworkUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0, 5, a1);
}

uint64_t platform_nowPlaying_playbackAttributesUpdate(void *a1)
{
  id v1 = a1;
  int v2 = _gShouldSendMediaLibraryUID;
  uint64_t v3 = [v1 objectForKeyedSubscript:@"AppBundleID"];
  if (v3
    && (!platform_nowPlaying_playbackAttributesUpdate_appBundleID
     || ([(id)platform_nowPlaying_playbackAttributesUpdate_appBundleID isEqualToString:v3] & 1) == 0))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_appBundleID, v3);
    int v2 = 1;
  }
  unint64_t v4 = [v1 objectForKeyedSubscript:@"IsMusicApp"];
  if (v4
    && (!platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS
     || ([(id)platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS isEqualToNumber:v4] & 1) == 0))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS, v4);
    int v2 = 1;
  }
  int v5 = [v1 objectForKeyedSubscript:@"iTunesRadioStationIdentifier"];
  if (!v5)
  {
LABEL_12:
    if (!v2) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  uint64_t v6 = platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier;
  if (platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier)
  {
    if ([platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier isEqualToString:v5])goto LABEL_12; {
    uint64_t v6 = platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier;
    }
  }
  if ((![(__CFString *)v6 isEqualToString:&stru_10021CEF8]
     || [v5 isEqualToString:&stru_10021CEF8])
    && (([platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier isEqualToString:&stru_10021CEF8] & 1) != 0|| !objc_msgSend(v5, "isEqualToString:", &stru_10021CEF8)))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier, v5);
    if ((v2 & 1) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier, v5);
  }
LABEL_21:
  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v7 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_2();
    }
    uint64_t v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[#Now Playing] Injecting MediaLibraryUID...", (uint8_t *)&v20, 2u);
  }

  if (platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier) {
    BOOL v9 = [platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier length] != 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS) {
    int v10 = [(id)platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS BOOLValue];
  }
  else {
    int v10 = 0;
  }
  int v11 = +[NSMutableDictionary dictionaryWithDictionary:v1];
  int v12 = (__CFString *)platform_system_copyMediaLibraryUIDString(v10, v9);
  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v13 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_2();
    }
    __int16 v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v15 = "NO";
    if (v10) {
      int v16 = "YES";
    }
    else {
      int v16 = "NO";
    }
    int v20 = 138412802;
    uint64_t v21 = v12;
    __int16 v22 = 2080;
    CFDataRef v23 = v16;
    if (v9) {
      int v15 = "YES";
    }
    __int16 v24 = 2080;
    int v25 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[#Now Playing] mediaLibraryUID: '%@'; isMusicApp: %s; isiTunesRadio: %s",
      (uint8_t *)&v20,
      0x20u);
  }

  [v11 setObject:v12 forKey:@"MediaLibraryUID"];
  id v17 = [v11 copy];

  _gShouldSendMediaLibraryUID = 0;
  id v1 = v17;
LABEL_49:
  uint64_t v18 = accFeatureHandlers_invokeHandler(0, 6, (uint64_t)v1);

  return v18;
}

uint64_t platform_nowPlaying_playbackQueueListChanged(unsigned int a1)
{
  return accFeatureHandlers_invokeHandler(0, 7, a1);
}

uint64_t platform_nowPlaying_playbackQueueListInfoResponse(const void *a1, uint64_t a2)
{
  return accFeatureHandlers_invokeHandler(a1, 8, a2);
}

void platform_nowPlaying_triggerMediaItemAttributesUpdate()
{
  id v0 = +[ACCNowPlayingServer sharedServer];
  [v0 triggerMediaItemAttributesUpdate];
}

void platform_nowPlaying_triggerMediaItemArtworkUpdate()
{
  id v0 = +[ACCNowPlayingServer sharedServer];
  [v0 triggerMediaItemArtworkUpdate];
}

void platform_nowPlaying_triggerPlaybackAttributesUpdate()
{
  _gShouldSendMediaLibraryUID = 1;
  id v0 = +[ACCNowPlayingServer sharedServer];
  [v0 triggerPlaybackAttributesUpdate];
}

void platform_nowPlaying_requestPlaybackQueueListInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = +[ACCNowPlayingServer sharedServer];
  [v10 requestPlaybackQueueListInfo:a1 requestID:a2 startIndex:a3 upToCount:a4 infoMask:a5];
}

void platform_nowPlaying_cancelRequestPlaybackQueueListInfo(uint64_t a1, uint64_t a2)
{
  id v4 = +[ACCNowPlayingServer sharedServer];
  [v4 cancelRequestPlaybackQueueListInfo:a1 requestID:a2];
}

void platform_nowPlaying_addSubscriber(uint64_t a1)
{
  id v2 = +[ACCNowPlayingServer sharedServer];
  [v2 addSubscriber:a1];
}

void platform_nowPlaying_removeSubscriber(uint64_t a1)
{
  id v2 = +[ACCNowPlayingServer sharedServer];
  [v2 removeSubscriber:a1];
}

void platform_nowPlaying_incrementUserCount()
{
  id v0 = +[ACCNowPlayingServer sharedServer];
  [v0 incrementUserCount];

  id v1 = +[ACCNowPlayingServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_1002232C0];
  }
}

void platform_nowPlaying_decrementUserCount()
{
  id v0 = +[ACCNowPlayingServer sharedServer];
  [v0 decrementUserCount];
}

uint64_t platform_nowPlaying_copyDefaultMediaItemAttributes()
{
  v1[0] = @"PersistentID";
  v1[1] = @"Title";
  v2[0] = &off_1002233C8;
  v2[1] = &stru_10021CEF8;
  v1[2] = @"PlaybackDurationMS";
  v1[3] = @"AlbumTitle";
  v2[2] = &off_1002233C8;
  v2[3] = &stru_10021CEF8;
  v1[4] = @"AlbumTrackNum";
  v1[5] = @"AlbumTrackCount";
  v2[4] = &off_1002233C8;
  v2[5] = &off_1002233C8;
  v1[6] = @"AlbumDiscNum";
  v1[7] = @"AlbumDiscCount";
  v2[6] = &off_1002233C8;
  v2[7] = &off_1002233C8;
  v1[8] = @"Artist";
  v1[9] = @"Genre";
  v2[8] = &stru_10021CEF8;
  v2[9] = &stru_10021CEF8;
  v1[10] = @"Composer";
  v1[11] = @"IsLikeSupported";
  v2[10] = &stru_10021CEF8;
  v2[11] = &__kCFBooleanFalse;
  v1[12] = @"IsBanSupported";
  v1[13] = @"IsLiked";
  v2[12] = &__kCFBooleanFalse;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"IsBanned";
  v1[15] = @"ChapterCount";
  v2[14] = &__kCFBooleanFalse;
  v2[15] = &off_1002233C8;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:16];
  return objc_claimAutoreleasedReturnValue();
}

uint64_t platform_nowPlaying_copyDefaultMediaItemArtwork()
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t platform_nowPlaying_copyDefaultPlaybackAttributes()
{
  v1[0] = @"Status";
  v1[1] = @"ElapsedTimeMS";
  v2[0] = &off_1002233E0;
  v2[1] = &off_1002233C8;
  v1[2] = @"QueueIndex";
  v1[3] = @"QueueCount";
  v2[2] = &off_1002233C8;
  v2[3] = &off_1002233C8;
  v1[4] = @"QueueChapterIndex";
  v1[5] = @"ShuffleMode";
  v2[4] = &off_1002233C8;
  v2[5] = &off_1002233E0;
  v1[6] = @"RepeatMode";
  v1[7] = @"AppName";
  v2[6] = &off_1002233E0;
  v2[7] = &stru_10021CEF8;
  v1[8] = @"MediaLibraryUID";
  v1[9] = @"iTunesRadioAd";
  v2[8] = &stru_10021CEF8;
  v2[9] = &__kCFBooleanFalse;
  v1[10] = @"iTunesRadioStation";
  v1[11] = @"iTunesRadioStationMediaPlaylistPersistentID";
  v2[10] = &stru_10021CEF8;
  v2[11] = &off_1002233C8;
  v1[12] = @"PlaybackSpeed";
  v1[13] = @"SetElapsedTimeAvailable";
  v2[12] = &off_1002233C8;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"AppBundleID";
  v2[14] = &stru_10021CEF8;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:15];
  return objc_claimAutoreleasedReturnValue();
}

void platform_connectionInfo_accessoryConnectionAttached(const void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    uint64_t v6 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connectionInfo accessoryConnectionAttached: %@ type=%{coreacc:ACCConnection_Type_t}d", (uint8_t *)&v11, 0x12u);
  }

  if (a1)
  {
    uint64_t v7 = +[ACCConnectionInfoServer sharedServer];
    [v7 incrementUserCount];

    id v8 = platform_connectionInfo_accessoryInfoForConnection(a1);
    CFDictionaryRef v9 = platform_connectionInfo_accessoryPropertiesForConnection(a1);
    id v10 = +[ACCConnectionInfoServer sharedServer];
    [v10 accessoryConnectionAttached:a1 type:a2 info:v8 properties:v9];
  }
}

int64x2_t *platform_connectionInfo_accessoryInfoForConnection(const void *a1)
{
  if (!a1) {
    return 0;
  }
  ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID || ConnectionWithUUID[142]) {
    return 0;
  }
  uint64_t AccessoryInfo = acc_connection_getAccessoryInfo((uint64_t)ConnectionWithUUID);

  return acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
}

CFDictionaryRef platform_connectionInfo_accessoryPropertiesForConnection(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef ConnectionWithUUID = (const __CFDictionary *)acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID) {
    return 0;
  }
  uint64_t v2 = (uint64_t)ConnectionWithUUID;
  if (*((unsigned char *)ConnectionWithUUID + 142)) {
    return 0;
  }
  CFDictionaryRef v4 = acc_connection_copyProperties(ConnectionWithUUID);
  if (!v4) {
    return 0;
  }
  CFDictionaryRef v5 = v4;
  CFDictionaryRef v6 = _platform_connectionInfo_addAuthInfo(v2, v4);
  CFRelease(v5);
  return v6;
}

void platform_connectionInfo_accessoryConnectionDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFDictionaryRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFDictionaryRef v4 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    uint64_t v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "connectionInfo accessoryConnectionDetached: %@", (uint8_t *)&v7, 0xCu);
  }

  if (a1)
  {
    CFDictionaryRef v5 = +[ACCConnectionInfoServer sharedServer];
    [v5 accessoryConnectionDetached:a1];

    CFDictionaryRef v6 = +[ACCConnectionInfoServer sharedServer];
    [v6 decrementUserCount];
  }
}

void platform_connectionInfo_accessoryEndpointAttached(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    id v10 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v13 = 138413058;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 1024;
    int v20 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "connectionInfo accessoryEndpointAttached: %@ - %@ transport=%{coreacc:ACCEndpoint_TransportType_t}d protocol=%{coreacc:ACCEndpoint_Protocol_t}d", (uint8_t *)&v13, 0x22u);
  }

  if (a1)
  {
    int v11 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
    int v12 = +[ACCConnectionInfoServer sharedServer];
    [v12 accessoryEndpointAttached:a2 transportType:a3 protocol:a4 properties:v11 forConnection:a1];
  }
}

pthread_mutex_t *platform_connectionInfo_accessoryPropertiesForEndpoint(uint64_t a1, const void *a2)
{
  BOOL v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID) {
    return 0;
  }
  p_sig = &EndpointWithUUID->__sig;
  if (EndpointWithUUID[1].__opaque[48]) {
    return 0;
  }
  BOOL v2 = acc_endpoint_copyProperties(EndpointWithUUID);
  if (!v2 || !*p_sig) {
    return v2;
  }
  CFDictionaryRef v6 = _platform_connectionInfo_addAuthInfo(*p_sig, (CFDictionaryRef)v2);
  CFRelease(v2);
  return (pthread_mutex_t *)v6;
}

void platform_connectionInfo_accessoryEndpointDetached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFDictionaryRef v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    CFDictionaryRef v6 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connectionInfo accessoryEndpointDetached: %@ - %@", (uint8_t *)&v8, 0x16u);
  }

  if (a1)
  {
    int v7 = +[ACCConnectionInfoServer sharedServer];
    [v7 accessoryEndpointDetached:a2 forConnection:a1];
  }
}

void platform_connectionInfo_accessoryEndpointProtocolUpdate(uint64_t a1, const void *a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 9;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    int v8 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412802;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "connectionInfo accessoryEndpointProtocolUpdate: %@ - %@ protocol=%{coreacc:ACCEndpoint_Protocol_t}d", (uint8_t *)&v11, 0x1Cu);
  }

  if (a1)
  {
    uint64_t v9 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
    __int16 v10 = +[ACCConnectionInfoServer sharedServer];
    [v10 accessoryEndpointUpdate:a2 protocol:a3 properties:v9 forConnection:a1];
  }
}

void platform_connectionInfo_accessoryConnectionInfoPropertyChanged(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    int v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "connectionInfo accessoryConnectionInfoPropertyChanged: %@", (uint8_t *)&v7, 0xCu);
  }

  if (a1)
  {
    CFDictionaryRef v5 = platform_connectionInfo_accessoryPropertiesForConnection(a1);
    BOOL v6 = +[ACCConnectionInfoServer sharedServer];
    [v6 accessoryConnectionInfoPropertyChanged:a1 properties:v5];
  }
}

void platform_connectionInfo_accessoryEndpointInfoPropertyChanged(uint64_t a1, const void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    BOOL v6 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connectionInfo accessoryEndpointInfoPropertyChanged: %@ - %@", (uint8_t *)&v9, 0x16u);
  }

  if (a1)
  {
    if (a2)
    {
      int v7 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
      int v8 = +[ACCConnectionInfoServer sharedServer];
      [v8 accessoryEndpointInfoPropertyChanged:a2 properties:v7 forConnection:a1];
    }
  }
}

CFSetRef platform_connectionInfo_accessoryConnections()
{
  CFDictionaryRef v0 = acc_manager_copyAllConnections();
  CFSetRef Keys = CFDictionaryGetKeys(v0, 1);
  if (v0) {
    CFRelease(v0);
  }
  return Keys;
}

CFSetRef platform_connectionInfo_accessoryEndpoints(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID || ConnectionWithUUID[142]) {
    return 0;
  }
  CFDictionaryRef CreationTimestampMS = (const __CFDictionary *)acc_endpoint_getCreationTimestampMS((uint64_t)ConnectionWithUUID);

  return CFDictionaryGetKeys(CreationTimestampMS, 1);
}

uint64_t platform_connectionInfo_accessoryConnectionType(const void *a1)
{
  if (!a1) {
    return 11;
  }
  CFDictionaryRef ConnectionWithUUID = (unsigned int *)acc_manager_getConnectionWithUUID(a1);
  if (ConnectionWithUUID) {
    return ConnectionWithUUID[2];
  }
  else {
    return 11;
  }
}

uint64_t platform_connectionInfo_endpointTransportType(uint64_t a1, const void *a2)
{
  uint64_t result = 17;
  if (a1 && a2)
  {
    EndpointWithUUID = (unsigned int *)acc_manager_getEndpointWithUUID(a2);
    if (EndpointWithUUID) {
      return EndpointWithUUID[6];
    }
    else {
      return 17;
    }
  }
  return result;
}

unsigned int *platform_connectionInfo_endpointProtocol(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t result = (unsigned int *)acc_manager_getEndpointWithUUID(a2);
    if (result) {
      return (unsigned int *)result[7];
    }
  }
  return result;
}

int64x2_t *platform_connectionInfo_accessoryInfoForEndpoint(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID || EndpointWithUUID[120]) {
    return 0;
  }
  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);

  return acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
}

uint64_t platform_connectionInfo_accessoryPropertyForConnection(const void *a1, void *a2)
{
  uint64_t v2 = 0;
  if (a1)
  {
    if (a2)
    {
      CFDictionaryRef ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
      uint64_t v2 = (uint64_t)ConnectionWithUUID;
      if (ConnectionWithUUID)
      {
        if (ConnectionWithUUID[142]) {
          return 0;
        }
        id v5 = a2;
        if ([v5 isEqualToString:kACCExternalAccessoryMacAddressKey])
        {
          if (*(_DWORD *)(v2 + 8) != 2 || (CFStringRef v6 = *(const __CFString **)(v2 + 16)) == 0)
          {
            uint64_t v2 = 0;
LABEL_24:

            return v2;
          }
          CFStringRef Copy = (void *)CFStringCreateCopy(kCFAllocatorDefault, v6);
        }
        else if ([v5 isEqualToString:kACCExternalAccessoryCertSerialNumberKey])
        {
          CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingData(v2 + 48);
        }
        else if ([v5 isEqualToString:kACCExternalAccessoryCertDataKey])
        {
          CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingInfo(v2 + 48);
        }
        else if ([v5 isEqualToString:kACCExternalAccessoryAuthStatusKey])
        {
          int valuePtr = acc_connection_getAuthStatus(v2, 0);
          if (!valuePtr)
          {
            int valuePtr = acc_connection_getAuthStatus(v2, 1);
            if (!valuePtr)
            {
              int valuePtr = acc_connection_getAuthStatus(v2, 2);
              if (!valuePtr)
              {
                int valuePtr = acc_connection_getAuthStatus(v2, 3);
                if (!valuePtr) {
                  int valuePtr = acc_connection_getAuthStatus(v2, 4);
                }
              }
            }
          }
          CFStringRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        }
        else
        {
          CFStringRef Copy = acc_connection_copyProperty((char *)v2, v5);
        }
        uint64_t v2 = (uint64_t)Copy;
        goto LABEL_24;
      }
    }
  }
  return v2;
}

unsigned char *platform_connectionInfo_accessoryPropertyForEndpoint(uint64_t a1, const void *a2, void *a3)
{
  id v3 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
        id v3 = EndpointWithUUID;
        if (EndpointWithUUID)
        {
          if (EndpointWithUUID[120]) {
            return 0;
          }
          id v6 = a3;
          if ([v6 isEqualToString:kACCExternalAccessoryMacAddressKey])
          {
            if ((*((_DWORD *)v3 + 6) & 0xFFFFFFFE) == 2)
            {
              CFStringRef v7 = (const __CFString *)*((void *)v3 + 4);
              if (v7)
              {
                CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v7);
LABEL_25:
                id v3 = Copy;
                goto LABEL_26;
              }
            }
          }
          else
          {
            if ([v6 isEqualToString:kACCExternalAccessoryCertSerialNumberKey])
            {
              CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingData(*(void *)v3 + 48);
              goto LABEL_25;
            }
            if ([v6 isEqualToString:kACCExternalAccessoryCertDataKey])
            {
              CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingInfo(*(void *)v3 + 48);
              goto LABEL_25;
            }
            if (![v6 isEqualToString:kACCExternalAccessoryAuthStatusKey])
            {
              CFStringRef Copy = acc_endpoint_copyProperty((pthread_mutex_t *)v3, v6);
              goto LABEL_25;
            }
            if (*(void *)v3)
            {
              int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 0);
              if (!valuePtr)
              {
                int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 1);
                if (!valuePtr)
                {
                  int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 2);
                  if (!valuePtr)
                  {
                    int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 3);
                    if (!valuePtr) {
                      int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 4);
                    }
                  }
                }
              }
              CFStringRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
              goto LABEL_25;
            }
          }
          id v3 = 0;
LABEL_26:
        }
      }
    }
  }
  return v3;
}

void platform_connectionInfo_setAccessoryUserName(const __CFString *a1, uint64_t a2, const void *a3, void *a4)
{
  CFStringRef v7 = a4;
  int v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a2 || !a3) {
    goto LABEL_36;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)buffer = 0u;
  CFIndex Length = CFStringGetLength(a1);
  int CString = CFStringGetCString(a1, buffer, Length + 1, 0x8000100u);
  if (!gLogObjects) {
    goto LABEL_40;
  }
  if (gNumLogObjects >= 9)
  {
    __int16 v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
LABEL_40:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 67109378;
    v21[1] = CString != 0;
    __int16 v22 = 2080;
    CFDataRef v23 = buffer;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_setAccessoryUserName: %d, %s", (uint8_t *)v21, 0x12u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a3);
  if (!EndpointWithUUID) {
    goto LABEL_36;
  }
  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_37;
  }
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      int v18 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v18 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setAccessoryUserName_cold_2(v14);
    }

LABEL_36:
    v7[2](v7, v8);
    goto LABEL_37;
  }
  if (v16)
  {
    __int16 v17 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v17 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_setAccessoryUserName", (uint8_t *)v21, 2u);
  }

  mfi4Auth_endpoint_setAccessoryUserName(*(void *)(v14 + 56), (uint64_t)a1, (uint64_t)v7);
LABEL_37:
}

void platform_connectionInfo_getAccessoryUserName(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, 0, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      id v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getAccessoryUserName_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    __int16 v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_getAccessoryUserName", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_getAccessoryUserName(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

_DWORD *platform_connectionInfo_getPairingStatus(const void *a1, const void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_getPairingStatus", buf, 2u);
  }

  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = acc_manager_getEndpointWithUUID(a2);
      if (result)
      {
        uint64_t v8 = (uint64_t)result;
        if (!*((unsigned char *)result + 120))
        {
          if (gLogObjects) {
            BOOL v9 = gNumLogObjects <= 8;
          }
          else {
            BOOL v9 = 1;
          }
          int v10 = !v9;
          if (result[7] == 14)
          {
            if (v10)
            {
              __int16 v11 = *(id *)(gLogObjects + 64);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v11 = &_os_log_default;
              id v13 = &_os_log_default;
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)BOOL v15 = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_getPairingStatus", v15, 2u);
            }

            uint64_t result = acc_manager_getConnectionWithUUID(a1);
            if (result) {
              return (_DWORD *)acc_connection_getPairingStatus((uint64_t)result);
            }
            return result;
          }
          if (v10)
          {
            id v12 = *(id *)(gLogObjects + 64);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            id v12 = &_os_log_default;
            id v14 = &_os_log_default;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_getPairingStatus_cold_2(v8);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void platform_connectionInfo_provisionPairing(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      id v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_provisionPairing_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    __int16 v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[FindMy] platform_connectionInfo_provisionPairing", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_provisionPairing(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_resetPairing(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1)
  {
    int v18 = logObjectForModule();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v26 = 0;
    id v19 = "platform_connectionInfo_resetPairing: !accessoryConnectionUUID";
    id v20 = (uint8_t *)&v26;
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, v20, 2u);
    goto LABEL_49;
  }
  if (!a2)
  {
    int v18 = logObjectForModule();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v25 = 0;
    id v19 = "platform_connectionInfo_resetPairing: !accessoryEndpointUUID";
    id v20 = (uint8_t *)&v25;
    goto LABEL_48;
  }
  if (gLogObjects) {
    BOOL v7 = gNumLogObjects < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v9 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  else
  {
    BOOL v9 = *(id *)(gLogObjects + 64);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_resetPairing", buf, 2u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID)
  {
    int v18 = logObjectForModule();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v23 = 0;
    id v19 = "platform_connectionInfo_resetPairing: !pEndpoint";
    id v20 = (uint8_t *)&v23;
    goto LABEL_48;
  }
  uint64_t v11 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120])
  {
    int v18 = logObjectForModule();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v22 = 0;
      id v19 = "platform_connectionInfo_resetPairing: destroyingEndpoint";
      id v20 = v22;
      goto LABEL_48;
    }
LABEL_49:

LABEL_38:
    v5[2](v5, v6);
    goto LABEL_39;
  }
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects <= 8;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v13)
    {
      BOOL v15 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v15 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_resetPairing_cold_2(v11);
    }

    goto LABEL_38;
  }
  if (v13)
  {
    id v14 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v14 = &_os_log_default;
    id v16 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_resetPairing: mfi4Auth_endpoint_erasePairing", (uint8_t *)v21, 2u);
  }

  mfi4Auth_endpoint_erasePairing(*(void *)(v11 + 56), (uint64_t)v5);
LABEL_39:
}

void platform_connectionInfo_getPublicNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1)
  {
    int v13 = logObjectForModule();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v19 = 0;
    id v14 = "platform_connectionInfo_getPublicNvmKeyValues: !accessoryConnectionUUID";
    BOOL v15 = (uint8_t *)&v19;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, v15, 2u);
    goto LABEL_27;
  }
  if (!a2)
  {
    int v13 = logObjectForModule();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v18 = 0;
    id v14 = "platform_connectionInfo_getPublicNvmKeyValues: !accessoryEndpointUUID";
    BOOL v15 = (uint8_t *)&v18;
    goto LABEL_26;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID)
  {
    int v13 = logObjectForModule();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v17 = 0;
    id v14 = "platform_connectionInfo_getPublicNvmKeyValues: !pEndpoint";
    BOOL v15 = (uint8_t *)&v17;
    goto LABEL_26;
  }
  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (*((unsigned char *)EndpointWithUUID + 120))
  {
    int v13 = logObjectForModule();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = 0;
      id v14 = "platform_connectionInfo_getPublicNvmKeyValues: !pEndpoint";
      BOOL v15 = (uint8_t *)&v16;
      goto LABEL_26;
    }
LABEL_27:

LABEL_16:
    v7[2](v7, 0, v8);
    goto LABEL_17;
  }
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (gLogObjects && gNumLogObjects >= 9)
    {
      uint64_t v11 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getPublicNvmKeyValues_cold_1(v10);
    }

    goto LABEL_16;
  }
  mfi4Auth_endpoint_getPublicNvmKeyValues(*((void *)EndpointWithUUID + 7), a3, (uint64_t)v7);
LABEL_17:
}

void platform_connectionInfo_setPublicNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v7[2](v7, v8);
    goto LABEL_29;
  }
  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setPublicNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }
  if (v12)
  {
    int v13 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_setPublicNvmKeyValues", (uint8_t *)v17, 2u);
  }

  mfi4Auth_endpoint_setPublicNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_getPrivateNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v7[2](v7, 0, v8);
    goto LABEL_29;
  }
  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getPrivateNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }
  if (v12)
  {
    int v13 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_getPrivateNvmKeyValues", (uint8_t *)v17, 2u);
  }

  mfi4Auth_endpoint_getPrivateNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_setPrivateNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v7[2](v7, v8);
    goto LABEL_29;
  }
  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setPrivateNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }
  if (v12)
  {
    int v13 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_setPrivateNvmKeyValues", (uint8_t *)v17, 2u);
  }

  mfi4Auth_endpoint_setPrivateNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_beginVendorKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, 0, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_beginVendorKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    BOOL v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_beginVendorKeyErase", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_beginVendorKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_continueVendorKeyErase(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v11 = a6;
  int v12 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v11[2](v11, v12);
    goto LABEL_29;
  }
  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      __int16 v18 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v18 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_continueVendorKeyErase_cold_2(v14);
    }

    goto LABEL_28;
  }
  if (v16)
  {
    __int16 v17 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v17 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_continueVendorKeyErase", (uint8_t *)v21, 2u);
  }

  mfi4Auth_endpoint_continueVendorKeyErase(*(void *)(v14 + 56), a3, a4, a5, (uint64_t)v11);
LABEL_29:
}

void platform_connectionInfo_cancelVendorKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_cancelVendorKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    BOOL v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_cancelVendorKeyErase", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_cancelVendorKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_beginUserKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, 0, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_beginUserKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    BOOL v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_beginUserKeyErase", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_beginUserKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_continueUserKeyErase(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v11 = a6;
  int v12 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v11[2](v11, v12);
    goto LABEL_29;
  }
  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      __int16 v18 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v18 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_continueUserKeyErase_cold_2(v14);
    }

    goto LABEL_28;
  }
  if (v16)
  {
    __int16 v17 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v17 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_continueUserKeyErase", (uint8_t *)v21, 2u);
  }

  mfi4Auth_endpoint_continueUserKeyErase(*(void *)(v14 + 56), a3, a4, a5, (uint64_t)v11);
LABEL_29:
}

void platform_connectionInfo_cancelUserKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_cancelUserKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    BOOL v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_cancelUserKeyErase", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_cancelUserKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_copyUserPrivateKey(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = +[NSError errorWithDomain:NSCocoaErrorDomain code:-1 userInfo:0];
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0)
  {
LABEL_28:
    v5[2](v5, 0, v6);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120]) {
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = *(id *)(gLogObjects + 64);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_copyUserPrivateKey_cold_2(v8);
    }

    goto LABEL_28;
  }
  if (v10)
  {
    BOOL v11 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_copyUserPrivateKey", (uint8_t *)v15, 2u);
  }

  mfi4Auth_endpoint_copyUserPrivateKey(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_setupInterceptForEndpoint(uint64_t a1, const void *a2, int a3)
{
  if (a1)
  {
    if (a2)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
      if (EndpointWithUUID)
      {
        if (!*((unsigned char *)EndpointWithUUID + 120) && *((_DWORD *)EndpointWithUUID + 7) == 10)
        {
          id v5 = (_DWORD *)EndpointWithUUID[7];
          accAuthProtocol_endpoint_setIncomingIntercept(v5, a3);
        }
      }
    }
  }
}

uint64_t platform_connectionInfo_getInterceptCountForEndpoint(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID || EndpointWithUUID[120] || *((_DWORD *)EndpointWithUUID + 7) != 10) {
    return 0;
  }
  id v3 = (_DWORD *)*((void *)EndpointWithUUID + 7);

  return accAuthProtocol_endpoint_getIncomingInterceptCount(v3);
}

void platform_connectionInfo_handleInterceptData(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a1 && a2 && a3 && acc_manager_getEndpointWithUUID(a2))
  {
    id v6 = +[ACCConnectionInfoServer sharedServer];
    [v6 handleInterceptData:a3 forEndpoint:a2 connection:a1];
  }
}

void platform_connectionInfo_sendDataForEndpoint(uint64_t a1, const void *a2, const __CFData *a3)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!a3) {
    return;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID || EndpointWithUUID[120]) {
    return;
  }
  int v7 = *((_DWORD *)EndpointWithUUID + 7);
  if (v7 == 4)
  {
    uint64_t v16 = 0;
    __int16 v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 0;
    uint64_t v8 = (void *)*((void *)EndpointWithUUID + 7);
    if (v8)
    {
      uint64_t v11 = v8[4];
      if (v11)
      {
        if (!*(unsigned char *)(v11 + 44))
        {
          BOOL v9 = v8[3];
          if (v9)
          {
            *(void *)block = _NSConcreteStackBlock;
            *(void *)&block[8] = 3221225472;
            int v10 = ___platform_connectionInfo_sendDataForiAP2Endpoint_block_invoke;
LABEL_16:
            *(void *)&block[16] = v10;
            uint64_t v21 = &unk_100218B10;
            __int16 v22 = &v16;
            __int16 v23 = v8;
            CFDataRef v24 = a3;
            dispatch_sync(v9, block);
            int v12 = *((unsigned __int8 *)v17 + 24);
            _Block_object_dispose(&v16, 8);
            if (v12) {
              return;
            }
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    if (v7 != 10)
    {
      if (acc_endpoint_sendOutgoingData((uint64_t)EndpointWithUUID, a3)) {
        return;
      }
      goto LABEL_19;
    }
    uint64_t v16 = 0;
    __int16 v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 0;
    uint64_t v8 = (void *)*((void *)EndpointWithUUID + 7);
    if (v8)
    {
      BOOL v9 = v8[7];
      if (v9)
      {
        *(void *)block = _NSConcreteStackBlock;
        *(void *)&block[8] = 3221225472;
        int v10 = ___platform_connectionInfo_sendDataForAuthProtocolEndpoint_block_invoke;
        goto LABEL_16;
      }
    }
  }
  _Block_object_dispose(&v16, 8);
LABEL_19:
  if (gLogObjects && gNumLogObjects >= 9)
  {
    id v13 = *(id *)(gLogObjects + 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex Length = CFDataGetLength(a3);
    *(_DWORD *)block = 138412802;
    *(void *)&void block[4] = a1;
    *(_WORD *)&block[12] = 2112;
    *(void *)&block[14] = a2;
    *(_WORD *)&block[22] = 2048;
    uint64_t v21 = (void *)Length;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "connectionInfo sendDataForEndpoint: %@ - %@, %ld bytes Failed! ", block, 0x20u);
  }
}

CFDictionaryRef _platform_connectionInfo_addAuthInfo(uint64_t a1, CFDictionaryRef theDict)
{
  CFDictionaryRef v2 = theDict;
  if (a1)
  {
    if (theDict)
    {
      CFIndex Count = CFDictionaryGetCount(theDict);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 2, v2);
      if (MutableCopy)
      {
        id v6 = MutableCopy;
        CFDataRef v7 = oobPairing_endpoint_copyCachedOOBPairingInfo(a1 + 48);
        if (v7)
        {
          CFDataRef v8 = v7;
          CFDictionaryAddValue(v6, kACCExternalAccessoryCertDataKey, v7);
          CFRelease(v8);
        }
        CFDataRef v9 = oobPairing_endpoint_copyCachedOOBPairingData(a1 + 48);
        if (v9)
        {
          CFDataRef v10 = v9;
          CFDictionaryAddValue(v6, kACCExternalAccessoryCertSerialNumberKey, v9);
          CFRelease(v10);
        }
        int valuePtr = acc_connection_getAuthStatus(a1, 0);
        if (!valuePtr)
        {
          int valuePtr = acc_connection_getAuthStatus(a1, 1);
          if (!valuePtr)
          {
            int valuePtr = acc_connection_getAuthStatus(a1, 2);
            if (!valuePtr)
            {
              int valuePtr = acc_connection_getAuthStatus(a1, 3);
              if (!valuePtr) {
                int valuePtr = acc_connection_getAuthStatus(a1, 4);
              }
            }
          }
        }
        CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v11)
        {
          CFNumberRef v12 = v11;
          CFDictionaryAddValue(v6, kACCExternalAccessoryAuthStatusKey, v11);
          CFDictionaryRef v2 = v6;
        }
        else
        {
          CFNumberRef v12 = v6;
        }
        CFRelease(v12);
      }
    }
  }
  return v2;
}

uint64_t ___platform_connectionInfo_sendDataForAuthProtocolEndpoint_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 48));
  unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
  uint64_t result = accAuthProtocol_endpoint_sendOutgoingData(v2, BytePtr, Length);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___platform_connectionInfo_sendDataForiAP2Endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 48));
  unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
  uint64_t result = iap2_endpoint_sendOutgoingData(v2, BytePtr, Length);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1000D3620(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1000D570C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

CFStringRef CFCreateUUIDString()
{
  CFUUIDRef v0 = CFUUIDCreate(kCFAllocatorDefault);
  CFStringRef v1 = CFUUIDCreateString(kCFAllocatorDefault, v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

CFStringRef CFArrayCreateRawValuesString(const __CFArray *a1, int a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFStringAppend(Mutable, @"{\n");
  v5.length = CFArrayGetCount(a1);
  if (a2) {
    id v6 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionHex;
  }
  else {
    id v6 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionDecimal;
  }
  v5.location = 0;
  CFArrayApplyFunction(a1, v5, v6, Mutable);
  CFStringAppend(Mutable, @"}");
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

void _CFArraySetPrintRawValuesApplierFunctionHex(uint64_t a1, CFMutableStringRef theString)
{
}

void _CFArraySetPrintRawValuesApplierFunctionDecimal(uint64_t a1, CFMutableStringRef theString)
{
}

CFStringRef CFSetCreateRawValuesString(const __CFSet *a1, int a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFStringAppend(Mutable, @"{\n");
  if (a2) {
    CFRange v5 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionHex;
  }
  else {
    CFRange v5 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionDecimal;
  }
  CFSetApplyFunction(a1, v5, Mutable);
  CFStringAppend(Mutable, @"}");
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

CFStringRef CFStringCreateFromCFData(const __CFData *a1, const __CFString *a2)
{
  if (!a1) {
    return &stru_10021CEF8;
  }
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (Length >= 1)
  {
    do
    {
      unsigned int v7 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0, a2, v7);
      --Length;
    }
    while (Length);
  }
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

CFSetRef CFDictionaryGetKeys(const __CFDictionary *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = a2 ? &kCFTypeSetCallBacks : 0;
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, v3);
  if (!Mutable) {
    return 0;
  }
  CFSetRef v5 = Mutable;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)CFDictionaryApplierFunction_addKeyToMutableSet, Mutable);
  CFSetRef Copy = CFSetCreateCopy(kCFAllocatorDefault, v5);
  CFRelease(v5);
  return Copy;
}

void CFDictionaryApplierFunction_addKeyToMutableSet(void *value, int a2, CFMutableSetRef theSet)
{
  if (value)
  {
    if (theSet) {
      CFSetAddValue(theSet, value);
    }
  }
}

char *createCStringFromCFString(const __CFString *a1, CFStringEncoding a2)
{
  CFIndex bufferSize = 0;
  if (!a1) {
    return 0;
  }
  v9.length = CFStringGetLength(a1);
  v9.location = 0;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &bufferSize);
  BOOL v4 = (char *)malloc_type_malloc(++bufferSize, 0x4FF45A26uLL);
  int CString = CFStringGetCString(a1, v4, bufferSize, a2);
  if (v4) {
    BOOL v6 = CString == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    free(v4);
    return 0;
  }
  return v4;
}

void CFDictionaryApplierFunction_setValueInMutableDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (key)
  {
    if (theDict) {
      CFDictionarySetValue(theDict, key, value);
    }
  }
}

void CFSetApplierFunction_removeValueFromMutableDictionary(void *key, CFMutableDictionaryRef theDict)
{
}

id __getSessionIDLock()
{
  if (__getSessionIDLock_onceToken != -1) {
    dispatch_once(&__getSessionIDLock_onceToken, &__block_literal_global_25);
  }
  CFUUIDRef v0 = (void *)__getSessionIDLock___sessionIDLock;

  return v0;
}

void ____getSessionIDLock_block_invoke(id a1)
{
  __getSessionIDLock___sessionIDLock = (uint64_t)objc_alloc_init((Class)NSLock);

  _objc_release_x1();
}

void ____getCerCacheObj_block_invoke(id a1)
{
  __getCerCacheObj___certCacheObj = MFAACreateCertificateCache();
}

uint64_t _acc_auth_protocol_sizeofSessionImplementationData()
{
  return 168;
}

BOOL _acc_auth_protocol_supportsAuthRole(int a1)
{
  if (a1 == 1) {
    return acc_userDefaults_copyIntegerForKey(@"ACCAuthProtocolRoleSupport") != (id)2;
  }
  if (a1 != 2) {
    return 0;
  }
  unint64_t v1 = (unint64_t)acc_userDefaults_copyIntegerForKey(@"ACCAuthProtocolRoleSupport");
  if (v1 >= 4) {
    return 1;
  }
  else {
    return (0xDu >> (v1 & 0xF)) & 1;
  }
}

uint64_t _acc_auth_protocol_supportedAuthTypes(int a1, unsigned char *a2, unsigned int a3)
{
  if ((a1 - 1) > 1 || a2 == 0 || a3 == 0) {
    return 0;
  }
  uint64_t result = _acc_auth_protocol_supportsAuthRole(a1);
  if (result)
  {
    if (_acc_auth_protocol_supportsAuthRole(a1))
    {
      unsigned int v9 = 1;
      *a2 = 1;
    }
    else
    {
      unsigned int v9 = 0;
    }
    if (v9 >= a3)
    {
      return 1;
    }
    else
    {
      uint64_t result = v9 + 1;
      a2[v9] = 0;
    }
  }
  return result;
}

uint64_t _acc_auth_protocol_supportedAuthCapabilities(int a1)
{
  if ((a1 - 1) > 1) {
    return 0;
  }
  if (((a1 == 1) & _acc_auth_protocol_supportsAuthRole(a1)) != 0) {
    return 2;
  }
  return 0;
}

uint64_t _acc_auth_protocol_reserveFreeSessionID(unsigned char *a1)
{
  uint64_t v2 = __getSessionIDLock();
  [v2 lock];

  if (a1)
  {
    if (__availableSessionIDs)
    {
      if (__lastAllocatedSessionIDInitialized == 1)
      {
        unsigned __int8 v3 = __lastAllocatedSessionID;
      }
      else
      {
        unsigned __int8 v3 = arc4random_uniform(0x10u);
        __lastAllocatedSessionID = v3;
        __lastAllocatedSessionIDInitialized = 1;
      }
      int v5 = (v3 + 1) & 0xF;
      uint64_t v4 = 1;
      if (v5 != v3)
      {
        while (((1 << v5) & (unsigned __int16)__availableSessionIDs) == 0)
        {
          int v5 = ((_BYTE)v5 + 1) & 0xF;
          if (v5 == v3) {
            goto LABEL_10;
          }
        }
        uint64_t v4 = 0;
        __availableSessionIDs &= ~(unsigned __int16)(1 << v5);
        __lastAllocatedSessionID = v5;
        *a1 = v5;
      }
    }
    else
    {
      uint64_t v4 = 16;
    }
  }
  else
  {
LABEL_10:
    uint64_t v4 = 1;
  }
  BOOL v6 = __getSessionIDLock();
  [v6 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v7 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      int v9 = *a1;
    }
    else {
      int v9 = -1;
    }
    v11[0] = 67109376;
    v11[1] = v9;
    __int16 v12 = 1024;
    int v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AccAuth] _reserveFreeSessionID: sessionID %d, errorNo %d \n", (uint8_t *)v11, 0xEu);
  }

  return v4;
}

BOOL _acc_auth_protocol_isBusySessionID(int a1)
{
  uint64_t v2 = __getSessionIDLock();
  [v2 lock];

  int v3 = (unsigned __int16)__availableSessionIDs;
  uint64_t v4 = __getSessionIDLock();
  [v4 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v5 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  int v7 = (1 << a1) & v3;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_isBusySessionID_cold_1(v7 == 0, a1, v5);
  }

  return v7 == 0;
}

uint64_t _acc_auth_protocol_returnSessionID(int a1)
{
  uint64_t v2 = __getSessionIDLock();
  [v2 lock];

  uint64_t v3 = 1;
  if (((1 << a1) & (unsigned __int16)__availableSessionIDs) == 0)
  {
    uint64_t v3 = 0;
    __availableSessionIDs |= 1 << a1;
  }
  uint64_t v4 = __getSessionIDLock();
  [v4 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v5 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v5 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109376;
    v8[1] = a1;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[AccAuth] _returnSessionID: sessionID %d, errorNo %d \n", (uint8_t *)v8, 0xEu);
  }

  return v3;
}

uint64_t _acc_auth_protocol_createSessionImplementation(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  if (a1 && a2)
  {
    int v5 = *a2;
    if (v5 == 255 || _acc_auth_protocol_isBusySessionID(v5))
    {
      uint64_t v3 = malloc_type_calloc(1uLL, 0xA8uLL, 0x10900407C7C2A5EuLL);
      uint64_t v4 = 0;
      *((void *)a2 + 169) = v3;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 9;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v6 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      int v8 = *a2;
      if (v3)
      {
LABEL_16:
        int v9 = v3[40];
LABEL_19:
        v11[0] = 67109632;
        v11[1] = v8;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AccAuth] _createSessionImplementation: sessionID %d, certificateDataCount %d, errorNo %d \n", (uint8_t *)v11, 0x14u);
        goto LABEL_20;
      }
    }
    else
    {
      int v8 = -1;
      if (v3) {
        goto LABEL_16;
      }
    }
    int v9 = -1;
    goto LABEL_19;
  }
LABEL_20:

  return v4;
}

void _acc_auth_protocol_endSessionImplementation(unsigned __int8 *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*((void *)a1 + 169);
    *((void *)a1 + 169) = 0;
    _acc_auth_protocol_cleanupCertificateInfo((uint64_t)v2);
    if (v2) {
      free(v2);
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v3 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v3 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      int v5 = *a1;
    }
    else {
      int v5 = -1;
    }
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AccAuth] _endSessionImplementation: sessionID %d \n", (uint8_t *)v6, 8u);
  }
}

uint64_t _acc_auth_protocol_cleanupCertificateInfo(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_cleanupCertificateInfo_cold_2();
  }

  if (a1)
  {
    uint64_t v4 = -1;
    uint64_t v5 = a1;
    while (++v4 < (unint64_t)*(unsigned int *)(a1 + 160))
    {
      uint64_t v6 = v5 + 40;
      int v7 = _acc_auth_protocol_cleanupCertificateData(v5);
      uint64_t v5 = v6;
      if (v7)
      {
        uint64_t v8 = 1;
        goto LABEL_16;
      }
    }
    uint64_t v8 = 0;
LABEL_16:
    *(_DWORD *)(a1 + 160) = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v9 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v9 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      int v11 = *(_DWORD *)(a1 + 160);
    }
    else {
      int v11 = -1;
    }
    v13[0] = 67109376;
    v13[1] = v11;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccAuth] _cleanupCertificateInfo: certificateDataCount %d, errorNo %d \n", (uint8_t *)v13, 0xEu);
  }

  return v8;
}

void _acc_auth_protocol_handleSessionAuthenticationState(void *a1, unsigned __int8 a2)
{
  unsigned __int8 valuePtr = a2;
  if (!a1) {
    return;
  }
  uint64_t v3 = a1[169];
  if (!v3) {
    return;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v4 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)a1;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AccAuth] _handleSessionAuthenticationState: sessionID %d, authenticated %d \n", buf, 0xEu);
  }

  CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"sessionID", v8);
  CFDictionarySetValue(Mutable, @"authStatus", v9);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"com.apple.accAuthProtocol.authStatus", 0, Mutable, 1u);
  if (valuePtr && *(_DWORD *)(v3 + 160))
  {
    unint64_t v12 = 0;
    uint64_t v13 = v3;
    do
    {
      uint64_t v11 = _acc_auth_protocol_certificateCacheSaveCert(v11, v13);
      ++v12;
      v13 += 40;
    }
    while (v12 < *(unsigned int *)(v3 + 160));
  }
  CFStringRef v14 = (const __CFString *)a1[168];
  if (v14)
  {
    int v15 = valuePtr;
    if (valuePtr) {
      int v16 = 2;
    }
    else {
      int v16 = 1;
    }
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v14);
    if (!Copy) {
      return;
    }
    CFNumberRef v18 = (const __CFNumber *)Copy;
    EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
    if (!EndpointWithUUID)
    {
      CFNumberRef v9 = v18;
LABEL_46:
      CFRelease(v9);
      return;
    }
    id v20 = EndpointWithUUID;
    int v28 = v16;
    if (v15)
    {
      CFDataRef v21 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)v3, *(unsigned int *)(v3 + 8));
      if (v21)
      {
        CFDataRef v22 = v21;
        acc_connection_setAuthCertData(*(void *)v20, v21);
        CFRelease(v22);
      }
    }
    int AuthStatus = acc_connection_getAuthStatus(*(void *)v20, 1);
    int v23 = acc_connection_getAuthStatus(*(void *)v20, 4);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      CFDataRef v24 = *(id *)(gLogObjects + 432);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFDataRef v24 = &_os_log_default;
      id v25 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = AuthStatus;
      LOWORD(v33) = 1024;
      *(_DWORD *)((char *)&v33 + 2) = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[AccAuth] oldAuthStatus %d, oldCTAAuthStatus %d \n", buf, 0xEu);
    }

    if (v23 != 2 && AuthStatus != v28)
    {
      acc_connection_setAuthStatus(*(void *)v20, 1, v28);
      accAuthProtocol_endpoint_notifyAuthStatus(*((void *)v20 + 7), v28);
    }
    if (v15)
    {
      *(void *)buf = 0;
      long long v33 = buf;
      uint64_t v34 = 0x2020000000;
      CFStringRef v35 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
      CFStringRef v35 = CFStringCreateCopy(kCFAllocatorDefault, *((CFStringRef *)v20 + 1));
      if (*((void *)v33 + 3))
      {
        dispatch_time_t v26 = dispatch_time(0, 20000000000);
        long long v27 = dispatch_get_global_queue(0, 0);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = ___acc_auth_protocol_handleSessionAuthenticationState_block_invoke;
        block[3] = &unk_100217220;
        void block[4] = buf;
        dispatch_after(v26, v27, block);
      }
      _Block_object_dispose(buf, 8);
    }
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    goto LABEL_46;
  }
}

uint64_t _acc_auth_protocol_certificateCacheSaveCert(uint64_t a1, uint64_t a2)
{
  if (platform_systemInfo_isInternalBuild()
    && (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) != 0)
  {
    return 1;
  }
  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a2, *(unsigned int *)(a2 + 8));
  if (!v4) {
    return 12;
  }
  CFDataRef v5 = v4;
  if (__getCerCacheObj_onceToken != -1) {
    dispatch_once(&__getCerCacheObj_onceToken, &__block_literal_global_2);
  }
  uint64_t v3 = MFAAAddCertDataEntryToCache() ^ 1;
  CFRelease(v5);
  return v3;
}

void ___acc_auth_protocol_handleSessionAuthenticationState_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[AccAuth] remove assertion for connection %@ \n", (uint8_t *)&v6, 0xCu);
  }

  platform_sleepAssertion_destroy(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  CFDataRef v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void *_acc_auth_protocol_getNewCertificateStruct()
{
  return malloc_type_calloc(1uLL, 0x28uLL, 0x10900407653B55CuLL);
}

void _acc_auth_protocol_returnCertificateStruct(void *a1)
{
  _acc_auth_protocol_cleanupCertificateData((uint64_t)a1);
  if (a1)
  {
    free(a1);
  }
}

uint64_t _acc_auth_protocol_cleanupCertificateData(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_cleanupCertificateData_cold_2();
  }

  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      int v9 = *(_DWORD *)(a1 + 8);
      int v10 = *(unsigned __int8 *)(a1 + 24);
    }
    else
    {
      int v9 = -1;
      int v10 = -1;
    }
    v11[0] = 67109632;
    v11[1] = v9;
    __int16 v12 = 1024;
    int v13 = v10;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccAuth] _cleanupCertificateData: certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v11, 0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_getCertificateChainHashList(uint64_t a1, void *__buf, unsigned int a3, int a4, int *a5)
{
  uint64_t v8 = 1;
  if (a5 && a3 >= 0x20 && a1 && __buf && a4)
  {
    arc4random_buf(__buf, a3 * a4);
    uint64_t v8 = 0;
    *a5 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v9 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v9 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a5) {
      int v11 = *a5;
    }
    else {
      int v11 = -1;
    }
    v13[0] = 67109888;
    v13[1] = a3;
    __int16 v14 = 1024;
    int v15 = a4;
    __int16 v16 = 1024;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccAuth] _getCertificateChainHashList: certificateHashSize %d, certificateHashMaxCount %d, certificateHashCount %d, errorNo %d \n", (uint8_t *)v13, 0x1Au);
  }

  return v8;
}

uint64_t _acc_auth_protocol_getCertificate(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = 1;
  if (a1 && a4)
  {
    if (a3) {
      size_t v7 = a3;
    }
    else {
      size_t v7 = 32;
    }
    uint64_t v8 = malloc_type_malloc(v7 + 650, 0x397AC654uLL);
    *(void *)(a4 + 32) = v8;
    if (v8)
    {
      arc4random_buf(v8, 0x28AuLL);
      uint64_t v9 = *(void *)(a4 + 32);
      *(void *)a4 = v9;
      *(_DWORD *)(a4 + 8) = 650;
      *(void *)(a4 + 16) = v9 + 650;
      *(unsigned char *)(a4 + 24) = v7;
      if (a2) {
        memcpy((void *)(v9 + 650), a2, v7);
      }
      else {
        _acc_auth_protocol_hash(2, (void *)v9, 0x28Au, (unsigned __int8 *)(v9 + 650), v7, (char *)(a4 + 24));
      }
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = 1;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v10 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a4)
    {
      int v12 = *(_DWORD *)(a4 + 8);
      int v13 = *(unsigned __int8 *)(a4 + 24);
    }
    else
    {
      int v12 = -1;
      int v13 = -1;
    }
    v15[0] = 67109632;
    v15[1] = v12;
    __int16 v16 = 1024;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth] _getCertificate: certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v15, 0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_hash(int a1, void *data, CC_LONG len, unsigned __int8 *md, unsigned int a5, char *a6)
{
  if ((a1 - 1) > 1 || data == 0 || len == 0 || md == 0 || a5 == 0 || a6 == 0) {
    return 1;
  }
  if (a1 == 1)
  {
    if (a5 >= 0x14)
    {
      CC_SHA1(data, len, md);
      char v15 = 20;
      goto LABEL_25;
    }
    return 1;
  }
  if (a1 == 2)
  {
    if (a5 >= 0x20)
    {
      CC_SHA256(data, len, md);
      char v15 = 32;
LABEL_25:
      uint64_t v11 = 0;
      *a6 = v15;
      goto LABEL_27;
    }
    return 1;
  }
  uint64_t v11 = 1;
LABEL_27:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    __int16 v16 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v16 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *a6;
    v20[0] = 67109888;
    v20[1] = a1;
    __int16 v21 = 1024;
    CC_LONG v22 = len;
    __int16 v23 = 1024;
    int v24 = v19;
    __int16 v25 = 1024;
    int v26 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[AccAuth] _hash: hashType %d, inDataLen %d, outHashLen %d, errorNo %d \n", (uint8_t *)v20, 0x1Au);
  }

  return v11;
}

uint64_t _acc_auth_protocol_getSigningCertificateHash(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v7 = 1;
  if (a1 && a2 && a3 && a4 >= 0x20 && a5)
  {
    if (platform_systemInfo_isInternalBuild()
      && acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth"))
    {
      arc4random_buf(a3, a4);
      uint64_t v7 = 0;
      char v9 = a4;
    }
    else
    {
      char v9 = 0;
      uint64_t v7 = 2;
    }
    *a5 = v9;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v10 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a5) {
      int v12 = *a5;
    }
    else {
      int v12 = -1;
    }
    v14[0] = 67109632;
    v14[1] = a4;
    __int16 v15 = 1024;
    int v16 = v12;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccAuth] _getSigningCertificateHash: outCertificateHashSize %d, outCertificateHashLen %d, errorNo %d \n", (uint8_t *)v14, 0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_createCertificateData(const void *a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = 1;
    if (a2 - 1 <= 0x3FF && a3)
    {
      uint64_t v7 = malloc_type_calloc(1uLL, a2 + 32, 0x69CBDBFDuLL);
      *(void *)(a3 + 32) = v7;
      if (v7)
      {
        *(void *)a3 = v7;
        *(_DWORD *)(a3 + 8) = a2;
        memcpy(v7, a1, a2);
        uint64_t v8 = (unsigned __int8 *)(*(void *)(a3 + 32) + a2);
        *(void *)(a3 + 16) = v8;
        *(unsigned char *)(a3 + 24) = 32;
        uint64_t v5 = _acc_auth_protocol_hash(2, *(void **)a3, *(_DWORD *)(a3 + 8), v8, 0x20u, (char *)(a3 + 24));
      }
      else
      {
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(unsigned char *)(a3 + 24) = 0;
      }
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    char v9 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v9 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a3)
    {
      int v11 = *(_DWORD *)(a3 + 8);
      int v12 = *(unsigned __int8 *)(a3 + 24);
    }
    else
    {
      int v11 = -1;
      int v12 = -1;
    }
    v14[0] = 67109632;
    v14[1] = v11;
    __int16 v15 = 1024;
    int v16 = v12;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccAuth] _createCertificateData: certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v14, 0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_createCertificateDataWithHash(const void *a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v7 = 1;
    if (a2 - 1 <= 0x3FF && a3 && a4 - 1 <= 0x1F && a5)
    {
      int v11 = malloc_type_calloc(1uLL, a2 + 32, 0x8DD2B827uLL);
      *(void *)(a5 + 32) = v11;
      if (v11)
      {
        *(void *)a5 = v11;
        *(_DWORD *)(a5 + 8) = a2;
        memcpy(v11, a1, a2);
        int v12 = (void *)(*(void *)(a5 + 32) + a2);
        *(void *)(a5 + 16) = v12;
        *(unsigned char *)(a5 + 24) = a4;
        memcpy(v12, a3, a4);
        uint64_t v7 = 0;
      }
      else
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        *(unsigned char *)(a5 + 24) = 0;
      }
    }
  }
  else
  {
    uint64_t v7 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    if (a5)
    {
      int v15 = *(_DWORD *)(a5 + 8);
      int v16 = *(unsigned __int8 *)(a5 + 24);
    }
    else
    {
      int v15 = -1;
      int v16 = -1;
    }
    v18[0] = 67109632;
    v18[1] = v15;
    __int16 v19 = 1024;
    int v20 = v16;
    __int16 v21 = 1024;
    int v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[AccAuth] _createCertificateDataWithHash: certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v18, 0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_setPeerCertificateDataAtIndex(unsigned __int8 *a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 1;
  if (a1 && a3)
  {
    uint64_t v6 = *((void *)a1 + 169);
    if (v6)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v8 = *(id *)(gLogObjects + 432);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = &_os_log_default;
        id v9 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *a1;
        int v21 = *((_DWORD *)a3 + 2);
        int v22 = *((unsigned __int8 *)a3 + 24);
        int v23 = *(_DWORD *)(v6 + 160);
        int v24 = 67110144;
        int v25 = v20;
        __int16 v26 = 1024;
        int v27 = v21;
        __int16 v28 = 1024;
        int v29 = v22;
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        __int16 v32 = 1024;
        int v33 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[AccAuth] _setPeerCertificateDataAtIndex: sessionID %d, certificateDataLen %d, certificateHashLen %d, index %d, certificateDataCount %d \n", (uint8_t *)&v24, 0x20u);
      }

      if (a2 > 3)
      {
        uint64_t v7 = 27;
      }
      else
      {
        uint64_t v10 = v6 + 40 * a2;
        if (*(_DWORD *)(v6 + 160) <= a2) {
          *(_DWORD *)(v6 + 160) = a2 + 1;
        }
        else {
          _acc_auth_protocol_cleanupCertificateData(v6 + 40 * a2);
        }
        uint64_t v7 = 0;
        long long v11 = *a3;
        long long v12 = a3[1];
        *(void *)(v10 + 32) = *((void *)a3 + 4);
        *(_OWORD *)uint64_t v10 = v11;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
    else
    {
      uint64_t v7 = 2;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a3)
    {
      int v16 = *((_DWORD *)a3 + 2);
      int v17 = *((unsigned __int8 *)a3 + 24);
    }
    else
    {
      int v16 = -1;
      int v17 = -1;
    }
    int v18 = *a1;
    if (v6) {
      int v19 = *(_DWORD *)(v6 + 160);
    }
    else {
      int v19 = -1;
    }
    int v24 = 67110400;
    int v25 = v18;
    __int16 v26 = 1024;
    int v27 = v16;
    __int16 v28 = 1024;
    int v29 = v17;
    __int16 v30 = 1024;
    unsigned int v31 = a2;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccAuth] _setPeerCertificateDataAtIndex: sessionID %d, certificateDataLen %d, certificateHashLen %d, index %d, certificateDataCount %d, errorNo %d \n", (uint8_t *)&v24, 0x26u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_setPeerLeafCertificateData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = 1;
  if (a1 && a2)
  {
    uint64_t v5 = *((void *)a1 + 169);
    if (v5)
    {
      if (platform_systemInfo_isInternalBuild()
        && acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth")
        && *(_DWORD *)(v5 + 160) >= 3u)
      {
        _acc_auth_protocol_cleanupCertificateInfo(v5);
      }
      uint64_t v4 = _acc_auth_protocol_setPeerCertificateDataAtIndex(a1, 0, (long long *)a2);
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = *a1;
    if (a2)
    {
      int v9 = *(_DWORD *)(a2 + 8);
      int v10 = *(unsigned __int8 *)(a2 + 24);
    }
    else
    {
      int v9 = -1;
      int v10 = -1;
    }
    v12[0] = 67109888;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[AccAuth] _setPeerLeafCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v12, 0x1Au);
  }

  return v4;
}

uint64_t _acc_auth_protocol_addPeerIntermediateCertificateData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  if (a1 && a2)
  {
    uint64_t v4 = *((void *)a1 + 169);
    if (v4)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v6 = *(id *)(gLogObjects + 432);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v6 = &_os_log_default;
        id v7 = &_os_log_default;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *a1;
        int v16 = *(_DWORD *)(a2 + 8);
        int v17 = *(unsigned __int8 *)(a2 + 24);
        int v18 = *(_DWORD *)(v4 + 160);
        int v19 = 67109888;
        int v20 = v15;
        __int16 v21 = 1024;
        int v22 = v16;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccAuth] _addPeerIntermediateCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, certificateDataCount %d \n", (uint8_t *)&v19, 0x1Au);
      }

      if (*(_DWORD *)(v4 + 160) > 2u)
      {
        uint64_t v5 = 27;
      }
      else
      {
        _acc_auth_protocol_setPeerCertificateDataAtIndex(a1, *(_DWORD *)(v4 + 160), (long long *)a2);
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 2;
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v10 = *(_DWORD *)(a2 + 8);
      int v11 = *(unsigned __int8 *)(a2 + 24);
    }
    else
    {
      int v10 = -1;
      int v11 = -1;
    }
    int v12 = *a1;
    if (v4) {
      int v13 = *(_DWORD *)(v4 + 160);
    }
    else {
      int v13 = -1;
    }
    int v19 = 67110144;
    int v20 = v12;
    __int16 v21 = 1024;
    int v22 = v10;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 1024;
    int v26 = v13;
    __int16 v27 = 1024;
    int v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[AccAuth] _addPeerIntermediateCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, certificateDataCount %d, errorNo %d \n", (uint8_t *)&v19, 0x20u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_validatePeerCertificateChain(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = 0;
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)(a1 + 1352);
  if (!v2)
  {
LABEL_9:
    uint64_t v3 = 1;
    goto LABEL_10;
  }
  if (!platform_systemInfo_isInternalBuild()
    || (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 160))
    {
      uint64_t v3 = _acc_auth_protocol_validateCertificateChain(a1, v2);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v3 = 0;
LABEL_10:
  if (platform_systemInfo_isInternalBuild()
    && (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v4 = *(id *)(gLogObjects + 432);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v10 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v12 = 67109120;
      int v13 = v3;
      id v7 = "[AccAuth] _acc_auth_protocol_validatePeerCertificateChain: errorNo %d \n";
      int v8 = v4;
      uint32_t v9 = 8;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v4 = *(id *)(gLogObjects + 432);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (v2) {
        int v6 = *(_DWORD *)(v2 + 160);
      }
      else {
        int v6 = -1;
      }
      int v12 = 67109376;
      int v13 = v6;
      __int16 v14 = 1024;
      int v15 = v3;
      id v7 = "[AccAuth] _acc_auth_protocol_validatePeerCertificateChain: peer certificateDataCount %d, errorNo %d \n";
      int v8 = v4;
      uint32_t v9 = 14;
      goto LABEL_31;
    }
  }

  return v3;
}

uint64_t _acc_auth_protocol_validateCertificateChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  uint64_t v4 = 1;
  id v5 = &unk_100239000;
  int v6 = &unk_100239000;
  id v7 = 0;
  if (a1 && a2)
  {
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      uint64_t v4 = 0;
      uint64_t v3 = 0;
      id v7 = 0;
    }
    else
    {
      int v8 = (_DWORD *)(v2 + 160);
      id v9 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(unsigned int *)(v2 + 160)];
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects <= 54;
      }
      else {
        BOOL v10 = 1;
      }
      int v11 = !v10;
      if (v9)
      {
        uint64_t v3 = v9;
        uint64_t v37 = v2;
        if (v11)
        {
          int v12 = *(id *)(gLogObjects + 432);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v12 = &_os_log_default;
          id v14 = &_os_log_default;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          _acc_auth_protocol_validateCertificateChain_cold_6();
        }

        if (*v8)
        {
          unint64_t v15 = 0;
          int v16 = (_DWORD *)(v2 + 8);
          while (1)
          {
            int v17 = v5;
            uint64_t v18 = v5[49];
            int v19 = v6;
            int v20 = v6[100];
            if (v18 && v20 >= 55)
            {
              __int16 v21 = *(id *)(v18 + 432);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v40 = v18;
                *(_WORD *)&v40[8] = 1024;
                int v41 = v20;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
              id v22 = &_os_log_default;
              __int16 v21 = &_os_log_default;
            }
            int v6 = v19;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              int v25 = *v16;
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)int v40 = v15;
              *(_WORD *)&v40[4] = 1024;
              *(_DWORD *)&v40[6] = v25;
              _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[AccAuth] _validateCertificateChain: [%d] certificateDataLen %u \n", buf, 0xEu);
            }

            if (!*v16)
            {
              id v7 = 0;
              uint64_t v4 = 2;
              goto LABEL_54;
            }
            uint64_t v23 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((void *)v16 - 1));
            if (!v23) {
              break;
            }
            int v24 = (void *)v23;
            [v3 addObject:v23];

            ++v15;
            v16 += 10;
            id v5 = v17;
            if (v15 >= *v8) {
              goto LABEL_35;
            }
          }
          id v7 = 0;
          uint64_t v4 = 12;
LABEL_54:
          id v5 = v17;
          uint64_t v2 = v37;
        }
        else
        {
LABEL_35:
          uint64_t v26 = v5[49];
          if (v26 && (int)v6[100] >= 55)
          {
            __int16 v27 = *(id *)(v26 + 432);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v27 = &_os_log_default;
            id v29 = &_os_log_default;
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            _acc_auth_protocol_validateCertificateChain_cold_4(v3, v27);
          }

          uint64_t v2 = v37;
          if ([v3 count])
          {
            __int16 v30 = +[MFAACertificateManager sharedManager];
            id v38 = 0;
            unsigned int v31 = [v30 validateCertificateChain:v3 realtime:0 error:&v38];
            id v7 = v38;

            uint64_t v4 = v31 != 1;
          }
          else
          {
            id v7 = 0;
            uint64_t v4 = 2;
          }
        }
      }
      else
      {
        if (v11)
        {
          int v13 = *(id *)(gLogObjects + 432);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v13 = &_os_log_default;
          id v28 = &_os_log_default;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          _acc_auth_protocol_validateCertificateChain_cold_2();
        }

        uint64_t v3 = 0;
        id v7 = 0;
        uint64_t v4 = 12;
      }
    }
  }
  uint64_t v32 = v5[49];
  if (v32 && (int)v6[100] >= 55)
  {
    int v33 = *(id *)(v32 + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v33 = &_os_log_default;
    id v34 = &_os_log_default;
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    if (v2) {
      int v35 = *(_DWORD *)(v2 + 160);
    }
    else {
      int v35 = -1;
    }
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)int v40 = v35;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "[AccAuth] _validateCertificateChain: certificateDataCount %d, errorNo %d \n", buf, 0xEu);
  }

  return v4;
}

uint64_t _acc_auth_protocol_challengeSizeForCertificate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  int v4 = 0;
  if (!a1 || !a2) {
    goto LABEL_17;
  }
  CFDataRef v5 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a2, *(unsigned int *)(a2 + 8));
  int v6 = MFAACertificateAuthVersionNumber();
  int v4 = v6;
  if (v6 == 2)
  {
    uint64_t v3 = 20;
    if (!v5) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v6 == 3)
  {
    uint64_t v3 = 32;
    if (!v5) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (!platform_systemInfo_isInternalBuild())
  {
    uint64_t v3 = 0;
    if (!v5) {
      goto LABEL_17;
    }
LABEL_16:
    CFRelease(v5);
    goto LABEL_17;
  }
  if (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth")) {
    uint64_t v3 = 32;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5) {
    goto LABEL_16;
  }
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v7 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v9 = *(_DWORD *)(a2 + 8);
      int v10 = *(unsigned __int8 *)(a2 + 24);
    }
    else
    {
      int v9 = -1;
      int v10 = -1;
    }
    v12[0] = 67109888;
    v12[1] = v9;
    __int16 v13 = 1024;
    int v14 = v10;
    __int16 v15 = 1024;
    int v16 = v4;
    __int16 v17 = 1024;
    int v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[AccAuth] _challengeSizeForCertificate: certificateDataLen %d, certificateHashLen %d, authVerMajor %d, challengeSize %d \n", (uint8_t *)v12, 0x1Au);
  }

  return v3;
}

uint64_t _acc_auth_protocol_generateChallenge(uint64_t a1, uint64_t a2, void *__buf, size_t __nbytes)
{
  int v4 = __nbytes;
  uint64_t v5 = 1;
  if (a1 && a2 && __buf && __nbytes)
  {
    arc4random_buf(__buf, __nbytes);
    uint64_t v5 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109376;
    v9[1] = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[AccAuth] _generateChallenge: outChallengeLen %d, errorNo %d \n", (uint8_t *)v9, 0xEu);
  }

  return v5;
}

uint64_t _acc_auth_protocol_generateChallengeResponse(uint64_t a1, uint64_t a2, void *__src, size_t __n, void *__dst, int a6, unsigned char *a7)
{
  int v8 = __n;
  uint64_t v10 = 1;
  if (a2)
  {
    if (a1)
    {
      if (__src)
      {
        if (__n)
        {
          if (__dst)
          {
            char v11 = a6;
            if (a6)
            {
              if (a7)
              {
                memcpy(__dst, __src, __n);
                uint64_t v10 = 0;
                *a7 = v11;
              }
            }
          }
        }
      }
    }
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v12 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v14 = *(_DWORD *)(a2 + 8);
      int v15 = *(unsigned __int8 *)(a2 + 24);
    }
    else
    {
      int v14 = -1;
      int v15 = -1;
    }
    int v16 = *a7;
    v18[0] = 67110144;
    v18[1] = v14;
    __int16 v19 = 1024;
    int v20 = v15;
    __int16 v21 = 1024;
    int v22 = v8;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[AccAuth] _generateChallengeResponse: certificateDataLen %d, certificateHashLen %d, inChallengeLen %d, outResponseLen %d, errorNo %d \n", (uint8_t *)v18, 0x20u);
  }

  return v10;
}

uint64_t _acc_auth_protocol_verifyChallengeResponse(uint64_t a1, const UInt8 *a2, unsigned int a3, const UInt8 *a4, unsigned int a5)
{
  uint64_t v7 = 1;
  if (!a1) {
    goto LABEL_36;
  }
  if (!a2) {
    goto LABEL_36;
  }
  if (!a3) {
    goto LABEL_36;
  }
  if (!a4) {
    goto LABEL_36;
  }
  if (!a5) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a1 + 1352);
  if (!v10) {
    goto LABEL_36;
  }
  if (!*(_DWORD *)(v10 + 160)) {
    goto LABEL_36;
  }
  if (!*(void *)v10) {
    goto LABEL_36;
  }
  CFIndex v11 = *(unsigned int *)(v10 + 8);
  if (!v11) {
    goto LABEL_36;
  }
  CFDataRef v12 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)v10, v11);
  CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, a2, a3);
  CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, a4, a5);
  CFDataRef v15 = v14;
  if (v12 && v13 && v14)
  {
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      uint64_t v7 = 0;
    }
    else if (MFAAVerifyNonceSignature())
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 80;
    }
    if (acc_userDefaults_BOOLForKey(@"ForceAuthFail"))
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v16 = *(id *)(gLogObjects + 432);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v16 = &_os_log_default;
        id v17 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v21 = 67109888;
        unsigned int v22 = a3;
        __int16 v23 = 1024;
        unsigned int v24 = a5;
        __int16 v25 = 1024;
        int v26 = v7;
        __int16 v27 = 1024;
        int v28 = 80;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[AccAuth] _verifyChallengeResponse: challengeLen %d, responseLen %d, override errorNo %d -> %d \n", (uint8_t *)&v21, 0x1Au);
      }

      uint64_t v7 = 80;
    }
  }
  else
  {
    uint64_t v7 = 12;
    if (!v12) {
      goto LABEL_32;
    }
  }
  CFRelease(v12);
LABEL_32:
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_36:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v18 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v18 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v21 = 67109632;
    unsigned int v22 = a3;
    __int16 v23 = 1024;
    unsigned int v24 = a5;
    __int16 v25 = 1024;
    int v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[AccAuth] _verifyChallengeResponse: challengeLen %d, responseLen %d, errorNo %d \n", (uint8_t *)&v21, 0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_certificateCacheGetCert(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t CertificateDataWithHash = 1;
  if (a1 && a2 && a3 >= 0x20 && a4)
  {
    uint64_t v9 = *(void *)(a1 + 1352);
    if (!v9) {
      goto LABEL_15;
    }
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey(@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      if (*(_DWORD *)(v9 + 160) >= 3u)
      {
        _acc_auth_protocol_getCertificate(a1, a2, a3, a4);
        uint64_t CertificateDataWithHash = 0;
        goto LABEL_19;
      }
LABEL_15:
      uint64_t CertificateDataWithHash = 1;
      goto LABEL_19;
    }
    if (__getCerCacheObj_onceToken != -1) {
      dispatch_once(&__getCerCacheObj_onceToken, &__block_literal_global_2);
    }
    CFStringRef v10 = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)a2, a3, 0x8000100u, 0);
    if (v10)
    {
      CFStringRef v11 = v10;
      CFDataRef v12 = (const __CFData *)MFAACreateCertDataFromSerialNumber();
      if (v12)
      {
        CFDataRef v13 = v12;
        BytePtr = CFDataGetBytePtr(v12);
        unsigned int Length = CFDataGetLength(v13);
        uint64_t CertificateDataWithHash = _acc_auth_protocol_createCertificateDataWithHash(BytePtr, Length, a2, a3, a4);
        CFRelease(v13);
      }
      else
      {
        uint64_t CertificateDataWithHash = 2;
      }
      CFRelease(v11);
    }
    else
    {
      uint64_t CertificateDataWithHash = 2;
    }
  }
LABEL_19:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v16 = *(id *)(gLogObjects + 432);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v16 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    if (a4)
    {
      int v18 = *(_DWORD *)(a4 + 8);
      int v19 = *(unsigned __int8 *)(a4 + 24);
    }
    else
    {
      int v18 = -1;
      int v19 = -1;
    }
    v21[0] = 67109888;
    v21[1] = a3;
    __int16 v22 = 1024;
    int v23 = v18;
    __int16 v24 = 1024;
    int v25 = v19;
    __int16 v26 = 1024;
    int v27 = CertificateDataWithHash;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[AccAuth] _certificateCacheGetCert: inCertificateHashLen %d, certificateDataLen %d, certificateHashLen %d, errorNo %d \n", (uint8_t *)v21, 0x1Au);
  }

  return CertificateDataWithHash;
}

uint64_t iap2_assistiveTouch_startAssistiveTouchHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StartAssistiveTouch %@", (uint8_t *)&v11, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 3u);
    if (Feature)
    {
      int v8 = (unsigned __int8 *)Feature;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 272);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_startAssistiveTouchHandler_cold_1(a1, v8);
      }
      uint64_t v2 = 1;
      *int v8 = 1;
      platform_assistiveTouch_setState(*(void **)(a1 + 8), 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_assistiveTouch_stopAssistiveTouchHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StopAssistiveTouch %@", (uint8_t *)&v9, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 3u);
    if (result)
    {
      uint64_t v7 = (unsigned __int8 *)result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        int v8 = *(NSObject **)(gLogObjects + 272);
      }
      else
      {
        int v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_stopAssistiveTouchHandler_cold_1(a1, v7);
      }
      *uint64_t v7 = 0;
      platform_assistiveTouch_setState(*(void **)(a1 + 8), 0);
      return 1;
    }
  }
  return result;
}

uint64_t iap2_assistiveTouch_startAssistiveTouchUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StartAssistiveTouchUpdate %@", (uint8_t *)&v11, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 3u);
    if (Feature)
    {
      uint64_t v8 = Feature;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        int v9 = *(NSObject **)(gLogObjects + 272);
      }
      else
      {
        int v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_startAssistiveTouchUpdateHandler_cold_1(a1, v8);
      }
      uint64_t v2 = 1;
      *(unsigned char *)(v8 + 1) = 1;
      platform_assistiveTouch_requestStatus(*(void **)(a1 + 8));
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_assistiveTouch_stopAssistiveTouchUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StopAssistiveTouchUpdate %@", (uint8_t *)&v9, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 3u);
    if (result)
    {
      uint64_t v7 = result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 272);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_stopAssistiveTouchUpdateHandler_cold_1(a1, v7);
      }
      *(unsigned char *)(v7 + 1) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t iap2_assistiveTouch_notifyStatusUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    char v4 = a2 != 0;
    if (gLogObjects && gNumLogObjects >= 35)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 272);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = v3[1];
      int v15 = 138412546;
      uint64_t v16 = v6;
      __int16 v17 = 1024;
      BOOL v18 = a2 != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2AssistiveTouch notifyStatusUpdate: %@ state=%d", (uint8_t *)&v15, 0x12u);
    }
    uint64_t result = iap2_feature_getFeature((uint64_t)v3, 3u);
    if (result)
    {
      uint64_t v7 = result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 272);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v3[1];
        int v14 = *(unsigned __int8 *)(v7 + 1);
        int v15 = 138413314;
        uint64_t v16 = v13;
        __int16 v17 = 1024;
        BOOL v18 = v14;
        __int16 v19 = 1024;
        BOOL v20 = a2 != 0;
        __int16 v21 = 2048;
        __int16 v22 = v3;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "iAP2AssistiveTouch notifyStatusUpdate: %@ infoRequested %d, state=%d pEndpoint=%p assistiveTouch=%p", (uint8_t *)&v15, 0x2Cu);
      }
      if (*(unsigned char *)(v7 + 1))
      {
        uint64_t v9 = iAP2MsgInit((uint64_t)(v3 + 15), 21507, v3[24], 0xFFFF, 0, 0);
        uint64_t result = (uint64_t)iAP2MsgAddU8Param(v9, 0, 0, v4);
        if (result)
        {
          if (gLogObjects && gNumLogObjects >= 35)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 272);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = v3[1];
            int MsgID = iAP2MsgGetMsgID(v9);
            int v15 = 138412546;
            uint64_t v16 = v11;
            __int16 v17 = 1024;
            BOOL v18 = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "iAP2AssistiveTouch notifyStatusUpdate: %@ send message %xh", (uint8_t *)&v15, 0x12u);
          }
          iap2_sessionControl_sendOutgoingMessage(v3, v9);
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_WORD *_createFeature_18(_WORD *result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 21;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *((void *)v1 + 1);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2AssistiveTouch _createFeature %@", (uint8_t *)&v5, 0xCu);
    }
    uint64_t result = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    if (result) {
      _DWORD *result = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_18(void **a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "iAP2AssistiveTouch _destroyFeature %@", (uint8_t *)&v8, 0xCu);
    }
    if (*a1)
    {
      if (*(unsigned char *)*a1) {
        platform_assistiveTouch_accessoryDetached(*(void *)(a2 + 8));
      }
      platform_assistiveTouch_decrementUserCount();
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _startFeatureFromDevice_11(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 21;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2AssistiveTouch _startFeatureFromDevice", v4, 2u);
    }
    uint64_t result = iap2_feature_getFeature(v1, 3u);
    if (result)
    {
      char v5 = 0;
      if (iap2_identification_checkRequiredMsgIDs(v1, (uint64_t)&gskMsgAssistiveTouchList, 5, &v5))
      {
        platform_assistiveTouch_incrementUserCount();
        platform_assistiveTouch_accessoryAttached(*(void *)(v1 + 8));
      }
      return 1;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_16(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgAssistiveTouchList, 5u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 3u);
    iap2_identification_setIdentifiedForFeature(a1, 3u);
  }
  return v3;
}

void OUTLINED_FUNCTION_3_17(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x2Cu);
}

void mfi4Auth_relay_cleanup(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 168;
  do
  {
    uint64_t v3 = *(void **)(v2 + v1);
    *(void *)(v2 + v1) = 0;

    v1 += 8;
  }
  while (v1 != 24);
}

uint64_t mfi4Auth_protocol_processIncomingMessageRelay(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v15 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v15 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_3();
    }
    goto LABEL_23;
  }
  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v16 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v16 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_14();
    }
    goto LABEL_49;
  }
  int MsgID = iAP2MsgGetMsgID(a3);
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 55;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (!MsgID)
  {
    if (v12)
    {
      uint64_t v16 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v16 = &_os_log_default;
      id v21 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_16();
    }
LABEL_49:

    char v22 = 0;
    char v59 = 1;
LABEL_67:
    char v25 = 1;
LABEL_68:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      __int16 v26 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v26 = &_os_log_default;
      id v27 = &_os_log_default;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      int v28 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)CFStringRef v61 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "processIncomingMessageRelay: action %d", buf, 8u);
    }

    uint64_t v29 = *(void *)(a1 + 72);
    if (acc_userDefaults_BOOLForKey(@"ForceAccInfoUpdateRelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v30 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v30 = &_os_log_default;
        id v31 = &_os_log_default;
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)CFStringRef v61 = v29;
        *(_WORD *)&v61[8] = 1024;
        LODWORD(v62) = 1;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx |= 0x%x", buf, 0x12u);
      }

      v29 |= 1uLL;
    }
    if (acc_userDefaults_BOOLForKey(@"IgnoreAccInfoUpdateRelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = &_os_log_default;
        id v33 = &_os_log_default;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)CFStringRef v61 = v29;
        *(_WORD *)&v61[8] = 1024;
        LODWORD(v62) = -2;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx &= 0x%x", buf, 0x12u);
      }

      v29 &= ~1uLL;
    }
    if (acc_userDefaults_BOOLForKey(@"ForceT56RelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v34 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v34 = &_os_log_default;
        id v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)CFStringRef v61 = v29;
        *(_WORD *)&v61[8] = 1024;
        LODWORD(v62) = 4;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx |= 0x%x", buf, 0x12u);
      }

      v29 |= 4uLL;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      long long v36 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      long long v36 = &_os_log_default;
      id v37 = &_os_log_default;
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v38 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      *(void *)CFStringRef v61 = v29;
      *(_WORD *)&v61[8] = 2048;
      unint64_t v62 = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: supportedSecureTunnelCapabilitiesMask 0x%llx, processed 0x%llx", buf, 0x16u);
    }

    if (*(_DWORD *)(a1 + 32) || !v29 || v29 == *(void *)(a1 + 80))
    {
      if ((v22 & 1) == 0) {
        goto LABEL_149;
      }
LABEL_118:
      uint64_t result = 1;
      if (v25) {
        return result;
      }
      goto LABEL_158;
    }
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
    if (EndpointWithUUID)
    {
      int v41 = EndpointWithUUID;
      if (EndpointWithUUID[7])
      {
        if (v29 & 1) == 0 || (uint64_t v42 = *(void *)(a1 + 80), (v42))
        {
          if ((v29 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            uint64_t v46 = gLogObjects;
            int v47 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              int v48 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)CFStringRef v61 = v46;
                *(_WORD *)&v61[8] = 1024;
                LODWORD(v62) = v47;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
              int v48 = &_os_log_default;
              id v56 = &_os_log_default;
            }
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v57 = v41[2];
              *(_DWORD *)buf = 138413058;
              *(void *)CFStringRef v61 = v57;
              *(_WORD *)&v61[8] = 2048;
              unint64_t v62 = v29 & 0xFFFFFFFFFFFFFFFCLL;
              __int16 v63 = 1024;
              int v64 = 2;
              __int16 v65 = 2048;
              uint64_t v66 = 4;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: %@, supportedSecureTunnelCapabilitiesMask 0x%llx, currentType/Mask %d/0x%llx", buf, 0x26u);
            }

            if ((v29 & 4) != 0)
            {
              uint64_t v58 = *(void *)(a1 + 80);
              if ((v58 & 4) == 0)
              {
                *(void *)(a1 + 80) = v58 | 4;
                mfi4Auth_relay_StartRelayForType((const void **)a1, 2u, (uint64_t)a4, a5);
              }
            }
          }
        }
        else
        {
          *(void *)(a1 + 80) = v42 | 1;
          uint64_t v43 = logObjectForModule_9();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v44 = v41[2];
            *(_DWORD *)buf = 138412290;
            *(void *)CFStringRef v61 = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: %@, initMessage RequestAccessoryInfoUpdate", buf, 0xCu);
          }

          *(_DWORD *)(a1 + 32) = 14;
          mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate(a1, a4);
        }
        goto LABEL_118;
      }
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v45 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v45 = &_os_log_default;
        id v51 = &_os_log_default;
      }
      char v50 = v59;
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        goto LABEL_148;
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v45 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v45 = &_os_log_default;
        id v49 = &_os_log_default;
      }
      char v50 = v59;
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
LABEL_148:

        if (v50) {
          goto LABEL_149;
        }
        goto LABEL_118;
      }
    }
    mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    goto LABEL_148;
  }
  int v13 = MsgID;
  if (v12)
  {
    int v14 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v14 = &_os_log_default;
    id v18 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int16 *)(a1 + 28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)CFStringRef v61 = v19;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "processIncomingMessageRelay: cmd:0x%x  rsp:0x%x", buf, 0xEu);
  }

  if (v13 == 21094)
  {
    if (!a2) {
      goto LABEL_149;
    }
    if (mfi4Auth_relay_handle_iAP2RelaySucceeded(a1, a3, a4))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v15 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v15 = &_os_log_default;
        id v55 = &_os_log_default;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_22();
      }
      goto LABEL_23;
    }
    goto LABEL_137;
  }
  if (v13 == 21093)
  {
    if (!a2) {
      goto LABEL_149;
    }
    mfi4Auth_relay_handle_iAP2RelayFailed(a1, a3);
    goto LABEL_66;
  }
  if (v13 != 21092)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      __int16 v23 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v23 = &_os_log_default;
      id v24 = &_os_log_default;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
    }

LABEL_66:
    char v59 = 0;
    char v22 = 1;
    goto LABEL_67;
  }
  if (!a2) {
    goto LABEL_149;
  }
  if (!mfi4Auth_relay_handle_iAP2RelayRemote(a1, a3, a4))
  {
LABEL_137:
    char v59 = 0;
    char v25 = 0;
    char v22 = 1;
    goto LABEL_68;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v15 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v15 = &_os_log_default;
    id v54 = &_os_log_default;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessageRelay_cold_20();
  }
LABEL_23:

LABEL_149:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v52 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v52 = &_os_log_default;
    id v53 = &_os_log_default;
  }
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessageRelay_cold_1();
  }

  uint64_t result = 0;
  if (a5) {
LABEL_158:
  }
    *a5 = result;
  return result;
}

uint64_t mfi4Auth_relay_handle_iAP2RelayRemote(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v66 = 1;
  unsigned __int8 v65 = 0;
  unsigned __int16 v64 = 0;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_1();
    }
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v10 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_20();
    }
    goto LABEL_28;
  }
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects <= 55;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (!a2)
  {
    if (v7)
    {
      uint64_t v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = &_os_log_default;
      id v31 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_3();
    }
    goto LABEL_28;
  }
  if (v7)
  {
    uint64_t v9 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v9 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = iAP2MsgGetMsgID(a2);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = iAP2MsgGetMsgLen(a2);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_iAP2RelayRemote: msgID 0x%04x, len %d", buf, 0xEu);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    int v15 = (unsigned __int16 *)FirstParam;
    uint64_t DataAsData = iAP2MsgGetDataAsData(FirstParam, &v66);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v15);
    uint64_t v4 = +[NSData dataWithBytes:DataAsData length:ParamValueLen];
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v18 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v18 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v15);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = ParamValueLen;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_iAP2RelayRemote: paramID %d, dataLen %d", buf, 0xEu);
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v22 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v22 = &_os_log_default;
      id v23 = &_os_log_default;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_iAP2RelayRemote: %@", buf, 0xCu);
    }

    CFDataRef v24 = mfi4Auth_util_unpackFromTunnelDataiAP2Msg((const __CFData *)v4, &v65, &v64);
    if (!v24)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = &_os_log_default;
        id v34 = &_os_log_default;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelayRemote_cold_7();
      }

      goto LABEL_28;
    }
    CFDataRef v25 = v24;
    unint64_t Length = CFDataGetLength(v24);
    uint64_t v27 = Length;
    if (gLogObjects) {
      BOOL v28 = gNumLogObjects <= 55;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    if (Length <= 5)
    {
      if (v29)
      {
        id v33 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v33 = &_os_log_default;
        id v38 = &_os_log_default;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelayRemote_cold_15(v27, v33, v39, v40, v41, v42, v43, v44);
      }
    }
    else
    {
      if (v29)
      {
        __int16 v30 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v30 = &_os_log_default;
        id v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v64;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v27;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "mfi4Auth_relay_handle_iAP2RelayRemote: msgID 0x%04x, len %zu", buf, 0x12u);
      }

      if (v64 == 21763)
      {
        unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v68 = v46;
        long long v69 = v46;
        *(_OWORD *)buf = v46;
        *(_OWORD *)&uint8_t buf[16] = v46;
        int v47 = malloc_type_calloc(1uLL, 0x1001FuLL, 0x9EDFF0B0uLL);
        if (v47)
        {
          int v48 = v47;
          uint64_t v49 = mfi4Auth_util_parseMessage((uint64_t)v47, (uint64_t)buf, v25, 16448);
          if (v49)
          {
            BOOL v66 = _mfi4Auth_relay_handle_AccessoryInformationUpdate(a1, v49);
            free(v48);
LABEL_111:
            CFRelease(v25);

            return v66;
          }
          uint64_t v57 = logObjectForModule_9();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_13();
          }

          free(v48);
        }
        else
        {
          id v56 = logObjectForModule_9();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_12();
          }
        }
LABEL_125:
        CFRelease(v25);
LABEL_28:

        return -1;
      }
      if (v64 == 21761)
      {
        if (v65 >= 3uLL)
        {
          id v33 = logObjectForModule_9();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_11();
          }
        }
        else
        {
          uint64_t v36 = *(void *)(a1 + 8 * v65 + 168);
          id v37 = logObjectForModule_9();
          id v33 = v37;
          if (v36)
          {
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v65;
              *(_WORD *)&uint8_t buf[8] = 2112;
              *(void *)&buf[10] = v25;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "mfi4Auth_relay_handle_iAP2RelayRemote: type %d, data %@", buf, 0x12u);
            }

            (*(void (**)(void))(*(void *)(a1 + 8 * v65 + 168) + 16))();
            BOOL v66 = 0;
            goto LABEL_111;
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_10((uint64_t)&v65, v33, v58, v59, v60, v61, v62, v63);
          }
        }
      }
      else
      {
        id v33 = logObjectForModule_9();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_handle_iAP2RelayRemote_cold_9((uint64_t)&v64, v33, v50, v51, v52, v53, v54, v55);
        }
      }
    }

    goto LABEL_125;
  }
  if (!acc_userDefaults_BOOLForKey(@"MFi4RelayReadRetryDelayMs")) {
    return -1;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v19 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v19 = &_os_log_default;
    id v45 = &_os_log_default;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_relay_handle_iAP2RelayRemote_cold_5();
  }

  usleep(0x3E8u);
  return (BOOL)mfi4Auth_relay_initMessage_RequestiAP2RelayRead(a1, a3);
}

uint64_t mfi4Auth_relay_handle_iAP2RelaySucceeded(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v3 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v3 = &_os_log_default;
      id v6 = &_os_log_default;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_1();
    }
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v3 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v3 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_5();
    }
LABEL_23:

    return 1;
  }
  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v3 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v3 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_3();
    }
    goto LABEL_23;
  }

  return mfi4Auth_relay_initMessage_RequestiAP2RelayRead(a1, a3);
}

uint64_t mfi4Auth_relay_handle_iAP2RelayFailed(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = &_os_log_default;
      id v4 = &_os_log_default;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_1();
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_5();
    }
LABEL_21:

    return 0;
  }
  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = &_os_log_default;
      id v6 = &_os_log_default;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_3();
    }
    goto LABEL_21;
  }
  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return 0;
}

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 1;
  }
  id v4 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  if (!v4)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v9 = &_os_log_default;
      id v10 = &_os_log_default;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate_cold_1(v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_24;
  }
  id v5 = v4;
  id v6 = malloc_type_malloc(0xFFFFuLL, 0x232085BFuLL);
  if (!v6)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v9 = &_os_log_default;
      id v18 = &_os_log_default;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate_cold_3(v9, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_24:

    return 1;
  }
  iAP2MsgInit((uint64_t)v5, 21762, (uint64_t)v6, 0xFFFF, 0, 0);
  mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(a1, a2, (uint64_t)v5);
  *(_WORD *)(a1 + 28) = 20836;
  iAP2MsgCleanup((uint64_t)v5);
  id v7 = (void *)v5[3];
  if (v7) {
    free(v7);
  }
  free(v5);
  return 0;
}

uint64_t mfi4Auth_relay_StartRelayForType(const void **a1, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_73;
  }
  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_3();
    }
    goto LABEL_73;
  }
  if (a2 < 3)
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
    if (EndpointWithUUID)
    {
      uint64_t v9 = (uint64_t)EndpointWithUUID;
      if (acc_endpoint_getParentConnection((uint64_t)EndpointWithUUID))
      {
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects <= 55;
        }
        else {
          BOOL v10 = 1;
        }
        int v11 = !v10;
        if (*(void *)(v9 + 56))
        {
          if (v11)
          {
            uint64_t v12 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v12 = &_os_log_default;
            id v19 = &_os_log_default;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = *(void *)(v9 + 16);
            int v31 = 136315650;
            uint64_t v32 = "mfi4Auth_relay_StartRelayForType";
            __int16 v33 = 2112;
            uint64_t v34 = v20;
            __int16 v35 = 1024;
            unsigned int v36 = a2;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s: %@, secureTunnelType %d", (uint8_t *)&v31, 0x1Cu);
          }

          if (a2 == 2)
          {
            uint64_t result = mfi4Auth_relay_StartRelayForT56(a1, a3, a4);
            goto LABEL_75;
          }
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v14 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v14 = &_os_log_default;
            id v30 = &_os_log_default;
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_StartRelayForType_cold_11();
          }
          goto LABEL_39;
        }
        if (v11)
        {
          uint64_t v13 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v13 = &_os_log_default;
          id v29 = &_os_log_default;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_endpoint_processIncomingData_cold_1();
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v13 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v13 = &_os_log_default;
          id v22 = &_os_log_default;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_StartRelayForType_cold_7(v9, v13, v23, v24, v25, v26, v27, v28);
        }
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v13 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v13 = &_os_log_default;
        id v18 = &_os_log_default;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
      }
    }
LABEL_73:

    goto LABEL_74;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_relay_StartRelayForType_cold_14();
  }
LABEL_39:

LABEL_74:
  uint64_t result = 0;
LABEL_75:
  if (a4) {
    *a4 = result;
  }
  return result;
}

uint64_t mfi4Auth_relay_StartRelayForT56(const void **a1, uint64_t a2, unsigned char *a3)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_43;
  }
  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_3();
    }
    goto LABEL_43;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
  if (!EndpointWithUUID)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    }
    goto LABEL_43;
  }
  uint64_t v5 = (uint64_t)EndpointWithUUID;
  ParentConnection = (CFIndex *)acc_endpoint_getParentConnection((uint64_t)EndpointWithUUID);
  if (!ParentConnection)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = &_os_log_default;
      id v16 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_7(v5, v11, v17, v18, v19, v20, v21, v22);
    }
LABEL_43:
    uint64_t v12 = 0;
LABEL_44:

    return v12;
  }
  id v7 = acc_manager_newEndpointForConnection(ParentConnection, 0xFu, 0x11u, *(const void **)(v5 + 16));
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v10 = (uint64_t)v7 + 16;
    CFStringRef v9 = (const __CFString *)*((void *)v7 + 2);
    if (v9)
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = __mfi4Auth_relay_StartRelayForT56_block_invoke;
      v32[3] = &unk_100219088;
      int v11 = (id)CFStringCreateCopy(kCFAllocatorDefault, v9);
      __int16 v33 = v11;
      acc_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler(v5, 2, v32);
      acc_endpoint_setParentEndpointUUID(v8, *(CFStringRef *)(v5 + 16));
      uint64_t v12 = acc_endpoint_publish(v8);
      if (v12)
      {
        if (a3) {
          *a3 = 1;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v24 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v24 = &_os_log_default;
          id v25 = &_os_log_default;
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_StartRelayForT56_cold_9(v10, v24, v26, v27, v28, v29, v30, v31);
        }
      }
      goto LABEL_44;
    }
  }
  return 0;
}

uint64_t mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v10 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_24;
  }
  if (!v5)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v10 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_3();
    }
LABEL_24:

    goto LABEL_31;
  }
  if (a2 >= 3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_5();
    }
  }
  else
  {
    id v7 = objc_retainBlock(v5);
    uint64_t v8 = a1 + 8 * a2;
    CFStringRef v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 168) = v7;
  }
LABEL_31:

  return 0;
}

uint64_t mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient(uint64_t a1, unsigned int a2, const __CFData *a3)
{
  uint64_t v23 = 0;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = &_os_log_default;
      id v11 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_1();
    }
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = &_os_log_default;
      id v10 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_13();
    }
LABEL_29:

LABEL_30:
    uint64_t v12 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_3();
    }
    goto LABEL_29;
  }
  if (gLogObjects) {
    BOOL v7 = gNumLogObjects <= 55;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  if (a2 >= 3)
  {
    if (v8)
    {
      id v14 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_5();
    }

    goto LABEL_30;
  }
  if (v8)
  {
    CFStringRef v9 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v9 = &_os_log_default;
    id v16 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(unsigned __int16 *)(a1 + 200);
    *(_DWORD *)buf = 67109634;
    int v25 = v22;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    __int16 v28 = 2112;
    CFDataRef v29 = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processOutgoingSecureTunnelDataForClient: sessionID %x, type %d, dataOut %@", buf, 0x18u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
  if (!EndpointWithUUID)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = &_os_log_default;
      id v21 = &_os_log_default;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    }
    goto LABEL_29;
  }
  uint64_t v18 = EndpointWithUUID[7];
  if (!v18)
  {
    id v4 = logObjectForModule_9();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
    goto LABEL_29;
  }
  if (!*(void *)(a1 + 8 * a2 + 168))
  {
    id v4 = logObjectForModule_9();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_8();
    }
    goto LABEL_29;
  }
  mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData(a1, (uint64_t *)&v23, a2, a3);
  if (*(void *)(a1 + 192))
  {
    uint64_t v19 = logObjectForModule_9();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_9();
    }

    (*(void (**)(void))(*(void *)(a1 + 192) + 16))();
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = mfi4Auth_endpoint_sendOutgoingData(v18, (uint64_t)v23);
  }
LABEL_31:
  if (v23) {
    free(v23);
  }
  return v12;
}

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData(uint64_t a1, uint64_t *a2, char a3, CFDataRef theData)
{
  uint64_t result = 1;
  if (a2 && theData)
  {
    uint64_t v7 = mfi4Auth_util_packIntoTunnelDataiAP2Msg(a3, theData, 0);
    if (v7)
    {
      int v8 = (void *)v7;
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(a1, a2, v7);
      *(_WORD *)(a1 + 28) = 20836;
      iAP2MsgCleanup((uint64_t)v8);
      CFStringRef v9 = (void *)v8[3];
      if (v9) {
        free(v9);
      }
      free(v8);
      return 0;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v10 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v10 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData_cold_1();
      }

      return 1;
    }
  }
  return result;
}

uint64_t mfi4Auth_relay_initMessage_RequestiAP2RelayRead(uint64_t a1, void *a2)
{
  if (!a2) {
    return 1;
  }
  __int16 v4 = *(_WORD *)(a1 + 200);
  id v5 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v5, v4, 20835, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20835;
  return result;
}

BOOL _mfi4Auth_relay_handle_AccessoryInformationUpdate(uint64_t a1, uint64_t a2)
{
  int v97 = 1;
  char v96 = 0;
  id v90 = objc_alloc_init((Class)NSMutableDictionary);
  __int16 v4 = &unk_100239000;
  id v5 = (int *)&unk_100239000;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v36 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_2(v6, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_14(v6, v29, v30, v31, v32, v33, v34, v35);
    }
LABEL_55:

    int v8 = 0;
    long long v91 = 0;
    v92 = 0;
    v94 = 0;
    uint64_t v95 = 0;
    uint64_t v93 = 0;
    goto LABEL_56;
  }
  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v52 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_4(v6, v53, v54, v55, v56, v57, v58, v59);
    }
    goto LABEL_55;
  }
  if (iAP2MsgGetMsgID(a2) != 21763)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v62 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_12(v6, v63, v64, v65, v66, v67, v68, v69);
    }
    goto LABEL_55;
  }
  *(_DWORD *)(a1 + 32) = 0;
  int v97 = 94;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v8 = 0;
  long long v91 = 0;
  v92 = 0;
  v94 = 0;
  uint64_t v95 = 0;
  uint64_t v93 = 0;
  while (FirstParam)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    id v10 = v4;
    uint64_t v11 = v4[49];
    uint64_t v12 = v5;
    int v13 = v5[100];
    if (v11 && v13 >= 56)
    {
      id v14 = *(id *)(v11 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v99 = (const char *)v11;
        __int16 v100 = 1024;
        unsigned int v101 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v15 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    id v5 = v12;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v99 = "_mfi4Auth_relay_handle_AccessoryInformationUpdate";
      __int16 v100 = 1024;
      unsigned int v101 = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: paramID: %d", buf, 0x12u);
    }

    if (ParamID >= 6)
    {
      __int16 v4 = v10;
      if (ParamID == 242) {
        iAP2MsgGetDataAsU64(FirstParam, &v97);
      }
      goto LABEL_38;
    }
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    DataAsString = iAP2MsgGetDataAsString(FirstParam, (BOOL *)&v97);
    if (!v97)
    {
      if (!*((unsigned char *)DataAsString + ParamValueLen - 1))
      {
        __int16 v4 = v10;
        switch(ParamID)
        {
          case 0u:
            uint64_t v21 = +[NSString stringWithUTF8String:DataAsString];

            int v8 = (void *)v21;
            break;
          case 1u:
            uint64_t v23 = +[NSString stringWithUTF8String:DataAsString];

            v92 = (void *)v23;
            break;
          case 2u:
            uint64_t v24 = +[NSString stringWithUTF8String:DataAsString];

            long long v91 = (void *)v24;
            break;
          case 3u:
            uint64_t v25 = +[NSString stringWithUTF8String:DataAsString];

            uint64_t v95 = (void *)v25;
            break;
          case 4u:
            uint64_t v26 = +[NSString stringWithUTF8String:DataAsString];

            v94 = (void *)v26;
            break;
          case 5u:
            uint64_t v27 = +[NSString stringWithUTF8String:DataAsString];

            uint64_t v93 = (void *)v27;
            break;
          default:
            goto LABEL_37;
        }
        goto LABEL_38;
      }
      uint64_t v18 = v10[49];
      int v19 = v12[100];
      if (v18 && v19 >= 56)
      {
        id v20 = *(id *)(v18 + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v99 = (const char *)v18;
          __int16 v100 = 1024;
          unsigned int v101 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
        id v22 = &_os_log_default;
        id v20 = &_os_log_default;
      }
      id v5 = v12;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v99 = "_mfi4Auth_relay_handle_AccessoryInformationUpdate";
        __int16 v100 = 1024;
        unsigned int v101 = ParamID;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s: string parameter not NUL terminated! (paramID %d)", buf, 0x12u);
      }
    }
LABEL_37:
    __int16 v4 = v10;
LABEL_38:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v96);
    if (v96) {
      goto LABEL_56;
    }
  }
  if (v8)
  {
    uint64_t v60 = v4[49];
    if (v60 && v5[100] >= 56)
    {
      uint64_t v61 = *(id *)(v60 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v61 = &_os_log_default;
      id v70 = &_os_log_default;
    }
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v99 = (const char *)v8;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "vendor nameString %@", buf, 0xCu);
    }

    [v90 setObject:v8 forKey:kACCInfo_Name];
  }
  if (v92)
  {
    uint64_t v71 = v4[49];
    if (v71 && v5[100] >= 56)
    {
      int v72 = *(id *)(v71 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v72 = &_os_log_default;
      id v73 = &_os_log_default;
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v99 = (const char *)v92;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "modelIdentifierString %@", buf, 0xCu);
    }

    [v90 setObject:v92 forKey:kACCInfo_Model];
  }
  if (v91)
  {
    uint64_t v74 = v4[49];
    if (v74 && v5[100] >= 56)
    {
      char v75 = *(id *)(v74 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v75 = &_os_log_default;
      id v76 = &_os_log_default;
    }
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v99 = (const char *)v91;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "manufacturerString %@", buf, 0xCu);
    }

    [v90 setObject:v91 forKey:kACCInfo_Manufacturer];
  }
  if (v95)
  {
    uint64_t v77 = v4[49];
    if (v77 && v5[100] >= 56)
    {
      v78 = *(id *)(v77 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v78 = &_os_log_default;
      id v79 = &_os_log_default;
    }
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v99 = (const char *)v95;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "serialNumberString %@", buf, 0xCu);
    }

    [v90 setObject:v95 forKey:kACCInfo_SerialNumber];
  }
  if (v94)
  {
    uint64_t v80 = v4[49];
    if (v80 && v5[100] >= 56)
    {
      unsigned int v81 = *(id *)(v80 + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v81 = &_os_log_default;
      id v82 = &_os_log_default;
    }
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v99 = (const char *)v94;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "firmwareVersionString %@", buf, 0xCu);
    }

    [v90 setObject:v94 forKey:kACCInfo_FirmwareVersionActive];
  }
  if (!v93)
  {
    if (v8 || v92 || v91 || v95 || v94) {
      goto LABEL_147;
    }
LABEL_151:
    int v97 = 0;
    goto LABEL_56;
  }
  uint64_t v83 = v4[49];
  if (v83 && v5[100] >= 56)
  {
    uint64_t v84 = *(id *)(v83 + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v84 = &_os_log_default;
    id v85 = &_os_log_default;
  }
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v99 = (const char *)v93;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "hardwareVersionString %@", buf, 0xCu);
  }

  [v90 setObject:v93 forKey:kACCInfo_HardwareVersion];
LABEL_147:
  CFStringRef v86 = *(const __CFString **)a1;
  if (!*(void *)a1) {
    goto LABEL_151;
  }
  int v97 = 12;
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v86);
  if (Copy)
  {
    CFStringRef v88 = Copy;
    int v97 = 1;
    EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
    if (EndpointWithUUID)
    {
      acc_endpoint_setAccessoryInfoOverridesWithDictionary((uint64_t)EndpointWithUUID, v90);
      CFRelease(v88);
      goto LABEL_151;
    }
    CFRelease(v88);
  }
LABEL_56:
  uint64_t v44 = v4[49];
  if (v44 && v5[100] >= 56)
  {
    id v45 = *(id *)(v44 + 440);
    long long v46 = v90;
    int v47 = v91;
    int v48 = v92;
  }
  else
  {
    int v47 = v91;
    int v48 = v92;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v45 = &_os_log_default;
    id v49 = &_os_log_default;
    long long v46 = v90;
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "_mfi4Auth_relay_handle_AccessoryInformationUpdate: finish", buf, 2u);
  }

  BOOL v50 = v97;
  return v50;
}

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = 1;
  if (a2 && a3)
  {
    __int16 v7 = *(_WORD *)(a1 + 200);
    int v8 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
    *a2 = (uint64_t)v8;
    if (v8)
    {
      iAP2MsgInitWithSom((uint64_t)v8, v7, 20836, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
      uint64_t v9 = *a2;
      id v10 = *(const void **)(a3 + 24);
      unsigned int MsgLen = iAP2MsgGetMsgLen(a3);
      iAP2MsgAddDataParam(v9, 0, 0, v10, MsgLen);
      uint64_t result = 0;
      *(_WORD *)(a1 + 28) = 20836;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL acc_platform_packetLogging_isLogPacketDataAsMsg()
{
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  return __PAIR64__(_logPacketToFile, _logPacketDataAsInfo) != 0;
}

void acc_platform_packetLogging_logiAP2Packet(uint64_t *a1, uint64_t a2, int a3)
{
  if (!__referenceDate)
  {
    id v6 = objc_alloc_init((Class)NSDate);
    __int16 v7 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v6;
  }
  int v8 = +[NSDate date];
  TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(*a1);
  unsigned int PayloadLen = iAP2PacketGetPayloadLen(a2);
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v42 = v8;
  [v8 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v12 = v12;
  double v13 = *(float *)&v12;
  uint64_t v44 = a1[1];
  if (!TransportTypeString) {
    TransportTypeString = "unknown";
  }
  if (a3) {
    CFStringRef v14 = @"Acc";
  }
  else {
    CFStringRef v14 = @"iPod";
  }
  uint64_t v15 = *(unsigned __int16 *)(a2 + 54);
  uint64_t v16 = v11[4];
  uint64_t v17 = v11[5];
  uint64_t v18 = v11[6];
  uint64_t v19 = v11[7];
  unsigned int HdrChecksum = iAP2PacketGetHdrChecksum(a2);
  uint64_t v45 = a2;
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; len=0x%04x; control=0x%02x; seq=0x%02x; ack=0x%02x; session=0x%02x; hdrChk=0x%04x; payload(len=%d chk=0x%04x)=",
    *(void *)&v13,
    v44,
    TransportTypeString,
    v14,
    &stru_10021CEF8,
    v15,
    v16,
    v17,
    v18,
    v19,
    HdrChecksum,
    PayloadLen,
  uint64_t v21 = iAP2PacketGetPayloadChecksum(a2));
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  unsigned int v22 = PayloadLen;
  if (_logPacketDataSizeLimit < 0)
  {
    uint64_t v23 = "";
    goto LABEL_18;
  }
  uint64_t v23 = "";
  if (!_logPacketDataSizeLimit)
  {
LABEL_18:
    unsigned int v24 = PayloadLen;
    goto LABEL_19;
  }
  unsigned int v24 = PayloadLen;
  if (_logPacketDataSizeLimit < PayloadLen)
  {
    if (_logPacketDataSizeLimit) {
      unsigned int v24 = _logPacketDataSizeLimit;
    }
    else {
      unsigned int v24 = 0x10000;
    }
    uint64_t v23 = "...";
  }
LABEL_19:
  uint64_t v25 = PayloadLen;
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v26 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v26 = &_os_log_default;
      id v30 = &_os_log_default;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(v45 + 72);
      *(_DWORD *)buf = 138544130;
      int v47 = v21;
      __int16 v48 = 1040;
      unsigned int v49 = v24;
      __int16 v50 = 2098;
      uint64_t v51 = v31;
      __int16 v52 = 2080;
      uint64_t v53 = v23;
      uint64_t v32 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      uint64_t v33 = v26;
      os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v32, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v28 = gNumLogObjects <= 21;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    if (isInternalBuild)
    {
      if (v29)
      {
        uint64_t v26 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v26 = &_os_log_default;
        id v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = *(void *)(v45 + 72);
        *(_DWORD *)buf = 138413058;
        int v47 = v21;
        __int16 v48 = 1040;
        unsigned int v49 = v24;
        __int16 v50 = 2096;
        uint64_t v51 = v36;
        __int16 v52 = 2080;
        uint64_t v53 = v23;
        uint64_t v32 = "%@<%{coreacc:bytes}.*P> %s";
        uint64_t v33 = v26;
        os_log_type_t v34 = OS_LOG_TYPE_INFO;
        goto LABEL_44;
      }
    }
    else
    {
      if (v29)
      {
        uint64_t v26 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v26 = &_os_log_default;
        id v37 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = *(void *)(v45 + 72);
        *(_DWORD *)buf = 138413058;
        int v47 = v21;
        __int16 v48 = 1040;
        unsigned int v49 = v24;
        __int16 v50 = 2096;
        uint64_t v51 = v41;
        __int16 v52 = 2080;
        uint64_t v53 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    uint64_t v38 = getLogWriter();
    uint64_t v39 = v38;
    if (v22)
    {
      uint64_t v40 = +[NSData dataWithBytes:*(void *)(v45 + 72) length:v25];
      [v39 log:v21 data:v40 limit:v24];
    }
    else
    {
      [v38 log:v21 data:0 limit:v24];
    }
  }
}

id getLogWriter()
{
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile) {
    openLogFileWriter();
  }
  CFUUIDRef v0 = (void *)_logFileWriter;

  return v0;
}

void acc_platform_packetLogging_logEAData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  if (!__referenceDate)
  {
    id v9 = objc_alloc_init((Class)NSDate);
    id v10 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v9;
  }
  uint64_t v11 = +[NSDate date];
  id v12 = a3;
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v14 = [v12 length];
  [v11 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  double v16 = *(float *)&v15;
  if (a1) {
    CFStringRef v17 = *(const __CFString **)(a1 + 16);
  }
  else {
    CFStringRef v17 = @"unknown";
  }
  uint64_t v18 = "unknown";
  CFStringRef v19 = @"Acc-EA";
  if (TransportTypeString) {
    uint64_t v18 = (const char *)TransportTypeString;
  }
  if (!a4) {
    CFStringRef v19 = @"iPod-EA";
  }
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; sessionUUID %@; data(len=%d)=",
    *(void *)&v16,
    v17,
    v18,
    v19,
    &stru_10021CEF8,
    a2,
  id v20 = v14);
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_20;
  }
  uint64_t v21 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v21 = 0x10000;
  }
  if (v21 >= v14)
  {
LABEL_20:
    unsigned int v22 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    unsigned int v22 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v23 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v23 = &_os_log_default;
      id v27 = &_os_log_default;
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v35 = v20;
      __int16 v36 = 1040;
      int v37 = (int)v14;
      __int16 v38 = 2098;
      id v39 = [v12 bytes];
      __int16 v40 = 2080;
      uint64_t v41 = v22;
      BOOL v28 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      int v29 = v23;
      os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v25 = gNumLogObjects <= 21;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (isInternalBuild)
    {
      if (v26)
      {
        uint64_t v23 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v23 = &_os_log_default;
        id v31 = &_os_log_default;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v35 = v20;
        __int16 v36 = 1040;
        int v37 = (int)v14;
        __int16 v38 = 2096;
        id v39 = [v12 bytes];
        __int16 v40 = 2080;
        uint64_t v41 = v22;
        BOOL v28 = "%@<%{coreacc:bytes}.*P> %s";
        int v29 = v23;
        os_log_type_t v30 = OS_LOG_TYPE_INFO;
        goto LABEL_46;
      }
    }
    else
    {
      if (v26)
      {
        uint64_t v23 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v23 = &_os_log_default;
        id v32 = &_os_log_default;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v35 = v20;
        __int16 v36 = 1040;
        int v37 = (int)v14;
        __int16 v38 = 2096;
        id v39 = [v12 bytes];
        __int16 v40 = 2080;
        uint64_t v41 = v22;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    uint64_t v33 = getLogWriter();
    [v33 log:v20 data:v12 limit:v14];
  }
}

void acc_platform_packetLogging_logAccAuthProtocolMsg(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  if (!__referenceDate)
  {
    id v8 = objc_alloc_init((Class)NSDate);
    id v9 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v8;
  }
  id v10 = +[NSDate date];
  id v11 = a3;
  id v12 = (unsigned __int8 *)[v11 bytes];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v43 = v11;
  id v14 = [v11 length];
  uint64_t v44 = 0;
  LODWORD(v11) = acc_auth_protocol_sizeofMessage((uint64_t)v12, v14, (int *)&v44 + 1, (int *)&v44);
  [v10 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  double v16 = *(float *)&v15;
  CFStringRef v17 = "unknown";
  CFStringRef v18 = @"Acc-AccAuth";
  if (v11)
  {
    if (a1) {
      CFStringRef v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v19 = @"unknown";
    }
    if (TransportTypeString) {
      CFStringRef v17 = (const char *)TransportTypeString;
    }
    if (!a4) {
      CFStringRef v18 = @"iPod-AccAuth";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; sessionID %u; msgID %#04x; ctl0 %#04x; ctl1 %#04x; payloadLen %d; data(len=%d)=",
      *(void *)&v16,
      v19,
      v17,
      v18,
      &stru_10021CEF8,
      a2,
      *v12,
      v12[1],
      v12[2],
      v44,
      v14);
  }
  else
  {
    if (a1) {
      CFStringRef v20 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v20 = @"unknown";
    }
    if (TransportTypeString) {
      CFStringRef v17 = (const char *)TransportTypeString;
    }
    if (!a4) {
      CFStringRef v18 = @"iPod-AccAuth";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; sessionID %u; %s; data(len=%d)=",
      *(void *)&v16,
      v20,
      v17,
      v18,
      &stru_10021CEF8,
      a2,
      "Unknown Message",
      v14,
      v39,
      v40,
      v41);
  uint64_t v21 = };
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_30;
  }
  uint64_t v22 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v22 = 0x10000;
  }
  if (v22 >= v14)
  {
LABEL_30:
    uint64_t v23 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    uint64_t v23 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      unsigned int v24 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v24 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    int v29 = v43;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = [v43 bytes];
      *(_DWORD *)buf = 138544130;
      long long v46 = v21;
      __int16 v47 = 1040;
      int v48 = (int)v14;
      __int16 v49 = 2098;
      id v50 = v30;
      __int16 v51 = 2080;
      __int16 v52 = v23;
      id v31 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      id v32 = v24;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_56:
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v26 = gNumLogObjects <= 21;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = !v26;
    if (isInternalBuild)
    {
      if (v27)
      {
        unsigned int v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v24 = &_os_log_default;
        id v34 = &_os_log_default;
      }
      int v29 = v43;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        id v35 = [v43 bytes];
        *(_DWORD *)buf = 138413058;
        long long v46 = v21;
        __int16 v47 = 1040;
        int v48 = (int)v14;
        __int16 v49 = 2096;
        id v50 = v35;
        __int16 v51 = 2080;
        __int16 v52 = v23;
        id v31 = "%@<%{coreacc:bytes}.*P> %s";
        id v32 = v24;
        os_log_type_t v33 = OS_LOG_TYPE_INFO;
        goto LABEL_56;
      }
    }
    else
    {
      if (v27)
      {
        unsigned int v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v24 = &_os_log_default;
        id v36 = &_os_log_default;
      }
      int v29 = v43;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        id v38 = [v43 bytes];
        *(_DWORD *)buf = 138413058;
        long long v46 = v21;
        __int16 v47 = 1040;
        int v48 = (int)v14;
        __int16 v49 = 2096;
        id v50 = v38;
        __int16 v51 = 2080;
        __int16 v52 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    int v37 = getLogWriter();
    [v37 log:v21 data:v29 limit:v14];
  }
}

void acc_platform_packetLogging_logMFi4AuthProtocolMsg(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init((Class)NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }
  double v13 = +[NSDate date];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  uint64_t MsgLen = iAP2MsgGetMsgLen(a3);
  uint64_t v41 = a3;
  if (MsgLen)
  {
    uint64_t v16 = *(void *)(a3 + 24);
    uint64_t v17 = MsgLen;
    CFStringRef v18 = +[NSData dataWithBytes:v16 length:MsgLen];
    [v13 timeIntervalSinceDate:__referenceDate];
    *(float *)&double v19 = v19;
    double v20 = *(float *)&v19;
    if (a1) {
      CFStringRef v21 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v21 = @"unknown";
    }
    uint64_t v23 = "unknown";
    if (TransportTypeString) {
      uint64_t v23 = (const char *)TransportTypeString;
    }
    CFStringRef v24 = @"Acc-MFi4Auth";
    if (!a4) {
      CFStringRef v24 = @"iPod-MFi4Auth";
    }
    CFStringRef v25 = @"plain";
    if (a5) {
      CFStringRef v25 = @"raw";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@ %@; session=0x%02x; payload(len=%d)=",
      *(void *)&v20,
      v21,
      v23,
      v24,
      v25,
      a2,
    uint64_t v22 = v17);
  }
  else
  {
    LODWORD(v17) = 0;
    uint64_t v22 = 0;
    CFStringRef v18 = 0;
  }
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0)
  {
    BOOL v26 = "";
  }
  else
  {
    BOOL v26 = "";
    if (_logPacketDataSizeLimit && _logPacketDataSizeLimit < v17)
    {
      if (_logPacketDataSizeLimit) {
        LODWORD(v17) = _logPacketDataSizeLimit;
      }
      else {
        LODWORD(v17) = 0x10000;
      }
      BOOL v26 = "...";
    }
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      int v27 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v27 = &_os_log_default;
      id v31 = &_os_log_default;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(v41 + 24);
      *(_DWORD *)buf = 138544130;
      id v43 = v22;
      __int16 v44 = 1040;
      int v45 = v17;
      __int16 v46 = 2098;
      uint64_t v47 = v32;
      __int16 v48 = 2080;
      __int16 v49 = v26;
      os_log_type_t v33 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      id v34 = v27;
      os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v29 = gNumLogObjects <= 21;
    }
    else {
      BOOL v29 = 1;
    }
    int v30 = !v29;
    if (isInternalBuild)
    {
      if (v30)
      {
        int v27 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v27 = &_os_log_default;
        id v36 = &_os_log_default;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = *(void *)(v41 + 24);
        *(_DWORD *)buf = 138413058;
        id v43 = v22;
        __int16 v44 = 1040;
        int v45 = v17;
        __int16 v46 = 2096;
        uint64_t v47 = v37;
        __int16 v48 = 2080;
        __int16 v49 = v26;
        os_log_type_t v33 = "%@<%{coreacc:bytes}.*P> %s";
        id v34 = v27;
        os_log_type_t v35 = OS_LOG_TYPE_INFO;
        goto LABEL_50;
      }
    }
    else
    {
      if (v30)
      {
        int v27 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v27 = &_os_log_default;
        id v38 = &_os_log_default;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = *(void *)(v41 + 24);
        *(_DWORD *)buf = 138413058;
        id v43 = v22;
        __int16 v44 = 1040;
        int v45 = v17;
        __int16 v46 = 2096;
        uint64_t v47 = v40;
        __int16 v48 = 2080;
        __int16 v49 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    uint64_t v39 = getLogWriter();
    [v39 log:v22 data:v18 limit:v17];
  }
}

void acc_platform_packetLogging_logParsedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init((Class)NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }
  double v13 = +[NSDate date];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  if (a5) {
    CFStringRef v15 = @"Acc-%@";
  }
  else {
    CFStringRef v15 = @"iPod-%@";
  }
  uint64_t v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v15, a3);
  [v13 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v17 = v17;
  double v18 = *(float *)&v17;
  if (a1) {
    CFStringRef v19 = *(const __CFString **)(a1 + 16);
  }
  else {
    CFStringRef v19 = @"unknown";
  }
  double v20 = "unknown";
  if (TransportTypeString) {
    double v20 = (const char *)TransportTypeString;
  }
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@; %@; data=%@",
    *(void *)&v18,
    v19,
    v20,
    v16,
    a2,
  CFStringRef v21 = a4);
  if (!acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v24 = gNumLogObjects <= 21;
    }
    else {
      BOOL v24 = 1;
    }
    int v25 = !v24;
    if (isInternalBuild)
    {
      if (v25)
      {
        uint64_t v22 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v22 = &_os_log_default;
        id v29 = &_os_log_default;
      }
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 138543362;
      os_log_type_t v33 = v21;
    }
    else
    {
      if (v25)
      {
        uint64_t v22 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v22 = &_os_log_default;
        id v30 = &_os_log_default;
      }
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 138543362;
      os_log_type_t v33 = v21;
    }
    int v27 = v22;
    os_log_type_t v28 = OS_LOG_TYPE_INFO;
    goto LABEL_42;
  }
  if (gLogObjects && gNumLogObjects >= 22)
  {
    uint64_t v22 = *(id *)(gLogObjects + 168);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v22 = &_os_log_default;
    id v26 = &_os_log_default;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    os_log_type_t v33 = v21;
    int v27 = v22;
    os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
LABEL_42:
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}@", buf, 0xCu);
  }
LABEL_43:

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    id v31 = getLogWriter();
    [v31 log:v21];
  }
}

void acc_platform_packetLogging_logData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init((Class)NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }
  double v13 = +[NSDate date];
  id v14 = a4;
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  if (a5) {
    CFStringRef v16 = @"Acc-%@";
  }
  else {
    CFStringRef v16 = @"iPod-%@";
  }
  double v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v16, a3);
  id v18 = [v14 length];
  [v13 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v19 = v19;
  double v20 = *(float *)&v19;
  if (a1) {
    CFStringRef v21 = *(const __CFString **)(a1 + 16);
  }
  else {
    CFStringRef v21 = @"unknown";
  }
  uint64_t v22 = "unknown";
  if (TransportTypeString) {
    uint64_t v22 = (const char *)TransportTypeString;
  }
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@; %@; data(len=%d)=",
    *(void *)&v20,
    v21,
    v22,
    v17,
    a2,
  uint64_t v23 = v18);
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_21;
  }
  uint64_t v24 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v24 = 0x10000;
  }
  if (v24 >= v18)
  {
LABEL_21:
    int v25 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v18) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v18) = 0x10000;
    }
    int v25 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      id v26 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v26 = &_os_log_default;
      id v30 = &_os_log_default;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v38 = v23;
      __int16 v39 = 1040;
      int v40 = (int)v18;
      __int16 v41 = 2098;
      id v42 = [v14 bytes];
      __int16 v43 = 2080;
      __int16 v44 = v25;
      id v31 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      uint64_t v32 = v26;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v28 = gNumLogObjects <= 21;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    if (isInternalBuild)
    {
      if (v29)
      {
        id v26 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v26 = &_os_log_default;
        id v34 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v23;
        __int16 v39 = 1040;
        int v40 = (int)v18;
        __int16 v41 = 2096;
        id v42 = [v14 bytes];
        __int16 v43 = 2080;
        __int16 v44 = v25;
        id v31 = "%@<%{coreacc:bytes}.*P> %s";
        uint64_t v32 = v26;
        os_log_type_t v33 = OS_LOG_TYPE_INFO;
        goto LABEL_47;
      }
    }
    else
    {
      if (v29)
      {
        id v26 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v26 = &_os_log_default;
        id v35 = &_os_log_default;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v23;
        __int16 v39 = 1040;
        int v40 = (int)v18;
        __int16 v41 = 2096;
        id v42 = [v14 bytes];
        __int16 v43 = 2080;
        __int16 v44 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    id v36 = getLogWriter();
    [v36 log:v23 data:v14 limit:v18];
  }
}

void acc_platform_packetLogging_logEvent(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void acc_platform_packetLogging_logEventVA(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (__referenceDate)
  {
    if (!a1) {
      goto LABEL_15;
    }
  }
  else
  {
    id v9 = objc_alloc_init((Class)NSDate);
    id v10 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v9;

    if (!a1)
    {
LABEL_15:
      if (gLogObjects) {
        BOOL v22 = gNumLogObjects < 22;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v11 = &_os_log_default;
        id v23 = &_os_log_default;
      }
      else
      {
        id v11 = *(id *)(gLogObjects + 168);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        acc_platform_packetLogging_logEventVA_cold_1(v11);
      }
      goto LABEL_57;
    }
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_15;
  }
  id v11 = +[NSDate date];
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  [v11 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v13 = v13;
  double v14 = *(float *)&v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!TransportTypeString) {
    uint64_t TransportTypeString = "unknown";
  }
  if (a2) {
    CFStringRef v16 = a2;
  }
  else {
    CFStringRef v16 = "null";
  }
  id v17 = objc_alloc((Class)NSString);
  id v18 = +[NSString stringWithUTF8String:a3];
  id v19 = [v17 initWithFormat:v18 arguments:a4];
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; Event; %s; %@",
    *(void *)&v14,
    v15,
    TransportTypeString,
    v16,
  double v20 = v19);

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      CFStringRef v21 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v21 = &_os_log_default;
      id v27 = &_os_log_default;
    }
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 138543362;
    id v35 = v20;
    BOOL v28 = "%{public}@";
    int v29 = v21;
    os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_46;
  }
  int isInternalBuild = platform_systemInfo_isInternalBuild();
  if (gLogObjects) {
    BOOL v25 = gNumLogObjects <= 21;
  }
  else {
    BOOL v25 = 1;
  }
  int v26 = !v25;
  if (!isInternalBuild)
  {
    if (v26)
    {
      CFStringRef v21 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v21 = &_os_log_default;
      id v32 = &_os_log_default;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      acc_platform_packetLogging_logEventVA_cold_5((uint64_t)v20, v21);
    }
    goto LABEL_52;
  }
  if (v26)
  {
    CFStringRef v21 = *(id *)(gLogObjects + 168);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v21 = &_os_log_default;
    id v31 = &_os_log_default;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v35 = v20;
    BOOL v28 = "%@";
    int v29 = v21;
    os_log_type_t v30 = OS_LOG_TYPE_INFO;
LABEL_46:
    _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, 0xCu);
  }
LABEL_52:

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    os_log_type_t v33 = getLogWriter();
    [v33 log:v20];
  }
LABEL_57:
}

void acc_platform_packetLogging_logSNTPTimeSyncMsg(uint64_t a1, void *a2, int a3)
{
  if (!__referenceDate)
  {
    id v6 = objc_alloc_init((Class)NSDate);
    __int16 v7 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v6;
  }
  id v8 = +[NSDate date];
  id v9 = a2;
  id v10 = (unsigned __int8 *)[v9 bytes];
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v14 = [v9 length];
  [v8 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  CFStringRef v16 = "unknown";
  CFStringRef v17 = @"Time-FromAcc";
  double v18 = *(float *)&v15;
  if (v11 < 2)
  {
    if (a1) {
      CFStringRef v20 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v20 = @"unknown";
    }
    if (TransportTypeString) {
      CFStringRef v16 = (const char *)TransportTypeString;
    }
    if (!a3) {
      CFStringRef v17 = @"Time-ToAcc";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; %s; data(len=%d)=",
      *(void *)&v18,
      v20,
      v16,
      v17,
      &stru_10021CEF8,
      "Unknown Message",
      v14,
      v35);
  }
  else
  {
    if (a1) {
      CFStringRef v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v19 = @"unknown";
    }
    if (TransportTypeString) {
      CFStringRef v16 = (const char *)TransportTypeString;
    }
    if (!a3) {
      CFStringRef v17 = @"Time-ToAcc";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@%@; SNTP BD Cmd %#04x; packetLen %#04x; data(len=%d)=",
      *(void *)&v18,
      v19,
      v16,
      v17,
      &stru_10021CEF8,
      v12,
      v11,
      v14);
  CFStringRef v21 = };
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_30;
  }
  uint64_t v22 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v22 = 0x10000;
  }
  if (v22 >= v14)
  {
LABEL_30:
    id v23 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    id v23 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v24 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v24 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v38 = v21;
      __int16 v39 = 1040;
      int v40 = (int)v14;
      __int16 v41 = 2098;
      id v42 = [v9 bytes];
      __int16 v43 = 2080;
      __int16 v44 = v23;
      int v29 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      os_log_type_t v30 = v24;
      os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
LABEL_56:
      _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v26 = gNumLogObjects <= 21;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = !v26;
    if (isInternalBuild)
    {
      if (v27)
      {
        uint64_t v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = &_os_log_default;
        id v32 = &_os_log_default;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v21;
        __int16 v39 = 1040;
        int v40 = (int)v14;
        __int16 v41 = 2096;
        id v42 = [v9 bytes];
        __int16 v43 = 2080;
        __int16 v44 = v23;
        int v29 = "%@<%{coreacc:bytes}.*P> %s";
        os_log_type_t v30 = v24;
        os_log_type_t v31 = OS_LOG_TYPE_INFO;
        goto LABEL_56;
      }
    }
    else
    {
      if (v27)
      {
        uint64_t v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = &_os_log_default;
        id v33 = &_os_log_default;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v21;
        __int16 v39 = 1040;
        int v40 = (int)v14;
        __int16 v41 = 2096;
        id v42 = [v9 bytes];
        __int16 v43 = 2080;
        __int16 v44 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    id v34 = getLogWriter();
    [v34 log:v21 data:v9 limit:v14];
  }
}

void acc_platform_packetLogging_logQiAuthMsg(uint64_t a1, void *a2, int a3)
{
  if (!__referenceDate)
  {
    id v7 = objc_alloc_init((Class)NSDate);
    id v8 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v7;
  }
  id v9 = +[NSDate date];
  id v10 = a2;
  id v11 = [v10 length];
  id v12 = v10;
  int v13 = *(unsigned char *)[v12 bytes] & 0xF;
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  double v15 = qiAuth_protocol_msgTypeString(v13);
  if (a2 && (CFStringRef v16 = v15, [v12 length]))
  {
    [v9 timeIntervalSinceDate:__referenceDate];
    *(float *)&double v17 = v17;
    double v18 = *(float *)&v17;
    if (a1) {
      CFStringRef v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v19 = @"unknown";
    }
    if (!TransportTypeString) {
      uint64_t TransportTypeString = "unknown";
    }
    if (a3) {
      CFStringRef v21 = @"Acc-QiAuth";
    }
    else {
      CFStringRef v21 = @"iPod-QiAuth";
    }
    id v22 = v12;
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@; msg %d(%s); ver %d; payload(len=%u)=",
      *(void *)&v18,
      v19,
      TransportTypeString,
      v21,
      *(unsigned char *)[v22 bytes] & 0xF,
      v16,
      *(unsigned __int8 *)[v22 bytes] >> 4,
    CFStringRef v20 = v11);
  }
  else
  {
    CFStringRef v20 = 0;
  }
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_25;
  }
  uint64_t v23 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v23 = 0x10000;
  }
  if (v23 >= v11)
  {
LABEL_25:
    uint64_t v24 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v11) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v11) = 0x10000;
    }
    uint64_t v24 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      BOOL v25 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v25 = &_os_log_default;
      id v29 = &_os_log_default;
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      uint64_t v37 = v20;
      __int16 v38 = 1040;
      int v39 = (int)v11;
      __int16 v40 = 2098;
      id v41 = [v12 bytes];
      __int16 v42 = 2080;
      __int16 v43 = v24;
      os_log_type_t v30 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      os_log_type_t v31 = v25;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v27 = gNumLogObjects <= 21;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = !v27;
    if (isInternalBuild)
    {
      if (v28)
      {
        BOOL v25 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = &_os_log_default;
        id v33 = &_os_log_default;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v37 = v20;
        __int16 v38 = 1040;
        int v39 = (int)v11;
        __int16 v40 = 2096;
        id v41 = [v12 bytes];
        __int16 v42 = 2080;
        __int16 v43 = v24;
        os_log_type_t v30 = "%@<%{coreacc:bytes}.*P> %s";
        os_log_type_t v31 = v25;
        os_log_type_t v32 = OS_LOG_TYPE_INFO;
        goto LABEL_51;
      }
    }
    else
    {
      if (v28)
      {
        BOOL v25 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = &_os_log_default;
        id v34 = &_os_log_default;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v37 = v20;
        __int16 v38 = 1040;
        int v39 = (int)v11;
        __int16 v40 = 2096;
        id v41 = [v12 bytes];
        __int16 v42 = 2080;
        __int16 v43 = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    uint64_t v35 = getLogWriter();
    [v35 log:v20 data:v12 limit:v11];
  }
}

void acc_platform_packetLogging_logT56Msg(uint64_t a1, void *a2, int a3)
{
  if (!__referenceDate)
  {
    id v7 = objc_alloc_init((Class)NSDate);
    id v8 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v7;
  }
  id v9 = +[NSDate date];
  id v10 = a2;
  id v11 = [v10 length];
  id v12 = v10;
  int v13 = *(unsigned __int8 *)[v12 bytes];
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  double v15 = t56_protocol_msgTypeString(v13);
  if (a2 && (CFStringRef v16 = v15, [v12 length]))
  {
    [v9 timeIntervalSinceDate:__referenceDate];
    float v18 = v17;
    if (a1) {
      CFStringRef v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      CFStringRef v19 = @"unknown";
    }
    if (!TransportTypeString) {
      uint64_t TransportTypeString = "unknown";
    }
    if (a3) {
      CFStringRef v21 = @"Acc-T56";
    }
    else {
      CFStringRef v21 = @"iPod-T56";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"LOG; %.6f; %@; %s; %@; msg %d(%s); payload(len=%u)=",
      v18,
      v19,
      TransportTypeString,
      v21,
      *(unsigned __int8 *)[v12 bytes],
      v16,
    CFStringRef v20 = v11);
  }
  else
  {
    CFStringRef v20 = 0;
  }
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_25;
  }
  uint64_t v22 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v22 = 0x10000;
  }
  if (v22 >= v11)
  {
LABEL_25:
    uint64_t v23 = "";
  }
  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v11) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v11) = 0x10000;
    }
    uint64_t v23 = "...";
  }
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v24 = *(id *)(gLogObjects + 168);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v24 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v36 = v20;
      __int16 v37 = 1040;
      int v38 = (int)v11;
      __int16 v39 = 2098;
      id v40 = [v12 bytes];
      __int16 v41 = 2080;
      __int16 v42 = v23;
      id v29 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      os_log_type_t v30 = v24;
      os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, 0x26u);
    }
  }
  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v26 = gNumLogObjects <= 21;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = !v26;
    if (isInternalBuild)
    {
      if (v27)
      {
        uint64_t v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = &_os_log_default;
        id v32 = &_os_log_default;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v36 = v20;
        __int16 v37 = 1040;
        int v38 = (int)v11;
        __int16 v39 = 2096;
        id v40 = [v12 bytes];
        __int16 v41 = 2080;
        __int16 v42 = v23;
        id v29 = "%@<%{coreacc:bytes}.*P> %s";
        os_log_type_t v30 = v24;
        os_log_type_t v31 = OS_LOG_TYPE_INFO;
        goto LABEL_51;
      }
    }
    else
    {
      if (v27)
      {
        uint64_t v24 = *(id *)(gLogObjects + 168);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = &_os_log_default;
        id v33 = &_os_log_default;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v36 = v20;
        __int16 v37 = 1040;
        int v38 = (int)v11;
        __int16 v39 = 2096;
        id v40 = [v12 bytes];
        __int16 v41 = 2080;
        __int16 v42 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%@<%{coreacc:bytes}.*P> %s", buf, 0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_26);
  }
  if (_logPacketToFile)
  {
    id v34 = getLogWriter();
    [v34 log:v20 data:v12 limit:v11];
  }
}

void ____registerForLoggingPrefsNotification_block_invoke(id a1)
{
  readLoggingPrefs();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)receivedNotification, @"com.apple.iapd.LoggingPreferencesChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void readLoggingPrefs()
{
  _logPacketDataAsInfo = CFPreferencesGetAppBooleanValue(@"IAPLogging", @"com.apple.Preferences", 0);
  _logPacketToFile = CFPreferencesGetAppBooleanValue(@"PrintIapPackets", @"com.apple.iapd", 0);
  _logPacketDataSizeLimit = CFPreferencesGetAppIntegerValue(@"PacketLoggingDataSizeLimit", @"com.apple.iapd", 0);
  if (gLogObjects && gNumLogObjects >= 22)
  {
    CFUUIDRef v0 = *(id *)(gLogObjects + 168);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFUUIDRef v0 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315650;
    __int16 v4 = "readLoggingPrefs";
    __int16 v5 = 1024;
    int v6 = 70;
    __int16 v7 = 2048;
    uint64_t v8 = _logPacketDataSizeLimit;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "%s:%d _logPacketDataSizeLimit %ld", (uint8_t *)&v3, 0x1Cu);
  }

  if (_logPacketToFile)
  {
    openLogFileWriter();
  }
  else if (_logFileWriter)
  {
    [(id)_logFileWriter flush];
    uint64_t v2 = (void *)_logFileWriter;
    _logFileWriter = 0;
  }
}

void receivedNotification()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 15;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  else
  {
    uint64_t v2 = *(id *)(gLogObjects + 112);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logging preferences changed!", v3, 2u);
  }

  readLoggingPrefs();
}

void openLogFileWriter()
{
  if (!_logFileWriter)
  {
    id v0 = [[LogFileWriter alloc] initFor:@"accessoryd"];
    id v1 = (void *)_logFileWriter;
    _logFileWriter = (uint64_t)v0;

    if (!__referenceDate)
    {
      __referenceDate = (uint64_t)objc_alloc_init((Class)NSDate);
      _objc_release_x1();
    }
  }
}

uint64_t iAP2BuffPoolGetBuffSize(unsigned int a1)
{
  if (a1 >= 3) {
    iAP2BuffPoolGetBuffSize_cold_1();
  }
  return (iAP2MsgPreSendCtlProcess() + 27) & 0xFFFFFFFC;
}

uint64_t iAP2BuffPoolInit(unsigned int a1, uint64_t a2, int a3, __int16 a4, uint64_t a5)
{
  if (a1 >= 3) {
    iAP2BuffPoolInit_cold_1();
  }
  *(unsigned char *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a3;
  *(_WORD *)(a5 + 2) = a4;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = 0;
  __iAP2BuffPoolInitBuffList(a5);
  return a5;
}

uint64_t iAP2BuffPoolCleanup(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    iAP2BuffPoolCleanup_cold_1();
  }
  uint64_t result = iAP2LinkRunLoopInitImplementation(a1);
  *a1 = 3;
  *((void *)a1 + 1) = 0;
  *((_DWORD *)a1 + 1) = 0;
  *((_WORD *)a1 + 1) = 0;
  return result;
}

unsigned char *iAP2BuffPoolGet(unsigned __int8 *a1, size_t a2)
{
  unsigned int v2 = *a1;
  if (v2 >= 3) {
    iAP2BuffPoolGet_cold_1();
  }
  if (v2 != 2)
  {
    if (v2 != 1)
    {
      return __iAP2BuffPoolGetBuff((uint64_t)a1, a2);
    }
    if (!HIDWORD(a2))
    {
      return __iAP2BuffPoolGetSendPacket((uint64_t)a1, a2);
    }
    return 0;
  }
  if (HIDWORD(a2)) {
    return 0;
  }

  return __iAP2BuffPoolGetRecvPacket((uint64_t)a1, a2);
}

void iAP2BuffPoolReturn(unsigned __int8 *a1, void **a2)
{
  unsigned int v2 = *a1;
  if (v2 >= 3) {
    iAP2BuffPoolReturn_cold_1();
  }
  if (v2 == 2)
  {
    goto LABEL_9;
  }
  if (v2 == 1)
  {
LABEL_9:
    __iAP2BuffPoolReturnSendPacket((uint64_t)a1, a2);
    return;
  }

  __iAP2BuffPoolReturnBuff((int)a1, a2);
}

void sub_1000E881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

uint64_t iap2_nowPlaying_mediaItemAttributesUpdateHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2 && *a1)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v5 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = (const char *)a1[1];
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received mediaItemAttributes update for endpoint: %@", (uint8_t *)&v13, 0xCu);
    }
    uint64_t Feature = (unsigned char *)iap2_feature_getFeature((uint64_t)a1, 0xEu);
    uint64_t v3 = (uint64_t)Feature;
    if (Feature)
    {
      if (*Feature)
      {
        uint64_t v8 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
        id v9 = malloc_type_malloc(0xFFFFuLL, 0xD91E04A0uLL);
        iAP2MsgInit((uint64_t)v8, 20481, (uint64_t)v9, 0xFFFF, (uint64_t)_mediaItemAttributesUpdateSentCB, 0);
        id v10 = iAP2MsgAddGroupParam((uint64_t)v8, 0);
        if (_addMediaItemAttributesToMessage((uint64_t)v8, (uint64_t)v10, v3, a2))
        {
          iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)v8);
          return 1;
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            id v11 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            id v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 136315138;
            id v14 = "iap2_nowPlaying_mediaItemAttributesUpdateHandler";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: no parameters added! cleaning up pOutMsg", (uint8_t *)&v13, 0xCu);
          }
          uint64_t v3 = 1;
          iAP2MsgCleanup((uint64_t)v8);
        }
        return v3;
      }
      return 0;
    }
  }
  return v3;
}

void *logObjectForModule_23()
{
  if (gLogObjects && gNumLogObjects >= 32) {
    return *(void **)(gLogObjects + 248);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _mediaItemAttributesUpdateSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = (unsigned char *)iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        if (!*Feature)
        {
          uint64_t v8 = logObjectForModule_23();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315394;
            id v10 = "_mediaItemAttributesUpdateSentCB";
            __int16 v11 = 1024;
            int v12 = a2;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s NowPlaying updates not started. NeedDelete:%d", (uint8_t *)&v9, 0x12u);
          }
        }
      }
    }
    if (a2)
    {
      int v6 = (void *)a1[6];
      if (v6)
      {
        free(v6);
        a1[6] = 0;
      }
      __int16 v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }
}

uint64_t _addMediaItemAttributesToMessage(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  unsigned __int16 v4 = 0;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  CFArrayRef v8 = *(const __CFArray **)(a3 + 8);
  if (!v8) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(v8);
  uint64_t v47 = &v35;
  uint64_t v11 = __chkstk_darwin(Count);
  int v13 = (const void **)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v11) {
    memset((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v12);
  }
  v48.location = 0;
  v48.length = Count;
  CFArrayGetValues(*(CFArrayRef *)(a3 + 8), v48, v13);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    id v14 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    id v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef RawValuesString = CFArrayCreateRawValuesString(*(const __CFArray **)(a3 + 8), 0);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFStringRef v16 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFStringRef v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      _addMediaItemAttributesToMessage_cold_3();
      if (!RawValuesString)
      {
LABEL_21:
        if (gLogObjects && gNumLogObjects >= 32)
        {
          double v17 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          double v17 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          _addMediaItemAttributesToMessage_cold_1();
        }
        goto LABEL_28;
      }
    }
    else if (!RawValuesString)
    {
      goto LABEL_21;
    }
    CFRelease(RawValuesString);
    goto LABEL_21;
  }
LABEL_28:
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v4 = 0;
    CFStringRef v46 = @"ChapterCount";
    CFStringRef v45 = @"IsBanned";
    CFStringRef v44 = @"IsLiked";
    CFStringRef v43 = @"IsBanSupported";
    CFStringRef v42 = @"IsLikeSupported";
    CFStringRef v41 = @"Composer";
    CFStringRef v40 = @"Genre";
    CFStringRef v39 = @"Artist";
    CFStringRef v38 = @"AlbumDiscCount";
    CFStringRef v37 = @"AlbumDiscNum";
    CFStringRef v36 = @"AlbumTrackCount";
    CFStringRef v35 = @"AlbumTrackNum";
    do
    {
      int v18 = *(unsigned __int16 *)v13++;
      switch(v18)
      {
        case 0:
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"PersistentID");
          uint64_t v20 = (uint64_t)iAP2MsgAddCFU64Param(a1, a2, 0, Value);
          goto LABEL_50;
        case 1:
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a4, @"Title");
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          __int16 v24 = 1;
          goto LABEL_42;
        case 4:
          CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a4, @"PlaybackDurationMS");
          uint64_t v20 = iAP2MsgAddCFU32Param(a1, a2, 4, v25);
          goto LABEL_50;
        case 6:
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a4, @"AlbumTitle");
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          __int16 v24 = 6;
          goto LABEL_42;
        case 7:
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v35);
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          __int16 v29 = 7;
          goto LABEL_49;
        case 8:
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v36);
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          __int16 v29 = 8;
          goto LABEL_49;
        case 9:
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v37);
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          __int16 v29 = 9;
          goto LABEL_49;
        case 10:
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v38);
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          __int16 v29 = 10;
          goto LABEL_49;
        case 12:
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a4, v39);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          __int16 v24 = 12;
          goto LABEL_42;
        case 16:
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a4, v40);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          __int16 v24 = 16;
          goto LABEL_42;
        case 18:
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a4, v41);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          __int16 v24 = 18;
LABEL_42:
          uint64_t v20 = (uint64_t)iAP2MsgAddCFStringParam(v22, v23, v24, v21);
          goto LABEL_50;
        case 21:
          CFBooleanRef v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v42);
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          __int16 v33 = 21;
          goto LABEL_47;
        case 22:
          CFBooleanRef v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v43);
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          __int16 v33 = 22;
          goto LABEL_47;
        case 23:
          CFBooleanRef v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v44);
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          __int16 v33 = 23;
          goto LABEL_47;
        case 24:
          CFBooleanRef v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v45);
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          __int16 v33 = 24;
LABEL_47:
          uint64_t v20 = (uint64_t)iAP2MsgAddCFBooleanParam(v31, v32, v33, v30);
          goto LABEL_50;
        case 27:
          CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v46);
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          __int16 v29 = 27;
LABEL_49:
          uint64_t v20 = iAP2MsgAddCFU16Param(v27, v28, v29, v26);
LABEL_50:
          if (v20) {
            ++v4;
          }
          break;
        default:
          break;
      }
      --Count;
    }
    while (Count);
  }
  return v4;
}

uint64_t iap2_nowPlaying_mediaItemArtworkUpdateHandler(uint64_t result, const __CFData *a2)
{
  if (!result) {
    return result;
  }
  unsigned int v2 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    unsigned __int16 v4 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    unsigned __int16 v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = v2[1];
    *(_DWORD *)buf = 138412290;
    *(void *)CFStringRef v37 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Artwork Received mediaItemArtwork update for endpoint: %@", buf, 0xCu);
  }
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects <= 31;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      CFArrayRef v8 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFArrayRef v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_8(a2);
    }
  }
  else
  {
    if (v7)
    {
      int v9 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_6();
    }
  }
  uint64_t result = iap2_feature_getFeature((uint64_t)v2, 0xEu);
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  if (!*(unsigned char *)result) {
    return 0;
  }
  uint64_t result = _isSubscribingForMediaItemAttribute(result);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(v10 + 64))
  {
    unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)v2, *(unsigned __int8 *)(v10 + 65));
    if (TransferEntry)
    {
      size_t v12 = (unsigned __int8 *)TransferEntry;
      uint64_t v13 = *(void *)(TransferEntry + 8);
      if (v13)
      {
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          CFStringRef v16 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          CFStringRef v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)CFStringRef v37 = v14;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)CFStringRef v38 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v13 = *((void *)v12 + 1);
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v17 = *v12;
          int v18 = *(unsigned __int8 *)(v13 + 109);
          int v19 = *((_DWORD *)v12 + 1);
          int v20 = *(unsigned __int16 *)(v13 + 112);
          int v21 = *(_DWORD *)(v13 + 104);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)CFStringRef v37 = v17;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = v18;
          *(_WORD *)CFStringRef v38 = 1024;
          *(_DWORD *)&v38[2] = v19;
          LOWORD(v39) = 1024;
          *(_DWORD *)((char *)&v39 + 2) = v20;
          HIWORD(v39) = 1024;
          int v40 = v21;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Artwork cancel previous transfer: id=%d(%d) type=%d(%d) state=%d", buf, 0x20u);
          uint64_t v13 = *((void *)v12 + 1);
        }
        _cancelPendingTransfer_0(v13);
      }
    }
    *(_WORD *)(v10 + 64) = 0;
  }
  uint64_t v22 = v2[4];
  if (!v22) {
    return 0;
  }
  uint64_t result = *(void *)(v22 + 24);
  if (!result) {
    return result;
  }
  int SessionForService = iAP2LinkGetSessionForService(result, 1);
  __int16 v24 = (char *)(v10 + 65);
  if (iAP2FileTransferAllocateBufferID(*(void *)(v2[4] + 24), SessionForService, (unsigned char *)(v10 + 65)))
  {
    *(unsigned char *)(v10 + 64) = 1;
    uint64_t result = (uint64_t)malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
    if (!result) {
      return result;
    }
    CFNumberRef v25 = (void *)result;
    iAP2FileTransferCreate(*(unsigned __int8 **)(v2[4] + 24), SessionForService, *v24, 0, 0, 0, result);
    iAP2FileTransferTypeData((uint64_t)v25, 2, 0);
    if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v2, 14, (uint64_t)v25, 0))
    {
      CFNumberRef v26 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
      CFStringRef v35 = malloc_type_malloc(0xFFFFuLL, 0xD649AC50uLL);
      uint64_t v27 = malloc_type_malloc(0x10uLL, 0x102004075F474C6uLL);
      *(void *)uint64_t v27 = v2;
      v27[8] = *v24;
      *((_DWORD *)v27 + 3) = 2;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v28 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        uint64_t v28 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = v2[1];
        *(_DWORD *)buf = 136315650;
        *(void *)CFStringRef v37 = "iap2_nowPlaying_mediaItemArtworkUpdateHandler";
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)CFStringRef v38 = 664;
        *(_WORD *)&v38[4] = 2112;
        uint64_t v39 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _artworkFileTransferIDSent endpointUUID: %@", buf, 0x1Cu);
      }
      iAP2MsgInit((uint64_t)v26, 20481, (uint64_t)v35, 0xFFFF, (uint64_t)_artworkFileTransferIDSent, (uint64_t)v27);
      uint64_t v32 = iAP2MsgAddGroupParam((uint64_t)v26, 0);
      iAP2MsgAddU8Param((uint64_t)v26, (uint64_t)v32, 26, *v24);
      if (a2)
      {
        *(void *)(v10 + 72) = CFRetain(a2);
        char v33 = 2;
      }
      else
      {
        id v34 = *(const void **)(v10 + 72);
        if (v34)
        {
          CFRelease(v34);
          char v33 = 0;
          *(void *)(v10 + 72) = 0;
        }
        else
        {
          char v33 = 0;
        }
      }
      *(unsigned char *)(v10 + 66) = v33;
      if ((iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v2, (uint64_t)v26) & 1) == 0) {
        iAP2FileTransferCancel((uint64_t)v25);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        CFBooleanRef v30 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        CFBooleanRef v30 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_2();
      }
      free(v25);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v29 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v29 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_4();
    }
  }
  return 1;
}

BOOL _isSubscribingForMediaItemAttribute(BOOL result)
{
  if (result)
  {
    if (*(void *)(result + 16))
    {
      CFArrayRef v1 = *(const __CFArray **)(result + 8);
      v2.length = CFArrayGetCount(v1);
      v2.location = 0;
      return CFArrayContainsValue(v1, v2, (const void *)0x1A) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _cancelPendingTransfer_0(uint64_t a1)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFRange v2 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFRange v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(a1 + 109);
      int v4 = *(unsigned __int16 *)(a1 + 112);
      int v5 = *(_DWORD *)(a1 + 104);
      int v19 = 67109632;
      int v20 = v3;
      __int16 v21 = 1024;
      int v22 = v4;
      __int16 v23 = 1024;
      int v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "_cancelPendingTransfer: fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
    }
    uint64_t v6 = *(void *)(*(void *)a1 + 176);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        CFArrayRef v8 = *(unsigned char **)(a1 + 64);
        if (v8)
        {
          *CFArrayRef v8 = 1;
          int v9 = *(_DWORD *)(a1 + 104);
          if (v9 == 2 || v8[3]) {
            goto LABEL_14;
          }
        }
        else
        {
          int v9 = *(_DWORD *)(a1 + 104);
          if (v9 == 2)
          {
LABEL_14:
            if (gLogObjects && gNumLogObjects >= 32)
            {
              uint64_t v10 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              uint64_t v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v11 = *(unsigned __int8 *)(a1 + 109);
              int v12 = *(unsigned __int16 *)(a1 + 112);
              int v13 = *(_DWORD *)(a1 + 104);
              int v19 = 67109632;
              int v20 = v11;
              __int16 v21 = 1024;
              int v22 = v12;
              __int16 v23 = 1024;
              int v24 = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "_cancelPendingTransfer: Call Cancel fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
            }
            if (v8) {
              *CFArrayRef v8 = 0;
            }
            iAP2FileTransferCancel(a1);
            iap2_sessionFileTransfer_removeTransferForFeature(v7, 14, a1);
            uint64_t v14 = *(void **)(a1 + 64);
            if (v14)
            {
              free(v14);
              *(void *)(a1 + 64) = 0;
            }
            iAP2FileTransferRelease(a1);
            return;
          }
        }
        if (v9)
        {
          if (v9 == 5 && v8) {
            *CFArrayRef v8 = 0;
          }
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v15 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int v16 = *(unsigned __int8 *)(a1 + 109);
            int v17 = *(unsigned __int16 *)(a1 + 112);
            int v18 = *(_DWORD *)(a1 + 104);
            int v19 = 67109632;
            int v20 = v16;
            __int16 v21 = 1024;
            int v22 = v17;
            __int16 v23 = 1024;
            int v24 = v18;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "_cancelPendingTransfer: Call Start fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v19, 0x14u);
          }
          iAP2FileTransferStart(a1, 0, 0, 0, (uint64_t)_artworkFileTransferEndHandler, 0, 0, 0);
        }
      }
    }
  }
}

void _artworkFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v5 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      int v11 = 134219266;
      uint64_t v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 1024;
      int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
      __int16 v19 = 1024;
      int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      __int16 v21 = 2080;
      label = dispatch_queue_get_label(0);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Artwork File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v11, 0x2Eu);
    }
    if (v4)
    {
      if (*(_DWORD *)(v4 + 12) == 2)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0xEu);
          if (Feature) {
            _handleFileTransferIDSent(@"#Artwork", v4, (unsigned __int8 *)(Feature + 64), (uint64_t)_artworkFileTransferEndHandler);
          }
        }
      }
    }
    if (a2)
    {
      int v9 = (void *)a1[6];
      if (v9)
      {
        free(v9);
        a1[6] = 0;
      }
      uint64_t v10 = (void *)a1[3];
      if (v10) {
        free(v10);
      }
      free(a1);
    }
  }
}

uint64_t iap2_nowPlaying_playbackAttributesUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    int v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v4 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          uint64_t v4 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = v3[1];
          *(_DWORD *)buf = 138412290;
          *(void *)CFStringRef v41 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received playbackAttributes update for endpoint: %@", buf, 0xCu);
        }
        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xEu);
        if (result)
        {
          uint64_t v6 = result;
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v7 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v7 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = v3[1];
            int v9 = *(unsigned __int8 *)(v6 + 83);
            *(_DWORD *)buf = 138412546;
            *(void *)CFStringRef v41 = v8;
            *(_WORD *)&v41[8] = 1024;
            int v42 = v9;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received playbackAttributes update for endpoint: %@, autoChoosePBQListStartIndex=%d", buf, 0x12u);
          }
          if (!*(unsigned char *)v6) {
            return 0;
          }
          if (!*(unsigned char *)(v6 + 40)) {
            goto LABEL_100;
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Updating elapsed time timer...", buf, 2u);
          }
          int v11 = *(_DWORD *)(v6 + 24);
          int v38 = *(_DWORD *)(v6 + 36);
          int valuePtr = v11;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"Status");
          if (Value) {
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            __int16 v13 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            __int16 v13 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_17();
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v14 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_15();
          }
          CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ElapsedTimeMS");
          if (v15) {
            CFNumberGetValue(v15, kCFNumberIntType, &v38);
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v16 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_13();
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            __int16 v17 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            __int16 v17 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_11();
          }
          if (valuePtr == *(_DWORD *)(v6 + 24) && v38 == *(_DWORD *)(v6 + 36)) {
            goto LABEL_100;
          }
          if ((valuePtr & 0xFFFFFFFD) != 0)
          {
            if (gLogObjects) {
              BOOL v18 = gNumLogObjects <= 31;
            }
            else {
              BOOL v18 = 1;
            }
            int v19 = !v18;
            if ((valuePtr - 3) > 1)
            {
              if (v19)
              {
                int v22 = *(NSObject **)(gLogObjects + 248);
              }
              else
              {
                int v22 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                iap2_nowPlaying_playbackAttributesUpdateHandler_cold_9(v22, v23, v24, v25, v26, v27, v28, v29);
              }
              if (*(unsigned char *)(v6 + 40))
              {
                *(unsigned char *)(v6 + 136) = 1;
                if (gLogObjects && gNumLogObjects >= 32)
                {
                  CFBooleanRef v30 = *(NSObject **)(gLogObjects + 248);
                }
                else
                {
                  CFBooleanRef v30 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                {
                  int v31 = *(unsigned __int8 *)(v6 + 136);
                  int v32 = *(unsigned __int8 *)(v6 + 137);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)CFStringRef v41 = v31;
                  *(_WORD *)&v41[4] = 1024;
                  *(_DWORD *)&v41[6] = v32;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Start elapsed time timer! elapsedTimer: Enabled = %d, Running = %d", buf, 0xEu);
                }
                _continueElapsedTimeTimer(v6);
              }
              goto LABEL_99;
            }
            if (v19)
            {
              int v20 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              int v20 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_6();
            }
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              __int16 v21 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              __int16 v21 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_4();
            }
          }
          _pauseElapsedTimeTimer(v6);
LABEL_99:
          *(_DWORD *)(v6 + 24) = valuePtr;
          *(_DWORD *)(v6 + 36) = v38;
LABEL_100:
          char v33 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
          id v34 = malloc_type_malloc(0xFFFFuLL, 0x4E3D41C6uLL);
          iAP2MsgInit((uint64_t)v33, 20481, (uint64_t)v34, 0xFFFF, (uint64_t)_playbackAttributesUpdateSentCB, 0);
          CFStringRef v35 = iAP2MsgAddGroupParam((uint64_t)v33, 1);
          LOBYTE(valuePtr) = 0;
          if (_addplaybackAttributesToMessage((uint64_t)v33, (uint64_t)v35, v6, a2, &valuePtr, 0))
          {
            if (iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)v33) && (_BYTE)valuePtr) {
              *(void *)(v6 + 48) = systemInfo_getCurrentUnixTimeMS();
            }
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              CFStringRef v36 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              CFStringRef v36 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)CFStringRef v41 = "iap2_nowPlaying_playbackAttributesUpdateHandler";
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%s: no parameters added! cleaning up pOutMsg", buf, 0xCu);
            }
            iAP2MsgCleanup((uint64_t)v33);
          }
          if (*(unsigned char *)(v6 + 83))
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              CFStringRef v37 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              CFStringRef v37 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_1();
            }
            _checkMoveWindowAndRequestPBQList(0, *(_DWORD *)(v6 + 84), (uint64_t)v3, v6);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void _playbackAttributesUpdateSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = (unsigned char *)iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        if (!*Feature)
        {
          uint64_t v8 = logObjectForModule_23();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315394;
            uint64_t v10 = "_playbackAttributesUpdateSentCB";
            __int16 v11 = 1024;
            int v12 = a2;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s NowPlaying updates not started. NeedDelete:%d", (uint8_t *)&v9, 0x12u);
          }
        }
      }
    }
    if (a2)
    {
      uint64_t v6 = (void *)a1[6];
      if (v6)
      {
        free(v6);
        a1[6] = 0;
      }
      int v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }
}

uint64_t _addplaybackAttributesToMessage(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, unsigned char *a5, int a6)
{
  int v69 = a6;
  uint64_t v71 = a2;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v10 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    unsigned int valuePtr = 134219010;
    uint64_t v73 = obfuscatedPointer(a1);
    __int16 v74 = 2048;
    uint64_t v75 = obfuscatedPointer(v71);
    __int16 v76 = 2048;
    uint64_t v77 = obfuscatedPointer(a3);
    __int16 v78 = 1024;
    int v79 = v69;
    __int16 v80 = 2112;
    CFDictionaryRef v81 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "_addplaybackAttributesToMessage: pMessage=%p pGroupParam=%p pFeature=%p initialSend=%d playbackAttributes=%@", (uint8_t *)&valuePtr, 0x30u);
  }
  LOWORD(v11) = 0;
  if (a1 && a3 && a4)
  {
    CFArrayRef v12 = *(const __CFArray **)(a3 + 16);
    if (!v12)
    {
      LOWORD(v11) = 0;
      return (unsigned __int16)v11;
    }
    uint64_t Count = CFArrayGetCount(v12);
    uint64_t v68 = &v50;
    uint64_t v14 = __chkstk_darwin(Count);
    int v16 = (const void **)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v14) {
      memset((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v15);
    }
    v82.location = 0;
    v82.length = Count;
    CFArrayGetValues(*(CFArrayRef *)(a3 + 16), v82, v16);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v17 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
    __int16 v51 = a5;
    uint64_t v70 = a3;
    if (!v18) {
      goto LABEL_35;
    }
    CFStringRef RawValuesString = CFArrayCreateRawValuesString(*(const __CFArray **)(a3 + 16), 0);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v21 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v21 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      _addplaybackAttributesToMessage_cold_3();
    }
    a5 = v51;
    if (RawValuesString) {
      CFRelease(RawValuesString);
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v22 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v22 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      _addplaybackAttributesToMessage_cold_1();
      if (!a5) {
        goto LABEL_37;
      }
    }
    else
    {
LABEL_35:
      if (!a5)
      {
LABEL_37:
        if (Count >= 1)
        {
          int v11 = 0;
          CFStringRef v67 = @"AppBundleID";
          CFStringRef v66 = @"SetElapsedTimeAvailable";
          CFStringRef v65 = @"PlaybackSpeed";
          CFStringRef v64 = @"iTunesRadioStationMediaPlaylistPersistentID";
          CFStringRef v63 = @"iTunesRadioStation";
          CFStringRef v62 = @"iTunesRadioAd";
          CFStringRef v61 = @"MediaLibraryUID";
          CFStringRef v60 = @"AppName";
          CFStringRef v59 = @"RepeatMode";
          CFStringRef v58 = @"ShuffleMode";
          CFStringRef v57 = @"QueueChapterIndex";
          CFStringRef v56 = @"QueueCount";
          CFStringRef v55 = @"QueueIndex";
          CFStringRef v54 = @"ElapsedTimeMS";
          CFStringRef v53 = @"Status";
          *(void *)&long long v19 = 67109120;
          long long v52 = v19;
          *(void *)&long long v19 = 134218240;
          long long v50 = v19;
          while (2)
          {
            uint64_t v24 = *v16++;
            unsigned __int16 v23 = (unsigned __int16)v24;
            uint64_t v25 = gLogObjects;
            int v26 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 32)
            {
              uint64_t v27 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              uint64_t v27 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                unsigned int valuePtr = v50;
                uint64_t v73 = v25;
                __int16 v74 = 1024;
                LODWORD(v75) = v26;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&valuePtr, 0x12u);
                uint64_t v27 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              unsigned int valuePtr = v52;
              LODWORD(v73) = v23;
              _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "_addplaybackAttributesToMessage: paramID=%d", (uint8_t *)&valuePtr, 8u);
            }
            switch(v23)
            {
              case 0u:
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, v53);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 0;
                goto LABEL_63;
              case 1u:
                CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(a4, v54);
                unsigned int valuePtr = -1431655766;
                if (v32)
                {
                  if (CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr))
                  {
                    if (iAP2MsgAddU32Param(a1, v71, 1, valuePtr))
                    {
                      ++v11;
                      if (v51) {
                        *__int16 v51 = 1;
                      }
                    }
                  }
                }
                goto LABEL_79;
              case 2u:
                CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a4, v55);
                if (!v33) {
                  goto LABEL_79;
                }
                CFNumberRef v34 = v33;
                if (!iAP2MsgAddCFU32Param(a1, v71, 2, v33)) {
                  goto LABEL_79;
                }
                unsigned int valuePtr = 0;
                CFNumberGetValue(v34, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)(v70 + 28) = valuePtr;
                goto LABEL_59;
              case 3u:
                CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a4, v56);
                if (!v35) {
                  goto LABEL_79;
                }
                CFNumberRef v36 = v35;
                if (!iAP2MsgAddCFU32Param(a1, v71, 3, v35)) {
                  goto LABEL_79;
                }
                unsigned int valuePtr = 0;
                CFNumberGetValue(v36, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)(v70 + 32) = valuePtr;
LABEL_59:
                ++v11;
                goto LABEL_79;
              case 4u:
                CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(a4, v57);
                uint64_t v38 = iAP2MsgAddCFU32Param(a1, v71, 4, v37);
                goto LABEL_77;
              case 5u:
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, v58);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 5;
                goto LABEL_63;
              case 6u:
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, v59);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 6;
LABEL_63:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFU8Param(v29, v30, v31, Value);
                goto LABEL_77;
              case 7u:
                CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(a4, v60);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 7;
                goto LABEL_76;
              case 8u:
                CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(a4, v61);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 8;
                goto LABEL_76;
              case 9u:
                CFBooleanRef v43 = (const __CFBoolean *)CFDictionaryGetValue(a4, v62);
                uint64_t v44 = a1;
                uint64_t v45 = v71;
                __int16 v46 = 9;
                goto LABEL_71;
              case 0xAu:
                CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(a4, v63);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 10;
                goto LABEL_76;
              case 0xBu:
                CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(a4, v64);
                uint64_t v38 = (uint64_t)iAP2MsgAddCFU64Param(a1, v71, 11, v47);
                goto LABEL_77;
              case 0xCu:
                CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(a4, v65);
                uint64_t v38 = iAP2MsgAddCFU16Param(a1, v71, 12, v48);
                goto LABEL_77;
              case 0xDu:
                CFBooleanRef v43 = (const __CFBoolean *)CFDictionaryGetValue(a4, v66);
                uint64_t v44 = a1;
                uint64_t v45 = v71;
                __int16 v46 = 13;
LABEL_71:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFBooleanParam(v44, v45, v46, v43);
                goto LABEL_77;
              case 0xEu:
                if (!v69 || !*(unsigned char *)(v70 + 82)) {
                  goto LABEL_79;
                }
                uint64_t v38 = (uint64_t)iAP2MsgAddU8Param(a1, v71, 14, 0);
LABEL_77:
                if (v38) {
                  ++v11;
                }
LABEL_79:
                if (!--Count) {
                  return (unsigned __int16)v11;
                }
                continue;
              case 0x10u:
                CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(a4, v67);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 16;
LABEL_76:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFStringParam(v40, v41, v42, v39);
                goto LABEL_77;
              default:
                goto LABEL_79;
            }
          }
        }
        LOWORD(v11) = 0;
        return (unsigned __int16)v11;
      }
    }
    *a5 = 0;
    goto LABEL_37;
  }
  return (unsigned __int16)v11;
}

void _checkMoveWindowAndRequestPBQList(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v22 = -1431655766;
  int started = _calculateStartIndex(a4, a2, *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 28), *(_DWORD *)(a4 + 32), &v22);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v9 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    int v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a3 + 8);
    int v11 = *(unsigned __int8 *)(a4 + 83);
    int v12 = *(_DWORD *)(a4 + 84);
    int v13 = *(_DWORD *)(a4 + 88);
    int v14 = *(_DWORD *)(a4 + 28);
    int v15 = *(_DWORD *)(a4 + 32);
    *(_DWORD *)buf = 138414594;
    uint64_t v24 = v10;
    __int16 v25 = 1024;
    int v26 = a1;
    __int16 v27 = 1024;
    int v28 = v11;
    __int16 v29 = 1024;
    unsigned int v30 = a2;
    __int16 v31 = 1024;
    int v32 = v12;
    __int16 v33 = 1024;
    int v34 = v13;
    __int16 v35 = 1024;
    int v36 = v14;
    __int16 v37 = 1024;
    int v38 = v15;
    __int16 v39 = 1024;
    int v40 = started;
    __int16 v41 = 1024;
    unsigned int v42 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "_checkMoveWindowAndRequestPBQList: %@, forceListRequest=%d autoChoosePBQListStartIndex=%d startIndexOverride=%u startIndex=%u contentSize=%u trackIndex=%u trackCount=%u -> newIndex=%u actualCount=%u", buf, 0x42u);
  }
  if ((a1 & 1) != 0 || started != *(_DWORD *)(a4 + 84))
  {
    *(_DWORD *)(a4 + 84) = started;
    uint64_t v16 = *(void *)(a4 + 96);
    if (v16)
    {
      if (!a3 || (uint64_t v17 = *(void *)(a3 + 8)) == 0) {
        uint64_t v17 = 0;
      }
      platform_nowPlaying_cancelRequestPlaybackQueueListInfo(v17, v16);
      BOOL v18 = *(const void **)(a4 + 96);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a4 + 96) = 0;
      }
    }
    CFUUIDRef v19 = CFUUIDCreate(kCFAllocatorDefault);
    CFStringRef v20 = CFUUIDCreateString(kCFAllocatorDefault, v19);
    *(void *)(a4 + 96) = v20;
    if (!a3 || (uint64_t v21 = *(void *)(a3 + 8)) == 0) {
      uint64_t v21 = 0;
    }
    platform_nowPlaying_requestPlaybackQueueListInfo(v21, (uint64_t)v20, *(unsigned int *)(a4 + 84), *(unsigned int *)(a4 + 88), *(unsigned int *)(a4 + 92));
    if (v19) {
      CFRelease(v19);
    }
  }
}

uint64_t iap2_nowPlaying_playbackQueueListChangedHandler(uint64_t *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    int v14 = 138412546;
    uint64_t v15 = v5;
    __int16 v16 = 1024;
    BOOL v17 = a2 != 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received playbackQueueListChanged for endpoint: %@, _dueToClientUpdate %d", (uint8_t *)&v14, 0x12u);
  }
  uint64_t Feature = (unsigned char *)iap2_feature_getFeature((uint64_t)a1, 0xEu);
  if (!Feature) {
    return 0;
  }
  uint64_t v7 = (uint64_t)Feature;
  if (!*Feature) {
    return 0;
  }
  if (!Feature[80] && !Feature[81]) {
    return 1;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v8 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    iap2_nowPlaying_playbackQueueListChangedHandler_cold_1();
  }
  _checkMoveWindowAndRequestPBQList(a2 != 0, *(_DWORD *)(v7 + 84), (uint64_t)a1, v7);
  int v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  uint64_t v10 = malloc_type_malloc(0xFFFFuLL, 0x7B785063uLL);
  iAP2MsgInit((uint64_t)v9, 20481, (uint64_t)v10, 0xFFFF, (uint64_t)_playbackQueueListChangedSentCB, 0);
  uint64_t v11 = 1;
  int v12 = iAP2MsgAddGroupParam((uint64_t)v9, 1);
  iAP2MsgAddU8Param((uint64_t)v9, (uint64_t)v12, 14, 0);
  iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(a1, (uint64_t)v9);
  return v11;
}

void _playbackQueueListChangedSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        uint64_t v6 = Feature;
        if (!*(unsigned char *)(Feature + 80) && !*(unsigned char *)(Feature + 81))
        {
          int v9 = logObjectForModule_23();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(unsigned __int8 *)(v6 + 80);
            int v11 = *(unsigned __int8 *)(v6 + 81);
            int v12 = 136315906;
            int v13 = "_playbackQueueListChangedSentCB";
            __int16 v14 = 1024;
            int v15 = a2;
            __int16 v16 = 1024;
            int v17 = v10;
            __int16 v18 = 1024;
            int v19 = v11;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s NeedDelete:%d, supportsPBQListPIDs:%d, supportsPBQListMeta:%d", (uint8_t *)&v12, 0x1Eu);
          }
        }
      }
    }
    if (a2)
    {
      uint64_t v7 = (void *)a1[6];
      if (v7)
      {
        free(v7);
        a1[6] = 0;
      }
      uint64_t v8 = (void *)a1[3];
      if (v8) {
        free(v8);
      }
      free(a1);
    }
  }
}

uint64_t iap2_nowPlaying_playbackQueueListInfoResponseHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v4 = &unk_100239000;
  uint64_t v5 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[1];
    if (a2) {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"RequestID");
    }
    else {
      CFStringRef Value = @"(nil)";
    }
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = Value;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received playbackQueueListInfoResponse for endpoint: %@, requestID: %@", buf, 0x16u);
  }
  uint64_t Feature = (unsigned char *)iap2_feature_getFeature((uint64_t)a1, 0xEu);
  if (!Feature) {
    return 0;
  }
  v131 = Feature;
  if (!*Feature) {
    return 0;
  }
  uint64_t v10 = a1[4];
  if (!v10 || !*(void *)(v10 + 24)) {
    return 0;
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"StartIndex");
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Count");
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"NonLibrary");
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Available");
  uint64_t valuePtr = 0;
  __int16 v132 = 0;
  if (!v14)
  {
    v111 = logObjectForModule_23();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_1();
    }
    return 0;
  }
  if (a2)
  {
    CFNumberRef v15 = v14;
    if (v11) {
      CFNumberGetValue(v11, kCFNumberIntType, (char *)&valuePtr + 4);
    }
    if (v12) {
      CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
    }
    if (v13) {
      CFNumberGetValue(v13, kCFNumberSInt8Type, (char *)&v132 + 1);
    }
    CFNumberGetValue(v15, kCFNumberSInt8Type, &v132);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v16 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = valuePtr;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = HIBYTE(v132);
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v132;
      int v17 = "#PlaybackQueueList queueListInfo exists, startIndex=%d count=%d nonLibrary=%d pbqListAvailable=%d";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, buf, 0x1Au);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v16 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = valuePtr;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = HIBYTE(v132);
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v132;
      int v17 = "#PlaybackQueueList queueListInfo doesn't exist, startIndex=%d count=%d nonLibrary=%d pbqListAvailable=%d";
      goto LABEL_39;
    }
  }
  __int16 v18 = CFDictionaryGetValue(a2, @"RequestID");
  if (!v18)
  {
    CFIndex v112 = logObjectForModule_23();
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_2();
    }
    return 0;
  }
  int v19 = v18;
  CFStringRef v20 = (const void *)*((void *)v131 + 12);
  if (!v20)
  {
    uint64_t v113 = logObjectForModule_23();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_3();
    }
    return 0;
  }
  if (!CFEqual(v20, v19))
  {
    v114 = logObjectForModule_23();
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_4();
    }
    return 0;
  }
  if (!v131[80] && !v131[81])
  {
    long long v119 = logObjectForModule_23();
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_5();
    }
    return 0;
  }
  int SessionForService = iAP2LinkGetSessionForService(*(void *)(a1[4] + 24), 1);
  SessionInfo = iAP2LinkGetSessionInfo(*(unsigned __int8 **)(a1[4] + 24), SessionForService);
  unsigned int v22 = SessionInfo;
  if (SessionInfo)
  {
    BOOL v23 = v131[80] != 0;
    if (SessionInfo[2] >= 2u)
    {
      BOOL v24 = v131[81] != 0;
      int length_4 = 1;
      goto LABEL_50;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  int length_4 = 0;
  BOOL v24 = 0;
LABEL_50:
  int v127 = v131[82];
  CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(a2, @"List");
  if (v24) {
    int v26 = 6;
  }
  else {
    int v26 = 0;
  }
  if (v23) {
    int v27 = 3;
  }
  else {
    int v27 = v26;
  }
  if (!v22)
  {
    v115 = logObjectForModule_23();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_6();
    }
    return 0;
  }
  CFArrayRef v28 = v25;
  uint64_t v29 = (int)valuePtr;
  if (v25) {
    CFIndex Count = CFArrayGetCount(v25);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef theArray = v28;
  if (Count != v29)
  {
    unint64_t v116 = logObjectForModule_23();
    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
    {
      int v117 = valuePtr;
      if (v28) {
        CFIndex v118 = CFArrayGetCount(v28);
      }
      else {
        CFIndex v118 = 0;
      }
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v117;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v118;
      _os_log_error_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "#PlaybackQueueList record count does not match! %d vs %ld", buf, 0x12u);
    }
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    __int16 v31 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    __int16 v31 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = HIBYTE(v132);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v23;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v24;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#PlaybackQueueList nonLibrary=%d supportsPBQListPIDs=%d supportsPBQListMeta=%d recordCount=%d", buf, 0x1Au);
  }
  if (HIBYTE(v132)) {
    BOOL v32 = 0;
  }
  else {
    BOOL v32 = v23;
  }
  CFArrayRef v33 = v28;
  if (v32)
  {
    unsigned int v34 = 8 * valuePtr;
    int v27 = 3;
    __int16 v35 = v131;
    if (v127) {
      goto LABEL_103;
    }
    goto LABEL_104;
  }
  if (!v24)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v45 = *(NSObject **)(gLogObjects + 248);
      __int16 v35 = v131;
    }
    else
    {
      uint64_t v45 = &_os_log_default;
      __int16 v35 = v131;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "#PlaybackQueueList Cannot send list, send empty list and availble=false", buf, 2u);
    }
    LOBYTE(v132) = 0;
    if (!v127) {
      goto LABEL_164;
    }
    goto LABEL_167;
  }
  if ((int)valuePtr < 1)
  {
    unsigned int v34 = 22;
    int v27 = 6;
    __int16 v35 = v131;
    if (v127 && !(_BYTE)v132) {
      goto LABEL_167;
    }
LABEL_105:
    BOOL v122 = v32;
    unsigned int length = v34;
    __int16 v46 = malloc_type_malloc(v34, 0x3A39E566uLL);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFNumberRef v47 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFNumberRef v47 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      uint64_t v48 = obfuscatedPointer((uint64_t)v46);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v34;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "#PlaybackQueueList allocated %d bytes, ftBuff=%p", buf, 0x12u);
    }
    CFArrayRef v49 = theArray;
    if (v122)
    {
      if ((int)valuePtr < 1)
      {
        char v79 = 1;
        goto LABEL_169;
      }
      int v120 = v27;
      CFIndex v50 = 0;
      long long v123 = v46;
      __int16 v51 = v46;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, v50);
        CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"PersistentID");
        unint64_t v134 = 0;
        if (v53 && CFNumberGetValue(v53, kCFNumberSInt64Type, &v134))
        {
          *__int16 v51 = HIBYTE(v134);
          v51[1] = BYTE6(v134);
          v51[2] = BYTE5(v134);
          v51[3] = BYTE4(v134);
          v51[4] = BYTE3(v134);
          v51[5] = BYTE2(v134);
          v51[6] = BYTE1(v134);
          v51[7] = v134;
        }
        else
        {
          uint64_t v54 = gLogObjects;
          CFStringRef v55 = v5;
          int v56 = v5[100];
          if (gLogObjects && v56 >= 32)
          {
            CFStringRef v57 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            CFStringRef v57 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v54;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v56;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              CFStringRef v57 = &_os_log_default;
            }
          }
          __int16 v35 = v131;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            int v58 = valuePtr;
            uint64_t v59 = obfuscatedPointer((uint64_t)v51);
            int v60 = *((_DWORD *)v131 + 23);
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v50;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v58;
            *(_WORD *)&buf[14] = 2048;
            *(void *)&uint8_t buf[16] = v59;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v60;
            *(_WORD *)&buf[30] = 2112;
            *(void *)&long long v136 = ValueAtIndex;
            _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#PlaybackQueueList fill in pid list, failed to retrieve pid from item: i=%d / %d, p=%p infoMask=0x%x item=%@", buf, 0x28u);
          }
          *(void *)__int16 v51 = 0;
          uint64_t v5 = v55;
          CFArrayRef v49 = theArray;
        }
        ++v50;
        v51 += 8;
      }
      while (v50 < (int)valuePtr);
      char v79 = 1;
      uint64_t v4 = &unk_100239000;
LABEL_168:
      int v27 = v120;
      __int16 v46 = v123;
      goto LABEL_169;
    }
    int v120 = v27;
    unint64_t v138 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v61 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v136 = v61;
    long long v137 = v61;
    *(_OWORD *)buf = v61;
    *(_OWORD *)&uint8_t buf[16] = v61;
    long long v123 = v46;
    iAP2MsgInit((uint64_t)buf, 0, (uint64_t)v46, v34, 0, 0);
    iAP2MsgAddU32Param((uint64_t)buf, 0, 0, valuePtr);
    iAP2MsgAddU32Param((uint64_t)buf, 0, 1, HIDWORD(valuePtr));
    if ((int)valuePtr < 1)
    {
LABEL_158:
      char v79 = 1;
      uint64_t v5 = (_DWORD *)&unk_100239000;
      uint64_t v4 = (void *)&unk_100239000;
      __int16 v35 = v131;
      goto LABEL_168;
    }
    CFIndex v62 = 0;
    while (1)
    {
      CFDictionaryRef v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, v62);
      if (v63)
      {
        unint64_t v64 = *((unsigned int *)v131 + 23);
        if (v64)
        {
          if (*v131) {
            break;
          }
        }
      }
LABEL_157:
      ++v62;
      CFArrayRef v49 = theArray;
      if (v62 >= (int)valuePtr) {
        goto LABEL_158;
      }
    }
    CFDictionaryRef v65 = v63;
    CFStringRef v66 = iAP2MsgAddGroupParam((uint64_t)buf, 2);
    uint64_t v67 = 0;
    while (1)
    {
      if ((v64 >> v67))
      {
        if ((int)v67 > 11)
        {
          switch((int)v67)
          {
            case 12:
              CFStringRef v68 = (const __CFString *)CFDictionaryGetValue(v65, @"Artist");
              if (v68)
              {
                CFStringRef v69 = v68;
                uint64_t v70 = (uint64_t)v66;
                __int16 v71 = 12;
                goto LABEL_155;
              }
              break;
            case 14:
              CFStringRef v73 = (const __CFString *)CFDictionaryGetValue(v65, @"AlbumArtist");
              if (v73)
              {
                CFStringRef v69 = v73;
                uint64_t v70 = (uint64_t)v66;
                __int16 v71 = 14;
                goto LABEL_155;
              }
              break;
            case 16:
              CFStringRef v74 = (const __CFString *)CFDictionaryGetValue(v65, @"Genre");
              if (v74)
              {
                CFStringRef v69 = v74;
                uint64_t v70 = (uint64_t)v66;
                __int16 v71 = 16;
                goto LABEL_155;
              }
              break;
            case 18:
              CFStringRef v75 = (const __CFString *)CFDictionaryGetValue(v65, @"Composer");
              if (v75)
              {
                CFStringRef v69 = v75;
                uint64_t v70 = (uint64_t)v66;
                __int16 v71 = 18;
                goto LABEL_155;
              }
              break;
            default:
              goto LABEL_156;
          }
          goto LABEL_156;
        }
        if (!v67)
        {
          CFNumberRef v76 = (const __CFNumber *)CFDictionaryGetValue(v65, @"PersistentID");
          unint64_t v134 = 0;
          if (v76 && CFNumberGetValue(v76, kCFNumberSInt64Type, &v134)) {
            iAP2MsgAddU64Param((uint64_t)buf, (uint64_t)v66, 0, v134);
          }
          goto LABEL_156;
        }
        if (v67 != 1)
        {
          if (v67 != 6) {
            goto LABEL_156;
          }
          CFStringRef v72 = (const __CFString *)CFDictionaryGetValue(v65, @"AlbumTitle");
          if (!v72) {
            goto LABEL_156;
          }
          CFStringRef v69 = v72;
          uint64_t v70 = (uint64_t)v66;
          __int16 v71 = 6;
          goto LABEL_155;
        }
        CFStringRef v77 = (const __CFString *)CFDictionaryGetValue(v65, @"Title");
        if (v77)
        {
          CFStringRef v69 = v77;
          uint64_t v70 = (uint64_t)v66;
          __int16 v71 = 1;
LABEL_155:
          iAP2MsgAddCFStringParam((uint64_t)buf, v70, v71, v69);
        }
      }
LABEL_156:
      if (++v67 == 19) {
        goto LABEL_157;
      }
    }
  }
  BOOL v121 = v32;
  CFIndex v36 = 0;
  unsigned int v34 = 22;
  __int16 v35 = v131;
  do
  {
    CFDictionaryRef v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v36);
    if (v37 && *v35)
    {
      CFDictionaryRef v38 = v37;
      uint64_t v39 = 0;
      unint64_t v40 = *((unsigned int *)v35 + 23);
      int v41 = 4;
      while (1)
      {
        if ((v40 >> v39))
        {
          if ((int)v39 > 11)
          {
            switch((int)v39)
            {
              case 12:
                CFDictionaryRef v42 = v38;
                CFStringRef v43 = @"Artist";
                goto LABEL_94;
              case 14:
                CFDictionaryRef v42 = v38;
                CFStringRef v43 = @"AlbumArtist";
                goto LABEL_94;
              case 16:
                CFDictionaryRef v42 = v38;
                CFStringRef v43 = @"Genre";
                goto LABEL_94;
              case 18:
                CFDictionaryRef v42 = v38;
                CFStringRef v43 = @"Composer";
                goto LABEL_94;
              default:
                goto LABEL_95;
            }
            goto LABEL_95;
          }
          switch(v39)
          {
            case 0:
              if (CFDictionaryGetValue(v38, @"PersistentID")) {
                v41 += 12;
              }
              break;
            case 1:
              CFDictionaryRef v42 = v38;
              CFStringRef v43 = @"Title";
              goto LABEL_94;
            case 6:
              CFDictionaryRef v42 = v38;
              CFStringRef v43 = @"AlbumTitle";
LABEL_94:
              CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(v42, v43);
              v41 += _calculateStrParamSize(v44);
              break;
          }
        }
LABEL_95:
        if (++v39 == 19) {
          goto LABEL_96;
        }
      }
    }
    int v41 = 0;
LABEL_96:
    v34 += v41;
    ++v36;
    __int16 v35 = v131;
    CFArrayRef v33 = theArray;
  }
  while (v36 < (int)valuePtr);
  int v27 = 6;
  uint64_t v5 = &unk_100239000;
  uint64_t v4 = &unk_100239000;
  BOOL v32 = v121;
  if (!v127) {
    goto LABEL_104;
  }
LABEL_103:
  if (!(_BYTE)v132)
  {
LABEL_167:
    uint64_t v78 = 1;
    _sendPBQTransferTypeAndAvailability(a1, v27, length_4, 1, 0);
    return v78;
  }
LABEL_104:
  if (v34) {
    goto LABEL_105;
  }
LABEL_164:
  char v79 = 0;
  unsigned int length = 0;
  __int16 v46 = 0;
LABEL_169:
  if (v35[120])
  {
    unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)a1, v35[121]);
    if (TransferEntry)
    {
      CFDictionaryRef v81 = (unsigned __int8 *)TransferEntry;
      uint64_t v82 = *(void *)(TransferEntry + 8);
      if (v82)
      {
        char v129 = v79;
        uint64_t v83 = v4[49];
        int v84 = v5[100];
        if (v83 && v84 >= 32)
        {
          id v85 = *(NSObject **)(v83 + 248);
        }
        else
        {
          id v85 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v83;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v84;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v82 = *((void *)v81 + 1);
          }
        }
        if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
        {
          int v86 = *v81;
          int v87 = *(unsigned __int8 *)(v82 + 109);
          int v88 = *((_DWORD *)v81 + 1);
          int v89 = *(unsigned __int16 *)(v82 + 112);
          int v90 = *(_DWORD *)(v82 + 104);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v86;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v87;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v88;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = v89;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v90;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "#PlaybackQueueList cancel previous transfer: id=%d(%d) type=%d(%d) state=%d", buf, 0x20u);
          uint64_t v82 = *((void *)v81 + 1);
        }
        __int16 v35 = v131;
        char v79 = v129;
        _cancelPendingTransfer_0(v82);
      }
    }
    *((_WORD *)v35 + 60) = 0;
  }
  if (!iAP2FileTransferAllocateBufferID(*(void *)(a1[4] + 24), SessionForService, v35 + 121))
  {
    uint64_t v99 = v4[49];
    if (v99 && (int)v5[100] >= 32)
    {
      __int16 v100 = *(NSObject **)(v99 + 248);
    }
    else
    {
      __int16 v100 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_12();
    }
LABEL_216:
    uint64_t v78 = 1;
    if (!v46) {
      return v78;
    }
LABEL_217:
    free(v46);
    return v78;
  }
  char v130 = v79;
  int v91 = v27;
  v35[120] = 1;
  v92 = malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
  if (!v92)
  {
    uint64_t v78 = 0;
    if (!v46) {
      return v78;
    }
    goto LABEL_217;
  }
  uint64_t v93 = (uint64_t)v92;
  iAP2FileTransferCreate(*(unsigned __int8 **)(a1[4] + 24), SessionForService, v35[121], 0, 0, 0, (uint64_t)v92);
  iAP2FileTransferTypeData(v93, v91, 0);
  int v94 = iap2_sessionFileTransfer_addTransferForFeature((uint64_t)a1, 14, v93, 0);
  uint64_t v95 = v4[49];
  if (v95) {
    BOOL v96 = v5[100] <= 31;
  }
  else {
    BOOL v96 = 1;
  }
  int v97 = !v96;
  if (!v94)
  {
    if (v97)
    {
      unsigned int v101 = *(NSObject **)(v95 + 248);
    }
    else
    {
      unsigned int v101 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_10();
    }
    free((void *)v93);
    goto LABEL_216;
  }
  if (v97)
  {
    v98 = *(NSObject **)(v95 + 248);
  }
  else
  {
    v98 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
  {
    int v102 = *(unsigned __int8 *)(v93 + 109);
    int v103 = *(unsigned __int16 *)(v93 + 112);
    int v104 = *(_DWORD *)(v93 + 104);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v102;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v103;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v104;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "#PlaybackQueueList added transfer for feature and set type: id=%d type=%d state=%d", buf, 0x14u);
  }
  v105 = (const void *)*((void *)v35 + 16);
  if (v105)
  {
    CFRelease(v105);
    *((void *)v35 + 16) = 0;
  }
  char v106 = v130 ^ 1;
  if (!v46) {
    char v106 = 1;
  }
  if (v106) {
    CFDataRef v107 = 0;
  }
  else {
    CFDataRef v107 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v46, length, kCFAllocatorDefault);
  }
  *((void *)v35 + 16) = v107;
  v35[122] = v91;
  if ((_sendPBQTransferTypeAndAvailability(a1, v91, length_4, v127 != 0, (_BYTE)v132 != 0) & 1) == 0)
  {
    uint64_t v108 = v4[49];
    if (v108 && (int)v5[100] >= 32)
    {
      v109 = *(NSObject **)(v108 + 248);
    }
    else
    {
      v109 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_7();
    }
    iAP2FileTransferCancel(v93);
  }
  return 1;
}

uint64_t *_sendPBQTransferTypeAndAvailability(uint64_t *result, int a2, int a3, int a4, int a5)
{
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (!*result) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v10 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    CFNumberRef v11 = (const char *)v5[1];
    *(_DWORD *)buf = 138413058;
    unsigned int v22 = v11;
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    LODWORD(v26[0]) = a3;
    WORD2(v26[0]) = 1024;
    *(_DWORD *)((char *)v26 + 6) = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "_sendPBQTransferTypeAndAvailability: %@, transferType=%d supportsEnhancedTransfer=%d requestedListAvailable=%d", buf, 0x1Eu);
  }
  uint64_t result = (uint64_t *)iap2_feature_getFeature((uint64_t)v5, 0xEu);
  if (result)
  {
    CFNumberRef v12 = result;
    if (*(unsigned char *)result)
    {
      int v20 = a5;
      int v13 = a3;
      CFNumberRef v14 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
      CFNumberRef v15 = malloc_type_malloc(0xFFFFuLL, 0xB0D7AAE2uLL);
      __int16 v16 = malloc_type_malloc(0x10uLL, 0x102004075F474C6uLL);
      *(void *)__int16 v16 = v5;
      v16[8] = *((unsigned char *)v12 + 121);
      *((_DWORD *)v16 + 3) = a2;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v17 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v5[1];
        *(_DWORD *)buf = 136315650;
        unsigned int v22 = "_sendPBQTransferTypeAndAvailability";
        __int16 v23 = 1024;
        int v24 = 2851;
        __int16 v25 = 2112;
        v26[0] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _playbackQueueFileTransferIDSent endpointUUID: %@", buf, 0x1Cu);
      }
      iAP2MsgInit((uint64_t)v14, 20481, (uint64_t)v15, 0xFFFF, (uint64_t)_playbackQueueFileTransferIDSent, (uint64_t)v16);
      int v19 = iAP2MsgAddGroupParam((uint64_t)v14, 1);
      if (!a4 || (iAP2MsgAddU8Param((uint64_t)v14, (uint64_t)v19, 14, v20), v20))
      {
        if (v13) {
          iAP2MsgAddVoidParam((uint64_t)v14, (uint64_t)v19, 17);
        }
        else {
          iAP2MsgAddU8Param((uint64_t)v14, (uint64_t)v19, 15, *((unsigned char *)v12 + 121));
        }
      }
      return (uint64_t *)iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v5, (uint64_t)v14);
    }
    return 0;
  }
  return result;
}

void _playbackQueueFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      int v17 = 134219266;
      *(void *)uint64_t v18 = v6;
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)int v19 = v7;
      *(_WORD *)&v19[4] = 1024;
      *(_DWORD *)&v19[6] = a2;
      __int16 v20 = 1024;
      int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
      __int16 v22 = 1024;
      int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      __int16 v24 = 2080;
      label = dispatch_queue_get_label(0);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#PlaybackQueueList File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v17, 0x2Eu);
    }
    if (v4)
    {
      int v8 = *(_DWORD *)(v4 + 12);
      if (v8 == 6 || v8 == 3)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0xEu);
          if (Feature) {
            _handleFileTransferIDSent(@"#PlaybackQueueList", v4, (unsigned __int8 *)(Feature + 120), (uint64_t)_playbackQueueFileTransferEndHandler);
          }
        }
      }
    }
  }
  if (a2)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFNumberRef v11 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFNumberRef v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int v12 = iAP2MsgGetMsgID((uint64_t)a1);
        int v13 = iAP2MsgGetMsgLen((uint64_t)a1);
      }
      else
      {
        int v12 = 0;
        int v13 = 0;
      }
      CFNumberRef v14 = dispatch_queue_get_label(0);
      int v17 = 67109634;
      *(_DWORD *)uint64_t v18 = v12;
      *(_WORD *)&v18[4] = 1024;
      *(_DWORD *)&v18[6] = v13;
      *(_WORD *)int v19 = 2080;
      *(void *)&v19[2] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PlaybackQueue FileTransfer ID Sent deleting msg! needDelete=True msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v17, 0x18u);
    }
    if (a1)
    {
      CFNumberRef v15 = (void *)a1[6];
      if (v15)
      {
        free(v15);
        a1[6] = 0;
      }
      __int16 v16 = (void *)a1[3];
      if (v16) {
        free(v16);
      }
      free(a1);
    }
  }
}

uint64_t _calculateStartIndex(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int *a6)
{
  if (a3 >= a5) {
    unsigned int v6 = a5;
  }
  else {
    unsigned int v6 = a3;
  }
  if (a3) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  if (!a3) {
    unsigned int v6 = a5;
  }
  if (v7 >= a5 || *(unsigned char *)(a1 + 83) != 0)
  {
    unsigned int v9 = a4 - (v6 >> 1);
    if (a4 < v6 >> 1) {
      unsigned int v9 = 0;
    }
    unsigned int v10 = v9 - v7;
    if (v7 > v9) {
      unsigned int v10 = v7 - v9;
    }
    if (v10 > v6 >> 2) {
      unsigned int v7 = v9;
    }
    if (!*(unsigned char *)(a1 + 83)) {
      unsigned int v7 = v9;
    }
  }
  if (v7 + v6 <= a5) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = a5 - v6;
  }
  if (a6)
  {
    if (a5 - result < v6) {
      unsigned int v6 = a5 - result;
    }
    *a6 = v6;
  }
  return result;
}

char *_createFeature_19(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(void *)(v2 + 24)) {
    return 0;
  }
  int v3 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x1060040F5F5C552uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    *int v3 = 0;
    *((void *)v3 + 6) = 0;
    *((_WORD *)v3 + 40) = 0;
    v3[82] = 0;
    v3[136] = 0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    v3[40] = 0;
    *(void *)(v3 + 92) = 0;
    *(void *)(v3 + 108) = 0;
    *(void *)(v3 + 100) = 0;
    uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 24));
    *((void *)v4 + 7) = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    v7[2] = ___createFeature_block_invoke_0;
    v7[3] = &__block_descriptor_tmp_15;
    v7[4] = a1;
    v7[5] = v4;
    dispatch_source_set_event_handler(v5, v7);
    dispatch_source_set_timer(*((dispatch_source_t *)v4 + 7), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*((dispatch_object_t *)v4 + 7));
    *((_WORD *)v4 + 32) = 0;
    v4[66] = 0;
    *((void *)v4 + 9) = 0;
    *((_WORD *)v4 + 60) = 0;
    v4[122] = 0;
    *((void *)v4 + 16) = 0;
    iAP2LinkRegisterEventCallback(*(void *)(*(void *)(a1 + 32) + 24), 1u, (uint64_t)_nowPlayingiAP2LinkEventNotifyHandler);
    platform_nowPlaying_incrementUserCount();
  }
  return v4;
}

uint64_t _destroyFeature_19(void **a1, unint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = (unsigned __int8 *)*a1;
    if (*a1)
    {
      unsigned int v6 = *((void *)v5 + 7);
      if (v6) {
        dispatch_source_cancel(v6);
      }
      if (v5[64])
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(a2, v5[65]);
        if (TransferEntry)
        {
          uint64_t v8 = *(void *)(TransferEntry + 8);
          if (v8) {
            iAP2FileTransferCancel(v8);
          }
        }
        *((_WORD *)v5 + 32) = 0;
      }
      if (v5[120])
      {
        unint64_t v9 = iap2_sessionFileTransfer_findTransferEntry(a2, v5[121]);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10) {
            iAP2FileTransferCancel(v10);
          }
        }
        *((_WORD *)v5 + 60) = 0;
      }
      if (*v5) {
        _removeSubscribersForSubFeatures((uint64_t)v5);
      }
      platform_nowPlaying_decrementUserCount();
      CFNumberRef v11 = (const void *)*((void *)v5 + 1);
      if (v11)
      {
        CFRelease(v11);
        *((void *)v5 + 1) = 0;
      }
      int v12 = (const void *)*((void *)v5 + 2);
      if (v12)
      {
        CFRelease(v12);
        *((void *)v5 + 2) = 0;
      }
      int v13 = *((void *)v5 + 7);
      if (v13)
      {
        dispatch_release(v13);
        *((void *)v5 + 7) = 0;
      }
      CFNumberRef v14 = (const void *)*((void *)v5 + 9);
      if (v14)
      {
        CFRelease(v14);
        *((void *)v5 + 9) = 0;
      }
      v5[66] = 0;
      CFNumberRef v15 = (const void *)*((void *)v5 + 12);
      if (v15)
      {
        CFRelease(v15);
        *((void *)v5 + 12) = 0;
      }
      __int16 v16 = (const void *)*((void *)v5 + 13);
      if (v16)
      {
        CFRelease(v16);
        *((void *)v5 + 13) = 0;
      }
      int v17 = (const void *)*((void *)v5 + 16);
      if (v17)
      {
        CFRelease(v17);
        *((void *)v5 + 16) = 0;
      }
      v5[122] = 0;
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_17(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgNowPlayingList, 4u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xEu);
    iap2_identification_setIdentifiedForFeature(a1, 0xEu);
  }
  return v3;
}

void ___createFeature_block_invoke_0(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    ___createFeature_block_invoke_cold_8();
  }
  BOOL v4 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    ___createFeature_block_invoke_cold_6((uint64_t)v4, v3, v5);
    if (!v4) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  if (v3)
  {
    *(unsigned char *)(v3 + 137) = 0;
    int CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v7 = *(void *)(v3 + 48);
    if (v7) {
      int v8 = CurrentUnixTimeMS - v7;
    }
    else {
      int v8 = 0;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      unint64_t v9 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      unint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      ___createFeature_block_invoke_cold_4();
    }
    if (*(_DWORD *)(v3 + 24) == 1) {
      *(_DWORD *)(v3 + 36) += v8;
    }
    if (*v4 && *(unsigned char *)v3 && *(unsigned char *)(v3 + 40))
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v10 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        uint64_t v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        ___createFeature_block_invoke_cold_2();
      }
      CFNumberRef v11 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
      int v12 = malloc_type_malloc(0xFFFFuLL, 0xADDF0541uLL);
      iAP2MsgInit((uint64_t)v11, 20481, (uint64_t)v12, 0xFFFF, (uint64_t)_elapsedTimeSentCB, (uint64_t)v4);
      int v13 = iAP2MsgAddGroupParam((uint64_t)v11, 1);
      if (iAP2MsgAddU32Param((uint64_t)v11, (uint64_t)v13, 1, *(_DWORD *)(v3 + 36)))
      {
        if (iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v4, (uint64_t)v11)) {
          *(void *)(v3 + 48) = systemInfo_getCurrentUnixTimeMS();
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 32)
        {
          CFNumberRef v14 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          CFNumberRef v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315138;
          __int16 v16 = "_sendElapsedTimeUpdate";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: no parameters added! cleaning up pOutMsg", (uint8_t *)&v15, 0xCu);
        }
        iAP2MsgCleanup((uint64_t)v11);
      }
    }
  }
}

float _nowPlayingiAP2LinkEventNotifyHandler(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || a2 != 1) {
    return result;
  }
  if (a3) {
    uint64_t v5 = *(unsigned __int8 **)(a3 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    char v6 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    char v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = obfuscatedPointer(a3);
    if (a3)
    {
      uint64_t v17 = obfuscatedPointer(*(void *)(a3 + 64));
      int v16 = *(unsigned __int8 *)(a3 + 109);
      int v18 = *(_DWORD *)(a3 + 104);
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = 0;
      int v18 = -1;
    }
    if (v5)
    {
      int v29 = *v5;
      int v30 = v5[1];
      int v28 = v5[2];
      int v31 = v5[3];
    }
    else
    {
      int v28 = -1;
      int v29 = -1;
      int v30 = -1;
      int v31 = -1;
    }
    int v42 = 134219776;
    *(void *)CFStringRef v43 = v15;
    *(_WORD *)&v43[8] = 2048;
    uint64_t v44 = v17;
    *(_WORD *)uint64_t v45 = 1024;
    *(_DWORD *)&v45[2] = v16;
    *(_WORD *)__int16 v46 = 1024;
    *(_DWORD *)&v46[2] = v18;
    __int16 v47 = 1024;
    int v48 = v29;
    __int16 v49 = 1024;
    int v50 = v30;
    __int16 v51 = 1024;
    int v52 = v28;
    __int16 v53 = 1024;
    int v54 = v31;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got kiAP2LinkEventNotifyBuffXferStateChange fileXfer=%p(endCBUserInfo=%p ID=%u state=%d) context(needCancel=%d lastSeenSetupState=%d sentSetup=%d gotStart=%d)", (uint8_t *)&v42, 0x3Au);
    if (!a3) {
      return result;
    }
  }
  else if (!a3)
  {
    return result;
  }
  if (!*(void *)(a3 + 64)) {
    return result;
  }
  unsigned int v8 = *(unsigned __int16 *)(a3 + 112);
  if (v8 > 6) {
    return result;
  }
  if (((1 << v8) & 0x4C) == 0) {
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  if (!v9) {
    return result;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10 || !v5) {
    return result;
  }
  int v11 = *(_DWORD *)(a3 + 104);
  if (v11 != 2) {
    goto LABEL_31;
  }
  if (v5[2])
  {
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFNumberRef v14 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFNumberRef v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v42 = 134218240;
        *(void *)CFStringRef v43 = v12;
        *(_WORD *)&v43[8] = 1024;
        LODWORD(v44) = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v42, 0x12u);
        int v11 = *(_DWORD *)(a3 + 104);
        goto LABEL_28;
      }
    }
    int v11 = 2;
LABEL_28:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v35 = *(unsigned __int8 *)(a3 + 109);
      int v36 = *(unsigned __int16 *)(a3 + 112);
      int v37 = v5[3];
      int v42 = 67110144;
      *(_DWORD *)CFStringRef v43 = v35;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v36;
      LOWORD(v44) = 1024;
      *(_DWORD *)((char *)&v44 + 2) = v11;
      HIWORD(v44) = 1024;
      *(_DWORD *)uint64_t v45 = v37;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)__int16 v46 = 1;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->gotStart %d->%d", (uint8_t *)&v42, 0x20u);
      int v11 = *(_DWORD *)(a3 + 104);
    }
    v5[3] = 1;
LABEL_31:
    if (v11 == 3 && v5[1])
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v19 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int v38 = *(unsigned __int8 *)(a3 + 109);
        int v39 = *(unsigned __int16 *)(a3 + 112);
        int v40 = *(_DWORD *)(a3 + 104);
        int v41 = v5[2];
        int v42 = 67110144;
        *(_DWORD *)CFStringRef v43 = v38;
        *(_WORD *)&v43[4] = 1024;
        *(_DWORD *)&v43[6] = v39;
        LOWORD(v44) = 1024;
        *(_DWORD *)((char *)&v44 + 2) = v40;
        HIWORD(v44) = 1024;
        *(_DWORD *)uint64_t v45 = v41;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)__int16 v46 = 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->sentSetup %d->%d", (uint8_t *)&v42, 0x20u);
      }
      _DWORD v5[2] = 1;
    }
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    __int16 v20 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    __int16 v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  int v22 = *(_DWORD *)(a3 + 104);
  if (v21)
  {
    int v32 = *(unsigned __int8 *)(a3 + 109);
    int v33 = *(unsigned __int16 *)(a3 + 112);
    int v34 = v5[1];
    int v42 = 67110144;
    *(_DWORD *)CFStringRef v43 = v32;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v33;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v22;
    HIWORD(v44) = 1024;
    *(_DWORD *)uint64_t v45 = v34;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)__int16 v46 = v22 == 1;
    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "fileXfer(ID=%u type=%d state=%d) context->lastSeenSetupState %d->%d", (uint8_t *)&v42, 0x20u);
    int v22 = *(_DWORD *)(a3 + 104);
  }
  v5[1] = v22 == 1;
  if (*v5)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v23 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = *(unsigned __int8 *)(a3 + 109);
      int v25 = *(unsigned __int16 *)(a3 + 112);
      int v26 = *(_DWORD *)(a3 + 104);
      int v42 = 67109632;
      *(_DWORD *)CFStringRef v43 = v24;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v25;
      LOWORD(v44) = 1024;
      *(_DWORD *)((char *)&v44 + 2) = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Cancel fileXfer(ID=%u type=%d state=%d)", (uint8_t *)&v42, 0x14u);
    }
    unsigned __int8 *v5 = 0;
    iAP2FileTransferCancel(a3);
    iap2_sessionFileTransfer_removeTransferForFeature(v10, 14, a3);
    int v27 = *(void **)(a3 + 64);
    if (v27)
    {
      free(v27);
      *(void *)(a3 + 64) = 0;
    }
    iAP2FileTransferRelease(a3);
  }
  return result;
}

void _elapsedTimeSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = iap2_feature_getFeature(a1[6], 0xEu);
      if (Feature)
      {
        uint64_t v6 = Feature;
        if (*(unsigned char *)(Feature + 136))
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v7 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            uint64_t v7 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = *(void *)(v4 + 8);
            int v10 = *(unsigned __int8 *)(v6 + 136);
            int v11 = *(unsigned __int8 *)(v6 + 137);
            int v12 = 138413058;
            uint64_t v13 = v9;
            __int16 v14 = 1024;
            int v15 = a2;
            __int16 v16 = 1024;
            int v17 = v10;
            __int16 v18 = 1024;
            int v19 = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Elapsed time sent callback fired! %@ needDelete=%d, elapsedTimer: Enabled = %d, Running = %d", (uint8_t *)&v12, 0x1Eu);
          }
          _continueElapsedTimeTimer(v6);
        }
      }
    }
    if (a2)
    {
      unsigned int v8 = (void *)a1[3];
      if (v8) {
        free(v8);
      }
      free(a1);
    }
  }
}

void _continueElapsedTimeTimer(uint64_t a1)
{
  if (!a1 || !*(unsigned char *)(a1 + 40)) {
    return;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _continueElapsedTimeTimer_cold_5();
  }
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v3 = gLogObjects;
    int v4 = gNumLogObjects;
    if (!*(unsigned char *)(a1 + 137))
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v5 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        uint64_t v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _continueElapsedTimeTimer_cold_3(v5, v7, v8, v9, v10, v11, v12, v13);
      }
      __int16 v14 = *(NSObject **)(a1 + 56);
      dispatch_time_t v15 = dispatch_time(0, 450000000);
      dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(unsigned char *)(a1 + 137) = 1;
      return;
    }
  }
  else
  {
    uint64_t v3 = gLogObjects;
    int v4 = gNumLogObjects;
  }
  if (v3 && v4 >= 32)
  {
    uint64_t v6 = *(NSObject **)(v3 + 248);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _continueElapsedTimeTimer_cold_1();
  }
}

void _removeSubscribersForSubFeatures(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 8);
    if (v2)
    {
      if (CFArrayGetCount(v2) >= 1) {
        platform_nowPlaying_removeSubscriber(@"MediaItemAttributes");
      }
      if (_isSubscribingForMediaItemAttribute(a1)) {
        platform_nowPlaying_removeSubscriber(@"MediaItemArtwork");
      }
    }
    CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
    if (v3 && CFArrayGetCount(v3) >= 1)
    {
      platform_nowPlaying_removeSubscriber(@"PlaybackAttributes");
    }
  }
}

uint64_t _startNowPlayingUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0xEu);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _startNowPlayingUpdatesHandler_cold_25();
  }
  int v90 = (uint64_t *)a1;
  uint64_t v91 = v5;
  CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 28, 0);
  CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 18, 0);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    uint64_t v93 = 0;
    char v92 = 0;
    char v94 = 0;
    int v96 = 0;
    int v10 = 0;
LABEL_82:
    _removeSubscribersForSubFeatures(v91);
    int v39 = (CFArrayRef *)(v91 + 8);
    int v38 = *(const void **)(v91 + 8);
    if (v38) {
      CFRelease(v38);
    }
    int v41 = (CFArrayRef *)(v91 + 16);
    int v40 = *(const void **)(v91 + 16);
    *(void *)(v91 + 8) = Mutable;
    if (v40) {
      CFRelease(v40);
    }
    *(void *)(v91 + 16) = theArray;
    *(unsigned char *)(v91 + 40) = v93 & 1;
    int v42 = BYTE4(v93) & 1;
    *(unsigned char *)(v91 + 80) = v42;
    *(unsigned char *)(v91 + 81) = v92 & 1;
    *(unsigned char *)(v91 + 82) = v94 & 1;
    *(unsigned char *)(v91 + 83) = 0;
    *(_DWORD *)(v91 + 84) = 0;
    *(_DWORD *)(v91 + 88) = v96;
    *(_DWORD *)(v91 + 92) = v10 | v42;
    *(unsigned char *)uint64_t v91 = 1;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFStringRef v43 = *(NSObject **)(gLogObjects + 248);
      uint64_t v44 = v90;
    }
    else
    {
      CFStringRef v43 = &_os_log_default;
      uint64_t v44 = v90;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
      _startNowPlayingUpdatesHandler_cold_14(v39);
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v45 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      uint64_t v45 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      _startNowPlayingUpdatesHandler_cold_12(v41);
    }
    if (!*v44 || (CFArrayRef v46 = *v39) == 0)
    {
LABEL_186:
      if (*v41 && CFArrayGetCount(*v41) >= 1)
      {
        platform_nowPlaying_addSubscriber(@"PlaybackAttributes");
        platform_nowPlaying_triggerPlaybackAttributesUpdate();
        if (_isSubscribingForPlaybackAttribute(v91, 0xFu) || _isSubscribingForPlaybackAttribute(v91, 0x11u))
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v83 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            uint64_t v83 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "nowPlaying addSubscriber: PlaybackQueueList", buf, 2u);
          }
          platform_nowPlaying_addSubscriber(@"PlaybackQueueList");
        }
        if (gLogObjects && gNumLogObjects >= 32)
        {
          int v84 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          int v84 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
          _startNowPlayingUpdatesHandler_cold_1();
        }
        _checkMoveWindowAndRequestPBQList(1, *(_DWORD *)(v91 + 84), (uint64_t)v44, v91);
      }
      CFArrayRef v46 = *v39;
      if (!*v39) {
        return 1;
      }
      goto LABEL_207;
    }
    if (!*v41)
    {
LABEL_207:
      if (CFArrayGetCount(v46) >= 1)
      {
        platform_nowPlaying_addSubscriber(@"MediaItemAttributes");
        platform_nowPlaying_triggerMediaItemAttributesUpdate();
      }
      if (_isSubscribingForMediaItemAttribute(v91))
      {
        platform_nowPlaying_addSubscriber(@"MediaItemArtwork");
        platform_nowPlaying_triggerMediaItemArtworkUpdate();
      }
      return 1;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v47 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v47 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = v44[1];
      *(_DWORD *)buf = 138412290;
      *(void *)unsigned int v101 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Sending initial now playing update for endpoint: %@", buf, 0xCu);
    }
    CFDictionaryRef v49 = (const __CFDictionary *)platform_nowPlaying_copyDefaultMediaItemAttributes();
    CFMutableArrayRef theArraya = (CFMutableArrayRef)platform_nowPlaying_copyDefaultPlaybackAttributes();
    int v50 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
    __int16 v51 = malloc_type_malloc(0xFFFFuLL, 0x1B5AE9B0uLL);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v52 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v52 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = v44[1];
      *(_DWORD *)buf = 136315650;
      *(void *)unsigned int v101 = "_sendInitialNowPlayingUpdate";
      *(_WORD *)&v101[8] = 1024;
      *(_DWORD *)int v102 = 1451;
      *(_WORD *)&v102[4] = 2112;
      uint64_t v103 = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%s:%d - iAP2MsgInit with cleanupCB - _artworkFileTransferIDSent endpointUUID: %@", buf, 0x1Cu);
    }
    iAP2MsgInit((uint64_t)v50, 20481, (uint64_t)v51, 0xFFFF, (uint64_t)_artworkFileTransferIDSent, 0);
    if (CFArrayGetCount(*v39) < 1)
    {
      uint64_t v59 = 0;
      __int16 v60 = 0;
      CFDictionaryRef v61 = theArraya;
      goto LABEL_166;
    }
    int v54 = iAP2MsgAddGroupParam((uint64_t)v50, 0);
    __int16 v55 = _addMediaItemAttributesToMessage((uint64_t)v50, (uint64_t)v54, v91, v49);
    if (v50 && *v39 && _isSubscribingForMediaItemAttribute(v91))
    {
      __int16 v97 = v55;
      if (*(unsigned char *)(v91 + 64))
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)v44, *(unsigned __int8 *)(v91 + 65));
        if (TransferEntry)
        {
          CFStringRef v57 = (unsigned __int8 *)TransferEntry;
          if (*(void *)(TransferEntry + 8))
          {
            uint64_t v95 = *(void *)(TransferEntry + 8);
            if (gLogObjects && gNumLogObjects >= 32)
            {
              int v58 = *(NSObject **)(gLogObjects + 248);
            }
            else
            {
              int v58 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
                int v58 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              int v65 = *v57;
              uint64_t v66 = *((void *)v57 + 1);
              int v67 = *(unsigned __int8 *)(v66 + 109);
              int v68 = *((_DWORD *)v57 + 1);
              int v69 = *(unsigned __int16 *)(v66 + 112);
              LODWORD(v66) = *(_DWORD *)(v66 + 104);
              *(_DWORD *)buf = 67110400;
              *(_DWORD *)unsigned int v101 = 1685;
              *(_WORD *)&v101[4] = 1024;
              *(_DWORD *)&v101[6] = v65;
              *(_WORD *)int v102 = 1024;
              *(_DWORD *)&v102[2] = v67;
              LOWORD(v103) = 1024;
              *(_DWORD *)((char *)&v103 + 2) = v68;
              HIWORD(v103) = 1024;
              int v104 = v69;
              __int16 v105 = 1024;
              int v106 = v66;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "#Artwork %d: cancel previous transfer: id=%d(%d) type=%d(%d) state=%d", buf, 0x26u);
            }
            _cancelPendingTransfer_0(v95);
          }
        }
        *(_WORD *)(v91 + 64) = 0;
        __int16 v55 = v97;
      }
      uint64_t v70 = v44[4];
      if (v70)
      {
        uint64_t v71 = *(void *)(v70 + 24);
        if (v71)
        {
          int SessionForService = iAP2LinkGetSessionForService(v71, 1);
          if (iAP2FileTransferAllocateBufferID(*(void *)(v44[4] + 24), SessionForService, (unsigned char *)(v91 + 65)))
          {
            *(unsigned char *)(v91 + 64) = 1;
            uint64_t v59 = malloc_type_malloc(0x130uLL, 0x10B0040038BA21DuLL);
            if (v59)
            {
              iAP2FileTransferCreate(*(unsigned __int8 **)(v44[4] + 24), SessionForService, *(unsigned __int8 *)(v91 + 65), 0, 0, 0, (uint64_t)v59);
              iAP2FileTransferTypeData((uint64_t)v59, 2, 0);
              if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v44, 14, (uint64_t)v59, 0))
              {
                iAP2MsgSetCleanupCB((uint64_t)v50, (uint64_t)_artworkFileTransferIDSent);
                CFStringRef v73 = malloc_type_malloc(0x10uLL, 0x102004075F474C6uLL);
                *(void *)CFStringRef v73 = v44;
                char v74 = *(unsigned char *)(v91 + 65);
                v73[8] = v74;
                *((_DWORD *)v73 + 3) = 2;
                v50[6] = v73;
                __int16 v75 = iAP2MsgAddU8Param((uint64_t)v50, (uint64_t)v54, 26, v74) != 0;
                CFNumberRef v76 = *(const void **)(v91 + 72);
                if (v76)
                {
                  CFRelease(v76);
                  *(void *)(v91 + 72) = 0;
                }
                goto LABEL_164;
              }
              if (gLogObjects && gNumLogObjects >= 32)
              {
                uint64_t v78 = *(NSObject **)(gLogObjects + 248);
              }
              else
              {
                uint64_t v78 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
                iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_2();
              }
              free(v59);
              uint64_t v59 = 0;
            }
            __int16 v75 = 0;
LABEL_164:
            CFDictionaryRef v61 = theArraya;
            __int16 v55 = v97;
            goto LABEL_165;
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            CFStringRef v77 = *(NSObject **)(gLogObjects + 248);
            __int16 v55 = v97;
          }
          else
          {
            CFStringRef v77 = &_os_log_default;
            __int16 v55 = v97;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
            iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_4();
          }
        }
      }
    }
    uint64_t v59 = 0;
    __int16 v75 = 0;
    CFDictionaryRef v61 = theArraya;
LABEL_165:
    __int16 v60 = v55 + v75;
LABEL_166:
    if (CFArrayGetCount(*v41) >= 1)
    {
      char v79 = iAP2MsgAddGroupParam((uint64_t)v50, 1);
      v60 += _addplaybackAttributesToMessage((uint64_t)v50, (uint64_t)v79, v91, v61, 0, 1);
    }
    if (v60)
    {
      char v80 = iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v44, (uint64_t)v50);
      if (!v59 || (v80 & 1) != 0) {
        goto LABEL_182;
      }
      iAP2FileTransferCancel((uint64_t)v59);
      iap2_sessionFileTransfer_removeTransferForFeature((uint64_t)v44, 14, (uint64_t)v59);
      CFDictionaryRef v81 = (void *)v59[8];
      if (v81)
      {
        free(v81);
        v59[8] = 0;
      }
      iAP2FileTransferRelease((uint64_t)v59);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v82 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        uint64_t v82 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      CFDictionaryRef v61 = theArraya;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)unsigned int v101 = "_sendInitialNowPlayingUpdate";
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "%s: no parameters added! cleaning up pOutMsg", buf, 0xCu);
      }
    }
    iAP2MsgCleanup((uint64_t)v50);
LABEL_182:
    if (v49) {
      CFRelease(v49);
    }
    if (v61) {
      CFRelease(v61);
    }
    goto LABEL_186;
  }
  uint64_t v9 = (unsigned __int16 *)FirstParam;
  int v10 = 0;
  int v96 = 0;
  char v94 = 0;
  char v92 = 0;
  uint64_t v93 = 0;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v9);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v14 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)unsigned int v101 = v12;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)int v102 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        __int16 v14 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)unsigned int v101 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }
    if (ParamID == 2)
    {
      unint64_t v21 = iAP2MsgGetFirstParam(a2, v9);
      if (v21)
      {
        NextParam = (unsigned __int16 *)v21;
        while (1)
        {
          uint64_t v23 = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v24 = gLogObjects;
          int v25 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v26 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v26 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)unsigned int v101 = v24;
              *(_WORD *)&v101[8] = 1024;
              *(_DWORD *)int v102 = v25;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              int v26 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)unsigned int v101 = v23;
            _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }
          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          v10 |= 1 << v23;
          NextParam = iAP2MsgGetNextParam(a2, v9, NextParam);
          if (!NextParam) {
            goto LABEL_79;
          }
        }
        if (gLogObjects && gNumLogObjects >= 32)
        {
          unint64_t v64 = *(NSObject **)(gLogObjects + 248);
          CFDictionaryRef v63 = theArray;
        }
        else
        {
          unint64_t v64 = &_os_log_default;
          CFDictionaryRef v63 = theArray;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
          _startNowPlayingUpdatesHandler_cold_23(v23, a2);
        }
        goto LABEL_221;
      }
      goto LABEL_79;
    }
    if (ParamID == 1)
    {
      unint64_t v27 = iAP2MsgGetFirstParam(a2, v9);
      if (!v27) {
        goto LABEL_79;
      }
      int v28 = (unsigned __int16 *)v27;
      while (1)
      {
        uint64_t v29 = iAP2MsgGetParamID((uint64_t)v28);
        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          int v32 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          int v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)unsigned int v101 = v30;
            *(_WORD *)&v101[8] = 1024;
            *(_DWORD *)int v102 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v32 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)unsigned int v101 = v29;
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
        }
        if ((int)v29 > 14)
        {
          if (v29 == 15)
          {
            if (!iAP2MsgIsDataVoid(v28))
            {
              int v88 = logObjectForModule_23();
              CFDictionaryRef v63 = theArray;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_20(a2);
              }
              goto LABEL_221;
            }
            BYTE4(v93) = 1;
          }
          else
          {
            if (v29 != 17) {
              goto LABEL_69;
            }
            *(_DWORD *)buf = 0;
            int DataAsU32 = iAP2MsgGetDataAsU32(v28, buf);
            if (*(_DWORD *)buf)
            {
              int v86 = logObjectForModule_23();
              if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_21(a2);
              }
              CFDictionaryRef v63 = theArray;
              goto LABEL_221;
            }
            int v96 = DataAsU32;
            char v92 = 1;
          }
        }
        else
        {
          if (v29 != 1)
          {
            if (v29 == 14)
            {
              if (!iAP2MsgIsDataVoid(v28))
              {
                id v85 = logObjectForModule_23();
                CFDictionaryRef v63 = theArray;
                if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
                  _startNowPlayingUpdatesHandler_cold_22(a2);
                }
                goto LABEL_221;
              }
              char v94 = 1;
              goto LABEL_70;
            }
LABEL_69:
            if (!iAP2MsgIsDataVoid(v28))
            {
              int v89 = logObjectForModule_23();
              CFDictionaryRef v63 = theArray;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_18(v29, a2);
              }
              goto LABEL_221;
            }
            goto LABEL_70;
          }
          if (!iAP2MsgIsDataVoid(v28))
          {
            int v87 = logObjectForModule_23();
            CFDictionaryRef v63 = theArray;
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_4(a2);
            }
            goto LABEL_221;
          }
          LOBYTE(v93) = 1;
        }
LABEL_70:
        CFArrayAppendValue(theArray, (const void *)v29);
        int v28 = iAP2MsgGetNextParam(a2, v9, v28);
        if (!v28) {
          goto LABEL_79;
        }
      }
    }
    if (ParamID)
    {
      uint64_t v34 = gLogObjects;
      int v35 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v36 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        int v36 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)unsigned int v101 = v34;
          *(_WORD *)&v101[8] = 1024;
          *(_DWORD *)int v102 = v35;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v36 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)unsigned int v101 = ParamID;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
      }
      goto LABEL_79;
    }
    unint64_t v15 = iAP2MsgGetFirstParam(a2, v9);
    if (v15) {
      break;
    }
LABEL_79:
    uint64_t v9 = iAP2MsgGetNextParam(a2, 0, v9);
    if (!v9) {
      goto LABEL_82;
    }
  }
  __int16 v16 = (unsigned __int16 *)v15;
  while (1)
  {
    uint64_t v17 = iAP2MsgGetParamID((uint64_t)v16);
    uint64_t v18 = gLogObjects;
    int v19 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v20 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      __int16 v20 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)unsigned int v101 = v18;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)int v102 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        __int16 v20 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)unsigned int v101 = v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
    }
    if (!iAP2MsgIsDataVoid(v16)) {
      break;
    }
    CFArrayAppendValue(Mutable, (const void *)v17);
    __int16 v16 = iAP2MsgGetNextParam(a2, v9, v16);
    if (!v16) {
      goto LABEL_79;
    }
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    CFIndex v62 = *(NSObject **)(gLogObjects + 248);
    CFDictionaryRef v63 = theArray;
  }
  else
  {
    CFIndex v62 = &_os_log_default;
    CFDictionaryRef v63 = theArray;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
    _startNowPlayingUpdatesHandler_cold_16(v17, a2);
  }
LABEL_221:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v63) {
    CFRelease(v63);
  }
  return 0;
}

uint64_t _stopNowPlayingUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0xEu);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v5 = *(NSObject **)(gLogObjects + 248);
        }
        else
        {
          uint64_t v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          _stopNowPlayingUpdatesHandler_cold_1();
        }
        _pauseElapsedTimeTimer(v4);
        _removeSubscribersForSubFeatures(v4);
        *(unsigned char *)uint64_t v4 = 0;
        *(unsigned char *)(v4 + 40) = 0;
        *(unsigned char *)(v4 + 136) = 0;
        *(void *)(v4 + 80) = 0;
        *(void *)(v4 + 88) = 0;
        uint64_t v6 = *(const void **)(v4 + 8);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(v4 + 8) = 0;
        }
        uint64_t v7 = *(const void **)(v4 + 16);
        if (v7)
        {
          CFRelease(v7);
          *(void *)(v4 + 16) = 0;
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t _setNowPlayingInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    _setNowPlayingInfoHandler_cold_8();
  }
  unint64_t FirstParam = 0;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xEu);
    if (!Feature) {
      return 0;
    }
    uint64_t v7 = Feature;
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      uint64_t v25 = a1;
      char v8 = 0;
      unsigned int v9 = 0;
      char v10 = 0;
      unsigned int v11 = 0;
      char v12 = 0;
      unsigned int v13 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
        switch(ParamID)
        {
          case 2:
            int v26 = -1431655766;
            unsigned int DataAsU32 = iAP2MsgGetDataAsU32(FirstParam, &v26);
            if (v26)
            {
              uint64_t v23 = logObjectForModule_23();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
              }
              return 0;
            }
            unsigned int v9 = DataAsU32;
            char v8 = 1;
            break;
          case 1:
            int v27 = -1431655766;
            unsigned int v17 = iAP2MsgGetDataAsU32(FirstParam, &v27);
            if (v27)
            {
              uint64_t v24 = logObjectForModule_23();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
              }
              return 0;
            }
            unsigned int v11 = v17;
            char v10 = 1;
            break;
          case 0:
            int v28 = -1431655766;
            unsigned int v15 = iAP2MsgGetDataAsU32(FirstParam, &v28);
            if (v28)
            {
              int v22 = logObjectForModule_23();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              return 0;
            }
            unsigned int v13 = v15;
            char v12 = 1;
            break;
        }
        unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
        if (!FirstParam)
        {
          if (v12)
          {
            uint64_t v18 = platform_nowPlaying_setPlaybackElapsedTime(v13);
            if ((v10 & 1) == 0)
            {
LABEL_28:
              unint64_t FirstParam = (unsigned __int16 *)v18;
              goto LABEL_30;
            }
          }
          else if ((v10 & 1) == 0)
          {
            unint64_t FirstParam = 0;
LABEL_30:
            if (v8)
            {
              *(unsigned char *)(v7 + 83) = v9 == -1;
              if (gLogObjects && gNumLogObjects >= 32)
              {
                int v19 = *(NSObject **)(gLogObjects + 248);
              }
              else
              {
                int v19 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
                _setNowPlayingInfoHandler_cold_3();
              }
              if (*(unsigned char *)(v7 + 81))
              {
                if (gLogObjects && gNumLogObjects >= 32)
                {
                  __int16 v20 = *(NSObject **)(gLogObjects + 248);
                }
                else
                {
                  __int16 v20 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
                  _setNowPlayingInfoHandler_cold_1();
                }
                _checkMoveWindowAndRequestPBQList(0, v9, v25, v7);
                return 1;
              }
            }
            return (uint64_t)FirstParam;
          }
          uint64_t v18 = platform_nowPlaying_setPlaybackQueueIndex(v11);
          goto LABEL_28;
        }
      }
    }
  }
  return (uint64_t)FirstParam;
}

BOOL _isSubscribingForPlaybackAttribute(BOOL result, unsigned int a2)
{
  if (result)
  {
    CFArrayRef v2 = *(const __CFArray **)(result + 16);
    if (v2)
    {
      v4.unsigned int length = CFArrayGetCount(*(CFArrayRef *)(result + 16));
      v4.location = 0;
      return CFArrayContainsValue(v2, v4, (const void *)a2) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _pauseElapsedTimeTimer(uint64_t a1)
{
  if (a1)
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_WORD *)(a1 + 136) = 0;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFArrayRef v2 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      CFArrayRef v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(a1 + 136);
      int v4 = *(unsigned __int8 *)(a1 + 137);
      v5[0] = 67109376;
      v5[1] = v3;
      __int16 v6 = 1024;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Pause elapsed time timer! elapsedTimer: Enabled = %d, Running = %d", (uint8_t *)v5, 0xEu);
    }
  }
}

void _handleFileTransferIDSent(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 && a3)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      char v8 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      char v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int8 *)(a2 + 8);
      int v10 = *(_DWORD *)(a2 + 12);
      int v11 = a3[1];
      int v12 = *a3;
      int v13 = a3[2];
      *(_DWORD *)buf = 138544642;
      uint64_t v34 = a1;
      __int16 v35 = 1024;
      *(_DWORD *)int v36 = v9;
      *(_WORD *)&void v36[4] = 1024;
      *(_DWORD *)&v36[6] = v10;
      *(_WORD *)int v37 = 1024;
      *(_DWORD *)&v37[2] = v11;
      *(_WORD *)int v38 = 1024;
      *(_DWORD *)&v38[2] = v12;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@ File transfer ID sent callback fired! context(ID=%u type=%u) currentTransferInfo(ID=%u valid=%d type=%u)", buf, 0x2Au);
    }
    if (!a3[2] || *(_DWORD *)(a2 + 12) == a3[2])
    {
      unint64_t v14 = *(void *)a2;
      if (*(void *)a2)
      {
        if (iap2_feature_getFeature(*(void *)a2, 0xEu))
        {
          int v15 = *(char *)(a2 + 8);
          if (v15 < 0)
          {
            if (*a3)
            {
              if (a3[1] == v15)
              {
                unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(v14, *(unsigned __int8 *)(a2 + 8));
                if (TransferEntry)
                {
                  uint64_t v17 = *(void *)(TransferEntry + 8);
                  if (v17)
                  {
                    if (*(_DWORD *)(v17 + 104))
                    {
                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v18 = *(NSObject **)(gLogObjects + 248);
                      }
                      else
                      {
                        uint64_t v18 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                      {
                        int v22 = *(unsigned __int8 *)(v17 + 109);
                        int v23 = *(_DWORD *)(v17 + 104);
                        *(_DWORD *)buf = 138544130;
                        uint64_t v34 = a1;
                        __int16 v35 = 2048;
                        *(void *)int v36 = v17;
                        *(_WORD *)&v36[8] = 1024;
                        *(_DWORD *)int v37 = v22;
                        *(_WORD *)&v37[4] = 1024;
                        *(_DWORD *)int v38 = v23;
                        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%{public}@ ignore starting transfer in non-idle state, transfer (%p id=%d state=%d)", buf, 0x22u);
                      }
                    }
                    else
                    {
                      CFDataRef v19 = (const __CFData *)*((void *)a3 + 1);
                      if (v19)
                      {
                        BytePtr = CFDataGetBytePtr(v19);
                        unsigned int Length = CFDataGetLength(*((CFDataRef *)a3 + 1));
                        if (a3[2] == 6)
                        {
                          BytePtr += 6;
                          Length -= 6;
                        }
                        unsigned int v31 = Length;
                        uint64_t v32 = (uint64_t)BytePtr;
                      }
                      else
                      {
                        unsigned int v31 = 0;
                        uint64_t v32 = 0;
                      }
                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v24 = *(NSObject **)(gLogObjects + 248);
                      }
                      else
                      {
                        uint64_t v24 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                      {
                        int v25 = *(unsigned __int8 *)(v17 + 109);
                        int v26 = *(_DWORD *)(v17 + 104);
                        uint64_t v27 = obfuscatedPointer(v32);
                        *(_DWORD *)buf = 138544642;
                        uint64_t v34 = a1;
                        __int16 v35 = 2048;
                        *(void *)int v36 = v17;
                        *(_WORD *)&v36[8] = 1024;
                        *(_DWORD *)int v37 = v25;
                        *(_WORD *)&v37[4] = 1024;
                        *(_DWORD *)int v38 = v26;
                        *(_WORD *)&v38[4] = 2048;
                        uint64_t v39 = v27;
                        __int16 v40 = 1024;
                        unsigned int v41 = v31;
                        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%{public}@ start transfer (%p id=%d state=%d) pBuffer=%p bufferLen=%u", buf, 0x32u);
                      }
                      int v28 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
                      *int v28 = 0;
                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v29 = *(NSObject **)(gLogObjects + 248);
                      }
                      else
                      {
                        uint64_t v29 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }
                      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
                        _handleFileTransferIDSent_cold_3();
                      }
                      if ((iAP2FileTransferStart(v17, v32, v31, v31, a4, (uint64_t)v28, 0, 0) & 1) == 0)
                      {
                        if (gLogObjects && gNumLogObjects >= 32)
                        {
                          uint64_t v30 = *(NSObject **)(gLogObjects + 248);
                        }
                        else
                        {
                          uint64_t v30 = &_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }
                        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                          _handleFileTransferIDSent_cold_1();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t _artworkFileTransferEndHandler(uint64_t result, void *a2)
{
  if (result)
  {
    CFArrayRef v2 = (_DWORD *)result;
    if (!*(void *)result) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v4 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = v2[26];
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Artwork File transfer end callback fired! state: %d", (uint8_t *)v7, 8u);
    }
    uint64_t v6 = *(void *)(*(void *)v2 + 176);
    if (v6)
    {
      uint64_t result = *(void *)(v6 + 16);
      if (result)
      {
        uint64_t result = iap2_feature_getFeature(result, 0xEu);
        if (result) {
          return _handleFileTransferEnd(@"#Artwork", (uint64_t)v2, (unsigned __int8 *)(result + 64), a2);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _handleFileTransferEnd(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  if (!a3 || !*(void *)a2) {
    return v5;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v9 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    int v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(a2 + 104);
    int v11 = *(unsigned __int8 *)(a2 + 109);
    uint64_t v12 = *(void *)(a2 + 32);
    int v13 = a3[1];
    int v14 = *a3;
    int v15 = a3[2];
    *(_DWORD *)buf = 138544898;
    uint64_t v32 = a1;
    __int16 v33 = 1024;
    *(_DWORD *)uint64_t v34 = v10;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = v11;
    *(_WORD *)__int16 v35 = 2048;
    *(void *)&v35[2] = v12;
    __int16 v36 = 1024;
    int v37 = v13;
    __int16 v38 = 1024;
    int v39 = v14;
    __int16 v40 = 1024;
    int v41 = v15;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@ File transfer end callback fired! fileXfer(state=%d bufferID=%u size=%llu) currentTransferInfo(transferID=%u valid=%d type=%d)", buf, 0x34u);
  }
  int v16 = *(_DWORD *)(a2 + 104);
  if ((v16 - 6) < 2) {
    goto LABEL_14;
  }
  if (v16 != 5)
  {
    if (v16 != 4)
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        unint64_t v21 = *(NSObject **)(gLogObjects + 248);
      }
      else
      {
        unint64_t v21 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        _handleFileTransferEnd_cold_1();
      }
      return 0;
    }
LABEL_14:
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v17 = *(void *)(*(void *)a2 + 176);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v5 = iap2_sessionFileTransfer_removeTransferForFeature(v18, 14, a2);
        if ((v5 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            CFDataRef v19 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            CFDataRef v19 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            _handleFileTransferEnd_cold_4();
          }
        }
        int v22 = *(unsigned __int8 *)(a2 + 109);
        if (*(void **)(a2 + 64) == a4)
        {
          if (a4)
          {
            free(a4);
            *(void *)(a2 + 64) = 0;
          }
        }
        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v23 = *(NSObject **)(gLogObjects + 248);
          }
          else
          {
            int v23 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          {
            int v27 = *(_DWORD *)(a2 + 104);
            int v28 = *(unsigned __int8 *)(a2 + 109);
            int v29 = *(unsigned __int16 *)(a2 + 16);
            int v30 = *(unsigned __int16 *)(a2 + 64);
            *(_DWORD *)buf = 138545154;
            uint64_t v32 = a1;
            __int16 v33 = 2080;
            *(void *)uint64_t v34 = "_handleFileTransferEnd";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)__int16 v35 = (unsigned __int16)a2;
            *(_WORD *)&v35[4] = 1024;
            *(_DWORD *)&v35[6] = v27;
            __int16 v36 = 1024;
            int v37 = v28;
            __int16 v38 = 1024;
            int v39 = v29;
            __int16 v40 = 1024;
            int v41 = (unsigned __int16)a4;
            __int16 v42 = 1024;
            int v43 = v30;
            _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "%{public}@ %s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!", buf, 0x3Au);
          }
        }
        iAP2FileTransferRelease(a2);
        if (*a3 && v22 == a3[1])
        {
          uint64_t v24 = (const void *)*((void *)a3 + 1);
          if (v24)
          {
            CFRelease(v24);
            *((void *)a3 + 1) = 0;
          }
          a3[2] = 0;
          *(_WORD *)a3 = 0;
        }
        return v5;
      }
    }
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    __int16 v20 = *(NSObject **)(gLogObjects + 248);
  }
  else
  {
    __int16 v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v5 = 0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)buf = 138543618;
    uint64_t v32 = a1;
    __int16 v33 = 1024;
    *(_DWORD *)uint64_t v34 = v25;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ state: %d, waiting for status from accessory before cleanup", buf, 0x12u);
    return 0;
  }
  return v5;
}

uint64_t _calculateStrParamSize(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CStringFromCFString = createCStringFromCFString(a1, 0x8000100u);
  if (!CStringFromCFString) {
    return 5;
  }
  CFArrayRef v2 = CStringFromCFString;
  uint64_t v3 = strlen(CStringFromCFString) + 5;
  free(v2);
  return v3;
}

uint64_t _playbackQueueFileTransferEndHandler(uint64_t result, void *a2)
{
  if (result)
  {
    CFArrayRef v2 = (_DWORD *)result;
    if (!*(void *)result) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v4 = *(NSObject **)(gLogObjects + 248);
    }
    else
    {
      int v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = v2[26];
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#PlaybackQueueList File transfer end callback fired! state: %d", (uint8_t *)v7, 8u);
    }
    uint64_t v6 = *(void *)(*(void *)v2 + 176);
    if (v6)
    {
      uint64_t result = *(void *)(v6 + 16);
      if (result)
      {
        uint64_t result = iap2_feature_getFeature(result, 0xEu);
        if (result) {
          return _handleFileTransferEnd(@"#PlaybackQueueList", (uint64_t)v2, (unsigned __int8 *)(result + 120), a2);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_13_1(uint64_t a1, uint64_t a2)
{
  return iAP2MsgGetMsgID(a2);
}

void __iAP2FileTransferDataSentCB(uint64_t *a1, uint64_t **a2)
{
  char v4 = *((unsigned char *)a2 + 111);
  LOBYTE(v5) = v4;
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    uint64_t v6 = gLogObjects;
    int v7 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 20;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      int v9 = &_os_log_default;
      unsigned int v5 = *((unsigned __int8 *)a2 + 111);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v24 = 134218240;
        int v25 = (const char *)v6;
        __int16 v26 = 1024;
        int v27 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v24, 0x12u);
        unsigned int v5 = *((unsigned __int8 *)a2 + 111);
      }
    }
    else
    {
      int v9 = *(NSObject **)(gLogObjects + 152);
      unsigned int v5 = *((unsigned __int8 *)a2 + 111);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *((unsigned __int8 *)a2 + 109);
      int v18 = *((_DWORD *)a2 + 26);
      CFDataRef v19 = *a2;
      uint64_t v20 = **a2;
      int v21 = *((unsigned __int16 *)*a2 + 96);
      int v24 = 136317698;
      int v25 = "__iAP2FileTransferDataSentCB";
      __int16 v26 = 1024;
      int v27 = 475;
      __int16 v28 = 2048;
      *(void *)int v29 = a1;
      *(_WORD *)&v29[8] = 2048;
      int v30 = a2;
      __int16 v31 = 1024;
      int v32 = v17;
      __int16 v33 = 1024;
      int v34 = v18;
      __int16 v35 = 1024;
      int v36 = (v5 >> 3) & 1;
      __int16 v37 = 1024;
      int v38 = 0;
      __int16 v39 = 2048;
      __int16 v40 = v19;
      __int16 v41 = 2048;
      uint64_t v42 = v20;
      __int16 v43 = 1024;
      int v44 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s:%d link %p, fileXfer %p->(buffID %u, state %u, bDataSendQueued %d->%d, link %p->(linkBuffer %p, maxOutPacketSize %d))", (uint8_t *)&v24, 0x58u);
      LOBYTE(v5) = *((unsigned char *)a2 + 111);
    }
  }
  *((unsigned char *)a2 + 111) = v5 & 0xF7;
  if (a1 && *a2 == a1)
  {
    unsigned int v11 = *((_DWORD *)a2 + 26);
    if (v11 > 9) {
      goto LABEL_38;
    }
    if (((1 << v11) & 0x32A) != 0) {
      return;
    }
    if (v11 == 2)
    {
      __iAP2FileTransferSendBufferPacket(a2, 0, 0);
      return;
    }
    if (v11 == 4)
    {
      if ((v4 & 8) != 0)
      {
        uint64_t v12 = a2[7];
        if (v12) {
          ((void (*)(uint64_t **, uint64_t *))v12)(a2, a2[8]);
        }
      }
    }
    else
    {
LABEL_38:
      if (_iAP2LogEnableMask)
      {
        int v22 = logObjectForModule_24();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = *((_DWORD *)a2 + 26);
          int v24 = 136315650;
          int v25 = "__iAP2FileTransferDataSentCB";
          __int16 v26 = 1024;
          int v27 = 520;
          __int16 v28 = 1024;
          *(_DWORD *)int v29 = v23;
          int v14 = "ERROR: %s:%d Data send callback with invalid state(%u)!";
          int v15 = v22;
          uint32_t v16 = 24;
          goto LABEL_30;
        }
      }
    }
  }
  else if (_iAP2LogEnableMask)
  {
    if (!gLogObjects || gNumLogObjects < 20)
    {
      int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      int v13 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 136315906;
      int v25 = "__iAP2FileTransferDataSentCB";
      __int16 v26 = 1024;
      int v27 = 527;
      __int16 v28 = 1024;
      *(_DWORD *)int v29 = (unsigned __int16)a1;
      *(_WORD *)&v29[4] = 1024;
      *(_DWORD *)&v29[6] = (unsigned __int16)a2;
      int v14 = "ERROR: %s:%d Data send callback with invalid link(%hx)/context(%hx) combo";
      int v15 = v13;
      uint32_t v16 = 30;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v24, v16);
    }
  }
}

void *logObjectForModule_24()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 20;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 152);
  }
  CFArrayRef v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t __iAP2FileTransferSendBufferPacket(uint64_t a1, int a2, int a3)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v7 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(unsigned __int8 *)(a1 + 108);
    int v11 = *(unsigned __int8 *)(a1 + 109);
    int v12 = *(unsigned __int16 *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 40);
    int v14 = *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)uint64_t v91 = 136317442;
    *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = 154;
    *(_WORD *)&v91[18] = 1024;
    *(_DWORD *)&v91[20] = (unsigned __int16)a1;
    *(_WORD *)&v91[24] = 1024;
    *(_DWORD *)char v92 = v10;
    *(_WORD *)&_DWORD v92[4] = 1024;
    *(_DWORD *)&v92[6] = v11;
    *(_WORD *)&v92[10] = 1024;
    *(_DWORD *)&v92[12] = a2;
    *(_WORD *)&v92[16] = 1024;
    *(_DWORD *)&v92[18] = a3;
    *(_WORD *)&v92[22] = 1024;
    *(_DWORD *)&v92[24] = v12;
    *(_WORD *)&v92[28] = 2048;
    *(void *)&v92[30] = v13;
    *(_WORD *)&v92[38] = 1024;
    *(_DWORD *)&v92[40] = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s:%d fileXfer=%hx session=%d buffID=%d pckType=%d controlOnly=%d pBuffer=%hx buffSize=%lu curPos=%hx", v91, 0x46u);
    if (a3) {
      goto LABEL_11;
    }
  }
  else
  {
LABEL_10:
    if (a3)
    {
LABEL_11:
      v91[0] = *(unsigned char *)(a1 + 109);
      v91[1] = a2;
      return iAP2LinkQueueSendData(*(void *)a1, v91, 2u, *(unsigned __int8 *)(a1 + 108), 0, 0, 0, 0);
    }
  }
  int v15 = *(_DWORD *)(a1 + 104);
  if (v15 != 5)
  {
    if (v15 != 2)
    {
      if (v15 != 1) {
        return 0;
      }
      *(void *)&v92[46] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v92[32] = v16;
      *(_OWORD *)&v92[16] = v16;
      *(_OWORD *)char v92 = v16;
      *(_OWORD *)&unsigned char v91[10] = v16;
      unsigned int v17 = *(unsigned __int8 *)(a1 + 110);
      v91[0] = *(unsigned char *)(a1 + 109);
      v91[1] = 4;
      *(void *)&v91[2] = bswap64(*(void *)(a1 + 32));
      if (v17 < 2)
      {
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            __int16 v37 = *(NSObject **)(gLogObjects + 152);
          }
          else
          {
            __int16 v37 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
            __iAP2FileTransferSendBufferPacket_cold_4();
          }
        }
        unsigned int v19 = 10;
      }
      else
      {
        unsigned int v18 = *(unsigned __int16 *)(a1 + 120);
        if (v18 >= 0x45) {
          __iAP2FileTransferSendBufferPacket_cold_1();
        }
        unsigned int v19 = v18 + 12;
        unsigned int v20 = *(unsigned __int16 *)(a1 + 112);
        *(_WORD *)&unsigned char v91[10] = __rev16(v20);
        switch(v20)
        {
          case 1u:
            __memcpy_chk();
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v51 = *(unsigned __int8 *)(a1 + 108);
            int v52 = *(unsigned __int8 *)(a1 + 110);
            int v53 = *(unsigned __int16 *)(a1 + 112);
            int v54 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 223;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v51;
            __int16 v101 = 1024;
            int v102 = v52;
            __int16 v103 = 1024;
            int v104 = v53;
            __int16 v105 = 1024;
            int v106 = v54;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 callUUID, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
            goto LABEL_111;
          case 4u:
          case 5u:
          case 7u:
            if (v18 >= 9)
            {
              *(void *)&v91[12] = bswap64(*(void *)(a1 + 128));
              __memcpy_chk();
              BOOL v21 = 1;
            }
            else
            {
              BOOL v21 = 0;
            }
            if ((_iAP2LogEnableMask & 4) != 0)
            {
              uint64_t v48 = logObjectForModule_24();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
              {
                int v82 = *(unsigned __int8 *)(a1 + 108);
                int v83 = *(unsigned __int8 *)(a1 + 110);
                int v84 = *(unsigned __int16 *)(a1 + 112);
                int v85 = *(unsigned __int16 *)(a1 + 120);
                *(_DWORD *)buf = 136316674;
                char v94 = "__iAP2FileTransferSendBufferPacket";
                __int16 v95 = 1024;
                int v96 = 212;
                __int16 v97 = 1024;
                unsigned int v98 = v18 + 12;
                __int16 v99 = 1024;
                int v100 = v82;
                __int16 v101 = 1024;
                int v102 = v83;
                __int16 v103 = 1024;
                int v104 = v84;
                __int16 v105 = 1024;
                int v106 = v85;
                _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "%s:%d Send Buffer Setup, V2 pid+libUID, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u", buf, 0x30u);
              }
            }
            if (v18 >= 9) {
              break;
            }
            if (_iAP2LogEnableMask)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                CFDictionaryRef v49 = *(NSObject **)(gLogObjects + 152);
              }
              else
              {
                CFDictionaryRef v49 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                int v64 = *(unsigned __int8 *)(a1 + 108);
                int v65 = *(unsigned __int8 *)(a1 + 110);
                int v66 = *(unsigned __int16 *)(a1 + 112);
                int v67 = *(unsigned __int16 *)(a1 + 120);
                *(_DWORD *)buf = 136316674;
                char v94 = "__iAP2FileTransferSendBufferPacket";
                __int16 v95 = 1024;
                int v96 = 283;
                __int16 v97 = 1024;
                unsigned int v98 = v19;
                __int16 v99 = 1024;
                int v100 = v64;
                __int16 v101 = 1024;
                int v102 = v65;
                __int16 v103 = 1024;
                int v104 = v66;
                __int16 v105 = 1024;
                int v106 = v67;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Send Buffer Setup FAILED, invalid setup data, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u", buf, 0x30u);
              }
            }
            return v21;
          case 8u:
            __memcpy_chk();
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v60 = *(unsigned __int8 *)(a1 + 108);
            int v61 = *(unsigned __int8 *)(a1 + 110);
            int v62 = *(unsigned __int16 *)(a1 + 112);
            int v63 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 234;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v60;
            __int16 v101 = 1024;
            int v102 = v61;
            __int16 v103 = 1024;
            int v104 = v62;
            __int16 v105 = 1024;
            int v106 = v63;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 appIcon, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
            goto LABEL_111;
          default:
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v56 = *(unsigned __int8 *)(a1 + 108);
            int v57 = *(unsigned __int8 *)(a1 + 110);
            int v58 = *(unsigned __int16 *)(a1 + 112);
            int v59 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 243;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v56;
            __int16 v101 = 1024;
            int v102 = v57;
            __int16 v103 = 1024;
            int v104 = v58;
            __int16 v105 = 1024;
            int v106 = v59;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 No typeData, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
LABEL_111:
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, v55, buf, 0x30u);
            break;
        }
      }
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v47 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v47 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          int v68 = *(unsigned __int8 *)(a1 + 108);
          int v69 = *(unsigned __int8 *)(a1 + 110);
          int v70 = *(unsigned __int16 *)(a1 + 112);
          int v71 = *(unsigned __int16 *)(a1 + 120);
          *(_DWORD *)buf = 136316674;
          char v94 = "__iAP2FileTransferSendBufferPacket";
          __int16 v95 = 1024;
          int v96 = 260;
          __int16 v97 = 1024;
          unsigned int v98 = v19;
          __int16 v99 = 1024;
          int v100 = v68;
          __int16 v101 = 1024;
          int v102 = v69;
          __int16 v103 = 1024;
          int v104 = v70;
          __int16 v105 = 1024;
          int v106 = v71;
          _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "%s:%d Send Buffer Setup, QueueSendData payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u", buf, 0x30u);
        }
      }
      *(_DWORD *)(a1 + 104) = 3;
      iAP2LinkEventNotify(*(void *)a1, 1, a1);
      ++*(unsigned char *)(a1 + 296);
      return iAP2LinkQueueSendData(*(void *)a1, v91, v19, *(unsigned __int8 *)(a1 + 108), a1, (uint64_t)__iAP2FileTransferDataSentCB, __iAP2FileTransferContextCleanupCB, 0);
    }
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = v23 - v24;
    unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(*(void *)a1, 0);
    unint64_t v27 = v23 - v24 + 2;
    if (v27 >= MaxPayloadSize) {
      int v28 = MaxPayloadSize;
    }
    else {
      int v28 = v27;
    }
    *(_DWORD *)buf = v28;
    EmptySendPacket = iAP2PacketCreateEmptySendPacket(*(void *)a1, (unsigned int *)buf);
    uint64_t v31 = *((void *)EmptySendPacket + 8);
    int v30 = (unsigned char *)*((void *)EmptySendPacket + 9);
    __int16 v32 = iAP2LinkCurPckHdrSize(*(void *)a1);
    __int16 v33 = iAP2LinkCurPckChksumSize(*(void *)a1);
    *(unsigned char *)(v31 + 4) = 64;
    *(unsigned char *)(v31 + 7) = *(unsigned char *)(a1 + 108);
    unsigned __int16 v34 = v33 + v32 + *(_WORD *)buf;
    *((_WORD *)EmptySendPacket + 27) = v34;
    *((_DWORD *)EmptySendPacket + 11) = v34;
    *int v30 = *(unsigned char *)(a1 + 109);
    v30[1] = a2;
    if (!*(void *)(a1 + 24)) {
      v30[1] = a2 | 0x80;
    }
    if (v27 <= iAP2LinkGetMaxPayloadSize(*(void *)a1, (uint64_t)EmptySendPacket))
    {
      unint64_t v38 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 24) + v25 >= v38 && (v38 || (*(unsigned char *)(a1 + 111) & 2) == 0))
      {
        v30[1] |= 0x40u;
        if (v23 != v24) {
          memcpy(v30 + 2, *(const void **)(a1 + 8), v23 - v24);
        }
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          __int16 v41 = logObjectForModule_24();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            int v86 = *(unsigned __int8 *)(a1 + 108);
            uint64_t v87 = *(void *)(a1 + 24);
            uint64_t v88 = *(void *)(a1 + 32);
            int v89 = *(unsigned __int16 *)(a1 + 56);
            int v90 = *(unsigned __int16 *)(a1 + 64);
            *(_DWORD *)uint64_t v91 = 136317442;
            *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
            *(_WORD *)&v91[12] = 1024;
            *(_DWORD *)&v91[14] = 425;
            *(_WORD *)&v91[18] = 1024;
            *(_DWORD *)&v91[20] = (unsigned __int16)v30;
            *(_WORD *)&v91[24] = 2048;
            *(void *)char v92 = *(unsigned int *)buf;
            *(_WORD *)&v92[8] = 1024;
            *(_DWORD *)&v92[10] = (unsigned __int16)a1;
            *(_WORD *)&v92[14] = 1024;
            *(_DWORD *)&v92[16] = v86;
            *(_WORD *)&v92[20] = 2048;
            *(void *)&v92[22] = v87;
            *(_WORD *)&v92[30] = 2048;
            *(void *)&v92[32] = v88;
            *(_WORD *)&v92[40] = 1024;
            *(_DWORD *)&v92[42] = v89;
            *(_WORD *)&v92[46] = 1024;
            *(_DWORD *)&v92[48] = v90;
            _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%s:%d Send Buffer Data (final), QueueSendData payload=%hx payloadLen=%lu fileXfer=%hx session=%u sentSize=%lu totalSize=%lu (endCB=%hx userInfo=%hx)", v91, 0x4Eu);
          }
        }
        *(_DWORD *)(a1 + 292) = iAP2TimeGetCurTimeMs();
        uint64_t v42 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
        if (v42) {
          v42(a1, 4, *(void *)(a1 + 96));
        }
        ++*(unsigned char *)(a1 + 296);
        if (iAP2LinkQueueSendDataPacket(*(void *)a1, (uint64_t *)EmptySendPacket, *(unsigned __int8 *)(a1 + 108), a1, (uint64_t)__iAP2FileTransferDataSentCB, __iAP2FileTransferContextCleanupCB, 0))
        {
          *(unsigned char *)(a1 + 111) |= 8u;
          uint64_t v43 = *(void *)a1;
          *(void *)(a1 + 8) += v25;
          *(void *)(a1 + 24) += v25;
          *(void *)(a1 + 48) += v25;
          *(_DWORD *)(a1 + 104) = 5;
          uint64_t v8 = 1;
          iAP2LinkEventNotify(v43, 1, a1);
          int v44 = *(void (**)(uint64_t, void))(a1 + 56);
          if (v44) {
            v44(a1, *(void *)(a1 + 64));
          }
          goto LABEL_101;
        }
        if ((_iAP2LogEnableMask & 1) == 0) {
          goto LABEL_100;
        }
        uint64_t v45 = logObjectForModule_24();
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_100;
        }
        *(_DWORD *)uint64_t v91 = 136315650;
        *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 454;
        *(_WORD *)&v91[18] = 1024;
        *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
        CFArrayRef v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPAcket, delete packet=%hx";
        goto LABEL_99;
      }
      memcpy(v30 + 2, *(const void **)(a1 + 8), v23 - v24);
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        __int16 v39 = logObjectForModule_24();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          int v76 = *(unsigned __int8 *)(a1 + 108);
          int v77 = *(unsigned __int8 *)(a1 + 109);
          uint64_t v78 = *(void *)(a1 + 24);
          uint64_t v79 = *(void *)(a1 + 32);
          int v80 = *(unsigned __int16 *)(a1 + 56);
          int v81 = *(unsigned __int16 *)(a1 + 64);
          *(_DWORD *)uint64_t v91 = 136317698;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 382;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)v30;
          *(_WORD *)&v91[24] = 2048;
          *(void *)char v92 = *(unsigned int *)buf;
          *(_WORD *)&v92[8] = 1024;
          *(_DWORD *)&v92[10] = (unsigned __int16)a1;
          *(_WORD *)&v92[14] = 1024;
          *(_DWORD *)&v92[16] = v76;
          *(_WORD *)&v92[20] = 1024;
          *(_DWORD *)&v92[22] = v77;
          *(_WORD *)&v92[26] = 2048;
          *(void *)&v92[28] = v78;
          *(_WORD *)&v92[36] = 2048;
          *(void *)&v92[38] = v79;
          *(_WORD *)&v92[46] = 1024;
          *(_DWORD *)&v92[48] = v80;
          *(_WORD *)&v92[52] = 1024;
          *(_DWORD *)&v92[54] = v81;
          _os_log_debug_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "%s:%d Send Buffer Data (end current buffer), QueueSendData payload=%hx payloadLen=%lu fileXfer=%hx session=%u buffID=%u sentSize=%lu totalSize=%lu (endCB=%hx userInfo=%hx)", v91, 0x54u);
        }
      }
      ++*(unsigned char *)(a1 + 296);
      if (iAP2LinkQueueSendDataPacket(*(void *)a1, (uint64_t *)EmptySendPacket, *(unsigned __int8 *)(a1 + 108), a1, (uint64_t)__iAP2FileTransferDataSentCB, __iAP2FileTransferContextCleanupCB, 0))
      {
        *(unsigned char *)(a1 + 111) |= 8u;
        *(void *)(a1 + 8) += v25;
        *(void *)(a1 + 24) += v25;
        __int16 v40 = *(void (**)(uint64_t, void))(a1 + 56);
        *(void *)(a1 + 48) += v25;
        if (v40) {
          v40(a1, *(void *)(a1 + 64));
        }
        goto LABEL_68;
      }
      if (_iAP2LogEnableMask)
      {
        uint64_t v45 = logObjectForModule_24();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v91 = 136315650;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 406;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
          CFArrayRef v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPAcket, delete packet=%hx";
LABEL_99:
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, v91, 0x18u);
        }
      }
    }
    else
    {
      size_t v35 = (*(_DWORD *)buf - 2);
      memcpy(v30 + 2, *(const void **)(a1 + 8), v35);
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v36 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v36 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          int v72 = *((unsigned __int16 *)EmptySendPacket + 27);
          int v73 = *(unsigned __int8 *)(a1 + 108);
          uint64_t v74 = *(void *)(a1 + 24);
          uint64_t v75 = *(void *)(a1 + 32);
          *(_DWORD *)uint64_t v91 = 136317442;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 338;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)a1;
          *(_WORD *)&v91[24] = 2048;
          *(void *)char v92 = *(unsigned int *)buf;
          *(_WORD *)&v92[8] = 2048;
          *(void *)&v92[10] = v35;
          *(_WORD *)&v92[18] = 1024;
          *(_DWORD *)&v92[20] = (unsigned __int16)EmptySendPacket;
          *(_WORD *)&v92[24] = 1024;
          *(_DWORD *)&v92[26] = v72;
          *(_WORD *)&v92[30] = 1024;
          *(_DWORD *)&v92[32] = v73;
          *(_WORD *)&v92[36] = 2048;
          *(void *)&v92[38] = v74;
          *(_WORD *)&v92[46] = 2048;
          *(void *)&v92[48] = v75;
          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "%s:%d Send Buffer Data Packet, QueueSendDataPacket fileXfer=%hx payloadLen/dataLen=%lu/%lu packet=%hx packet->packetLen=%u session=%u sentSize=%lu totalSize=%lu", v91, 0x52u);
        }
      }
      ++*(unsigned char *)(a1 + 296);
      if (iAP2LinkQueueSendDataPacket(*(void *)a1, (uint64_t *)EmptySendPacket, *(unsigned __int8 *)(a1 + 108), a1, (uint64_t)__iAP2FileTransferDataSentCB, __iAP2FileTransferContextCleanupCB, 0))
      {
        *(unsigned char *)(a1 + 111) |= 8u;
        *(void *)(a1 + 8) += v35;
        *(void *)(a1 + 24) += v35;
        *(void *)(a1 + 48) += v35;
LABEL_68:
        uint64_t v8 = 1;
LABEL_101:
        iAP2PacketRelease((uint64_t *)EmptySendPacket);
        return v8;
      }
      if (_iAP2LogEnableMask)
      {
        uint64_t v45 = logObjectForModule_24();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v91 = 136315650;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 358;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
          CFArrayRef v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPacket, delete packet=%hx";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    EmptySendPacket = 0;
    uint64_t v8 = 0;
    goto LABEL_101;
  }
  *(_DWORD *)(a1 + 104) = 6;
  iAP2LinkEventNotify(*(void *)a1, 1, a1);
  int v22 = *(void (**)(uint64_t, void))(a1 + 56);
  if (v22) {
    v22(a1, *(void *)(a1 + 64));
  }
  iAP2FileTransferCleanup(a1);
  return 1;
}

void __iAP2FileTransferContextCleanupCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v2 = *(unsigned char *)(a2 + 296) - 1;
    *(unsigned char *)(a2 + 296) = v2;
    if (!v2) {
      iAP2FileTransferDelete(a2);
    }
  }
}

uint64_t iAP2FileTransferRelease(uint64_t result)
{
  if (result)
  {
    char v1 = *(unsigned char *)(result + 296) - 1;
    *(unsigned char *)(result + 296) = v1;
    if (!v1)
    {
      iAP2FileTransferDelete(result);
      return 0;
    }
  }
  return result;
}

BOOL iAP2FileTransferAllocateBufferID(uint64_t a1, int a2, unsigned char *a3)
{
  BOOL result = 0;
  if (!a1 || !a3) {
    return result;
  }
  SessionInfo = iAP2LinkGetSessionInfo((unsigned __int8 *)a1, a2);
  if (!SessionInfo || SessionInfo[1] != 1)
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        long long v16 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        long long v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v17) {
        return result;
      }
      int v19 = 136315650;
      unsigned int v20 = "iAP2FileTransferAllocateBufferID";
      __int16 v21 = 1024;
      int v22 = 609;
      __int16 v23 = 1024;
      int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Attempting to allocate buffer ID for non-buffer transfer session (%d)", (uint8_t *)&v19, 0x18u);
    }
    return 0;
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 216);
  LODWORD(v9) = v8 >> 3;
  char v10 = v8 & 7;
  int v11 = -128;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a1 + v9 + 217);
    int v13 = 1 << v10;
    if ((v13 & v12) == 0) {
      break;
    }
    unsigned int v14 = v8 + 1;
    unsigned int v8 = (v8 + 1) & 0x7F;
    uint64_t v9 = (v14 >> 3) & 0xF;
    char v10 = v14 & 7;
    if (__CFADD__(v11++, 1))
    {
      int v12 = *(unsigned __int8 *)(a1 + v9 + 217);
      int v13 = 1 << v10;
      goto LABEL_19;
    }
  }
  uint64_t v9 = v9;
LABEL_19:
  if ((v13 & v12) == 0)
  {
    *(unsigned char *)(a1 + v9 + 217) = v12 | v13;
    *(unsigned char *)(a1 + 216) = (v8 + 1) & 0x7F;
    *a3 = v8 | ((*(_DWORD *)(a1 + 184) != 0) << 7);
    return 1;
  }
  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 20)
  {
    unsigned int v18 = *(NSObject **)(gLogObjects + 152);
  }
  else
  {
    unsigned int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    iAP2FileTransferAllocateBufferID_cold_2(a2, v18);
    return 0;
  }
  return result;
}

void iAP2FileTransferReleaseBufferID(unsigned __int8 *a1, int a2, unsigned int a3)
{
  if (a1)
  {
    SessionInfo = iAP2LinkGetSessionInfo(a1, a2);
    if (SessionInfo && SessionInfo[1] == 1)
    {
      a1[((a3 >> 3) & 0xF) + 217] &= ~(1 << (a3 & 7));
      iAP2LinkEventNotify((uint64_t)a1, 0, a3);
    }
    else if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v7 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        int v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315650;
        uint64_t v9 = "iAP2FileTransferReleaseBufferID";
        __int16 v10 = 1024;
        int v11 = 660;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Attempting to release buffer ID for non-buffer transfer session (%d)", (uint8_t *)&v8, 0x18u);
      }
    }
  }
}

uint64_t iAP2FileTransferCreate(unsigned __int8 *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int SessionForService = iAP2LinkGetSessionForService((uint64_t)a1, 1);
  SessionInfo = iAP2LinkGetSessionInfo(a1, SessionForService);
  if (!a7) {
    iAP2FileTransferCreate_cold_1();
  }
  long long v16 = SessionInfo;
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v17 = gNumLogObjects < 20;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      unsigned int v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
        unsigned int v18 = &_os_log_default;
      }
    }
    else
    {
      unsigned int v18 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v21 = v16[2];
      *(_DWORD *)buf = 136317186;
      __int16 v23 = "iAP2FileTransferCreate";
      __int16 v24 = 1024;
      int v25 = 808;
      __int16 v26 = 1024;
      int v27 = (unsigned __int16)a1;
      __int16 v28 = 1024;
      int v29 = a2;
      __int16 v30 = 1024;
      int v31 = v21;
      __int16 v32 = 1024;
      int v33 = a3;
      __int16 v34 = 1024;
      int v35 = (unsigned __int16)a4;
      __int16 v36 = 1024;
      int v37 = (unsigned __int16)a5;
      __int16 v38 = 1024;
      int v39 = a6;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s:%d link=%hx session=%u version=%d bufferID=%xh callback=%hx userInfo=%hx bRecvAsStream=%d", buf, 0x3Cu);
    }
  }
  *(unsigned char *)(a7 + 110) = v16[2];
  *(_DWORD *)(a7 + 104) = 0;
  *(void *)a7 = a1;
  *(unsigned char *)(a7 + 108) = a2;
  *(unsigned char *)(a7 + 109) = a3;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(void *)(a7 + 72) = a4;
  *(void *)(a7 + 80) = a5;
  if (((a4 != 0) & a6) != 0) {
    char v19 = 2;
  }
  else {
    char v19 = 0;
  }
  *(unsigned char *)(a7 + 111) = *(unsigned char *)(a7 + 111) & 0xF0 | v19;
  *(_WORD *)(a7 + 112) = 0;
  *(_WORD *)(a7 + 120) = 0;
  *(void *)(a7 + 288) = 0;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 96) = 0;
  *(unsigned char *)(a7 + 296) = 1;
  return a7;
}

uint64_t iAP2FileTransferTypeData(uint64_t a1, int a2, unsigned __int16 *a3)
{
  switch(a2)
  {
    case 1:
      if (a3 && *a3 >= 0x20u)
      {
        __int16 v12 = 1;
        goto LABEL_27;
      }
      if (_iAP2LogEnableMask)
      {
        if (!gLogObjects || gNumLogObjects < 20)
        {
          __int16 v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          __int16 v30 = *(NSObject **)(gLogObjects + 152);
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(unsigned __int8 *)(a1 + 109);
          if (a3) {
            int v32 = *a3;
          }
          else {
            int v32 = -1;
          }
          int v37 = 136316162;
          __int16 v38 = "iAP2FileTransferTypeData";
          __int16 v39 = 1024;
          int v40 = 880;
          __int16 v41 = 1024;
          int v42 = v31;
          __int16 v43 = 1024;
          int v44 = 1;
          __int16 v45 = 1024;
          int v46 = v32;
          int v27 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
          goto LABEL_75;
        }
      }
      return a1;
    case 2:
    case 3:
    case 6:
      goto LABEL_6;
    case 4:
    case 5:
    case 7:
      if (a3)
      {
        unsigned int v6 = *a3;
        if (v6 >= 9)
        {
          *(_WORD *)(a1 + 112) = a2;
          *(_WORD *)(a1 + 120) = v6;
          *(void *)(a1 + 128) = *((void *)a3 + 1);
          long long v7 = *((_OWORD *)a3 + 1);
          long long v8 = *((_OWORD *)a3 + 2);
          long long v9 = *((_OWORD *)a3 + 3);
          *(_OWORD *)(a1 + 180) = *(_OWORD *)(a3 + 30);
          *(_OWORD *)(a1 + 168) = v9;
          *(_OWORD *)(a1 + 152) = v8;
          *(_OWORD *)(a1 + 136) = v7;
          return a1;
        }
      }
      if ((_iAP2LogEnableMask & 1) == 0) {
        return a1;
      }
      if (!gLogObjects || gNumLogObjects < 20)
      {
        __int16 v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        __int16 v10 = *(NSObject **)(gLogObjects + 152);
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        return a1;
      }
      int v23 = *(unsigned __int8 *)(a1 + 109);
      if (a3) {
        int v24 = *a3;
      }
      else {
        int v24 = -1;
      }
      int v37 = 136316162;
      __int16 v38 = "iAP2FileTransferTypeData";
      __int16 v39 = 1024;
      int v40 = 924;
      __int16 v41 = 1024;
      int v42 = v23;
      __int16 v43 = 1024;
      int v44 = a2;
      __int16 v45 = 1024;
      int v46 = v24;
      int v27 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
      goto LABEL_70;
    case 8:
      if (a3 && *a3 >= 2u)
      {
        __int16 v12 = 8;
LABEL_27:
        *(_WORD *)(a1 + 112) = v12;
        long long v13 = *(_OWORD *)a3;
        long long v14 = *((_OWORD *)a3 + 1);
        *(_OWORD *)(a1 + 152) = *((_OWORD *)a3 + 2);
        *(_OWORD *)(a1 + 136) = v14;
        *(_OWORD *)(a1 + 120) = v13;
        long long v15 = *((_OWORD *)a3 + 3);
        long long v16 = *((_OWORD *)a3 + 4);
        long long v17 = *((_OWORD *)a3 + 5);
        *(_OWORD *)(a1 + 216) = *((_OWORD *)a3 + 6);
        *(_OWORD *)(a1 + 200) = v17;
        *(_OWORD *)(a1 + 184) = v16;
        *(_OWORD *)(a1 + 168) = v15;
        long long v18 = *((_OWORD *)a3 + 7);
        long long v19 = *((_OWORD *)a3 + 8);
        long long v20 = *((_OWORD *)a3 + 9);
        *(void *)(a1 + 280) = *((void *)a3 + 20);
        *(_OWORD *)(a1 + 264) = v20;
        *(_OWORD *)(a1 + 248) = v19;
        *(_OWORD *)(a1 + 232) = v18;
        return a1;
      }
      if ((_iAP2LogEnableMask & 1) == 0) {
        return a1;
      }
      if (!gLogObjects || gNumLogObjects < 20)
      {
        __int16 v30 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        __int16 v30 = *(NSObject **)(gLogObjects + 152);
      }
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        return a1;
      }
      int v33 = *(unsigned __int8 *)(a1 + 109);
      if (a3) {
        int v34 = *a3;
      }
      else {
        int v34 = -1;
      }
      int v37 = 136316162;
      __int16 v38 = "iAP2FileTransferTypeData";
      __int16 v39 = 1024;
      int v40 = 900;
      __int16 v41 = 1024;
      int v42 = v33;
      __int16 v43 = 1024;
      int v44 = 8;
      __int16 v45 = 1024;
      int v46 = v34;
      int v27 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
LABEL_75:
      int v35 = v30;
      goto LABEL_76;
    default:
      if ((a2 - 65534) >= 2)
      {
        if ((_iAP2LogEnableMask & 1) == 0) {
          return a1;
        }
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v10 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          return a1;
        }
        int v28 = *(unsigned __int8 *)(a1 + 109);
        if (a3) {
          int v29 = *a3;
        }
        else {
          int v29 = -1;
        }
        int v37 = 136316162;
        __int16 v38 = "iAP2FileTransferTypeData";
        __int16 v39 = 1024;
        int v40 = 958;
        __int16 v41 = 1024;
        int v42 = v28;
        __int16 v43 = 1024;
        int v44 = a2;
        __int16 v45 = 1024;
        int v46 = v29;
        int v27 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d ERROR: Invalid type!";
        goto LABEL_70;
      }
LABEL_6:
      if (!a3 || !*a3)
      {
        *(_WORD *)(a1 + 112) = a2;
        *(_WORD *)(a1 + 120) = 0;
        return a1;
      }
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v10 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *(unsigned __int8 *)(a1 + 109);
          int v26 = *a3;
          int v37 = 136316162;
          __int16 v38 = "iAP2FileTransferTypeData";
          __int16 v39 = 1024;
          int v40 = 948;
          __int16 v41 = 1024;
          int v42 = v25;
          __int16 v43 = 1024;
          int v44 = a2;
          __int16 v45 = 1024;
          int v46 = v26;
          int v27 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Type does not require typeData!";
LABEL_70:
          int v35 = v10;
LABEL_76:
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v37, 0x24u);
        }
      }
      return a1;
  }
}

void iAP2FileTransferDelete(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferDelete_cold_1();
  }
  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }
  char v4 = *(unsigned __int8 **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 108);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 109);
  iAP2FileTransferCleanup(a1);
  iAP2FileTransferReleaseBufferID(v4, v5, v6);
  *(unsigned char *)(a1 + 109) = ~(_BYTE)v6 & 0x80;
}

void iAP2FileTransferCleanup(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      iAP2FileTransferCleanup_cold_1();
    }
  }
  *(_DWORD *)(a1 + 104) = 0;
  char v4 = *(void ***)(a1 + 16);
  if (v4 && (*(unsigned char *)(a1 + 111) & 5) != 0) {
    iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256), v4);
  }
  int v5 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 111) &= ~4u;
  *(unsigned char *)(a1 + 110) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)(a1 + 288) = 0;
  if (v5)
  {
    v5(a1, 1, *(void *)(a1 + 96));
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t iAP2FileTransferStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  if ((_iAP2LogEnableMask & 2) == 0) {
    goto LABEL_11;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    long long v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    long long v16 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = *(_DWORD *)(a1 + 104);
    int v18 = *(unsigned __int8 *)(a1 + 108);
    *(_DWORD *)buf = 136317954;
    int v33 = "iAP2FileTransferStart";
    __int16 v34 = 1024;
    int v35 = 1110;
    __int16 v36 = 1024;
    int v37 = (unsigned __int16)a1;
    __int16 v38 = 1024;
    int v39 = v17;
    __int16 v40 = 1024;
    int v41 = v18;
    __int16 v42 = 1024;
    int v43 = (unsigned __int16)a2;
    __int16 v44 = 2048;
    *(void *)__int16 v45 = a3;
    *(_WORD *)&v45[8] = 2048;
    uint64_t v46 = a4;
    *(_WORD *)__int16 v47 = 1024;
    *(_DWORD *)&v47[2] = (unsigned __int16)a5;
    *(_WORD *)uint64_t v48 = 1024;
    *(_DWORD *)&v48[2] = (unsigned __int16)a6;
    __int16 v49 = 1024;
    int v50 = a7;
    __int16 v51 = 1024;
    int v52 = a8;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx state=%d session=%u buff=%hx buffLen=%lu totalLen=%lu callback=%hx userInfo=%hx bSendAsStream=%d bDeleteBuffOnFinish=%d", buf, 0x56u);
  }
  else
  {
LABEL_11:
    if (!a1) {
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 104)) {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 110) > 1u) {
    unsigned int v20 = 10;
  }
  else {
    unsigned int v20 = *(unsigned __int16 *)(a1 + 120) + 12;
  }
  if (v20 > iAP2LinkGetMaxPayloadSize(*(void *)a1, 0)) {
    iAP2FileTransferStart_cold_1();
  }
  *(_DWORD *)(a1 + 104) = 1;
  iAP2LinkEventNotify(*(void *)a1, 1, a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a5;
  *(void *)(a1 + 64) = a6;
  if (((a5 != 0) & a7) != 0) {
    char v21 = 2;
  }
  else {
    char v21 = 0;
  }
  *(unsigned char *)(a1 + 111) = v21 | a8 | *(unsigned char *)(a1 + 111) & 0xF8;
  *(_DWORD *)(a1 + 288) = iAP2TimeGetCurTimeMs();
  int v22 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
  if (v22) {
    v22(a1, 2, *(void *)(a1 + 96));
  }
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v23 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      int v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(unsigned __int8 *)(a1 + 109);
      int v25 = *(unsigned __int16 *)(a1 + 16);
      int v26 = *(unsigned __int16 *)(a1 + 40);
      int v27 = *(unsigned __int16 *)(a1 + 32);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 111);
      int v29 = *(unsigned __int16 *)(a1 + 112);
      int v30 = *(unsigned __int16 *)(a1 + 120);
      *(_DWORD *)buf = 136317698;
      int v33 = "iAP2FileTransferStart";
      __int16 v34 = 1024;
      int v35 = 1149;
      __int16 v36 = 1024;
      int v37 = (unsigned __int16)a1;
      __int16 v38 = 1024;
      int v39 = v24;
      __int16 v40 = 1024;
      int v41 = v25;
      __int16 v42 = 1024;
      int v43 = v26;
      __int16 v44 = 1024;
      *(_DWORD *)__int16 v45 = v27;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&unsigned char v45[6] = (v28 >> 1) & 1;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v28 & 1;
      HIWORD(v46) = 1024;
      *(_DWORD *)__int16 v47 = v29;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)uint64_t v48 = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%s:%d fileXfer=%hx buffID=0x%X Start, send Setup, buff=%hx len=%u totalSize=%u bStream=%d bDeleteBuffOnFinish=%d type=%d typeData.len=%u", buf, 0x48u);
    }
  }
  return __iAP2FileTransferSendBufferPacket(a1, 4, 0);
}

uint64_t iAP2FileTransferHandleRecv(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a1)
  {
    if (a2)
    {
      size_t v6 = a3 - 2;
      if (a3 >= 2)
      {
        char v8 = *(unsigned char *)(a2 + 1);
        switch(v8 & 0xF)
        {
          case 0:
            if (*(char *)(a1 + 109) < 0) {
              return 0;
            }
            *(_DWORD *)(a1 + 288) = 0;
            long long v9 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
            if (v9) {
              v9(a1, 3, *(void *)(a1 + 96));
            }
            if (v8 < 0)
            {
              if ((_iAP2LogEnableMask & 2) != 0)
              {
                int v56 = logObjectForModule_24();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                {
                  int v57 = *(unsigned __int8 *)(a1 + 109);
                  int v58 = (*(unsigned __int8 *)(a1 + 111) >> 1) & 1;
                  uint64_t v59 = *(void *)(a1 + 32);
                  int v109 = 136316418;
                  uint64_t v110 = "iAP2FileTransferHandleRecv";
                  __int16 v111 = 1024;
                  int v112 = 1307;
                  __int16 v113 = 1024;
                  int v114 = (unsigned __int16)a1;
                  __int16 v115 = 1024;
                  int v116 = v57;
                  __int16 v117 = 1024;
                  *(_DWORD *)CFIndex v118 = v58;
                  *(_WORD *)&v118[4] = 2048;
                  *(void *)&v118[6] = v59;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X First packet, bStream=%d totalSize=%lu", (uint8_t *)&v109, 0x2Eu);
                }
              }
              *(void *)(a1 + 24) = 0;
              int v60 = *(void ***)(a1 + 16);
              if (v60)
              {
                iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256), v60);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 48) = 0;
              }
              if (*(void *)(a1 + 32) - 1 < v6 || (*(unsigned char *)(a1 + 111) & 2) == 0) {
                size_t v62 = *(void *)(a1 + 32);
              }
              else {
                size_t v62 = v6;
              }
              *(void *)(a1 + 40) = v62;
              int v11 = iAP2BuffPoolGet(*(unsigned __int8 **)(*(void *)a1 + 256), v62);
              *(void *)(a1 + 16) = v11;
              goto LABEL_107;
            }
            if ((*(unsigned char *)(a1 + 111) & 2) != 0 && *(void *)(a1 + 32) - 1 >= v6)
            {
              __int16 v10 = *(void ***)(a1 + 16);
              if (v10)
              {
                iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256), v10);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 48) = 0;
              }
              int v11 = iAP2BuffPoolGet(*(unsigned __int8 **)(*(void *)a1 + 256), v6);
              *(void *)(a1 + 16) = v11;
              *(void *)(a1 + 40) = v6;
LABEL_107:
              *(void *)(a1 + 8) = v11;
            }
            uint64_t v63 = *(void *)(a1 + 32);
            if (v63)
            {
              uint64_t v64 = *(void *)(a1 + 24);
              if (v63 - v64 < v6)
              {
                if (_iAP2LogEnableMask)
                {
                  int v65 = logObjectForModule_24();
                  BOOL v66 = os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
                  uint64_t v64 = *(void *)(a1 + 24);
                  uint64_t v63 = *(void *)(a1 + 32);
                  if (v66)
                  {
                    int v67 = *(unsigned __int8 *)(a1 + 109);
                    int v109 = 136316418;
                    uint64_t v110 = "iAP2FileTransferHandleRecv";
                    __int16 v111 = 1024;
                    int v112 = 1360;
                    __int16 v113 = 1024;
                    int v114 = (unsigned __int16)a1;
                    __int16 v115 = 1024;
                    int v116 = v67;
                    __int16 v117 = 2048;
                    *(void *)CFIndex v118 = v63;
                    *(_WORD *)&v118[8] = 2048;
                    *(void *)&v118[10] = v64 + a3 - 2;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Got too much data for fileXfer=%hx, buffID=0x%X expected %lu bytes, got %lu", (uint8_t *)&v109, 0x32u);
                    uint64_t v64 = *(void *)(a1 + 24);
                    uint64_t v63 = *(void *)(a1 + 32);
                  }
                }
                size_t v6 = v63 - v64;
              }
            }
            if (v6 && *(void *)(a1 + 40) - *(void *)(a1 + 48) >= v6)
            {
              memcpy(*(void **)(a1 + 8), (const void *)(a2 + 2), v6);
              *(void *)(a1 + 8) += v6;
              *(void *)(a1 + 24) += v6;
              *(void *)(a1 + 48) += v6;
            }
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              int v68 = logObjectForModule_24();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                int v69 = *(unsigned __int8 *)(a1 + 109);
                uint64_t v70 = *(void *)(a1 + 24);
                uint64_t v71 = *(void *)(a1 + 32);
                int v109 = 136316418;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1380;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v69;
                __int16 v117 = 2048;
                *(void *)CFIndex v118 = v70;
                *(_WORD *)&v118[8] = 2048;
                *(void *)&v118[10] = v71;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X Recv'd bytes %lu/%lu", (uint8_t *)&v109, 0x32u);
              }
            }
            if ((v8 & 0x40) == 0)
            {
              if ((*(unsigned char *)(a1 + 111) & 2) == 0) {
                return 0;
              }
              int v72 = *(unsigned int (**)(uint64_t, void))(a1 + 72);
              if (!v72 || !v72(a1, *(void *)(a1 + 80))) {
                return 0;
              }
              iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256), *(void ***)(a1 + 16));
              uint64_t v3 = 0;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              goto LABEL_133;
            }
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              int v73 = logObjectForModule_24();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
              {
                int v74 = *(unsigned __int8 *)(a1 + 109);
                int v75 = *(unsigned __int16 *)(a1 + 72);
                int v76 = *(unsigned __int16 *)(a1 + 80);
                int v77 = *(unsigned __int16 *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 40);
                int v109 = 136316930;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1389;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v74;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v75;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v76;
                *(_WORD *)&v118[10] = 1024;
                *(_DWORD *)&v118[12] = v77;
                *(_WORD *)&v118[16] = 2048;
                *(void *)&v118[18] = v78;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X Last packet (gotCB=%hx userInfo=%hx) pBuffer=%hx buffSize=%lu", (uint8_t *)&v109, 0x3Au);
              }
            }
            *(_DWORD *)(a1 + 104) = 11;
            iAP2LinkEventNotify(*(void *)a1, 1, a1);
            uint64_t v79 = *(unsigned int (**)(uint64_t, void))(a1 + 72);
            if (v79)
            {
              if (v79(a1, *(void *)(a1 + 80)))
              {
                int v80 = *(void ***)(a1 + 16);
                if (v80) {
                  iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256), v80);
                }
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                uint64_t v3 = 1;
LABEL_133:
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 48) = 0;
                return v3;
              }
            }
            else
            {
              iAP2FileTransferSuccess(a1);
            }
            uint64_t v3 = 1;
            break;
          case 1:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                int v23 = *(NSObject **)(gLogObjects + 152);
              }
              else
              {
                int v23 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                int v50 = *(unsigned __int8 *)(a1 + 109);
                int v51 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1588;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v50;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v51;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X Control Start curState=%d", (uint8_t *)&v109, 0x24u);
              }
            }
            *(_DWORD *)(a1 + 288) = 0;
            int v52 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
            if (v52) {
              v52(a1, 3, *(void *)(a1 + 96));
            }
            int v53 = *(_DWORD *)(a1 + 104);
            if (v53 == 1 || v53 == 3)
            {
              *(_DWORD *)(a1 + 104) = 2;
              iAP2LinkEventNotify(*(void *)a1, 1, a1);
              uint64_t v3 = 0;
              if ((__iAP2FileTransferSendBufferPacket(a1, 0, 0) & 1) == 0)
              {
                *(_DWORD *)(a1 + 104) = 7;
                uint64_t v3 = 1;
                iAP2LinkEventNotify(*(void *)a1, 1, a1);
              }
            }
            else
            {
              if (v53 == 9)
              {
                int v40 = 8;
                goto LABEL_89;
              }
              if ((_iAP2LogEnableMask & 1) == 0) {
                return 0;
              }
              int v41 = logObjectForModule_24();
              uint64_t v3 = 0;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                int v54 = *(unsigned __int8 *)(a1 + 109);
                int v55 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1616;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v54;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v55;
                __int16 v44 = "ERROR: %s:%d Wrong state for Start! fileXfer=%hx buffID=0x%X state=%d";
                goto LABEL_143;
              }
            }
            return v3;
          case 2:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                __int16 v12 = *(NSObject **)(gLogObjects + 152);
              }
              else
              {
                __int16 v12 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
              {
                int v27 = *(unsigned __int8 *)(a1 + 109);
                int v28 = *(_DWORD *)(a1 + 104);
                int v29 = *(unsigned __int16 *)(a1 + 56);
                int v30 = *(unsigned __int16 *)(a1 + 64);
                int v31 = *(unsigned __int16 *)(a1 + 16);
                uint64_t v32 = *(void *)(a1 + 40);
                int v109 = 136317186;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1655;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v27;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v28;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v29;
                *(_WORD *)&v118[10] = 1024;
                *(_DWORD *)&v118[12] = v30;
                *(_WORD *)&v118[16] = 1024;
                *(_DWORD *)&v118[18] = v31;
                *(_WORD *)&v118[22] = 2048;
                *(void *)&v118[24] = v32;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X Control Cancel curState=%d (endCB=%hx userInfo=%hx) pBuffer=%hx buffSize=%lu", (uint8_t *)&v109, 0x40u);
              }
            }
            int v33 = *(_DWORD *)(a1 + 104);
            if ((v33 - 8) < 2)
            {
              *(void *)(a1 + 288) = 0;
              __int16 v36 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v36) {
                v36(a1, 5, *(void *)(a1 + 96));
              }
              int v25 = 10;
              goto LABEL_62;
            }
            if ((v33 - 2) > 1)
            {
              if ((_iAP2LogEnableMask & 1) == 0) {
                return 0;
              }
              int v41 = logObjectForModule_24();
              uint64_t v3 = 0;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                int v81 = *(unsigned __int8 *)(a1 + 109);
                int v82 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1694;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v81;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v82;
                __int16 v44 = "ERROR: %s:%d Wrong state for Cancel! fileXfer=%hx buffID=0x%X state=%d";
                goto LABEL_143;
              }
            }
            else
            {
              *(void *)(a1 + 288) = 0;
              __int16 v34 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v34) {
                v34(a1, 5, *(void *)(a1 + 96));
              }
              uint64_t v3 = 1;
              __iAP2FileTransferSendBufferPacket(a1, 2, 1);
              *(_DWORD *)(a1 + 104) = 4;
              iAP2LinkEventNotify(*(void *)a1, 1, a1);
              int v35 = *(void (**)(uint64_t, void))(a1 + 56);
              if (v35 && (*(unsigned char *)(a1 + 111) & 8) == 0) {
                goto LABEL_63;
              }
            }
            return v3;
          case 3:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                long long v13 = *(NSObject **)(gLogObjects + 152);
              }
              else
              {
                long long v13 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                int v37 = *(unsigned __int8 *)(a1 + 109);
                int v38 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1625;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v37;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v38;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx buffID=0x%X Control Pause curState=%d", (uint8_t *)&v109, 0x24u);
              }
            }
            int v39 = *(_DWORD *)(a1 + 104);
            if (v39 == 2)
            {
              *(_DWORD *)(a1 + 104) = 3;
              iAP2LinkEventNotify(*(void *)a1, 1, a1);
              __iAP2FileTransferSendBufferPacket(a1, 3, 1);
              return 0;
            }
            if (v39 == 8)
            {
              int v40 = 9;
LABEL_89:
              *(_DWORD *)(a1 + 104) = v40;
              iAP2LinkEventNotify(*(void *)a1, 1, a1);
              return 0;
            }
            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0;
            }
            int v41 = logObjectForModule_24();
            uint64_t v3 = 0;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v42 = *(unsigned __int8 *)(a1 + 109);
              int v43 = *(_DWORD *)(a1 + 104);
              int v109 = 136316162;
              uint64_t v110 = "iAP2FileTransferHandleRecv";
              __int16 v111 = 1024;
              int v112 = 1644;
              __int16 v113 = 1024;
              int v114 = (unsigned __int16)a1;
              __int16 v115 = 1024;
              int v116 = v42;
              __int16 v117 = 1024;
              *(_DWORD *)CFIndex v118 = v43;
              __int16 v44 = "ERROR: %s:%d Wrong state for Pause! fileXfer=%hx buffID=0x%X state=%d";
              goto LABEL_143;
            }
            return v3;
          case 4:
            uint64_t v3 = 0;
            if (a3 < 0xA || *(char *)(a1 + 109) < 0) {
              return v3;
            }
            int SessionForService = iAP2LinkGetSessionForService(*(void *)a1, 1);
            SessionInfo = iAP2LinkGetSessionInfo(*(unsigned __int8 **)a1, SessionForService);
            *(unsigned char *)(a1 + 111) |= 4u;
            iAP2FileTransferCleanup(a1);
            unsigned int v16 = SessionInfo[2];
            unsigned int v17 = *(_DWORD *)(a2 + 6);
            *(unsigned char *)(a1 + 110) = v16;
            *(void *)(a1 + 32) = bswap32(v17);
            if (v16 < 2) {
              goto LABEL_159;
            }
            unsigned int v18 = __rev16(*(unsigned __int16 *)(a2 + 10));
            *(_WORD *)(a1 + 112) = v18;
            switch(v18)
            {
              case 1u:
                uint64_t v87 = 0;
                *(_WORD *)(a1 + 120) = 0;
                uint64_t v88 = a2 + 12;
                do
                {
                  uint64_t v89 = a1 + v87;
                  *(unsigned char *)(a1 + v87 + 128) = *(unsigned char *)(v88 + v87);
                  uint64_t v90 = v87 + 1;
                  *(_WORD *)(a1 + 120) = v87 + 1;
                  if (!*(unsigned char *)(v88 + v87)) {
                    goto LABEL_157;
                  }
                  ++v87;
                }
                while (v90 != 68);
                goto LABEL_156;
              case 2u:
              case 3u:
              case 6u:
                goto LABEL_148;
              case 4u:
              case 5u:
              case 7u:
                uint64_t v19 = 0;
                int v20 = 8;
                *(_WORD *)(a1 + 120) = 8;
                *(void *)(a1 + 128) = bswap64(*(void *)(a2 + 12));
                uint64_t v21 = a2 + 20;
                do
                {
                  *(unsigned char *)(a1 + 136 + v19) = *(unsigned char *)(v21 + v19);
                  *(_WORD *)(a1 + 120) = ++v20;
                  if (!*(unsigned char *)(v21 + v19)) {
                    break;
                  }
                  ++v19;
                }
                while (v19 != 60);
                goto LABEL_159;
              case 8u:
                uint64_t v91 = 0;
                *(_WORD *)(a1 + 120) = 0;
                uint64_t v92 = a2 + 12;
                break;
              default:
                if (v18 - 65534 >= 2)
                {
                  if (_iAP2LogEnableMask)
                  {
                    __int16 v103 = logObjectForModule_24();
                    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                    {
                      int v104 = SessionInfo[2];
                      int v105 = *(unsigned __int8 *)(a1 + 109);
                      uint64_t v106 = *(void *)(a1 + 32);
                      int v107 = *(unsigned __int16 *)(a1 + 112);
                      int v108 = *(unsigned __int16 *)(a1 + 120);
                      int v109 = 136316674;
                      uint64_t v110 = "iAP2FileTransferHandleRecv";
                      __int16 v111 = 1024;
                      int v112 = 1559;
                      __int16 v113 = 1024;
                      int v114 = v104;
                      __int16 v115 = 1024;
                      int v116 = v105;
                      __int16 v117 = 2048;
                      *(void *)CFIndex v118 = v106;
                      *(_WORD *)&v118[8] = 1024;
                      *(_DWORD *)&v118[10] = v107;
                      *(_WORD *)&v118[14] = 1024;
                      *(_DWORD *)&v118[16] = v108;
                      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d fileXfer ver=%u buffID=0x%X Setup size=%lu type=%d typeData.len=%u, ERROR: Invalid type!", (uint8_t *)&v109, 0x34u);
                    }
                  }
                }
                else
                {
LABEL_148:
                  *(_WORD *)(a1 + 120) = 0;
                }
                goto LABEL_159;
            }
            while (1)
            {
              uint64_t v89 = a1 + v91;
              *(unsigned char *)(a1 + v91 + 128) = *(unsigned char *)(v92 + v91);
              uint64_t v93 = v91 + 1;
              *(_WORD *)(a1 + 120) = v91 + 1;
              if (!*(unsigned char *)(v92 + v91)) {
                break;
              }
              ++v91;
              if (v93 == 68)
              {
LABEL_156:
                char v94 = *(unsigned char *)(a2 + 80);
LABEL_158:
                *(unsigned char *)(v89 + 129) = v94;
LABEL_159:
                if ((_iAP2LogEnableMask & 2) != 0)
                {
                  __int16 v95 = logObjectForModule_24();
                  if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                  {
                    int v96 = SessionInfo[2];
                    int v97 = *(unsigned __int8 *)(a1 + 109);
                    uint64_t v98 = *(void *)(a1 + 32);
                    int v99 = *(unsigned __int16 *)(a1 + 112);
                    int v100 = *(unsigned __int16 *)(a1 + 120);
                    int v109 = 136316930;
                    uint64_t v110 = "iAP2FileTransferHandleRecv";
                    __int16 v111 = 1024;
                    int v112 = 1567;
                    __int16 v113 = 1024;
                    int v114 = (unsigned __int16)a1;
                    __int16 v115 = 1024;
                    int v116 = v96;
                    __int16 v117 = 1024;
                    *(_DWORD *)CFIndex v118 = v97;
                    *(_WORD *)&v118[4] = 2048;
                    *(void *)&v118[6] = v98;
                    *(_WORD *)&v118[14] = 1024;
                    *(_DWORD *)&v118[16] = v99;
                    *(_WORD *)&v118[20] = 1024;
                    *(_DWORD *)&v118[22] = v100;
                    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "%s:%d fileXfer=%hx ver=%u buffID=0x%X Setup size=%lu type=%u typeData.len=%u, send Resume", (uint8_t *)&v109, 0x3Au);
                  }
                }
                *(_DWORD *)(a1 + 104) = 9;
                iAP2LinkEventNotify(*(void *)a1, 1, a1);
                *(_DWORD *)(a1 + 288) = iAP2TimeGetCurTimeMs();
                __int16 v101 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
                if (v101) {
                  v101(a1, 2, *(void *)(a1 + 96));
                }
                iAP2FileTransferResume(a1);
                return 0;
              }
            }
LABEL_157:
            char v94 = 0;
            goto LABEL_158;
          case 5:
            if ((*(char *)(a1 + 109) & 0x80000000) == 0) {
              return 0;
            }
            if (*(_DWORD *)(a1 + 104) == 5)
            {
              *(void *)(a1 + 288) = 0;
              int v24 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v24) {
                v24(a1, 5, *(void *)(a1 + 96));
              }
              int v25 = 6;
              goto LABEL_62;
            }
            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0;
            }
            int v41 = logObjectForModule_24();
            uint64_t v3 = 0;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v83 = *(unsigned __int8 *)(a1 + 109);
              int v84 = *(_DWORD *)(a1 + 104);
              int v109 = 136316162;
              uint64_t v110 = "iAP2FileTransferHandleRecv";
              __int16 v111 = 1024;
              int v112 = 1729;
              __int16 v113 = 1024;
              int v114 = (unsigned __int16)a1;
              __int16 v115 = 1024;
              int v116 = v83;
              __int16 v117 = 1024;
              *(_DWORD *)CFIndex v118 = v84;
              __int16 v44 = "ERROR: %s:%d Wrong state for Success! fileXfer=%hx buffID=0x%X state=%d";
              goto LABEL_143;
            }
            return v3;
          case 6:
            if ((*(char *)(a1 + 109) & 0x80000000) == 0) {
              return 0;
            }
            if (*(_DWORD *)(a1 + 104) == 5)
            {
              *(void *)(a1 + 288) = 0;
              int v26 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v26) {
                v26(a1, 5, *(void *)(a1 + 96));
              }
              int v25 = 7;
LABEL_62:
              *(_DWORD *)(a1 + 104) = v25;
              uint64_t v3 = 1;
              iAP2LinkEventNotify(*(void *)a1, 1, a1);
              int v35 = *(void (**)(uint64_t, void))(a1 + 56);
              if (v35) {
LABEL_63:
              }
                v35(a1, *(void *)(a1 + 64));
            }
            else
            {
              if (_iAP2LogEnableMask)
              {
                int v41 = logObjectForModule_24();
                uint64_t v3 = 0;
                if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
                  return v3;
                }
                int v85 = *(unsigned __int8 *)(a1 + 109);
                int v86 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1764;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v85;
                __int16 v117 = 1024;
                *(_DWORD *)CFIndex v118 = v86;
                __int16 v44 = "ERROR: %s:%d Wrong state for Failure! fileXfer=%hx buffID=0x%X state=%d";
LABEL_143:
                uint64_t v48 = v41;
                uint32_t v49 = 36;
LABEL_144:
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v109, v49);
              }
              return 0;
            }
            return v3;
          default:
            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0;
            }
            if (gLogObjects && gNumLogObjects >= 20)
            {
              int v22 = *(NSObject **)(gLogObjects + 152);
            }
            else
            {
              int v22 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            uint64_t v3 = 0;
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return v3;
            }
            int v45 = *(unsigned __int8 *)(a1 + 109);
            int v46 = *(unsigned __int16 *)(a1 + 16);
            uint64_t v47 = *(void *)(a1 + 40);
            int v109 = 136316930;
            uint64_t v110 = "iAP2FileTransferHandleRecv";
            __int16 v111 = 1024;
            int v112 = 1772;
            __int16 v113 = 1024;
            int v114 = (unsigned __int16)a1;
            __int16 v115 = 1024;
            int v116 = v45;
            __int16 v117 = 1024;
            *(_DWORD *)CFIndex v118 = v8 & 0xF;
            *(_WORD *)&v118[4] = 1024;
            *(_DWORD *)&v118[6] = *(_DWORD *)v118;
            *(_WORD *)&v118[10] = 1024;
            *(_DWORD *)&v118[12] = v46;
            *(_WORD *)&v118[16] = 2048;
            *(void *)&v118[18] = v47;
            __int16 v44 = "ERROR: %s:%d fileXfer=%hx buffID=0x%X Invalid packet type! %u(0x%x) pBuffer=%hx buffSize=%lu";
            uint64_t v48 = v22;
            uint32_t v49 = 58;
            goto LABEL_144;
        }
      }
    }
  }
  return v3;
}

void iAP2FileTransferSuccess(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferSuccess_cold_3();
  }
  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }
  if (*(_DWORD *)(a1 + 104) == 11)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        char v4 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        char v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferSuccess_cold_1();
      }
    }
    *(void *)(a1 + 288) = 0;
    int v5 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
    if (v5) {
      v5(a1, 5, *(void *)(a1 + 96));
    }
    __iAP2FileTransferSendBufferPacket(a1, 5, 1);
  }
}

void iAP2FileTransferResume(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferResume_cold_5();
  }
  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }
  int v4 = *(_DWORD *)(a1 + 104);
  if (v4 == 9)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        size_t v6 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        size_t v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferResume_cold_3();
      }
    }
    *(_DWORD *)(a1 + 104) = 8;
    iAP2LinkEventNotify(*(void *)a1, 1, a1);
    uint64_t v7 = a1;
    int v8 = 1;
    int v9 = 1;
  }
  else
  {
    if (v4 != 3) {
      return;
    }
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v5 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferResume_cold_1();
      }
    }
    *(_DWORD *)(a1 + 104) = 2;
    iAP2LinkEventNotify(*(void *)a1, 1, a1);
    uint64_t v7 = a1;
    int v8 = 0;
    int v9 = 0;
  }
  __iAP2FileTransferSendBufferPacket(v7, v8, v9);
}

void iAP2FileTransferCancel(uint64_t a1)
{
  if (a1)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects) {
        BOOL v2 = gNumLogObjects < 20;
      }
      else {
        BOOL v2 = 1;
      }
      if (v2)
      {
        uint64_t v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v3 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferCancel_cold_6();
      }
    }
    if ((_iAP2LogEnableMask & 2) != 0)
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 20;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        int v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        int v5 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = *(_DWORD *)(a1 + 104);
        int v7 = *(unsigned __int8 *)(a1 + 108);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        BOOL v10 = *(void *)(a1 + 56) != 0;
        BOOL v11 = *(void *)(a1 + 64) != 0;
        int v20 = 136316930;
        uint64_t v21 = "iAP2FileTransferCancel";
        __int16 v22 = 1024;
        int v23 = 1809;
        __int16 v24 = 1024;
        int v25 = v6;
        __int16 v26 = 1024;
        int v27 = v7;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        __int16 v30 = 2048;
        uint64_t v31 = v9;
        __int16 v32 = 1024;
        BOOL v33 = v10;
        __int16 v34 = 1024;
        BOOL v35 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s:%d fileXfer state=%d session=%u sentSize=%lu totalSize=%lu endCB(%d) userInfo(%d)", (uint8_t *)&v20, 0x3Eu);
      }
    }
    unsigned int v12 = *(_DWORD *)(a1 + 104);
    BOOL v2 = v12 > 9;
    int v13 = (1 << v12) & 0x32C;
    if (v2 || v13 == 0)
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v19 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          uint64_t v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          iAP2FileTransferCancel_cold_1();
        }
      }
    }
    else
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          long long v15 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          long long v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          iAP2FileTransferCancel_cold_3();
        }
      }
      *(void *)(a1 + 288) = 0;
      unsigned int v16 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
      if (v16) {
        v16(a1, 5, *(void *)(a1 + 96));
      }
      __iAP2FileTransferSendBufferPacket(a1, 2, 1);
      if (*(char *)(a1 + 109) < 0) {
        int v17 = 4;
      }
      else {
        int v17 = 10;
      }
      *(_DWORD *)(a1 + 104) = v17;
      iAP2LinkEventNotify(*(void *)a1, 1, a1);
      unsigned int v18 = *(void (**)(uint64_t, void))(a1 + 56);
      if (v18) {
        v18(a1, *(void *)(a1 + 64));
      }
    }
  }
}

void OUTLINED_FUNCTION_4_14(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_5_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Eu);
}

void OUTLINED_FUNCTION_7_10(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_10_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x44u);
}

void OUTLINED_FUNCTION_12_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x54u);
}

id platform_usb_setUSBHostHIDInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    uint64_t v8 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v14[0] = 67109634;
    v14[1] = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#USB] Setting USB Host HID interface: %d with hidFuntionType: %d for connection %@", (uint8_t *)v14, 0x18u);
  }

  uint64_t v9 = _getUSBHostPluginInstance();
  if (objc_opt_respondsToSelector())
  {
    id v10 = [v9 setUSBHostHIDInterface:a2 withHIDFunction:a3 forConnectionUUID:a1];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      BOOL v11 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      platform_usb_setUSBHostHIDInterface_cold_1();
    }

    id v10 = 0;
  }

  return v10;
}

id _getUSBHostPluginInstance()
{
  BOOL v0 = +[ACCPlatformPluginManager sharedManager];
  uint64_t v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBHostPluginProtocol fallbackToTransportPlugins:1];

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getUSBHostPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

id platform_usb_clearUSBHostHIDInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412290;
    uint64_t v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#USB] Clearing USB Host HID interfaces for connection %@", (uint8_t *)&v10, 0xCu);
  }

  int v5 = _getUSBHostPluginInstance();
  if (objc_opt_respondsToSelector())
  {
    id v6 = [v5 clearUSBHostHIDInterfacesForConnectionUUID:a1];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      id v7 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = &_os_log_default;
      id v8 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      platform_usb_clearUSBHostHIDInterfaces_cold_1();
    }

    id v6 = 0;
  }

  return v6;
}

id platform_usb_configureUSBHostNCMInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    id v8 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v14[0] = 67109378;
    v14[1] = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#USB] Setting USB Host NCM interface to %u for connection %@", (uint8_t *)v14, 0x12u);
  }

  uint64_t v9 = _getUSBHostPluginInstance();
  if (objc_opt_respondsToSelector())
  {
    id v10 = [v9 configureUSBHostNCMInterface:a2 asCarPlay:a3 forConnectionUUID:a1];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v11 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      platform_usb_configureUSBHostNCMInterface_cold_1();
    }

    id v10 = 0;
  }

  return v10;
}

id platform_usb_unlockUSBHostInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#USB] Unlocking USB interfaces for connection %@...", (uint8_t *)&v9, 0xCu);
  }

  int v5 = _getUSBHostPluginInstance();
  BOOL v6 = v5;
  if (v5) {
    id v7 = [v5 unlockUSBHostInterfacesForConnectionUUID:a1];
  }
  else {
    id v7 = 0;
  }

  return v7;
}

id platform_usb_lockUSBHostInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#USB] Locking USB interfaces for connection %@...", (uint8_t *)&v9, 0xCu);
  }

  int v5 = _getUSBHostPluginInstance();
  BOOL v6 = v5;
  if (v5) {
    id v7 = [v5 lockUSBHostInterfacesForConnectionUUID:a1];
  }
  else {
    id v7 = 0;
  }

  return v7;
}

id platform_usb_setNeedOutZlp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    id v8 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v14[0] = 67109634;
    v14[1] = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#USB] Setting USB Host need Out ZLP %d (max %d) for connection %@", (uint8_t *)v14, 0x18u);
  }

  int v9 = _getUSBHostPluginInstance();
  if (objc_opt_respondsToSelector())
  {
    id v10 = [v9 setNeedOutZLP:a2 maxOutLength:a3 forConnectionUUID:a1];
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v11 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = &_os_log_default;
      id v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      platform_usb_setNeedOutZlp_cold_1();
    }

    id v10 = 0;
  }

  return v10;
}

void sub_1000FA4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FA95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FAE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FB1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FB638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FBB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1000FBE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FC0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FC914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FCBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FCE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FD450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FD744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FDC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_19(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_4_15(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

CFAbsoluteTime *configStream_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = (CFAbsoluteTime *)malloc_type_calloc(1uLL, 0x28uLL, 0x1020040239C79EBuLL);
    if (v2)
    {
      dispatch_queue_t v3 = dispatch_queue_create("ConfigStreamQ", 0);
      *((void *)v2 + 1) = v3;
      if (v3)
      {
        *(void *)BOOL v2 = a1;
        if (gLogObjects && gNumLogObjects >= 57)
        {
          BOOL v4 = *(NSObject **)(gLogObjects + 448);
        }
        else
        {
          BOOL v4 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
          configStream_endpoint_create_cold_3(v4);
        }
        v2[3] = CFAbsoluteTimeGetCurrent();
        *((void *)v2 + 4) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        *((unsigned char *)v2 + 16) = 0;
        if (gLogObjects && gNumLogObjects >= 57)
        {
          int v5 = *(NSObject **)(gLogObjects + 448);
        }
        else
        {
          int v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v8[0] = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "configStream initSession: ", (uint8_t *)v8, 2u);
        }
      }
    }
  }
  else
  {
    id v7 = logObjectForModule_25();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v7);
    }
    return 0;
  }
  return v2;
}

void *logObjectForModule_25()
{
  if (gLogObjects && gNumLogObjects >= 57) {
    return *(void **)(gLogObjects + 448);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t configStream_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 57)
      {
        dispatch_queue_t v3 = *(NSObject **)(gLogObjects + 448);
      }
      else
      {
        dispatch_queue_t v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "configStream cleanupSession: ", v5, 2u);
      }
      BOOL v4 = *(const void **)(v2 + 32);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 32) = 0;
      }
      dispatch_sync(*((dispatch_queue_t *)*v1 + 1), &__block_literal_global_29);
      dispatch_release(*((dispatch_object_t *)*v1 + 1));
      *((void *)*v1 + 1) = 0;
      if (*v1)
      {
        free(*v1);
        *uint64_t v1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t configStream_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    dispatch_queue_t v3 = (void *)result;
    BOOL result = 0;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        BOOL v4 = v3[1];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000;
        _DWORD v5[2] = __configStream_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_2_2;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1;
      }
    }
  }
  return result;
}

void __configStream_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v3 = *(void *)(a1 + 32);
  CFDataRef v2 = *(const __CFData **)(a1 + 40);
  if (gLogObjects && gNumLogObjects >= 57)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    __configStream_endpoint_processIncomingData_block_invoke_cold_6(v3, (uint64_t)v2, v4);
    if (!v3) {
      goto LABEL_101;
    }
  }
  else if (!v3)
  {
    goto LABEL_101;
  }
  if (!v2) {
    goto LABEL_101;
  }
  CFArrayRef v5 = *(CFArrayRef *)v3;
  if (!*(void *)v3) {
    goto LABEL_101;
  }
  BOOL v6 = *(uint64_t **)v5;
  if (!*(void *)v5) {
    goto LABEL_101;
  }
  BytePtr = CFDataGetBytePtr(v2);
  unint64_t Length = CFDataGetLength(v2);
  if (!BytePtr || Length < 0xC || Length < (unint64_t)*((unsigned __int16 *)BytePtr + 3) + 12) {
    goto LABEL_101;
  }
  int v9 = *(unsigned __int16 *)BytePtr;
  if (v9 == 6)
  {
    id v10 = _configStream_endpoint_copyAndRemoveFirstClientForRequest((CFArrayRef *)v3, *((unsigned __int16 *)BytePtr + 1), BytePtr[4]);
    if (v10)
    {
      uint64_t v11 = v10;
      CFArrayRef v12 = v5;
      if (*((_WORD *)BytePtr + 3)) {
        CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, BytePtr + 12, *((unsigned __int16 *)BytePtr + 3));
      }
      else {
        CFDataRef v13 = 0;
      }
      if (gLogObjects && gNumLogObjects >= 57)
      {
        int v38 = *(NSObject **)(gLogObjects + 448);
      }
      else
      {
        int v38 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = *(void *)(*(void *)v3 + 16);
        int v40 = *((unsigned __int16 *)BytePtr + 1);
        int v41 = *((unsigned __int16 *)BytePtr + 2);
        *(_DWORD *)buf = 138413314;
        *(void *)int v61 = v39;
        *(_WORD *)&v61[8] = 2112;
        CFTypeRef v62 = v11;
        *(_WORD *)uint64_t v63 = 1024;
        *(_DWORD *)&v63[2] = v40;
        *(_WORD *)&v63[6] = 1024;
        *(_DWORD *)&v63[8] = v41;
        *(_WORD *)&v63[12] = 2112;
        *(void *)&v63[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "configStream processIncomingData for endpoint: %@, call configStreamPropertyResponse: clientUID %@, categoryID 0x%x, propertyID %u, propertyValue %@", buf, 0x2Cu);
      }
      platform_connectionInfo_configStreamPropertyResponse((uint64_t)v11, *((void *)v12 + 2), *v6, *((unsigned __int16 *)BytePtr + 1), BytePtr[4], (uint64_t)v13, *((_DWORD *)BytePtr + 2) == 0);
      if (CFArrayGetCount(*(CFArrayRef *)(v3 + 32)) >= 1) {
        _configStream_endpoint_sendNextClientRequest((CFArrayRef *)v3);
      }
      CFRelease(v11);
      if (!v13) {
        goto LABEL_101;
      }
      CFDataRef v42 = v13;
      goto LABEL_91;
    }
    if (gLogObjects && gNumLogObjects >= 57)
    {
      uint64_t v31 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      uint64_t v31 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_101;
    }
LABEL_99:
    int v45 = *((_DWORD *)v5 + 6);
    int v46 = *(unsigned __int16 *)BytePtr;
    int v47 = *((unsigned __int16 *)BytePtr + 1);
    int v48 = *((unsigned __int16 *)BytePtr + 2);
    int v49 = *((unsigned __int16 *)BytePtr + 3);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)int v61 = v45;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v46;
    LOWORD(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 2) = v47;
    HIWORD(v62) = 1024;
    *(_DWORD *)uint64_t v63 = v48;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v49;
    int v37 = "configStream processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d, No client found, messageID %x, cate"
          "goryID 0x%x, propertyID %u, paramLen %u";
    goto LABEL_100;
  }
  if (v9 == 5)
  {
    CFTypeRef cf = _configStream_endpoint_copyAndRemoveFirstClientForRequest((CFArrayRef *)v3, *((unsigned __int16 *)BytePtr + 1), BytePtr[4]);
    if (cf)
    {
      int v51 = v6;
      uint64_t v52 = v1;
      int v55 = (CFArrayRef *)v3;
      if (*((_WORD *)BytePtr + 3))
      {
        theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (*((_WORD *)BytePtr + 6))
        {
          unint64_t v14 = 0;
          __int16 v15 = BytePtr + 18;
          int v53 = BytePtr;
          while (1)
          {
            int v16 = &BytePtr[20 * v14];
            unsigned __int16 v59 = *((_WORD *)v16 + 7);
            CFIndex v17 = *((unsigned __int16 *)v16 + 8);
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, v17, &kCFTypeArrayCallBacks);
            int v57 = v15;
            uint64_t v19 = v15;
            if (v17) {
              break;
            }
LABEL_38:
            CFNumberRef v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v59);
            CFDictionarySetValue(theDict, v26, Mutable);
            uint64_t v27 = gLogObjects;
            int v28 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 57)
            {
              uint64_t v29 = *(NSObject **)(gLogObjects + 448);
            }
            else
            {
              uint64_t v29 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v61 = v27;
                *(_WORD *)&v61[8] = 1024;
                LODWORD(v62) = v28;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                uint64_t v29 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *((void *)*v55 + 2);
              *(_DWORD *)buf = 138413058;
              *(void *)int v61 = v30;
              *(_WORD *)&v61[8] = 2112;
              CFTypeRef v62 = cf;
              *(_WORD *)uint64_t v63 = 1024;
              *(_DWORD *)&v63[2] = v59;
              *(_WORD *)&v63[6] = 2112;
              *(void *)&v63[8] = theDict;
              _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "configStream processIncomingData for endpoint: %@, clientUID %@, creating category list, categoryID 0x%x, categories %@", buf, 0x26u);
            }
            BytePtr = v53;
            if (v26) {
              CFRelease(v26);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            ++v14;
            __int16 v15 = v57 + 20;
            if (v14 >= *((unsigned __int16 *)v53 + 6)) {
              goto LABEL_79;
            }
          }
          while (1)
          {
            unsigned __int8 v20 = *v19++;
            unsigned __int8 valuePtr = v20;
            CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            CFArrayAppendValue(Mutable, v21);
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 57)
            {
              __int16 v24 = *(NSObject **)(gLogObjects + 448);
            }
            else
            {
              __int16 v24 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v61 = v22;
                *(_WORD *)&v61[8] = 1024;
                LODWORD(v62) = v23;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                __int16 v24 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            if (v21) {
              goto LABEL_33;
            }
LABEL_34:
            if (!--v17) {
              goto LABEL_38;
            }
          }
          uint64_t v25 = *((void *)*v55 + 2);
          *(_DWORD *)buf = 138413314;
          *(void *)int v61 = v25;
          *(_WORD *)&v61[8] = 2112;
          CFTypeRef v62 = cf;
          *(_WORD *)uint64_t v63 = 1024;
          *(_DWORD *)&v63[2] = v59;
          *(_WORD *)&v63[6] = 1024;
          *(_DWORD *)&v63[8] = valuePtr;
          *(_WORD *)&v63[12] = 2112;
          *(void *)&v63[14] = Mutable;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "configStream processIncomingData for endpoint: %@, clientUID %@, creating property list for categoryID 0x%x, propertyID %u, properties %@", buf, 0x2Cu);
          if (!v21) {
            goto LABEL_34;
          }
LABEL_33:
          CFRelease(v21);
          goto LABEL_34;
        }
      }
      else
      {
        theDict = 0;
      }
LABEL_79:
      if (gLogObjects && gNumLogObjects >= 57)
      {
        int v43 = *(NSObject **)(gLogObjects + 448);
      }
      else
      {
        int v43 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        uint64_t v44 = *((void *)*v55 + 2);
        *(_DWORD *)buf = 138412802;
        *(void *)int v61 = v44;
        *(_WORD *)&v61[8] = 2112;
        CFTypeRef v62 = cf;
        *(_WORD *)uint64_t v63 = 2112;
        *(void *)&v63[2] = theDict;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "configStream processIncomingData for endpoint: %@, call configStreamPropertyResponse: clientUID %@, categories %@", buf, 0x20u);
      }
      platform_connectionInfo_configStreamCategoriesResponse((uint64_t)cf, *((void *)v5 + 2), *v51, (uint64_t)theDict, *((_DWORD *)BytePtr + 2) == 0);
      uint64_t v1 = v52;
      if (theDict) {
        CFRelease(theDict);
      }
      if (CFArrayGetCount(v55[4]) >= 1) {
        _configStream_endpoint_sendNextClientRequest(v55);
      }
      CFDataRef v42 = (CFDataRef)cf;
LABEL_91:
      CFRelease(v42);
      goto LABEL_101;
    }
    if (gLogObjects && gNumLogObjects >= 57)
    {
      uint64_t v31 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      uint64_t v31 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  if (!*(_WORD *)BytePtr)
  {
    *(unsigned char *)(v3 + 16) = 1;
    platform_connectionInfo_configStreamCategoryListReady(*((void *)v5 + 2), *v6);
    goto LABEL_101;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v31 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    uint64_t v31 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *((_DWORD *)v5 + 6);
    int v33 = *(unsigned __int16 *)BytePtr;
    int v34 = *((unsigned __int16 *)BytePtr + 1);
    int v35 = *((unsigned __int16 *)BytePtr + 2);
    int v36 = *((unsigned __int16 *)BytePtr + 3);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)int v61 = v32;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v33;
    LOWORD(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 2) = v34;
    HIWORD(v62) = 1024;
    *(_DWORD *)uint64_t v63 = v35;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v36;
    int v37 = "configStream processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d, Unknown messageID %x, categoryID 0x"
          "%x, propertyID %u, paramLen %u";
LABEL_100:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v37, buf, 0x20u);
  }
LABEL_101:
  int v50 = *(const void **)(v1 + 40);
  if (v50) {
    CFRelease(v50);
  }
}

uint64_t *configStream_endpoint_sendOutgoingData(uint64_t *a1, __int16 a2, __int16 a3, __int16 a4, const UInt8 *a5, unsigned int a6)
{
  BOOL v6 = a1;
  if (a1)
  {
    *(_WORD *)bytes = a2;
    __int16 v13 = a3;
    __int16 v14 = a4;
    __int16 v15 = a6;
    int v16 = 0;
    CFIndex v9 = a6;
    CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, a6 + 12);
    CFDataAppendBytes(Mutable, bytes, 12);
    if (a5 && a6) {
      CFDataAppendBytes(Mutable, a5, v9);
    }
    BOOL v6 = (uint64_t *)acc_endpoint_sendOutgoingData(*v6, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v6;
}

uint64_t *configStream_getCategories(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    __int16 v14 = logObjectForModule_25();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)a1 + 16);
      int v16 = a1[16];
      int v17 = 138412802;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      __int16 v21 = 1024;
      int v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "configStream getCategories for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d", (uint8_t *)&v17, 0x1Cu);
    }
    goto LABEL_36;
  }
  if (!a2)
  {
LABEL_36:
    BOOL v4 = 0;
    CFIndex v9 = 0;
    goto LABEL_17;
  }
  BOOL v4 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      id v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v17 = 134218240;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        LODWORD(v20) = v6;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v17, 0x12u);
        BOOL v4 = *(uint64_t **)a2;
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16);
      int v17 = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      unsigned __int8 v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "configStream getCategories for endpoint: %@ clientUID: %@", (uint8_t *)&v17, 0x16u);
      BOOL v4 = *(uint64_t **)a2;
    }
    if (_configStream_endpoint_addClientRequest((CFMutableArrayRef *)a1, (const __CFString *)v4, *(unsigned __int16 *)(a2 + 8), *(unsigned __int8 *)(a2 + 10)))BOOL v4 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 1, 0, 0, 0, 0); {
    else
    }
      BOOL v4 = 0;
  }
  CFIndex v9 = (uint64_t **)a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    id v10 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    id v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v11 = *(void *)(v11 + 16);
      }
      if (v9) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *v9;
LABEL_30:
        int v17 = 138412802;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        unsigned __int8 v20 = v12;
        __int16 v21 = 1024;
        int v22 = (int)v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, success %d", (uint8_t *)&v17, 0x1Cu);
        goto LABEL_31;
      }
    }
    CFArrayRef v12 = 0;
    goto LABEL_30;
  }
LABEL_31:
  if (v4) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v4;
}

uint64_t _configStream_endpoint_addClientRequest(CFMutableArrayRef *a1, const __CFString *a2, int a3, int a4)
{
  unsigned __int16 valuePtr = a3;
  unsigned __int8 v18 = a4;
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v8 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    uint64_t v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      CFMutableArrayRef v17 = *a1;
      if (*a1) {
        CFMutableArrayRef v17 = (CFMutableArrayRef)*((void *)v17 + 2);
      }
    }
    else
    {
      CFMutableArrayRef v17 = 0;
    }
    *(_DWORD *)buf = 138413058;
    CFMutableArrayRef v21 = v17;
    __int16 v22 = 2112;
    CFStringRef v23 = a2;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "configStream addClientRequest for endpoint: %@, client %@, categoryID 0x%x, propertyID %u", buf, 0x22u);
  }
  uint64_t v9 = 0;
  if (a1 && a2 && a1[4])
  {
    *(_OWORD *)keys = *(_OWORD *)off_100219438;
    CFStringRef v34 = @"PropertyID";
    values[0] = (void *)CFStringCreateCopy(kCFAllocatorDefault, a2);
    values[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    values[2] = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v18);
    CFDictionaryRef v10 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFArrayAppendValue(a1[4], v10);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v9 = 1;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v11 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    uint64_t v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        CFArrayRef v12 = (__CFArray *)*((void *)*a1 + 2);
      }
      else {
        CFArrayRef v12 = 0;
      }
      int v13 = valuePtr;
      int v15 = v18;
      CFIndex Count = CFArrayGetCount(a1[4]);
    }
    else
    {
      CFArrayRef v12 = 0;
      int v13 = valuePtr;
      CFIndex Count = -1;
      int v15 = v18;
    }
    *(_DWORD *)buf = 138413570;
    CFMutableArrayRef v21 = v12;
    __int16 v22 = 2112;
    CFStringRef v23 = a2;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v15;
    __int16 v28 = 1024;
    int v29 = v9;
    __int16 v30 = 2048;
    CFIndex v31 = Count;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "configStream addClientRequest for endpoint: %@, client %@, categoryID 0x%x, propertyID %u, success %d, requestList count %ld", buf, 0x32u);
  }
  return v9;
}

uint64_t *configStream_getCachedPropertyValue(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    __int16 v14 = logObjectForModule_25();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)a1 + 16);
      int v16 = a1[16];
      int v17 = 138412802;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      __int16 v21 = 1024;
      int v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d", (uint8_t *)&v17, 0x1Cu);
    }
    goto LABEL_36;
  }
  if (!a2)
  {
LABEL_36:
    BOOL v4 = 0;
    uint64_t v9 = 0;
    goto LABEL_17;
  }
  BOOL v4 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      id v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v17 = 134218240;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        LODWORD(v20) = v6;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v17, 0x12u);
        BOOL v4 = *(uint64_t **)a2;
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16);
      int v17 = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      unsigned __int8 v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@", (uint8_t *)&v17, 0x16u);
      BOOL v4 = *(uint64_t **)a2;
    }
    if (_configStream_endpoint_addClientRequest((CFMutableArrayRef *)a1, (const __CFString *)v4, *(unsigned __int16 *)(a2 + 8), *(unsigned __int8 *)(a2 + 10)))BOOL v4 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 2, *(_WORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 10), 0, 0); {
    else
    }
      BOOL v4 = 0;
  }
  uint64_t v9 = (uint64_t **)a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFDictionaryRef v10 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    CFDictionaryRef v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v11 = *(void *)(v11 + 16);
      }
      if (v9) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *v9;
LABEL_30:
        int v17 = 138412802;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        unsigned __int8 v20 = v12;
        __int16 v21 = 1024;
        int v22 = (int)v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, success %d", (uint8_t *)&v17, 0x1Cu);
        goto LABEL_31;
      }
    }
    CFArrayRef v12 = 0;
    goto LABEL_30;
  }
LABEL_31:
  if (v4) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v4;
}

uint64_t *configStream_requestGetProperty(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    int v16 = logObjectForModule_25();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)a1 + 16);
      int v18 = a1[16];
      int v19 = 138412802;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      __int16 v23 = 1024;
      int v24 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "configStream requestGetProperty for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d", (uint8_t *)&v19, 0x1Cu);
    }
    goto LABEL_36;
  }
  if (!a2)
  {
LABEL_36:
    ClientRequest = 0;
    uint64_t v9 = 0;
    goto LABEL_17;
  }
  ClientRequest = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      id v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v19 = 134218240;
        uint64_t v20 = v5;
        __int16 v21 = 1024;
        LODWORD(v22) = v6;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v19, 0x12u);
        ClientRequest = *(uint64_t **)a2;
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16);
      int v19 = 138412546;
      uint64_t v20 = v8;
      __int16 v21 = 2112;
      int v22 = ClientRequest;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "configStream requestGetProperty for endpoint: %@ clientUID: %@", (uint8_t *)&v19, 0x16u);
      ClientRequest = *(uint64_t **)a2;
    }
    if (_configStream_endpoint_addClientRequest((CFMutableArrayRef *)a1, (const __CFString *)ClientRequest, *(unsigned __int16 *)(a2 + 8), *(unsigned __int8 *)(a2 + 10)))ClientRequest = _configStream_endpoint_sendNextClientRequest((CFArrayRef *)a1); {
    else
    }
      ClientRequest = 0;
  }
  uint64_t v9 = a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFDictionaryRef v10 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    CFDictionaryRef v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      CFArrayRef v11 = *(CFArrayRef *)a1;
      if (*(void *)a1) {
        CFArrayRef v11 = (CFArrayRef)*((void *)v11 + 2);
      }
      if (v9) {
        goto LABEL_27;
      }
    }
    else
    {
      CFArrayRef v11 = 0;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *(uint64_t **)v9;
        int v13 = *(unsigned __int16 *)(v9 + 8);
        int v14 = *(unsigned __int8 *)(v9 + 10);
LABEL_30:
        int v19 = 138413314;
        uint64_t v20 = (uint64_t)v11;
        __int16 v21 = 2112;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = v13;
        __int16 v25 = 1024;
        int v26 = v14;
        __int16 v27 = 1024;
        int v28 = (int)ClientRequest;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "configStream requestGetProperty for endpoint: %@ clientUID: %@, categoryID 0x%x, propertyID %u, success %d", (uint8_t *)&v19, 0x28u);
        goto LABEL_31;
      }
    }
    CFArrayRef v12 = 0;
    int v13 = -1;
    int v14 = -1;
    goto LABEL_30;
  }
LABEL_31:
  if (ClientRequest) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return ClientRequest;
}

uint64_t *_configStream_endpoint_sendNextClientRequest(CFArrayRef *a1)
{
  if (!a1 || !*a1) {
    goto LABEL_42;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFDataRef v2 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    CFDataRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _configStream_endpoint_sendNextClientRequest_cold_3((uint64_t)a1, v2);
  }
  CFArrayRef v3 = a1[4];
  if (!v3) {
    goto LABEL_42;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v6 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v25 = v4;
      __int16 v26 = 1024;
      LODWORD(v27[0]) = v5;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      CFArrayRef v3 = a1[4];
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *((void *)*a1 + 2);
    CFIndex Count = CFArrayGetCount(v3);
    *(_DWORD *)buf = 138412546;
    uint64_t v25 = v20;
    __int16 v26 = 2048;
    v27[0] = Count;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "configStream sendNextClientRequest for endpoint: %@, requestList count %ld", buf, 0x16u);
    CFArrayRef v3 = a1[4];
  }
  if (CFArrayGetCount(v3) >= 1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1[4], 0);
    uint64_t v8 = (uint64_t *)ValueAtIndex;
    if (ValueAtIndex)
    {
      unsigned __int16 valuePtr = -21846;
      unsigned __int8 v22 = -86;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CategoryID");
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, @"PropertyID");
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      CFNumberGetValue(v10, kCFNumberIntType, &v22);
      if (gLogObjects && gNumLogObjects >= 57)
      {
        CFArrayRef v11 = *(NSObject **)(gLogObjects + 448);
      }
      else
      {
        CFArrayRef v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *((void *)*a1 + 2);
        int v13 = valuePtr;
        int v14 = v22;
        uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)v8, @"ClientUID");
        *(_DWORD *)buf = 138413058;
        uint64_t v25 = v12;
        __int16 v26 = 1024;
        LODWORD(v27[0]) = v13;
        WORD2(v27[0]) = 1024;
        *(_DWORD *)((char *)v27 + 6) = v14;
        WORD1(v27[1]) = 2112;
        *(void *)((char *)&v27[1] + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "configStream sendNextClientRequest for endpoint: %@, send RequestGetProperty: categoryID 0x%x, propertyID %u, client %@", buf, 0x22u);
      }
      uint64_t v8 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 3, valuePtr, v22, 0, 0);
    }
  }
  else
  {
LABEL_42:
    uint64_t v8 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v16 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        uint64_t v17 = *((void *)*a1 + 2);
      }
      else {
        uint64_t v17 = 0;
      }
      CFIndex v18 = CFArrayGetCount(a1[4]);
    }
    else
    {
      uint64_t v17 = 0;
      CFIndex v18 = -1;
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v25 = v17;
    __int16 v26 = 1024;
    LODWORD(v27[0]) = v8;
    WORD2(v27[0]) = 2048;
    *(void *)((char *)v27 + 6) = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "configStream sendNextClientRequest for endpoint: %@, success %d, requestList count %ld", buf, 0x1Cu);
  }
  return v8;
}

uint64_t *configStream_setPropertyValue(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_34;
  }
  if (!a1[16])
  {
    uint64_t v20 = logObjectForModule_25();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(*(void *)a1 + 16);
      int v22 = a1[16];
      int v23 = 138412802;
      uint64_t v24 = v21;
      __int16 v25 = 2112;
      __int16 v27 = 1024;
      int v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "configStream setPropertyValue for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d", (uint8_t *)&v23, 0x1Cu);
    }
    goto LABEL_34;
  }
  if (!a2)
  {
LABEL_34:
    CFArrayRef v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  if (*(void *)a2)
  {
    if (gLogObjects && gNumLogObjects >= 57)
    {
      uint64_t v4 = *(NSObject **)(gLogObjects + 448);
    }
    else
    {
      uint64_t v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)a1 + 16);
      int v6 = *(const void **)a2;
      int v23 = 138412546;
      uint64_t v24 = v5;
      __int16 v25 = 2112;
      __int16 v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "configStream setPropertyValue for endpoint: %@ clientUID: %@", (uint8_t *)&v23, 0x16u);
    }
    __int16 v7 = *(_WORD *)(a2 + 8);
    __int16 v8 = *(unsigned __int8 *)(a2 + 10);
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 16));
    unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
    CFArrayRef v11 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 4, v7, v8, BytePtr, Length);
  }
  else
  {
    CFArrayRef v11 = 0;
  }
  uint64_t v12 = a2;
LABEL_15:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v13 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v14 = *(void *)(v14 + 16);
      }
      if (v12) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v14 = 0;
      if (v12)
      {
LABEL_25:
        uint64_t v15 = *(const void **)v12;
        int v16 = *(unsigned __int16 *)(v12 + 8);
        int v17 = *(unsigned __int8 *)(v12 + 10);
        uint64_t v18 = *(void *)(v12 + 16);
LABEL_28:
        int v23 = 138413570;
        uint64_t v24 = v14;
        __int16 v25 = 2112;
        __int16 v26 = v15;
        __int16 v27 = 1024;
        int v28 = v16;
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 2112;
        uint64_t v32 = v18;
        __int16 v33 = 1024;
        int v34 = (int)v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "configStream setPropertyValue for endpoint: %@ clientUID: %@, categoryID 0x%x, propertyID %u, value %@, success %d", (uint8_t *)&v23, 0x32u);
        goto LABEL_29;
      }
    }
    uint64_t v15 = 0;
    uint64_t v18 = 0;
    int v17 = -1;
    int v16 = -1;
    goto LABEL_28;
  }
LABEL_29:
  if (v11) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v11;
}

const void *_configStream_endpoint_copyAndRemoveFirstClientForRequest(CFArrayRef *a1, int a2, int a3)
{
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      CFArrayRef v21 = *a1;
      if (*a1) {
        CFArrayRef v21 = (CFArrayRef)*((void *)v21 + 2);
      }
    }
    else
    {
      CFArrayRef v21 = 0;
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v34 = (uint64_t)v21;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = a2;
    *(_WORD *)&void v36[4] = 1024;
    *(_DWORD *)&v36[6] = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "configStream copyAndRemoveFirstClientForRequest for endpoint: %@, categoryID 0x%x, propertyID %u", buf, 0x18u);
    if (!a1) {
      goto LABEL_46;
    }
  }
  else if (!a1)
  {
    goto LABEL_46;
  }
  CFArrayRef v5 = a1[4];
  if (!v5) {
    goto LABEL_46;
  }
  if (CFArrayGetCount(a1[4]) < 1)
  {
    LODWORD(v6) = -1;
  }
  else
  {
    int v28 = a1;
    CFIndex v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
      if (ValueAtIndex)
      {
        CFDictionaryRef v8 = ValueAtIndex;
        unsigned __int16 valuePtr = -21846;
        unsigned __int8 v31 = -86;
        CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"ClientUID");
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v8, @"CategoryID");
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v8, @"PropertyID");
        CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
        CFNumberGetValue(v11, kCFNumberIntType, &v31);
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (!gLogObjects) {
          goto LABEL_15;
        }
        if (gNumLogObjects >= 57)
        {
          uint64_t v14 = *(NSObject **)(gLogObjects + 448);
        }
        else
        {
LABEL_15:
          uint64_t v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v34 = v12;
            __int16 v35 = 1024;
            *(_DWORD *)int v36 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v14 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          CFArrayRef v15 = *v28;
          if (*v28) {
            CFArrayRef v15 = (CFArrayRef)*((void *)v15 + 2);
          }
          *(_DWORD *)buf = 138413826;
          uint64_t v34 = (uint64_t)v15;
          __int16 v35 = 2112;
          *(void *)int v36 = Value;
          *(_WORD *)&v36[8] = 2112;
          *(void *)int v37 = 0;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&unsigned char v37[10] = valuePtr;
          *(_WORD *)&v37[14] = 1024;
          *(_DWORD *)&v37[16] = a2;
          __int16 v38 = 1024;
          int v39 = v31;
          __int16 v40 = 1024;
          int v41 = a3;
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "configStream findClientRequest for endpoint: %@, clientUID %@ ?= %@, categoryID 0x%x ?= %u, propertyID %u ?= %u", buf, 0x38u);
        }
        if (valuePtr == a2 && v31 == a3) {
          break;
        }
      }
      if (CFArrayGetCount(v5) <= ++v6)
      {
        LODWORD(v6) = -1;
        break;
      }
    }
    a1 = v28;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v16 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    uint64_t v20 = 0;
    goto LABEL_47;
  }
  if (*a1) {
    uint64_t v22 = *((void *)*a1 + 2);
  }
  else {
    uint64_t v22 = 0;
  }
  CFIndex Count = CFArrayGetCount(a1[4]);
  *(_DWORD *)buf = 138413314;
  uint64_t v34 = v22;
  __int16 v35 = 1024;
  *(_DWORD *)int v36 = a2;
  *(_WORD *)&void v36[4] = 1024;
  *(_DWORD *)&v36[6] = a3;
  *(_WORD *)int v37 = 1024;
  *(_DWORD *)&v37[2] = v6;
  *(_WORD *)&unsigned char v37[6] = 2048;
  *(void *)&v37[8] = Count;
  _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "configStream findClientRequest for endpoint: %@, categoryID 0x%x, propertyID %u, foundIndex %d, requestList count %ld", buf, 0x28u);
  if ((v6 & 0x80000000) != 0) {
    goto LABEL_46;
  }
LABEL_34:
  CFArrayRef v17 = a1[4];
  CFIndex v18 = v6;
  CFDictionaryRef v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v6);
  if (!v19) {
    goto LABEL_46;
  }
  uint64_t v20 = CFDictionaryGetValue(v19, @"ClientUID");
  CFRetain(v20);
  CFArrayRemoveValueAtIndex(v17, v18);
LABEL_47:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v24 = *(NSObject **)(gLogObjects + 448);
  }
  else
  {
    uint64_t v24 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        uint64_t v25 = *((void *)*a1 + 2);
      }
      else {
        uint64_t v25 = 0;
      }
      CFIndex v26 = CFArrayGetCount(a1[4]);
    }
    else
    {
      uint64_t v25 = 0;
      CFIndex v26 = -1;
    }
    *(_DWORD *)buf = 138413314;
    uint64_t v34 = v25;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = a2;
    *(_WORD *)&void v36[4] = 1024;
    *(_DWORD *)&v36[6] = a3;
    *(_WORD *)int v37 = 2112;
    *(void *)&v37[2] = v20;
    *(_WORD *)&unsigned char v37[10] = 2048;
    *(void *)&unsigned char v37[12] = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "configStream copyAndRemoveFirstClientForRequest for endpoint: %@, categoryID 0x%x, propertyID %u, client %@, requestList count %ld", buf, 0x2Cu);
  }
  return v20;
}

id platform_location_getSupportedNMEASentences()
{
  BOOL v0 = +[ACCPlatformLocationManager sharedManager];
  id v1 = [v0 supportedNMEASentenceMask];

  return v1;
}

id platform_location_setSupportedNMEASentencesForEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCPlatformLocationManager sharedManager];
  id v5 = [v4 setLocationEndpointUUID:a1 withSupportedNMEASentences:a2];

  return v5;
}

id platform_location_resetSupportedNMEASentencesForEndpoint(uint64_t a1)
{
  CFDataRef v2 = +[ACCPlatformLocationManager sharedManager];
  id v3 = [v2 resetLocationEndpointUUID:a1];

  return v3;
}

id platform_location_update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSDate date];
  [v4 timeIntervalSince1970];
  double v6 = v5;

  id v7 = objc_alloc_init((Class)NSMutableArray);
  CFDictionaryRef v8 = +[NSNumber numberWithDouble:v6];
  [v7 addObject:v8];

  uint64_t v9 = +[ACCExternalAccessoryServer sharedServer];
  id v10 = [v9 sendNMEASentence:a2 forAccessoryUUID:a1 withTimestamps:v7];

  return v10;
}

id platform_location_start(uint64_t a1)
{
  CFDataRef v2 = +[ACCPlatformLocationManager sharedManager];
  id v3 = [v2 startLocationUpdatesForUUID:a1];

  return v3;
}

id platform_location_stop(uint64_t a1)
{
  CFDataRef v2 = +[ACCPlatformLocationManager sharedManager];
  id v3 = [v2 stopLocationUpdatesForUUID:a1];

  return v3;
}

id platform_location_sendNMEAFilterList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[ACCPlatformLocationManager sharedManager];
  id v5 = [v4 setNMEAFilterList:a2 forUUID:a1];

  return v5;
}

id platform_location_sendGPRMCDataStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDictionaryRef v8 = +[ACCPlatformLocationManager sharedManager];
  id v9 = [v8 sendGPRMCDataStatus:a2 valueV:a3 valueX:a4 forUUID:a1];

  return v9;
}

void OUTLINED_FUNCTION_3_20(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_8_6(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t qiAuth_protocol_init(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7, __int16 a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v13 = a2;
    uint64_t v14 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v13 = a2;
    uint64_t v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    CFArrayRef v21 = "qiAuth_protocol_init";
    __int16 v22 = 1024;
    int v23 = 75;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s:%d role %d, slotsSupportedMask 0x%X", buf, 0x1Eu);
  }
  uint64_t v15 = 4294967294;
  if (a1 && a4 && a5 <= 1)
  {
    *(void *)a1 = v13;
    *(_DWORD *)(a1 + 8) = a3;
    *(unsigned char *)(a1 + 24) = a6;
    *(void *)(a1 + 32) = a7;
    *(_WORD *)(a1 + 40) = a8;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 13) = a4;
    *(unsigned char *)(a1 + 14) = a5;
    *(unsigned char *)(a1 + 12) = a5;
    *(_OWORD *)(a1 + 228) = 0u;
    *(_DWORD *)(a1 + 244) = 0;
    *(_DWORD *)(a1 + 220) = -1;
    *(unsigned char *)(a1 + 224) = 0;
    *(_WORD *)(a1 + 215) = 1280;
    *(_WORD *)(a1 + 248) = 0;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_WORD *)(a1 + 320) = 0;
    *(unsigned char *)(a1 + 322) = 0;
    *(void *)(a1 + 324) = 0;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    bzero((void *)(a1 + 368), 0x600uLL);
    *(_WORD *)(a1 + 1904) = 0;
    *(_OWORD *)(a1 + 1906) = 0u;
    *(_DWORD *)(a1 + 1922) = 0;
    *(_OWORD *)(a1 + 1926) = 0u;
    *(_WORD *)(a1 + 1942) = 0;
    uint64_t v15 = qiAuth_util_init(a1);
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v16 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    CFArrayRef v21 = "qiAuth_protocol_init";
    __int16 v22 = 1024;
    int v23 = 147;
    __int16 v24 = 1024;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s:%d result %d, role %d, slotsSupportedMask 0x%X", buf, 0x24u);
  }
  return v15;
}

double qiAuth_protocol_cleanup(uint64_t a1, void *a2, _WORD *a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      double v6 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      double v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v8 = *(unsigned __int8 *)(a1 + 24);
      int v13 = 136316162;
      uint64_t v14 = "qiAuth_protocol_cleanup";
      __int16 v15 = 1024;
      int v16 = 156;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s:%d role %d, slotsSupportedMask 0x%X -> 0x%X", (uint8_t *)&v13, 0x24u);
    }
    t56_util_cleanup(a1);
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 14);
    *(unsigned char *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    if (a2) {
      *a2 = *(void *)(a1 + 32);
    }
    if (a3) {
      *a3 = *(_WORD *)(a1 + 40);
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      id v9 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      id v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 8);
      int v13 = 136315650;
      uint64_t v14 = "qiAuth_protocol_cleanup";
      __int16 v15 = 1024;
      int v16 = 175;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s:%d role %d, clear authState and rx digest / cert cache", (uint8_t *)&v13, 0x18u);
    }
    *(unsigned char *)(a1 + 216) = 0;
    *(unsigned char *)(a1 + 224) = 0;
    *(void *)(a1 + 236) = 0;
    *(void *)(a1 + 228) = 0;
    *(_DWORD *)(a1 + 244) = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 220);
    if ((v11 & 0x80000000) == 0)
    {
      qiAuth_util_cancelTimer((const void **)a1, v11);
      *(_DWORD *)(a1 + 220) = -1;
    }
    *(unsigned char *)(a1 + 215) = 0;
    *(_WORD *)(a1 + 248) = 0;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_WORD *)(a1 + 320) = 0;
    *(unsigned char *)(a1 + 322) = 0;
    *(void *)(a1 + 324) = 0;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    bzero((void *)(a1 + 368), 0x600uLL);
    *(_WORD *)(a1 + 1904) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 1906) = 0u;
    *(_DWORD *)(a1 + 1922) = 0;
    *(_OWORD *)(a1 + 1926) = 0u;
    *(_WORD *)(a1 + 1942) = 0;
  }
  return result;
}

uint64_t qiAuth_protocol_start(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 32) || *(unsigned __int16 *)(a1 + 40) < 2u)
  {
    uint64_t v3 = 4294967294;
    goto LABEL_8;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFDataRef v2 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFDataRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v6 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(unsigned __int16 *)(a1 + 40);
    int v21 = 136315906;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 251;
    __int16 v25 = 1024;
    unsigned int v26 = v7;
    __int16 v27 = 1024;
    int v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d role %d, outMsgBufferSize %d", (uint8_t *)&v21, 0x1Eu);
  }
  if (*(_DWORD *)(a1 + 8) || (int v10 = *(unsigned char **)(a1 + 32)) == 0 || (v11 = *(unsigned __int16 *)(a1 + 40), v11 < 2))
  {
    unsigned int inited = -2;
    goto LABEL_22;
  }
  *(unsigned char *)(a1 + 48) = 4;
  unsigned int inited = qiAuth_protocol_initMsg_GET_DIGESTS(v6, *(unsigned __int8 *)(a1 + 12), 1u, v10, v11, (_WORD *)(a1 + 42));
  if (inited)
  {
LABEL_22:
    if (*(_DWORD *)(a1 + 8) >= 2u) {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v3 = inited;
    }
    goto LABEL_8;
  }
  unsigned int v12 = qiAuth_protocol_timeoutForRequest(a1, **(unsigned char **)(a1 + 32) & 0xF, 0x7Fu);
  uint64_t v13 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
  if ((*(_DWORD *)(a1 + 220) & 0x80000000) == 0)
  {
    uint64_t v14 = logObjectForModule_19();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(a1 + 44);
      int v16 = qiAuth_protocol_msgTypeString(v15);
      int v21 = 136316162;
      int v22 = "qiAuth_protocol_start";
      __int16 v23 = 1024;
      int v24 = 269;
      __int16 v25 = 1024;
      unsigned int v26 = v12;
      __int16 v27 = 1024;
      int v28 = v15;
      __int16 v29 = 2080;
      int v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s:%d Cancel responseTimer, %u ms, outMsgType %u(%s)", (uint8_t *)&v21, 0x28u);
    }
    qiAuth_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 220));
  }
  __int16 v17 = logObjectForModule_19();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = **(unsigned char **)(a1 + 32) & 0xF;
    int v21 = 136315906;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 273;
    __int16 v25 = 1024;
    unsigned int v26 = v12;
    __int16 v27 = 1024;
    int v28 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", (uint8_t *)&v21, 0x1Eu);
  }
  int v19 = qiAuth_util_callbackOnTimer((const void **)a1, v12, (uint64_t)_qiAuth_protocol_timeoutCallback, v13);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 220) = v19;
    qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
    unsigned int inited = 0;
    goto LABEL_22;
  }
  int v20 = logObjectForModule_19();
  uint64_t v3 = 0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315394;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 276;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%s:%d Failed to start timer!!!", (uint8_t *)&v21, 0x12u);
    uint64_t v3 = 0;
  }
LABEL_8:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    qiAuth_protocol_start_cold_1();
  }
  return v3;
}

uint64_t qiAuth_protocol_initMsg_GET_DIGESTS(uint64_t a1, int a2, unsigned int a3, unsigned char *a4, unsigned int a5, _WORD *a6)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v11 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    unsigned int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    qiAuth_protocol_initMsg_GET_DIGESTS_cold_2();
    if (!a4) {
      goto LABEL_12;
    }
  }
  else if (!a4)
  {
    goto LABEL_12;
  }
  if (a3 <= 0xF && a5 >= 2)
  {
    uint64_t v12 = 0;
    *a4 = (16 * a2) | 9;
    a4[1] = a3;
    *a6 = 2;
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v12 = 4294967294;
  if (!a4)
  {
    unsigned int v13 = 15;
    goto LABEL_14;
  }
LABEL_13:
  unsigned int v13 = *a4 & 0xF;
LABEL_14:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v14 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = v13 - 1;
    if (v16 > 0xA)
    {
      __int16 v17 = "UNKNOWN";
      if (a6) {
        goto LABEL_24;
      }
    }
    else
    {
      __int16 v17 = off_1002194B0[v16];
      if (a6)
      {
LABEL_24:
        int v18 = (unsigned __int16)*a6;
LABEL_27:
        int v19 = 136316674;
        int v20 = "qiAuth_protocol_initMsg_GET_DIGESTS";
        __int16 v21 = 1024;
        int v22 = 2650;
        __int16 v23 = 1024;
        int v24 = v12;
        __int16 v25 = 1024;
        int v26 = a2;
        __int16 v27 = 1024;
        unsigned int v28 = v13;
        __int16 v29 = 2080;
        int v30 = v17;
        __int16 v31 = 1024;
        int v32 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d", (uint8_t *)&v19, 0x34u);
        return v12;
      }
    }
    int v18 = -1;
    goto LABEL_27;
  }
  return v12;
}

uint64_t qiAuth_protocol_timeoutForRequest(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 9:
      return 43000;
    case 11:
      return 23000;
    case 10:
      if (a3 <= 3) {
        return 5;
      }
      else {
        return 300 * a3 + 4000;
      }
    default:
      if (gLogObjects && gNumLogObjects >= 60)
      {
        BOOL v6 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        BOOL v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        qiAuth_protocol_timeoutForRequest_cold_1(a1, a2, v6);
        return 0;
      }
      break;
  }
  return result;
}

const char *qiAuth_protocol_msgTypeString(int a1)
{
  if ((a1 - 1) > 0xA) {
    return "UNKNOWN";
  }
  else {
    return off_1002194B0[a1 - 1];
  }
}

void _qiAuth_protocol_timeoutCallback(uint64_t a1, int a2, unsigned int a3)
{
  if (!a1 || a2 < 0) {
    return;
  }
  int v6 = a3;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v7 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    unsigned int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  unsigned int v8 = HIWORD(a3) & 0xF;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 8);
    int v30 = 136316674;
    __int16 v31 = "_qiAuth_protocol_timeoutCallback";
    __int16 v32 = 1024;
    int v33 = 1337;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 1024;
    int v37 = v6;
    __int16 v38 = 1024;
    int v39 = v9;
    __int16 v40 = 1024;
    int v41 = HIWORD(a3) & 0xF;
    __int16 v42 = 1024;
    unsigned int v43 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s:%d Timeout: timer %d, type %d, role %d, slot %d, context %u", (uint8_t *)&v30, 0x30u);
  }
  unsigned int v11 = (unsigned int *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  if (!v10)
  {
    if (*(_DWORD *)(a1 + 220) != a2)
    {
LABEL_40:
      unsigned int v10 = *v11;
      goto LABEL_41;
    }
    *(_DWORD *)(a1 + 220) = -1;
    if (a3 == 2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v19 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v25 = **(unsigned char **)(a1 + 32) & 0xF;
      int v26 = *(unsigned __int16 *)(a1 + 42);
      int v30 = 136316162;
      __int16 v31 = "_qiAuth_protocol_timeoutCallback";
      __int16 v32 = 1024;
      int v33 = 1378;
      __int16 v34 = 1024;
      int v35 = HIWORD(a3) & 0xF;
      __int16 v36 = 1024;
      int v37 = v25;
      __int16 v38 = 1024;
      int v39 = v26;
    }
    else
    {
      if ((_BYTE)a3)
      {
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v22 = *(NSObject **)(gLogObjects + 472);
        }
        else
        {
          int v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          _qiAuth_protocol_timeoutCallback_cold_3();
        }
        goto LABEL_40;
      }
      int v12 = *(_DWORD *)(a1 + 44);
      unsigned int v13 = *(unsigned char **)(a1 + 32);
      int v14 = *v13 & 0xF;
      if (!*(unsigned char *)(a1 + 216) || v12 != v14)
      {
        __int16 v23 = logObjectForModule_19();
        int v24 = v23;
        if (v12 == v14)
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v30 = 136315650;
            __int16 v31 = "_qiAuth_protocol_timeoutCallback";
            __int16 v32 = 1024;
            int v33 = 1364;
            __int16 v34 = 1024;
            int v35 = v8;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s:%d slot %d, retry limit reached! set authState Failed", (uint8_t *)&v30, 0x18u);
          }
          qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v8, 3);
        }
        else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v28 = *(_DWORD *)(a1 + 44);
          int v29 = **(unsigned char **)(a1 + 32) & 0xF;
          int v30 = 136316162;
          __int16 v31 = "_qiAuth_protocol_timeoutCallback";
          __int16 v32 = 1024;
          int v33 = 1371;
          __int16 v34 = 1024;
          int v35 = v8;
          __int16 v36 = 1024;
          int v37 = v28;
          __int16 v38 = 1024;
          int v39 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s:%d slot %d, mismatched msgType (%d vs %d)!", (uint8_t *)&v30, 0x24u);
        }
        goto LABEL_40;
      }
      --*(unsigned char *)(a1 + 216);
      unsigned int v15 = qiAuth_protocol_timeoutForRequest(a1, *v13 & 0xF, 0x7Fu);
      uint64_t v16 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
      __int16 v17 = logObjectForModule_19();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = **(unsigned char **)(a1 + 32) & 0xF;
        int v30 = 136315906;
        __int16 v31 = "_qiAuth_protocol_timeoutCallback";
        __int16 v32 = 1024;
        int v33 = 1355;
        __int16 v34 = 1024;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", (uint8_t *)&v30, 0x1Eu);
      }
      *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer((const void **)a1, v15, (uint64_t)_qiAuth_protocol_timeoutCallback, v16);
      int v19 = logObjectForModule_19();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v20 = **(unsigned char **)(a1 + 32) & 0xF;
      int v21 = *(unsigned __int16 *)(a1 + 42);
      int v30 = 136316162;
      __int16 v31 = "_qiAuth_protocol_timeoutCallback";
      __int16 v32 = 1024;
      int v33 = 1359;
      __int16 v34 = 1024;
      int v35 = v8;
      __int16 v36 = 1024;
      int v37 = v20;
      __int16 v38 = 1024;
      int v39 = v21;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s:%d slot %d, resend message %d, len %d", (uint8_t *)&v30, 0x24u);
LABEL_35:
    qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
    goto LABEL_40;
  }
LABEL_41:
  if (v10 >= 2)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v27 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      __int16 v27 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_timeoutCallback_cold_1();
    }
  }
}

uint64_t qiAuth_protocol_sendData(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  LODWORD(v4) = 0;
  uint64_t v5 = 4294967294;
  if (a1 && a2)
  {
    unsigned int v7 = 0;
    if ((unsigned __int16)(a3 - 1) <= 0x7Fu)
    {
      unsigned int v9 = *a2;
      uint64_t v4 = v9 & 0xF;
      unsigned int v7 = v9 >> 4;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v10 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        unsigned int v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 44);
        if ((v11 - 1) > 0xA) {
          int v12 = "UNKNOWN";
        }
        else {
          int v12 = off_1002194B0[v11 - 1];
        }
        if ((v4 - 1) > 0xA) {
          unsigned int v13 = "UNKNOWN";
        }
        else {
          unsigned int v13 = off_1002194B0[v4 - 1];
        }
        int v18 = 136316930;
        int v19 = "qiAuth_protocol_sendData";
        __int16 v20 = 1024;
        int v21 = 454;
        __int16 v22 = 1024;
        int v23 = v7;
        __int16 v24 = 1024;
        int v25 = a3;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v4;
        __int16 v32 = 2080;
        int v33 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s:%d ver %d, dataOutLen %d, lastMsgSent %d(%s) -> %d(%s)", (uint8_t *)&v18, 0x3Eu);
      }
      *(_DWORD *)(a1 + 44) = v4;
      qiAuth_util_sendData((const void **)a1, a2, a3);
      uint64_t v5 = 0;
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v14 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = v4 - 1;
    if (v15 > 0xA) {
      uint64_t v16 = "UNKNOWN";
    }
    else {
      uint64_t v16 = off_1002194B0[v15];
    }
    int v18 = 136316674;
    int v19 = "qiAuth_protocol_sendData";
    __int16 v20 = 1024;
    int v21 = 464;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v7;
    __int16 v26 = 1024;
    int v27 = v4;
    __int16 v28 = 2080;
    int v29 = v16;
    __int16 v30 = 1024;
    int v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, ver %d, msgType %d(%s), dataOutLen %d", (uint8_t *)&v18, 0x34u);
  }
  return v5;
}

uint64_t qiAuth_protocol_processIncomingData(uint64_t a1, char *a2, unsigned int a3)
{
  LODWORD(v5) = 0;
  unsigned __int16 v35 = 0;
  uint64_t v6 = 4294967294;
  unsigned int v7 = &unk_100239000;
  if (a1 && a2)
  {
    int v9 = 0;
    int v10 = 0;
    if (a3)
    {
      int v11 = (int *)(a1 + 8);
      if (*(_DWORD *)(a1 + 8) < 2u)
      {
        unsigned int v12 = *a2;
        uint64_t v5 = v12 & 0xF;
        int v10 = v12 >> 4;
        unsigned int v13 = *(UInt8 **)(a1 + 32);
        unsigned int v34 = *(unsigned __int16 *)(a1 + 40);
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v14 = *(NSObject **)(gLogObjects + 472);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v16 = *v11;
          if ((v5 - 1) > 0xA) {
            __int16 v17 = "UNKNOWN";
          }
          else {
            __int16 v17 = off_1002194B0[v5 - 1];
          }
          *(_DWORD *)buf = 136317186;
          int v37 = "qiAuth_protocol_processIncomingData";
          __int16 v38 = 1024;
          int v39 = 327;
          __int16 v40 = 1024;
          int v41 = v16;
          __int16 v42 = 1024;
          int v43 = v10;
          __int16 v44 = 1024;
          *(_DWORD *)int v45 = v5;
          *(_WORD *)&v45[4] = 2080;
          *(void *)&unsigned char v45[6] = v17;
          *(_WORD *)&v45[14] = 1024;
          *(_DWORD *)&v45[16] = a3;
          __int16 v46 = 1024;
          BOOL v47 = v13 != 0;
          __int16 v48 = 1024;
          unsigned int v49 = v34;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s:%d role %d, ver %d, msgType %d(%s), dataInLen %d, _dataOut(%d), _dataOutSize %d", buf, 0x40u);
        }
        int v9 = 0;
        uint64_t v6 = 4294967294;
        if (!v13 || !v34) {
          goto LABEL_29;
        }
        if (!qiAuth_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3)
          || (*(unsigned char *)(a1 + 216) = 0, *(_DWORD *)(a1 + 8)))
        {
          int v9 = 0;
LABEL_29:
          unsigned int v7 = &unk_100239000;
          goto LABEL_30;
        }
        unsigned int v25 = *(_DWORD *)(a1 + 220);
        if ((v25 & 0x80000000) == 0)
        {
          qiAuth_util_cancelTimer((const void **)a1, v25);
          *(_DWORD *)(a1 + 220) = -1;
        }
        switch((int)v5)
        {
          case 1:
            uint64_t v26 = _qiAuth_protocol_handleResponse_DIGESTS(a1, a2, a3, v13, v34, &v35);
            break;
          case 2:
            uint64_t v26 = _qiAuth_protocol_handleResponse_CERTIFICATE(a1, a2, a3, (uint64_t)v13, v34, &v35);
            break;
          case 3:
            uint64_t v26 = _qiAuth_protocol_handleResponse_CHALLENGE_AUTH(a1, (uint64_t)a2, a3, v13, v34, &v35);
            break;
          case 7:
            uint64_t v26 = _qiAuth_protocol_handleResponse_ERROR(a1, a2, a3, (uint64_t)v13, v34, &v35);
            break;
          default:
            int v27 = logObjectForModule_19();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              int v33 = qiAuth_protocol_msgTypeString(v5);
              *(_DWORD *)buf = 136316418;
              int v37 = "qiAuth_protocol_processIncomingData";
              __int16 v38 = 1024;
              int v39 = 365;
              __int16 v40 = 1024;
              int v41 = v10;
              __int16 v42 = 1024;
              int v43 = v5;
              __int16 v44 = 2080;
              *(void *)int v45 = v33;
              *(_WORD *)&v45[8] = 1024;
              *(_DWORD *)&unsigned char v45[10] = a3;
              _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s:%d RX: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d", buf, 0x2Eu);
            }
            int v9 = 0;
            uint64_t v6 = 0xFFFFFFFFLL;
            goto LABEL_29;
        }
        uint64_t v6 = v26;
        unsigned int v7 = (void *)&unk_100239000;
        if (!v26)
        {
          int v28 = v35;
          *(_WORD *)(a1 + 42) = v35;
          if (v28)
          {
            int v9 = *v13 & 0xF;
            if (!*v11)
            {
              unsigned int v29 = qiAuth_protocol_timeoutForRequest(a1, *v13 & 0xF, 0x7Fu);
              uint64_t v30 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
              int v31 = logObjectForModule_19();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315906;
                int v37 = "qiAuth_protocol_processIncomingData";
                __int16 v38 = 1024;
                int v39 = 421;
                __int16 v40 = 1024;
                int v41 = v29;
                __int16 v42 = 1024;
                int v43 = v9;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", buf, 0x1Eu);
              }
              *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer((const void **)a1, v29, (uint64_t)_qiAuth_protocol_timeoutCallback, v30);
            }
            __int16 v32 = logObjectForModule_19();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
              qiAuth_protocol_processIncomingData_cold_2(v9, v32);
            }
            qiAuth_protocol_sendData(a1, v13, v35);
            uint64_t v6 = 0;
            goto LABEL_29;
          }
          uint64_t v6 = 0;
        }
        int v9 = 0;
        goto LABEL_30;
      }
      if (gLogObjects && gNumLogObjects >= 60)
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_processIncomingData_cold_4();
      }
      LODWORD(v5) = 0;
      int v9 = 0;
      int v10 = 0;
      uint64_t v6 = 0xFFFFFFFFLL;
      unsigned int v7 = &unk_100239000;
    }
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
  }
LABEL_30:
  uint64_t v18 = v7[49];
  if (v18 && gNumLogObjects >= 60)
  {
    int v19 = *(NSObject **)(v18 + 472);
  }
  else
  {
    int v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v5 - 1;
    if (v20 > 0xA) {
      int v21 = "UNKNOWN";
    }
    else {
      int v21 = off_1002194B0[v20];
    }
    int v22 = *(_DWORD *)(a1 + 8);
    if ((v9 - 1) > 0xA) {
      int v23 = "UNKNOWN";
    }
    else {
      int v23 = off_1002194B0[v9 - 1];
    }
    *(_DWORD *)buf = 136317698;
    int v37 = "qiAuth_protocol_processIncomingData";
    __int16 v38 = 1024;
    int v39 = 433;
    __int16 v40 = 1024;
    int v41 = v6;
    __int16 v42 = 1024;
    int v43 = v22;
    __int16 v44 = 1024;
    *(_DWORD *)int v45 = v10;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&unsigned char v45[6] = v5;
    *(_WORD *)&unsigned char v45[10] = 2080;
    *(void *)&v45[12] = v21;
    __int16 v46 = 1024;
    BOOL v47 = a3;
    __int16 v48 = 1024;
    unsigned int v49 = v9;
    __int16 v50 = 2080;
    int v51 = v23;
    __int16 v52 = 1024;
    int v53 = v35;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, role %d, ver %d, msgType %d(%s), dataInLen %d, outMsgType %d(%s), dataOutLen %d", buf, 0x50u);
  }
  return v6;
}

BOOL qiAuth_protocol_checkValidMessageHeaderAndSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v5 = a2 >> 4;
  uint64_t v6 = a2 & 0xF;
  if (!a1)
  {
LABEL_12:
    int v9 = -2;
    goto LABEL_13;
  }
  if ((a2 & 0xF0) != 0x10)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v10 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 480;
      __int16 v26 = 1024;
      int v27 = v5;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 2080;
      *(void *)int v31 = qiAuth_protocol_msgTypeString(v6);
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = a2;
      *(_WORD *)&v31[14] = 1024;
      *(_DWORD *)&v31[16] = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s:%d Invalid Version!!! ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", buf, 0x34u);
    }
    goto LABEL_12;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (v8)
  {
    int v9 = -2;
  }
  else
  {
    int v21 = a2 >> 4;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316674;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 486;
      __int16 v26 = 1024;
      int v27 = 1;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 2080;
      *(void *)int v31 = qiAuth_protocol_msgTypeString(v6);
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = a2;
      *(_WORD *)&v31[14] = 1024;
      *(_DWORD *)&v31[16] = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s:%d RX, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", buf, 0x34u);
    }
    switch((int)v6)
    {
      case 1:
        int v9 = -2;
        if (a3 >= 3)
        {
          if ((((_BYTE)a3 + 30) & 0x1F) != 0) {
            int v9 = -2;
          }
          else {
            int v9 = 0;
          }
        }
        break;
      case 2:
        if (a3 <= 1) {
          int v9 = -2;
        }
        else {
          int v9 = 0;
        }
        break;
      case 3:
        BOOL v15 = a3 == 67;
        goto LABEL_41;
      case 7:
        BOOL v15 = a3 == 3;
LABEL_41:
        if (v15) {
          int v9 = 0;
        }
        else {
          int v9 = -2;
        }
        break;
      default:
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v16 = *(NSObject **)(gLogObjects + 472);
        }
        else
        {
          int v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = qiAuth_protocol_msgTypeString(v6);
          *(_DWORD *)buf = 136316674;
          int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
          __int16 v24 = 1024;
          int v25 = 525;
          __int16 v26 = 1024;
          int v27 = 1;
          __int16 v28 = 1024;
          int v29 = v6;
          __int16 v30 = 2080;
          *(void *)int v31 = v20;
          *(_WORD *)&v31[8] = 1024;
          *(_DWORD *)&v31[10] = a2;
          *(_WORD *)&v31[14] = 1024;
          *(_DWORD *)&v31[16] = a3;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s:%d RX: Unexpected MsgType!!! ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", buf, 0x34u);
        }
        int v9 = -2;
        int v5 = v21;
        break;
    }
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  if (v8 >= 2)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v17 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      __int16 v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 8);
      int v19 = qiAuth_protocol_msgTypeString(v6);
      *(_DWORD *)buf = 136317186;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 573;
      __int16 v26 = 1024;
      int v27 = v18;
      __int16 v28 = 1024;
      int v29 = v9;
      __int16 v30 = 1024;
      *(_DWORD *)int v31 = 1;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v6;
      *(_WORD *)&v31[10] = 2080;
      *(void *)&v31[12] = v19;
      __int16 v32 = 1024;
      unsigned int v33 = a2;
      __int16 v34 = 1024;
      unsigned int v35 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s:%d Unknown Role! %d, result %d, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", buf, 0x40u);
    }
  }
LABEL_13:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v11 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if ((v6 - 1) > 0xA) {
      unsigned int v12 = "UNKNOWN";
    }
    else {
      unsigned int v12 = off_1002194B0[v6 - 1];
    }
    *(_DWORD *)buf = 136316930;
    int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
    __int16 v24 = 1024;
    int v25 = 578;
    __int16 v26 = 1024;
    int v27 = v9;
    __int16 v28 = 1024;
    int v29 = v5;
    __int16 v30 = 1024;
    *(_DWORD *)int v31 = v6;
    *(_WORD *)&v31[4] = 2080;
    *(void *)&v31[6] = v12;
    *(_WORD *)&v31[14] = 1024;
    *(_DWORD *)&v31[16] = a2;
    __int16 v32 = 1024;
    unsigned int v33 = a3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s:%d result %d, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", buf, 0x3Au);
  }
  return v9 == 0;
}

uint64_t _qiAuth_protocol_handleResponse_DIGESTS(uint64_t a1, char *a2, unsigned int a3, unsigned char *a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v7 = &unk_100239000;
  unsigned int v8 = &unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v12 = a5;
      unsigned int v13 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      unsigned int v12 = a5;
      unsigned int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_DIGESTS_cold_3();
    }
    int v14 = 0;
    uint64_t inited = 4294967294;
    if (a3 >= 0x22 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v75 = a4;
      int v14 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v16 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        int v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v41 = *(_DWORD *)(a1 + 8);
        int v42 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
        __int16 v79 = 1024;
        int v80 = 1880;
        __int16 v81 = 1024;
        int v82 = v41;
        unsigned int v7 = &unk_100239000;
        __int16 v83 = 1024;
        int v84 = v42;
        unsigned int v8 = &unk_100239000;
        __int16 v85 = 1024;
        *(_DWORD *)int v86 = v14;
        *(_WORD *)&v86[4] = 2080;
        *(void *)&v86[6] = qiAuth_protocol_msgTypeString(v14);
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s:%d role %d, currentSlot %d, msgType %d(%s)", buf, 0x2Eu);
      }
      uint64_t inited = 4294967294;
      if (a6)
      {
        if (v12 >= 0x80 && a4 && v14 == 1)
        {
          char v17 = *a2;
          *a6 = 0;
          *(unsigned char *)(a1 + 224) = 0;
          unsigned int v18 = a2[1];
          int v19 = *(unsigned __int8 *)(a1 + 24);
          int v20 = v19 & (v18 >> 4);
          *(unsigned char *)(a1 + 321) = v19 & (a2[1] >> 4);
          uint64_t v21 = gLogObjects;
          int v22 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v23 = *(NSObject **)(gLogObjects + 472);
          }
          else
          {
            int v23 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v78 = (const char *)v21;
              __int16 v79 = 1024;
              int v80 = v22;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              int v20 = *(unsigned __int8 *)(a1 + 321);
            }
          }
          int v14 = v17 & 0xF;
          int v24 = v18 & 0xF;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
            __int16 v79 = 1024;
            int v80 = 1899;
            __int16 v81 = 1024;
            int v82 = v20;
            __int16 v83 = 1024;
            int v84 = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s:%d rxCertsTXSupportedMask 0x%02x, digestReturnedMask 0x%02x", buf, 0x1Eu);
            int v20 = *(unsigned __int8 *)(a1 + 321);
          }
          if (!v20)
          {
            if (*(unsigned __int8 *)(a1 + 48) >= 4u) {
              unsigned int v40 = 0;
            }
            else {
              unsigned int v40 = *(unsigned __int8 *)(a1 + 48);
            }
            qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v40, 2);
            uint64_t inited = 4294967294;
            unsigned int v8 = (_DWORD *)&unk_100239000;
LABEL_51:
            unsigned int v7 = (void *)&unk_100239000;
            goto LABEL_72;
          }
          int v25 = 0;
          uint64_t inited = 0;
          unsigned __int16 v26 = 0;
          do
          {
            if (((1 << v25) & v24) != 0)
            {
              if (((1 << v25) & *(unsigned __int8 *)(a1 + 24)) != 0) {
                uint64_t inited = qiAuth_protocol_saveDigest(a1, *(_DWORD *)(a1 + 8), v25, &a2[v26 + 2], 32);
              }
              v26 += 32;
            }
            ++v25;
          }
          while (v25 != 4);
          unsigned int v8 = (_DWORD *)&unk_100239000;
          unsigned int v7 = (void *)&unk_100239000;
          if (!inited)
          {
            int v27 = *(unsigned __int8 *)(a1 + 248);
            int v28 = *(unsigned __int8 *)(a1 + 321);
            if (v27 == v28)
            {
              unsigned __int8 v29 = qiAuth_util_policy_challengeFirst(a1);
              unsigned int v30 = qiAuth_util_policy_preferredSlot();
              *(unsigned char *)(a1 + 48) = v30;
              uint64_t v31 = (uint64_t)v75;
              if (v29)
              {
                qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                *(unsigned char *)(a1 + 215) = 0;
                __int16 v32 = logObjectForModule_19();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                {
                  int v33 = *(unsigned __int8 *)(a1 + 48);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  __int16 v79 = 1024;
                  int v80 = 2051;
                  __int16 v81 = 1024;
                  int v82 = v33;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d", buf, 0x18u);
                }
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --nonce--", a1 + 135, 0x10u, 1);
                uint64_t inited = qiAuth_protocol_initMsg_CHALLENGE(v34, *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 48), (_OWORD *)(a1 + 135), 0x10u, (uint64_t)v75, v12, a6);
                if (inited || (int v35 = *a6, v35 != 18))
                {
                  __int16 v36 = logObjectForModule_19();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    int v37 = *(unsigned __int8 *)(a1 + 48);
                    int v38 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                    __int16 v79 = 1024;
                    int v80 = 2066;
                    __int16 v81 = 1024;
                    int v82 = v37;
                    __int16 v83 = 1024;
                    int v84 = inited;
                    __int16 v85 = 1024;
                    *(_DWORD *)int v86 = v38;
                    int v39 = "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
LABEL_88:
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v39, buf, 0x24u);
                    goto LABEL_71;
                  }
                  goto LABEL_71;
                }
LABEL_69:
                uint64_t inited = 0;
                *(_WORD *)(a1 + 1904) = v35;
                long long v55 = *(_OWORD *)v31;
                *(_WORD *)(a1 + 1922) = *(_WORD *)(v31 + 16);
                *(_OWORD *)(a1 + 1906) = v55;
                goto LABEL_72;
              }
              unsigned int v46 = v30;
              uint64_t v47 = a1 + 8 * v30;
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --CertDigest--", *(void *)(v47 + 256), 0x20u, 1);
              if (*(void *)(v47 + 336))
              {
LABEL_65:
                qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                *(unsigned char *)(a1 + 215) = 0;
                __int16 v52 = logObjectForModule_19();
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                {
                  int v53 = *(unsigned __int8 *)(a1 + 48);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  __int16 v79 = 1024;
                  int v80 = 2014;
                  __int16 v81 = 1024;
                  int v82 = v53;
                  _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%s:%d CHALLENGE, currentSlot %d, Cert already available", buf, 0x18u);
                }
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --nonce--", a1 + 135, 0x10u, 1);
                uint64_t inited = qiAuth_protocol_initMsg_CHALLENGE(v54, *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 48), (_OWORD *)(a1 + 135), 0x10u, v31, v12, a6);
                unsigned int v7 = &unk_100239000;
                if (inited || (int v35 = *a6, v35 != 18))
                {
                  __int16 v36 = logObjectForModule_19();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    int v63 = *(unsigned __int8 *)(a1 + 48);
                    int v64 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                    __int16 v79 = 1024;
                    int v80 = 2029;
                    __int16 v81 = 1024;
                    int v82 = v63;
                    __int16 v83 = 1024;
                    int v84 = inited;
                    __int16 v85 = 1024;
                    *(_DWORD *)int v86 = v64;
                    int v39 = "%s:%d CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
                    goto LABEL_88;
                  }
LABEL_71:
                  unsigned int v8 = &unk_100239000;
                  goto LABEL_72;
                }
                goto LABEL_69;
              }
              __int16 v48 = (unsigned __int8 **)(v47 + 256);
              unsigned int v49 = (uint64_t *)(v47 + 336);
              if (!qiAuth_util_certificateExistsCache(a1, v46, *(unsigned __int8 **)(v47 + 256), 0x20u))
              {
                int v51 = logObjectForModule_19();
                uint64_t v31 = (uint64_t)v75;
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  __int16 v79 = 1024;
                  int v80 = 2004;
                  __int16 v81 = 1024;
                  int v82 = v46;
                  _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "%s:%d Cert NOT EXIST in cache! slot %d", buf, 0x18u);
                }
LABEL_64:
                if (*v49) {
                  goto LABEL_65;
                }
                goto LABEL_93;
              }
              char v74 = *(unsigned char *)(a1 + 322);
              __int16 v50 = logObjectForModule_19();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                __int16 v79 = 1024;
                int v80 = 1945;
                __int16 v81 = 1024;
                int v82 = v46;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%s:%d Cert EXIST in cache! slot %d", buf, 0x18u);
              }
              if (!*(unsigned char *)(a1 + 322))
              {
                *unsigned int v49 = a1 + 368;
                CFTypeRef v62 = (_WORD *)(a1 + 2 * v46 + 324);
                *CFTypeRef v62 = 0;
                *(unsigned char *)(a1 + 322) = 1;
                if (qiAuth_util_copyCertificateFromCache(a1, v46, *v48, 0x20u, 0, 0, (UInt8 *)(a1 + 368), 0x600u, (uint64_t)v62))
                {
                  *unsigned int v49 = 0;
                  *CFTypeRef v62 = 0;
                  *(unsigned char *)(a1 + 322) = v74;
                  uint64_t v31 = (uint64_t)v75;
                  goto LABEL_90;
                }
                uint64_t v65 = *v49 + 2;
                uint64_t v66 = *v49 + 34;
                unsigned int v67 = (bswap32(*(unsigned __int16 *)*v49) >> 16) - 34;
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --RootHash--", v65, 0x20u, 1);
                unsigned int v68 = (unsigned __int16)v67;
                unsigned int v8 = (_DWORD *)&unk_100239000;
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertData--", v66, v68, 1);
                int v69 = qiAuth_util_verifyCertificateChain(a1, *(unsigned __int8 *)(a1 + 48), v65, 32, v66, v68);
                uint64_t v31 = (uint64_t)v75;
                if (v69) {
                  goto LABEL_90;
                }
                *(unsigned char *)(a1 + 320) |= 1 << v46;
              }
              uint64_t v31 = (uint64_t)v75;
              if (*v49)
              {
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --CertCacheData--", *v49, *(unsigned __int16 *)(a1 + 2 * v46 + 324), 1);
                goto LABEL_64;
              }
LABEL_90:
              uint64_t v70 = logObjectForModule_19();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                __int16 v79 = 1024;
                int v80 = 1989;
                __int16 v81 = 1024;
                int v82 = v46;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "%s:%d Failed to read cert from cache! slot %d", buf, 0x18u);
              }
              *unsigned int v49 = 0;
              *(_WORD *)(a1 + 2 * v46 + 324) = 0;
              *(unsigned char *)(a1 + 322) = v74;
LABEL_93:
              uint64_t v71 = logObjectForModule_19();
              BOOL v72 = os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
              if (v72)
              {
                int v73 = *(unsigned __int8 *)(a1 + 48);
                *(_DWORD *)buf = 136315650;
                uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                __int16 v79 = 1024;
                int v80 = 2034;
                __int16 v81 = 1024;
                int v82 = v73;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "%s:%d GET_CERTIFICATE, currentSlot %d", buf, 0x18u);
              }
              *(_DWORD *)(a1 + 244) = 8323072;
              uint64_t inited = qiAuth_protocol_initMsg_GET_CERTIFICATE(v72, *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 48), 0, 0x7Fu, (unsigned char *)v31, v12, a6);
              goto LABEL_51;
            }
            unsigned int v43 = v28 & ~v27;
            *(unsigned char *)(a1 + 48) = 4;
            __int16 v44 = logObjectForModule_19();
            BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
            if (v45)
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
              __int16 v79 = 1024;
              int v80 = 1925;
              __int16 v81 = 1024;
              int v82 = v43;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%s:%d Need more digests, GET_DIGESTS, slotRequestMask 0x%x", buf, 0x18u);
            }
            uint64_t inited = qiAuth_protocol_initMsg_GET_DIGESTS(v45, *(unsigned __int8 *)(a1 + 12), v43, v75, v12, a6);
          }
        }
      }
    }
  }
  else
  {
    int v14 = 0;
    uint64_t inited = 4294967294;
  }
LABEL_72:
  uint64_t v56 = v7[49];
  int v57 = v8[100];
  if (v56 && v57 >= 60)
  {
    int v58 = *(NSObject **)(v56 + 472);
  }
  else
  {
    int v58 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 0xA)
    {
      unsigned __int16 v59 = "UNKNOWN";
      if (a6) {
        goto LABEL_80;
      }
    }
    else
    {
      unsigned __int16 v59 = off_1002194B0[v14 - 1];
      if (a6)
      {
LABEL_80:
        int v60 = *a6;
LABEL_83:
        *(_DWORD *)buf = 136316674;
        uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
        __int16 v79 = 1024;
        int v80 = 2080;
        __int16 v81 = 1024;
        int v82 = inited;
        __int16 v83 = 1024;
        int v84 = v14;
        __int16 v85 = 2080;
        *(void *)int v86 = v59;
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)&v86[10] = a3;
        __int16 v87 = 1024;
        int v88 = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v60 = -1;
    goto LABEL_83;
  }
  return inited;
}

uint64_t _qiAuth_protocol_handleResponse_CERTIFICATE(uint64_t a1, unsigned char *a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v8 = &unk_100239000;
  int v9 = (int *)&unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_CERTIFICATE_cold_7();
    }
    int v15 = 0;
    uint64_t inited = 4294967294;
    if (a3 < 2) {
      goto LABEL_72;
    }
    unsigned int v8 = &unk_100239000;
    if (a2 && !*(_DWORD *)(a1 + 8))
    {
      int v15 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        char v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v30 = *(_DWORD *)(a1 + 8);
        int v31 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
        __int16 v71 = 1024;
        int v72 = 2104;
        __int16 v73 = 1024;
        int v74 = v30;
        __int16 v75 = 1024;
        int v76 = v31;
        __int16 v77 = 1024;
        LODWORD(v78) = v15;
        WORD2(v78) = 2080;
        *(void *)((char *)&v78 + 6) = qiAuth_protocol_msgTypeString(v15);
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d role %d, currentSlot %d, msgType %d(%s)", buf, 0x2Eu);
      }
      uint64_t inited = 4294967294;
      if (!a6) {
        goto LABEL_71;
      }
      int v9 = (int *)&unk_100239000;
      unsigned int v8 = &unk_100239000;
      if (a5 >= 0x80)
      {
        if (a4)
        {
          if (v15 == 2)
          {
            int v15 = *a2 & 0xF;
            if (*(unsigned __int8 *)(a1 + 48) <= 3u)
            {
              uint64_t v68 = *(unsigned __int8 *)(a1 + 48);
              if (gLogObjects && gNumLogObjects >= 60)
              {
                unsigned int v18 = *(NSObject **)(gLogObjects + 472);
              }
              else
              {
                unsigned int v18 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
              unsigned int v20 = *(_DWORD *)(a1 + 8);
              if (v19)
              {
                int v21 = *(unsigned __int16 *)(a1 + 244);
                int v22 = *(unsigned __int16 *)(a1 + 246);
                *(_DWORD *)buf = 136316674;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2119;
                __int16 v73 = 1024;
                int v74 = v20;
                __int16 v75 = 1024;
                unsigned int v23 = v68;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v78) = v21;
                WORD2(v78) = 1024;
                *(_DWORD *)((char *)&v78 + 6) = v22;
                WORD5(v78) = 1024;
                HIDWORD(v78) = (unsigned __int16)(a3 - 1);
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d Save certs segment, role %d, slot %d, lastCertOffsetRequest %d, lastCertLenRequest %d, certSegmentLen %d", buf, 0x30u);
                unsigned int v20 = *(_DWORD *)(a1 + 8);
                int v9 = (_DWORD *)&unk_100239000;
              }
              else
              {
                int v9 = (int *)&unk_100239000;
                unsigned int v23 = v68;
              }
              unsigned __int16 v67 = a3 - 1;
              uint64_t Segment = qiAuth_protocol_saveCertNextSegment(a1, v20, v23, a2 + 1, *(unsigned __int16 *)(a1 + 244), (unsigned __int16)(a3 - 1));
              if (Segment)
              {
                uint64_t inited = Segment;
                if (gLogObjects && v9[100] >= 60)
                {
                  int v25 = *(NSObject **)(gLogObjects + 472);
                }
                else
                {
                  int v25 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_72;
                }
                int v28 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)buf = 136316162;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2126;
                __int16 v73 = 1024;
                int v74 = v28;
                __int16 v75 = 1024;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v78) = v67;
                unsigned __int8 v29 = "%s:%d Failed to save certs segment, role %d, slot %d, certSegmentLen %d";
LABEL_44:
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v29, buf, 0x24u);
LABEL_72:
                unsigned int v8 = &unk_100239000;
                goto LABEL_73;
              }
              unsigned int CachedCertLengthFromHeader = _qiAuth_protocol_getCachedCertLengthFromHeader(a1, v23);
              if (gLogObjects && v9[100] >= 60)
              {
                int v27 = *(NSObject **)(gLogObjects + 472);
              }
              else
              {
                int v27 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
              {
                int v59 = *(_DWORD *)(a1 + 8);
                int v60 = *(unsigned __int16 *)(a1 + 244);
                int v61 = *(unsigned __int16 *)(a1 + 246);
                *(_DWORD *)buf = 136316930;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2131;
                __int16 v73 = 1024;
                int v74 = v59;
                __int16 v75 = 1024;
                uint64_t v32 = v68;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v78) = v60;
                WORD2(v78) = 1024;
                *(_DWORD *)((char *)&v78 + 6) = v61;
                WORD5(v78) = 1024;
                HIDWORD(v78) = v67;
                LOWORD(v79[0]) = 1024;
                *(_DWORD *)((char *)v79 + 2) = CachedCertLengthFromHeader;
                _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, lastCertOffsetRequest %d, lastCertLenRequest %d, certSegmentLen %d, maxCertLen %d", buf, 0x36u);
                int v9 = (_DWORD *)&unk_100239000;
              }
              else
              {
                int v9 = (_DWORD *)&unk_100239000;
                uint64_t v32 = v68;
              }
              unsigned int v8 = (void *)&unk_100239000;
              if (CachedCertLengthFromHeader >= 2)
              {
                *a6 = 0;
                *(unsigned char *)(a1 + 224) = 0;
                int v33 = (unsigned __int16 *)(a1 + 2 * v32 + 324);
                if (CachedCertLengthFromHeader <= *v33)
                {
                  int v37 = logObjectForModule_19();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                  {
                    int v38 = *v33;
                    *(_DWORD *)buf = 136315906;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2142;
                    __int16 v73 = 1024;
                    int v74 = v68;
                    __int16 v75 = 1024;
                    int v76 = v38;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s:%d Got all certs segments, CHALLENGE, slot %d, rxCertsLen %d", buf, 0x1Eu);
                  }
                  int v39 = *(unsigned __int16 **)(a1 + 8 * v68 + 336);
                  uint64_t v40 = (uint64_t)(v39 + 1);
                  unsigned int v41 = *v39;
                  v39 += 17;
                  qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --RootHash--", v40, 0x20u, 1);
                  unsigned int v42 = (unsigned __int16)((bswap32(v41) >> 16) - 34);
                  qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --CertData--", (uint64_t)v39, v42, 1);
                  uint64_t v43 = qiAuth_util_verifyCertificateChain(a1, *(unsigned __int8 *)(a1 + 48), v40, 32, (uint64_t)v39, v42);
                  if (v43)
                  {
                    uint64_t inited = v43;
                    __int16 v44 = logObjectForModule_19();
                    int v9 = (_DWORD *)&unk_100239000;
                    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                      _qiAuth_protocol_handleResponse_CERTIFICATE_cold_2();
                    }
                    qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v68, 2);
                    goto LABEL_72;
                  }
                  *(unsigned char *)(a1 + 320) |= 1 << v68;
                  if (!*(unsigned char *)(a1 + 215))
                  {
                    qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                    qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --nonce--", a1 + 135, 0x10u, 1);
                    uint64_t inited = qiAuth_protocol_initMsg_CHALLENGE(v62, *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 48), (_OWORD *)(a1 + 135), 0x10u, a4, a5, a6);
                    int v9 = (_DWORD *)&unk_100239000;
                    if (!inited && *a6 == 18)
                    {
                      uint64_t inited = 0;
                      *(_WORD *)(a1 + 1904) = 18;
                      long long v63 = *(_OWORD *)a4;
                      *(_WORD *)(a1 + 1922) = *(_WORD *)(a4 + 16);
                      *(_OWORD *)(a1 + 1906) = v63;
                      goto LABEL_72;
                    }
                    int v25 = logObjectForModule_19();
                    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_72;
                    }
                    int v64 = *(unsigned __int8 *)(a1 + 48);
                    int v65 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2177;
                    __int16 v73 = 1024;
                    int v74 = v64;
                    __int16 v75 = 1024;
                    int v76 = inited;
                    __int16 v77 = 1024;
                    LODWORD(v78) = v65;
                    unsigned __int8 v29 = "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
                    goto LABEL_44;
                  }
                  uint64_t inited = _qiAuth_protocol_finishAuth(a1);
                }
                else
                {
                  unsigned int v34 = *(unsigned __int16 *)(a1 + 246);
                  int v35 = logObjectForModule_19();
                  if ((unsigned __int16)(a3 - 1) <= v34)
                  {
                    BOOL v45 = v35;
                    int v9 = (_DWORD *)&unk_100239000;
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
                    {
                      int v46 = *v33;
                      *(_DWORD *)buf = 136315906;
                      uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                      __int16 v71 = 1024;
                      int v72 = 2196;
                      __int16 v73 = 1024;
                      int v74 = v68;
                      __int16 v75 = 1024;
                      int v76 = v46;
                      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "%s:%d Get next certs segment, GET_CERTIFICATE, slot %d, rxCertsLen %d", buf, 0x1Eu);
                    }
                    __int16 v47 = *v33;
                    *(_WORD *)(a1 + 244) = *v33;
                    unsigned int v48 = (unsigned __int16)(CachedCertLengthFromHeader - v47);
                    if (v48 >= 0x7F) {
                      LOWORD(v48) = 127;
                    }
                    *(_WORD *)(a1 + 246) = v48;
                    unsigned int v49 = logObjectForModule_19();
                    BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_INFO);
                    if (v50)
                    {
                      int v51 = *v33;
                      int v52 = *(unsigned __int16 *)(a1 + 244);
                      int v53 = *(unsigned __int16 *)(a1 + 246);
                      *(_DWORD *)buf = 136316674;
                      uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                      __int16 v71 = 1024;
                      int v72 = 2206;
                      __int16 v73 = 1024;
                      int v74 = v68;
                      __int16 v75 = 1024;
                      int v76 = v51;
                      __int16 v77 = 1024;
                      LODWORD(v78) = v52;
                      WORD2(v78) = 1024;
                      *(_DWORD *)((char *)&v78 + 6) = v53;
                      WORD5(v78) = 1024;
                      HIDWORD(v78) = CachedCertLengthFromHeader;
                      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "%s:%d Get next certs segment, GET_CERTIFICATE, slot %d, rxCertsLen %d, lastCertOffsetRequest %d, lastCertLenRequest %d, maxCertLen %d", buf, 0x30u);
                    }
                    uint64_t inited = qiAuth_protocol_initMsg_GET_CERTIFICATE(v50, *(unsigned __int8 *)(a1 + 12), v68, *(unsigned __int16 *)(a1 + 244), *(unsigned __int16 *)(a1 + 246), (unsigned char *)a4, a5, a6);
                    goto LABEL_72;
                  }
                  __int16 v36 = v35;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    int v66 = *v33;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2215;
                    __int16 v73 = 1024;
                    int v74 = v68;
                    __int16 v75 = 1024;
                    int v76 = (unsigned __int16)(a3 - 1);
                    __int16 v77 = 1024;
                    LODWORD(v78) = v66;
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%s:%d Invalid segment length! GET_CERTIFICATE, slot %d, certSegmentLen %d, rxCertsLen %d", buf, 0x24u);
                  }
                  uint64_t inited = 0xFFFFFFFFLL;
                }
LABEL_71:
                int v9 = (int *)&unk_100239000;
                goto LABEL_72;
              }
              uint64_t inited = 0;
            }
          }
        }
      }
    }
  }
  else
  {
    int v15 = 0;
    uint64_t inited = 4294967294;
  }
LABEL_73:
  uint64_t v54 = v8[49];
  if (v54 && v9[100] >= 60)
  {
    long long v55 = *(NSObject **)(v54 + 472);
  }
  else
  {
    long long v55 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 0xA)
    {
      uint64_t v56 = "UNKNOWN";
      if (a6) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v56 = off_1002194B0[v15 - 1];
      if (a6)
      {
LABEL_81:
        int v57 = *a6;
LABEL_84:
        *(_DWORD *)buf = 136316674;
        uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
        __int16 v71 = 1024;
        int v72 = 2222;
        __int16 v73 = 1024;
        int v74 = inited;
        __int16 v75 = 1024;
        int v76 = v15;
        __int16 v77 = 2080;
        *(void *)&long long v78 = v56;
        WORD4(v78) = 1024;
        *(_DWORD *)((char *)&v78 + 10) = a3;
        HIWORD(v78) = 1024;
        v79[0] = v57;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v57 = -1;
    goto LABEL_84;
  }
  return inited;
}

uint64_t _qiAuth_protocol_handleResponse_CHALLENGE_AUTH(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v8 = (int *)&unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v13 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      unsigned int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_CHALLENGE_AUTH_cold_7();
    }
    int v14 = 0;
    uint64_t v15 = 4294967294;
    LODWORD(v16) = 4;
    if (a3 == 67 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v14 = *(unsigned char *)a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        char v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(a1 + 8);
        int v30 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
        __int16 v48 = 1024;
        int v49 = 2246;
        __int16 v50 = 1024;
        int v51 = v29;
        __int16 v52 = 1024;
        *(_DWORD *)int v53 = v30;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)&v53[6] = v14;
        *(_WORD *)&v53[10] = 2080;
        *(void *)&v53[12] = qiAuth_protocol_msgTypeString(v14);
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d role %d, currentSlot %d, msgType %d(%s)", buf, 0x2Eu);
      }
      uint64_t v15 = 4294967294;
      LODWORD(v16) = 4;
      if (a6)
      {
        unsigned int v8 = (_DWORD *)&unk_100239000;
        if (a5 >= 0x80 && a4 && v14 == 3)
        {
          int v18 = *(unsigned char *)(a2 + 1) & 0xF;
          unsigned __int8 v45 = *(unsigned char *)(a2 + 2);
          uint64_t v16 = *(unsigned __int8 *)(a1 + 48);
          *a6 = 0;
          *(unsigned char *)(a1 + 224) = 0;
          *(_WORD *)(a1 + 1924) = 67;
          long long v19 = *(_OWORD *)(a2 + 16);
          long long v20 = *(_OWORD *)(a2 + 32);
          long long v21 = *(_OWORD *)(a2 + 48);
          *(_DWORD *)(a1 + 1989) = *(_DWORD *)(a2 + 63);
          *(_OWORD *)(a1 + 1958) = v20;
          *(_OWORD *)(a1 + 1974) = v21;
          *(_OWORD *)(a1 + 1942) = v19;
          *(_OWORD *)(a1 + 1926) = *(_OWORD *)a2;
          long long v22 = *(_OWORD *)(a2 + 3);
          long long v23 = *(_OWORD *)(a2 + 19);
          long long v24 = *(_OWORD *)(a2 + 35);
          *(_OWORD *)(a1 + 199) = *(_OWORD *)(a2 + 51);
          *(_OWORD *)(a1 + 183) = v24;
          *(_OWORD *)(a1 + 167) = v23;
          *(_OWORD *)(a1 + 151) = v22;
          *(unsigned char *)(a1 + 215) = 1;
          if (!*(unsigned char *)(a1 + 321)) {
            *(unsigned char *)(a1 + 321) = v18;
          }
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v25 = *(NSObject **)(gLogObjects + 472);
          }
          else
          {
            int v25 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316674;
            __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
            __int16 v48 = 1024;
            int v49 = 2273;
            __int16 v50 = 1024;
            int v51 = 3;
            __int16 v52 = 2080;
            *(void *)int v53 = "CHALLENGE_AUTH";
            *(_WORD *)&v53[8] = 1024;
            *(_DWORD *)&v53[10] = v16;
            *(_WORD *)&v53[14] = 1024;
            *(_DWORD *)&v53[16] = v18;
            __int16 v54 = 1024;
            int v55 = v45;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s:%d msgType %d(%s), slot %d, slotPopMask %x, certChainHashLSB %02x", buf, 0x34u);
          }
          uint64_t v26 = a1 + 8 * v16;
          if (*(void *)(v26 + 336)) {
            goto LABEL_45;
          }
          int v27 = (void *)(v26 + 336);
          if (qiAuth_util_certificateExistsCache(a1, v16, &v45, 1u))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              int v28 = *(NSObject **)(gLogObjects + 472);
            }
            else
            {
              int v28 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
              __int16 v48 = 1024;
              int v49 = 2279;
              __int16 v50 = 1024;
              int v51 = v16;
              __int16 v52 = 1024;
              *(_DWORD *)int v53 = v45;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%s:%d Found in cache! slot %d, certChainHashLSB %02x", buf, 0x1Eu);
            }
            if (!*(unsigned char *)(a1 + 322))
            {
              *int v27 = a1 + 368;
              int v37 = (_WORD *)(a1 + 2 * v16 + 324);
              *int v37 = 0;
              *(unsigned char *)(a1 + 322) = 1;
              uint64_t v38 = a1 + 8 * v16;
              if (qiAuth_util_copyCertificateFromCache(a1, v16, &v45, 1u, *(UInt8 **)(v38 + 256), 0x20u, (UInt8 *)(a1 + 368), 0x600u, (uint64_t)v37))
              {
                *int v27 = 0;
                *int v37 = 0;
                *(unsigned char *)(a1 + 322) = 0;
                goto LABEL_69;
              }
              unsigned int v41 = (uint64_t *)(v38 + 256);
              uint64_t v42 = *v27 + 2;
              uint64_t v43 = *v27 + 34;
              unsigned int v44 = (bswap32(*(unsigned __int16 *)*v27) >> 16) - 34;
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertDigest--", *v41, 0x20u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --RootHash--", v42, 0x20u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertData--", v43, (unsigned __int16)v44, 1);
              if (!qiAuth_util_verifyCertificateChain(a1, *(unsigned __int8 *)(a1 + 48), v42, 32, v43, (unsigned __int16)v44))*(unsigned char *)(a1 + 320) |= 1 << v16; {
            }
              }
          }
          if (*v27)
          {
LABEL_45:
            unsigned int v8 = (int *)&unk_100239000;
            if (gLogObjects && gNumLogObjects >= 60)
            {
              int v31 = *(NSObject **)(gLogObjects + 472);
            }
            else
            {
              int v31 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
              __int16 v48 = 1024;
              int v49 = 2328;
              __int16 v50 = 1024;
              int v51 = v16;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s:%d Have cert for slot %d !!! verify signature", buf, 0x18u);
            }
            uint64_t inited = _qiAuth_protocol_finishAuth(a1);
LABEL_53:
            uint64_t v15 = inited;
            int v14 = 3;
            goto LABEL_54;
          }
LABEL_69:
          unsigned int v8 = (int *)&unk_100239000;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v39 = *(NSObject **)(gLogObjects + 472);
          }
          else
          {
            int v39 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
            __int16 v48 = 1024;
            int v49 = 2334;
            __int16 v50 = 1024;
            int v51 = v16;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%s:%d No cert for slot %d !!! need GET_CERTIFICATE", buf, 0x18u);
          }
          uint64_t v40 = qiAuth_util_policy_preferredSlot();
          *(unsigned char *)(a1 + 48) = v40;
          *(_DWORD *)(a1 + 244) = 8323072;
          uint64_t inited = qiAuth_protocol_initMsg_GET_CERTIFICATE(v40, *(unsigned __int8 *)(a1 + 12), v16, 0, 0x7Fu, a4, a5, a6);
          goto LABEL_53;
        }
      }
      else
      {
        unsigned int v8 = (_DWORD *)&unk_100239000;
      }
    }
  }
  else
  {
    int v14 = 0;
    uint64_t v15 = 4294967294;
    LODWORD(v16) = 4;
  }
LABEL_54:
  if (gLogObjects && v8[100] >= 60)
  {
    int v33 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v33 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 0xA)
    {
      unsigned int v34 = "UNKNOWN";
      if (a6) {
        goto LABEL_62;
      }
    }
    else
    {
      unsigned int v34 = off_1002194B0[v14 - 1];
      if (a6)
      {
LABEL_62:
        int v35 = *a6;
LABEL_65:
        *(_DWORD *)buf = 136316930;
        __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
        __int16 v48 = 1024;
        int v49 = 2349;
        __int16 v50 = 1024;
        int v51 = v15;
        __int16 v52 = 1024;
        *(_DWORD *)int v53 = v14;
        *(_WORD *)&v53[4] = 2080;
        *(void *)&v53[6] = v34;
        *(_WORD *)&v53[14] = 1024;
        *(_DWORD *)&v53[16] = v16;
        __int16 v54 = 1024;
        int v55 = a3;
        __int16 v56 = 1024;
        int v57 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), slot %d, dataInLen %u, dataOutLen %u", buf, 0x3Au);
        return v15;
      }
    }
    int v35 = -1;
    goto LABEL_65;
  }
  return v15;
}

uint64_t _qiAuth_protocol_handleResponse_ERROR(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, unsigned int a5, _WORD *a6)
{
  unsigned int v8 = &unk_100239000;
  int v9 = (int *)&unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_ERROR_cold_8();
    }
    int v15 = 0;
    uint64_t v16 = 4294967294;
    unsigned int v8 = &unk_100239000;
    if (a3 == 3 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v15 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        char v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v31 = *(_DWORD *)(a1 + 8);
        int v32 = *(unsigned __int8 *)(a1 + 48);
        int v50 = 136316418;
        int v51 = "_qiAuth_protocol_handleResponse_ERROR";
        __int16 v52 = 1024;
        int v53 = 2372;
        __int16 v54 = 1024;
        int v55 = v31;
        __int16 v56 = 1024;
        int v57 = v32;
        __int16 v58 = 1024;
        *(_DWORD *)int v59 = v15;
        *(_WORD *)&v59[4] = 2080;
        *(void *)&v59[6] = qiAuth_protocol_msgTypeString(v15);
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d role %d, currentSlot %d, msgType %d(%s)", (uint8_t *)&v50, 0x2Eu);
      }
      uint64_t v16 = 4294967294;
      if (a6)
      {
        int v9 = (int *)&unk_100239000;
        unsigned int v8 = &unk_100239000;
        if (a5 >= 0x80 && a4 && v15 == 7)
        {
          *a6 = 0;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v18 = *(NSObject **)(gLogObjects + 472);
          }
          else
          {
            int v18 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = a2[1];
            int v20 = a2[2];
            int v50 = 136316162;
            int v51 = "_qiAuth_protocol_handleResponse_ERROR";
            __int16 v52 = 1024;
            int v53 = 2382;
            __int16 v54 = 1024;
            int v55 = 7;
            __int16 v56 = 1024;
            int v57 = v19;
            __int16 v58 = 1024;
            *(_DWORD *)int v59 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X", (uint8_t *)&v50, 0x24u);
          }
          switch(a2[1])
          {
            case 0:
            case 1:
            case 4:
              goto LABEL_34;
            case 2:
              if (gLogObjects && gNumLogObjects >= 60)
              {
                long long v24 = *(NSObject **)(gLogObjects + 472);
              }
              else
              {
                long long v24 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                int v44 = a2[1];
                int v45 = a2[2];
                int v46 = *(unsigned __int8 *)(a1 + 224);
                int v50 = 136316418;
                int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                __int16 v52 = 1024;
                int v53 = 2403;
                __int16 v54 = 1024;
                int v55 = 7;
                __int16 v56 = 1024;
                int v57 = v44;
                __int16 v58 = 1024;
                *(_DWORD *)int v59 = v45;
                *(_WORD *)&v59[4] = 1024;
                *(_DWORD *)&v59[6] = v46;
                _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d", (uint8_t *)&v50, 0x2Au);
              }
              if (*(unsigned char *)(a1 + 224))
              {
                int v33 = logObjectForModule_19();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  int v34 = a2[1];
                  int v35 = a2[2];
                  int v36 = *(unsigned __int8 *)(a1 + 224);
                  int v50 = 136316418;
                  int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  __int16 v52 = 1024;
                  int v53 = 2419;
                  __int16 v54 = 1024;
                  int v55 = 7;
                  __int16 v56 = 1024;
                  int v57 = v34;
                  __int16 v58 = 1024;
                  *(_DWORD *)int v59 = v35;
                  *(_WORD *)&v59[4] = 1024;
                  *(_DWORD *)&v59[6] = v36;
                  _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d, Already retried, fail auth.", (uint8_t *)&v50, 0x2Au);
                }
LABEL_34:
                if (*(unsigned __int8 *)(a1 + 48) >= 4u) {
                  unsigned int v21 = 0;
                }
                else {
                  unsigned int v21 = *(unsigned __int8 *)(a1 + 48);
                }
                uint64_t v22 = qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v21, 2);
              }
              else
              {
                *(unsigned char *)(a1 + 224) = 1;
                uint64_t v43 = logObjectForModule_19();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  int v47 = a2[1];
                  int v48 = a2[2];
                  int v49 = *(unsigned __int8 *)(a1 + 224);
                  int v50 = 136316418;
                  int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  __int16 v52 = 1024;
                  int v53 = 2411;
                  __int16 v54 = 1024;
                  int v55 = 7;
                  __int16 v56 = 1024;
                  int v57 = v47;
                  __int16 v58 = 1024;
                  *(_DWORD *)int v59 = v48;
                  *(_WORD *)&v59[4] = 1024;
                  *(_DWORD *)&v59[6] = v49;
                  _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d, Retry once!", (uint8_t *)&v50, 0x2Au);
                }
                uint64_t v22 = qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
              }
              uint64_t v16 = v22;
LABEL_69:
              int v15 = 7;
              break;
            case 3:
              unsigned int v25 = qiAuth_protocol_timeoutForRequest(a1, *(_DWORD *)(a1 + 44) & 0xF, 0x7Fu);
              uint64_t v26 = *(unsigned __int8 *)(a1 + 48);
              if ((*(_DWORD *)(a1 + 220) & 0x80000000) == 0)
              {
                int v27 = logObjectForModule_19();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  int v28 = *(_DWORD *)(a1 + 44);
                  int v50 = 136315906;
                  int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  __int16 v52 = 1024;
                  int v53 = 2437;
                  __int16 v54 = 1024;
                  int v55 = v25;
                  __int16 v56 = 1024;
                  int v57 = v28;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s:%d Cancel responseTimer, %u ms, outMsgType %u", (uint8_t *)&v50, 0x1Eu);
                }
                qiAuth_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 220));
              }
              uint64_t v29 = (v26 << 16) | 2;
              if (gLogObjects && gNumLogObjects >= 60)
              {
                int v30 = *(NSObject **)(gLogObjects + 472);
              }
              else
              {
                int v30 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                int v37 = *(_DWORD *)(a1 + 44);
                int v50 = 136315906;
                int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                __int16 v52 = 1024;
                int v53 = 2441;
                __int16 v54 = 1024;
                int v55 = v25;
                __int16 v56 = 1024;
                int v57 = v37;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", (uint8_t *)&v50, 0x1Eu);
              }
              uint64_t v16 = 0;
              *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer((const void **)a1, v25, (uint64_t)_qiAuth_protocol_timeoutCallback, v29);
              goto LABEL_69;
            default:
              if (gLogObjects && gNumLogObjects >= 60)
              {
                long long v23 = *(NSObject **)(gLogObjects + 472);
              }
              else
              {
                long long v23 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                _qiAuth_protocol_handleResponse_ERROR_cold_2();
              }
              int v15 = 7;
              goto LABEL_6;
          }
        }
      }
      else
      {
        int v9 = (_DWORD *)&unk_100239000;
        unsigned int v8 = (void *)&unk_100239000;
      }
    }
  }
  else
  {
    int v15 = 0;
LABEL_6:
    uint64_t v16 = 4294967294;
  }
  uint64_t v38 = v8[49];
  if (v38 && v9[100] >= 60)
  {
    int v39 = *(NSObject **)(v38 + 472);
  }
  else
  {
    int v39 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 0xA)
    {
      uint64_t v40 = "UNKNOWN";
      if (a6) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v40 = off_1002194B0[v15 - 1];
      if (a6)
      {
LABEL_78:
        int v41 = (unsigned __int16)*a6;
LABEL_81:
        int v50 = 136316674;
        int v51 = "_qiAuth_protocol_handleResponse_ERROR";
        __int16 v52 = 1024;
        int v53 = 2459;
        __int16 v54 = 1024;
        int v55 = v16;
        __int16 v56 = 1024;
        int v57 = v15;
        __int16 v58 = 2080;
        *(void *)int v59 = v40;
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = a3;
        __int16 v60 = 1024;
        int v61 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", (uint8_t *)&v50, 0x34u);
        return v16;
      }
    }
    int v41 = -1;
    goto LABEL_81;
  }
  return v16;
}

uint64_t qiAuth_protocol_setSlotAuthState(unsigned __int8 *a1, unsigned int a2, int a3)
{
  uint64_t v5 = 4294967294;
  if (a1 && a2 <= 3)
  {
    unsigned int v7 = &a1[4 * a2];
    unsigned int v10 = *((_DWORD *)v7 + 57);
    unsigned int v8 = (int *)(v7 + 228);
    unsigned int v9 = v10;
    *unsigned int v8 = a3;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v11 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = 136316162;
      int v35 = "qiAuth_protocol_setSlotAuthState";
      __int16 v36 = 1024;
      int v37 = 594;
      __int16 v38 = 1024;
      int v39 = a2;
      __int16 v40 = 1024;
      unsigned int v41 = v9;
      __int16 v42 = 1024;
      int v43 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s:%d slot %d, authState %d -> %d", (uint8_t *)&v34, 0x24u);
    }
    if (v9 == a3) {
      goto LABEL_46;
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v12 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      unsigned int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = a1[248];
      int v14 = &a1[8 * a2];
      BOOL v15 = *((void *)v14 + 32) != 0;
      int v16 = a1[320];
      LODWORD(v14) = *((void *)v14 + 42) != 0;
      int v17 = *(unsigned __int16 *)&a1[2 * a2 + 324];
      int v34 = 136317186;
      int v35 = "qiAuth_protocol_setSlotAuthState";
      __int16 v36 = 1024;
      int v37 = 604;
      __int16 v38 = 1024;
      int v39 = a2;
      __int16 v40 = 1024;
      unsigned int v41 = a3;
      __int16 v42 = 1024;
      int v43 = v13;
      __int16 v44 = 1024;
      BOOL v45 = v15;
      __int16 v46 = 1024;
      int v47 = v16;
      __int16 v48 = 1024;
      int v49 = (int)v14;
      __int16 v50 = 1024;
      int v51 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s:%d slot %d, authState %d, rxDigestsRetrievedMask 0x%x, rxDigests(%d), rxCertsAvailbleMask 0x%x, rxCerts(%d), len %d", (uint8_t *)&v34, 0x3Cu);
    }
    int v18 = *v8;
    if (*v8 == 1)
    {
      if (((1 << a2) & a1[248]) == 0
        || (int v19 = &a1[8 * a2], !*((void *)v19 + 32))
        || ((1 << a2) & a1[320]) == 0
        || (int v20 = &a1[8 * a2], !*((void *)v20 + 42))
        || (unsigned int v21 = &a1[2 * a2], !*((_WORD *)v21 + 162)))
      {
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (!gLogObjects) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      uint64_t v22 = (unsigned __int8 **)(v19 + 256);
      long long v23 = (const UInt8 **)(v20 + 336);
      long long v24 = (unsigned __int16 *)(v21 + 324);
      unsigned int v25 = logObjectForModule_19();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v26 = *v24;
        int v34 = 136315906;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 613;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s:%d slot %d, Save cert in cache!! certsLen %d", (uint8_t *)&v34, 0x1Eu);
      }
      qiAuth_util_saveCertificateInCache((uint64_t)a1, a2, *v22, 0x20u, *v23, *v24);
      int v18 = *v8;
    }
    uint64_t v27 = gLogObjects;
    int v28 = gNumLogObjects;
    if (!v18)
    {
LABEL_38:
      if (v27 && v28 >= 60)
      {
        int v31 = *(NSObject **)(v27 + 472);
      }
      else
      {
        int v31 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        int v34 = 136315906;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 630;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = a3;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s:%d slot %d, notify system of authState %d", (uint8_t *)&v34, 0x1Eu);
      }
      qiAuth_util_notifySlotAuthState((uint64_t)a1, a2, a3);
LABEL_46:
      uint64_t v5 = 0;
      goto LABEL_47;
    }
    if (!gLogObjects) {
      goto LABEL_33;
    }
LABEL_31:
    if (v28 >= 60)
    {
      uint64_t v29 = *(NSObject **)(v27 + 472);
LABEL_35:
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        unsigned int v30 = a1[48];
        int v34 = 136316162;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 623;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = v30;
        __int16 v42 = 1024;
        int v43 = 4;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s:%d slot %d, done with auth, clear currenSlot %d -> %d", (uint8_t *)&v34, 0x24u);
      }
      a1[48] = 4;
      uint64_t v27 = gLogObjects;
      int v28 = gNumLogObjects;
      goto LABEL_38;
    }
LABEL_33:
    uint64_t v29 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    goto LABEL_35;
  }
LABEL_47:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v32 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v32 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    int v34 = 136316162;
    int v35 = "qiAuth_protocol_setSlotAuthState";
    __int16 v36 = 1024;
    int v37 = 637;
    __int16 v38 = 1024;
    int v39 = v5;
    __int16 v40 = 1024;
    unsigned int v41 = a2;
    __int16 v42 = 1024;
    int v43 = a3;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s:%d result %d, slot %d, authState %d", (uint8_t *)&v34, 0x24u);
  }
  return v5;
}

const char *qiAuth_protocol_authStateString(int a1)
{
  if ((a1 - 1) > 2) {
    id v1 = "UNKNOWN";
  }
  else {
    id v1 = off_100219498[a1 - 1];
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFDataRef v2 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFDataRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    qiAuth_protocol_authStateString_cold_1();
  }
  return v1;
}

uint64_t qiAuth_protocol_saveDigest(uint64_t a1, int a2, unsigned int a3, _OWORD *a4, int a5)
{
  uint64_t v7 = 4294967294;
  if (a1 && a3 <= 3 && ((1 << a3) & *(unsigned __int8 *)(a1 + 24)) != 0)
  {
    if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v8 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        unsigned int v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_saveDigest_cold_2();
      }
      uint64_t v7 = 4294967294;
    }
    else if (a4 && a5 == 32 && !*(unsigned char *)(a1 + 249))
    {
      uint64_t v7 = 0;
      *(void *)(a1 + 8 * a3 + 256) = a1 + 288;
      long long v9 = a4[1];
      *(_OWORD *)(a1 + 288) = *a4;
      *(_OWORD *)(a1 + 304) = v9;
      *(unsigned char *)(a1 + 249) = 1;
      *(unsigned char *)(a1 + 248) |= 1 << a3;
    }
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v10 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    unsigned int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136316162;
    int v13 = "qiAuth_protocol_saveDigest";
    __int16 v14 = 1024;
    int v15 = 922;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    unsigned int v21 = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s:%d Result %d, role %d, slot %d", (uint8_t *)&v12, 0x24u);
  }
  return v7;
}

uint64_t qiAuth_protocol_saveCertNextSegment(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, unsigned int a6)
{
  unsigned int __n = a6;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v11 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int __n_4 = 136316418;
    int v32 = "qiAuth_protocol_saveCertNextSegment";
    __int16 v33 = 1024;
    int v34 = 1032;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 1024;
    unsigned int v38 = a3;
    __int16 v39 = 1024;
    unsigned int v40 = a5;
    __int16 v41 = 1024;
    unsigned int v42 = __n;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, offset %d, length %d", (uint8_t *)&__n_4, 0x2Au);
  }
  uint64_t v12 = 4294967294;
  if (a1 && a3 <= 3 && ((*(unsigned __int8 *)(a1 + 24) >> a3) & 1) != 0)
  {
    if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v13 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        int v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_saveCertNextSegment_cold_3();
      }
      uint64_t v12 = 4294967294;
      goto LABEL_28;
    }
    if (!a4 || a5 > 0x600 || __n > 0x600 || __n + a5 > 0x600) {
      goto LABEL_28;
    }
    __int16 v14 = (void *)(a1 + 8 * a3 + 336);
    if (*v14)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v15 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1062;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d Already have slot assigned, role %d, slot %d, offset %d, length %d", (uint8_t *)&__n_4, 0x2Au);
      }
      __int16 v14 = (void *)(a1 + 8 * a3 + 336);
      if (!*v14)
      {
        uint64_t v12 = 0;
        goto LABEL_28;
      }
      uint64_t v23 = a3;
      int v24 = *(unsigned __int16 *)(a1 + 2 * a3 + 324);
    }
    else
    {
      int v18 = *(unsigned __int8 *)(a1 + 322);
      int v19 = logObjectForModule_19();
      __int16 v20 = v19;
      if (v18)
      {
        uint64_t v12 = 0xFFFFFFFFLL;
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        int __n_4 = 136316674;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1057;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        __int16 v43 = 1024;
        int v44 = -1;
        unsigned int v21 = "%s:%d rxCerts failed to init, role %d, slot %d, offset %d, length %d, result %d";
        uint64_t v22 = v20;
        goto LABEL_55;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1048;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s:%d rxCerts init, role %d, slot %d, offset %d, length %d", (uint8_t *)&__n_4, 0x2Au);
      }
      int v24 = 0;
      unsigned __int8 v25 = *(unsigned char *)(a1 + 322);
      void *v14 = a1 + 1536 * v25 + 368;
      uint64_t v23 = a3;
      *(_WORD *)(a1 + 2 * a3 + 324) = 0;
      *(unsigned char *)(a1 + 322) = v25 + 1;
    }
    unsigned int v26 = (_WORD *)(a1 + 2 * v23 + 324);
    uint64_t v27 = logObjectForModule_19();
    int v28 = v27;
    if (v24 == a5)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1071;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "%s:%d Save certSegment in rxCerts, role %d, slot %d, offset %d, length %d", (uint8_t *)&__n_4, 0x2Au);
      }
      memcpy((void *)(*v14 + a5), a4, __n);
      uint64_t v12 = 0;
      *v26 += __n;
      goto LABEL_28;
    }
    uint64_t v12 = 0xFFFFFFFFLL;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    unsigned int v29 = (unsigned __int16)*v26;
    int __n_4 = 136316674;
    int v32 = "qiAuth_protocol_saveCertNextSegment";
    __int16 v33 = 1024;
    int v34 = 1081;
    __int16 v35 = 1024;
    int v36 = a5;
    __int16 v37 = 1024;
    unsigned int v38 = v29;
    __int16 v39 = 1024;
    unsigned int v40 = 0;
    __int16 v41 = 1024;
    unsigned int v42 = a3;
    __int16 v43 = 1024;
    int v44 = -1;
    unsigned int v21 = "%s:%d offset(%d) not in sequence(%d)! role %d, slot %d, result %d";
    uint64_t v22 = v28;
LABEL_55:
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&__n_4, 0x30u);
  }
LABEL_28:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    __int16 v16 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    __int16 v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int __n_4 = 136316674;
    int v32 = "qiAuth_protocol_saveCertNextSegment";
    __int16 v33 = 1024;
    int v34 = 1085;
    __int16 v35 = 1024;
    int v36 = v12;
    __int16 v37 = 1024;
    unsigned int v38 = a2;
    __int16 v39 = 1024;
    unsigned int v40 = a3;
    __int16 v41 = 1024;
    unsigned int v42 = a5;
    __int16 v43 = 1024;
    int v44 = __n;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s:%d Result %d, role %d, slot %d, offset %d, length %d", (uint8_t *)&__n_4, 0x30u);
  }
  return v12;
}

uint64_t qiAuth_protocol_composeTBSAuth(uint64_t a1, long long *a2, int a3, long long *a4, int a5, __int16 *a6, int a7, uint64_t a8, unsigned __int16 a9, _WORD *a10)
{
  int v13 = 0;
  uint64_t v14 = 4294967294;
  if (a1 && a2 && a3 == 32 && a4 && a5 == 18 && a8 && a9 >= 0x36u && a10)
  {
    uint64_t v14 = 0;
    *(unsigned char *)a8 = 65;
    long long v15 = *a2;
    *(_OWORD *)(a8 + 17) = a2[1];
    *(_OWORD *)(a8 + 1) = v15;
    long long v16 = *a4;
    *(_WORD *)(a8 + 49) = *((_WORD *)a4 + 8);
    *(_OWORD *)(a8 + 33) = v16;
    __int16 v17 = *a6;
    *(unsigned char *)(a8 + 53) = *((unsigned char *)a6 + 2);
    *(_WORD *)(a8 + 51) = v17;
    int v13 = 54;
    *a10 = 54;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v18 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136316930;
    unsigned int v21 = "qiAuth_protocol_composeTBSAuth";
    __int16 v22 = 1024;
    int v23 = 1126;
    __int16 v24 = 1024;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v13;
    __int16 v28 = 1024;
    int v29 = a3;
    __int16 v30 = 1024;
    int v31 = a5;
    __int16 v32 = 1024;
    int v33 = a7;
    __int16 v34 = 1024;
    int v35 = a9;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s:%d Result %d, tbsAuthLen %d, certChainHashLen %d, challengeMsgLen %d, challengeAuthHdrLen %d, dataOutSize %d", (uint8_t *)&v20, 0x36u);
  }
  return v14;
}

uint64_t qiAuth_protocol_calculateChallengeHash(uint64_t a1, unsigned int a2, long long *a3, int a4, unsigned char *a5, void *a6, int a7, _WORD *a8, unsigned __int8 *a9, unsigned __int16 a10, _WORD *a11)
{
  int v12 = 0;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v54 = v13;
  long long v55 = v13;
  *(_DWORD *)&v53[15] = -1431655766;
  v52[2] = v13;
  *(_OWORD *)int v53 = v13;
  v52[0] = v13;
  v52[1] = v13;
  uint64_t v14 = 4294967294;
  if (!a1 || !a5 || !a6 || a7 != 54 || !a8 || !a9 || a10 < 0x20u || !a11) {
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    int v19 = (int *)&unk_100239000;
    int v20 = &unk_100239000;
LABEL_11:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v21 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      unsigned int v21 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_8();
    }
    int v12 = 170;
LABEL_19:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v22 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      __int16 v22 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_6();
    }
    goto LABEL_26;
  }
  int v29 = *(long long **)(a1 + 8 * a2 + 256);
  if (!v29)
  {
    int v20 = &unk_100239000;
    int v19 = (int *)&unk_100239000;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v32 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      __int16 v32 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_10();
    }
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }
  long long v30 = v29[1];
  long long v54 = *v29;
  long long v55 = v30;
  int v12 = HIBYTE(v30);
  if (*(unsigned __int16 *)(a1 + 1924) <= 2u)
  {
    int v20 = &unk_100239000;
    int v19 = (int *)&unk_100239000;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v33 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v33 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_12();
    }
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  LOWORD(v52[0]) = *(_WORD *)(a1 + 1926);
  BYTE2(v52[0]) = *(unsigned char *)(a1 + 1928);
  uint64_t v31 = qiAuth_protocol_composeTBSAuth(a1, &v54, 32, a3, a4, (__int16 *)v52, 3, (uint64_t)a6, 0x36u, a8);
  if (!v31)
  {
    uint64_t v14 = qiAuth_util_hash_SHA256(a1, a6, (unsigned __int16)*a8, a9, a10, a11);
    if (!v14)
    {
      *a5 = v12;
      goto LABEL_40;
    }
    int v19 = (_DWORD *)&unk_100239000;
    int v20 = (void *)&unk_100239000;
    goto LABEL_33;
  }
  uint64_t v14 = v31;
  int v19 = (_DWORD *)&unk_100239000;
  int v20 = (void *)&unk_100239000;
LABEL_26:
  uint64_t v23 = v20[49];
  if (v23 && v19[100] >= 60)
  {
    __int16 v24 = *(NSObject **)(v23 + 472);
  }
  else
  {
    __int16 v24 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    qiAuth_protocol_calculateChallengeHash_cold_4();
  }
LABEL_33:
  uint64_t v25 = v20[49];
  if (v25 && v19[100] >= 60)
  {
    __int16 v26 = *(NSObject **)(v25 + 472);
  }
  else
  {
    __int16 v26 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    qiAuth_protocol_calculateChallengeHash_cold_2();
  }
LABEL_40:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v27 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v27 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316930;
    __int16 v37 = "qiAuth_protocol_calculateChallengeHash";
    __int16 v38 = 1024;
    int v39 = 1244;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 1024;
    unsigned int v43 = a2;
    __int16 v44 = 1024;
    int v45 = a4;
    __int16 v46 = 1024;
    int v47 = v12;
    __int16 v48 = 1024;
    int v49 = a7;
    __int16 v50 = 1024;
    int v51 = a10;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, slot %d, challengeMsgLen %d, digestLSB 0x%02x, outTBSAuthSize %d, outChallengeHashSize %d", buf, 0x36u);
  }
  return v14;
}

uint64_t _qiAuth_protocol_getCachedCertLengthFromHeader(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = 0;
  if (a1 && a2 <= 3)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        _qiAuth_protocol_getCachedCertLengthFromHeader_cold_3();
      }
      goto LABEL_16;
    }
    uint64_t v5 = a1 + 8 * a2;
    uint64_t v6 = *(unsigned __int8 **)(v5 + 336);
    if (!v6 || (uint64_t v7 = a1 + 2 * a2, *(unsigned __int16 *)(v7 + 324) < 2u))
    {
LABEL_16:
      uint64_t v3 = 0;
      goto LABEL_17;
    }
    unsigned int v8 = (unsigned __int8 **)(v5 + 336);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v11 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v23 = 134218240;
        __int16 v24 = (const char *)v9;
        __int16 v25 = 1024;
        int v26 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v23, 0x12u);
        uint64_t v6 = *v8;
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(unsigned __int16 *)(v7 + 324);
      int v15 = *v6;
      int v16 = v6[1];
      int v17 = v6[2];
      int v18 = v6[3];
      int v19 = v6[4];
      int v20 = v6[5];
      int v21 = v6[6];
      int v22 = v6[7];
      int v23 = 136317954;
      __int16 v24 = "_qiAuth_protocol_getCachedCertLengthFromHeader";
      __int16 v25 = 1024;
      int v26 = 1274;
      __int16 v27 = 1024;
      unsigned int v28 = a2;
      __int16 v29 = 1024;
      int v30 = v14;
      __int16 v31 = 1024;
      int v32 = v15;
      __int16 v33 = 1024;
      int v34 = v16;
      __int16 v35 = 1024;
      int v36 = v17;
      __int16 v37 = 1024;
      int v38 = v18;
      __int16 v39 = 1024;
      int v40 = v19;
      __int16 v41 = 1024;
      int v42 = v20;
      __int16 v43 = 1024;
      int v44 = v21;
      __int16 v45 = 1024;
      int v46 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s:%d slot %d, rxCerts(%d bytes): [%02X %02X] %02X %02X %02X %02X %02X %02X ... \n", (uint8_t *)&v23, 0x4Eu);
      uint64_t v6 = *v8;
    }
    uint64_t v3 = bswap32(*(unsigned __int16 *)v6) >> 16;
  }
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v12 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_getCachedCertLengthFromHeader_cold_1();
  }
  return v3;
}

uint64_t qiAuth_protocol_initMsg_CHALLENGE(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4, unsigned int a5, uint64_t a6, unsigned int a7, _WORD *a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    long long v13 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    long long v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    __int16 v24 = "qiAuth_protocol_initMsg_CHALLENGE";
    __int16 v25 = 1024;
    int v26 = 2700;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    unsigned int v30 = a3;
    __int16 v31 = 1024;
    unsigned int v32 = a5;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s:%d version %d, slotNum %d, nonceLen %d", buf, 0x24u);
    if (!a6) {
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_14;
  }
  if (a5 == 16 && a4 && a3 <= 3 && a7 >= 0x12)
  {
    uint64_t v14 = 0;
    *(unsigned char *)a6 = (16 * a2) | 0xB;
    *(unsigned char *)(a6 + 1) = a3;
    *(_OWORD *)(a6 + 2) = *a4;
    *a8 = 18;
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v14 = 4294967294;
  if (!a6)
  {
    unsigned int v15 = 15;
    goto LABEL_16;
  }
LABEL_15:
  unsigned int v15 = *(unsigned char *)a6 & 0xF;
LABEL_16:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v16 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = v15 - 1;
    if (v18 > 0xA)
    {
      int v19 = "UNKNOWN";
      if (a8) {
        goto LABEL_26;
      }
    }
    else
    {
      int v19 = off_1002194B0[v18];
      if (a8)
      {
LABEL_26:
        int v20 = (unsigned __int16)*a8;
LABEL_29:
        *(_DWORD *)buf = 136316674;
        __int16 v24 = "qiAuth_protocol_initMsg_CHALLENGE";
        __int16 v25 = 1024;
        int v26 = 2719;
        __int16 v27 = 1024;
        int v28 = v14;
        __int16 v29 = 1024;
        unsigned int v30 = a2;
        __int16 v31 = 1024;
        unsigned int v32 = v15;
        __int16 v33 = 2080;
        int v34 = v19;
        __int16 v35 = 1024;
        int v36 = v20;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v14;
      }
    }
    int v20 = -1;
    goto LABEL_29;
  }
  return v14;
}

uint64_t qiAuth_protocol_initMsg_GET_CERTIFICATE(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned char *a6, unsigned int a7, unsigned __int16 *a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    long long v13 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    long long v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316418;
    __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
    __int16 v30 = 1024;
    int v31 = 2662;
    __int16 v32 = 1024;
    int v33 = a2;
    __int16 v34 = 1024;
    unsigned int v35 = a3;
    __int16 v36 = 1024;
    unsigned int v37 = a4;
    __int16 v38 = 1024;
    *(_DWORD *)__int16 v39 = a5;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s:%d version %d, slotNum %d, offset, %d, length %d", buf, 0x2Au);
  }
  if (a6 && a5 <= 0x7F && a4 <= 0x5FF && a3 <= 3 && a7 >= 4 && a5 + a4 <= 0x600)
  {
    *a6 = (16 * a2) | 0xA;
    a6[1] = (a5 >> 6) & 0x1C | (a4 >> 3) & 0xE0 | a3;
    a6[2] = a4;
    a6[3] = a5;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v23 = a6[1];
      int v24 = a6[2];
      int v25 = a6[3];
      *(_DWORD *)buf = 136316674;
      __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
      __int16 v30 = 1024;
      int v31 = 2679;
      __int16 v32 = 1024;
      int v33 = a4;
      __int16 v34 = 1024;
      unsigned int v35 = a5;
      __int16 v36 = 1024;
      unsigned int v37 = v23;
      __int16 v38 = 1024;
      *(_DWORD *)__int16 v39 = v24;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v25;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s:%d offset %d, length %d, msg: offset_len_slotNum 0x%02X, offset 0x%02X, length 0x%02X", buf, 0x30u);
    }
    uint64_t v15 = 0;
    int v16 = a8;
    *a8 = 4;
    goto LABEL_24;
  }
  uint64_t v15 = 4294967294;
  int v16 = a8;
  if (a6)
  {
LABEL_24:
    unsigned int v17 = *a6 & 0xF;
    goto LABEL_25;
  }
  unsigned int v17 = 15;
LABEL_25:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v18 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = v17 - 1;
    if (v20 > 0xA)
    {
      int v21 = "UNKNOWN";
      if (v16) {
        goto LABEL_34;
      }
    }
    else
    {
      int v21 = off_1002194B0[v20];
      if (v16)
      {
LABEL_34:
        int v22 = *v16;
LABEL_37:
        *(_DWORD *)buf = 136316674;
        __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
        __int16 v30 = 1024;
        int v31 = 2688;
        __int16 v32 = 1024;
        int v33 = v15;
        __int16 v34 = 1024;
        unsigned int v35 = a2;
        __int16 v36 = 1024;
        unsigned int v37 = v17;
        __int16 v38 = 2080;
        *(void *)__int16 v39 = v21;
        *(_WORD *)&v39[8] = 1024;
        int v40 = v22;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v15;
      }
    }
    int v22 = -1;
    goto LABEL_37;
  }
  return v15;
}

uint64_t _qiAuth_protocol_finishAuth(uint64_t a1)
{
  if (!a1) {
    goto LABEL_10;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFDataRef v2 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    CFDataRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_finishAuth_cold_12();
  }
  if (*(_DWORD *)(a1 + 8))
  {
LABEL_10:
    uint64_t v3 = 4294967294;
    goto LABEL_11;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_finishAuth_cold_10();
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  if (v7 < 4)
  {
    uint64_t v8 = a1 + 8 * v7;
    if (!*(void *)(v8 + 336))
    {
LABEL_69:
      uint64_t v3 = 0;
      goto LABEL_11;
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    int v11 = (unsigned __int16 **)(v8 + 336);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "_qiAuth_protocol_finishAuth";
      __int16 v31 = 1024;
      int v32 = 2483;
      __int16 v33 = 1024;
      int v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s:%d Have cert for slot %d !!! verify signature", buf, 0x18u);
    }
    uint64_t v12 = (uint64_t)*v11;
    uint64_t v13 = (uint64_t)(*v11 + 17);
    unsigned int v14 = **v11;
    unsigned __int8 v28 = 0;
    __int16 v27 = 0;
    __int16 v26 = 0;
    if (*(_WORD *)(a1 + 1904) == 18)
    {
      if (!qiAuth_protocol_calculateChallengeHash(a1, v7, (long long *)(a1 + 1906), 18, &v28, (void *)(a1 + 49), 54, &v27, (unsigned __int8 *)(a1 + 103), 0x20u, &v26))
      {
        uint64_t v15 = v12 + 2;
        unsigned int v16 = (bswap32(v14) >> 16) - 34;
        int v17 = 1;
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --RootHash--", v15, 0x20u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --CertData--", v13, (unsigned __int16)v16, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --nonce--", a1 + 135, 0x10u, 1);
        int v25 = (void *)(a1 + 49);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --TBSAuth--", a1 + 49, 0x36u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --TBSAuthHash--", a1 + 103, 0x20u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --Signature--", a1 + 151, 0x40u, 1);
        *(unsigned char *)(a1 + 215) = 1;
        if (!qiAuth_util_verifyChallengeSignature(a1, v7, v15, 32, v13, (unsigned __int16)v16, a1 + 103, 0x20u, a1 + 151, 0x40u))
        {
LABEL_68:
          qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v7, v17);
          goto LABEL_69;
        }
        uint64_t v18 = logObjectForModule_19();
        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if (v19)
        {
          int v20 = *(_DWORD *)(a1 + 44);
          *(_DWORD *)buf = 136316162;
          __int16 v30 = "_qiAuth_protocol_finishAuth";
          __int16 v31 = 1024;
          int v32 = 2531;
          __int16 v33 = 1024;
          int v34 = v7;
          __int16 v35 = 1024;
          int v36 = v20;
          __int16 v37 = 1024;
          int v38 = v28;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s:%d Signature verification failed, retry with legacy hash calculation!!!  slot %d, lastMsgSent %d, digestLSB 0x%x", buf, 0x24u);
        }
        if (!qiAuth_protocol_initMsg_CHALLENGE_AUTH(v19, *(unsigned __int8 *)(a1 + 12), 1u, *(unsigned __int8 *)(a1 + 24), v28, 0, 0, (unsigned char *)(a1 + 1926), 0x12u, (__int16 *)(a1 + 1924)))
        {
          unsigned int v21 = *(unsigned __int16 *)(a1 + 1924);
          if (v21 >= 3)
          {
            qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --CHALLENGE_AUTH--", a1 + 1926, v21, 1);
            if (!qiAuth_protocol_calculateChallengeHash(a1, v7, (long long *)(a1 + 1906), *(unsigned __int16 *)(a1 + 1904), &v28, v25, 54, &v27, (unsigned __int8 *)(a1 + 103), 0x20u, &v26))
            {
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --TBSAuth--", (uint64_t)v25, 0x36u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --TBSAuthHash--", a1 + 103, 0x20u, 1);
              if (qiAuth_util_verifyChallengeSignature(a1, v7, v15, 32, v13, (unsigned __int16)v16, a1 + 103, 0x20u, a1 + 151, 0x40u))int v17 = 2; {
              else
              }
                int v17 = 1;
              goto LABEL_68;
            }
          }
        }
        int v22 = logObjectForModule_19();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          _qiAuth_protocol_finishAuth_cold_2();
        }
LABEL_67:
        int v17 = 2;
        goto LABEL_68;
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v23 = *(NSObject **)(gLogObjects + 472);
      }
      else
      {
        unsigned int v23 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        _qiAuth_protocol_finishAuth_cold_5();
      }
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v24 = *(NSObject **)(gLogObjects + 472);
    }
    else
    {
      int v24 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      _qiAuth_protocol_finishAuth_cold_3();
    }
    goto LABEL_67;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v10 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    _qiAuth_protocol_finishAuth_cold_8();
  }
  uint64_t v3 = 0xFFFFFFFFLL;
LABEL_11:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v30 = "_qiAuth_protocol_finishAuth";
    __int16 v31 = 1024;
    int v32 = 2587;
    __int16 v33 = 1024;
    int v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s:%d result %d", buf, 0x18u);
  }
  return v3;
}

uint64_t qiAuth_protocol_initMsg_CHALLENGE_AUTH(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, const void *a6, unsigned int a7, unsigned char *a8, unsigned __int16 a9, __int16 *a10)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v15 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    uint64_t v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if (a8) {
      goto LABEL_8;
    }
LABEL_19:
    unsigned int v18 = 15;
    uint64_t v16 = 4294967294;
    goto LABEL_20;
  }
  *(_DWORD *)buf = 136316674;
  __int16 v27 = "qiAuth_protocol_initMsg_CHALLENGE_AUTH";
  __int16 v28 = 1024;
  int v29 = 2830;
  __int16 v30 = 1024;
  int v31 = a2;
  __int16 v32 = 1024;
  unsigned int v33 = a3;
  __int16 v34 = 1024;
  unsigned int v35 = a4;
  __int16 v36 = 1024;
  *(_DWORD *)__int16 v37 = a5;
  *(_WORD *)&v37[4] = 1024;
  *(_DWORD *)&unsigned char v37[6] = a7;
  _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d version %d, maxProtocolVersion %d, slotPopulatedMask 0x%x, certChainHashLSB, 0x%02x, signatureLen %d", buf, 0x30u);
  if (!a8) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = 4294967294;
  if (a3 <= 0xF && a7 <= 0x7D && a7 + 3 <= a9 && a4 <= 0xF && (!a6 || a7 == 64))
  {
    __int16 v17 = 3;
    *a8 = (16 * a2) | 3;
    a8[1] = a4 & 0xF | (16 * a3);
    a8[2] = a5;
    if (a6)
    {
      memcpy(a8 + 3, a6, a7);
      __int16 v17 = a7 + 3;
    }
    uint64_t v16 = 0;
    *a10 = v17;
  }
  unsigned int v18 = *a8 & 0xF;
LABEL_20:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    BOOL v19 = *(NSObject **)(gLogObjects + 472);
  }
  else
  {
    BOOL v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = v18 - 1;
    if (v21 > 0xA)
    {
      int v22 = "UNKNOWN";
      if (a10) {
        goto LABEL_29;
      }
    }
    else
    {
      int v22 = off_1002194B0[v21];
      if (a10)
      {
LABEL_29:
        int v23 = (unsigned __int16)*a10;
LABEL_32:
        *(_DWORD *)buf = 136316674;
        __int16 v27 = "qiAuth_protocol_initMsg_CHALLENGE_AUTH";
        __int16 v28 = 1024;
        int v29 = 2859;
        __int16 v30 = 1024;
        int v31 = v16;
        __int16 v32 = 1024;
        unsigned int v33 = a2;
        __int16 v34 = 1024;
        unsigned int v35 = v18;
        __int16 v36 = 2080;
        *(void *)__int16 v37 = v22;
        *(_WORD *)&v37[8] = 1024;
        int v38 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v16;
      }
    }
    int v23 = -1;
    goto LABEL_32;
  }
  return v16;
}

void OUTLINED_FUNCTION_5_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x1Eu);
}

void OUTLINED_FUNCTION_6_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x24u);
}

void OUTLINED_FUNCTION_7_12(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Eu);
}

void OUTLINED_FUNCTION_11_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x1Eu);
}

void OUTLINED_FUNCTION_13_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_15_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t iap2_features_registerMessageHandlers()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects <= 18;
  }
  else {
    BOOL v0 = 1;
  }
  int v1 = !v0;
  if (iap2_features_registerMessageHandlers_handlersRegistered)
  {
    if (v1)
    {
      CFDataRef v2 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      CFDataRef v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_features_registerMessageHandlers_cold_1(v2);
    }
  }
  else
  {
    if (v1)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering message handlers...", buf, 2u);
    }
    for (uint64_t i = 0; i != 29; ++i)
    {
      uint64_t v5 = gLogObjects;
      int v6 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v7 = gNumLogObjects < 19;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v19 = v5;
          __int16 v20 = 1024;
          int v21 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v8 = &_os_log_default;
        }
      }
      else
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 144);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_features_registerMessageHandlers_cold_3(v16, i, v17, v8);
      }
      uint64_t v9 = &_kiAP2FeatureInfoEntries[4 * i];
      uint64_t v10 = *((void *)v9 + 1);
      if (*(void *)(v10 + 8))
      {
        if (*(_WORD *)(v10 + 16))
        {
          uint64_t v11 = 0;
          unint64_t v12 = 0;
          do
          {
            iap2_messageHandlers_setHandler((void *)*(unsigned __int16 *)(*(void *)(v10 + 8) + v11), *(void **)(*(void *)(v10 + 8) + v11 + 8));
            ++v12;
            v11 += 16;
          }
          while (v12 < *(unsigned __int16 *)(v10 + 16));
        }
      }
      else
      {
        uint64_t v13 = logObjectForModule_26();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = *v9;
          *(_DWORD *)buf = 67109120;
          LODWORD(v19) = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "pMessageHandlerEntries = NULL for %{coreacc:iAP2Feature_t}d!", buf, 8u);
        }
      }
    }
    iap2_features_registerMessageHandlers_handlersRegistered = 1;
  }
  return 1;
}

void *logObjectForModule_26()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 19;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 144);
  }
  int v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t iap2_features_registerIdentificationParamHandlers()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects <= 18;
  }
  else {
    BOOL v0 = 1;
  }
  int v1 = !v0;
  if (iap2_features_registerIdentificationParamHandlers_handlersRegistered)
  {
    if (v1)
    {
      CFDataRef v2 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      CFDataRef v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_features_registerIdentificationParamHandlers_cold_1(v2);
    }
  }
  else
  {
    if (v1)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering identification param handlers...", buf, 2u);
    }
    for (uint64_t i = 0; i != 29; ++i)
    {
      uint64_t v5 = gLogObjects;
      int v6 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v7 = gNumLogObjects < 19;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v20 = v5;
          __int16 v21 = 1024;
          int v22 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v8 = &_os_log_default;
        }
      }
      else
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 144);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_features_registerIdentificationParamHandlers_cold_3(v17, i, v18, v8);
      }
      uint64_t v9 = &_kiAP2FeatureInfoEntries[4 * i];
      uint64_t v10 = *((void *)v9 + 1);
      if (*(void *)(v10 + 24))
      {
        if (*(_WORD *)(v10 + 32))
        {
          uint64_t v11 = 0;
          unint64_t v12 = 0;
          do
          {
            uint64_t v13 = (void **)(*(void *)(v10 + 24) + v11);
            iap2_identification_setParamHandler((void *)*(unsigned int *)v13, v13[1]);
            if (*((unsigned char *)v13 + 16)) {
              iap2_identification_setRequiredIdentificationParam(*(_DWORD *)v13);
            }
            ++v12;
            v11 += 24;
          }
          while (v12 < *(unsigned __int16 *)(v10 + 32));
        }
      }
      else
      {
        int v14 = logObjectForModule_26();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v15 = *v9;
          *(_DWORD *)buf = 67109120;
          LODWORD(v20) = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "pIdentificationParamHandlerEntries = NULL for %{coreacc:iAP2Feature_t}d!", buf, 8u);
        }
      }
    }
    iap2_features_registerIdentificationParamHandlers_handlersRegistered = 1;
  }
  return 1;
}

uint64_t iap2_features_createFeatures(const __CFSet *a1, int a2)
{
  uint64_t v4 = &unk_100239000;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects <= 18;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (a2)
  {
    if (v6)
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = "Creating required features...";
  }
  else
  {
    if (v6)
    {
      BOOL v7 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      BOOL v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = "Creating optional features that have been identified for...";
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
LABEL_21:
  for (uint64_t i = 0; i != 116; i += 4)
  {
    uint64_t v10 = *(void *)&_kiAP2FeatureInfoEntries[i + 2];
    if (*(void *)v10 && *(unsigned __int8 *)(v10 + 34) == a2)
    {
      uint64_t v11 = _kiAP2FeatureInfoEntries[i];
      if (a1 && *((void *)a1 + v11 + 25))
      {
        uint64_t v12 = v4[49];
        int v13 = gNumLogObjects;
        if (v12 && gNumLogObjects >= 19)
        {
          int v14 = *(NSObject **)(v12 + 144);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v32 = v12;
            __int16 v33 = 1024;
            int v34 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v32) = v11;
          uint64_t v19 = v14;
          os_log_type_t v20 = OS_LOG_TYPE_INFO;
          __int16 v21 = "Feature already created: %{coreacc:iAP2Feature_t}d!";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v21, buf, 8u);
          continue;
        }
      }
      else if ((a2 & 1) != 0 || iap2_identification_isIdentifiedForFeature(a1, v11))
      {
        int v15 = v4;
        uint64_t v16 = v4[49];
        int v17 = gNumLogObjects;
        if (v16 && gNumLogObjects >= 19)
        {
          unsigned int v18 = *(NSObject **)(v16 + 144);
        }
        else
        {
          unsigned int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v32 = v16;
            __int16 v33 = 1024;
            int v34 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v32) = v11;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Creating feature: %{coreacc:iAP2Feature_t}d...", buf, 8u);
        }
        int v22 = **(uint64_t (***)(const __CFSet *))v10;
        uint64_t v4 = v15;
        if (v22)
        {
          uint64_t v23 = v22(a1);
          if (v23)
          {
            if (a1) {
              *((void *)a1 + v11 + 25) = v23;
            }
          }
          else
          {
            uint64_t v27 = v15[49];
            int v28 = gNumLogObjects;
            if (v27 && gNumLogObjects >= 19)
            {
              int v29 = *(NSObject **)(v27 + 144);
            }
            else
            {
              int v29 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v32 = v27;
                __int16 v33 = 1024;
                int v34 = v28;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v32) = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Error creating feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
            }
          }
        }
        else
        {
          uint64_t v24 = v15[49];
          int v25 = gNumLogObjects;
          if (v24 && gNumLogObjects >= 19)
          {
            __int16 v26 = *(NSObject **)(v24 + 144);
          }
          else
          {
            __int16 v26 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v32 = v24;
              __int16 v33 = 1024;
              int v34 = v25;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v32) = v11;
            uint64_t v19 = v26;
            os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
            __int16 v21 = "No create function for feature: %{coreacc:iAP2Feature_t}d!";
            goto LABEL_38;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t iap2_feature_getFeature(uint64_t result, unsigned int a2)
{
  if (result) {
    return *(void *)(result + 8 * a2 + 200);
  }
  return result;
}

uint64_t iap2_features_createFeature(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (_kiAP2FeatureInfoEntries[v4] == a2)
    {
      BOOL v5 = *(uint64_t (****)(uint64_t))&_kiAP2FeatureInfoEntries[v4 + 2];
      if (*v5) {
        break;
      }
    }
    v4 += 4;
    if (v4 == 116) {
      return 0;
    }
  }
  uint64_t v7 = a1 + 8 * a2;
  if (a1 && *(void *)(v7 + 200))
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v17 = 67109120;
      unsigned int v18 = a2;
      uint64_t v10 = "Feature already created: %{coreacc:iAP2Feature_t}d!";
      uint64_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_INFO;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, 8u);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v9 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      uint64_t v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v17 = 67109120;
      unsigned int v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Creating feature: %{coreacc:iAP2Feature_t}d...", (uint8_t *)&v17, 8u);
    }
    int v13 = **v5;
    if (v13)
    {
      uint64_t v14 = v13(a1);
      if (v14)
      {
        if (a1) {
          *(void *)(v7 + 200) = v14;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 19)
        {
          uint64_t v16 = *(NSObject **)(gLogObjects + 144);
        }
        else
        {
          uint64_t v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          iap2_features_createFeature_cold_2(a2, v16);
        }
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 19)
      {
        int v15 = *(NSObject **)(gLogObjects + 144);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 67109120;
        unsigned int v18 = a2;
        uint64_t v10 = "No create function for feature: %{coreacc:iAP2Feature_t}d!";
        uint64_t v11 = v15;
        os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_18;
      }
    }
  }
  return 0;
}

uint64_t iap2_features_destroyFeatures(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 18;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      int v6 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      int v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      label = dispatch_queue_get_label(0);
      uint64_t v7 = "Destroying required features... currentDispatchQueue: %s";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
    }
  }
  else
  {
    if (v5)
    {
      int v6 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      int v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      label = dispatch_queue_get_label(0);
      uint64_t v7 = "Destroying optional features... currentDispatchQueue: %s";
      goto LABEL_20;
    }
  }
  for (uint64_t i = 0; i != 116; i += 4)
  {
    uint64_t v9 = *(unsigned __int8 **)&_kiAP2FeatureInfoEntries[i + 2];
    if (*(void *)v9)
    {
      if (v9[34] == a2)
      {
        if (a1)
        {
          uint64_t v10 = _kiAP2FeatureInfoEntries[i];
          uint64_t v11 = a1 + 8 * v10;
          uint64_t v13 = *(void *)(v11 + 200);
          os_log_type_t v12 = (void *)(v11 + 200);
          uint64_t v25 = v13;
          if (v13)
          {
            uint64_t v14 = gLogObjects;
            int v15 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 19)
            {
              uint64_t v16 = *(NSObject **)(gLogObjects + 144);
            }
            else
            {
              uint64_t v16 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                label = (const char *)v14;
                __int16 v28 = 1024;
                int v29 = v15;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(label) = v10;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Destroying feature: %{coreacc:iAP2Feature_t}d...", buf, 8u);
            }
            int v17 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)v9 + 8);
            *os_log_type_t v12 = 0;
            if (v17)
            {
              if ((v17(&v25, a1) & 1) == 0)
              {
                uint64_t v18 = gLogObjects;
                int v19 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 19)
                {
                  os_log_type_t v20 = *(NSObject **)(gLogObjects + 144);
                }
                else
                {
                  os_log_type_t v20 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    label = (const char *)v18;
                    __int16 v28 = 1024;
                    int v29 = v19;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  }
                }
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(label) = v10;
                  _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Error destroying feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
                }
              }
            }
            else
            {
              uint64_t v21 = gLogObjects;
              int v22 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 19)
              {
                uint64_t v23 = *(NSObject **)(gLogObjects + 144);
              }
              else
              {
                uint64_t v23 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  label = (const char *)v21;
                  __int16 v28 = 1024;
                  int v29 = v22;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(label) = v10;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No destroy function for feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t iap2_features_startFeaturesFromDevice(const __CFSet *a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 18;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      int v6 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      int v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v7 = "Auto-starting required features...";
  }
  else
  {
    if (v5)
    {
      int v6 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      int v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v7 = "Auto-starting optional features...";
  }
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 2u);
LABEL_21:
  for (uint64_t i = 0; i != 116; i += 4)
  {
    uint64_t v9 = *(uint64_t **)&_kiAP2FeatureInfoEntries[i + 2];
    uint64_t v10 = *v9;
    if (*v9 && *((unsigned __int8 *)v9 + 34) == a2)
    {
      int v11 = _kiAP2FeatureInfoEntries[i];
      if ((a2 & 1) == 0)
      {
        if (!iap2_identification_isIdentifiedForFeature(a1, _kiAP2FeatureInfoEntries[i])) {
          continue;
        }
        uint64_t v10 = *v9;
      }
      os_log_type_t v12 = *(void (**)(const __CFSet *))(v10 + 16);
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects <= 18;
      }
      else {
        BOOL v15 = 1;
      }
      int v16 = !v15;
      if (v12)
      {
        if (v16)
        {
          int v17 = *(NSObject **)(gLogObjects + 144);
        }
        else
        {
          int v17 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v21 = v13;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v17 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = v11;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Auto-starting feature: %{coreacc:iAP2Feature_t}d...", buf, 8u);
        }
        v12(a1);
      }
      else
      {
        if (v16)
        {
          uint64_t v18 = *(NSObject **)(gLogObjects + 144);
        }
        else
        {
          uint64_t v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v21 = v13;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v18 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = v11;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No auto-start function for feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
        }
      }
    }
  }
  return 0;
}

uint64_t iap2_features_startFeatureFromDevice(const __CFSet *a1, unsigned int a2)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (_kiAP2FeatureInfoEntries[v4] == a2)
    {
      int v5 = *(uint64_t **)&_kiAP2FeatureInfoEntries[v4 + 2];
      uint64_t v6 = *v5;
      if (*v5) {
        break;
      }
    }
    v4 += 4;
    if (v4 == 116) {
      return 0;
    }
  }
  if (!*((unsigned char *)v5 + 34))
  {
    if (!iap2_identification_isIdentifiedForFeature(a1, a2)) {
      return 0;
    }
    uint64_t v6 = *v5;
  }
  uint64_t v7 = *(void (**)(const __CFSet *))(v6 + 16);
  if (v7)
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 144);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Auto-starting feature: %{coreacc:iAP2Feature_t}d...", (uint8_t *)v10, 8u);
    }
    v7(a1);
  }
  return 0;
}

int *iap2_feature_getFeatureInfoEntries(int *result)
{
  if (result)
  {
    *(unsigned char *)uint64_t result = 29;
    return &_kiAP2FeatureInfoEntries;
  }
  return result;
}

uint64_t iap2_sessionRouter_processSessionData(unint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 19;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_2();
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 144);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    iap2_sessionRouter_processSessionData_cold_2(a2, v9);
  }
  unint64_t v10 = 0;
  switch(*(unsigned char *)(a2 + 1))
  {
    case 0:
      unint64_t v11 = iap2_sessionControl_parseIncomingMessage(a1, (char *)a3, a4);
      goto LABEL_17;
    case 1:
      unint64_t v11 = iap2_sessionFileTransfer_handleDatagram(a1, (unsigned __int8 *)a3, a4);
      goto LABEL_17;
    case 2:
      if (a4 < 3)
      {
        if (a4 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 19)
          {
            int v16 = *(NSObject **)(gLogObjects + 144);
          }
          else
          {
            int v16 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_bluetooth_copyNameForMacAddress_cold_2();
            }
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v17 = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received EA packet of 0 bytes, no data to process!", v17, 2u);
          }
          return 1;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        uint64_t v12 = a4;
        uint64_t v13 = bswap32(*a3) >> 16;
        CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)a3 + 2, v12 - 2);
        unint64_t v10 = (unint64_t)platform_externalAccessory_handleIncomingEADataFromAccessoryForSessionID(v13, (uint64_t)v14);
        if (v14) {
          CFRelease(v14);
        }
      }
      return v10;
    case 4:
      unint64_t v11 = iap2_sessionLog_parseIncomingMessage(a1, (uint64_t)a3, a4);
LABEL_17:
      unint64_t v10 = v11;
      break;
    default:
      return v10;
  }
  return v10;
}

uint64_t iAP2FSMGetBuffSize()
{
  return 48;
}

uint64_t iAP2FSMCreate(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (!a9) {
    iAP2FSMCreate_cold_1();
  }
  *(void *)a9 = a4;
  *(unsigned char *)(a9 + 9) = a3;
  *(unsigned char *)(a9 + 8) = a1;
  *(unsigned char *)(a9 + 10) = a2;
  *(unsigned char *)(a9 + 11) = a3;
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a6;
  *(void *)(a9 + 32) = a7;
  *(void *)(a9 + 40) = a8;
  return result;
}

void iAP2FSMHandleEvent(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  unsigned __int8 v28 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 9) > a2)
  {
    do
    {
      uint64_t v4 = *a1;
      uint64_t v5 = *a1 + 16 * *((unsigned __int8 *)a1 + 10);
      if (!*(unsigned char *)(v5 + 8)) {
        goto LABEL_22;
      }
      unint64_t v6 = *(void *)v5;
      while (*(unsigned __int8 *)(v6 + 9) != v2)
      {
        v6 += 16;
        if (v6 >= *(void *)v5 + 16 * (unint64_t)*(unsigned __int8 *)(v5 + 8))
        {
          if (v4)
          {
LABEL_22:
            if (_iAP2LogEnableMask)
            {
              uint64_t v13 = gLogObjects;
              int v14 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v15 = gNumLogObjects < 20;
              }
              else {
                BOOL v15 = 1;
              }
              if (v15)
              {
                uint64_t v21 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v30 = v13;
                  __int16 v31 = 1024;
                  LODWORD(v32) = v14;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              else
              {
                uint64_t v21 = *(NSObject **)(gLogObjects + 152);
              }
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v22 = "";
                if (a1[3]) {
                  int v23 = (const char *)a1[3];
                }
                else {
                  int v23 = "";
                }
                uint64_t v24 = a1[5];
                if (v24) {
                  __int16 v22 = *(const char **)(v24 + 8 * v28);
                }
                int v25 = *((unsigned __int8 *)a1 + 10);
                uint64_t v26 = a1[4];
                if (v26) {
                  uint64_t v27 = *(const char **)(v26 + 8 * *((unsigned __int8 *)a1 + 10));
                }
                else {
                  uint64_t v27 = "";
                }
                *(_DWORD *)buf = 136316418;
                uint64_t v30 = (uint64_t)v23;
                __int16 v31 = 2048;
                uint64_t v32 = a1;
                __int16 v33 = 1024;
                unsigned int v34 = v28;
                __int16 v35 = 2080;
                __int16 v36 = v22;
                __int16 v37 = 1024;
                int v38 = v25;
                __int16 v39 = 2080;
                int v40 = v27;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "ERROR: '%s'(%p): No handler for event(%d:%s) for state(%d:%s)", buf, 0x36u);
              }
            }
            LOBYTE(v9) = *((unsigned char *)a1 + 9);
            goto LABEL_52;
          }
LABEL_54:
          iAP2FSMHandleEvent_cold_2();
        }
      }
      if (!v4) {
        goto LABEL_54;
      }
      uint64_t v7 = *(void (**)(uint64_t *, unsigned __int8 *))v6;
      if (!*(void *)v6) {
        goto LABEL_22;
      }
      *((unsigned char *)a1 + 11) = v2;
      v7(a1, &v28);
      unsigned int v8 = *(unsigned __int8 *)(v6 + 8);
      *((unsigned char *)a1 + 10) = v8;
      if (v8 >= *((unsigned __int8 *)a1 + 8)) {
        iAP2FSMHandleEvent_cold_3();
      }
      unsigned int v2 = v28;
      unsigned int v9 = *((unsigned __int8 *)a1 + 9);
    }
    while (v28 < v9);
LABEL_52:
    *((unsigned char *)a1 + 11) = v9;
  }
  else if (_iAP2LogEnableMask)
  {
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v12 = gNumLogObjects < 20;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_nvmInfo_getPairingStatus_cold_1(v10, v11);
      }
    }
    else
    {
      int v16 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = "";
      if (a1)
      {
        if (a1[3]) {
          uint64_t v18 = (const char *)a1[3];
        }
        else {
          uint64_t v18 = "";
        }
        uint64_t v19 = a1[5];
        if (v19) {
          os_log_type_t v20 = *(const char **)(v19 + 8 * v2);
        }
        else {
          os_log_type_t v20 = "";
        }
        int v17 = v18;
      }
      else
      {
        os_log_type_t v20 = "";
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v30 = (uint64_t)v17;
      __int16 v31 = 2048;
      uint64_t v32 = a1;
      __int16 v33 = 1024;
      unsigned int v34 = v2;
      __int16 v35 = 2080;
      __int16 v36 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "ERROR: '%s': NULL fsm(%p) pointer or invalid event(%d:%s)!", buf, 0x26u);
    }
  }
}

uint64_t _startCallStateUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t Feature = 0;
  if (!a1) {
    return Feature;
  }
  if (!a2) {
    return Feature;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  if (!Feature) {
    return Feature;
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    _startCallStateUpdatesHandler_cold_5();
  }
  CFMutableArrayRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 13, 0);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v26 = Feature;
    char v27 = 0;
    char v8 = 0;
    while (1)
    {
      unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        BOOL v12 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        BOOL v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)int v29 = v10;
          *(_WORD *)&v29[8] = 1024;
          LODWORD(v30) = v11;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          BOOL v12 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v29 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "paramID: %d", buf, 8u);
      }
      if (ParamID > 0xC)
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          BOOL v15 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          BOOL v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v29 = v13;
            *(_WORD *)&v29[8] = 1024;
            LODWORD(v30) = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            BOOL v15 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v29 = ParamID;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
      }
      else
      {
        if (!iAP2MsgIsDataVoid(NextParam))
        {
          int v25 = logObjectForModule_27();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            _startCallStateUpdatesHandler_cold_4(a2);
          }
          uint64_t Feature = 0;
          if (Mutable) {
            goto LABEL_64;
          }
          return Feature;
        }
        CFSetAddValue(Mutable, (const void *)ParamID);
        if (ParamID == 5) {
          char v27 = 1;
        }
        else {
          char v8 = 1;
        }
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam)
      {
        if (v8)
        {
          char v17 = 0;
          uint64_t Feature = v26;
          char v18 = v27;
          goto LABEL_39;
        }
        uint64_t Feature = v26;
        char v18 = v27;
        goto LABEL_38;
      }
    }
  }
  char v18 = 0;
LABEL_38:
  CFSetAddValue(Mutable, 0);
  char v17 = 1;
  CFSetAddValue(Mutable, (const void *)1);
  CFSetAddValue(Mutable, (const void *)2);
  CFSetAddValue(Mutable, (const void *)3);
  CFSetAddValue(Mutable, (const void *)4);
LABEL_39:
  _removeSubscriberForSubFeature(Feature, 0);
  if (*(void *)Feature)
  {
    CFRelease(*(CFTypeRef *)Feature);
    *(void *)uint64_t Feature = 0;
  }
  if (Mutable) {
    CFTypeRef v19 = CFRetain(Mutable);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *(void *)uint64_t Feature = v19;
  *(unsigned char *)(Feature + 10) = 1;
  *(unsigned char *)(Feature + 8) = v17;
  *(unsigned char *)(Feature + 9) = v18 & 1;
  if (gLogObjects && gNumLogObjects >= 40)
  {
    os_log_type_t v20 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    os_log_type_t v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = "YES";
    if (*(unsigned char *)(Feature + 8)) {
      __int16 v22 = "YES";
    }
    else {
      __int16 v22 = "NO";
    }
    if (!*(unsigned char *)(Feature + 9)) {
      uint64_t v21 = "NO";
    }
    *(_DWORD *)buf = 136315394;
    *(void *)int v29 = v22;
    *(_WORD *)&v29[8] = 2080;
    uint64_t v30 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "useLegacySpec: %s, sendVCards: %s", buf, 0x16u);
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    int v23 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    int v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    _startCallStateUpdatesHandler_cold_1((CFSetRef *)Feature);
  }
  _addSubscriberForSubFeature(Feature, 0);
  uint64_t Feature = 1;
  if (Mutable) {
LABEL_64:
  }
    CFRelease(Mutable);
  return Feature;
}

void *logObjectForModule_27()
{
  if (gLogObjects && gNumLogObjects >= 40) {
    return *(void **)(gLogObjects + 312);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _removeSubscriberForSubFeature(uint64_t a1, int a2)
{
  if (!a1) {
    return;
  }
  if (a2 != 3)
  {
    if (a2 == 1)
    {
      if (!*(unsigned char *)(a1 + 24)) {
        return;
      }
      CFSetRef v6 = *(const __CFSet **)(a1 + 16);
      if (!v6 || CFSetGetCount(v6) <= 0) {
        return;
      }
      uint64_t v4 = kCFACCCommunications_SubscriberList_CommunicationsUpdates;
    }
    else
    {
      if (a2) {
        return;
      }
      if (!*(unsigned char *)(a1 + 10)) {
        return;
      }
      CFSetRef v3 = *(const __CFSet **)a1;
      if (!*(void *)a1 || CFSetGetCount(v3) <= 0) {
        return;
      }
      uint64_t v4 = kCFACCCommunications_SubscriberList_CallStateUpdates;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 67))
  {
    if (*(unsigned char *)(a1 + 46))
    {
      uint64_t v5 = kCFACCCommunications_SubscriberList_ListUpdates_Recents;
      if (*(unsigned char *)(a1 + 42)) {
        uint64_t v5 = kCFACCCommunications_SubscriberList_ListUpdates_Recents_Coalesced;
      }
      platform_communications_removeSubscriber((uint64_t)*v5);
    }
    if (*(unsigned char *)(a1 + 61))
    {
      uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Favorites;
LABEL_20:
      uint64_t v7 = (uint64_t)*v4;
      platform_communications_removeSubscriber(v7);
    }
  }
}

void _addSubscriberForSubFeature(uint64_t a1, int a2)
{
  if (a1)
  {
    switch(a2)
    {
      case 3:
        if (*(unsigned char *)(a1 + 67))
        {
          if (*(unsigned char *)(a1 + 46))
          {
            uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Recents;
            if (*(unsigned char *)(a1 + 42)) {
              uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Recents_Coalesced;
            }
            platform_communications_addSubscriber((uint64_t)*v4);
            platform_communications_triggerListUpdate(0, *(unsigned __int8 *)(a1 + 42));
          }
          if (*(unsigned char *)(a1 + 61))
          {
            platform_communications_addSubscriber(@"ListUpdates_Favorites");
            platform_communications_triggerListUpdate(1, 0);
          }
        }
        break;
      case 1:
        if (*(unsigned char *)(a1 + 24))
        {
          CFSetRef v5 = *(const __CFSet **)(a1 + 16);
          if (v5)
          {
            if (CFSetGetCount(v5) >= 1)
            {
              platform_communications_addSubscriber(@"CommunicationsUpdates");
              platform_communications_triggerCommunicationsUpdate();
            }
          }
        }
        break;
      case 0:
        if (*(unsigned char *)(a1 + 10))
        {
          CFSetRef v3 = *(const __CFSet **)a1;
          if (*(void *)a1)
          {
            if (CFSetGetCount(v3) >= 1)
            {
              platform_communications_addSubscriber(@"CallStateUpdates");
              platform_communications_triggerCallStateUpdates();
            }
          }
        }
        break;
    }
  }
}

uint64_t _stopCallStateUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 6u);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          CFSetRef v5 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          CFSetRef v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          _stopCallStateUpdatesHandler_cold_1();
        }
        _removeSubscriberForSubFeature(v4, 0);
        *(unsigned char *)(v4 + 10) = 0;
        uint64_t result = 1;
        *(_WORD *)(v4 + 8) = 1;
        if (*(void *)v4)
        {
          CFRelease(*(CFTypeRef *)v4);
          *(void *)uint64_t v4 = 0;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t _startCommunicationsUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  if (!Feature) {
    return 0;
  }
  uint64_t v22 = Feature;
  if (gLogObjects && gNumLogObjects >= 40)
  {
    CFSetRef v5 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    CFSetRef v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _startCommunicationsUpdatesHandler_cold_4();
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 18, 0);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
LABEL_31:
    _removeSubscriberForSubFeature(v22, 1);
    char v17 = *(const void **)(v22 + 16);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v22 + 16) = 0;
    }
    if (Mutable) {
      CFTypeRef v18 = CFRetain(Mutable);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *(void *)(v22 + 16) = v18;
    *(unsigned char *)(v22 + 24) = 1;
    if (gLogObjects && gNumLogObjects >= 40)
    {
      CFTypeRef v19 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      CFTypeRef v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      _startCallStateUpdatesHandler_cold_1((CFSetRef *)(v22 + 16));
    }
    uint64_t v2 = 1;
    _addSubscriberForSubFeature(v22, 1);
    if (!Mutable) {
      return v2;
    }
    goto LABEL_44;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  while (1)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 40)
    {
      BOOL v12 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      BOOL v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v24 = v10;
        *(_WORD *)&v24[8] = 1024;
        int v25 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        BOOL v12 = &_os_log_default;
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v24 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "paramID: %d", buf, 8u);
    }
    if (ParamID > 0x11)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        BOOL v15 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        BOOL v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v24 = v13;
          *(_WORD *)&v24[8] = 1024;
          int v25 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          BOOL v15 = &_os_log_default;
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v24 = ParamID;
        *(_WORD *)&v24[4] = 1024;
        *(_DWORD *)&v24[6] = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
      }
      goto LABEL_30;
    }
    if (!iAP2MsgIsDataVoid(NextParam)) {
      break;
    }
    CFSetAddValue(Mutable, (const void *)ParamID);
LABEL_30:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
    if (!NextParam) {
      goto LABEL_31;
    }
  }
  uint64_t v21 = logObjectForModule_27();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    _startCallStateUpdatesHandler_cold_4(a2);
  }
  uint64_t v2 = 0;
  if (Mutable) {
LABEL_44:
  }
    CFRelease(Mutable);
  return v2;
}

uint64_t _stopCommunicationsUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 6u);
    if (Feature)
    {
      uint64_t v4 = Feature;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        CFSetRef v5 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        CFSetRef v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _stopCommunicationsUpdatesHandler_cold_1();
      }
      uint64_t v2 = 1;
      _removeSubscriberForSubFeature(v4, 1);
      *(unsigned char *)(v4 + 24) = 0;
      CFSetRef v6 = *(const void **)(v4 + 16);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v4 + 16) = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id _initiateCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (!FirstParam)
  {
    CFStringRef v6 = 0;
    CFStringRef v7 = 0;
LABEL_34:
    CFTypeRef v18 = logObjectForModule_27();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      _initiateCallHandler_cold_1();
    }
    goto LABEL_51;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  CFStringRef v6 = 0;
  CFStringRef v7 = 0;
  unsigned int v8 = 3;
  uint64_t v9 = 4;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    BOOL v30 = 0;
    switch(ParamID)
    {
      case 0:
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v30);
        if (!v30)
        {
          unsigned int v8 = DataAsU8;
          goto LABEL_25;
        }
        int v23 = logObjectForModule_27();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        goto LABEL_51;
      case 1:
        if (v7) {
          CFRelease(v7);
        }
        CFStringRef v7 = iAP2MsgCopyDataAsCFString(NextParam, &v30);
        if (!v30) {
          goto LABEL_25;
        }
        uint64_t v24 = logObjectForModule_27();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
        }
        goto LABEL_51;
      case 2:
        uint64_t v15 = iAP2MsgGetDataAsU8(NextParam, &v30);
        if (v30)
        {
          uint64_t v26 = logObjectForModule_27();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
          }
          goto LABEL_51;
        }
        uint64_t v9 = v15;
LABEL_25:
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (NextParam) {
          continue;
        }
        if (v8 >= 3) {
          goto LABEL_34;
        }
        if (!v8)
        {
          if (v7 && (v9 - 4) > 0xFFFFFFFC)
          {
            if ((v9 - 1) >= 3)
            {
              if (gLogObjects && gNumLogObjects >= 40)
              {
                CFTypeRef v19 = *(NSObject **)(gLogObjects + 312);
              }
              else
              {
                CFTypeRef v19 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                _initiateCallHandler_cold_4();
              }
              uint64_t v9 = 0;
            }
            id v21 = platform_communications_initiateCallToDestination((uint64_t)v7, v9, (uint64_t)v6);
            goto LABEL_61;
          }
          if (gLogObjects && gNumLogObjects >= 40)
          {
            os_log_type_t v20 = *(NSObject **)(gLogObjects + 312);
          }
          else
          {
            os_log_type_t v20 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            _initiateCallHandler_cold_2();
          }
LABEL_51:
          id v21 = 0;
          id v2 = 0;
          if (!v7)
          {
            if (!v6) {
              return v2;
            }
LABEL_53:
            CFRelease(v6);
            return v2;
          }
LABEL_61:
          CFRelease(v7);
          id v2 = v21;
          if (!v6) {
            return v2;
          }
          goto LABEL_53;
        }
        if (v7 || v9 != 4 || v6)
        {
          int v29 = logObjectForModule_27();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412802;
            *(void *)uint64_t v32 = v7;
            *(_WORD *)&v32[8] = 1024;
            int v33 = v9;
            __int16 v34 = 2112;
            CFStringRef v35 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Call type is not destination with destination ID: %@, service type: %d, addressBookID: %@ - ignoring message", buf, 0x1Cu);
          }
          goto LABEL_51;
        }
        if (v8 == 1) {
          return platform_communications_initiateCallToVoicemail();
        }
        else {
          return platform_communications_initiateRedial();
        }
      case 3:
        if (v6) {
          CFRelease(v6);
        }
        CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v30);
        if (!v30) {
          goto LABEL_25;
        }
        char v27 = logObjectForModule_27();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
        }
        goto LABEL_51;
      default:
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          int v14 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)uint64_t v32 = v12;
            *(_WORD *)&v32[8] = 1024;
            int v33 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)uint64_t v32 = ParamID;
          *(_WORD *)&void v32[4] = 1024;
          *(_DWORD *)&v32[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        goto LABEL_25;
    }
  }
}

id _acceptCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0;
      uint64_t v7 = 2;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v21 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v21);
          if (v21)
          {
            CFTypeRef v18 = logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_40;
          }
        }
        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              int v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v23 = v11;
                *(_WORD *)&v23[8] = 1024;
                int v24 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v13 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)int v23 = v9;
              *(_WORD *)&v23[4] = 1024;
              *(_DWORD *)&v23[6] = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
          }
          else
          {
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v21);
            if (v21)
            {
              char v17 = logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_40;
            }
            uint64_t v7 = DataAsU8;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if (v7 == 2) {
        goto LABEL_25;
      }
      if (v7 < 2) {
        goto LABEL_33;
      }
      os_log_type_t v20 = logObjectForModule_27();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _acceptCallHandler_cold_2();
      }
LABEL_40:
      id v2 = 0;
      if (v6) {
        goto LABEL_34;
      }
    }
    else
    {
      CFStringRef v6 = 0;
LABEL_25:
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "AcceptCall message with no acceptAction parameter - falling back to Accept/HoldAndAccept", buf, 2u);
      }
      uint64_t v7 = 0;
LABEL_33:
      id v2 = platform_communications_acceptCall(v7, (uint64_t)v6);
      if (v6) {
LABEL_34:
      }
        CFRelease(v6);
    }
  }
  return v2;
}

id _endCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0;
      unsigned int v7 = 2;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v22 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v22);
          if (v22)
          {
            CFTypeRef v19 = logObjectForModule_27();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_41;
          }
        }
        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              int v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v24 = v11;
                *(_WORD *)&v24[8] = 1024;
                int v25 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v13 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)int v24 = v9;
              *(_WORD *)&v24[4] = 1024;
              *(_DWORD *)&v24[6] = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
          }
          else
          {
            unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v22);
            if (v22)
            {
              CFTypeRef v18 = logObjectForModule_27();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_41;
            }
            unsigned int v7 = DataAsU8;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if (v7 == 2) {
        goto LABEL_26;
      }
      if (v7 < 2)
      {
        if (v7 != 1) {
          goto LABEL_33;
        }
        id v15 = platform_communications_endAllCalls();
        goto LABEL_34;
      }
      BOOL v21 = logObjectForModule_27();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        _endCallHandler_cold_2();
      }
LABEL_41:
      id v2 = 0;
      if (v6) {
        goto LABEL_35;
      }
    }
    else
    {
      CFStringRef v6 = 0;
LABEL_26:
      if (gLogObjects && gNumLogObjects >= 40)
      {
        int v16 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        int v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "EndCall message with no endAction parameter - falling back to End/Decline", buf, 2u);
      }
LABEL_33:
      id v15 = platform_communications_endCall(0, (uint64_t)v6);
LABEL_34:
      id v2 = v15;
      if (v6) {
LABEL_35:
      }
        CFRelease(v6);
    }
  }
  return v2;
}

id _swapCallHandler(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return platform_communications_swapCalls();
  }
  else {
    return 0;
  }
}

id _mergeCallHandler(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return platform_communications_mergeCalls();
  }
  else {
    return 0;
  }
}

id _holdStatusUpdateHandler(uint64_t a1, uint64_t a2)
{
  id updated = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0;
      char v7 = 0;
      BOOL v8 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v21 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v21);
          if (v21)
          {
            CFTypeRef v18 = logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_29;
          }
        }
        else
        {
          int v10 = ParamID;
          if (ParamID)
          {
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v14 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              int v14 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v23 = v12;
                *(_WORD *)&v23[8] = 1024;
                int v24 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v14 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)int v23 = v10;
              *(_WORD *)&v23[4] = 1024;
              *(_DWORD *)&v23[6] = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
          }
          else
          {
            BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v21);
            if (v21)
            {
              char v17 = logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_29;
            }
            BOOL v8 = DataAsBool;
            char v7 = 1;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if ((v7 & 1) == 0) {
        goto LABEL_32;
      }
      id updated = platform_communications_updateHoldStatus(v8, (uint64_t)v6);
      if (v6) {
        goto LABEL_23;
      }
    }
    else
    {
      CFStringRef v6 = 0;
LABEL_32:
      os_log_type_t v20 = logObjectForModule_27();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _holdStatusUpdateHandler_cold_1();
      }
LABEL_29:
      id updated = 0;
      if (v6) {
LABEL_23:
      }
        CFRelease(v6);
    }
  }
  return updated;
}

id _muteStatusUpdateHandler(uint64_t a1, uint64_t a2)
{
  id result = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v7 = 0;
      BOOL v8 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v18 = 0;
        if (ParamID)
        {
          int v10 = ParamID;
          uint64_t v11 = gLogObjects;
          int v12 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 40)
          {
            int v13 = *(NSObject **)(gLogObjects + 312);
          }
          else
          {
            int v13 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)os_log_type_t v20 = v11;
              *(_WORD *)&v20[8] = 1024;
              int v21 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              int v13 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)os_log_type_t v20 = v10;
            *(_WORD *)&v20[4] = 1024;
            *(_DWORD *)&v20[6] = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
          }
        }
        else
        {
          BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v18);
          if (v18)
          {
            int v16 = logObjectForModule_27();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            return 0;
          }
          BOOL v8 = DataAsBool;
          char v7 = 1;
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if ((v7 & 1) == 0) {
        goto LABEL_22;
      }
      return platform_communications_updateMuteStatus(v8);
    }
    else
    {
LABEL_22:
      char v17 = logObjectForModule_27();
      id result = (id)os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if (result)
      {
        _muteStatusUpdateHandler_cold_1();
        return 0;
      }
    }
  }
  return result;
}

id _sendDTMFHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0;
      uint64_t v7 = 12;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v20 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v20);
          if (v20)
          {
            BOOL v18 = logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_28;
          }
        }
        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              int v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)BOOL v22 = v11;
                *(_WORD *)&v22[8] = 1024;
                int v23 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                int v13 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)BOOL v22 = v9;
              *(_WORD *)&v22[4] = 1024;
              *(_DWORD *)&v22[6] = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
            }
          }
          else
          {
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v20);
            if (v20)
            {
              char v17 = logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_28;
            }
            uint64_t v7 = DataAsU8;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if (v7 >= 0xC) {
        goto LABEL_26;
      }
      id v2 = platform_communications_sendDTMF(v7, (uint64_t)v6);
      if (v6) {
        goto LABEL_23;
      }
    }
    else
    {
      CFStringRef v6 = 0;
LABEL_26:
      int v16 = logObjectForModule_27();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        _sendDTMFHandler_cold_1();
      }
LABEL_28:
      id v2 = 0;
      if (v6) {
LABEL_23:
      }
        CFRelease(v6);
    }
  }
  return v2;
}

uint64_t _startListUpdatesHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting List Updates...", buf, 2u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 10, 0);
  CFStringRef v6 = CFSetCreateMutable(kCFAllocatorDefault, 6, 0);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    BOOL v8 = (unsigned __int16 *)FirstParam;
    int v9 = 0;
    uint64_t v71 = 0;
    unsigned int v73 = 0;
    unsigned __int16 v66 = 0;
    BOOL v67 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    unsigned __int16 v65 = 0;
LABEL_10:
    int ParamID = iAP2MsgGetParamID((uint64_t)v8);
    BOOL v75 = 0;
    switch(ParamID)
    {
      case 0:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_24;
        }
        long long v55 = logObjectForModule_27();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        goto LABEL_110;
      case 1:
        unint64_t v19 = iAP2MsgGetFirstParam(a2, v8);
        if (!v19) {
          goto LABEL_20;
        }
        NextParam = (unsigned __int16 *)v19;
        while (1)
        {
          uint64_t v21 = iAP2MsgGetParamID((uint64_t)NextParam);
          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          CFSetAddValue(Mutable, (const void *)v21);
          NextParam = iAP2MsgGetNextParam(a2, v8, NextParam);
          if (!NextParam)
          {
LABEL_20:
            if (CFSetGetCount(Mutable) > 0) {
              int v9 = 1;
            }
LABEL_23:
            uint64_t v71 = 1;
LABEL_24:
            unsigned int v73 = 1;
            goto LABEL_48;
          }
        }
        int v53 = logObjectForModule_27();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_6(v21, a2);
        }
        goto LABEL_110;
      case 2:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_23;
        }
        int v57 = logObjectForModule_27();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
        }
        goto LABEL_110;
      case 3:
        unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(v8, &v75);
        if (!v75)
        {
          unsigned __int16 v66 = DataAsU16;
          goto LABEL_48;
        }
        __int16 v58 = logObjectForModule_27();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
        }
        goto LABEL_110;
      case 4:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(v8, &v75);
        if (!v75)
        {
          BOOL v67 = DataAsBool;
          goto LABEL_48;
        }
        int v59 = logObjectForModule_27();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
        }
        goto LABEL_110;
      case 5:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_40;
        }
        __int16 v60 = logObjectForModule_27();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_9(a2);
        }
        goto LABEL_110;
      case 6:
        unint64_t v24 = iAP2MsgGetFirstParam(a2, v8);
        if (!v24) {
          goto LABEL_35;
        }
        int v25 = (unsigned __int16 *)v24;
        break;
      case 7:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_39;
        }
        uint64_t v62 = logObjectForModule_27();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_12(a2);
        }
        goto LABEL_110;
      case 8:
        unsigned __int16 v27 = iAP2MsgGetDataAsU16(v8, &v75);
        if (!v75)
        {
          unsigned __int16 v65 = v27;
          goto LABEL_48;
        }
        long long v63 = logObjectForModule_27();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_13(a2);
        }
        goto LABEL_110;
      default:
        int v68 = v9;
        unsigned int v69 = v12;
        uint64_t v14 = v11;
        uint64_t v15 = v10;
        uint64_t v16 = gLogObjects;
        int v17 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          BOOL v18 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          BOOL v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v77 = v16;
            *(_WORD *)&v77[8] = 1024;
            LODWORD(v78) = v17;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v77 = ParamID;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", buf, 0xEu);
        }
        uint64_t v10 = v15;
        uint64_t v11 = v14;
        int v9 = v68;
        unsigned int v12 = v69;
        goto LABEL_48;
    }
    while (1)
    {
      uint64_t v26 = iAP2MsgGetParamID((uint64_t)v25);
      if (!iAP2MsgIsDataVoid(v25)) {
        break;
      }
      CFSetAddValue(v6, (const void *)v26);
      int v25 = iAP2MsgGetNextParam(a2, v8, v25);
      if (!v25)
      {
LABEL_35:
        if (CFSetGetCount(v6) > 0) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v10;
        }
LABEL_39:
        uint64_t v11 = 1;
LABEL_40:
        unsigned int v12 = 1;
LABEL_48:
        BOOL v8 = iAP2MsgGetNextParam(a2, 0, v8);
        if (!v8)
        {
          unint64_t v29 = v65 | ((unint64_t)v12 << 16) | ((unint64_t)v11 << 24) | ((unint64_t)v10 << 32);
          unsigned int v30 = v73;
          int v31 = v71;
          unint64_t v32 = v66 | ((unint64_t)v67 << 16) | ((unint64_t)v73 << 24) | (v71 << 32) | ((unint64_t)v9 << 40);
          goto LABEL_51;
        }
        goto LABEL_10;
      }
    }
    long long v54 = logObjectForModule_27();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      _startListUpdatesHandler_cold_11(v26, a2);
    }
LABEL_110:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v6) {
      CFRelease(v6);
    }
    return 0;
  }
  else
  {
    unint64_t v29 = 0;
    unint64_t v32 = 0;
    LOBYTE(v10) = 0;
    LODWORD(v11) = 0;
    unsigned int v12 = 0;
    LOBYTE(v9) = 0;
    int v31 = 0;
    unsigned int v30 = 0;
LABEL_51:
    unsigned int v33 = v30;
    char v34 = v9;
    unint64_t v72 = v29;
    uint64_t v74 = (v30 | v31 | v9) != 0;
    unint64_t v70 = v32;
    if (gLogObjects && gNumLogObjects >= 40)
    {
      int v35 = v31;
      __int16 v36 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      int v35 = v31;
      __int16 v36 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      __int16 v37 = "NO";
      if (v33) {
        int v38 = "YES";
      }
      else {
        int v38 = "NO";
      }
      if (v35) {
        __int16 v39 = "YES";
      }
      else {
        __int16 v39 = "NO";
      }
      *(_DWORD *)buf = 136315906;
      *(void *)__int16 v77 = v38;
      if (v34) {
        int v40 = "YES";
      }
      else {
        int v40 = "NO";
      }
      *(_WORD *)&v77[8] = 2080;
      long long v78 = v39;
      __int16 v79 = 2080;
      int v80 = v40;
      if (v74) {
        __int16 v37 = "YES";
      }
      __int16 v81 = 2080;
      int v82 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "[tempRecentsConfig] sendListAvailable: %s, sendListCount: %s, sendList: %s, started: %s", buf, 0x2Au);
    }
    if (gLogObjects && gNumLogObjects >= 40)
    {
      __int16 v41 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      __int16 v41 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFSetGetCount(Mutable);
      *(_DWORD *)buf = 134217984;
      *(void *)__int16 v77 = Count;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "recentsSubscriptionListCount: %ld", buf, 0xCu);
    }
    if (gLogObjects && gNumLogObjects >= 40)
    {
      __int16 v43 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      __int16 v43 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      int v44 = "NO";
      if (v12) {
        __int16 v45 = "YES";
      }
      else {
        __int16 v45 = "NO";
      }
      if (v11) {
        int v46 = "YES";
      }
      else {
        int v46 = "NO";
      }
      *(_DWORD *)buf = 136315906;
      *(void *)__int16 v77 = v45;
      if ((_BYTE)v10) {
        int v47 = "YES";
      }
      else {
        int v47 = "NO";
      }
      *(_WORD *)&v77[8] = 2080;
      long long v78 = v46;
      __int16 v79 = 2080;
      int v80 = v47;
      if (v12 | v11 | v10) {
        int v44 = "YES";
      }
      __int16 v81 = 2080;
      int v82 = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "[tempFavoritesConfig] sendListAvailable: %s, sendListCount: %s, sendList: %s, started: %s", buf, 0x2Au);
    }
    if (gLogObjects && gNumLogObjects >= 40)
    {
      __int16 v48 = *(NSObject **)(gLogObjects + 312);
    }
    else
    {
      __int16 v48 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      CFIndex v49 = CFSetGetCount(v6);
      *(_DWORD *)buf = 134217984;
      *(void *)__int16 v77 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "favoritesSubscriptionListCount: %ld", buf, 0xCu);
    }
    _removeSubscriberForSubFeature(Feature, 3);
    __int16 v50 = *(const void **)(Feature + 32);
    if (v50) {
      CFRelease(v50);
    }
    *(void *)(Feature + 32) = Mutable;
    *(void *)(Feature + 40) = v70 | (v74 << 48);
    int v51 = *(const void **)(Feature + 48);
    if (v51) {
      CFRelease(v51);
    }
    *(void *)(Feature + 48) = v6;
    *(void *)(Feature + 56) = v72 | ((unint64_t)((v12 | v11 | v10) != 0) << 40);
    *(_WORD *)(Feature + 66) = 257;
    _addSubscriberForSubFeature(Feature, 3);
    return 1;
  }
}

uint64_t _stopListUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 6u);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          CFSetRef v5 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          CFSetRef v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Stopping List Updates...", v10, 2u);
        }
        _removeSubscriberForSubFeature(v4, 3);
        BOOL v8 = *(const void **)(v4 + 32);
        uint64_t v7 = v4 + 32;
        CFStringRef v6 = v8;
        *(unsigned char *)(v7 + 35) = 0;
        *(unsigned char *)(v7 + 14) = 0;
        int v9 = (CFTypeRef *)(v7 + 16);
        *(unsigned char *)(v7 + 29) = 0;
        if (v8)
        {
          CFRelease(v6);
          *(void *)uint64_t v7 = 0;
        }
        if (*v9) {
          CFRelease(*v9);
        }
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        uint64_t result = 1;
        *int v9 = 0;
        *(void *)(v7 + 24) = 0;
      }
    }
  }
  return result;
}

uint64_t iap2_communications_callStateUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    CFDictionaryRef v2 = a2;
    CFSetRef v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        uint64_t v4 = &unk_100239000;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          CFSetRef v5 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          CFSetRef v5 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          uint64_t v6 = v3[1];
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received call state update for endpoint: %@", buf, 0xCu);
        }
        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 6u);
        if (result)
        {
          uint64_t v7 = (CFSetRef *)result;
          if (*(unsigned char *)(result + 10))
          {
            uint64_t v8 = (uint64_t)(v3 + 15);
            iAP2MsgInit((uint64_t)(v3 + 15), 16725, v3[24], 0xFFFF, 0, 0);
            CFSetRef v9 = *v7;
            if (*v7)
            {
              long long v63 = v3;
              CFIndex Count = CFSetGetCount(v9);
              int v68 = &v55;
              uint64_t v11 = __chkstk_darwin(Count);
              int v13 = (const void **)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
              if (v11) {
                memset((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v12);
              }
              unint64_t v70 = v7;
              CFSetGetValues(*v7, v13);
              uint64_t v14 = &unk_100239000;
              if (gLogObjects && gNumLogObjects >= 40)
              {
                uint64_t v15 = *(NSObject **)(gLogObjects + 312);
              }
              else
              {
                uint64_t v15 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                CFStringRef RawValuesString = CFSetCreateRawValuesString(*v70, 0);
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  int v17 = *(NSObject **)(gLogObjects + 312);
                }
                else
                {
                  int v17 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_callStateUpdateHandler_cold_3();
                }
                uint64_t v4 = &unk_100239000;
                if (RawValuesString) {
                  CFRelease(RawValuesString);
                }
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  BOOL v18 = *(NSObject **)(gLogObjects + 312);
                }
                else
                {
                  BOOL v18 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_callStateUpdateHandler_cold_1();
                }
              }
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v2, @"Status");
              BOOL v20 = v70;
              if (Value && (int valuePtr = -1431655766, CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)))
              {
                CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v2, @"CallUUID");
                CFBooleanRef v22 = (const __CFBoolean *)CFDictionaryGetValue(v2, @"IsConferenced");
                if (v22) {
                  BOOL v69 = CFBooleanGetValue(v22) != 0;
                }
                else {
                  BOOL v69 = 0;
                }
                if (Count < 1)
                {
                  int v54 = 0;
                }
                else
                {
                  int v24 = 0;
                  CFStringRef v62 = @"StartTimestamp";
                  CFStringRef v58 = @"DisconnectReason";
                  CFStringRef v57 = @"ConferenceGroup";
                  CFStringRef v61 = @"Service";
                  CFStringRef v59 = @"AddressBookID";
                  CFStringRef v60 = @"Label";
                  CFStringRef v66 = @"Direction";
                  CFStringRef v65 = @"DisplayName";
                  CFStringRef v64 = @"RemoteID";
                  *(void *)&long long v23 = 67109376;
                  long long v56 = v23;
                  *(void *)&long long v23 = 134218240;
                  long long v55 = v23;
                  CFDictionaryRef v67 = v2;
                  while (2)
                  {
                    int v25 = *(unsigned __int16 *)v13++;
                    switch(v25)
                    {
                      case 0:
                        if (v21 && CFStringGetLength(v21) > 0 || *((unsigned char *)v20 + 8))
                        {
                          CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(v2, v64);
                          if (v26)
                          {
                            CFStringRef v27 = v26;
                            uint64_t v28 = v8;
                            __int16 v29 = 0;
                            goto LABEL_80;
                          }
                          uint64_t v49 = v8;
                          __int16 v50 = 0;
                          goto LABEL_119;
                        }
                        goto LABEL_125;
                      case 1:
                        if (v21 && CFStringGetLength(v21) > 0 || *((unsigned char *)v20 + 8))
                        {
                          CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(v2, v65);
                          if (v30)
                          {
                            CFStringRef v27 = v30;
                            uint64_t v28 = v8;
                            __int16 v29 = 1;
                            goto LABEL_80;
                          }
                          uint64_t v49 = v8;
                          __int16 v50 = 1;
                          goto LABEL_119;
                        }
                        goto LABEL_125;
                      case 2:
                        int v31 = *((unsigned __int8 *)v20 + 8);
                        int v32 = valuePtr;
                        if (v31)
                        {
                          if ((valuePtr - 1) > 5) {
                            int v33 = 0;
                          }
                          else {
                            int v33 = dword_1001B8948[valuePtr - 1];
                          }
                          uint64_t v51 = v4[49];
                          int v52 = v14[100];
                          if (v51 && v52 >= 40)
                          {
                            int v53 = *(NSObject **)(v51 + 312);
                          }
                          else
                          {
                            int v53 = &_os_log_default;
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = v55;
                              *(void *)&uint8_t buf[4] = v51;
                              *(_WORD *)&buf[12] = 1024;
                              int v74 = v52;
                              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                            }
                          }
                          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = v56;
                            *(_DWORD *)&uint8_t buf[4] = v32;
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = v33;
                            _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Converted callStatus %d, to legacyCallStatus: %d", buf, 0xEu);
                          }
                          CFDictionaryRef v2 = v67;
                          uint64_t v4 = (void *)&unk_100239000;
                          uint64_t v14 = (_DWORD *)&unk_100239000;
                        }
                        else
                        {
                          LOBYTE(v33) = valuePtr;
                        }
                        BOOL v20 = v70;
                        LOBYTE(v41) = v33;
                        uint64_t v44 = v8;
                        __int16 v45 = 2;
                        goto LABEL_122;
                      case 3:
                        if ((!v21 || CFStringGetLength(v21) <= 0) && !*((unsigned char *)v20 + 8)) {
                          goto LABEL_125;
                        }
                        CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(v2, v66);
                        if (!v34)
                        {
                          uint64_t v44 = v8;
                          __int16 v45 = 3;
                          LOBYTE(v41) = 2;
                          goto LABEL_122;
                        }
                        int v71 = -1431655766;
                        if (CFNumberGetValue(v34, kCFNumberIntType, &v71))
                        {
                          int v35 = v71;
                          if (*((unsigned char *)v20 + 8))
                          {
                            if (v71 == 2) {
                              int v36 = 1;
                            }
                            else {
                              int v36 = 2 * (v71 != 1);
                            }
                            uint64_t v37 = v4[49];
                            int v38 = gNumLogObjects;
                            if (v37 && gNumLogObjects >= 40)
                            {
                              __int16 v39 = *(NSObject **)(v37 + 312);
                            }
                            else
                            {
                              __int16 v39 = &_os_log_default;
                              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)buf = v55;
                                *(void *)&uint8_t buf[4] = v37;
                                *(_WORD *)&buf[12] = 1024;
                                int v74 = v38;
                                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                              }
                            }
                            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = v56;
                              *(_DWORD *)&uint8_t buf[4] = v35;
                              *(_WORD *)&uint8_t buf[8] = 1024;
                              *(_DWORD *)&buf[10] = v36;
                              _os_log_debug_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "Converted direction %d, to legacyDirection: %d", buf, 0xEu);
                            }
                            CFDictionaryRef v2 = v67;
                            uint64_t v4 = (void *)&unk_100239000;
                            BOOL v20 = v70;
                          }
                          else
                          {
                            LOBYTE(v36) = v71;
                          }
                          if (iAP2MsgAddU8Param(v8, 0, 3, v36)) {
                            ++v24;
                          }
                          uint64_t v14 = (_DWORD *)&unk_100239000;
                        }
                        goto LABEL_125;
                      case 4:
                        if (v21 && CFStringGetLength(v21) >= 1)
                        {
                          uint64_t v28 = v8;
                          __int16 v29 = 4;
                          CFStringRef v27 = v21;
LABEL_80:
                          uint64_t v40 = (uint64_t)iAP2MsgAddCFStringParam(v28, 0, v29, v27);
                        }
                        else
                        {
                          if (!*((unsigned char *)v20 + 8)) {
                            goto LABEL_125;
                          }
                          uint64_t v49 = v8;
                          __int16 v50 = 4;
LABEL_119:
                          uint64_t v40 = (uint64_t)iAP2MsgAddStringParam(v49, 0, v50, "");
                        }
LABEL_123:
                        if (v40) {
                          ++v24;
                        }
LABEL_125:
                        if (--Count) {
                          continue;
                        }
                        if ((_WORD)v24) {
                          iap2_sessionControl_sendOutgoingMessage(v63, v8);
                        }
                        int v54 = 0;
                        break;
                      case 6:
                        if (!v21 || CFStringGetLength(v21) < 1) {
                          goto LABEL_125;
                        }
                        CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v2, v59);
                        uint64_t v28 = v8;
                        __int16 v29 = 6;
                        goto LABEL_80;
                      case 7:
                        if (!v21 || CFStringGetLength(v21) < 1) {
                          goto LABEL_125;
                        }
                        CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v2, v60);
                        uint64_t v28 = v8;
                        __int16 v29 = 7;
                        goto LABEL_80;
                      case 8:
                        if (!v21 || CFStringGetLength(v21) < 1) {
                          goto LABEL_125;
                        }
                        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v2, v61);
                        uint64_t v42 = v8;
                        __int16 v43 = 8;
                        goto LABEL_97;
                      case 9:
                        if (!v21 || CFStringGetLength(v21) < 1) {
                          goto LABEL_125;
                        }
                        uint64_t v44 = v8;
                        __int16 v45 = 9;
                        LOBYTE(v41) = v69;
                        goto LABEL_122;
                      case 10:
                        if (!v21) {
                          goto LABEL_125;
                        }
                        CFIndex Length = CFStringGetLength(v21);
                        BOOL v47 = v69;
                        if (Length <= 0) {
                          BOOL v47 = 0;
                        }
                        if (!v47) {
                          goto LABEL_125;
                        }
                        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v2, v57);
                        if (v41)
                        {
                          uint64_t v42 = v8;
                          __int16 v43 = 10;
LABEL_97:
                          uint64_t v40 = (uint64_t)iAP2MsgAddCFU8Param(v42, 0, v43, v41);
                        }
                        else
                        {
                          uint64_t v44 = v8;
                          __int16 v45 = 10;
LABEL_122:
                          uint64_t v40 = (uint64_t)iAP2MsgAddU8Param(v44, 0, v45, (char)v41);
                        }
                        goto LABEL_123;
                      case 11:
                        if (!v21 || CFStringGetLength(v21) < 1 || valuePtr) {
                          goto LABEL_125;
                        }
                        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v2, v58);
                        uint64_t v42 = v8;
                        __int16 v43 = 11;
                        goto LABEL_97;
                      case 12:
                        if (!v21) {
                          goto LABEL_125;
                        }
                        if (CFStringGetLength(v21) < 1) {
                          goto LABEL_125;
                        }
                        CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v2, v62);
                        if (!v48) {
                          goto LABEL_125;
                        }
                        *(void *)buf = 0;
                        if (!CFNumberGetValue(v48, kCFNumberLongLongType, buf) || !*(void *)buf) {
                          goto LABEL_125;
                        }
                        uint64_t v40 = iAP2MsgAddU64Param(v8, 0, 12, *(unint64_t *)buf);
                        goto LABEL_123;
                      default:
                        goto LABEL_125;
                    }
                    break;
                  }
                }
              }
              else
              {
                int v54 = 4;
              }
            }
            else
            {
              int v54 = 4;
            }
            return v54 == 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t iap2_communications_communicationsUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    CFSetRef v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v4 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          uint64_t v4 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = v3[1];
          *(_DWORD *)buf = 138412290;
          uint64_t v42 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received communications update for endpoint: %@", buf, 0xCu);
        }
        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 6u);
        if (result)
        {
          uint64_t v6 = result;
          if (!*(unsigned char *)(result + 24)) {
            return 0;
          }
          iAP2MsgInit((uint64_t)(v3 + 15), 16728, v3[24], 0xFFFF, 0, 0);
          uint64_t result = *(void *)(v6 + 16);
          if (result)
          {
            CFIndex Count = CFSetGetCount((CFSetRef)result);
            uint64_t v40 = &v25;
            uint64_t v8 = __chkstk_darwin(Count);
            uint64_t v10 = (const void **)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v8) {
              memset((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v9);
            }
            CFSetGetValues(*(CFSetRef *)(v6 + 16), v10);
            if (gLogObjects && gNumLogObjects >= 40)
            {
              uint64_t v11 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              uint64_t v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_37;
            }
            CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v6 + 16), 0);
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(NSObject **)(gLogObjects + 312);
            }
            else
            {
              int v13 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              iap2_communications_communicationsUpdateHandler_cold_3();
              if (!RawValuesString)
              {
LABEL_30:
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  uint64_t v14 = *(NSObject **)(gLogObjects + 312);
                }
                else
                {
                  uint64_t v14 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_communicationsUpdateHandler_cold_1();
                }
LABEL_37:
                if (Count >= 1)
                {
                  __int16 v15 = 0;
                  CFStringRef v39 = @"HoldAvailable";
                  CFStringRef v38 = @"MergeAvailable";
                  CFStringRef v37 = @"SwapAvailable";
                  CFStringRef v36 = @"HoldAndAcceptAvailable";
                  CFStringRef v35 = @"EndAndAcceptAvailable";
                  CFStringRef v34 = @"InitiateCallAvailable";
                  CFStringRef v33 = @"NewVoicemailCount";
                  CFStringRef v32 = @"CurrentCallCount";
                  CFStringRef v31 = @"MuteStatus";
                  CFStringRef v30 = @"FaceTimeVideoEnabled";
                  CFStringRef v29 = @"FaceTimeAudioEnabled";
                  CFStringRef v28 = @"TelephonyEnabled";
                  CFStringRef v27 = @"CellularSupported";
                  CFStringRef v26 = @"CarrierName";
                  do
                  {
                    int v16 = *(unsigned __int16 *)v10++;
                    switch(v16)
                    {
                      case 0:
                        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"SignalStrength");
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 0;
                        goto LABEL_52;
                      case 1:
                        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"RegistrationStatus");
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 1;
                        goto LABEL_52;
                      case 2:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"AirplaneModeStatus");
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 2;
                        goto LABEL_59;
                      case 3:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"TTYStatus");
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 3;
                        goto LABEL_59;
                      case 4:
                        CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(a2, v26);
                        int v24 = iAP2MsgAddCFStringParam((uint64_t)(v3 + 15), 0, 4, v23);
                        goto LABEL_60;
                      case 5:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v27);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 5;
                        goto LABEL_59;
                      case 6:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v28);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 6;
                        goto LABEL_59;
                      case 7:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v29);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 7;
                        goto LABEL_59;
                      case 8:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v30);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 8;
                        goto LABEL_59;
                      case 9:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v31);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 9;
                        goto LABEL_59;
                      case 10:
                        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, v32);
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 10;
                        goto LABEL_52;
                      case 11:
                        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, v33);
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 11;
LABEL_52:
                        int v24 = iAP2MsgAddCFU8Param(v18, 0, v19, Value);
                        goto LABEL_60;
                      case 12:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v34);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 12;
                        goto LABEL_59;
                      case 13:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v35);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 13;
                        goto LABEL_59;
                      case 14:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v36);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 14;
                        goto LABEL_59;
                      case 15:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v37);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 15;
                        goto LABEL_59;
                      case 16:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v38);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 16;
                        goto LABEL_59;
                      case 17:
                        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v39);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 17;
LABEL_59:
                        int v24 = iAP2MsgAddCFBooleanParam(v21, 0, v22, v20);
LABEL_60:
                        if (v24) {
                          ++v15;
                        }
                        break;
                      default:
                        break;
                    }
                    --Count;
                  }
                  while (Count);
                  if (v15) {
                    iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
                  }
                }
                return 1;
              }
            }
            else if (!RawValuesString)
            {
              goto LABEL_30;
            }
            CFRelease(RawValuesString);
            goto LABEL_30;
          }
        }
      }
    }
  }
  return result;
}

uint64_t iap2_communications_recentsListUpdateHandler(uint64_t result, const __CFArray *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v2 + 8);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received recents list update for endpoint: %@", (uint8_t *)&v6, 0xCu);
      }
      uint64_t result = iap2_feature_getFeature(v2, 6u);
      if (result)
      {
        if (*(unsigned char *)(result + 42)) {
          return 1;
        }
        else {
          return _recentsListUpdateHandler(v2, a2, 0);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _recentsListUpdateHandler(uint64_t result, const __CFArray *a2, int a3)
{
  if (!result) {
    return result;
  }
  CFSetRef v3 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0;
  }
  uint64_t result = iap2_feature_getFeature(result, 6u);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  if (!*(unsigned char *)(result + 67)) {
    return 0;
  }
  if (!*(unsigned char *)(result + 66))
  {
    CFStringRef v61 = logObjectForModule_27();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Accessory is not paired to CarPlay, list updates are unavailable!", buf, 2u);
    }
    return 1;
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "YES";
    if (!a2) {
      uint64_t v8 = "NO";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v91 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "recentsListAvailable: %s", buf, 0xCu);
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    size_t v9 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    size_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)uint64_t v91 = Count;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "recentsListCount: %ld", buf, 0xCu);
  }
  if (!a2)
  {
    iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0, 0);
    if (iAP2MsgAddU8Param((uint64_t)(v3 + 15), 0, 0, 0)) {
      return iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
    }
    return 1;
  }
  unsigned int v11 = _calculateListCap_0(v3, v6, a2, 0);
  uint64_t v12 = (uint64_t)(v3 + 15);
  iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0, 0);
  unint64_t v13 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(v3 + 15), 0, 0, 1);
  if (*(unsigned char *)(v6 + 44))
  {
    if (!(iAP2MsgAddU16Param((uint64_t)(v3 + 15), 0, 2, v11) | v13))
    {
LABEL_28:
      uint64_t result = 1;
      goto LABEL_33;
    }
  }
  else if (!v13)
  {
    goto LABEL_28;
  }
  uint64_t result = iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
LABEL_33:
  if (!*(unsigned char *)(v6 + 45)) {
    return result;
  }
  CFIndex v14 = CFSetGetCount(*(CFSetRef *)(v6 + 32));
  CFStringRef v65 = &v62;
  uint64_t v15 = __chkstk_darwin(v14);
  int v17 = (const void **)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = v15;
  if (v15) {
    memset((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v16);
  }
  int v74 = a3;
  CFSetGetValues(*(CFSetRef *)(v6 + 32), v17);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v18 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_50;
  }
  CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v6 + 32), 0);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    CFBooleanRef v20 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    CFBooleanRef v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    _recentsListUpdateHandler_cold_1();
    if (!RawValuesString) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (RawValuesString) {
LABEL_49:
  }
    CFRelease(RawValuesString);
LABEL_50:
  unsigned int v76 = _iAP2MessageCutoffSize_0((uint64_t)v3);
  iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0, 0);
  if (v11)
  {
    int v71 = v17;
    BOOL v69 = v3;
    CFIndex v22 = 0;
    unsigned __int16 v23 = 0;
    int v24 = 0;
    int v70 = 0;
    CFStringRef v87 = @"Occurrences";
    CFStringRef v77 = @"Duration";
    CFStringRef v85 = @"Type";
    CFStringRef v86 = @"UnixTimestamp";
    CFStringRef v83 = @"AddressBookID";
    CFStringRef v84 = @"Service";
    uint64_t v73 = v11 - 1;
    CFIndex v68 = (int)v73;
    CFStringRef v82 = @"Label";
    unsigned int v67 = v11;
    uint64_t v78 = v11;
    CFStringRef v81 = @"DisplayName";
    CFStringRef v80 = @"RemoteID";
    *(void *)&long long v21 = 67109120;
    long long v62 = v21;
    *(void *)&long long v21 = 134218240;
    long long v64 = v21;
    *(void *)&long long v21 = 67109376;
    long long v63 = v21;
    *(void *)&long long v21 = 67109632;
    long long v66 = v21;
    int v72 = 1;
    int v25 = v74;
    CFArrayRef v75 = a2;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v22);
      if (ValueAtIndex)
      {
        CFDictionaryRef v27 = ValueAtIndex;
        CFStringRef v28 = iAP2MsgAddGroupParam(v12, 1);
        if (v28) {
          ++v24;
        }
        int v88 = v24;
        if (v79 >= 1)
        {
          uint64_t v29 = (uint64_t)v28;
          uint64_t v30 = v79;
          CFStringRef v31 = v71;
          while (2)
          {
            int v32 = *(unsigned __int16 *)v31++;
            switch(v32)
            {
              case 0:
                iAP2MsgAddU16Param(v12, v29, 0, v23);
                goto LABEL_87;
              case 1:
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, v80);
                uint64_t v34 = v12;
                uint64_t v35 = v29;
                __int16 v36 = 1;
                goto LABEL_63;
              case 2:
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, v81);
                uint64_t v34 = v12;
                uint64_t v35 = v29;
                __int16 v36 = 2;
                goto LABEL_63;
              case 3:
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, v82);
                uint64_t v34 = v12;
                uint64_t v35 = v29;
                __int16 v36 = 3;
                goto LABEL_63;
              case 4:
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v27, v83);
                uint64_t v34 = v12;
                uint64_t v35 = v29;
                __int16 v36 = 4;
LABEL_63:
                iAP2MsgAddCFStringParam(v34, v35, v36, Value);
                goto LABEL_87;
              case 5:
                CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v27, v84);
                char v38 = _convertACCCallServiceToiAP2CallService(v37);
                uint64_t v39 = v12;
                uint64_t v40 = v29;
                __int16 v41 = 5;
                goto LABEL_86;
              case 6:
                CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v27, v85);
                int valuePtr = 0;
                if (v42 && CFNumberGetValue(v42, kCFNumberIntType, &valuePtr))
                {
                  if ((valuePtr - 1) >= 3)
                  {
                    uint64_t v48 = gLogObjects;
                    int v49 = gNumLogObjects;
                    if (gLogObjects && gNumLogObjects >= 40)
                    {
                      __int16 v50 = *(NSObject **)(gLogObjects + 312);
                    }
                    else
                    {
                      __int16 v50 = &_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = v64;
                        *(void *)uint64_t v91 = v48;
                        *(_WORD *)&v91[8] = 1024;
                        v92[0] = v49;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                      }
                    }
                    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v62;
                      *(_DWORD *)uint64_t v91 = valuePtr;
                      _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Invalid ACCCommunications_ListUpdate_Recents_CallType_t: %d!", buf, 8u);
                    }
                    char v43 = 0;
                    int v25 = v74;
                  }
                  else
                  {
                    char v43 = valuePtr;
                  }
                }
                else
                {
                  char v43 = 0;
                }
                char v38 = v43;
                uint64_t v39 = v12;
                uint64_t v40 = v29;
                __int16 v41 = 6;
                goto LABEL_86;
              case 7:
                CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v27, v86);
                iAP2MsgAddCFU64Param(v12, v29, 7, v44);
                goto LABEL_87;
              case 8:
                buf[0] = 1;
                if (!v25
                  || (CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v27, v87)) == 0
                  || (CFNumberGetValue(v45, kCFNumberCharType, buf), buf[0] == 1))
                {
                  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v27, v77);
                  iAP2MsgAddCFU32Param(v12, v29, 8, v46);
                }
                goto LABEL_87;
              case 9:
                if (v25)
                {
                  CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v27, v87);
                  iAP2MsgAddCFU8Param(v12, v29, 9, v47);
                }
                else
                {
                  uint64_t v39 = v12;
                  uint64_t v40 = v29;
                  __int16 v41 = 9;
                  char v38 = 1;
LABEL_86:
                  iAP2MsgAddU8Param(v39, v40, v41, v38);
                }
LABEL_87:
                if (!--v30) {
                  break;
                }
                continue;
              default:
                goto LABEL_87;
            }
            break;
          }
        }
        unsigned int MsgLen = iAP2MsgGetMsgLen(v12);
        uint64_t v52 = gLogObjects;
        int v53 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          int v54 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          int v54 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v64;
            *(void *)uint64_t v91 = v52;
            *(_WORD *)&v91[8] = 1024;
            v92[0] = v53;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v63;
          *(_DWORD *)uint64_t v91 = MsgLen;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v76;
          _os_log_debug_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "messageSize: %d bytes, messageCutoffSize: %d bytes", buf, 0xEu);
        }
        int v24 = v88;
        if (MsgLen > v76 || v22 == v73)
        {
          uint64_t v55 = gLogObjects;
          int v56 = gNumLogObjects;
          a2 = v75;
          if (gLogObjects && gNumLogObjects >= 40)
          {
            CFStringRef v57 = *(NSObject **)(gLogObjects + 312);
          }
          else
          {
            CFStringRef v57 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v64;
              *(void *)uint64_t v91 = v55;
              *(_WORD *)&v91[8] = 1024;
              v92[0] = v56;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
          }
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            int v58 = v70 + 1;
            *(_DWORD *)buf = v66;
            *(_DWORD *)uint64_t v91 = (unsigned __int16)v70;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v22 + 1;
            LOWORD(v92[0]) = 1024;
            *(_DWORD *)((char *)v92 + 2) = v67;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Sending ListUpdate message (RecentsList %d, entry: %d/%d)", buf, 0x14u);
            int v70 = v58;
          }
          if (!(_WORD)v24) {
            goto LABEL_110;
          }
          CFStringRef v59 = v69;
          int v60 = iap2_sessionControl_sendOutgoingMessage(v69, v12);
          v72 &= v60;
          if (v22 < v68)
          {
            iAP2MsgInit(v12, 16753, v59[24], 0xFFFF, 0, 0);
LABEL_110:
            int v24 = 0;
          }
        }
        else
        {
          a2 = v75;
        }
      }
      ++v22;
      ++v23;
      if (v22 == v78) {
        return v72 & 1;
      }
    }
  }
  int v72 = 1;
  return v72 & 1;
}

uint64_t iap2_communications_recentsListUpdateCoalescedHandler(uint64_t result, const __CFArray *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v2 + 8);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received recents list update (coalesced) for endpoint: %@", (uint8_t *)&v6, 0xCu);
      }
      uint64_t result = iap2_feature_getFeature(v2, 6u);
      if (result)
      {
        if (*(unsigned char *)(result + 42)) {
          return _recentsListUpdateHandler(v2, a2, 1);
        }
        else {
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_communications_favoritesListUpdateHandler(uint64_t result, const __CFArray *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0;
  }
  uint64_t result = iap2_feature_getFeature(result, 6u);
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (!*(unsigned char *)(result + 67)) {
    return 0;
  }
  if (!*(unsigned char *)(result + 66))
  {
    CFNumberRef v47 = logObjectForModule_27();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Accessory is not paired to CarPlay, list updates are unavailable!", buf, 2u);
    }
    return 1;
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = "YES";
    if (!a2) {
      int v6 = "NO";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)unsigned int v67 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "favoritesListAvailable: %s", buf, 0xCu);
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)unsigned int v67 = Count;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "favoritesListCount: %ld", buf, 0xCu);
  }
  if (!a2)
  {
    iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0, 0);
    if (iAP2MsgAddU8Param((uint64_t)(v2 + 15), 0, 5, 0)) {
      return iap2_sessionControl_sendOutgoingMessage(v2, (uint64_t)(v2 + 15));
    }
    return 1;
  }
  unsigned int v9 = _calculateListCap_0(v2, v4, a2, 1);
  uint64_t v10 = (uint64_t)(v2 + 15);
  iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0, 0);
  unint64_t v11 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(v2 + 15), 0, 5, 1);
  if (*(unsigned char *)(v4 + 59))
  {
    if (!(iAP2MsgAddU16Param((uint64_t)(v2 + 15), 0, 7, v9) | v11))
    {
LABEL_28:
      uint64_t result = 1;
      goto LABEL_33;
    }
  }
  else if (!v11)
  {
    goto LABEL_28;
  }
  uint64_t result = iap2_sessionControl_sendOutgoingMessage(v2, (uint64_t)(v2 + 15));
LABEL_33:
  if (!*(unsigned char *)(v4 + 60)) {
    return result;
  }
  CFIndex v12 = CFSetGetCount(*(CFSetRef *)(v4 + 48));
  __int16 v50 = &v48;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (const void **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = v13;
  if (v13) {
    memset((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v14);
  }
  CFSetGetValues(*(CFSetRef *)(v4 + 48), v15);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    size_t v16 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    size_t v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_50;
  }
  CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v4 + 48), 0);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v18 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    _recentsListUpdateHandler_cold_1();
    if (!RawValuesString) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (RawValuesString) {
LABEL_49:
  }
    CFRelease(RawValuesString);
LABEL_50:
  unsigned int v59 = _iAP2MessageCutoffSize_0((uint64_t)v2);
  iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0, 0);
  if (v9)
  {
    int v56 = v15;
    int v54 = v2;
    CFIndex v20 = 0;
    unsigned __int16 v21 = 0;
    __int16 v22 = 0;
    int v55 = 0;
    CFStringRef v65 = @"Service";
    CFStringRef v64 = @"AddressBookID";
    CFStringRef v63 = @"Label";
    CFStringRef v62 = @"DisplayName";
    uint64_t v58 = v9 - 1;
    CFIndex v53 = (int)v58;
    unsigned int v52 = v9;
    uint64_t v60 = v9;
    int v57 = 1;
    *(void *)&long long v19 = 67109376;
    long long v49 = v19;
    *(void *)&long long v19 = 67109632;
    long long v51 = v19;
    *(void *)&long long v19 = 134218240;
    long long v48 = v19;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v20);
      if (!ValueAtIndex) {
        goto LABEL_86;
      }
      CFDictionaryRef v24 = ValueAtIndex;
      CFArrayRef v25 = a2;
      CFStringRef v26 = iAP2MsgAddGroupParam(v10, 6);
      if (v26) {
        ++v22;
      }
      if (v61 >= 1)
      {
        uint64_t v27 = (uint64_t)v26;
        uint64_t v28 = v61;
        uint64_t v29 = v56;
        do
        {
          int v30 = *(unsigned __int16 *)v29++;
          switch(v30)
          {
            case 0:
              iAP2MsgAddU16Param(v10, v27, 0, v21);
              break;
            case 1:
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v24, @"RemoteID");
              uint64_t v32 = v10;
              uint64_t v33 = v27;
              __int16 v34 = 1;
              goto LABEL_63;
            case 2:
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v24, v62);
              uint64_t v32 = v10;
              uint64_t v33 = v27;
              __int16 v34 = 2;
              goto LABEL_63;
            case 3:
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v24, v63);
              uint64_t v32 = v10;
              uint64_t v33 = v27;
              __int16 v34 = 3;
              goto LABEL_63;
            case 4:
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v24, v64);
              uint64_t v32 = v10;
              uint64_t v33 = v27;
              __int16 v34 = 4;
LABEL_63:
              iAP2MsgAddCFStringParam(v32, v33, v34, Value);
              break;
            case 5:
              CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v24, v65);
              char v36 = _convertACCCallServiceToiAP2CallService(v35);
              iAP2MsgAddU8Param(v10, v27, 5, v36);
              break;
            default:
              break;
          }
          --v28;
        }
        while (v28);
      }
      unsigned int MsgLen = iAP2MsgGetMsgLen(v10);
      uint64_t v38 = gLogObjects;
      int v39 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v40 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        uint64_t v40 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v48;
          *(void *)unsigned int v67 = v38;
          *(_WORD *)&v67[8] = 1024;
          v68[0] = v39;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v49;
        *(_DWORD *)unsigned int v67 = MsgLen;
        *(_WORD *)&v67[4] = 1024;
        *(_DWORD *)&v67[6] = v59;
        _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "messageSize: %d bytes, messageCutoffSize: %d bytes", buf, 0xEu);
      }
      a2 = v25;
      if (MsgLen <= v59 && v20 != v58) {
        goto LABEL_86;
      }
      uint64_t v41 = gLogObjects;
      int v42 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        char v43 = *(NSObject **)(gLogObjects + 312);
      }
      else
      {
        char v43 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v48;
          *(void *)unsigned int v67 = v41;
          *(_WORD *)&v67[8] = 1024;
          v68[0] = v42;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        int v44 = v55 + 1;
        *(_DWORD *)buf = v51;
        *(_DWORD *)unsigned int v67 = (unsigned __int16)v55;
        *(_WORD *)&v67[4] = 1024;
        *(_DWORD *)&v67[6] = v20 + 1;
        LOWORD(v68[0]) = 1024;
        *(_DWORD *)((char *)v68 + 2) = v52;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Sending ListUpdate message (FavoritesList %d, entry: %d/%d)", buf, 0x14u);
        int v55 = v44;
      }
      if (!v22) {
        goto LABEL_85;
      }
      CFNumberRef v45 = v54;
      int v46 = iap2_sessionControl_sendOutgoingMessage(v54, v10);
      v57 &= v46;
      if (v20 < v53) {
        break;
      }
LABEL_86:
      ++v20;
      ++v21;
      if (v20 == v60) {
        return v57 & 1;
      }
    }
    iAP2MsgInit(v10, 16753, v45[24], 0xFFFF, 0, 0);
LABEL_85:
    __int16 v22 = 0;
    goto LABEL_86;
  }
  int v57 = 1;
  return v57 & 1;
}

uint64_t _calculateListCap_0(void *a1, uint64_t a2, const __CFArray *a3, int a4)
{
  if (!a1) {
    return 50;
  }
  unsigned __int16 v5 = 50;
  if (a2 && *a1)
  {
    if (iap2_identification_isIdentifiedForCarPlay((uint64_t)a1)) {
      unsigned int v8 = 12;
    }
    else {
      unsigned int v8 = 50;
    }
    if (a4 == 1)
    {
      uint64_t v10 = (unsigned __int16 *)(a2 + 56);
    }
    else
    {
      unsigned int v9 = v8;
      if (a4)
      {
LABEL_12:
        CFIndex Count = CFArrayGetCount(a3);
        CFIndex v12 = Count;
        if (v8 >= (unsigned __int16)Count) {
          unsigned __int16 v13 = Count;
        }
        else {
          unsigned __int16 v13 = v8;
        }
        if (v13 <= v9 || v9 == 0) {
          unsigned __int16 v5 = v13;
        }
        else {
          unsigned __int16 v5 = v9;
        }
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v15 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          uint64_t v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v17[0] = 67109888;
          v17[1] = v5;
          __int16 v18 = 2048;
          CFIndex v19 = v12;
          __int16 v20 = 1024;
          unsigned int v21 = v8;
          __int16 v22 = 1024;
          unsigned int v23 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "listCap: %d (listCount: %ld, hardCap: %d, listMax: %d)", (uint8_t *)v17, 0x1Eu);
        }
        return v5;
      }
      uint64_t v10 = (unsigned __int16 *)(a2 + 40);
    }
    unsigned int v9 = *v10;
    goto LABEL_12;
  }
  return v5;
}

uint64_t _iAP2MessageCutoffSize_0(uint64_t a1)
{
  unsigned int MaxSendPayloadSize = iap2_endpoint_getMaxSendPayloadSize(a1);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 312);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109376;
    v4[1] = MaxSendPayloadSize;
    __int16 v5 = 1024;
    unsigned int v6 = MaxSendPayloadSize >> 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "maxPayloadSize: %d, messageCutoffSize: %d", (uint8_t *)v4, 0xEu);
  }
  return MaxSendPayloadSize >> 1;
}

CFNumberRef _convertACCCallServiceToiAP2CallService(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    if (result)
    {
      uint64_t result = (const __CFNumber *)valuePtr;
      if (valuePtr - 1 >= 3)
      {
        if (gLogObjects && gNumLogObjects >= 40)
        {
          int v1 = *(NSObject **)(gLogObjects + 312);
        }
        else
        {
          int v1 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        uint64_t result = (const __CFNumber *)os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
        if (result)
        {
          _convertACCCallServiceToiAP2CallService_cold_1((uint64_t)&valuePtr, v1, v2, v3, v4, v5, v6, v7);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_communications_carPlayPairedVehiclesDidChangeHandler(uint64_t *a1, int a2)
{
  if (a1)
  {
    if (*a1)
    {
      uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 6u);
      if (Feature)
      {
        uint64_t v5 = (unsigned __int8 *)Feature;
        if ((a2 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 40)
          {
            uint64_t v6 = *(NSObject **)(gLogObjects + 312);
          }
          else
          {
            uint64_t v6 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13) = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CarPlay paired vehicles did change!", (uint8_t *)&v13, 2u);
          }
        }
        CFTypeRef v7 = iap2_accAuthentication_copyCertificateSerial((uint64_t)a1);
        if (v7)
        {
          unsigned int v8 = v7;
          int isCarPlayPairedWithCertSerial = platform_CarPlay_isCarPlayPairedWithCertSerial((uint64_t)v7);
          CFRelease(v8);
          if (gLogObjects && gNumLogObjects >= 40)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 312);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            unint64_t v11 = "NO";
            if (isCarPlayPairedWithCertSerial) {
              unint64_t v11 = "YES";
            }
            int v13 = 136315138;
            size_t v14 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "carPlayPaired: %s", (uint8_t *)&v13, 0xCu);
          }
          if (v5[66] != isCarPlayPairedWithCertSerial || a2)
          {
            v5[66] = isCarPlayPairedWithCertSerial;
            if (!isCarPlayPairedWithCertSerial || (a2 & 1) != 0)
            {
              iAP2MsgInit((uint64_t)(a1 + 15), 16753, a1[24], 0xFFFF, 0, 0);
              iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 0, 0);
              iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
              iAP2MsgInit((uint64_t)(a1 + 15), 16753, a1[24], 0xFFFF, 0, 0);
              iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 5, 0);
              iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
            }
            else
            {
              if (v5[46]) {
                platform_communications_triggerListUpdate(0, v5[42]);
              }
              if (v5[61]) {
                platform_communications_triggerListUpdate(1, 0);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void *_createFeature_20(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v1 = malloc_type_calloc(1uLL, 0x48uLL, 0x10600405CCB10DDuLL);
  uint64_t v2 = v1;
  if (v1)
  {
    *int v1 = 0;
    v1[1] = 0;
    *((unsigned char *)v1 + 8) = 1;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    v1[8] = 0;
    platform_communications_incrementUserCount();
  }
  return v2;
}

void **_destroyFeature_20(void **result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v2 = (uint64_t)*result;
    if (*result)
    {
      for (int i = 0; i != 4; ++i)
        _removeSubscriberForSubFeature(v2, i);
      platform_communications_decrementUserCount();
      if (*(void *)v2)
      {
        CFRelease(*(CFTypeRef *)v2);
        *(void *)uint64_t v2 = 0;
      }
      uint64_t v4 = *(const void **)(v2 + 16);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 16) = 0;
      }
      uint64_t v5 = *(const void **)(v2 + 32);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 32) = 0;
      }
      uint64_t v6 = *(const void **)(v2 + 48);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 48) = 0;
      }
      if (*v1)
      {
        free(*v1);
        *int v1 = 0;
      }
      return (void **)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_18(uint64_t a1)
{
  unsigned __int8 v6 = 0;
  uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgCallStateList, 3u, &v6);
  if (!result)
  {
    int v3 = v6;
    uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgCommunicationsList, 3u, &v6);
    if (!result)
    {
      int v4 = v6;
      uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgCallControlList, 0xBu, &v6);
      if (!result)
      {
        int v5 = v6;
        uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgListUpdatesList, 3u, &v6);
        if (!result)
        {
          if (v4 | v3 | v5 | v6)
          {
            iap2_features_createFeature(a1, 6u);
            iap2_identification_setIdentifiedForFeature(a1, 6u);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_100114560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_100116A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100116F78(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1001181A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

uint64_t iAP2MsgInitMessage(uint64_t result, __int16 a2, __int16 a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 24) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(void *)(result + 40) = a6;
  *(void *)(result + 48) = a7;
  if (a4)
  {
    *(unsigned char *)a4 = HIBYTE(a2);
    *(unsigned char *)(a4 + 1) = a2;
    *(_WORD *)(a4 + 2) = 1536;
    *(unsigned char *)(a4 + 4) = HIBYTE(a3);
    uint64_t v7 = a4 + 6;
    *(unsigned char *)(a4 + 5) = a3;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)(result + 32) = v7;
  return result;
}

uint64_t iAP2MsgInitParam(uint64_t result, unsigned char *a2, __int16 a3, int a4, unsigned int a5, uint64_t a6)
{
  if (a6)
  {
    char v6 = *(unsigned char *)(a6 + 1);
    unsigned __int16 v7 = _byteswap_ushort(*(_WORD *)a6);
    if (a4 == 12) {
      __int16 v8 = 4;
    }
    else {
      __int16 v8 = a5;
    }
    *(unsigned char *)a6 = (unsigned __int16)(v7 + v8) >> 8;
    *(unsigned char *)(a6 + 1) = v6 + v8;
  }
  unsigned int v9 = 0;
  *(void *)(result + 32) += a5;
  *a2 = BYTE1(a5);
  a2[1] = a5;
  a2[2] = HIBYTE(a3);
  a2[3] = a3;
  uint64_t v10 = *(void *)(result + 24);
  unsigned int v11 = *(_DWORD *)(result + 16);
  if (v10 && v11 >= 6) {
    unsigned int v9 = __rev16(*(unsigned __int16 *)(v10 + 2));
  }
  char v12 = 0;
  unsigned int v13 = (v9 + a5) >> 8;
  size_t v14 = (unsigned char *)(v10 + 2);
  if (v11 <= 5) {
    size_t v14 = 0;
  }
  unsigned char *v14 = v13;
  uint64_t v15 = *(void *)(result + 24);
  unsigned int v16 = *(_DWORD *)(result + 16);
  if (v15 && v16 >= 6) {
    char v12 = *(unsigned char *)(v15 + 3);
  }
  char v17 = v12 + a5;
  uint64_t v18 = v15 + 2;
  if (v16 <= 5) {
    uint64_t v18 = 0;
  }
  *(unsigned char *)(v18 + 1) = v17;
  return result;
}

uint64_t iAP2MsgGetMsgLen(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*(unsigned __int16 *)(v1 + 2)) >> 16;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t iAP2MsgInit(uint64_t a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a1) {
    iAP2MsgInitMessage(a1, 16448, a2, a3, a4, a5, a6);
  }
  return a1;
}

uint64_t iAP2MsgCleanup(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(result + 40);
    if (v1) {
      return v1();
    }
  }
  return result;
}

uint64_t iAP2MsgSetCallbackOnSend(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 64) = a2;
  }
  return result;
}

uint64_t iAP2MsgGetFreeParam(uint64_t a1)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 4 <= *(unsigned int *)(a1 + 16)) {
    return *(void *)(a1 + 32);
  }
  else {
    return 0;
  }
}

uint64_t iAP2MsgGetSom(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(unsigned __int16 **)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*v1) >> 16;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t iAP2MsgGetMsgID(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*(unsigned __int16 *)(v1 + 4)) >> 16;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t iAP2MsgSetMsgID(uint64_t result, __int16 a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 24);
    if (v2 && *(_DWORD *)(result + 16) >= 6u)
    {
      *(unsigned char *)(v2 + 4) = HIBYTE(a2);
      *(unsigned char *)(*(void *)(result + 24) + 5) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL iAP2MsgSetCleanupCB(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 40) = a2;
  }
  return a1 != 0;
}

uint64_t iAP2MsgGetParamID(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
}

uint64_t iAP2MsgGetParamValueLen(unsigned __int16 *a1)
{
  unsigned int v1 = __rev16(*a1);
  BOOL v2 = v1 >= 4;
  unsigned int v3 = v1 - 4;
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t iAP2MsgGetParamValueData(uint64_t a1)
{
  return a1 + 4;
}

unint64_t iAP2MsgGetFirstParam(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v3 = *a2;
    BOOL v2 = a2 + 2;
    if (__rev16(v3) <= 4) {
      return 0;
    }
    else {
      return (unint64_t)v2;
    }
  }
  else
  {
    unint64_t result = 0;
    unint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void *)(a1 + 24) + 6;
    uint64_t v8 = v6 - v7;
    if (v6 > v7) {
      unsigned int v9 = (unsigned __int16 *)v7;
    }
    else {
      unsigned int v9 = 0;
    }
    if (v6) {
      BOOL v10 = v6 > v7;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      if (v8 < 4) {
        return 0;
      }
      unint64_t result = v7;
      if (v8 < (unint64_t)__rev16(*v9)) {
        return 0;
      }
    }
  }
  return result;
}

unsigned __int16 *iAP2MsgGetNextParam(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return iAP2MsgGetNextParamWithError(a1, a2, a3, 0);
}

unsigned __int16 *iAP2MsgGetNextParamWithError(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned char *a4)
{
  if (a2) {
    unsigned int v4 = __rev16(*a2);
  }
  else {
    unsigned int v4 = 0;
  }
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5 && *(_DWORD *)(a1 + 16) >= 6u) {
      unsigned int v6 = bswap32(*(unsigned __int16 *)(v5 + 2)) >> 16;
    }
    else {
      unsigned int v6 = 0;
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = MEMORY[0x18];
  }
  uint64_t v7 = __rev16(*a3);
  if (!a4)
  {
    if (v7 < 4) {
      return 0;
    }
    goto LABEL_14;
  }
  *a4 = 0;
  if (v7 > 3)
  {
LABEL_14:
    uint64_t v8 = (unsigned __int16 *)((char *)a3 + v7);
    unint64_t v9 = *(void *)(a1 + 32);
    BOOL v12 = v9 >= (unint64_t)a3 + v7;
    uint64_t v10 = v9 - ((void)a3 + v7);
    if (v12
      && v10 >= 4
      && ((unint64_t v11 = __rev16(*v8), a2) ? (v12 = v8 >= (unsigned __int16 *)((char *)a2 + v4)) : (v12 = 0),
          v12 ? (char v13 = 0) : (char v13 = 1),
          v10 >= v11 && (v13 & 1) != 0))
    {
      if ((unint64_t)v8 < v5 + (unint64_t)v6) {
        return v8;
      }
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        size_t v14 = logObjectForModule_28();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          iAP2MsgGetNextParamWithError_cold_3(v6, v14);
        }
      }
    }
    else if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_bluetooth_copyNameForMacAddress_cold_2();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        iAP2MsgGetNextParamWithError_cold_1(v7, v4, v15);
      }
    }
    return 0;
  }
  uint64_t v8 = 0;
  *a4 = 1;
  return v8;
}

void *logObjectForModule_28()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 20;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 152);
  }
  unsigned int v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_bluetooth_copyNameForMacAddress_cold_2();
  }
  return v1;
}

uint64_t iAP2MsgForEachParamDo(uint64_t a1, unsigned __int16 *a2, uint64_t (*a3)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t), uint64_t a4)
{
  unint64_t FirstParam = iAP2MsgGetFirstParam(a1, a2);
  char v17 = 0;
  if (!FirstParam) {
    return 0;
  }
  unint64_t v9 = (unsigned __int16 *)FirstParam;
  while (1)
  {
    uint64_t v10 = a3(a1, a2, v9, a4);
    NextParamWithError = iAP2MsgGetNextParamWithError(a1, a2, v9, &v17);
    if (v17) {
      break;
    }
    unint64_t v9 = NextParamWithError;
    if (!NextParamWithError || v10) {
      return v10;
    }
  }
  if (_iAP2LogEnableMask)
  {
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v14 = gNumLogObjects < 20;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      uint64_t v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        CFIndex v19 = (const char *)v12;
        __int16 v20 = 1024;
        int v21 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
    }
    else
    {
      uint64_t v15 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      CFIndex v19 = "iAP2MsgForEachParamDo";
      __int16 v20 = 1024;
      int v21 = 466;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Couldn't get next param from iAP2MsgGetNextParamWithError\n", buf, 0x12u);
    }
  }
  return 0xFFFFFFFFLL;
}

unsigned char *iAP2MsgAddGroupParam(uint64_t a1, __int16 a2)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 4 <= *(unsigned int *)(a1 + 16)) {
    BOOL v2 = *(unsigned char **)(a1 + 32);
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    iAP2MsgInitParam(a1, v2, a2, 10, 4u, 0);
  }
  return v2;
}

uint64_t iAP2MsgAddU64Param(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 12 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 0, 0xCu, a2);
    *(void *)(v4 + 4) = bswap64(a4);
  }
  return v4;
}

uint64_t iAP2MsgAddU32Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 8 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 1, 8u, a2);
    *(_DWORD *)(v4 + 4) = bswap32(a4);
  }
  return v4;
}

uint64_t iAP2MsgAddU16Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 6 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 2, 6u, a2);
    *(_WORD *)(v4 + 4) = __rev16(a4);
  }
  return v4;
}

unsigned char *iAP2MsgAddU8Param(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 5 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(unsigned char **)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, v4, a3, 3, 5u, a2);
    v4[4] = a4;
  }
  return v4;
}

uint64_t iAP2MsgAddI64Param(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 12 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 4, 0xCu, a2);
    *(void *)(v4 + 4) = bswap64(a4);
  }
  return v4;
}

uint64_t iAP2MsgAddI32Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 8 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 5, 8u, a2);
    *(_DWORD *)(v4 + 4) = bswap32(a4);
  }
  return v4;
}

uint64_t iAP2MsgAddI16Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 6 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (unsigned char *)v4, a3, 6, 6u, a2);
    *(_WORD *)(v4 + 4) = bswap32(a4) >> 16;
  }
  return v4;
}

unsigned char *iAP2MsgAddI8Param(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 5 <= *(unsigned int *)(a1 + 16)) {
    uint64_t v4 = *(unsigned char **)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, v4, a3, 7, 5u, a2);
    v4[4] = a4;
  }
  return v4;
}

unsigned char *iAP2MsgAddStringParam(uint64_t a1, uint64_t a2, __int16 a3, char *__s)
{
  int64_t v8 = *(unsigned int *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v9 = *(unsigned char **)(a1 + 32);
  unint64_t v11 = v10 + v8 - (void)v9;
  if (v11 < 5)
  {
    size_t v16 = 0;
  }
  else
  {
    size_t v12 = strlen(__s) + 1;
    if (v11 - 4 < v12)
    {
      int v13 = __s - 5;
      do
      {
        unint64_t v14 = v11;
        if (&v13[v11] <= __s) {
          break;
        }
        int v15 = v13[v11--];
      }
      while (v15 < -64);
      size_t v12 = v14 - 4;
    }
    if (v12 - 65532 >= 0xFFFFFFFFFFFF0000) {
      size_t v16 = v12;
    }
    else {
      size_t v16 = 0;
    }
  }
  if ((uint64_t)&v9[(v16 + 4) - v10] <= v8) {
    char v17 = v9;
  }
  else {
    char v17 = 0;
  }
  if (v17)
  {
    iAP2MsgInitParam(a1, v17, a3, 8, (unsigned __int16)(v16 + 4), a2);
    strlcpy(v17 + 4, __s, v16);
  }
  return v17;
}

unsigned char *iAP2MsgAddDataParam(uint64_t a1, uint64_t a2, __int16 a3, const void *a4, unsigned int a5)
{
  if (*(void *)(a1 + 32) + a5 + 4 - *(void *)(a1 + 24) <= (uint64_t)*(unsigned int *)(a1 + 16)) {
    uint64_t v5 = *(unsigned char **)(a1 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    iAP2MsgInitParam(a1, v5, a3, 9, (unsigned __int16)(a5 + 4), a2);
    memcpy(v5 + 4, a4, a5);
  }
  return v5;
}

unsigned char *iAP2MsgAddVoidParam(uint64_t a1, uint64_t a2, __int16 a3)
{
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) + 4 <= *(unsigned int *)(a1 + 16)) {
    unsigned int v3 = *(unsigned char **)(a1 + 32);
  }
  else {
    unsigned int v3 = 0;
  }
  if (v3) {
    iAP2MsgInitParam(a1, v3, a3, 11, 4u, a2);
  }
  return v3;
}

unsigned char *iAP2MsgAddArrayU8Param(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, unsigned int a5)
{
  if (a5 > 0xFFFB) {
    return 0;
  }
  uint64_t v6 = a5;
  uint64_t v7 = *(void *)(a1 + 32);
  if (a5 + 4 + v7 - *(void *)(a1 + 24) <= *(unsigned int *)(a1 + 16)) {
    int64_t v8 = *(unsigned char **)(a1 + 32);
  }
  else {
    int64_t v8 = 0;
  }
  if (v8)
  {
    iAP2MsgInitParam(a1, v8, a3, 9, (unsigned __int16)(a5 + 4), a2);
    if (a5)
    {
      uint64_t v10 = 0;
      do
      {
        v8[v10 + 4] = *(unsigned char *)(a4 + v10);
        ++v10;
      }
      while (v6 != v10);
    }
    else
    {
      return (unsigned char *)v7;
    }
  }
  return v8;
}

unint64_t iAP2MsgGetDataAsU64(unsigned __int16 *a1, _DWORD *a2)
{
  *a2 = __rev16(*a1) != 12;
  return bswap64(*(void *)(a1 + 2));
}

uint64_t iAP2MsgGetDataAsU32(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = bswap32(*((_DWORD *)a1 + 1));
  *a2 = __rev16(*a1) != 8;
  return v2;
}

uint64_t iAP2MsgGetDataAsU16(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = bswap32(a1[2]) >> 16;
  *a2 = __rev16(*a1) != 6;
  return v2;
}

uint64_t iAP2MsgGetDataAsU8(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 4);
  *a2 = __rev16(*a1) != 5;
  return v2;
}

BOOL iAP2MsgGetDataAsBool(unsigned __int16 *a1, BOOL *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  BOOL v4 = __rev16(*a1) != 5 || v2 > 1;
  *a2 = v4;
  return v2 != 0;
}

uint64_t iAP2MsgGetDataAsI16(unsigned __int16 *a1, _DWORD *a2)
{
  int v2 = bswap32(a1[2]);
  *a2 = __rev16(*a1) != 6;
  return (v2 >> 16);
}

unsigned __int16 *iAP2MsgGetDataAsString(unsigned __int16 *a1, BOOL *a2)
{
  unsigned int v3 = *a1;
  unint64_t result = a1 + 2;
  unsigned int v4 = __rev16(v3);
  BOOL v5 = v4 < 5 || *((unsigned __int8 *)result + v4 - 5) != 0;
  *a2 = v5;
  return result;
}

uint64_t iAP2MsgGetDataAsData(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 + 4;
  *a2 = 0;
  return result;
}

BOOL iAP2MsgIsDataVoid(unsigned __int16 *a1)
{
  return __rev16(*a1) < 5;
}

size_t iAP2MsgGetDataAsArrayU8(unsigned __int16 *a1, _DWORD *a2, void *__dst, int a4)
{
  size_t result = 0;
  unsigned int v6 = __rev16(*a1);
  BOOL v7 = v6 >= 4;
  unsigned int v8 = v6 - 4;
  if (v7) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  *a2 = 0;
  if ((int)v9 <= a4)
  {
    memcpy(__dst, a1 + 2, v9);
    return v9;
  }
  return result;
}

uint64_t iAP2MsgGetDataAsArrayI32(unsigned __int16 *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  uint64_t result = 0;
  unsigned int v6 = __rev16(*a1);
  BOOL v7 = v6 >= 4;
  unsigned int v8 = v6 - 4;
  if (!v7) {
    unsigned int v8 = 0;
  }
  *a2 = (v8 & 3) != 0;
  if ((v8 & 3) == 0)
  {
    uint64_t result = v8 >> 2;
    if ((int)result <= a4)
    {
      if (v8 >= 4)
      {
        size_t v9 = (unsigned int *)(a1 + 2);
        if (result <= 1) {
          int v10 = 1;
        }
        else {
          int v10 = v8 >> 2;
        }
        do
        {
          unsigned int v11 = *v9++;
          *a3++ = bswap32(v11);
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iAP2MsgCalcMessageLen(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  NextParamWithError = (unsigned __int16 *)(v2 + 6);
  uint64_t v5 = v3 - (v2 + 6);
  if (v3 > v2 + 6) {
    unsigned int v6 = (unsigned __int16 *)(v2 + 6);
  }
  else {
    unsigned int v6 = 0;
  }
  if (v3) {
    BOOL v7 = v3 > (unint64_t)NextParamWithError;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && v5 >= 4 && v5 >= (unint64_t)__rev16(*v6))
  {
    LODWORD(v8) = 6;
    do
    {
      uint64_t v8 = v8 + (bswap32(*NextParamWithError) >> 16);
      NextParamWithError = iAP2MsgGetNextParamWithError(a1, 0, NextParamWithError, 0);
    }
    while (NextParamWithError);
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      goto LABEL_12;
    }
    return 0;
  }
  uint64_t v8 = 6;
  if (!v2) {
    return 0;
  }
LABEL_12:
  *(unsigned char *)(v2 + 2) = BYTE1(v8);
  *(unsigned char *)(*(void *)(a1 + 24) + 3) = v8;
  return v8;
}

uint64_t iAP2MsgInitWithSom(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a1) {
    iAP2MsgInitMessage(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

id platform_oobBtPairing_accessoryDictionaryForLogging(uint64_t a1)
{
  unsigned int v1 = +[NSMutableDictionary dictionaryWithDictionary:a1];
  uint64_t v2 = [v1 objectForKey:@"ACCOOBBTPairingCertData"];

  if (v2)
  {
    unint64_t v3 = [v1 objectForKey:@"ACCOOBBTPairingCertData"];
    id v4 = [v3 length];

    uint64_t v5 = +[NSString stringWithFormat:@"%lu bytes", v4];
    [v1 setObject:v5 forKey:@"ACCOOBBTPairingCertData"];
  }
  unsigned int v6 = [v1 objectForKey:@"ACCOOBBTPairingCertSerial"];

  if (v6)
  {
    BOOL v7 = [v1 objectForKey:@"ACCOOBBTPairingCertSerial"];
    id v8 = [v7 length];

    size_t v9 = +[NSString stringWithFormat:@"%lu bytes", v8];
    [v1 setObject:v9 forKey:@"ACCOOBBTPairingCertSerial"];
  }

  return v1;
}

void platform_oobBtPairing_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v4 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unsigned int v6 = platform_oobBtPairing_accessoryDictionaryForLogging(a2);
    int v8 = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    unsigned int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "oobBtPairing accessoryAttached: %@, accInfoDict=%@", (uint8_t *)&v8, 0x16u);
  }
  BOOL v7 = +[ACCOOBBTPairingServer sharedServer];
  [v7 accessoryOOBBTPairingAttached:a1 accInfoDict:a2];
}

void platform_oobBtPairing_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing accessoryDetached: %@", (uint8_t *)&v5, 0xCu);
  }

  id v4 = +[ACCOOBBTPairingServer sharedServer];
  [v4 accessoryOOBBTPairingDetached:a1];
}

void platform_oobBtPairing_accessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    int v8 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412802;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "oobBtPairing accessoryInfo: %@, oobBtPairingUID %@, deviceClass=%xh", (uint8_t *)&v11, 0x1Cu);
  }

  __int16 v10 = +[ACCOOBBTPairingServer sharedServer];
  [v10 accessoryOOBBTPairingBTAccessoryInfo:a1 oobBtPairingUID:a2 accessoryMacAddr:a3 deviceClass:a4];
}

void platform_oobBtPairing_completionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v6 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "oobBtPairing completionStatus: %@, oobBtPairingUID %@, result=%d", (uint8_t *)&v9, 0x1Cu);
  }

  int v8 = +[ACCOOBBTPairingServer sharedServer];
  [v8 accessoryOOBBTPairingCompletionStatus:a1 oobBtPairingUID:a2 accessoryMacAddr:0 result:a3];
}

void platform_oobBtPairing_startOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing startOOBBTPairing: %@", (uint8_t *)&v4, 0xCu);
  }

  accFeatureHandlers_invokeHandler(v1, 40, 0);
}

void platform_oobBtPairing_linkKeyInfoHandler(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    __int16 v11 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v14 = 138413058;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2048;
    id v19 = [v9 length];
    __int16 v20 = 2112;
    id v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "oobBtPairing linkKeyInfo: %@, oobBtPairingUID=%@, linkKey=(%lu bytes), deviceMacAddr=%@", (uint8_t *)&v14, 0x2Au);
  }

  __int16 v13 = malloc_type_malloc(0x20uLL, 0x1062040C7F98563uLL);
  *(_DWORD *)__int16 v13 = 1;
  v13[1] = v8;
  _DWORD v13[2] = v9;
  v13[3] = v10;
  if ((accFeatureHandlers_invokeHandler(v7, 41, (uint64_t)v13) & 1) == 0) {
    platform_oobBtPairing_deleteParams(v13);
  }
}

void platform_oobBtPairing_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v2 = (const void *)a1[2];
      if (v2) {
        CFRelease(v2);
      }
      id v3 = (const void *)a1[3];
      if (v3) {
        CFRelease(v3);
      }
    }
    int v4 = (const void *)a1[1];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

void platform_oobBtPairing_stopOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing stopOOBBTPairing: %@", (uint8_t *)&v4, 0xCu);
  }

  accFeatureHandlers_invokeHandler(v1, 42, 0);
}

__CFDictionary *platform_oobBtPairing_createAccInfoMutableDict(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, char a10)
{
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  id v19 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccModel", a1);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccName", a3);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccHwVer", a6);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertData", a8);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertSerial", a9);
    if (a7) {
      CFDictionaryAddValue(v19, @"ACCOOBBTPairingDisplayName", a7);
    }
    char valuePtr = a10;
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCarPlaySupported", v20);
    CFRelease(v20);
  }
  return v19;
}

void platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID(void *a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = __platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID_block_invoke;
  v9[3] = &unk_1002158C8;
  id v1 = a1;
  id v10 = v1;
  uint64_t v2 = objc_retainBlock(v9);
  EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
  if (EndpointWithUUID
    && (int v4 = EndpointWithUUID, acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
    && (uint64_t v5 = v4[7]) != 0)
  {
    dispatch_async(*(dispatch_queue_t *)(v5 + 24), v2);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 46)
    {
      uint64_t v6 = *(id *)(gLogObjects + 360);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "oobBtPairing requestLegacyConnectionIDForAccessoryUID: %@, couldn't find accessory endpoint", buf, 0xCu);
    }

    id v8 = dispatch_get_global_queue(0, 0);
    dispatch_async(v8, v2);
  }
}

void __platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID_block_invoke(uint64_t a1)
{
  id v2 = platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(*(void **)(a1 + 32));
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v3 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 1024;
    int v9 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "oobBtPairing requestLegacyConnectionIDForAccessoryUID: %@, return connectionID %d", (uint8_t *)&v6, 0x12u);
  }

  platform_oobBtPairing_legacyConnectionIDForAccessoryUID(*(void **)(a1 + 32), (uint64_t)v2);
}

void platform_oobBtPairing_legacyConnectionIDForAccessoryUID(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v4 = *(id *)(gLogObjects + 360);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "oobBtPairing legacyConnectionIDForAccessoryUID: %@ connectionID: %d", (uint8_t *)&v7, 0x12u);
  }

  int v6 = +[ACCOOBBTPairingServer sharedServer];
  [v6 legacyConnectionIDForAccessoryUID:v3 connectionID:a2];
}

void platform_oobBTPairing_incrementUserCount()
{
  BOOL v0 = +[ACCOOBBTPairingServer sharedServer];
  [v0 incrementUserCount];

  id v1 = +[ACCOOBBTPairingServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_1002232D8];
  }
}

void platform_oobBTPairing_decrementUserCount()
{
  id v0 = +[ACCOOBBTPairingServer sharedServer];
  [v0 decrementUserCount];
}

void platform_system_launchApplication(void *a1, char a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 7;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    int v6 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Launching app with bundle ID: %@...", (uint8_t *)&v11, 0xCu);
  }

  int v7 = _getSystemPluginInstance();
  if (v7)
  {
    if (objc_opt_respondsToSelector())
    {
      [v7 launchApplication:a1 options:a2 & 1];
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        id v8 = *(id *)(gLogObjects + 48);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v8 = &_os_log_default;
        id v9 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = NSStringFromSelector("launchApplication:options:");
        int v11 = 138412290;
        id v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v11, 0xCu);
      }
    }
  }
}

id _getSystemPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  id v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformSystemPluginProtocol fallbackToTransportPlugins:0];

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getSystemPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

uint64_t platform_system_isApplicationVisible(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (v2)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v3 = (uint64_t)[v2 isAppVisibleInCurrentMode:a1];
    }
    else
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 7;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v6 = &_os_log_default;
        id v5 = &_os_log_default;
      }
      else
      {
        int v6 = *(id *)(gLogObjects + 48);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = NSStringFromSelector("isAppVisibleInCurrentMode:");
        int v9 = 138412290;
        int v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@, assuming app is visible!", (uint8_t *)&v9, 0xCu);
      }
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id platform_system_applicationSupportsExternalAccessoryBackgroundMode(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (!v2)
  {
LABEL_15:
    id v3 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = NSStringFromSelector("supportsExternalAccessoryBackgroundMode:");
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_15;
  }
  id v3 = [v2 supportsExternalAccessoryBackgroundMode:a1];
LABEL_16:

  return v3;
}

uint64_t platform_system_copyInstalledApplicationsForExternalAccessoryProtocol(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (!v2)
  {
LABEL_15:
    uint64_t v3 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = NSStringFromSelector("applicationsInstalledWithExternalAccessoryProtocol:");
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v3 = [v2 applicationsInstalledWithExternalAccessoryProtocol:a1];
LABEL_16:

  return v3;
}

id platform_system_launchURL(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (!v2)
  {
LABEL_15:
    id v3 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = NSStringFromSelector("launchURL:");
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_15;
  }
  id v3 = [v2 launchURL:a1];
LABEL_16:

  return v3;
}

id platform_system_isAppInstalledWithBundleID(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (!v2)
  {
LABEL_15:
    id v3 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = NSStringFromSelector("isAppInstalledWithBundleID:");
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_15;
  }
  id v3 = [v2 isAppInstalledWithBundleID:a1];
LABEL_16:

  return v3;
}

uint64_t platform_system_copyAppNameForBundleID(uint64_t a1)
{
  BOOL v2 = _getSystemPluginInstance();
  if (!v2)
  {
LABEL_15:
    uint64_t v3 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v5 = &_os_log_default;
    }
    else
    {
      int v6 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = NSStringFromSelector("appNameForBundleID:");
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v3 = [v2 appNameForBundleID:a1];
LABEL_16:

  return v3;
}

void platform_system_launchApplicationToBackground(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    int v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#System] Launching app with bundle ID to background: %@...", (uint8_t *)&v9, 0xCu);
  }

  id v5 = _getSystemPluginInstance();
  if (v5)
  {
    if (objc_opt_respondsToSelector())
    {
      [v5 launchBundleIDToBackground:a1];
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int v6 = *(id *)(gLogObjects + 48);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v6 = &_os_log_default;
        id v7 = &_os_log_default;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = NSStringFromSelector("launchBundleIDToBackground:");
        int v9 = 138412290;
        int v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

id platform_system_isApplicationInForeground(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#System] isApplicationInForeground? : %@...", (uint8_t *)&v11, 0xCu);
  }

  id v5 = _getSystemPluginInstance();
  if (!v5) {
    goto LABEL_23;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      id v7 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = &_os_log_default;
      id v8 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = NSStringFromSelector("isApplicationInForeground:");
      int v11 = 138412290;
      id v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v11, 0xCu);
    }
LABEL_23:
    id v6 = 0;
    goto LABEL_24;
  }
  id v6 = [v5 isApplicationInForeground:a1];
LABEL_24:

  return v6;
}

void platform_system_toggleProcessAssertionForBundleID(uint64_t a1, uint64_t a2)
{
  BOOL v4 = _getSystemPluginInstance();
  if (v4)
  {
    if (objc_opt_respondsToSelector())
    {
      [v4 toggleProcessAssertionForBundleID:a1 applicationPid:a2];
    }
    else
    {
      if (gLogObjects) {
        BOOL v5 = gNumLogObjects < 7;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v7 = &_os_log_default;
        id v6 = &_os_log_default;
      }
      else
      {
        id v7 = *(id *)(gLogObjects + 48);
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = NSStringFromSelector("toggleProcessAssertionForBundleID:applicationPid:");
        int v9 = 138412290;
        int v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

uint64_t platform_system_isDeviceLocked()
{
  id v0 = _getSystemPluginInstance();
  if (!v0)
  {
LABEL_15:
    uint64_t v1 = 1;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = NSStringFromSelector("isDeviceLocked");
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v7, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v1 = (uint64_t)[v0 isDeviceLocked];
LABEL_16:

  return v1;
}

uint64_t platform_system_unlockedSinceBoot()
{
  id v0 = _getSystemPluginInstance();
  if (!v0)
  {
LABEL_15:
    uint64_t v1 = 1;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = NSStringFromSelector("unlockedSinceBoot");
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v7, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v1 = (uint64_t)[v0 unlockedSinceBoot];
LABEL_16:

  return v1;
}

id platform_system_isLockScreenUIDisplayed()
{
  id v0 = _getSystemPluginInstance();
  if (!v0)
  {
LABEL_15:
    id v1 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      BOOL v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = NSStringFromSelector("isLockScreenUIDisplayed");
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v7, 0xCu);
    }
    goto LABEL_15;
  }
  id v1 = [v0 isLockScreenUIDisplayed];
LABEL_16:

  return v1;
}

void platform_system_startObservingApplicationState()
{
  id v0 = _getSystemPluginInstance();
  if (v0)
  {
    if (objc_opt_respondsToSelector())
    {
      [v0 startObservingApplicationState];
    }
    else
    {
      if (gLogObjects) {
        BOOL v1 = gNumLogObjects < 7;
      }
      else {
        BOOL v1 = 1;
      }
      if (v1)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v3 = &_os_log_default;
        id v2 = &_os_log_default;
      }
      else
      {
        id v3 = *(id *)(gLogObjects + 48);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v4 = NSStringFromSelector("startObservingApplicationState");
        int v5 = 138412290;
        id v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v5, 0xCu);
      }
    }
  }
}

void platform_system_startObservingFirstUnlockNotification()
{
  id v0 = _getSystemPluginInstance();
  if (v0)
  {
    if (objc_opt_respondsToSelector())
    {
      [v0 startObservingFirstUnlockNotification];
    }
    else
    {
      if (gLogObjects) {
        BOOL v1 = gNumLogObjects < 7;
      }
      else {
        BOOL v1 = 1;
      }
      if (v1)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v3 = &_os_log_default;
        id v2 = &_os_log_default;
      }
      else
      {
        id v3 = *(id *)(gLogObjects + 48);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v4 = NSStringFromSelector("startObservingFirstUnlockNotification");
        int v5 = 138412290;
        id v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v5, 0xCu);
      }
    }
  }
}

CFStringRef platform_system_copyMediaLibraryUIDString(int a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = _getSystemPluginInstance();
    if (v3)
    {
      if (objc_opt_respondsToSelector())
      {
        CFStringRef v4 = [v3 mediaLibraryUIDString:a2];
LABEL_16:

        return v4;
      }
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int v5 = *(id *)(gLogObjects + 48);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v5 = &_os_log_default;
        id v6 = &_os_log_default;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = NSStringFromSelector("mediaLibraryUIDString:");
        int v9 = 138412290;
        int v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
      }
    }
    CFStringRef v4 = &stru_10021CEF8;
    goto LABEL_16;
  }
  return &stru_10021CEF8;
}

id platform_system_createFolder(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = _getSystemPluginInstance();
  if (!v4)
  {
LABEL_15:
    id v5 = 0;
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    else
    {
      id v8 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = NSStringFromSelector("createFolder:mode:");
      int v11 = 138412290;
      id v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[#System] Platform plugin does not implement selector %@!", (uint8_t *)&v11, 0xCu);
    }
    goto LABEL_15;
  }
  id v5 = [v4 createFolder:a1 mode:a2];
LABEL_16:

  return v5;
}

BOOL loggingProtocol_requestLogsFromAccessory(uint64_t a1, uint64_t a2)
{
  int v2 = a1;
  if (a1 < 2)
  {
    if (a2)
    {
      loggingProtocol_requestAccessoryLogs(a1, a2);
      return 1;
    }
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v8 = *(NSObject **)(gLogObjects + 416);
    }
    else
    {
      id v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (result)
    {
      LOWORD(v9[0]) = 0;
      id v5 = "Session state invalid.";
      BOOL v6 = v8;
      uint32_t v7 = 2;
      goto LABEL_18;
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v3 = *(NSObject **)(gLogObjects + 416);
    }
    else
    {
      id v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
    if (result)
    {
      v9[0] = 67109120;
      v9[1] = v2;
      id v5 = "Invalid LoggingProtocoLogFilePriority. [priority: %d]. Not requesting logs from accessory.";
      BOOL v6 = v3;
      uint32_t v7 = 8;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)v9, v7);
      return 0;
    }
  }
  return result;
}

BOOL loggingProtocol_stopLogsFromAccessory(unsigned int a1, uint64_t a2)
{
  if (a2)
  {
    loggingProtocol_stopAccessoryLogTransfer(a1, a2);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v3 = *(NSObject **)(gLogObjects + 416);
    }
    else
    {
      id v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session state invalid.", v5, 2u);
    }
  }
  return a2 != 0;
}

uint64_t loggingProtocol_parseIncomingByteStream(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a1 && a3)
  {
    BOOL v6 = *(unsigned __int16 **)(a3 + 16);
    if (v6)
    {
      if (a2)
      {
        unsigned int v8 = 0;
        unsigned int v9 = 0;
        int v10 = *(unsigned __int16 *)(a3 + 24);
        do
        {
          int v11 = *(unsigned __int16 *)(a3 + 4);
          unsigned int v12 = v8 + v11;
          if (v8 + v11 <= a2)
          {
            memcpy((char *)v6 + (unsigned __int16)v10, (const void *)(a1 + v8), *(unsigned __int16 *)(a3 + 4));
            v10 += v11;
            unsigned int v14 = (*(_DWORD *)a3 + 1) % 3u;
            *(_DWORD *)a3 = v14;
            if (v14 == 2)
            {
              unsigned int v15 = (bswap32(*(unsigned __int16 *)((char *)v6 + (unsigned __int16)v10 - 2)) >> 16) - 4;
              *(_WORD *)(a3 + 4) = v15;
              if (!(_WORD)v15)
              {
                *(_DWORD *)a3 = 0;
                *(_WORD *)(a3 + 4) = 2;
LABEL_12:
                loggingProtocol_handleMessage(v6, (unsigned __int16)v10, a3);
                int v10 = 0;
              }
            }
            else
            {
              *(_WORD *)(a3 + 4) = 2;
              if (!v14) {
                goto LABEL_12;
              }
            }
          }
          else
          {
            unsigned int v13 = a2 - v9;
            *(_WORD *)(a3 + 4) = v11 - (a2 - v9);
            memcpy((char *)v6 + (unsigned __int16)v10, (const void *)(a1 + v8), (unsigned __int16)(a2 - v9));
            v10 += v13;
            unsigned int v12 = v8 + (unsigned __int16)v13;
          }
          *(_WORD *)(a3 + 24) = v10;
          unsigned int v8 = (unsigned __int16)v12;
          unsigned int v9 = v12;
        }
        while ((unsigned __int16)v12 < a2);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t loggingProtocol_sendMessage(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v8 = 0;
  unsigned __int16 v7 = 0;
  uint64_t result = loggingProtocol_buildMessageDataFromStruct(a1, a2, &v8, &v7);
  if (result)
  {
    id v5 = v8;
    BOOL v6 = loggingProtocol_sendMessageData(v8, v7, a3);
    free(v5);
    return v6;
  }
  return result;
}

uint64_t loggingProtocol_buildMessageDataFromStruct(int a1, uint64_t a2, void *a3, unsigned __int16 *a4)
{
  __int16 v7 = a1;
  switch(a1)
  {
    case 0:
      if (!a2) {
        return 0;
      }
      int v11 = *(unsigned __int8 *)(a2 + 20) + *(unsigned __int8 *)(a2 + 32) + 15;
      unsigned int v12 = *(const char **)(a2 + 48);
      if (v12) {
        v11 += strnlen(v12, 0x200uLL);
      }
      unsigned __int16 v8 = v11 + 4;
      if ((unsigned __int16)(v11 + 4) > 0x200u) {
        return 0;
      }
      uint64_t result = (uint64_t)malloc_type_malloc((unsigned __int16)(v11 + 4), 0xA43C2182uLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
        *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
        *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
        *(unsigned char *)(result + 7) = *(_DWORD *)a2;
        *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 15);
        *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 14);
        *(unsigned char *)(result + 10) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
        *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 12);
        *(unsigned char *)(result + 12) = BYTE3(*(void *)(a2 + 8));
        *(unsigned char *)(result + 13) = BYTE2(*(void *)(a2 + 8));
        *(unsigned char *)(result + 14) = BYTE1(*(void *)(a2 + 8));
        *(unsigned char *)(result + 15) = *(void *)(a2 + 8);
        *(unsigned char *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(unsigned char *)(result + 17) = *(unsigned char *)(a2 + 20);
        memcpy((void *)(result + 18), *(const void **)(a2 + 24), *(unsigned __int8 *)(a2 + 20));
        uint64_t v13 = *(unsigned __int8 *)(a2 + 20);
        unsigned int v14 = v13 + 19;
        v10[v13 + 18] = *(unsigned char *)(a2 + 32);
        memcpy(&v10[v13 + 19], *(const void **)(a2 + 40), *(unsigned __int8 *)(a2 + 32));
        unsigned int v15 = *(const char **)(a2 + 48);
        if (v15)
        {
          unint64_t v16 = *(unsigned __int8 *)(a2 + 32) + (unint64_t)v14;
          strlcpy(&v10[v16], v15, v8 - v16);
        }
        goto LABEL_51;
      }
      return result;
    case 1:
      if (!a2) {
        return 0;
      }
      unint64_t v17 = *(unsigned __int8 *)(a2 + 24);
      if (v17 > 0x3D) {
        return 0;
      }
      unsigned __int16 v18 = 8 * v17 + 22;
      uint64_t result = (uint64_t)malloc_type_malloc(8 * v17 + 22, 0x67CD615AuLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
        *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
        *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
        *(unsigned char *)(result + 7) = *(_DWORD *)a2;
        *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 15);
        *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 14);
        *(unsigned char *)(result + 10) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
        *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 12);
        *(unsigned char *)(result + 12) = BYTE3(*(void *)(a2 + 8));
        *(unsigned char *)(result + 13) = BYTE2(*(void *)(a2 + 8));
        *(unsigned char *)(result + 14) = BYTE1(*(void *)(a2 + 8));
        *(unsigned char *)(result + 15) = *(void *)(a2 + 8);
        *(unsigned char *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(unsigned char *)(result + 17) = *(unsigned char *)(a2 + 23);
        *(unsigned char *)(result + 18) = *(_WORD *)(a2 + 22);
        *(unsigned char *)(result + 19) = BYTE1(*(_DWORD *)(a2 + 20));
        *(unsigned char *)(result + 20) = *(_DWORD *)(a2 + 20);
        *(unsigned char *)(result + 21) = *(unsigned char *)(a2 + 24);
        if (*(unsigned char *)(a2 + 24))
        {
          unint64_t v19 = 0;
          unsigned __int16 v20 = 22;
          do
          {
            id v21 = (unsigned char *)(result + v20);
            *id v21 = *(unsigned char *)(*(void *)(a2 + 32) + 8 * v19 + 7);
            v21[1] = *(_WORD *)(*(void *)(a2 + 32) + 8 * v19 + 6);
            _DWORD v21[2] = (unsigned __int16)WORD2(*(void *)(*(void *)(a2 + 32) + 8 * v19)) >> 8;
            v21[3] = *(_DWORD *)(*(void *)(a2 + 32) + 8 * v19 + 4);
            v21[4] = BYTE3(*(void *)(*(void *)(a2 + 32) + 8 * v19));
            v21[5] = BYTE2(*(void *)(*(void *)(a2 + 32) + 8 * v19));
            v21[6] = BYTE1(*(void *)(*(void *)(a2 + 32) + 8 * v19));
            v21[7] = *(void *)(*(void *)(a2 + 32) + 8 * v19);
            v20 += 8;
            ++v19;
          }
          while (v19 < *(unsigned __int8 *)(a2 + 24));
        }
        goto LABEL_22;
      }
      return result;
    case 2:
      if (!a2) {
        return 0;
      }
      unsigned __int16 v18 = *(unsigned __int8 *)(a2 + 64) + *(unsigned __int8 *)(a2 + 48) + *(unsigned __int8 *)(a2 + 32) + 32;
      uint64_t result = (uint64_t)malloc_type_malloc(*(unsigned __int8 *)(a2 + 64)+ (unint64_t)*(unsigned __int8 *)(a2 + 48)+ *(unsigned __int8 *)(a2 + 32)+ 32, 0x2005038FuLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        *(unsigned char *)(result + 4) = *(unsigned char *)a2;
        *(unsigned char *)(result + 5) = *(unsigned char *)(a2 + 15);
        *(unsigned char *)(result + 6) = *(_WORD *)(a2 + 14);
        *(unsigned char *)(result + 7) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
        *(unsigned char *)(result + 8) = *(_DWORD *)(a2 + 12);
        *(unsigned char *)(result + 9) = BYTE3(*(void *)(a2 + 8));
        *(unsigned char *)(result + 10) = BYTE2(*(void *)(a2 + 8));
        *(unsigned char *)(result + 11) = BYTE1(*(void *)(a2 + 8));
        *(unsigned char *)(result + 12) = *(void *)(a2 + 8);
        *(_OWORD *)(result + 13) = *(_OWORD *)(a2 + 16);
        *(unsigned char *)(result + 29) = *(unsigned char *)(a2 + 32);
        memcpy((void *)(result + 30), *(const void **)(a2 + 40), *(unsigned __int8 *)(a2 + 32));
        uint64_t v22 = *(unsigned __int8 *)(a2 + 32);
        uint64_t v23 = v22 + 31;
        v10[v22 + 30] = *(unsigned char *)(a2 + 48);
        memcpy(&v10[v22 + 31], *(const void **)(a2 + 56), *(unsigned __int8 *)(a2 + 48));
        uint64_t v24 = v23 + *(unsigned __int8 *)(a2 + 48);
        v10[v24] = *(unsigned char *)(a2 + 64);
        memcpy(&v10[(v24 + 1)], *(const void **)(a2 + 72), *(unsigned __int8 *)(a2 + 64));
LABEL_22:
        unsigned __int16 v8 = v18;
        goto LABEL_51;
      }
      return result;
    case 3:
      if (!a2) {
        return 0;
      }
      uint64_t result = (uint64_t)malloc_type_malloc(5uLL, 0xA7A8DD2uLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        *(unsigned char *)(result + 4) = *(unsigned char *)a2;
        unsigned __int16 v8 = 5;
        goto LABEL_51;
      }
      return result;
    case 4:
    case 5:
    case 8:
      unsigned __int16 v8 = 4;
      uint64_t result = (uint64_t)malloc_type_malloc(4uLL, 0x155E5B1EuLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        goto LABEL_51;
      }
      return result;
    case 6:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v25 = 1700466043;
      goto LABEL_30;
    case 7:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v25 = 4175054048;
LABEL_30:
      uint64_t result = (uint64_t)malloc_type_malloc(0xCuLL, v25);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
      *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
      *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
      *(unsigned char *)(result + 7) = *(_DWORD *)a2;
      *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 7);
      *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 6);
      *(unsigned char *)(result + 10) = BYTE1(*(_DWORD *)(a2 + 4));
      *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 4);
      goto LABEL_50;
    case 9:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v26 = 4089462330;
      goto LABEL_39;
    case 10:
      if (!a2) {
        return 0;
      }
      uint64_t result = (uint64_t)malloc_type_malloc(0x1CuLL, 0xF8FBA713uLL);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(_DWORD *)a2;
      *(unsigned char *)(result + 5) = *(unsigned char *)(a2 + 15);
      *(unsigned char *)(result + 6) = *(_WORD *)(a2 + 14);
      *(unsigned char *)(result + 7) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
      *(unsigned char *)(result + 8) = *(_DWORD *)(a2 + 12);
      *(unsigned char *)(result + 9) = BYTE3(*(void *)(a2 + 8));
      *(unsigned char *)(result + 10) = BYTE2(*(void *)(a2 + 8));
      *(unsigned char *)(result + 11) = BYTE1(*(void *)(a2 + 8));
      *(unsigned char *)(result + 12) = *(void *)(a2 + 8);
      *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 23);
      *(unsigned char *)(result + 14) = *(_WORD *)(a2 + 22);
      *(unsigned char *)(result + 15) = (unsigned __int16)WORD2(*(void *)(a2 + 16)) >> 8;
      *(unsigned char *)(result + 16) = *(_DWORD *)(a2 + 20);
      *(unsigned char *)(result + 17) = BYTE3(*(void *)(a2 + 16));
      *(unsigned char *)(result + 18) = BYTE2(*(void *)(a2 + 16));
      *(unsigned char *)(result + 19) = BYTE1(*(void *)(a2 + 16));
      *(unsigned char *)(result + 20) = *(void *)(a2 + 16);
      unsigned __int16 v8 = 28;
      goto LABEL_51;
    case 11:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v26 = 2067006041;
LABEL_39:
      uint64_t result = (uint64_t)malloc_type_malloc(0x24uLL, v26);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
      *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
      *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
      *(unsigned char *)(result + 7) = *(_DWORD *)a2;
      *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 7);
      *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 6);
      *(unsigned char *)(result + 10) = BYTE1(*(_DWORD *)(a2 + 4));
      *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 4);
      *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 15);
      *(unsigned char *)(result + 13) = *(_WORD *)(a2 + 14);
      *(unsigned char *)(result + 14) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
      *(unsigned char *)(result + 15) = *(_DWORD *)(a2 + 12);
      *(unsigned char *)(result + 16) = BYTE3(*(void *)(a2 + 8));
      *(unsigned char *)(result + 17) = BYTE2(*(void *)(a2 + 8));
      *(unsigned char *)(result + 18) = BYTE1(*(void *)(a2 + 8));
      *(unsigned char *)(result + 19) = *(void *)(a2 + 8);
      *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 23);
      *(unsigned char *)(result + 21) = *(_WORD *)(a2 + 22);
      *(unsigned char *)(result + 22) = (unsigned __int16)WORD2(*(void *)(a2 + 16)) >> 8;
      *(unsigned char *)(result + 23) = *(_DWORD *)(a2 + 20);
      *(unsigned char *)(result + 24) = BYTE3(*(void *)(a2 + 16));
      *(unsigned char *)(result + 25) = BYTE2(*(void *)(a2 + 16));
      *(unsigned char *)(result + 26) = BYTE1(*(void *)(a2 + 16));
      *(unsigned char *)(result + 27) = *(void *)(a2 + 16);
      *(unsigned char *)(result + 28) = *(_DWORD *)(a2 + 24);
      unsigned __int16 v8 = 36;
      goto LABEL_51;
    case 12:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v27 = 2909694008;
      goto LABEL_48;
    case 13:
      if (!a2) {
        return 0;
      }
      unsigned __int16 v8 = *(_WORD *)(a2 + 24) + 31;
      uint64_t result = (uint64_t)malloc_type_malloc(v8, 0xA0483FFCuLL);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
      *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
      *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
      *(unsigned char *)(result + 7) = *(_DWORD *)a2;
      *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 7);
      *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 6);
      *(unsigned char *)(result + 10) = BYTE1(*(_DWORD *)(a2 + 4));
      *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 4);
      *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 15);
      *(unsigned char *)(result + 13) = *(_WORD *)(a2 + 14);
      *(unsigned char *)(result + 14) = (unsigned __int16)WORD2(*(void *)(a2 + 8)) >> 8;
      *(unsigned char *)(result + 15) = *(_DWORD *)(a2 + 12);
      *(unsigned char *)(result + 16) = BYTE3(*(void *)(a2 + 8));
      *(unsigned char *)(result + 17) = BYTE2(*(void *)(a2 + 8));
      *(unsigned char *)(result + 18) = BYTE1(*(void *)(a2 + 8));
      *(unsigned char *)(result + 19) = *(void *)(a2 + 8);
      *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 23);
      *(unsigned char *)(result + 21) = *(_WORD *)(a2 + 22);
      *(unsigned char *)(result + 22) = (unsigned __int16)WORD2(*(void *)(a2 + 16)) >> 8;
      *(unsigned char *)(result + 23) = *(_DWORD *)(a2 + 20);
      *(unsigned char *)(result + 24) = BYTE3(*(void *)(a2 + 16));
      *(unsigned char *)(result + 25) = BYTE2(*(void *)(a2 + 16));
      *(unsigned char *)(result + 26) = BYTE1(*(void *)(a2 + 16));
      *(unsigned char *)(result + 27) = *(void *)(a2 + 16);
      *(unsigned char *)(result + 28) = *(unsigned char *)(a2 + 25);
      *(unsigned char *)(result + 29) = *(unsigned char *)(a2 + 24);
      memcpy((void *)(result + 30), *(const void **)(a2 + 32), *(unsigned __int16 *)(a2 + 24));
      v10[(unsigned __int16)(*(_WORD *)(a2 + 24) + 30)] = *(_DWORD *)(a2 + 40);
      goto LABEL_51;
    case 14:
      if (!a2) {
        return 0;
      }
      malloc_type_id_t v27 = 1209301371;
LABEL_48:
      uint64_t result = (uint64_t)malloc_type_malloc(0xCuLL, v27);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
      *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
      *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
      *(unsigned char *)(result + 7) = *(_DWORD *)a2;
      *(unsigned char *)(result + 8) = *(_DWORD *)(a2 + 4);
LABEL_50:
      unsigned __int16 v8 = 12;
      goto LABEL_51;
    case 15:
      if (!a2) {
        return 0;
      }
      uint64_t result = (uint64_t)malloc_type_malloc(0x10uLL, 0x33C14A3EuLL);
      if (!result) {
        return result;
      }
      int v10 = (unsigned char *)result;
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
      *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
      *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
      *(unsigned char *)(result + 7) = *(_DWORD *)a2;
      *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 7);
      *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 6);
      *(unsigned char *)(result + 10) = BYTE1(*(_DWORD *)(a2 + 4));
      *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 4);
      *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 11);
      *(unsigned char *)(result + 13) = *(_WORD *)(a2 + 10);
      *(unsigned char *)(result + 14) = BYTE1(*(_DWORD *)(a2 + 8));
      *(unsigned char *)(result + 15) = *(_DWORD *)(a2 + 8);
      unsigned __int16 v8 = 16;
      goto LABEL_51;
    case 16:
      if (!a2) {
        return 0;
      }
      unsigned __int16 v8 = *(_WORD *)(a2 + 8) + 16;
      uint64_t result = (uint64_t)malloc_type_malloc(v8, 0x93BE7232uLL);
      if (result)
      {
        int v10 = (unsigned char *)result;
        *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 3);
        *(unsigned char *)(result + 5) = *(_WORD *)(a2 + 2);
        *(unsigned char *)(result + 6) = BYTE1(*(_DWORD *)a2);
        *(unsigned char *)(result + 7) = *(_DWORD *)a2;
        *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 7);
        *(unsigned char *)(result + 9) = *(_WORD *)(a2 + 6);
        *(unsigned char *)(result + 10) = BYTE1(*(_DWORD *)(a2 + 4));
        *(unsigned char *)(result + 11) = *(_DWORD *)(a2 + 4);
        *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 11);
        *(unsigned char *)(result + 13) = *(_WORD *)(a2 + 10);
        *(unsigned char *)(result + 14) = BYTE1(*(_DWORD *)(a2 + 8));
        *(unsigned char *)(result + 15) = *(_DWORD *)(a2 + 8);
        memcpy((void *)(result + 16), *(const void **)(a2 + 16), *(unsigned int *)(a2 + 8));
LABEL_51:
        *int v10 = HIBYTE(v7);
        v10[1] = v7;
        _DWORD v10[2] = HIBYTE(v8);
        v10[3] = v8;
        *a3 = v10;
        uint64_t result = 1;
        *a4 = v8;
      }
      return result;
    default:
      return 0;
  }
}

void sub_1001209EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_100120F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
}

BOOL platform_transactions_connectionTypeRequiresTransaction(int a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 14;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 104);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109376;
    v6[1] = a1;
    __int16 v7 = 1024;
    BOOL v8 = a1 != 7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#Transactions] connectionType: connectionType: %{coreacc:ACCConnection_Type_t}d requires os transaction %d", (uint8_t *)v6, 0xEu);
  }

  return a1 != 7;
}

void platform_transactions_accessoryConnected(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#Transactions] Creating transaction for connection %@...", (uint8_t *)&v11, 0xCu);
  }

  id v5 = +[ACCPlatformTransactionManager sharedManager];
  [v5 addTransactionForConnectionUUID:a1];

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = +[ACCPlatformTransactionManager sharedManager];
    unsigned int v9 = [v8 transactions];
    id v10 = [v9 count];
    int v11 = 134217984;
    id v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#Transactions] There are now %lu transaction(s).", (uint8_t *)&v11, 0xCu);
  }
}

void platform_transactions_accessoryDisconnected(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#Transactions] Removing transaction for connection %@...", (uint8_t *)&v11, 0xCu);
  }

  id v5 = +[ACCPlatformTransactionManager sharedManager];
  [v5 removeTransactionForConnectionUUID:a1];

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = +[ACCPlatformTransactionManager sharedManager];
    unsigned int v9 = [v8 transactions];
    id v10 = [v9 count];
    int v11 = 134217984;
    id v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#Transactions] There are now %lu transaction(s).", (uint8_t *)&v11, 0xCu);
  }
}

__CFString *_dumpSimpleHex(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(0, (6 * Length) | 1);
  if (Length >= 1)
  {
    do
    {
      memset(__str, 170, sizeof(__str));
      int v5 = *BytePtr++;
      snprintf(__str, 3uLL, "%02x", v5);
      CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__str, 2, 0x600u, 0);
      CFStringAppend(Mutable, v6);
      CFRelease(v6);
      --Length;
    }
    while (Length);
  }
  return Mutable;
}

uint64_t mfi4Auth_util_parseMessage(uint64_t a1, uint64_t a2, CFDataRef theData, __int16 a4)
{
  unsigned int Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  iAP2MsgInitWithSom(a2, a4, 0, 0, 0, 0, 0);
  uint64_t v10 = iAP2MsgParserInit(0xFFFF, a1, 0, a4);
  uint64_t v11 = Length;
  if (!Length) {
    return 0;
  }
  id v12 = (unsigned __int16 *)v10;
  while (1)
  {
    char v13 = *BytePtr++;
    uint64_t result = iAP2MsgParserConsumeByte(v12, v13, a2);
    if (result) {
      break;
    }
    if (!--v11) {
      return 0;
    }
  }
  return result;
}

uint64_t mfi4Auth_util_packIntoTunnelDataiAP2Msg(char a1, CFDataRef theData, int a3)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v13 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      char v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_1(v13, v15, v16, v17, v18, v19, v20, v21);
    }
    return 0;
  }
  id v7 = BytePtr;
  BOOL v8 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  if (!v8)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned int v14 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      unsigned int v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_3(v14, v23, v24, v25, v26, v27, v28, v29);
    }
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = malloc_type_malloc(0xFFFFuLL, 0x1DA9544DuLL);
  if (v10)
  {
    if (a3) {
      __int16 v11 = 21761;
    }
    else {
      __int16 v11 = 21760;
    }
    iAP2MsgInit(v9, v11, (uint64_t)v10, 0xFFFF, 0, 0);
    iAP2MsgAddU8Param(v9, 0, 0, a1);
    unsigned __int16 Length = CFDataGetLength(theData);
    iAP2MsgAddDataParam(v9, 0, 1, v7, Length);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v22 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v22 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_5(v22, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return v9;
}

CFDataRef mfi4Auth_util_unpackFromTunnelDataiAP2Msg(const __CFData *a1, unsigned char *a2, _WORD *a3)
{
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[2] = v5;
  v42[3] = v5;
  v42[0] = v5;
  v42[1] = v5;
  uint64_t v40 = malloc_type_calloc(1uLL, 0x1001FuLL, 0xBA04F5DEuLL);
  uint64_t v6 = mfi4Auth_util_parseMessage((uint64_t)v40, (uint64_t)v42, a1, 16448);
  id v7 = &unk_100239000;
  BOOL v8 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    uint64_t v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  mfi4Auth_util_unpackFromTunnelDataiAP2Msg_cold_4(v6, v9);
  if (a3) {
LABEL_8:
  }
    *a3 = iAP2MsgGetMsgID(v6);
LABEL_9:
  int MsgID = iAP2MsgGetMsgID(v6);
  if (MsgID == 21763)
  {
    uint64_t v26 = *(const UInt8 **)(v6 + 24);
    unsigned int MsgLen = iAP2MsgGetMsgLen(v6);
    CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, v26, MsgLen);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v28 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v28 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      int v30 = iAP2MsgGetMsgID(v6);
      CFIndex Length = CFDataGetLength(v13);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)CFNumberRef v45 = v30;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&unsigned char v45[6] = 0;
      LOWORD(v46[0]) = 2048;
      *(void *)((char *)v46 + 2) = Length;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, unpackedMessage %ld bytes", buf, 0x18u);
    }
  }
  else if (MsgID == 21761)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(v6, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFDataRef v13 = 0;
      uint64_t DataAsU8 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID != 1)
        {
          if (!ParamID)
          {
            *(_DWORD *)buf = 0;
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
          }
          goto LABEL_27;
        }
        int v41 = 0;
        uint64_t DataAsData = (const UInt8 *)iAP2MsgGetDataAsData((uint64_t)NextParam, &v41);
        if (v13) {
          break;
        }
LABEL_26:
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
        CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, DataAsData, ParamValueLen);
LABEL_27:
        NextParam = iAP2MsgGetNextParam(v6, 0, NextParam);
        if (!NextParam) {
          goto LABEL_47;
        }
      }
      uint64_t v17 = DataAsU8;
      uint64_t v18 = v7;
      uint64_t v19 = v7[49];
      uint64_t v20 = v8;
      int v21 = v8[100];
      if (v19 && v21 >= 56)
      {
        uint64_t v22 = *(NSObject **)(v19 + 440);
      }
      else
      {
        uint64_t v22 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)CFNumberRef v45 = v19;
          *(_WORD *)&v45[8] = 1024;
          v46[0] = v21;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v24 = iAP2MsgGetMsgID(v6);
        CFIndex v25 = CFDataGetLength(v13);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)CFNumberRef v45 = v24;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&unsigned char v45[6] = v17;
        LOWORD(v46[0]) = 2048;
        *(void *)((char *)v46 + 2) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, Already have unpackedMessage %ld bytes !!!, release and create new one", buf, 0x18u);
        if (!DataAsData) {
          goto LABEL_25;
        }
      }
      else if (!DataAsData)
      {
LABEL_25:
        BOOL v8 = v20;
        id v7 = v18;
        uint64_t DataAsU8 = v17;
        goto LABEL_26;
      }
      CFRelease(DataAsData);
      uint64_t DataAsData = 0;
      goto LABEL_25;
    }
    LODWORD(DataAsU8) = 0;
    CFDataRef v13 = 0;
LABEL_47:
    uint64_t v33 = v7[49];
    int v34 = v8[100];
    if (v33 && v34 >= 56)
    {
      uint64_t v35 = *(NSObject **)(v33 + 440);
    }
    else
    {
      uint64_t v35 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      int v36 = iAP2MsgGetMsgID(v6);
      CFIndex v37 = CFDataGetLength(v13);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)CFNumberRef v45 = v36;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&unsigned char v45[6] = DataAsU8;
      LOWORD(v46[0]) = 2048;
      *(void *)((char *)v46 + 2) = v37;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, unpackedMessage %ld bytes", buf, 0x18u);
    }
    if (a2) {
      *a2 = DataAsU8;
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v29 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v29 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      int v32 = iAP2MsgGetMsgID(v6);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)CFNumberRef v45 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: Unrecognized message 0x%04X !!!", buf, 8u);
    }
    CFDataRef v13 = 0;
  }
  if (v40) {
    free(v40);
  }
  return v13;
}

void mfi4Auth_util_packetLogging(const void *a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);

  acc_platform_packetLogging_logMFi4AuthProtocolMsg((uint64_t)EndpointWithUUID, a2, a3, a4, a5);
}

void mfi4Auth_util_packetLogging_logData(const void *a1, const char *a2, const char *a3, const UInt8 *a4, CFIndex a5, int a6)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a4, a5, kCFAllocatorNull);
  acc_platform_packetLogging_logData((uint64_t)EndpointWithUUID, (uint64_t)v12, (uint64_t)v13, v14, a6);
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14)
  {
    CFRelease(v14);
  }
}

uint64_t mfi4Auth_util_packetLoggingEncryptedData()
{
  return acc_userDefaults_BOOLForKey(@"PacketLoggingPlainTextOnly") ^ 1;
}

void platform_btConnectionStatus_updateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 8;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    uint64_t v10 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    id v24 = v5;
    __int16 v25 = 2112;
    id v26 = v6;
    __int16 v27 = 2112;
    id v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus updateHandler: %@, componentUID=%@, profiles=%@", buf, 0x20u);
  }

  if (v5 && v6 && v7)
  {
    __int16 v11 = malloc_type_malloc(0x18uLL, 0x1060040D0FAAE32uLL);
    *(_DWORD *)__int16 v11 = 0;
    v11[1] = v6;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v12 = v7;
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v13)
    {
      id v14 = v13;
      int v15 = 0;
      uint64_t v16 = *(void *)v19;
      do
      {
        for (int i = 0; i != v14; int i = (char *)i + 1)
        {
          if (*(void *)v19 != v16) {
            objc_enumerationMutation(v12);
          }
          v15 |= 1 << (char)objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "intValue", (void)v18);
        }
        id v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v14);
    }
    else
    {
      int v15 = 0;
    }

    *((_DWORD *)v11 + 4) = v15;
    if ((accFeatureHandlers_invokeHandler(v5, 38, (uint64_t)v11) & 1) == 0) {
      platform_btConnectionStatus_deleteParams(v11);
    }
  }
}

id _getBTStatusPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  BOOL v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformBluetoothStatusPluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

void platform_btConnectionStatus_accessoryAttached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryAttached: %@", (uint8_t *)&v9, 0xCu);
  }

  id v5 = [[_ACCBTConnectionStatusAccessory alloc] initWithUID:a1];
  id v6 = +[_ACCBTConnectionStatusAccessory accessoryList];
  [v6 setObject:v5 forKey:a1];

  id v7 = _getBTStatusPluginInstance();
  if (objc_opt_respondsToSelector())
  {
    BOOL v8 = [v7 accessoryAttached:a1];
    [(_ACCBTConnectionStatusAccessory *)v5 setPluginAccessory:v8];
  }
}

void platform_btConnectionStatus_accessoryDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    CFStringRef v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    uint64_t v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryDetached: %@", (uint8_t *)&v11, 0xCu);
  }

  id v5 = +[_ACCBTConnectionStatusAccessory accessoryList];
  id v6 = [v5 objectForKey:a1];

  if (v6)
  {
    id v7 = _getBTStatusPluginInstance();
    if (objc_opt_respondsToSelector())
    {
      BOOL v8 = [v6 pluginAccessory];
      [v7 accessoryDetached:v8];

      [v6 setPluginAccessory:0];
    }
    int v9 = +[_ACCBTConnectionStatusAccessory accessoryList];
    [v9 removeObjectForKey:a1];
    goto LABEL_23;
  }
  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v7 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v9 = +[_ACCBTConnectionStatusAccessory accessoryList];
    int v11 = 138412546;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    id v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryDetached: Unable to find accessory for accessoryUID %@ ! accessoryList=%@", (uint8_t *)&v11, 0x16u);
LABEL_23:
  }
}

void platform_btConnectionStatus_accessoryStartConnectionUpdates(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 8;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    id v10 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v20 = 138412546;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    uint64_t v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: %@ componentUID:%@", (uint8_t *)&v20, 0x16u);
  }

  int v11 = +[_ACCBTConnectionStatusAccessory accessoryList];
  uint64_t v12 = [v11 objectForKey:a1];

  if (v12)
  {
    __int16 v13 = [v12 components];
    id v14 = [v13 objectForKey:a2];

    if (v14
      || (v14 = -[_ACCBTConnectionStatusComponent initWithUID:componentUID:name:macAddr:]([_ACCBTConnectionStatusComponent alloc], "initWithUID:componentUID:name:macAddr:", a1, a2, a3, a4), [v12 components], int v15 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v15, "setObject:forKey:", v14, a2), v15, v14))
    {
      [(_ACCBTConnectionStatusComponent *)v14 setUpdateStarted:1];
      uint64_t v16 = _getBTStatusPluginInstance();
      id v17 = [(_ACCBTConnectionStatusComponent *)v14 copyDictionary];
      [v16 startCheckingForUpdates:v17 forAccessory:a1];

LABEL_23:
      goto LABEL_24;
    }
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v14 = (_ACCBTConnectionStatusComponent *)*(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (_ACCBTConnectionStatusComponent *)&_os_log_default;
      id v19 = &_os_log_default;
    }
    if (os_log_type_enabled(&v14->super, OS_LOG_TYPE_INFO))
    {
      int v20 = 138412290;
      uint64_t v21 = (uint64_t)a2;
      _os_log_impl((void *)&_mh_execute_header, &v14->super, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: Unable to find component %@ !", (uint8_t *)&v20, 0xCu);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v14 = (_ACCBTConnectionStatusComponent *)*(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (_ACCBTConnectionStatusComponent *)&_os_log_default;
      id v18 = &_os_log_default;
    }
    if (os_log_type_enabled(&v14->super, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = +[_ACCBTConnectionStatusAccessory accessoryList];
      int v20 = 138412546;
      uint64_t v21 = a1;
      __int16 v22 = 2112;
      uint64_t v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, &v14->super, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: Unable to find accessory for accessoryUID %@ ! accessoryList=%@", (uint8_t *)&v20, 0x16u);
      goto LABEL_23;
    }
  }
LABEL_24:
}

void platform_btConnectionStatus_accessoryStopConnectionUpdates(uint64_t a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412546;
    uint64_t v15 = a1;
    __int16 v16 = 2112;
    id v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStopConnectionUpdates: %@ componentUID:%@", (uint8_t *)&v14, 0x16u);
  }

  id v7 = +[_ACCBTConnectionStatusAccessory accessoryList];
  BOOL v8 = [v7 objectForKey:a1];

  if (v8)
  {
    id v9 = [v8 components];
    id v10 = [v9 objectForKey:a2];

    if (v10)
    {
      [v10 setUpdateStarted:0];
      int v11 = _getBTStatusPluginInstance();
      id v12 = [v10 copyDictionary];
      [v11 stopCheckingForUpdates:v12 forAccessory:a1];

LABEL_22:
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v10 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v13 = &_os_log_default;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = +[_ACCBTConnectionStatusAccessory accessoryList];
      int v14 = 138412546;
      uint64_t v15 = a1;
      __int16 v16 = 2112;
      id v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStopConnectionUpdates: Unable to find accessory for accessoryUID %@ ! accessoryList=%@", (uint8_t *)&v14, 0x16u);
      goto LABEL_22;
    }
  }
}

void platform_btConnectionStatus_accessoryStopAllConnectionUpdates(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v21 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStopAllConnectionUpdates: %@", buf, 0xCu);
  }

  id v5 = +[_ACCBTConnectionStatusAccessory accessoryList];
  id v6 = [v5 objectForKey:a1];

  if (v6)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v7 = objc_msgSend(v6, "components", 0);
    BOOL v8 = [v7 allValues];

    id v9 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v17;
      do
      {
        for (int i = 0; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [*(id *)(*((void *)&v16 + 1) + 8 * i) componentUID];
          platform_btConnectionStatus_accessoryStopConnectionUpdates(a1, v13);
        }
        id v10 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }
      while (v10);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      BOOL v8 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v8 = &_os_log_default;
      id v14 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = +[_ACCBTConnectionStatusAccessory accessoryList];
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = a1;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus accessoryStopAllConnectionUpdates: Unable to find accessory for accessoryUID %@ ! accessoryList=%@", buf, 0x16u);
    }
  }
}

void platform_btComponentStatus_btComponentInfo(uint64_t a1, void *a2)
{
  uint64_t v25 = a1;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  else
  {
    id v5 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v35 = v25;
    __int16 v36 = 2112;
    CFIndex v37 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus btComponentInfo: %@ componentList=%@", buf, 0x16u);
  }

  id v6 = +[_ACCBTConnectionStatusAccessory accessoryList];
  uint64_t v7 = [v6 objectForKey:v25];

  __int16 v27 = (void *)v7;
  if (v7)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    BOOL v8 = a2;
    id v9 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v28 = *(void *)v30;
      obj = v8;
      do
      {
        for (int i = 0; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v30 != v28) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          id v13 = objc_msgSend(v12, "objectForKey:", @"ACCBluetoothStatusComponentInfoUID", v25);
          id v14 = [v12 objectForKey:@"ACCBluetoothStatusComponentInfoMACAddr"];
          uint64_t v15 = [v12 objectForKey:@"ACCBluetoothStatusComponentInfoEnabled"];
          long long v16 = [v12 objectForKey:@"ACCBluetoothStatusComponentInfoName"];
          if (v13) {
            BOOL v17 = v14 == 0;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17 && v15 != 0)
          {
            long long v19 = [v27 components];
            int v20 = [v19 objectForKey:v13];

            if (v20
              || (v20 = -[_ACCBTConnectionStatusComponent initWithUID:componentUID:name:macAddr:]([_ACCBTConnectionStatusComponent alloc], "initWithUID:componentUID:name:macAddr:", v25, v13, v16, v14), [v27 components], uint64_t v21 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v21, "setObject:forKey:", v20, v13), v21, v20))
            {
              -[_ACCBTConnectionStatusComponent setEnabled:](v20, "setEnabled:", [v15 BOOLValue]);
              __int16 v22 = _getBTStatusPluginInstance();
              if ((objc_opt_respondsToSelector() & 1) != 0
                && !objc_msgSend(v22, "updateBTComponent:forAccessory:withEnabledState:", v12, v25, -[_ACCBTConnectionStatusComponent enabled](v20, "enabled")))
              {
                [(_ACCBTConnectionStatusComponent *)v20 setNeedToUnplugBTDevice:[(_ACCBTConnectionStatusComponent *)v20 enabled]];
              }
            }
          }
        }
        BOOL v8 = obj;
        id v10 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v10);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      BOOL v8 = *(id *)(gLogObjects + 56);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v8 = &_os_log_default;
      id v23 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v24 = +[_ACCBTConnectionStatusAccessory accessoryList];
      *(_DWORD *)buf = 138412546;
      uint64_t v35 = v25;
      __int16 v36 = 2112;
      CFIndex v37 = v24;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#BT Connection Status] btConnectionStatus btComponentInfo: Unable to find accessory for accessoryUID %@ ! accessoryList=%@", buf, 0x16u);
    }
  }
}

void platform_btConnectionStatus_deleteParams(void *a1)
{
  if (a1)
  {
    BOOL v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

__CFDictionary *platform_btComponentStatus_createComponentInfoDict(const void *a1, const void *a2, const void *a3, UInt8 *bytes, char a5)
{
  char valuePtr = a5;
  CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, bytes, 6);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoAccessoryUID", a1);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoUID", a2);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoName", a3);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoMACAddr", v8);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoEnabled", v9);
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

void *accAuthProtocol_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = malloc_type_calloc(1uLL, 0x48uLL, 0x10200400D3A9C10uLL);
    if (v2)
    {
      BOOL v3 = dispatch_queue_create("ACCAuthProtocolQ", 0);
      v2[7] = v3;
      if (v3)
      {
        dispatch_set_context(v3, v2);
        dispatch_set_finalizer_f((dispatch_object_t)v2[7], (dispatch_function_t)_accAuthProtocol_endpoint_dispatchQueueFinalizer);
        *BOOL v2 = a1;
        _accAuthProtocol_endpoint_initSession((uint64_t)v2);
        unsigned int v4 = acc_auth_protocol_maxSizeofMessageData();
        *((_DWORD *)v2 + 8) = v4;
        v2[3] = malloc_type_calloc(1uLL, v4, 0xF612443BuLL);
      }
    }
  }
  else
  {
    id v6 = logObjectForModule_1(54);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v6);
    }
    return 0;
  }
  return v2;
}

void _accAuthProtocol_endpoint_dispatchQueueFinalizer(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v2 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "_accAuthProtocol_endpoint_dispatchQueueFinalizer";
    __int16 v8 = 1024;
    BOOL v9 = a1 != 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s: protocolEndpoint %d", (uint8_t *)&v6, 0x12u);
  }
  if (a1)
  {
    BOOL v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (!*(unsigned char *)(a1 + 8)
        || (acc_auth_protocol_endSession((unsigned __int8 *)v3),
            *(unsigned char *)(a1 + 8) = 0,
            (BOOL v3 = *(void **)(a1 + 16)) != 0))
      {
        free(v3);
        *(void *)(a1 + 16) = 0;
      }
    }
    *(void *)(a1 + 56) = 0;
    unsigned int v4 = *(const void **)(a1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 40) = 0;
    }
    id v5 = *(void **)(a1 + 24);
    if (v5) {
      free(v5);
    }
    free((void *)a1);
  }
}

uint64_t _accAuthProtocol_endpoint_initSession(uint64_t a1)
{
  id v2 = acc_userDefaults_copyIntegerForKey(@"ACCAuthProtocolMaxMessageSize");
  int v21 = -1431655766;
  *(void *)&v20[4] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)int v20 = _acc_auth_protocol_supportedAuthCapabilities(1);
  int v3 = _acc_auth_protocol_supportedAuthTypes(1, &v20[4], 4u);
  if ((uint64_t)v2 <= 0) {
    int v4 = 128;
  }
  else {
    int v4 = (int)v2;
  }
  *(_DWORD *)&v20[8] = v3;
  int v21 = v4;
  unsigned int v5 = acc_auth_protocol_sizeofSessionData();
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    long long v18 = *(unsigned __int8 **)(a1 + 16);
    if (v18) {
      int v19 = *v18;
    }
    else {
      int v19 = -1;
    }
    *(_DWORD *)buf = 67109888;
    int v23 = v19;
    __int16 v24 = 1024;
    int v25 = *(_DWORD *)v20;
    __int16 v26 = 1024;
    int v27 = *(_DWORD *)&v20[8];
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "accAuthProtocol initSession: sessionID %d, characteristics %#10x, authTypesLen %d, sessionDataLen %d", buf, 0x1Au);
  }
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = malloc_type_calloc(1uLL, v5, 0xA42A3BBBuLL);
  }
  *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
  acc_platform_packetLogging_logEvent(*(void *)a1, "ATTACH", (uint64_t)"ACCAuthProtocol accessory attached!", v7, v8, v9, v10, v11, *(uint64_t *)v20);
  if (*(void *)a1) {
    uint64_t v12 = *(void *)(*(void *)a1 + 16);
  }
  else {
    uint64_t v12 = 0;
  }
  *(unsigned char *)(a1 + 8) = acc_auth_protocol_createSessionWithContext(1, (uint64_t)v20, *(unsigned char **)(a1 + 16), v12) == 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v13 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    id v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = *(unsigned __int8 **)(a1 + 16);
    if (v14) {
      int v15 = *v14;
    }
    else {
      int v15 = -1;
    }
    int v16 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67110144;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = *(_DWORD *)v20;
    __int16 v26 = 1024;
    int v27 = *(_DWORD *)&v20[8];
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    __int16 v30 = 1024;
    int v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "accAuthProtocol initSession: sessionID %d, characteristics %#10x, authTypesLen %d, sessionDataLen %d, authSessionInitialized %d", buf, 0x20u);
  }
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t accAuthProtocol_endpoint_publish(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t result = *(void *)result;
  if (!result) {
    return result;
  }
  int Protocol = acc_endpoint_getProtocol(result);
  unsigned int v5 = acc_policies_allowACCAuthProtocolOnTransport(*(_DWORD *)(*(void *)v2 + 24));
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(*(void *)v2 + 24);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)uint64_t v35 = v7;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "accAuthProtocol publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, allowed %d ", buf, 0xEu);
  }
  if (Protocol != 10) {
    return 0;
  }
  unsigned int v29 = v5;
  BOOL isPublished = acc_endpoint_isPublished(*(void *)v2);
  CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
  uint64_t v10 = Mutable;
  if (*(void *)v2) {
    uint64_t v11 = *(const void **)(*(void *)v2 + 16);
  }
  else {
    uint64_t v11 = 0;
  }
  CFArrayAppendValue(Mutable, v11);
  uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(a2);
  CFTypeRef cf = v12;
  id v13 = v10;
  if (v12) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v12);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  int v15 = MutableCopy;
  uint64_t v16 = v2 + 16;
  int valuePtr = *(_DWORD *)(*(void *)(v2 + 16) + 1156);
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v15, @"NegotiatedAuthType", v17);
  int v32 = *(_DWORD *)(*(void *)(v2 + 16) + 1152);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v32);
  int v31 = v15;
  CFDictionaryAddValue(v15, @"NegotiatedCharacteristics", v18);
  int AuthStatus = acc_connection_getAuthStatus(**(void **)v2, 1);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v20 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    int v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  int v21 = v31;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(_DWORD *)(*(void *)v16 + 1156);
    int v23 = *(_DWORD *)(*(void *)v16 + 1152);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)uint64_t v35 = isPublished;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v22;
    *(_WORD *)__int16 v36 = 1024;
    *(_DWORD *)&v36[2] = v23;
    __int16 v37 = 2112;
    uint64_t v38 = v31;
    __int16 v39 = 1024;
    int v40 = AuthStatus;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "accAuthProtocol publish: wasPublished = %d, authType %d, characteristics %#10x, accInfoDict = %@, curAuthStatus %d ", buf, 0x24u);
  }
  if (AuthStatus == 1 && isPublished)
  {
    if (*(unsigned char *)(v2 + 8))
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v25 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        int v25 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        accAuthProtocol_endpoint_publish_cold_1((unsigned __int8 **)(v2 + 16), v25);
      }
      _accAuthProtocol_endpoint_cleanupSession(v2);
      int v21 = v31;
    }
    _accAuthProtocol_endpoint_initSession(v2);
    if (acc_connection_isAuthenticated(**(void **)v2, 6)) {
      goto LABEL_41;
    }
    BOOL isPublished = 0;
  }
  else if (acc_connection_isAuthenticated(**(void **)v2, 6))
  {
    if (isPublished)
    {
      BOOL isPublished = 1;
LABEL_50:
      if (*(unsigned char *)(v2 + 8)
        && (acc_userDefaults_BOOLForKey(@"DontSkipInductiveAuthOnCTA") & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 55)
        {
          int v27 = *(NSObject **)(gLogObjects + 432);
        }
        else
        {
          int v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
          accAuthProtocol_endpoint_publish_cold_1((unsigned __int8 **)(v2 + 16), v27);
        }
        _accAuthProtocol_endpoint_cleanupSession(v2);
        int v21 = v31;
      }
      goto LABEL_60;
    }
LABEL_41:
    if (gLogObjects && gNumLogObjects >= 14)
    {
      __int16 v26 = *(NSObject **)(gLogObjects + 104);
    }
    else
    {
      __int16 v26 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v35 = "accAuthProtocol_endpoint_publish";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)__int16 v36 = 2;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s: Already Authenticated, notifyAuthStatus %{coreacc:ACCAuthInfo_Status_t}d", buf, 0x12u);
    }
    accAuthProtocol_endpoint_notifyAuthStatus(v2, 2);
    BOOL isPublished = 0;
    int v21 = v31;
    goto LABEL_50;
  }
LABEL_60:
  if (acc_connection_isAuthenticated(**(void **)v2, 6)) {
    unsigned int v28 = acc_userDefaults_BOOLForKey(@"DontSkipInductiveAuthOnCTA") & v29;
  }
  else {
    unsigned int v28 = v29;
  }
  if (((v28 ^ 1 | isPublished) & 1) == 0 && *(unsigned char *)(v2 + 8))
  {
    if (*(_DWORD *)(*(void *)v2 + 24) == 13)
    {
      if (accAuthProtocol_endpoint_publish_onceToken != -1) {
        dispatch_once(&accAuthProtocol_endpoint_publish_onceToken, &__block_literal_global_35);
      }
    }
    else
    {
      _accAuthProtocol_endpoint_sendAuthSetupStart(v2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v13) {
    CFRelease(v13);
  }
  return 1;
}

void _accAuthProtocol_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = **(unsigned __int8 **)(a1 + 16);
    int v4 = *(unsigned __int8 *)(a1 + 8);
    v5[0] = 67109376;
    v5[1] = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "accAuthProtocol cleanupSession: acc_auth_protocol_endSession sessionID %d, authSessionInitialized %d", (uint8_t *)v5, 0xEu);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    acc_auth_protocol_endSession(*(unsigned __int8 **)(a1 + 16));
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t accAuthProtocol_endpoint_notifyAuthStatus(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (a2)
    {
      uint64_t v4 = *(void *)v3;
      if (*(void *)v3)
      {
        double v10 = CFAbsoluteTimeGetCurrent() - *(double *)(v3 + 64);
        if (a2 == 3)
        {
          acc_platform_packetLogging_logEvent(v4, "AUTH TIMEOUT", (uint64_t)"ACCAuthProtocol accessory authentication Timed Out! (in %lf seconds)", v5, v6, v7, v8, v9, *(uint64_t *)&v10);
        }
        else if (a2 == 2)
        {
          acc_platform_packetLogging_logEvent(v4, "AUTH PASSED", (uint64_t)"ACCAuthProtocol accessory authentication Passed! (in %lf seconds)", v5, v6, v7, v8, v9, *(uint64_t *)&v10);
        }
        else
        {
          acc_platform_packetLogging_logEvent(v4, "AUTH FAILED", (uint64_t)"ACCAuthProtocol accessory authentication Failed! (in %lf seconds)", v5, v6, v7, v8, v9, *(uint64_t *)&v10);
        }
        if (*(_DWORD *)(v4 + 24) == 13)
        {
          uint64_t v11 = (const void *)kCFACCProperties_Endpoint_NFC_RequestSessionOpen;
          return acc_endpoint_setProperty((pthread_mutex_t *)v4, v11, kCFBooleanFalse);
        }
        else
        {
          return 1;
        }
      }
    }
  }
  return result;
}

void __accAuthProtocol_endpoint_publish_block_invoke(id a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v1 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    BOOL v1 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "accAuthProtocol publish: CFNotificationCenterAddObserver", v3, 2u);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_accAuthProtocol_endpoint_authReadyChanged, @"NfcAuthReady", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _accAuthProtocol_endpoint_authReadyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "accAuthProtocol: Auth Ready changed", buf, 2u);
  }
  CFStringRef Value = CFDictionaryGetValue(a5, @"endpointUUID");
  if (Value)
  {
    uint64_t v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(v8);
      if (EndpointWithUUID)
      {
        uint64_t v11 = EndpointWithUUID;
        if (EndpointWithUUID[7] == 10 && EndpointWithUUID[6] == 13)
        {
          if (gLogObjects && gNumLogObjects >= 55)
          {
            uint64_t v12 = *(NSObject **)(gLogObjects + 432);
          }
          else
          {
            uint64_t v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v13 = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "accAuthProtocol: endpoint is ACCAuthProtocol", v13, 2u);
          }
          if (acc_endpoint_setProperty((pthread_mutex_t *)v11, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanTrue))_accAuthProtocol_endpoint_sendAuthSetupStart(*((void *)v11 + 7)); {
        }
          }
      }
    }
  }
}

void _accAuthProtocol_endpoint_sendAuthSetupStart(uint64_t a1)
{
  if (a1
    && !acc_auth_protocol_authSetupStart(*(unsigned __int8 **)(a1 + 16), *(unsigned __int8 **)(a1 + 24), *(_DWORD *)(a1 + 32)))
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 16);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(*(void *)a1 + 16));
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v3 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        uint64_t v3 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v10 = v2;
        __int16 v11 = 1024;
        int v12 = 100;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "accAuthProtocol sendAuthSetupStart: %@, send after %d ms ...", buf, 0x12u);
      }
      dispatch_time_t v5 = dispatch_time(0, 100000000);
      uint64_t v6 = *(NSObject **)(a1 + 56);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 0x40000000;
      _DWORD v7[2] = ___accAuthProtocol_endpoint_sendAuthSetupStart_block_invoke;
      v7[3] = &__block_descriptor_tmp_25;
      v7[4] = v2;
      int v8 = 100;
      dispatch_after(v5, v6, v7);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        _accAuthProtocol_endpoint_sendAuthSetupStart_cold_1(v4);
      }
    }
  }
}

uint64_t **accAuthProtocol_endpoint_destroy(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    int v8 = (uint64_t *)result;
    if (*result)
    {
      acc_platform_packetLogging_logEvent(**result, "DETACH", (uint64_t)"ACCAuthProtocol accessory detached!", a4, a5, a6, a7, a8, v9);
      _accAuthProtocol_endpoint_cleanupSession(*v8);
      dispatch_sync(*(dispatch_queue_t *)(*v8 + 56), &__block_literal_global_13);
      dispatch_release(*(dispatch_object_t *)(*v8 + 56));
      return (uint64_t **)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t accAuthProtocol_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result && *(void *)(result + 16))
    {
      uint64_t result = 0;
      if (cf)
      {
        if (*(unsigned char *)(v2 + 8))
        {
          CFRetain(cf);
          uint64_t v4 = *(NSObject **)(v2 + 56);
          v5[0] = _NSConcreteStackBlock;
          v5[1] = 0x40000000;
          _DWORD v5[2] = __accAuthProtocol_endpoint_processIncomingData_block_invoke;
          v5[3] = &__block_descriptor_tmp_14_1;
          v5[4] = v2;
          v5[5] = cf;
          dispatch_async(v4, v5);
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void __accAuthProtocol_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  _accAuthProtocol_endpoint_processIncomingData(*(void *)(a1 + 32), *(const __CFData **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _accAuthProtocol_endpoint_processIncomingData(uint64_t a1, const __CFData *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v6 = *(NSObject **)(gLogObjects + 432);
      }
      else
      {
        uint64_t v6 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *(_DWORD *)(v5 + 24);
        int v35 = **(unsigned __int8 **)(a1 + 16);
        *(_DWORD *)buf = 67109634;
        int v39 = v34;
        __int16 v40 = 1024;
        *(_DWORD *)int v41 = v35;
        *(_WORD *)&v41[4] = 2112;
        *(void *)&v41[6] = a2;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "accAuthProtocol processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d sessionID %d, dataIn %@", buf, 0x18u);
      }
      if (!acc_policies_allowACCAuthProtocolOnTransport(*(_DWORD *)(v5 + 24))) {
        return 0;
      }
      if (acc_policies_allowACCAuthProtocolOnAllTransport()
        && (uint64_t v7 = CFDataGetBytePtr(a2), v8 = CFDataGetLength(a2), v7)
        && v8 >= 6
        && ((unint64_t)v8 >= 7
         && (*(_DWORD *)v7 == 39190527 ? (BOOL v9 = *(_DWORD *)(v7 + 3) == 1420427266) : (BOOL v9 = 0), v9)
         || (*(_DWORD *)v7 == 153087 ? (BOOL v10 = *((unsigned __int16 *)v7 + 2) == 21674) : (BOOL v10 = 0), v10)))
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          __int16 v30 = *(NSObject **)(gLogObjects + 112);
        }
        else
        {
          __int16 v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(_DWORD *)(v5 + 28);
          uint64_t v32 = *(void *)(v5 + 16);
          *(_DWORD *)buf = 67109378;
          int v39 = v31;
          __int16 v40 = 2112;
          *(void *)int v41 = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Protocol %{coreacc:ACCEndpoint_Protocol_t}d... got DETECT for endpoint %@! don't propagate.", buf, 0x12u);
        }
        return accAuthProtocol_endpoint_publish(*(void *)(v5 + 56), *(void *)(v5 + 64));
      }
      else
      {
        if (*(void *)v5 && *(_DWORD *)(a1 + 48))
        {
          platform_connectionInfo_handleInterceptData(*(void *)(v5 + 8), *(const void **)(v5 + 16), (uint64_t)a2);
          int v11 = *(_DWORD *)(a1 + 48);
          BOOL v12 = __OFSUB__(v11, 1);
          int v13 = v11 - 1;
          if (v13 < 0 == v12)
          {
            uint64_t v3 = 0;
            *(_DWORD *)(a1 + 48) = v13;
            return v3;
          }
          return 0;
        }
        if (!*(void *)(a1 + 40))
        {
          CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
          *(void *)(a1 + 40) = Mutable;
          if (!Mutable) {
            return 0;
          }
        }
        BytePtr = CFDataGetBytePtr(a2);
        CFIndex Length = CFDataGetLength(a2);
        if (!BytePtr) {
          return 0;
        }
        CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 40), BytePtr, Length);
        CFNumberRef v17 = (unsigned __int8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
        CFIndex v18 = CFDataGetLength(*(CFDataRef *)(a1 + 40));
        if (v18 < 4) {
          return 1;
        }
        unsigned int v19 = v18;
        if (v18 < (unint64_t)acc_auth_protocol_sizeofMessage((uint64_t)v17, v18, 0, 0)) {
          return 1;
        }
        acc_platform_packetLogging_logAccAuthProtocolMsg(*(void *)a1, **(unsigned __int8 **)(a1 + 16), a2, 1);
        unsigned int range = 0;
        unsigned int v20 = acc_auth_protocol_checkMessage(*(unsigned __int8 **)(a1 + 16), (uint64_t)v17, v19, &range);
        if (gLogObjects && gNumLogObjects >= 55)
        {
          int v21 = *(NSObject **)(gLogObjects + 432);
        }
        else
        {
          int v21 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          int v36 = **(unsigned __int8 **)(a1 + 16);
          *(_DWORD *)buf = 67109890;
          int v39 = v36;
          __int16 v40 = 1024;
          *(_DWORD *)int v41 = range;
          *(_WORD *)&v41[4] = 1024;
          *(_DWORD *)&v41[6] = v20;
          *(_WORD *)&unsigned char v41[10] = 2112;
          *(void *)&v41[12] = a2;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "accAuthProtocol processIncomingData: after checkMessage, sessionID %d, skipBytes %d, msgLen %d,dataIn %@", buf, 0x1Eu);
        }
        v22.unsigned int length = range;
        if (range)
        {
          v22.location = 0;
          CFDataDeleteBytes(*(CFMutableDataRef *)(a1 + 40), v22);
        }
        if (v20 < 4) {
          return 1;
        }
        if (acc_userDefaults_BOOLForKey(@"ForceAuthTimeout"))
        {
          if (gLogObjects && gNumLogObjects >= 55)
          {
            int v23 = *(NSObject **)(gLogObjects + 432);
          }
          else
          {
            int v23 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = **(unsigned __int8 **)(a1 + 16);
            *(_DWORD *)buf = 67109120;
            int v39 = v29;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "accAuthProtocol processIncomingData: ForceAuthTimeout, ignore incoming messages for sessionID %d, allow timeout to occur, if any", buf, 8u);
          }
          return 1;
        }
        uint64_t v3 = 1;
        ACCAuthProtocol_PrintMessage(v17, v19, "\n----------------\n**** ACCAuthProtocol incoming handler ****: \nACCESSORY", 0, 1);
        int v24 = acc_auth_protocol_handleMessage(*(unsigned __int8 **)(a1 + 16), v17, v19, *(unsigned __int8 **)(a1 + 24), *(_DWORD *)(a1 + 32));
        v42.unsigned int length = v20;
        v42.location = 0;
        CFDataDeleteBytes(*(CFMutableDataRef *)(a1 + 40), v42);
        if (!v24)
        {
          int v25 = *(unsigned __int8 **)(a1 + 24);
          unsigned int v26 = acc_auth_protocol_sizeofMessage((uint64_t)v25, *(_DWORD *)(a1 + 32), 0, 0);
          ACCAuthProtocol_PrintMessage(v25, v26, "\n----------------\n**** ACCAuthProtocol outgoing handler ****: \nHOST", 0, 1);
          int v27 = *(const UInt8 **)(a1 + 24);
          unsigned __int16 v28 = acc_auth_protocol_sizeofMessage((uint64_t)v27, *(_DWORD *)(a1 + 32), 0, 0);
          accAuthProtocol_endpoint_sendOutgoingData(a1, v27, v28);
        }
      }
    }
  }
  return v3;
}

uint64_t accAuthProtocol_endpoint_sendOutgoingData(uint64_t a1, const UInt8 *a2, unsigned int a3)
{
  if (!a1 || !*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v5 = 0;
  if (!a2 || !*(unsigned char *)(a1 + 8)) {
    return v5;
  }
  if (a3 < 4) {
    return 0;
  }
  uint64_t v7 = *(void *)a1;
  if (!acc_auth_protocol_validMessageID(*a2)
    || acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, 0, 0) > a3)
  {
    return 0;
  }
  CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, a2, a3);
  acc_platform_packetLogging_logAccAuthProtocolMsg(v7, **(unsigned __int8 **)(a1 + 16), v8, 0);
  uint64_t v5 = acc_endpoint_sendOutgoingData(v7, v8);
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

void accAuthProtocol_endpoint_setIncomingIntercept(_DWORD *a1, int a2)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v4 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 16);
    int v6 = a1[12];
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = v6;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "_setIncomingIntercept: %@, interceptIncomingCount %d -> %d", (uint8_t *)&v7, 0x18u);
  }
  a1[12] = a2;
}

uint64_t accAuthProtocol_endpoint_getIncomingInterceptCount(_DWORD *a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 16);
    int v4 = a1[12];
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "_getIncomingInterceptCount: %@, interceptIncomingCount %d", (uint8_t *)&v6, 0x12u);
  }
  return a1[12];
}

void ___accAuthProtocol_endpoint_sendAuthSetupStart_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 432);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v14 = 138412546;
    *(void *)int v15 = v3;
    *(_WORD *)&__int16 v15[8] = 1024;
    *(_DWORD *)uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "accAuthProtocol sendAuthSetupStart: %@, ... sending after %d ms", (uint8_t *)&v14, 0x12u);
  }
  EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 32));
  int v6 = EndpointWithUUID;
  if (EndpointWithUUID && *((_DWORD *)EndpointWithUUID + 7) == 10 && (uint64_t v7 = EndpointWithUUID[7]) != 0)
  {
    __int16 v8 = *(const UInt8 **)(v7 + 24);
    unsigned __int16 v9 = acc_auth_protocol_sizeofMessage((uint64_t)v8, *(_DWORD *)(v7 + 32), 0, 0);
    accAuthProtocol_endpoint_sendOutgoingData(v7, v8, v9);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(NSObject **)(gLogObjects + 432);
    }
    else
    {
      int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (v6)
      {
        BOOL v11 = *((_DWORD *)v6 + 7) == 10;
        BOOL v12 = v6[7] != 0;
      }
      else
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 67109890;
      *(_DWORD *)int v15 = v6 != 0;
      *(_WORD *)&uint8_t v15[4] = 1024;
      *(_DWORD *)&v15[6] = v11;
      *(_WORD *)uint64_t v16 = 1024;
      *(_DWORD *)&v16[2] = v12;
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "accAuthProtocol sendAuthSetupStart: no endpoint(%d) or wrong protocol(%d) or no protocolEndpoint(%d) for endpointUUID %@ !!", (uint8_t *)&v14, 0x1Eu);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

id _getUSBModePluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  BOOL v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBModePluginProtocol fallbackToTransportPlugins:1];

  return v1;
}

id _getUSBFaultPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  BOOL v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBFaultPluginProtocol fallbackToTransportPlugins:0];

  return v1;
}

uint64_t platform_usb_send_notification(const void *a1, const void *a2, const void *a3)
{
  uint64_t v3 = 0;
  if (a1 && a2)
  {
    CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, @"USBMode", a2);
    if (a3) {
      CFDictionaryAddValue(Mutable, @"USBFaultState", a3);
    }
    uint64_t v3 = accFeatureHandlers_invokeHandler(a1, 12, (uint64_t)Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v3;
}

id platform_usb_get_mode(uint64_t a1)
{
  uint64_t v2 = +[ACCPlatformUSBManager sharedManager];
  id v3 = [v2 getUSBModeForEndpointUUID:a1];

  return v3;
}

id platform_usb_set_mode_monitoring(uint64_t a1, uint64_t a2)
{
  int v4 = +[ACCPlatformUSBManager sharedManager];
  id v5 = [v4 setUSBModeMonitoringForEndpointUUID:a1 withState:a2];

  return v5;
}

id platform_usb_set_fault_monitoring(uint64_t a1, uint64_t a2)
{
  int v4 = +[ACCPlatformUSBManager sharedManager];
  id v5 = [v4 setUSBFaultMonitoringForEndpointUUID:a1 withState:a2];

  return v5;
}

id platform_usb_set_mode(uint64_t a1, uint64_t a2)
{
  int v4 = +[ACCPlatformUSBManager sharedManager];
  id v5 = [v4 setUSBModeForEndpointUUID:a1 newMode:a2];

  return v5;
}

void acc_platform_loggingProtocol_registerForPrefsNotification()
{
  if (acc_platform_loggingProtocol_registerForPrefsNotification_onceToken != -1) {
    dispatch_once(&acc_platform_loggingProtocol_registerForPrefsNotification_onceToken, &__block_literal_global_36);
  }
}

void __acc_platform_loggingProtocol_registerForPrefsNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)receivedNotification_0, @"com.apple.iapd.LoggingPreferencesChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedNotification_0()
{
  if (gLogObjects && gNumLogObjects >= 53)
  {
    id v0 = *(id *)(gLogObjects + 416);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v0 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Logs enabled from Accessory Developer Profile.", (uint8_t *)v4, 2u);
  }

  _accessoryDeveloperLoggingEnabled = CFPreferencesGetAppBooleanValue(@"CarPlayLoggingEnableAccessoryLogs", @"com.apple.CoreAccessories", 0) != 0;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    uint64_t v2 = *(id *)(gLogObjects + 416);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = _accessoryDeveloperLoggingEnabled;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logs enabled from Accessory Developer Profile. value: %d", (uint8_t *)v4, 8u);
  }
}

void acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!startLogsNotificationObservers)
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = (void *)startLogsNotificationObservers;
      startLogsNotificationObservers = (uint64_t)v4;
    }
    int v6 = +[NSString stringWithFormat:@"%@", a1];
    uint64_t v7 = [(id)startLogsNotificationObservers objectForKey:v6];

    if (v7)
    {
      if (gLogObjects && gNumLogObjects >= 53)
      {
        __int16 v8 = *(id *)(gLogObjects + 416);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v8 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Already registered for Request Accessory Logs notification.", buf, 2u);
      }
    }
    else
    {
      unsigned __int16 v9 = (void *)startLogsNotificationObservers;
      int v10 = +[NSValue valueWithPointer:a2];
      [v9 setObject:v10 forKey:v6];

      if (acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_onceToken != -1) {
        dispatch_once(&acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_onceToken, &__block_literal_global_20);
      }
    }
  }
}

void __acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)receivedStartCarPlayAccessoryLoggingNotification, @"com.apple.iapd.StartCarPlayAccessoryLogging", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedStartCarPlayAccessoryLoggingNotification()
{
  if ([(id)startLogsNotificationObservers count])
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v0 = (id)startLogsNotificationObservers;
    id v1 = [v0 countByEnumeratingWithState:&v9 objects:v14 count:16];
    if (v1)
    {
      id v2 = v1;
      uint64_t v3 = *(void *)v10;
      do
      {
        for (int i = 0; i != v2; int i = (char *)i + 1)
        {
          if (*(void *)v10 != v3) {
            objc_enumerationMutation(v0);
          }
          id v5 = objc_msgSend((id)startLogsNotificationObservers, "objectForKey:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
          id v6 = [v5 pointerValue];

          if (v6)
          {
            BOOL AccessoryLoggingLevel = readAccessoryLoggingLevel();
            loggingProtocol_requestLogsFromAccessory(AccessoryLoggingLevel, (uint64_t)v6);
          }
        }
        id v2 = [v0 countByEnumeratingWithState:&v9 objects:v14 count:16];
      }
      while (v2);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v0 = *(id *)(gLogObjects + 416);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v0 = &_os_log_default;
      id v8 = &_os_log_default;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "No connected logging session found! Ignoring Request Accessory Logs request.", buf, 2u);
    }
  }
}

void acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!stopLogsNotificationObservers)
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = (void *)stopLogsNotificationObservers;
      stopLogsNotificationObservers = (uint64_t)v4;
    }
    id v6 = +[NSString stringWithFormat:@"%@", a1];
    uint64_t v7 = [(id)stopLogsNotificationObservers objectForKey:v6];

    if (v7)
    {
      if (gLogObjects && gNumLogObjects >= 53)
      {
        id v8 = *(id *)(gLogObjects + 416);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v8 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Already registered for Stop Accessory Logs notification.", buf, 2u);
      }
    }
    else
    {
      long long v9 = (void *)stopLogsNotificationObservers;
      long long v10 = +[NSValue valueWithPointer:a2];
      [v9 setObject:v10 forKey:v6];

      if (acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_onceToken != -1) {
        dispatch_once(&acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_onceToken, &__block_literal_global_25);
      }
    }
  }
}

void __acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)receivedStopCarPlayAccessoryLoggingNotification, @"com.apple.iapd.StopCarPlayAccessoryLogging", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedStopCarPlayAccessoryLoggingNotification()
{
  if ([(id)stopLogsNotificationObservers count])
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v0 = (id)stopLogsNotificationObservers;
    id v1 = [v0 countByEnumeratingWithState:&v8 objects:v13 count:16];
    if (v1)
    {
      id v2 = v1;
      uint64_t v3 = *(void *)v9;
      do
      {
        for (int i = 0; i != v2; int i = (char *)i + 1)
        {
          if (*(void *)v9 != v3) {
            objc_enumerationMutation(v0);
          }
          id v5 = objc_msgSend((id)stopLogsNotificationObservers, "objectForKey:", *(void *)(*((void *)&v8 + 1) + 8 * i), (void)v8);
          id v6 = [v5 pointerValue];

          if (v6) {
            loggingProtocol_stopLogsFromAccessory(2u, (uint64_t)v6);
          }
        }
        id v2 = [v0 countByEnumeratingWithState:&v8 objects:v13 count:16];
      }
      while (v2);
    }
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v0 = *(id *)(gLogObjects + 416);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v0 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "No connected logging session found! Ignoring Stop Accessory Logs request.", buf, 2u);
    }
  }
}

BOOL readAccessoryLoggingLevel()
{
  CFStringRef v0 = (const __CFString *)CFPreferencesCopyAppValue(@"CarPlayLoggingAccessoryLogLevel", @"com.apple.CoreAccessories");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  BOOL v2 = CFStringCompare(v0, @"debug", 1uLL) == kCFCompareEqualTo;
  CFRelease(v1);
  return v2;
}

id acc_platform_loggingProtocol_removeNotificationObserver(id result)
{
  if (result)
  {
    id v1 = result;
    [(id)startLogsNotificationObservers removeObjectForKey:result];
    BOOL v2 = (void *)stopLogsNotificationObservers;
    return [v2 removeObjectForKey:v1];
  }
  return result;
}

void acc_platform_loggingProtocol_logSessionSync(uint64_t a1)
{
  BOOL v2 = +[NSDate date];
  [v2 timeIntervalSince1970];
  double v4 = v3 + (double)*(unint64_t *)(a1 + 40) / -1000000000.0;

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = **(id **)(a1 + 32);
  id v9 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1 + 57];
  long long v10 = [v9 UUIDString];
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@; SYNC; EP_UUID=%@; PROT_VER=%hhu; CONN_WALL_TIME=%lluns (0x%llX); CONN_ACC_TIME=%lluns (0x%llX); SEC_SINCE_CONN=%.6f; STR_TABLE_ID=%@; ACC_NAME='%s'; ACC_MODEL_ID='%s'; ACC_MFR='%s'",
    @"LOGGING_PROTOCOL",
    v8,
    v6,
    v5,
    v5,
    v7,
    v7,
    *(void *)&v4,
    v10,
    *(void *)(a1 + 80),
    *(void *)(a1 + 96),
    *(void *)(a1 + 88));
  id v13 = (id)objc_claimAutoreleasedReturnValue();

  long long v11 = +[NSString stringWithFormat:@"%@-%s-%@", @"accLogging", *(void *)(a1 + 80), v8];

  long long v12 = getLogFileWriter(v11);
  [v12 log:v13];
}

id getLogFileWriter(void *a1)
{
  id v1 = a1;
  BOOL v2 = (void *)_logFileWriters;
  if (!_logFileWriters)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    double v4 = (void *)_logFileWriters;
    _logFileWriters = (uint64_t)v3;

    BOOL v2 = (void *)_logFileWriters;
  }
  uint64_t v5 = [v2 objectForKeyedSubscript:v1];

  if (!v5)
  {
    id v6 = [[LogFileWriter alloc] initFor:@"accessoryd" fileLabel:v1];
    [(id)_logFileWriters setObject:v6 forKeyedSubscript:v1];
  }
  uint64_t v7 = [(id)_logFileWriters objectForKeyedSubscript:v1];

  return v7;
}

void acc_platform_loggingProtocol_logLogEntry(unsigned int *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 1);
  double v5 = (double)v4 / 1000000000.0;
  double v6 = (double)(v4 - *(void *)(a2 + 40) + *(void *)(a2 + 48)) / 1000000000.0;
  id v7 = **(id **)(a2 + 32);
  id v8 = objc_alloc_init((Class)NSDateFormatter);
  [v8 setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSSSSS ZZZ"];
  id v9 = +[NSDate dateWithTimeIntervalSince1970:v5];
  id v13 = [v8 stringFromDate:v9];

  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@; ENTRY; SEQ_NUM=%u; WALL_TS='%@'; WALL_UNIX_TIME=%.6fs; ACC_TIME=%.6fs; LVL=%d; SYS='%s'; CAT='%s'; DES='%s'",
    @"LOGGING_PROTOCOL",
    *a1,
    v13,
    *(void *)&v5,
    *(void *)&v6,
    a1[4],
    *((void *)a1 + 3),
    *((void *)a1 + 5),
  long long v10 = *((void *)a1 + 6));
  long long v11 = +[NSString stringWithFormat:@"%@-%s-%@", @"accLogging", *(void *)(a2 + 80), v7];

  long long v12 = getLogFileWriter(v11);
  [v12 log:v10];
}

void acc_platform_loggingProtocol_logIndexBasedLogEntry(unsigned int *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 1);
  double v5 = (double)v4 / 1000000000.0;
  double v6 = (double)(v4 - *(void *)(a2 + 40) + *(void *)(a2 + 48)) / 1000000000.0;
  id v15 = **(id **)(a2 + 32);
  id v7 = objc_alloc_init((Class)NSDateFormatter);
  [v7 setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSSSSS ZZZ"];
  id v8 = +[NSDate dateWithTimeIntervalSince1970:v5];
  id v9 = [v7 stringFromDate:v8];

  id v10 = objc_alloc_init((Class)NSMutableString);
  objc_msgSend(v10, "appendFormat:", @"%@; INDEX_BASED_ENTRY; SEQ_NUM=%u; WALL_TS='%@'; WALL_UNIX_TIME=%.6fs; ACC_TIME=%.6fs; LVL=%d; TABLE_INDEX=%u; NUM_PARAMS=%u; ",
    @"LOGGING_PROTOCOL",
    *a1,
    v9,
    *(void *)&v5,
    *(void *)&v6,
    a1[4],
    a1[5],
    *((unsigned __int8 *)a1 + 24));
  if (*((unsigned char *)a1 + 24))
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = v11 + 1;
      objc_msgSend(v10, "appendFormat:", @"PARAM_%d=%llu; ", v11 + 1, *(void *)(*((void *)a1 + 4) + 8 * v11));
      unint64_t v11 = v12;
    }
    while (v12 < *((unsigned __int8 *)a1 + 24));
  }
  id v13 = +[NSString stringWithFormat:@"%@-%s-%@", @"accLogging", *(void *)(a2 + 80), v15];
  int v14 = getLogFileWriter(v13);
  [v14 log:v10];
}

void acc_platform_loggingProtocol_logBinaryBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  id v7 = +[NSString stringWithFormat:@"%@-%s-%@-%u-%llu-%llu", @"accBinaryLogging", *(void *)(a3 + 80), **(void **)(a3 + 32), *(unsigned int *)(a3 + 120), *(void *)(a3 + 128), *(void *)(a3 + 136)];
  double v5 = +[NSData dataWithBytes:a1 length:a2];
  double v6 = getLogFileWriter(v7);
  [v6 logRawData:v5];
}

void acc_platform_loggingProtocol_postLoggingCleanup()
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v0 = (id)_logFileWriters;
  id v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v8;
    do
    {
      for (int i = 0; i != v2; int i = (char *)i + 1)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if (_logFileWriters)
        {
          double v5 = objc_msgSend((id)_logFileWriters, "objectForKeyedSubscript:", *(void *)(*((void *)&v7 + 1) + 8 * i), (void)v7);
          [v5 flush];
        }
      }
      id v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v2);
  }

  [(id)_logFileWriters removeAllObjects];
  double v6 = (void *)_logFileWriters;
  _logFileWriters = 0;
}

uint64_t __iAP2BuffPoolInitBuffList(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void *__iAP2BuffPoolGetBuff(uint64_t a1, size_t a2)
{
  return malloc_type_calloc(1uLL, a2, 0xF14605CFuLL);
}

void __iAP2BuffPoolReturnBuff(int a1, void *a2)
{
}

unsigned char *__iAP2BuffPoolGetSendPacket(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(v3, 0);
  int v5 = iAP2LinkCurPckHdrSize(v3);
  int v6 = iAP2LinkCurPckChksumSize(v3);
  if (MaxPayloadSize >= a2) {
    unsigned int MaxPayloadSize = a2;
  }
  long long v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x10B0040626AEECAuLL);
  if (!v7) {
    __iAP2BuffPoolGetSendPacket_cold_1();
  }
  long long v8 = v7;
  size_t v9 = MaxPayloadSize + v5 + v6;
  v7[60] = 0;
  long long v10 = (char *)malloc_type_calloc(1uLL, v9, 0x908448DEuLL);
  *((void *)v8 + 8) = v10;
  if (!v10) {
    __iAP2BuffPoolGetSendPacket_cold_2();
  }
  *((_DWORD *)v8 + 10) = v9;
  *((void *)v8 + 9) = &v10[v6 + 8];
  *(_WORD *)(v8 + 61) = ((iAP2LinkGetChecksumType(v3) & 3) << 12) | *(_WORD *)(v8 + 61) & 0xCFFF;
  return v8;
}

void __iAP2BuffPoolReturnSendPacket(uint64_t a1, void **a2)
{
  free(a2[8]);

  free(a2);
}

unsigned char *__iAP2BuffPoolGetRecvPacket(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = iAP2LinkCurPckHdrSize(v3);
  int v5 = iAP2LinkCurPckChksumSize(v3);
  int v6 = v5 + v4;
  if (__CFADD__(a2, v5 + v4)) {
    return 0;
  }
  int v8 = v5;
  size_t v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10B0040626AEECAuLL);
  if (!v9) {
    __iAP2BuffPoolGetRecvPacket_cold_1();
  }
  long long v7 = v9;
  size_t v10 = (v6 + a2);
  v9[60] = 0;
  unint64_t v11 = (char *)malloc_type_calloc(1uLL, v10, 0xECAAD4A8uLL);
  *((void *)v7 + 8) = v11;
  if (!v11) {
    __iAP2BuffPoolGetRecvPacket_cold_2();
  }
  *((_DWORD *)v7 + 10) = v10;
  *((void *)v7 + 9) = &v11[v8 + 8];
  *(_WORD *)(v7 + 61) = ((iAP2LinkGetChecksumType(v3) & 3) << 12) | *(_WORD *)(v7 + 61) & 0xCFFF;
  return v7;
}

uint64_t oobPairing_bleToOobPairingType(int a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t qiAuth_util_init(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  id v2 = malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
  uint64_t result = 0;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t qiAuth_util_generateNonce(uint64_t a1, void *a2, unsigned int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v6 = *(id *)(gLogObjects + 472);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      qiAuth_util_generateNonce_cold_1();
    }

    if (a3 && a2 && !*(_DWORD *)(a1 + 8)) {
      arc4random_buf(a2, a3);
    }
  }
  return 4294967294;
}

uint64_t qiAuth_util_verifyCertificateChain(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  id v9 = &unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      id v13 = *(id *)(gLogObjects + 472);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v13 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a1 + 8);
      int v39 = 136316418;
      __int16 v40 = "qiAuth_util_verifyCertificateChain";
      __int16 v41 = 1024;
      int v42 = 176;
      __int16 v43 = 1024;
      *(_DWORD *)int v44 = v25;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&unsigned char v44[6] = a2;
      __int16 v45 = 1024;
      int v46 = a4;
      __int16 v47 = 1024;
      unsigned int v48 = a6;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, certChainRootHashLength %d, certChainLength %d", (uint8_t *)&v39, 0x2Au);
    }

    int v14 = 0;
    uint64_t v16 = 4294967294;
    if (a6 <= 0x600 && a5 && a4 == 32 && a3 && a2 <= 3)
    {
      id v15 = 0;
      if (!*(_DWORD *)(a1 + 8))
      {
        uint64_t v18 = *(id **)(a1 + 16);
        if (v18)
        {
          int v14 = +[NSData dataWithBytes:a5 length:a6];
          unsigned int v19 = +[MFAACertificateManager sharedManager];
          id v15 = [v19 copyParsedCertificateChainInfo:v14];

          if (gLogObjects && gNumLogObjects >= 60)
          {
            unsigned int v20 = *(id *)(gLogObjects + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v20 = &_os_log_default;
            id v21 = &_os_log_default;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            id v22 = [v15 description];
            id v23 = [v22 UTF8String];
            if (v23)
            {
              id v9 = [v15 description];
              int v24 = (const char *)[v9 UTF8String];
            }
            else
            {
              int v24 = "<nil>";
            }
            int v39 = 136315650;
            __int16 v40 = "qiAuth_util_verifyCertificateChain";
            __int16 v41 = 1024;
            int v42 = 196;
            __int16 v43 = 2080;
            *(void *)int v44 = v24;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s:%d parsedCertChainInfo = %s", (uint8_t *)&v39, 0x1Cu);
            if (v23) {

            }
            id v9 = &unk_100239000;
          }

          unsigned int v26 = +[MFAACertificateManager sharedManager];
          id v27 = [v26 copyEvaluatedCertificateChainInfo:v15 forSpecificType:128];
          id v28 = *v18;
          *uint64_t v18 = v27;

          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v29 = *(id *)(gLogObjects + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v29 = &_os_log_default;
            id v30 = &_os_log_default;
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            id v31 = [*v18 description];
            id v32 = [v31 UTF8String];
            if (v32)
            {
              id v9 = [*v18 description];
              uint64_t v33 = (const char *)[v9 UTF8String];
            }
            else
            {
              uint64_t v33 = "<nil>";
            }
            int v39 = 136315650;
            __int16 v40 = "qiAuth_util_verifyCertificateChain";
            __int16 v41 = 1024;
            int v42 = 215;
            __int16 v43 = 2080;
            *(void *)int v44 = v33;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s:%d certChainInfo = %s", (uint8_t *)&v39, 0x1Cu);
            if (v32) {
          }
            }
          if (*v18)
          {
            uint64_t v16 = 0;
          }
          else if (acc_userDefaults_BOOLForKey(@"MPPAuthEnablePretendAuth"))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              __int16 v37 = *(id *)(gLogObjects + 472);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v37 = &_os_log_default;
              id v38 = &_os_log_default;
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_verifyCertificateChain_cold_2();
            }

            uint64_t v16 = 0;
          }
          else
          {
            uint64_t v16 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          int v14 = 0;
          id v15 = 0;
        }
      }
    }
    else
    {
      id v15 = 0;
    }
  }
  else
  {
    int v14 = 0;
    id v15 = 0;
    uint64_t v16 = 4294967294;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v34 = *(id *)(gLogObjects + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v34 = &_os_log_default;
    id v35 = &_os_log_default;
  }
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = 136316418;
    __int16 v40 = "qiAuth_util_verifyCertificateChain";
    __int16 v41 = 1024;
    int v42 = 239;
    __int16 v43 = 1024;
    *(_DWORD *)int v44 = v16;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)&unsigned char v44[6] = a2;
    __int16 v45 = 1024;
    int v46 = a4;
    __int16 v47 = 1024;
    unsigned int v48 = a6;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, slot %d, certChainRootHashLength %d, certChainLength %d", (uint8_t *)&v39, 0x2Au);
  }

  return v16;
}

uint64_t qiAuth_util_verifyChallengeSignature(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned __int16 a10)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      id v15 = *(id *)(gLogObjects + 472);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v15 = &_os_log_default;
      id v20 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v29 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)buf = 136316930;
      CFStringRef v82 = "qiAuth_util_verifyChallengeSignature";
      __int16 v83 = 1024;
      int v84 = 259;
      __int16 v85 = 1024;
      *(_DWORD *)CFStringRef v86 = v29;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = a2;
      __int16 v87 = 1024;
      int v88 = a4;
      __int16 v89 = 1024;
      unsigned int v90 = a6;
      __int16 v91 = 1024;
      unsigned int v92 = a8;
      __int16 v93 = 1024;
      int v94 = a10;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, certChainRootHashLength %d, certChainLength %d, challengeLen %d, signatureSize %d", buf, 0x36u);
    }

    id v16 = 0;
    uint64_t v19 = 4294967294;
    if (a2 > 3)
    {
      id v17 = 0;
      id v18 = 0;
      int v72 = 0;
    }
    else
    {
      id v17 = 0;
      id v18 = 0;
      int v72 = 0;
      if (!*(_DWORD *)(a1 + 8))
      {
        CFIndex v68 = *(id **)(a1 + 16);
        if (v68)
        {
          id v21 = &ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate_ptr;
          uint64_t v22 = +[NSData dataWithBytes:a5 length:a6];
          id v23 = +[MFAACertificateManager sharedManager];
          int v72 = (void *)v22;
          id v16 = [v23 copyParsedCertificateChainInfo:v22];

          unsigned int v66 = a6;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v24 = *(id *)(gLogObjects + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v24 = &_os_log_default;
            id v25 = &_os_log_default;
          }
          unsigned int v67 = a8;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            id v26 = [v16 description];
            id v27 = [v26 UTF8String];
            if (v27)
            {
              id v18 = [v16 description];
              id v28 = (const char *)[v18 UTF8String];
            }
            else
            {
              id v28 = "<nil>";
            }
            *(_DWORD *)buf = 136315650;
            CFStringRef v82 = "qiAuth_util_verifyChallengeSignature";
            __int16 v83 = 1024;
            int v84 = 275;
            __int16 v85 = 2080;
            *(void *)CFStringRef v86 = v28;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s:%d parsedCertChainInfo = %s", buf, 0x1Cu);
            if (v27) {
          }
            }
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          id obj = [v16 allKeys];
          id v30 = [obj countByEnumeratingWithState:&v76 objects:v80 count:16];
          if (v30)
          {
            id v31 = v30;
            uint64_t v32 = *(void *)v77;
            do
            {
              for (int i = 0; i != v31; int i = (char *)i + 1)
              {
                if (*(void *)v77 != v32) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v34 = *(void *)(*((void *)&v76 + 1) + 8 * i);
                id v35 = [v16 objectForKey:v34];
                if (v35)
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    CFArrayRef v75 = +[NSString stringWithFormat:@"ParsedCertChainInfo-%@", v34];
                    id v36 = [v75 description];
                    id v18 = v21;
                    id v37 = [v36 UTF8String];
                    id v38 = v31;
                    uint64_t v39 = v32;
                    id v40 = v16;
                    id v41 = v35;
                    id v42 = [v41 bytes];
                    __int16 v43 = v41;
                    id v16 = v40;
                    uint64_t v32 = v39;
                    id v31 = v38;
                    unsigned __int16 v44 = (unsigned __int16)[v43 length];
                    uint64_t v45 = (uint64_t)v37;
                    id v21 = (_UNKNOWN **)v18;
                    qiAuth_util_logCertData((const void **)a1, v45, (uint64_t)v42, v44, 1);
                  }
                }
              }
              id v31 = [obj countByEnumeratingWithState:&v76 objects:v80 count:16];
            }
            while (v31);
          }

          int v46 = +[MFAACertificateManager sharedManager];
          id v47 = [v46 copyEvaluatedCertificateChainInfo:v16 forSpecificType:128];
          unsigned int v48 = v68;
          id v49 = *v68;
          *CFIndex v68 = v47;

          if (gLogObjects && gNumLogObjects >= 60)
          {
            __int16 v50 = *(id *)(gLogObjects + 472);
            a8 = v67;
          }
          else
          {
            a8 = v67;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v50 = &_os_log_default;
            id v51 = &_os_log_default;
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            id v52 = [*v68 description];
            id v53 = [v52 UTF8String];
            if (v53)
            {
              id v18 = [*v68 description];
              int v54 = (const char *)[v18 UTF8String];
            }
            else
            {
              int v54 = "<nil>";
            }
            *(_DWORD *)buf = 136315650;
            CFStringRef v82 = "qiAuth_util_verifyChallengeSignature";
            __int16 v83 = 1024;
            int v84 = 292;
            __int16 v85 = 2080;
            *(void *)CFStringRef v86 = v54;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "%s:%d certChainInfo = %s", buf, 0x1Cu);
            if (v53) {

            }
            unsigned int v48 = v68;
          }

          if (!*v48)
          {
            if (acc_userDefaults_BOOLForKey(@"MPPAuthEnablePretendAuth"))
            {
              if (gLogObjects && gNumLogObjects >= 60)
              {
                int v55 = *(id *)(gLogObjects + 472);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                int v55 = &_os_log_default;
                id v56 = &_os_log_default;
              }
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                qiAuth_util_verifyChallengeSignature_cold_5();
              }

              objc_storeStrong(v48, v16);
            }
            else if (!acc_userDefaults_BOOLForKey(@"MPPAuthEnablePretendAuth"))
            {
              id v17 = 0;
              id v18 = 0;
              uint64_t v19 = 0xFFFFFFFFLL;
LABEL_75:
              a6 = v66;
              goto LABEL_87;
            }
          }
          id v17 = [v21[466] dataWithBytes:a7 length:a8];
          id v18 = [v21[466] dataWithBytes:a9 length:a10];
          int v57 = +[MFAACertificateManager sharedManager];
          unsigned int v58 = [v57 verifyNonceSignature:*v48 nonce:v17 signature:v18];

          if (gLogObjects && gNumLogObjects >= 60)
          {
            unsigned int v59 = *(id *)(gLogObjects + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v59 = &_os_log_default;
            id v60 = &_os_log_default;
          }
          if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            CFStringRef v82 = "qiAuth_util_verifyChallengeSignature";
            __int16 v83 = 1024;
            int v84 = 327;
            __int16 v85 = 1024;
            *(_DWORD *)CFStringRef v86 = v58 - 1;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "%s:%d verifyNonceSignature result %d", buf, 0x18u);
          }

          if (v58)
          {
            uint64_t v19 = 0;
            goto LABEL_75;
          }
          a6 = v66;
          if (acc_userDefaults_BOOLForKey(@"MPPAuthEnablePretendAuth"))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              uint64_t v61 = *(id *)(gLogObjects + 472);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v61 = &_os_log_default;
              id v62 = &_os_log_default;
            }
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_verifyChallengeSignature_cold_2();
            }

            uint64_t v19 = 0;
          }
          else
          {
            uint64_t v19 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          id v16 = 0;
          id v17 = 0;
          id v18 = 0;
          int v72 = 0;
        }
      }
    }
  }
  else
  {
    id v16 = 0;
    id v17 = 0;
    id v18 = 0;
    int v72 = 0;
    uint64_t v19 = 4294967294;
  }
LABEL_87:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFStringRef v63 = *(id *)(gLogObjects + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v63 = &_os_log_default;
    id v64 = &_os_log_default;
  }
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316930;
    CFStringRef v82 = "qiAuth_util_verifyChallengeSignature";
    __int16 v83 = 1024;
    int v84 = 337;
    __int16 v85 = 1024;
    *(_DWORD *)CFStringRef v86 = v19;
    *(_WORD *)&v86[4] = 1024;
    *(_DWORD *)&v86[6] = a2;
    __int16 v87 = 1024;
    int v88 = a4;
    __int16 v89 = 1024;
    unsigned int v90 = a6;
    __int16 v91 = 1024;
    unsigned int v92 = a8;
    __int16 v93 = 1024;
    int v94 = a10;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, slot %d, certChainRootHashLength %d, certChainLength %d, challengeLen %d, signatureSize %d", buf, 0x36u);
  }

  return v19;
}

void qiAuth_util_logCertData(const void **a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
        if (EndpointWithUUID)
        {
          size_t v10 = (uint64_t *)*((void *)EndpointWithUUID + 7);
          if (v10)
          {
            uint64_t v11 = *v10;
            unint64_t v12 = +[NSString stringWithCString:a2 encoding:1];
            id v13 = +[NSData dataWithBytes:a3 length:a4];
            acc_platform_packetLogging_logData(v11, (uint64_t)v12, @"QiAuth", v13, a5);
          }
        }
      }
    }
  }
}

void qiAuth_util_notifySlotAuthState(uint64_t a1, unsigned int a2, int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v6 = *(id *)(gLogObjects + 472);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v21 = *(_DWORD *)(a1 + 8);
      int v22 = 136316162;
      id v23 = "qiAuth_util_notifySlotAuthState";
      __int16 v24 = 1024;
      int v25 = 348;
      __int16 v26 = 1024;
      *(_DWORD *)id v27 = v21;
      *(_WORD *)&v27[4] = 1024;
      *(_DWORD *)&v27[6] = a2;
      *(_WORD *)id v28 = 1024;
      *(_DWORD *)&v28[2] = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, authState %d", (uint8_t *)&v22, 0x24u);
    }

    if (a2 <= 3 && !*(_DWORD *)(a1 + 8))
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
      if (EndpointWithUUID)
      {
        uint64_t v9 = EndpointWithUUID[7];
        if (v9)
        {
          if ((a3 - 1) > 2) {
            int v10 = 0;
          }
          else {
            int v10 = dword_1001B8968[a3 - 1];
          }
          if (gLogObjects && gNumLogObjects >= 60)
          {
            uint64_t v11 = *(id *)(gLogObjects + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v11 = &_os_log_default;
            id v12 = &_os_log_default;
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            id v13 = qiAuth_protocol_authStateString(a3);
            uint64_t v14 = *(void *)(v9 + 16);
            int v22 = 136316162;
            id v23 = "qiAuth_util_notifySlotAuthState";
            __int16 v24 = 1024;
            int v25 = 361;
            __int16 v26 = 2080;
            *(void *)id v27 = v13;
            *(_WORD *)&v27[8] = 1024;
            *(_DWORD *)id v28 = a2;
            *(_WORD *)&v28[4] = 2112;
            uint64_t v29 = v14;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s:%d AUTH[%s] for slot %d, endpoint %@", (uint8_t *)&v22, 0x2Cu);
          }

          qiAuth_endpoint_setAuthState((uint64_t **)v9, v10, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }
}

BOOL qiAuth_util_certificateExistsCache(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4)
{
  if (!a1) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v8 = *(id *)(gLogObjects + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *(_DWORD *)(a1 + 8);
    int v18 = 136316162;
    uint64_t v19 = "qiAuth_util_certificateExistsCache";
    __int16 v20 = 1024;
    int v21 = 376;
    __int16 v22 = 1024;
    int v23 = v17;
    __int16 v24 = 1024;
    unsigned int v25 = a2;
    __int16 v26 = 1024;
    unsigned int v27 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s:%d role %d, slot %d, certHashLen %d", (uint8_t *)&v18, 0x24u);
  }

  BOOL v9 = 0;
  if (a4 && a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8))
  {
    if (__getCerCacheObj_onceToken_0 != -1) {
      dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_37);
    }
    uint64_t v11 = __copyDataBytesHexString(a3, a4);
    id v12 = v11;
    BOOL v13 = 0;
    if (a4 == 1 && v11)
    {
      uint64_t v14 = MFAACreateMatchingHashForCertChainFromHashLSB();
      BOOL v13 = v14 != 0;
      CFRelease(v12);
      id v12 = (const void *)v14;
    }
    if (v12)
    {
      uint64_t v15 = (const void *)MFAACreateCertChainDataFromHash();
      if (v15)
      {
        CFRelease(v15);
        BOOL v13 = 1;
      }
      BOOL v9 = v13;
      CFRelease(v12);
    }
    else
    {
      return v13;
    }
  }
  return v9;
}

__CFString *__copyDataBytesHexString(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  CFMutableDataRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * a2);
  if (a1 && v2)
  {
    do
    {
      unsigned int v5 = *a1++;
      CFStringAppendFormat(Mutable, 0, @"%02x", v5);
      --v2;
    }
    while ((_WORD)v2);
  }
  return Mutable;
}

uint64_t qiAuth_util_copyCertificateFromCache(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, UInt8 *a5, unsigned int a6, UInt8 *a7, unsigned int a8, uint64_t a9)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v10 = 4294967294;
  if (a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8) && (a4 == 32 || a4 == 1))
  {
    BOOL v18 = a6 >= 0x20 || a5 == 0;
    if (v18 && a7 && a8 && a9)
    {
      if (__getCerCacheObj_onceToken_0 != -1) {
        dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_37);
      }
      uint64_t v19 = __copyDataBytesHexString(a3, a4);
      CFStringRef v20 = v19;
      if (a4 == 1 && v19)
      {
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v21 = *(id *)(gLogObjects + 472);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v21 = &_os_log_default;
          id v22 = &_os_log_default;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v23 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316162;
          id v35 = "qiAuth_util_copyCertificateFromCache";
          __int16 v36 = 1024;
          int v37 = 440;
          __int16 v38 = 1024;
          int v39 = v23;
          __int16 v40 = 1024;
          unsigned int v41 = a2;
          __int16 v42 = 2112;
          CFStringRef v43 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s:%d role %d, slot %d, certHashLSB %@", buf, 0x28u);
        }

        uint64_t v24 = MFAACreateMatchingHashForCertChainFromHashLSB();
        CFRelease(v20);
        CFStringRef v20 = (const __CFString *)v24;
      }
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v25 = *(id *)(gLogObjects + 472);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v25 = &_os_log_default;
        id v26 = &_os_log_default;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        int v27 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)buf = 136316162;
        id v35 = "qiAuth_util_copyCertificateFromCache";
        __int16 v36 = 1024;
        int v37 = 450;
        __int16 v38 = 1024;
        int v39 = v27;
        __int16 v40 = 1024;
        unsigned int v41 = a2;
        __int16 v42 = 2112;
        CFStringRef v43 = v20;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s:%d role %d, slot %d, certHash %@", buf, 0x28u);
      }

      if (v20)
      {
        CFDataRef v28 = (const __CFData *)MFAACreateCertChainDataFromHash();
        if (v28 && (CFDataRef v29 = v28, CFDataGetLength(v28) <= a8))
        {
          v44.unsigned int length = CFDataGetLength(v29);
          v44.location = 0;
          CFDataGetBytes(v29, v44, a7);
          uint64_t v10 = 0;
          int v30 = 1;
        }
        else
        {
          int v30 = 0;
          uint64_t v10 = 0xFFFFFFFFLL;
        }
        uint64_t v32 = __copyHexStringToData(v20);
        CFDataRef v33 = v32;
        if (a5 && v30 && v32)
        {
          if (CFDataGetLength(v32) <= a6)
          {
            v45.unsigned int length = CFDataGetLength(v33);
            v45.location = 0;
            CFDataGetBytes(v33, v45, a5);
          }
        }
        else if (!v32)
        {
LABEL_50:
          CFRelease(v20);
          return v10;
        }
        CFRelease(v33);
        goto LABEL_50;
      }
      return 4294967294;
    }
  }
  return v10;
}

__CFData *__copyHexStringToData(const __CFString *a1)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v4 = __chkstk_darwin(Length);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v7 = &v13[-v6];
  size_t v8 = v4 + 1;
  if (v4 == -1)
  {
    CFStringGetCString(a1, &v13[-v6], v8, 0x600u);
  }
  else
  {
    memset(&v13[-v6], 170, v8);
    CFStringGetCString(a1, v7, v8, 0x600u);
    if (Length >= 1)
    {
      CFIndex v9 = 0;
      while (1)
      {
        int v10 = v7[v9];
        int v11 = v7[v9 + 1];
        UInt8 bytes = 0;
        if ((__hexDigitsToByte(v10, v11, &bytes) & 1) == 0) {
          break;
        }
        CFDataAppendBytes(Mutable, &bytes, 1);
        v9 += 2;
        if (v9 >= Length) {
          return Mutable;
        }
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      return 0;
    }
  }
  return Mutable;
}

uint64_t qiAuth_util_saveCertificateInCache(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, const UInt8 *a5, unsigned int a6)
{
  if (!a1) {
    return 4294967294;
  }
  uint64_t v7 = 4294967294;
  if (a6 && a5 && a4 && a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8))
  {
    if (__getCerCacheObj_onceToken_0 != -1) {
      dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_37);
    }
    BOOL v13 = __copyDataBytesHexString(a3, a4);
    CFDataRef v14 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a5, a6, kCFAllocatorNull);
    int v15 = MFAAAddCertChainDataEntryToCacheForHash();
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v16 = *(id *)(gLogObjects + 472);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v16 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    uint64_t v7 = (v15 - 1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v18 = *(_DWORD *)(a1 + 8);
      int v20 = 136316674;
      int v21 = "qiAuth_util_saveCertificateInCache";
      __int16 v22 = 1024;
      int v23 = 511;
      __int16 v24 = 1024;
      int v25 = v7;
      __int16 v26 = 1024;
      int v27 = v18;
      __int16 v28 = 1024;
      unsigned int v29 = a2;
      __int16 v30 = 2112;
      id v31 = v13;
      __int16 v32 = 2112;
      CFDataRef v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s:%d result %d, role %d, slot %d, certHash %@, certDataObj %@", (uint8_t *)&v20, 0x38u);
    }

    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  return v7;
}

uint64_t qiAuth_util_policy_preferredSlot()
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    id v0 = *(id *)(gLogObjects + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v0 = &_os_log_default;
    id v1 = &_os_log_default;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    qiAuth_util_policy_preferredSlot_cold_1();
  }

  return 0;
}

id qiAuth_util_policy_challengeFirst(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 8)) {
    id v1 = acc_userDefaults_BOOLForKey(@"MPPAuthChallengeFirst");
  }
  else {
    id v1 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v2 = *(id *)(gLogObjects + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    qiAuth_util_policy_challengeFirst_cold_1((uint64_t)v1, v2, v4, v5, v6, v7, v8, v9);
  }

  return v1;
}

const void **qiAuth_util_sendData(const void **result, const UInt8 *a2, CFIndex a3)
{
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = (const void **)acc_manager_getEndpointWithUUID(*result);
        if (result)
        {
          uint64_t result = (const void **)result[7];
          if (result)
          {
            return (const void **)qiAuth_endpoint_sendOutgoingData((uint64_t *)result, a2, a3);
          }
        }
      }
    }
  }
  return result;
}

uint64_t qiAuth_util_callbackOnTimer(const void **a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 1000000 * a2;
  uint64_t v6 = 0xFFFFFFFFLL;
  uint64_t v7 = &unk_100239000;
  uint64_t v8 = &unk_100239000;
  if (a1 && a2 && a3)
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
    if (EndpointWithUUID)
    {
      uint64_t v12 = EndpointWithUUID[7];
      if (v12)
      {
        uint64_t v39 = a4;
        uint64_t v40 = EndpointWithUUID[7];
        int64_t v41 = v5;
        uint64_t v6 = 0;
        uint64_t v13 = v12 + 2056;
        CFDataRef v14 = (uint64_t *)(v12 + 1992);
        while (1)
        {
          int v15 = v7;
          uint64_t v16 = v7[49];
          id v17 = v8;
          int v18 = v8[100];
          if (v16 && v18 >= 60)
          {
            uint64_t v19 = *(id *)(v16 + 472);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              CFStringRef v43 = (const char *)v16;
              __int16 v44 = 1024;
              int v45 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v20 = &_os_log_default;
            uint64_t v19 = &_os_log_default;
          }
          uint64_t v8 = v17;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *v14;
            int v22 = *(unsigned __int8 *)(v13 + v6);
            *(_DWORD *)buf = 136316162;
            CFStringRef v43 = "qiAuth_util_callbackOnTimer";
            __int16 v44 = 1024;
            int v45 = 830;
            __int16 v46 = 1024;
            int v47 = v6;
            __int16 v48 = 2048;
            *(void *)id v49 = v21;
            *(_WORD *)&v49[8] = 1024;
            *(_DWORD *)&v49[10] = v22;
            _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s:%d [%d] timer %p, running %d", buf, 0x28u);
          }

          uint64_t v7 = v15;
          if (!*v14)
          {
            uint64_t v23 = v15[49];
            if (v23 && (int)v8[100] >= 60)
            {
              __int16 v24 = *(id *)(v23 + 472);
              uint64_t v5 = v41;
            }
            else
            {
              uint64_t v5 = v41;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v24 = &_os_log_default;
              id v32 = &_os_log_default;
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_callbackOnTimer_cold_2();
            }
            goto LABEL_46;
          }
          if (!*(unsigned char *)(v13 + v6)) {
            break;
          }
          ++v6;
          ++v14;
          if (v6 == 4)
          {
            uint64_t v6 = 0xFFFFFFFFLL;
            uint64_t v25 = v40;
            goto LABEL_23;
          }
        }
        v14[4] = a3;
        v14[9] = v39;
        uint64_t v25 = v40;
        *(unsigned char *)(v40 + v6 + 2056) = 1;
LABEL_23:
        uint64_t v26 = v15[49];
        uint64_t v5 = v41;
        if (v26 && (int)v8[100] >= 60)
        {
          int v27 = *(id *)(v26 + 472);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v27 = &_os_log_default;
          id v28 = &_os_log_default;
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *(void *)(v25 + 8 * (int)v6 + 1992);
          *(_DWORD *)buf = 136316418;
          CFStringRef v43 = "qiAuth_util_callbackOnTimer";
          __int16 v44 = 1024;
          int v45 = 846;
          __int16 v46 = 1024;
          int v47 = v6;
          __int16 v48 = 2048;
          *(void *)id v49 = v38;
          *(_WORD *)&v49[8] = 1024;
          *(_DWORD *)&v49[10] = a2;
          __int16 v50 = 2048;
          int64_t v51 = v41;
          _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%s:%d timerID %d, timer %p, timeoutMs %u, timeoutNs %lld", buf, 0x32u);
        }

        if ((v6 & 0x80000000) == 0)
        {
          unsigned int v29 = *(NSObject **)(v25 + 8 * v6 + 1992);
          dispatch_time_t v30 = dispatch_time(0, v41);
          dispatch_source_set_timer(v29, v30, 0xFFFFFFFFFFFFFFFFLL, 0);
          goto LABEL_48;
        }
        uint64_t v31 = v7[49];
        if (v31 && (int)v8[100] >= 60)
        {
          __int16 v24 = *(id *)(v31 + 472);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v24 = &_os_log_default;
          id v33 = &_os_log_default;
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          qiAuth_util_callbackOnTimer_cold_4();
        }
LABEL_46:
      }
    }
    uint64_t v6 = 0xFFFFFFFFLL;
  }
LABEL_48:
  uint64_t v34 = v7[49];
  if (v34 && (int)v8[100] >= 60)
  {
    id v35 = *(id *)(v34 + 472);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v35 = &_os_log_default;
    id v36 = &_os_log_default;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    CFStringRef v43 = "qiAuth_util_callbackOnTimer";
    __int16 v44 = 1024;
    int v45 = 854;
    __int16 v46 = 1024;
    int v47 = v6;
    __int16 v48 = 1024;
    *(_DWORD *)id v49 = a2;
    *(_WORD *)&v49[4] = 2048;
    *(void *)&v49[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%s:%d timerID %d, timeoutMs %u, timeoutNs %lld", buf, 0x28u);
  }

  return v6;
}

void qiAuth_util_cancelTimer(const void **a1, unsigned int a2)
{
  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
      if (EndpointWithUUID)
      {
        uint64_t v4 = EndpointWithUUID[7];
        if (v4)
        {
          uint64_t v5 = v4 + a2;
          if (gLogObjects) {
            BOOL v6 = gNumLogObjects <= 59;
          }
          else {
            BOOL v6 = 1;
          }
          int v7 = !v6;
          if (*(unsigned char *)(v5 + 2056))
          {
            if (v7)
            {
              uint64_t v8 = *(id *)(gLogObjects + 472);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v8 = &_os_log_default;
              id v10 = &_os_log_default;
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              int v13 = 136315650;
              CFDataRef v14 = "qiAuth_util_cancelTimer";
              __int16 v15 = 1024;
              int v16 = 871;
              __int16 v17 = 1024;
              unsigned int v18 = a2;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:%d Cancel timerID %d", (uint8_t *)&v13, 0x18u);
            }

            *(unsigned char *)(v5 + 2056) = 0;
            uint64_t v11 = v4 + 8 * a2;
            *(void *)(v11 + 2024) = 0;
            *(void *)(v11 + 2064) = 0;
            dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 1992), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
          }
          else
          {
            if (v7)
            {
              uint64_t v9 = *(id *)(gLogObjects + 472);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v9 = &_os_log_default;
              id v12 = &_os_log_default;
            }
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_cancelTimer_cold_1();
            }
          }
        }
      }
    }
  }
}

uint64_t qiAuth_util_hash_SHA256(uint64_t a1, void *data, CC_LONG len, unsigned __int8 *md, unsigned int a5, _WORD *a6)
{
  uint64_t result = 4294967294;
  if (a1 && data && len && md && a5 >= 0x20)
  {
    if (a6)
    {
      CC_SHA256(data, len, md);
      uint64_t result = 0;
      *a6 = 32;
    }
  }
  return result;
}

uint64_t __hexDigitsToByte(int a1, int a2, unsigned char *a3)
{
  if (!a3) {
    return 0;
  }
  char v3 = a1 - 48;
  if ((a1 - 48) >= 0xA && ((a1 & 0xDF) - 65) > 5u) {
    return 0;
  }
  char v4 = a2 - 48;
  if ((a2 - 48) >= 0xA && ((a2 & 0xDF) - 65) > 5u) {
    return 0;
  }
  if ((a1 - 97) >= 6) {
    char v6 = 0;
  }
  else {
    char v6 = a1 - 87;
  }
  if ((a1 - 65) <= 5) {
    char v7 = a1 - 55;
  }
  else {
    char v7 = v6;
  }
  if ((a1 - 48) >= 0xAu) {
    char v3 = v7;
  }
  if ((a2 - 97) >= 6) {
    char v8 = 0;
  }
  else {
    char v8 = a2 - 87;
  }
  if ((a2 - 65) <= 5) {
    char v9 = a2 - 55;
  }
  else {
    char v9 = v8;
  }
  if ((a2 - 48) >= 0xAu) {
    char v4 = v9;
  }
  *a3 = v4 | (16 * v3);
  return 1;
}

void ____getCerCacheObj_block_invoke_0(id a1)
{
  __getCerCacheObj___certCacheObj_0 = MFAACreateCertificateCache();
}

void OUTLINED_FUNCTION_4_16(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Eu);
}

void OUTLINED_FUNCTION_5_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x18u);
}

void sub_10012E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_22(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x2Au);
}

uint64_t platform_CarPlay_isWirelessCarPlayAllowedForCertSerial(uint64_t a1)
{
  uint64_t v13 = 0;
  CFDataRef v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  char v3 = +[ACCCarPlay sharedManager];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = __platform_CarPlay_isWirelessCarPlayAllowedForCertSerial_block_invoke;
  v10[3] = &unk_100219EE0;
  id v12 = &v13;
  uint64_t v4 = v2;
  uint64_t v11 = v4;
  [v3 isWirelessCarPlayAllowedForCertSerial:a1 withReply:v10];

  dispatch_time_t v5 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v5))
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      char v6 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      platform_CarPlay_isWirelessCarPlayAllowedForCertSerial_cold_1();
    }
  }
  uint64_t v8 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100130934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t platform_CarPlay_isCarPlayPairedWithCertSerial(uint64_t a1)
{
  uint64_t v13 = 0;
  CFDataRef v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  char v3 = +[ACCCarPlay sharedManager];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = __platform_CarPlay_isCarPlayPairedWithCertSerial_block_invoke;
  v10[3] = &unk_100219EE0;
  id v12 = &v13;
  uint64_t v4 = v2;
  uint64_t v11 = v4;
  [v3 isCarPlayPairedWithCertSerial:a1 withReply:v10];

  dispatch_time_t v5 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v5))
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      char v6 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      platform_CarPlay_isCarPlayPairedWithCertSerial_cold_1();
    }
  }
  uint64_t v8 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100130AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t platform_CarPlay_carPlayAppLinksStateForCertSerial(uint64_t a1)
{
  uint64_t v13 = 0;
  CFDataRef v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  char v3 = +[ACCCarPlay sharedManager];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = __platform_CarPlay_carPlayAppLinksStateForCertSerial_block_invoke;
  v10[3] = &unk_100219F08;
  id v12 = &v13;
  uint64_t v4 = v2;
  uint64_t v11 = v4;
  [v3 carPlayAppLinksStateForCertSerial:a1 withReply:v10];

  dispatch_time_t v5 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v5))
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      char v6 = *(id *)(gLogObjects + 48);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      platform_CarPlay_carPlayAppLinksStateForCertSerial_cold_1();
    }
  }
  uint64_t v8 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100130CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void platform_CarPlay_sendConnectionEvent(int a1, int a2)
{
  uint64_t v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 7;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  else
  {
    id v7 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    [v4 timeIntervalSinceReferenceDate];
    int v10 = 134218242;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[#CarPlay] CarPlay Connection Event: sending with time: %f, %@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v9 = +[ACCCarPlay sharedManager];
  [v9 carPlaySendConnectionTimeEvent:a1 connectionType:a2 eventTime:v4];
}

void platform_CarPlay_availability(const void *a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 52)
  {
    uint64_t v4 = *(id *)(gLogObjects + 408);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#CarPlay] platform_CarPlay_availability: %@, parameters %@", buf, 0x16u);
  }

  CFRetain(a1);
  CFRetain(a2);
  id v6 = dispatch_get_global_queue(0, 0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = __platform_CarPlay_availability_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a1;
  void v7[5] = a2;
  dispatch_async(v6, v7);
}

void platform_CarPlay_startSession(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (gLogObjects) {
    BOOL v20 = gNumLogObjects < 7;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v22 = &_os_log_default;
    id v21 = &_os_log_default;
  }
  else
  {
    int v22 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138415618;
    uint64_t v32 = a2;
    __int16 v33 = 2112;
    uint64_t v34 = a3;
    __int16 v35 = 2112;
    uint64_t v36 = a4;
    __int16 v37 = 2112;
    uint64_t v38 = a5;
    __int16 v39 = 2112;
    uint64_t v40 = a6;
    __int16 v41 = 2112;
    uint64_t v42 = a7;
    __int16 v43 = 2112;
    uint64_t v44 = a8;
    __int16 v45 = 2112;
    uint64_t v46 = a9;
    __int16 v47 = 2112;
    uint64_t v48 = a10;
    __int16 v49 = 2112;
    uint64_t v50 = a11;
    __int16 v51 = 2112;
    uint64_t v52 = a12;
    __int16 v53 = 2112;
    uint64_t v54 = a13;
    __int16 v55 = 2112;
    uint64_t v56 = a14;
    __int16 v57 = 2112;
    uint64_t v58 = a15;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[#CarPlay] platform_CarPlay_startSession: usbIP %@, wifiIP %@, ssid %@, pass %@, securityType %@, channel %@, port %@, deviceID %@, pubKey %@, srcVer %@, sdkVer %@, assetID %@, assetVer %@, mutualAuth %@", buf, 0x8Eu);
  }

  uint64_t v23 = +[NSMutableDictionary dictionary];
  __int16 v24 = v23;
  if (a2) {
    [v23 setObject:a2 forKey:@"wiredIPAddresses"];
  }
  if (a3) {
    [v24 setObject:a3 forKey:@"wirelessIPAddresses"];
  }
  if (a4) {
    [v24 setObject:a4 forKey:@"SSID_STR"];
  }
  if (a5) {
    [v24 setObject:a5 forKey:@"password"];
  }
  if (a6) {
    [v24 setObject:a6 forKey:@"securityType"];
  }
  if (a7) {
    [v24 setObject:a7 forKey:@"CHANNEL"];
  }
  if (a8) {
    [v24 setObject:a8 forKey:@"port"];
  }
  if (a9) {
    [v24 setObject:a9 forKey:@"deviceID"];
  }
  if (a10) {
    [v24 setObject:a10 forKey:@"publicKey"];
  }
  if (a11) {
    [v24 setObject:a11 forKey:@"sourceVersion"];
  }
  if (a12) {
    [v24 setObject:a12 forKey:@"SDKVersion"];
  }
  if (a13) {
    [v24 setObject:a13 forKey:@"clusterAssetIdentifer"];
  }
  if (a14) {
    [v24 setObject:a14 forKey:@"clusterAssetVersion"];
  }
  if (a15) {
    [v24 setObject:a15 forKey:@"supportsMutualAuth"];
  }
  if (gLogObjects && gNumLogObjects >= 7)
  {
    uint64_t v25 = *(id *)(gLogObjects + 48);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v25 = &_os_log_default;
    id v26 = &_os_log_default;
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
    platform_CarPlay_startSession_cold_1((uint64_t)v24, v25);
  }

  int v27 = +[ACCCarPlay sharedManager];
  [v27 carPlayStartSessionForConnectionID:a1 properties:v24];
}

void platform_CarPlay_availableDigitalCarKeys(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 7;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    id v6 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#CarPlay] platform_CarPlay_availableDigitalCarKeys key IDs: %@", buf, 0xCu);
  }

  id v7 = +[ACCCarPlay sharedManager];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = __platform_CarPlay_availableDigitalCarKeys_block_invoke;
  v8[3] = &__block_descriptor_40_e17_v16__0__NSArray_8l;
  v8[4] = a1;
  [v7 filterMatchingDigitalCarKeys:a2 forAccessory:a1 withCompletionHandler:v8];
}

void platform_CarPlay_matchedDigitalCarKeys(const void *a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 52)
  {
    BOOL v4 = *(id *)(gLogObjects + 408);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#CarPlay] platform_CarPlay_matchedDigitalCarKeys: %@, key IDs: %@", buf, 0x16u);
  }

  CFRetain(a1);
  CFRetain(a2);
  id v6 = dispatch_get_global_queue(0, 0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = __platform_CarPlay_matchedDigitalCarKeys_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a1;
  void v7[5] = a2;
  dispatch_async(v6, v7);
}

char *acc_accInfo_create()
{
  id v0 = (char *)malloc_type_calloc(1uLL, 0xB0uLL, 0x1060040C7FDF64DuLL);
  id v1 = v0;
  if (v0) {
    pthread_mutex_init((pthread_mutex_t *)(v0 + 112), 0);
  }
  return v1;
}

BOOL acc_accInfo_destroy(void **a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)*a1;
  if (!v2) {
    return 0;
  }
  BOOL v3 = acc_accInfo_reset(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)*a1 + 112));
  if (*a1)
  {
    free(*a1);
    *a1 = 0;
  }
  return v3;
}

BOOL acc_accInfo_reset(uint64_t a1)
{
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
    uint64_t v2 = *(const void **)(a1 + 8);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 8) = 0;
    }
    BOOL v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0;
    }
    BOOL v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 24) = 0;
    }
    id v5 = *(const void **)(a1 + 32);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 32) = 0;
    }
    id v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 40) = 0;
    }
    id v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 56);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 72);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 72) = 0;
    }
    __int16 v10 = *(const void **)(a1 + 64);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 64) = 0;
    }
    uint64_t v11 = *(const void **)(a1 + 80);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 80) = 0;
    }
    __int16 v12 = *(const void **)(a1 + 88);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 88) = 0;
    }
    uint64_t v13 = *(const void **)(a1 + 96);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 96) = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
  }
  return a1 != 0;
}

uint64_t acc_accInfo_setAccessoryInfo(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    acc_accInfo_reset(a1);
    id v6 = (pthread_mutex_t *)(a2 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 112));
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (*(void *)a2)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a2);
      uint64_t v8 = ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate();
      if (v8)
      {
        uint64_t v9 = v8;
        if (Copy) {
          CFRelease(Copy);
        }
      }
      else
      {
        uint64_t v9 = (uint64_t)Copy;
      }
      *(void *)a1 = v9;
    }
    CFStringRef v10 = *(const __CFString **)(a2 + 8);
    if (v10) {
      *(void *)(a1 + 8) = CFStringCreateCopy(kCFAllocatorDefault, v10);
    }
    CFStringRef v11 = *(const __CFString **)(a2 + 16);
    if (v11) {
      *(void *)(a1 + 16) = CFStringCreateCopy(kCFAllocatorDefault, v11);
    }
    CFStringRef v12 = *(const __CFString **)(a2 + 24);
    if (v12) {
      *(void *)(a1 + 24) = CFStringCreateCopy(kCFAllocatorDefault, v12);
    }
    CFStringRef v13 = *(const __CFString **)(a2 + 32);
    if (v13) {
      *(void *)(a1 + 32) = CFStringCreateCopy(kCFAllocatorDefault, v13);
    }
    CFStringRef v14 = *(const __CFString **)(a2 + 40);
    if (v14) {
      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v14);
    }
    CFStringRef v15 = *(const __CFString **)(a2 + 48);
    if (v15) {
      *(void *)(a1 + 48) = CFStringCreateCopy(kCFAllocatorDefault, v15);
    }
    CFStringRef v16 = *(const __CFString **)(a2 + 56);
    if (v16) {
      *(void *)(a1 + 56) = CFStringCreateCopy(kCFAllocatorDefault, v16);
    }
    CFStringRef v17 = *(const __CFString **)(a2 + 72);
    if (v17) {
      *(void *)(a1 + 72) = CFStringCreateCopy(kCFAllocatorDefault, v17);
    }
    CFStringRef v18 = *(const __CFString **)(a2 + 64);
    if (v18) {
      *(void *)(a1 + 64) = CFStringCreateCopy(kCFAllocatorDefault, v18);
    }
    uint64_t v19 = *(const void **)(a2 + 80);
    if (v19) {
      *(void *)(a1 + 80) = CFRetain(v19);
    }
    BOOL v20 = *(const void **)(a2 + 88);
    if (v20) {
      *(void *)(a1 + 88) = CFRetain(v20);
    }
    id v21 = *(const void **)(a2 + 96);
    if (v21) {
      *(void *)(a1 + 96) = CFRetain(v21);
    }
    int v22 = *(const void **)(a2 + 104);
    if (v22) {
      *(void *)(a1 + 104) = CFRetain(v22);
    }
    if (gLogObjects && gNumLogObjects >= 12)
    {
      uint64_t v23 = *(NSObject **)(gLogObjects + 88);
    }
    else
    {
      uint64_t v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_bluetooth_copyNameForMacAddress_cold_2();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *(void *)(a1 + 24);
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v30 = *(void *)(a1 + 48);
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 64);
      uint64_t v33 = *(void *)(a1 + 72);
      uint64_t v34 = *(void *)(a1 + 80);
      uint64_t v35 = *(void *)(a1 + 88);
      uint64_t v36 = *(void *)(a1 + 96);
      uint64_t v37 = *(void *)(a1 + 104);
      int v39 = 136318978;
      uint64_t v40 = "acc_accInfo_setAccessoryInfo";
      __int16 v41 = 1024;
      int v42 = 211;
      __int16 v43 = 2112;
      uint64_t v44 = v24;
      __int16 v45 = 2112;
      uint64_t v46 = v25;
      __int16 v47 = 2112;
      uint64_t v48 = v26;
      __int16 v49 = 2112;
      uint64_t v50 = v27;
      __int16 v51 = 2112;
      uint64_t v52 = v28;
      __int16 v53 = 2112;
      uint64_t v54 = v29;
      __int16 v55 = 2112;
      uint64_t v56 = v30;
      __int16 v57 = 2112;
      uint64_t v58 = v31;
      __int16 v59 = 2112;
      uint64_t v60 = v33;
      __int16 v61 = 2112;
      uint64_t v62 = v32;
      __int16 v63 = 2112;
      uint64_t v64 = v34;
      __int16 v65 = 2112;
      uint64_t v66 = v35;
      __int16 v67 = 2112;
      uint64_t v68 = v36;
      __int16 v69 = 2112;
      uint64_t v70 = v37;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "[#Accessory Info] %s:%d Set accessory info: name: %@, manufacturer: %@, model: %@, serialNumber: %@, hardwareVersion: %@, firmwareVersionActive: %@, firmwareVersionPending: %@, ppid: %@ regionCode: %@, deviceUID: %@, deviceCompatibility: %@, vid/pid: %@/%@, accessoryPlatformID: %@", (uint8_t *)&v39, 0x9Eu);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
    pthread_mutex_unlock(v6);
  }
  return v3;
}

uint64_t acc_accInfo_setAccessoryInfoWithDictionary(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  acc_accInfo_reset(a1);

  return acc_accInfo_updateAccessoryInfoWithDictionary(a1, a2);
}

uint64_t acc_accInfo_updateAccessoryInfoWithDictionary(uint64_t a1, const __CFDictionary *a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    id v6 = (pthread_mutex_t *)(a1 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    CFStringRef Value = CFDictionaryGetValue(a2, kCFACCInfo_Name);
    if (Value)
    {
      CFTypeRef v8 = CFRetain(Value);
      uint64_t v9 = ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate();
      if (v9)
      {
        uint64_t v10 = v9;
        if (v8) {
          CFRelease(v8);
        }
      }
      else
      {
        uint64_t v10 = (uint64_t)v8;
      }
      if (*(void *)a1) {
        CFRelease(*(CFTypeRef *)a1);
      }
      *(void *)a1 = v10;
    }
    CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_Manufacturer);
    if (v11)
    {
      CFStringRef v12 = v11;
      CFStringRef v13 = *(const void **)(a1 + 8);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + 8) = 0;
      }
      *(void *)(a1 + 8) = CFStringCreateCopy(kCFAllocatorDefault, v12);
    }
    CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_Model);
    if (v14)
    {
      CFStringRef v15 = v14;
      CFStringRef v16 = *(const void **)(a1 + 16);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(a1 + 16) = 0;
      }
      *(void *)(a1 + 16) = CFStringCreateCopy(kCFAllocatorDefault, v15);
    }
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_SerialNumber);
    if (v17)
    {
      CFStringRef v18 = v17;
      uint64_t v19 = *(const void **)(a1 + 24);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(a1 + 24) = 0;
      }
      *(void *)(a1 + 24) = CFStringCreateCopy(kCFAllocatorDefault, v18);
    }
    CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_HardwareVersion);
    if (v20)
    {
      CFStringRef v21 = v20;
      int v22 = *(const void **)(a1 + 32);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(a1 + 32) = 0;
      }
      *(void *)(a1 + 32) = CFStringCreateCopy(kCFAllocatorDefault, v21);
    }
    CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_FirmwareVersionActive);
    if (v23)
    {
      CFStringRef v24 = v23;
      uint64_t v25 = *(const void **)(a1 + 40);
      if (v25)
      {
        CFRelease(v25);
        *(void *)(a1 + 40) = 0;
      }
      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v24);
    }
    CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_FirmwareVersionPending);
    if (v26)
    {
      CFStringRef v27 = v26;
      uint64_t v28 = *(const void **)(a1 + 48);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(a1 + 48) = 0;
      }
      *(void *)(a1 + 48) = CFStringCreateCopy(kCFAllocatorDefault, v27);
    }
    CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_PPID);
    if (v29)
    {
      CFStringRef v30 = v29;
      uint64_t v31 = *(const void **)(a1 + 56);
      if (v31)
      {
        CFRelease(v31);
        *(void *)(a1 + 56) = 0;
      }
      *(void *)(a1 + 56) = CFStringCreateCopy(kCFAllocatorDefault, v30);
    }
    CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_RegionCode);
    if (v32)
    {
      CFStringRef v33 = v32;
      uint64_t v34 = *(const void **)(a1 + 72);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(a1 + 72) = 0;
      }
      *(void *)(a1 + 72) = CFStringCreateCopy(kCFAllocatorDefault, v33);
    }
    CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_AccessoryDeviceUID);
    if (v35)
    {
      CFStringRef v36 = v35;
      uint64_t v37 = *(const void **)(a1 + 64);
      if (v37)
      {
        CFRelease(v37);
        *(void *)(a1 + 64) = 0;
      }
      *(void *)(a1 + 64) = CFStringCreateCopy(kCFAllocatorDefault, v36);
    }
    uint64_t v38 = CFDictionaryGetValue(a2, kCFACCInfo_DeviceCompatibility);
    if (v38)
    {
      int v39 = v38;
      uint64_t v40 = *(const void **)(a1 + 80);
      if (v40)
      {
        CFRelease(v40);
        *(void *)(a1 + 80) = 0;
      }
      *(void *)(a1 + 80) = CFRetain(v39);
    }
    __int16 v41 = CFDictionaryGetValue(a2, kCFACCInfo_VendorID);
    if (v41)
    {
      int v42 = v41;
      __int16 v43 = *(const void **)(a1 + 88);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(a1 + 88) = 0;
      }
      *(void *)(a1 + 88) = CFRetain(v42);
    }
    uint64_t v44 = CFDictionaryGetValue(a2, kCFACCInfo_ProductID);
    if (v44)
    {
      __int16 v45 = v44;
      uint64_t v46 = *(const void **)(a1 + 96);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(a1 + 96) = 0;
      }
      *(void *)(a1 + 96) = CFRetain(v45);
    }
    __int16 v47 = CFDictionaryGetValue(a2, kCFACCInfo_AccessoryPlatformID);
    if (v47)
    {
      uint64_t v48 = v47;
      __int16 v49 = *(const void **)(a1 + 104);
      if (v49)
      {
        CFRelease(v49);
        *(void *)(a1 + 104) = 0;
      }
      *(void *)(a1 + 104) = CFRetain(v48);
    }
    if (gLogObjects && gNumLogObjects >= 12)
    {
      uint64_t v50 = *(NSObject **)(gLogObjects + 88);
    }
    else
    {
      uint64_t v50 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_bluetooth_copyNameForMacAddress_cold_2();
      }
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      acc_accInfo_updateAccessoryInfoWithDictionary_cold_1((uint64_t *)a1, v50);
    }
    pthread_mutex_unlock(v6);
  }
  return v3;
}

int64x2_t *acc_accInfo_copyAccessoryInfoDictionary(uint64_t a1)
{
  id v1 = (int64x2_t *)a1;
  if (a1)
  {
    BOOL v2 = (pthread_mutex_t *)(a1 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    uint64_t v3 = (const double *)&kCFNull;
    int8x16_t v4 = (int8x16_t)vld1q_dup_f64(v3);
    int8x16_t v5 = vbslq_s8((int8x16_t)vceqzq_s64(v1[1]), v4, (int8x16_t)v1[1]);
    v10[0] = vbslq_s8((int8x16_t)vceqzq_s64(*v1), v4, *(int8x16_t *)v1);
    v10[1] = v5;
    int8x16_t v6 = vbslq_s8((int8x16_t)vceqzq_s64(v1[3]), v4, (int8x16_t)v1[3]);
    _DWORD v10[2] = vbslq_s8((int8x16_t)vceqzq_s64(v1[2]), v4, (int8x16_t)v1[2]);
    v10[3] = v6;
    int8x16_t v7 = vbslq_s8((int8x16_t)vceqzq_s64(v1[4]), v4, (int8x16_t)v1[4]);
    int8x16_t v8 = vbslq_s8((int8x16_t)vceqzq_s64(v1[5]), v4, (int8x16_t)v1[5]);
    keys[0] = (void *)kCFACCInfo_Name;
    keys[1] = (void *)kCFACCInfo_Manufacturer;
    keys[2] = (void *)kCFACCInfo_Model;
    keys[3] = (void *)kCFACCInfo_SerialNumber;
    keys[4] = (void *)kCFACCInfo_HardwareVersion;
    keys[5] = (void *)kCFACCInfo_FirmwareVersionActive;
    keys[6] = (void *)kCFACCInfo_FirmwareVersionPending;
    keys[7] = (void *)kCFACCInfo_PPID;
    keys[8] = (void *)kCFACCInfo_AccessoryDeviceUID;
    keys[9] = (void *)kCFACCInfo_RegionCode;
    keys[10] = (void *)kCFACCInfo_DeviceCompatibility;
    keys[11] = (void *)kCFACCInfo_VendorID;
    void v10[4] = v7;
    v10[5] = v8;
    keys[12] = (void *)kCFACCInfo_ProductID;
    keys[13] = (void *)kCFACCInfo_AccessoryPlatformID;
    v10[6] = vbslq_s8((int8x16_t)vceqzq_s64(v1[6]), v4, (int8x16_t)v1[6]);
    id v1 = (int64x2_t *)CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)v10, 14, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

CFStringRef acc_accInfo_copyAccessoryInfoDescription(CFStringRef result)
{
  if (result)
  {
    p_isa = &result->isa;
    p_data = (pthread_mutex_t *)&result[3].data;
    pthread_mutex_lock((pthread_mutex_t *)&result[3].data);
    CFStringRef v3 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"<ACCAccessoryInfo_t: name: %@; manufacturer: %@; model: %@; serialNumber: %@; hardwareVersion: %@; firmwareVersionActive: %@; firmwareVersionPending: %@; ppid: %@, regionCode: %@; deviceUID: %@>; deviceCompatibility: %@; vid/pid: %@/%@, accessoryPlatformID: %@",
           *p_isa,
           p_isa[1],
           p_isa[2],
           p_isa[3],
           p_isa[4],
           p_isa[5],
           p_isa[6],
           p_isa[7],
           p_isa[9],
           p_isa[8],
           p_isa[10],
           p_isa[11],
           p_isa[12],
           p_isa[13]);
    pthread_mutex_unlock(p_data);
    return v3;
  }
  return result;
}

CFTypeRef acc_accInfo_retainedProperty(uint64_t a1, int a2, CFTypeRef a3)
{
  if (!a1) {
    return 0;
  }
  int8x16_t v6 = (pthread_mutex_t *)(a1 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
  switch(a2)
  {
    case 0:
      int8x16_t v7 = *(const void **)a1;
      if (*(void *)a1) {
        goto LABEL_29;
      }
      break;
    case 1:
      int8x16_t v7 = *(const void **)(a1 + 8);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 2:
      int8x16_t v7 = *(const void **)(a1 + 16);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 3:
      int8x16_t v7 = *(const void **)(a1 + 24);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 4:
      int8x16_t v7 = *(const void **)(a1 + 32);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 5:
      int8x16_t v7 = *(const void **)(a1 + 40);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 6:
      int8x16_t v7 = *(const void **)(a1 + 48);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 7:
      int8x16_t v7 = *(const void **)(a1 + 56);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 8:
      int8x16_t v7 = *(const void **)(a1 + 64);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 9:
      int8x16_t v7 = *(const void **)(a1 + 72);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 10:
      int8x16_t v7 = *(const void **)(a1 + 80);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 11:
      int8x16_t v7 = *(const void **)(a1 + 88);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 12:
      int8x16_t v7 = *(const void **)(a1 + 96);
      if (v7) {
LABEL_29:
      }
        a3 = CFRetain(v7);
      break;
    default:
      a3 = 0;
      break;
  }
  pthread_mutex_unlock(v6);
  return a3;
}

uint64_t acc_accInfo_isConsideredEmpty(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  BOOL v2 = (pthread_mutex_t *)(a1 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
  BOOL v3 = !*(void *)a1 && !*(void *)(a1 + 8) && *(void *)(a1 + 16) == 0;
  pthread_mutex_unlock(v2);
  return v3;
}

void platform_system_resetLightningBusForEndpointWithUUID(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int8x16_t v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    int8x16_t v4 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[#Lightning] Resetting lightning bus for endpoint %@...", (uint8_t *)&v9, 0xCu);
  }

  int8x16_t v5 = _getPluginInstance();
  if (v5)
  {
    if (objc_opt_respondsToSelector())
    {
      [v5 resetLightningBusForEndpointWithUUID:a1];
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int8x16_t v6 = *(id *)(gLogObjects + 48);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int8x16_t v6 = &_os_log_default;
        id v7 = &_os_log_default;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int8x16_t v8 = NSStringFromSelector("resetLightningBusForEndpointWithUUID:");
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[#Lightning] Platform plugin does not implement selector %@!", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

id _getPluginInstance()
{
  id v0 = +[ACCPlatformPluginManager sharedManager];
  id v1 = [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformLightningPluginProtocol fallbackToTransportPlugins:1];

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int8x16_t v4 = &_os_log_default;
      id v3 = &_os_log_default;
    }
    else
    {
      int8x16_t v4 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

void platform_digitalAudio_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int8x16_t v6 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  else
  {
    int8x16_t v6 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    uint64_t v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[#DigitalAudio] endpointUUID: %@, supportedSampleRatesMask: %d", (uint8_t *)&v9, 0x12u);
  }

  id v7 = +[ACCPlatformDigitalAudioManager getManager];
  [v7 setDigitalAudioEndpointUUID:a1 withSupportedSampleRates:a2];

  int8x16_t v8 = +[ACCAudioServer sharedServer];
  [v8 incrementUserCount];
}

void platform_digitalAudio_accessoryDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    BOOL v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    uint64_t v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#DigitalAudio] endpointUUID: %@", (uint8_t *)&v8, 0xCu);
  }

  id v5 = +[ACCAudioServer sharedServer];
  [v5 decrementUserCount];

  int8x16_t v6 = +[ACCPlatformDigitalAudioManager getManager];
  [v6 stopAudioPropertyNotifications];

  id v7 = +[ACCPlatformDigitalAudioManager getManager];
  [v7 setDigitalAudioEndpointUUID:0 withSupportedSampleRates:0];
}

void platform_digitalAudio_eaAccessoryAttached()
{
  id v0 = +[ACCAudioServer sharedServer];
  [v0 incrementUserCount];
}

void platform_digitalAudio_eaAccessoryDetached()
{
  id v0 = +[ACCAudioServer sharedServer];
  [v0 decrementUserCount];
}

uint64_t platform_digitalAudio_start()
{
  id v0 = +[ACCPlatformDigitalAudioManager getManager];
  id v1 = v0;
  if (v0 && ([v0 bDigAudIsActive] & 1) == 0)
  {
    [v1 startAudioPropertyNotifications];
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t platform_digitalAudio_stop()
{
  id v0 = +[ACCPlatformDigitalAudioManager getManager];
  id v1 = v0;
  if (v0 && [v0 bDigAudIsActive])
  {
    [v1 stopAudioPropertyNotifications];
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id platform_digitalAudio_getSupportedSampleRate(uint64_t a1)
{
  uint64_t v2 = +[ACCPlatformDigitalAudioManager getManager];
  id v3 = v2;
  if (v2 && [v2 bDigAudIsActive]) {
    id v4 = [v3 convertToSupportedSampleRate:a1];
  }
  else {
    id v4 = 0;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 8;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = &_os_log_default;
    id v6 = &_os_log_default;
  }
  else
  {
    id v7 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109376;
    v9[1] = a1;
    __int16 v10 = 1024;
    int v11 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[#DigitalAudio] inputRate: %d, supportedRate: %d", (uint8_t *)v9, 0xEu);
  }

  return v4;
}

id platform_digitalAudio_copySupportedSampleRates()
{
  id v0 = +[ACCPlatformDigitalAudioManager getManager];
  if ([v0 bDigAudIsActive])
  {
    id v1 = [v0 supportedSampleRatesList];
  }
  else
  {
    id v1 = 0;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    id v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    int v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#DigitalAudio] pSuppSampleRates: %@", (uint8_t *)&v7, 0xCu);
  }

  id v5 = [v1 copy];
  return v5;
}

id platform_digitalAudio_copyDeviceAudioStates()
{
  v14[0] = @"IAPAudioTransportNameKey";
  id v0 = +[NSNumber numberWithUnsignedInt:1];
  v15[0] = v0;
  v14[1] = @"IAPAudioTransportLineoutStateKey";
  id v1 = +[NSNumber numberWithUnsignedInt:4];
  v15[1] = v1;
  _DWORD v14[2] = @"IAPAudioTransportLineinStateKey";
  BOOL v2 = +[NSNumber numberWithUnsignedInt:4];
  _DWORD v15[2] = v2;
  v14[3] = @"IAPAudioTransportUSBAudioStateKey";
  id v3 = +[ACCPlatformDigitalAudioManager getManager];
  if ([v3 bDigAudIsActive]) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 4;
  }
  id v5 = +[NSNumber numberWithUnsignedInt:v4];
  v15[3] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];

  id v7 = objc_alloc_init((Class)NSMutableArray);
  [v7 addObject:v6];
  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v8 = *(id *)(gLogObjects + 56);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#DigitalAudio] audioDeviceStates: %@", (uint8_t *)&v12, 0xCu);
  }

  id v10 = [v7 copy];
  return v10;
}

uint64_t platform_digitalAudio_setSampleRate(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  else
  {
    uint64_t v4 = *(id *)(gLogObjects + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[#DigitalAudio] newSampleRate: %d", (uint8_t *)v9, 8u);
  }

  id v5 = +[ACCPlatformDigitalAudioManager getManager];
  id v6 = v5;
  if (v5 && [v5 bDigAudIsActive])
  {
    [v6 updateSampleRate:a1];
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_100135244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void platform_oobBtPairing2_startOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412290;
    id v15 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing2 startOOBBTPairing: %@", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v4 = +[OOBBTPairing2Accessory accessoryListLock];
  [v4 lock];
  id v5 = +[OOBBTPairing2Accessory accessoryForUID:v1];
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 waitForBeginPairingTimer];
    dispatch_source_set_timer(v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);

    int v8 = [v6 getPendingComponent];
    id v9 = [v6 getDeviceMacAddress];
    if (v9)
    {
      _sendStartOOBBTPairing(v6, v8, v9);
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        id v10 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v10 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = [v8 componentUID];
        id v13 = [v8 componentID];
        int v14 = 138412802;
        id v15 = v1;
        __int16 v16 = 2112;
        CFStringRef v17 = v12;
        __int16 v18 = 2112;
        uint64_t v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "oobBtPairing2 startOOBBTPairing: %@, could not get device address, unable to start pairing of component %@ (id:%@)", (uint8_t *)&v14, 0x20u);
      }
      _sendStartOOBBTPairing(v6, v8, 0);
      _sendStopOOBBTPairing(v6, v8, 4);
    }
  }
  [v4 unlock];
}

void sub_100135E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_100136338(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void _sendStopOOBBTPairing(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      int v8 = *(id *)(gLogObjects + 400);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v10 = [v5 accessoryUID];
      id v11 = [v7 componentUID];
      int v18 = 138413058;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      CFStringRef v21 = v11;
      __int16 v22 = 1024;
      unsigned int v23 = [v7 status];
      __int16 v24 = 1024;
      int v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "oobBtPairing2: %@, _sendStopOOBBTPairing, component %@ (status %d), status %d", (uint8_t *)&v18, 0x22u);
    }
    int v12 = malloc_type_malloc(0x18uLL, 0x1062040D3637215uLL);
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      *int v12 = 1;
      *(void *)(v13 + 8) = [v7 componentUID];
      *(_DWORD *)(v13 + 16) = a3;
      int v14 = [v5 accessoryUID];
      char v15 = accFeatureHandlers_invokeHandler(v14, 55, v13);

      if ((v15 & 1) == 0) {
        platform_oobBtPairing2_deleteParams((void *)v13);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        __int16 v16 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v16 = &_os_log_default;
        id v17 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        _sendStopOOBBTPairing_cold_1();
      }
    }
  }
}

void platform_oobBtPairing2_accessoryAttached(uint64_t a1, uint64_t a2, void *a3)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v6 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = platform_oobBtPairing_accessoryDictionaryForLogging(a2);
    *(_DWORD *)buf = 138412546;
    uint64_t v43 = a1;
    __int16 v44 = 2112;
    __int16 v45 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "oobBtPairing2 accessoryAttached: %@, accInfoDict=%@", buf, 0x16u);
  }
  id v9 = +[OOBBTPairing2Accessory accessoryListLock];
  [v9 lock];
  id v10 = +[OOBBTPairing2Accessory accessoryForUID:a1];
  if (!v10)
  {
    id v10 = [[OOBBTPairing2Accessory alloc] initWithUID:a1 accInfo:a2];
    +[OOBBTPairing2Accessory addAccessory:v10];
  }
  id v11 = a3;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v12 = [v11 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v38;
    do
    {
      for (int i = 0; i != v13; int i = (char *)i + 1)
      {
        if (*(void *)v38 != v14) {
          objc_enumerationMutation(v11);
        }
        __int16 v16 = [[OOBBTPairing2Component alloc] initWithComponentInfo:*(void *)(*((void *)&v37 + 1) + 8 * i)];
        [(OOBBTPairing2Accessory *)v10 addComponent:v16];
      }
      id v13 = [v11 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }
    while (v13);
  }
  [v9 unlock];
  id v17 = +[ACCOOBBTPairingServer sharedServer];
  [v17 incrementUserCount];
  [v17 accessoryOOBBTPairingAttached:a1 accInfoDict:a2];
  int v18 = [(OOBBTPairing2Accessory *)v10 checkComponentsAlreadyPaired];
  if ([(OOBBTPairing2Accessory *)v10 carPlaySupported])
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      uint64_t v19 = *(id *)(gLogObjects + 400);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v19 = &_os_log_default;
      id v23 = &_os_log_default;
    }
    p_superclass = (__objc2_class **)(_ACCBTConnectionStatusAccessory + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = a1;
      int v25 = "oobBtPairing2 accessoryAttached: %@, CarPlay so SKIP OOB Pairing user notification";
      CFStringRef v26 = v19;
      uint32_t v27 = 12;
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
    }
  }
  else
  {
    if (gLogObjects) {
      BOOL v20 = gNumLogObjects <= 50;
    }
    else {
      BOOL v20 = 1;
    }
    int v21 = !v20;
    if (v18 < 1)
    {
      if (v21)
      {
        uint64_t v19 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v19 = &_os_log_default;
        id v30 = &_os_log_default;
      }
      p_superclass = _ACCBTConnectionStatusAccessory.superclass;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v43 = a1;
        __int16 v44 = 1024;
        LODWORD(v45) = v18;
        int v25 = "oobBtPairing2 accessoryAttached: %@, not CarPlay but all components are already paired, anyNeedPairing=%d";
        CFStringRef v26 = v19;
        uint32_t v27 = 18;
        goto LABEL_49;
      }
    }
    else
    {
      if (v21)
      {
        __int16 v22 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v22 = &_os_log_default;
        id v28 = &_os_log_default;
      }
      p_superclass = (__objc2_class **)(_ACCBTConnectionStatusAccessory + 8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v43 = a1;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "oobBtPairing2 accessoryAttached: %@, not CarPlay so present OOB Pairing user notification", buf, 0xCu);
      }

      uint64_t v19 = +[ACCUserNotificationManager sharedManager];
      CFStringRef v29 = [(OOBBTPairing2Accessory *)v10 userNotification];
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = __platform_oobBtPairing2_accessoryAttached_block_invoke;
      v36[3] = &__block_descriptor_40_e8_v12__0i8l;
      void v36[4] = a1;
      [v19 presentNotification:v29 completionHandler:v36];
    }
  }

  uint64_t v31 = [p_superclass + 79 processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __platform_oobBtPairing2_accessoryAttached_block_invoke_215;
  block[3] = &unk_1002189B8;
  uint64_t v34 = v10;
  uint64_t v35 = a1;
  CFStringRef v32 = v10;
  dispatch_async(v31, block);
}

void __platform_oobBtPairing2_accessoryAttached_block_invoke(uint64_t a1, int a2)
{
  id v3 = *(id *)(a1 + 32);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    id v20 = v3;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "oobBtPairing2: %@, _handleUserResponse response = %d", buf, 0x12u);
  }

  if (a2)
  {
    id v6 = +[OOBBTPairing2Accessory accessoryForUID:v3];
    id v7 = [v6 componentList];
    int v8 = v7;
    if (v6 && v7)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = objc_msgSend(v7, "allValues", 0);
      id v10 = [v9 countByEnumeratingWithState:&v15 objects:buf count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v16;
        do
        {
          for (int i = 0; i != v11; int i = (char *)i + 1)
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            _sendStartOOBBTPairing(v6, v14, 0);
            _sendStopOOBBTPairing(v6, v14, 4);
          }
          id v11 = [v9 countByEnumeratingWithState:&v15 objects:buf count:16];
        }
        while (v11);
      }
    }
  }
  else
  {
    platform_oobBtPairing2_startOobBtPairingHandler(v3);
  }
}

void __platform_oobBtPairing2_accessoryAttached_block_invoke_215(uint64_t a1)
{
  BOOL v2 = &unk_100239000;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v3 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = &_os_log_default;
    id v4 = &_os_log_default;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v5 = *(id **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    long long v38 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "oobBtPairing2 accessoryAttached: %@, Check for already paired components", buf, 0xCu);
  }

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v6 = [*(id *)(a1 + 32) componentList];
  id v7 = [v6 allValues];

  id v8 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v33;
    *(void *)&long long v9 = 134218240;
    long long v30 = v9;
    do
    {
      uint64_t v12 = 0;
      id v31 = v10;
      do
      {
        if (*(void *)v33 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v12);
        if (objc_msgSend(v13, "status", v30) == 3)
        {
          uint64_t v14 = [*(id *)(a1 + 32) accessoryUID];
          long long v15 = [v13 componentUID];
          long long v16 = v14;
          id v17 = v15;
          long long v18 = (id *)v2[49];
          int v19 = gNumLogObjects;
          if (v18 && gNumLogObjects >= 51)
          {
            id v20 = v18[50];
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v30;
              long long v38 = v18;
              __int16 v39 = 1024;
              LODWORD(v40) = v19;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            }
            id v21 = &_os_log_default;
            id v20 = &_os_log_default;
            id v10 = v31;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            long long v38 = v16;
            __int16 v39 = 2112;
            id v40 = v17;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "oobBtPairing2: %@, _handleAlreadyPaired componentUID %@", buf, 0x16u);
          }

          if (v16 && v17)
          {
            uint64_t v22 = v11;
            id v23 = v7;
            __int16 v24 = v2;
            uint64_t v25 = a1;
            CFStringRef v26 = +[OOBBTPairing2Accessory accessoryForUID:v16];
            uint32_t v27 = [v26 componentList];
            id v28 = v27;
            if (v26 && v27)
            {
              CFStringRef v29 = [v27 objectForKey:v17];
              if (v29)
              {
                _sendStartOOBBTPairing(v26, v29, 0);
                _sendStopOOBBTPairing(v26, v29, 3);
              }
            }
            a1 = v25;
            BOOL v2 = v24;
            id v7 = v23;
            uint64_t v11 = v22;
            id v10 = v31;
          }
        }
        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v10);
  }
}

void platform_oobBtPairing2_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing2 accessoryDetached: %@", (uint8_t *)&v6, 0xCu);
  }

  id v4 = +[ACCOOBBTPairingServer sharedServer];
  [v4 accessoryOOBBTPairingDetached:a1];
  [v4 decrementUserCount];
  id v5 = +[OOBBTPairing2Accessory accessoryListLock];
  [v5 lock];
  +[OOBBTPairing2Accessory removeAccessoryForUID:a1];
  [v5 unlock];
}

void platform_oobBtPairing2_accessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v10 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = &_os_log_default;
    id v11 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v17 = 138413058;
    uint64_t v18 = a1;
    __int16 v19 = 2112;
    uint64_t v20 = a2;
    __int16 v21 = 2112;
    uint64_t v22 = a4;
    __int16 v23 = 2112;
    uint64_t v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "oobBtPairing2 accessoryInfo: %@, componentUID %@, pairingDataP192 %@, pairingDataP256 %@", (uint8_t *)&v17, 0x2Au);
  }

  uint64_t v12 = +[OOBBTPairing2Accessory accessoryListLock];
  [v12 lock];
  id v13 = +[OOBBTPairing2Accessory accessoryForUID:a1];
  uint64_t v14 = v13;
  if (v13)
  {
    long long v15 = [v13 componentList];
    long long v16 = [v15 objectForKey:a2];
    if (v16) {
      [v14 startPairing:v16 macAddr:a3 pairingDataP192:a4 pairingDataP256:a5];
    }
  }
  [v12 unlock];
}

void platform_oobBtPairing2_completionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    int v6 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413314;
    uint64_t v34 = a1;
    __int16 v35 = 2112;
    uint64_t v36 = a2;
    __int16 v37 = 1024;
    unsigned int v38 = a3;
    __int16 v39 = 1024;
    int v40 = 2;
    __int16 v41 = 1024;
    int v42 = 4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "oobBtPairing2 completionStatus: %@, componentUID %@, uint64_t result = %d (%d=Success, %d=Cancelled)", buf, 0x28u);
  }

  id v8 = +[OOBBTPairing2Accessory accessoryListLock];
  [v8 lock];
  long long v9 = +[OOBBTPairing2Accessory accessoryForUID:a1];
  id v10 = v9;
  if (v9)
  {
    id v11 = [v9 componentList];
    uint64_t v12 = [v11 objectForKey:a2];
    if (v12)
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        id v13 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v13 = &_os_log_default;
        id v15 = &_os_log_default;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unsigned int v16 = [v12 status];
        unsigned int v17 = [v12 accessoryStatus];
        *(_DWORD *)buf = 138413314;
        uint64_t v34 = a1;
        __int16 v35 = 2112;
        uint64_t v36 = a2;
        __int16 v37 = 1024;
        unsigned int v38 = v16;
        __int16 v39 = 1024;
        int v40 = v17;
        __int16 v41 = 1024;
        int v42 = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "oobBtPairing2 completionStatus: %@, componentUID %@, status %d, accessoryStatus %d->%d", buf, 0x28u);
      }

      [v12 setAccessoryStatus:a3];
      uint64_t v14 = [v12 macAddr];
      if ([v12 accessoryStatus] == 4 || objc_msgSend(v12, "status") >= 2)
      {
        if ([v12 accessoryStatus] == 4)
        {
          if ([v12 status] <= 1) {
            [v10 cancelPairing:v12];
          }
          [v12 setStatus:4];
        }
        uint64_t v18 = +[OOBBTPairing2Accessory processingQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = __platform_oobBtPairing2_completionStatus_block_invoke;
        block[3] = &unk_100215968;
        id v31 = v10;
        id v32 = v12;
        dispatch_async(v18, block);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    __int16 v19 = [v10 getPendingComponent];

    if (v19)
    {
      uint64_t v20 = +[OOBBTPairing2Accessory processingQueue];
      uint64_t v22 = _NSConcreteStackBlock;
      uint64_t v23 = 3221225472;
      uint64_t v24 = __platform_oobBtPairing2_completionStatus_block_invoke_2;
      uint64_t v25 = &unk_10021A138;
      id v26 = v10;
      id v27 = v19;
      uint64_t v28 = a1;
      uint64_t v29 = a2;
      dispatch_async(v20, &v22);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  objc_msgSend(v8, "unlock", v22, v23, v24, v25);
  __int16 v21 = +[ACCOOBBTPairingServer sharedServer];
  [v21 accessoryOOBBTPairingCompletionStatus:a1 oobBtPairingUID:a2 accessoryMacAddr:v14 result:a3 != 2];
}

void __platform_oobBtPairing2_completionStatus_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  BOOL v2 = *(void **)(a1 + 40);
  int v3 = [v2 status];

  _sendStopOOBBTPairing(v1, v2, v3);
}

void __platform_oobBtPairing2_completionStatus_block_invoke_2(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) getDeviceMacAddress];
  if (v2)
  {
    _sendStartOOBBTPairing(*(void **)(a1 + 32), *(void **)(a1 + 40), v2);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      int v3 = *(id *)(gLogObjects + 400);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v3 = &_os_log_default;
      id v4 = &_os_log_default;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "oobBtPairing2 completionStatus: %@, could not get device address, unable to start pairing of %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void _sendStartOOBBTPairing(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5 && v6)
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      uint64_t v8 = *(id *)(gLogObjects + 400);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = [v5 accessoryUID];
      id v11 = [v6 componentUID];
      int v18 = 138413058;
      __int16 v19 = v10;
      __int16 v20 = 2112;
      __int16 v21 = v11;
      __int16 v22 = 1024;
      unsigned int v23 = [v6 status];
      __int16 v24 = 2048;
      id v25 = [v7 length];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "oobBtPairing2: %@, _sendStartOOBBTPairing, component %@ (status %d), deviceMacAddr %lu bytes", (uint8_t *)&v18, 0x26u);
    }
    uint64_t v12 = malloc_type_malloc(0x18uLL, 0x1062040D3637215uLL);
    if (v12)
    {
      id v13 = v12;
      *uint64_t v12 = 0;
      v13[1] = [v6 componentUID];
      _DWORD v13[2] = 0;
      if (v7) {
        _DWORD v13[2] = v7;
      }
      uint64_t v14 = [v5 accessoryUID];
      int v15 = accFeatureHandlers_invokeHandler(v14, 54, (uint64_t)v13);

      if (v15) {
        [v6 setStatus:1];
      }
      else {
        platform_oobBtPairing2_deleteParams(v13);
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        unsigned int v16 = *(id *)(gLogObjects + 400);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v16 = &_os_log_default;
        id v17 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        _sendStopOOBBTPairing_cold_1();
      }
    }
  }
}

void platform_oobBtPairing2_stopOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = *(id *)(gLogObjects + 400);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v20 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing2 stopOOBBTPairing: %@", buf, 0xCu);
  }

  id v4 = +[OOBBTPairing2Accessory accessoryListLock];
  [v4 lock];
  id v5 = +[OOBBTPairing2Accessory accessoryForUID:v1];
  id v6 = v5;
  if (v5)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = objc_msgSend(v5, "componentList", 0);
    uint64_t v8 = [v7 allValues];

    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (int i = 0; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          if ([v13 status] == 1) {
            _sendStopOOBBTPairing(v6, v13, 4);
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v10);
    }
  }
  [v4 unlock];
}

void platform_oobBtPairing2_deleteParams(void *a1)
{
  if (a1)
  {
    if (!*(_DWORD *)a1)
    {
      BOOL v2 = (const void *)a1[2];
      if (v2)
      {
        CFRelease(v2);
        a1[2] = 0;
      }
    }
    id v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

BOOL platform_oobBtPairing2_isSupported(uint64_t a1)
{
  id v1 = +[OOBBTPairing2Accessory accessoryForUID:a1];
  BOOL v2 = v1 != 0;

  return v2;
}

__CFDictionary *platform_oobBtPairing2_createAccInfoMutableDict(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, char a10)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  __int16 v19 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccModel", a1);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccName", a3);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccHwVer", a6);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertData", a8);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertSerial", a9);
    if (a7) {
      CFDictionaryAddValue(v19, @"ACCOOBBTPairingDisplayName", a7);
    }
    char valuePtr = a10;
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCarPlaySupported", v20);
    CFRelease(v20);
    char valuePtr = 1;
    CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairing2Supported", v21);
    CFRelease(v21);
  }
  return v19;
}

__CFDictionary *platform_oobBtPairing2_createBtComponentMutableDict(__int16 a1, const void *a2, const void *a3, const void *a4)
{
  __int16 valuePtr = a1;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoID", v8);
  if (a2) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoUID", a2);
  }
  if (a3) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoName", a3);
  }
  if (a4) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoMacAddr", a4);
  }
  if (v8) {
    CFRelease(v8);
  }
  return Mutable;
}

void platform_oobBTPairing2_incrementUserCount()
{
  id v0 = +[ACCOOBBTPairingServer sharedServer];
  [v0 incrementUserCount];

  id v1 = +[ACCOOBBTPairingServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_1002232F0];
  }
}

void OUTLINED_FUNCTION_2_23(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void iap2_identification_setIdentificationState(uint64_t *a1, int a2)
{
  if (iap2_feature_getFeature((uint64_t)a1, 1u)) {
    *(_DWORD *)iap2_feature_getFeature((uint64_t)a1, 1u) = a2;
  }
  if (a2 == 6)
  {
    if (*a1)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v6 = 0u;
      v5[0] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 8);
      v5[1] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 24);
      _DWORD v5[2] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 16);
      v5[3] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 32);
      v5[4] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 48);
      v5[5] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 40);
      void v5[6] = 0;
      v5[7] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 64);
      acc_endpoint_setAccessoryInfo(*a1, (uint64_t)v5);
    }
  }
  else if ((a2 & 0xFFFFFFFD) == 1)
  {
    acc_endpoint_clearAccessoryInfo(*a1);
  }
  if (gLogObjects && gNumLogObjects >= 26)
  {
    id v4 = *(NSObject **)(gLogObjects + 200);
  }
  else
  {
    id v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5[0]) = 67109120;
    HIDWORD(v5[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Identification state changed: %{coreacc:iAP2Feature_Identification_State_t}d", (uint8_t *)v5, 8u);
  }
  iap2_sessionControl_identificationStateChanged((uint64_t)a1, a2);
}

uint64_t iap2_identification_getState(uint64_t a1)
{
  uint64_t result = iap2_feature_getFeature(a1, 1u);
  if (result) {
    return *(unsigned int *)iap2_feature_getFeature(a1, 1u);
  }
  return result;
}

uint64_t iap2_identification_setIdentificationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (iap2_feature_getFeature(a1, 1u))
    {
      if (*(void *)(iap2_feature_getFeature(a1, 1u) + 8))
      {
        uint64_t Feature = iap2_feature_getFeature(a1, 1u);
        iap2_identification_releaseIdentInfo(*(void *)(Feature + 8));
        if (*(void *)(iap2_feature_getFeature(a1, 1u) + 8))
        {
          uint64_t v6 = iap2_feature_getFeature(a1, 1u);
          free(*(void **)(v6 + 8));
          *(void *)(iap2_feature_getFeature(a1, 1u) + 8) = 0;
        }
      }
      uint64_t v2 = 1;
      *(void *)(iap2_feature_getFeature(a1, 1u) + 8) = a2;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void iap2_identification_releaseIdentInfo(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 26;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    id v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    id v3 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iap2_identification_releaseIdentInfo_cold_1();
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  id v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 8) = 0;
  }
  id v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 24) = 0;
  }
  long long v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 32) = 0;
  }
  long long v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 40) = 0;
  }
  long long v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 48) = 0;
  }
  long long v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 56) = 0;
  }
  long long v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 96) = 0;
  }
  long long v12 = *(const void **)(a1 + 104);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 104) = 0;
  }
  id v13 = *(const void **)(a1 + 112);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 112) = 0;
  }
  long long v14 = *(const void **)(a1 + 64);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 64) = 0;
  }
  CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 72);
  if (v15)
  {
    CFIndex Count = CFDictionaryGetCount(v15);
    uint64_t v17 = __chkstk_darwin(Count);
    __int16 v19 = (const void **)((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v17)
    {
      memset((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v18);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 72), 0, v19);
      if (Count >= 1)
      {
        do
        {
          CFNumberRef v20 = (void **)*((void *)*v19 + 8);
          if (!*v20 || (free(*v20), CFNumberRef v21 = *v19, (v20 = (void **)*((void *)*v19 + 8)) != 0))
          {
            free(v20);
            *((void *)*v19 + 8) = 0;
            CFNumberRef v21 = *v19;
          }
          __int16 v22 = (void *)v21[4];
          if (v22)
          {
            free(v22);
            *((void *)*v19 + 4) = 0;
            CFNumberRef v21 = *v19;
          }
          unsigned int v23 = (const void *)v21[1];
          if (v23)
          {
            CFRelease(v23);
            *((void *)*v19 + 1) = 0;
            CFNumberRef v21 = *v19;
          }
          CFNumberRef v24 = CFNumberCreate(0, kCFNumberShortType, v21);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v24);
          if (v24) {
            CFRelease(v24);
          }
          if (*v19)
          {
            free((void *)*v19);
            *__int16 v19 = 0;
          }
          ++v19;
          --Count;
        }
        while (Count);
      }
    }
    else
    {
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 72), 0, (const void **)((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0)));
    }
    id v25 = *(const void **)(a1 + 72);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 72) = 0;
    }
  }
  id v26 = *(const void **)(a1 + 88);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 88) = 0;
  }
  id v27 = *(void ***)(a1 + 216);
  if (v27)
  {
    if (!*v27 || (free(*v27), (id v27 = *(void ***)(a1 + 216)) != 0))
    {
      free(v27);
      *(void *)(a1 + 216) = 0;
    }
  }
  iap2_identification_releaseRejectMessage((void *)a1);
}

uint64_t iap2_identification_getIdentificationInfo(uint64_t a1)
{
  uint64_t result = iap2_feature_getFeature(a1, 1u);
  if (result) {
    return *(void *)(iap2_feature_getFeature(a1, 1u) + 8);
  }
  return result;
}

uint64_t iap2_identification_checkIdentificationInfoFeatures(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v40 = 0;
  FeatureInfoEntries = iap2_feature_getFeatureInfoEntries((int *)&v40);
  id v4 = &unk_100239000;
  id v5 = &unk_100239000;
  if (FeatureInfoEntries)
  {
    if (v40)
    {
      uint64_t v6 = FeatureInfoEntries;
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        long long v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (*(void *)v9)
        {
          if (*(void *)(*(void *)v9 + 24))
          {
            uint64_t v10 = v4[49];
            int v11 = v5[100];
            if (v10) {
              BOOL v12 = v11 < 26;
            }
            else {
              BOOL v12 = 1;
            }
            if (v12)
            {
              __int16 v19 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                int v43 = v11;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                __int16 v19 = &_os_log_default;
              }
            }
            else
            {
              __int16 v19 = *(NSObject **)(v10 + 200);
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              int v20 = *v6;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)int v42 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Checking identification info for feature: %{coreacc:iAP2Feature_t}d...", buf, 8u);
            }
            int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(**((void **)v6 + 1) + 24))(a1, a2);
            if (v21)
            {
              uint64_t v22 = v4[49];
              unsigned int v23 = v5;
              int v24 = v5[100];
              if (v22 && v24 >= 26)
              {
                id v25 = *(NSObject **)(v22 + 200);
              }
              else
              {
                id v25 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v22;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  id v25 = &_os_log_default;
                }
              }
              id v5 = v23;
              id v4 = (void *)&unk_100239000;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                int v26 = *v6;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)int v42 = v26;
                *(_WORD *)&_OWORD v42[4] = 1024;
                *(_DWORD *)&v42[6] = v21;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Identification info rejected for feature %{coreacc:iAP2Feature_t}d, reject reason: %d", buf, 0xEu);
              }
            }
            uint64_t v8 = v21 | v8;
          }
          else
          {
            int v13 = v9[34];
            uint64_t v14 = v4[49];
            int v15 = v5[100];
            if (v14) {
              BOOL v16 = v15 <= 25;
            }
            else {
              BOOL v16 = 1;
            }
            int v17 = !v16;
            if (v13)
            {
              if (v17)
              {
                size_t v18 = *(NSObject **)(v14 + 200);
              }
              else
              {
                size_t v18 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v14;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v15;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  size_t v18 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                int v28 = *v6;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)int v42 = v28;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "No checkIdentificationInfo function for feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
              }
            }
            else
            {
              if (v17)
              {
                id v27 = *(NSObject **)(v14 + 200);
              }
              else
              {
                id v27 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v14;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v15;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  id v27 = &_os_log_default;
                }
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                int v29 = *v6;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)int v42 = v29;
                _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "No checkIdentificationInfo function for feature: %{coreacc:iAP2Feature_t}d!", buf, 8u);
              }
            }
          }
        }
        ++v7;
        v6 += 4;
      }
      while (v7 < v40);
    }
    else
    {
      uint64_t v8 = 0;
    }
    CFSetRef v31 = *(const __CFSet **)(a2 + 112);
    if (v31) {
      CFIndex Count = CFSetGetCount(v31);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t v33 = v4[49];
    if (v33) {
      BOOL v34 = v5[100] < 26;
    }
    else {
      BOOL v34 = 1;
    }
    if (v34)
    {
      __int16 v35 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      __int16 v35 = *(NSObject **)(v33 + 200);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)int v42 = Count;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Identified for %lu feature(s)!", buf, 0xCu);
    }
    if (v8)
    {
      if (gLogObjects && (int)v5[100] >= 26)
      {
        uint64_t v36 = *(NSObject **)(gLogObjects + 200);
      }
      else
      {
        uint64_t v36 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v42 = v8;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "IdentificationInfo needs to be rejected. Status : %d", buf, 8u);
      }
    }
  }
  else
  {
    if (gLogObjects) {
      BOOL v30 = gNumLogObjects < 26;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30)
    {
      __int16 v37 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      __int16 v37 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkIdentificationInfoFeatures_cold_1();
    }
    return 0;
  }
  return v8;
}

const char *iap2_identification_rejectName(unsigned int a1)
{
  if (a1 > 0x10) {
    return "def";
  }
  else {
    return off_10021A3C8[a1];
  }
}

const char *iap2_identification_paramName(int a1)
{
  uint64_t result = "AccName";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "AccModel";
      break;
    case 2:
      uint64_t result = "AccManufacturer";
      break;
    case 3:
      uint64_t result = "AccSerialNumber";
      break;
    case 4:
      uint64_t result = "AccFirmwareVersion";
      break;
    case 5:
      uint64_t result = "AccHardwareVersion";
      break;
    case 6:
      uint64_t result = "MessagesSentByAccessory";
      break;
    case 7:
      uint64_t result = "MessagesRcvdFromDevice";
      break;
    case 8:
      uint64_t result = "PowerSourceType";
      break;
    case 9:
      uint64_t result = "MaximumCurrentDrawnFromDevice";
      break;
    case 10:
      uint64_t result = "SupportedEAProtocol";
      break;
    case 11:
      uint64_t result = "PreferredAppBundleSeedID";
      break;
    case 12:
      uint64_t result = "CurrentLanguage";
      break;
    case 13:
      uint64_t result = "SupportedLanguage";
      break;
    case 14:
      uint64_t result = "SerialTransportComponent";
      break;
    case 15:
      uint64_t result = "USBDeviceTransportComponent";
      break;
    case 16:
      uint64_t result = "USBHostTransportComponent";
      break;
    case 17:
      uint64_t result = "BluetoothTransportComponent";
      break;
    case 18:
      uint64_t result = "iAPHIDComponent";
      break;
    case 19:
      uint64_t result = "Reserved";
      break;
    case 20:
      uint64_t result = "VehicleInfo";
      break;
    case 21:
      uint64_t result = "VehicleStatus";
      break;
    case 22:
      uint64_t result = "LocationInfo";
      break;
    case 23:
      uint64_t result = "USBHostHIDComponent";
      break;
    case 24:
      uint64_t result = "WirelessCarPlayTransportComponent";
      break;
    case 25:
      uint64_t result = "MaximumSiphoningCurrent";
      break;
    case 26:
      uint64_t result = "BluetoothLETransportComponent";
      break;
    case 27:
      uint64_t result = "MaximumPOIDataFormatVersion";
      break;
    case 28:
    case 30:
    case 31:
    case 33:
    case 35:
    case 36:
    case 37:
      goto LABEL_6;
    case 29:
      uint64_t result = "NativeBTHIDComponent";
      break;
    case 32:
      uint64_t result = "ElectricVehicleChargingComponent";
      break;
    case 34:
      uint64_t result = "PPID";
      break;
    case 38:
      uint64_t result = "VehicleDigitalCarKeyInfo";
      break;
    default:
      if (a1 == 240)
      {
        uint64_t result = "MaximumCurrentDrawnInUHPM";
      }
      else if (a1 == 241)
      {
        uint64_t result = "PowerDuringSleep";
      }
      else
      {
LABEL_6:
        uint64_t result = "Unknown";
      }
      break;
  }
  return result;
}

void _addRejectParam(uint64_t a1, int a2, unsigned int a3)
{
  if (a1)
  {
    iAP2MsgAddVoidParam(*(void *)(a1 + 136), 0, a2);
    uint64_t v6 = iap2_identification_paramName(a2);
    unint64_t v7 = iap2_identification_rejectName(a3);
    CFStringRef v8 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"iapreject:  Param: %s Reason: %s\n", v6, v7);
    CFStringAppend(*(CFMutableStringRef *)(a1 + 192), v8);
    if (v8)
    {
      CFRelease(v8);
    }
  }
  else
  {
    if (gLogObjects) {
      BOOL v9 = gNumLogObjects < 26;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v10 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _addRejectParam_cold_1();
    }
  }
}

void iap2_identification_addRejectParam(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);

  _addRejectParam(IdentificationInfo, a2, a3);
}

void _addRejectGroup(uint64_t a1, int a2, int a3, unsigned int a4)
{
  if (a3 < 0) {
    uint64_t v7 = 0xFFFFLL;
  }
  else {
    uint64_t v7 = (unsigned __int16)a3;
  }
  iAP2MsgAddVoidParam(*(void *)(a1 + 136), 0, a2);
  CFStringRef v8 = iap2_identification_paramName(a2);
  BOOL v9 = iap2_identification_rejectName(a4);
  CFStringRef v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"iapreject:  Param: %s ID: 0x%04x Reason: %s\n", v8, v7, v9);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 192), v10);
  if (v10)
  {
    CFRelease(v10);
  }
}

void iap2_identification_addRejectGroup(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);

  _addRejectGroup(IdentificationInfo, a2, a3, a4);
}

uint64_t iap2_identification_createRejectMessage(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  *(void *)(a1 + 136) = malloc_type_calloc(1uLL, 0x48uLL, 0x109004066C3AFE2uLL);
  BOOL v2 = malloc_type_malloc(0xFFFFuLL, 0xEC6EB505uLL);
  *(void *)(a1 + 144) = v2;
  iAP2MsgInit(*(void *)(a1 + 136), 7427, (uint64_t)v2, 0xFFFF, (uint64_t)_iap2_identification_cleanupRejectMsg, 0);
  *(void *)(a1 + 152) = CFDataCreateMutable(kCFAllocatorDefault, 0);
  *(void *)(a1 + 160) = CFDataCreateMutable(kCFAllocatorDefault, 0);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = CFSetCreateMutable(kCFAllocatorDefault, 0, 0);
  *(void *)(a1 + 184) = CFSetCreateMutable(kCFAllocatorDefault, 0, 0);
  *(void *)(a1 + 120) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  *(void *)(a1 + 192) = CFStringCreateMutable(kCFAllocatorDefault, 0);
  *(void *)(a1 + 200) = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  *(void *)(a1 + 208) = Mutable;
  if (!*(void *)(a1 + 136)
    || !*(void *)(a1 + 144)
    || !*(void *)(a1 + 152)
    || !*(void *)(a1 + 160)
    || !*(void *)(a1 + 176)
    || !*(void *)(a1 + 184)
    || !*(void *)(a1 + 120))
  {
    return 12;
  }
  CFMutableStringRef v4 = Mutable;
  uint64_t result = 12;
  if (*(void *)(a1 + 200) && v4)
  {
    uint64_t v6 = *(__CFString **)(a1 + 192);
    if (v6)
    {
      CFStringAppend(v6, @"iapreject: Identification Rejected Details:\n");
      CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 200), 0, @"iapreject:  Param: %s", "MessagesSentByAccessory");
      CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 208), 0, @"iapreject:  Param: %s", "MessagesRcvdFromDevice");
      return 0;
    }
    return 12;
  }
  return result;
}

void _iap2_identification_cleanupRejectMsg(void *a1, int a2)
{
  if (a2)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 26;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      CFMutableStringRef v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFMutableStringRef v4 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
        int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      }
      else
      {
        int MsgID = 0;
        int MsgLen = 0;
      }
      int v8 = 136316418;
      BOOL v9 = "_iap2_identification_cleanupRejectMsg";
      __int16 v10 = 1024;
      int v11 = 3067;
      __int16 v12 = 1024;
      int v13 = 1;
      __int16 v14 = 1024;
      int v15 = MsgID;
      __int16 v16 = 1024;
      int v17 = MsgLen;
      __int16 v18 = 2080;
      label = dispatch_queue_get_label(0);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s:%d iAP2 IdentificationReject MSG Cleanup callback deleting msg! needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s", (uint8_t *)&v8, 0x2Eu);
    }
    if (a1)
    {
      uint64_t v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }
}

void iap2_identification_appendRejectMsgID(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (a3 == 1)
  {
    uint64_t v7 = *(__CFData **)(a1 + 160);
    int v8 = *(__CFString **)(a1 + 208);
    *(unsigned char *)(a1 + 169) = 1;
  }
  else
  {
    if (a3) {
      return;
    }
    uint64_t v7 = *(__CFData **)(a1 + 152);
    int v8 = *(__CFString **)(a1 + 200);
    *(unsigned char *)(a1 + 168) = 1;
  }
  if (a2 == 255)
  {
    CFStringAppendFormat(v8, 0, @" Parameter Parse Error");
  }
  else
  {
    if (a4 == 1)
    {
      *(_WORD *)UInt8 bytes = __rev16(a2);
      CFDataAppendBytes(v7, bytes, 2);
    }
    BOOL v9 = iap2_identification_rejectName(a4);
    CFStringAppendFormat(v8, 0, @" [msgID: 0x%04x Reason: %s]", a2, v9);
  }
}

void iap2_identification_addMsgListParamWithDirection(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    if (!*(unsigned char *)(a1 + 169) || !*(_DWORD *)(**(void **)(a1 + 216) + 28)) {
      return;
    }
    uint64_t v7 = *(void *)(a1 + 136);
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 160));
    unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 160));
    iAP2MsgAddDataParam(v7, 0, 7, BytePtr, Length);
    uint64_t v6 = (CFMutableStringRef *)(a1 + 208);
  }
  else
  {
    if (a2 || !*(unsigned char *)(a1 + 168) || !*(_DWORD *)(**(void **)(a1 + 216) + 24)) {
      return;
    }
    uint64_t v3 = *(void *)(a1 + 136);
    CFMutableStringRef v4 = CFDataGetBytePtr(*(CFDataRef *)(a1 + 152));
    unsigned __int16 v5 = CFDataGetLength(*(CFDataRef *)(a1 + 152));
    iAP2MsgAddDataParam(v3, 0, 6, v4, v5);
    uint64_t v6 = (CFMutableStringRef *)(a1 + 200);
  }
  CFStringAppend(*v6, @"\n");
  CFStringRef v10 = *v6;
  int v11 = *(__CFString **)(a1 + 192);

  CFStringAppend(v11, v10);
}

void iap2_identification_rejectMsgID(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  uint64_t v8 = IdentificationInfo;
  if (a3 == 1)
  {
    BOOL v9 = (CFMutableSetRef *)(IdentificationInfo + 184);
    goto LABEL_5;
  }
  if (!a3)
  {
    BOOL v9 = (CFMutableSetRef *)(IdentificationInfo + 176);
LABEL_5:
    CFSetAddValue(*v9, (const void *)a2);
    iap2_identification_appendRejectMsgID(v8, a2, a3, a4);
    return;
  }
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 26;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    int v11 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Incorrect message direction : %d", (uint8_t *)v12, 8u);
  }
}

void iap2_identification_acceptMsgID(uint64_t a1, void *value, int a3)
{
  if (a3 == 1)
  {
    CFMutableStringRef v4 = *(__CFSet **)(a1 + 184);
    goto LABEL_5;
  }
  if (!a3)
  {
    CFMutableStringRef v4 = *(__CFSet **)(a1 + 176);
LABEL_5:
    CFSetAddValue(v4, (const void *)value);
    return;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 26;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Incorrect message direction : %d", (uint8_t *)v7, 8u);
  }
}

BOOL iap2_identification_processStringParam(uint64_t a1, unsigned __int16 *a2, CFStringRef *a3)
{
  BOOL v14 = 0;
  int ParamID = iAP2MsgGetParamID((uint64_t)a2);
  CFStringRef v7 = iAP2MsgCopyDataAsCFString(a2, &v14);
  if (!a3 || v14)
  {
    if (v7) {
      CFRelease(v7);
    }
    _addRejectParam(a1, ParamID, 8u);
    if (!a3)
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        BOOL v9 = *(NSObject **)(gLogObjects + 200);
      }
      else
      {
        BOOL v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        iap2_identification_processStringParam_cold_1();
      }
    }
    BOOL v8 = v14;
    if (v14)
    {
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 26)
      {
        __int16 v12 = *(NSObject **)(gLogObjects + 200);
      }
      else
      {
        __int16 v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v16 = v10;
          __int16 v17 = 1024;
          int v18 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          BOOL v8 = v14;
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v16) = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "iAP2MsgCopyDataAsCFString returned status: %08x", buf, 8u);
        return v14;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
    *a3 = v7;
  }
  return v8;
}

uint64_t iap2_identification_processMessagesSet(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4)
{
  if (!a1) {
    return 1;
  }
  char v4 = a4;
  if (a3)
  {
    if (a4) {
      int v14 = 6;
    }
    else {
      int v14 = 7;
    }
    _addRejectParam(a1, v14, 7u);
    return 22;
  }
  else
  {
    unsigned int v8 = a3 >> 1;
    CFMutableStringRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, a3 >> 1, 0);
    if (a3 >= 2)
    {
      if (v8 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v8;
      }
      do
      {
        unsigned int v11 = *a2++;
        CFSetAddValue(Mutable, (const void *)(bswap32(v11) >> 16));
        --v10;
      }
      while (v10);
    }
    if (v4)
    {
      __int16 v12 = *(const void **)(a1 + 96);
      if (v12) {
        CFRelease(v12);
      }
      uint64_t result = 0;
      *(void *)(a1 + 96) = Mutable;
    }
    else
    {
      int v15 = *(const void **)(a1 + 104);
      if (v15) {
        CFRelease(v15);
      }
      uint64_t result = 0;
      *(void *)(a1 + 104) = Mutable;
    }
  }
  return result;
}

uint64_t cbIdentificationInfoSerialTransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v15 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  unsigned int v7 = ParamID;
  if (ParamID == 2)
  {
    if (iAP2MsgIsDataVoid(a3))
    {
      *(unsigned char *)(a4 + 16) = 1;
    }
    else
    {
      *(unsigned char *)(a4 + 16) = -1;
      int v15 = 1;
    }
  }
  else if (ParamID == 1)
  {
    CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v15);
    CFStringRef v10 = v9;
    if (v15)
    {
      if (v9) {
        CFRelease(v9);
      }
    }
    else
    {
      __int16 v12 = *(const void **)(a4 + 8);
      if (v12) {
        CFRelease(v12);
      }
      *(void *)(a4 + 8) = v10;
    }
  }
  else if (ParamID)
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      unsigned int v11 = *(NSObject **)(gLogObjects + 200);
    }
    else
    {
      unsigned int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo SerialTransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
    }
  }
  else
  {
    __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v15);
    if (!v15) {
      *(_WORD *)a4 = DataAsU16;
    }
  }
  uint64_t v13 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v13 + 8) > v7) {
    ++*(_DWORD *)(*(void *)v13 + 4 * v7);
  }
  return v15;
}

uint64_t cbIdentificationInfoUSBDeviceTransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v15 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v15);
      if (!v15) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v15);
      if (v15)
      {
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        *(void *)(a4 + 8) = v9;
      }
      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 16) = -1;
        goto LABEL_27;
      }
      *(unsigned char *)(a4 + 16) = 1;
      break;
    case 3u:
      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(a3, &v15);
      if (v15) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = DataAsU8 > 8;
      }
      if (!v11) {
        *(_DWORD *)(a4 + 48) |= 1 << DataAsU8;
      }
      break;
    case 4u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 55) = 1;
      }
      else
      {
        *(unsigned char *)(a4 + 55) = 0;
LABEL_27:
        int v15 = 1;
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        __int16 v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        __int16 v12 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v17 = ParamID;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo USBDeviceTransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
      }
      break;
  }
  uint64_t v13 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v13 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v13 + 4 * ParamID);
  }
  return v15;
}

uint64_t cbIdentificationInfoUSBHostTransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v14 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v14);
      if (!v14) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v14);
      if (v14)
      {
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        *(void *)(a4 + 8) = v9;
      }
      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 16) = -1;
        goto LABEL_27;
      }
      *(unsigned char *)(a4 + 16) = 1;
      break;
    case 3u:
      char DataAsU8 = iAP2MsgGetDataAsU8(a3, &v14);
      if (v14)
      {
        *(unsigned char *)(a4 + 53) = 0;
      }
      else
      {
        *(unsigned char *)(a4 + 53) = 1;
        *(unsigned char *)(a4 + 54) = DataAsU8;
      }
      break;
    case 4u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 55) = 0;
        goto LABEL_27;
      }
      *(unsigned char *)(a4 + 55) = 1;
      break;
    case 5u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 56) = 1;
      }
      else
      {
        *(unsigned char *)(a4 + 56) = 0;
LABEL_27:
        int v14 = 1;
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        BOOL v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        BOOL v11 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v16 = ParamID;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo USBHostTransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
      }
      break;
  }
  uint64_t v12 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v12 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v12 + 4 * ParamID);
  }
  return v14;
}

uint64_t cbIdentificationInfoBluetoothTransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v17 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v17);
      if (!v17) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v17);
      if (v17)
      {
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        *(void *)(a4 + 8) = v9;
      }
      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 16) = -1;
        goto LABEL_23;
      }
      *(unsigned char *)(a4 + 16) = 1;
      break;
    case 3u:
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v17);
      if (!v17)
      {
        uint64_t v11 = DataAsData;
        char ParamValueLen = iAP2MsgGetParamValueLen(a3);
        if (v11 && ParamValueLen == 6)
        {
          int v13 = *(_DWORD *)v11;
          *(_WORD *)(a4 + 28) = *(_WORD *)(v11 + 4);
          *(_DWORD *)(a4 + 24) = v13;
        }
        else
        {
LABEL_23:
          int v17 = 1;
        }
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        int v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        int v14 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v19 = ParamID;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo BluetoothTransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
      }
      break;
  }
  uint64_t v15 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v15 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v15 + 4 * ParamID);
  }
  return v17;
}

uint64_t cbIdentificationInfoWirelessCarPlayTransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v13 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v13);
      if (!v13) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v8 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v13);
      if (v13)
      {
        if (v8) {
          CFRelease(v8);
        }
      }
      else
      {
        *(void *)(a4 + 8) = v8;
      }
      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 16) = -1;
        goto LABEL_25;
      }
      *(unsigned char *)(a4 + 16) = 1;
      break;
    case 4u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 55) = 0;
        goto LABEL_25;
      }
      *(unsigned char *)(a4 + 55) = 1;
      break;
    case 5u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 56) = 1;
      }
      else
      {
        *(unsigned char *)(a4 + 56) = 0;
LABEL_25:
        int v13 = 1;
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v9 = gNumLogObjects < 26;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        CFStringRef v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        CFStringRef v10 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v15 = ParamID;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo WirelessCarPlayTransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
      }
      break;
  }
  uint64_t v11 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v11 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v11 + 4 * ParamID);
  }
  return v13;
}

uint64_t cbIdentificationInfoBluetoothLETransportComponentParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v22 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v22);
      if (!v22) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v22);
      if (v22)
      {
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        *(void *)(a4 + 8) = v9;
      }
      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(unsigned char *)(a4 + 16) = -1;
        goto LABEL_26;
      }
      *(unsigned char *)(a4 + 16) = 1;
      break;
    case 3u:
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v22);
      if (!v22)
      {
        uint64_t v11 = DataAsData;
        char ParamValueLen = iAP2MsgGetParamValueLen(a3);
        if (!v11 || ParamValueLen != 6) {
          goto LABEL_26;
        }
        int v13 = *(_DWORD *)v11;
        *(_WORD *)(a4 + 28) = *(_WORD *)(v11 + 4);
        *(_DWORD *)(a4 + 24) = v13;
      }
      break;
    case 4u:
      uint64_t v14 = iAP2MsgGetDataAsData((uint64_t)a3, &v22);
      if (!v22)
      {
        unsigned int v15 = (const void *)v14;
        if (v14)
        {
          unsigned __int8 v16 = iAP2MsgGetParamValueLen(a3);
          *(unsigned char *)(a4 + 40) = v16;
          size_t v17 = v16;
          int v18 = malloc_type_calloc(v16, 1uLL, 0x100004077774924uLL);
          *(void *)(a4 + 32) = v18;
          memcpy(v18, v15, v17);
        }
        else
        {
LABEL_26:
          int v22 = 1;
        }
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        unsigned int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        unsigned int v19 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v24 = ParamID;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "iAP2MsgIdentificationInfo BluetoothLETransportComponent unhandled sub-paramID:%04X\n", buf, 8u);
      }
      break;
  }
  uint64_t v20 = *(void *)(a4 + 64);
  if (*(_DWORD *)(v20 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v20 + 4 * ParamID);
  }
  return v22;
}

uint64_t iap2_identification_addTransportComponent(uint64_t a1, uint64_t a2, void *valuePtr)
{
  uint64_t v3 = valuePtr[8];
  unsigned int v4 = *(_DWORD *)(v3 + 8);
  if (!v4) {
    return 2;
  }
  BOOL v5 = *(unsigned int **)v3;
  unsigned int v6 = *v5;
  if (v4 == 1 || v6 == 0) {
    return 2;
  }
  unsigned int v8 = v5[1];
  if (!v8) {
    return 2;
  }
  BOOL v9 = v6 <= 1 && v8 == 1;
  if (!v9 || v4 >= 3 && v5[2] > 1) {
    return 5;
  }
  switch(*((_DWORD *)valuePtr + 5))
  {
    case 0:
      if ((*(_DWORD *)(**(void **)a1 + 8) | 2) == 3) {
        goto LABEL_24;
      }
      goto LABEL_26;
    case 1:
      if (!*(_DWORD *)(*(void *)a1 + 24)) {
        goto LABEL_24;
      }
      goto LABEL_26;
    case 2:
      if (*(_DWORD *)(*(void *)a1 + 24) != 8) {
        goto LABEL_26;
      }
LABEL_24:
      if (v4 < 3 || !v5[2]) {
        return 2;
      }
LABEL_26:
      if (!valuePtr[1]) {
        return 8;
      }
      if (*((unsigned __int8 *)valuePtr + 16) == 255) {
        return 10;
      }
      if (!*(void *)(a2 + 72)) {
        *(void *)(a2 + 72) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, 0);
      }
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberShortType, valuePtr);
      CFDictionaryRef v15 = *(const __CFDictionary **)(a2 + 72);
      if (v15 && v14)
      {
        if (CFDictionaryContainsKey(v15, v14))
        {
          uint64_t v10 = 3;
        }
        else
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 72), v14, valuePtr);
          uint64_t v10 = 0;
        }
      }
      else
      {
        uint64_t v10 = 17;
        if (!v14) {
          return v10;
        }
      }
      CFRelease(v14);
      break;
    case 3:
    case 5:
      if (v4 < 4) {
        return 2;
      }
      unsigned int v13 = v5[3];
      if (!v13) {
        return 2;
      }
      if (v13 != 1) {
        return 5;
      }
      goto LABEL_26;
    default:
      goto LABEL_26;
  }
  return v10;
}

uint64_t iap2_identification_parseTransportComponent(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4, int a5, uint64_t (*a6)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))
{
  int ParamID = iAP2MsgGetParamID((uint64_t)a4);
  unsigned int v13 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x48uLL, 0x1070040248D27DFuLL);
  *((_DWORD *)v13 + 5) = a5;
  *((void *)v13 + 8) = iap2_messageParameterUtility_initWithMaxParamCount(6u);
  uint64_t v14 = iAP2MsgForEachParamDo(a3, a4, a6, (uint64_t)v13);
  if (v14)
  {
    uint64_t v15 = v14;
    int v16 = *v13;
    uint64_t v17 = (uint64_t)a2;
    int v18 = ParamID;
    unsigned int v19 = 10;
    goto LABEL_14;
  }
  if (*((unsigned char *)v13 + 55))
  {
    a2[128] = 1;
    int v20 = *((_DWORD *)v13 + 5);
    if ((v20 - 1) >= 2)
    {
      if (v20 == 4) {
        a2[129] = 1;
      }
    }
    else
    {
      a2[130] = 1;
    }
    a2[131] = *((unsigned char *)v13 + 56);
  }
  else if (*((_DWORD *)v13 + 5) == 2 && *((unsigned char *)v13 + 53))
  {
    a2[128] = 1;
    a2[130] = 1;
  }
  uint64_t v15 = iap2_identification_addTransportComponent(a1, (uint64_t)a2, v13);
  if (v15)
  {
    int v16 = *v13;
    uint64_t v17 = (uint64_t)a2;
    int v18 = ParamID;
    unsigned int v19 = v15;
LABEL_14:
    _addRejectGroup(v17, v18, v16, v19);
    int v21 = (void **)*((void *)v13 + 8);
    if (v21 && *v21) {
      free(*v21);
    }
    int v22 = (const void *)*((void *)v13 + 1);
    if (v22)
    {
      CFRelease(v22);
      *((void *)v13 + 1) = 0;
    }
    unsigned int v23 = (void *)*((void *)v13 + 8);
    if (v23) {
      free(v23);
    }
    free(v13);
  }
  return v15;
}

_DWORD *iap2_messageParameterUtility_initWithMaxParamCount(unsigned int a1)
{
  BOOL v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  uint64_t v3 = malloc_type_malloc(4 * a1, 0x100004052888210uLL);
  *(void *)BOOL v2 = v3;
  if (v3)
  {
    v2[2] = a1;
    bzero(v3, 4 * a1);
  }
  else
  {
    v2[2] = 0;
  }
  return v2;
}

uint64_t iap2_identification_cbIdentificationInfoParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 1;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  int ParamID = (void *)iAP2MsgGetParamID(a3);
  if (gLogObjects && gNumLogObjects >= 26)
  {
    BOOL v9 = *(NSObject **)(gLogObjects + 200);
  }
  else
  {
    BOOL v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v28 = 67109120;
    int v29 = (int)ParamID;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Checking identification info group for paramID: %u...", (uint8_t *)&v28, 8u);
  }
  ParamHandler = (uint64_t (*)(uint64_t, uint64_t, uint64_t))iap2_identification_getParamHandler(ParamID);
  if (ParamHandler)
  {
    if (ParamHandler(a4, a1, a3))
    {
      int v28 = (int)ParamID;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &v28);
      CFArrayRef v12 = (const __CFArray *)_giAP2RequiredIdentificationParams;
      v32.unsigned int length = CFArrayGetCount((CFArrayRef)_giAP2RequiredIdentificationParams);
      v32.location = 0;
      if (CFArrayContainsValue(v12, v32, v11))
      {
        uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a4);
        if (!IdentificationInfo)
        {
          char v25 = 0;
          if (!v11) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        CFSetAddValue(*(CFMutableSetRef *)(IdentificationInfo + 120), v11);
        if (gLogObjects && gNumLogObjects >= 26)
        {
          uint64_t v14 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          uint64_t v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          iap2_identification_cbIdentificationInfoParams_cold_4((uint64_t)&v28, v14, v19, v20, v21, v22, v23, v24);
        }
      }
      char v25 = 1;
      if (!v11)
      {
LABEL_40:
        if ((v25 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 26)
          {
            int v26 = *(NSObject **)(gLogObjects + 200);
          }
          else
          {
            int v26 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            iap2_identification_cbIdentificationInfoParams_cold_2();
          }
        }
        return 0;
      }
LABEL_39:
      CFRelease(v11);
      goto LABEL_40;
    }
    if (gLogObjects && gNumLogObjects >= 26)
    {
      int v16 = *(NSObject **)(gLogObjects + 200);
    }
    else
    {
      int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      iap2_identification_cbIdentificationInfoParams_cold_6();
    }
    return 1;
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      uint64_t v15 = *(NSObject **)(gLogObjects + 200);
    }
    else
    {
      uint64_t v15 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int MsgID = iAP2MsgGetMsgID(a1);
      int v28 = 67109376;
      int v29 = (int)ParamID;
      __int16 v30 = 1024;
      int v31 = MsgID;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unknown Param ID: %d for Msg ID: 0x%04X", (uint8_t *)&v28, 0xEu);
    }
    uint64_t v18 = iap2_identification_getIdentificationInfo(a4);
    uint64_t v4 = 1;
    _addRejectParam(v18, (int)ParamID, 1u);
  }
  return v4;
}

void *iap2_identification_getParamHandler(void *key)
{
  value = 0;
  if (_giAP2IdentificationParamHandlers)
  {
    int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)_giAP2IdentificationParamHandlers, (const void *)key, (const void **)&value);
    if (!value && ValueIfPresent != 0)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 26;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        iap2_identification_getParamHandler_cold_1();
      }
    }
  }
  return value;
}

void *iap2_identification_createIdentificationInfo()
{
  id v0 = malloc_type_calloc(1uLL, 0xE0uLL, 0x1070040727D3701uLL);
  if (v0) {
    v0[27] = iap2_messageParameterUtility_initWithMaxParamCount(0xF3u);
  }
  return v0;
}

void iap2_identification_releaseRejectMessage(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 26;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_releaseRejectMessage_cold_1();
  }
  uint64_t v4 = (void *)a1[17];
  if (v4)
  {
    free(v4);
    a1[17] = 0;
  }
  BOOL v5 = (void *)a1[18];
  if (v5)
  {
    free(v5);
    a1[18] = 0;
  }
  unsigned int v6 = (const void *)a1[19];
  if (v6)
  {
    CFRelease(v6);
    a1[19] = 0;
  }
  unsigned int v7 = (const void *)a1[20];
  if (v7)
  {
    CFRelease(v7);
    a1[20] = 0;
  }
  unsigned int v8 = (const void *)a1[22];
  if (v8)
  {
    CFRelease(v8);
    a1[22] = 0;
  }
  BOOL v9 = (const void *)a1[23];
  if (v9)
  {
    CFRelease(v9);
    a1[23] = 0;
  }
  uint64_t v10 = (const void *)a1[24];
  if (v10)
  {
    CFRelease(v10);
    a1[24] = 0;
  }
  CFNumberRef v11 = (const void *)a1[25];
  if (v11)
  {
    CFRelease(v11);
    a1[25] = 0;
  }
  CFArrayRef v12 = (const void *)a1[26];
  if (v12)
  {
    CFRelease(v12);
    a1[26] = 0;
  }
  unsigned int v13 = (const void *)a1[15];
  if (v13)
  {
    CFRelease(v13);
    a1[15] = 0;
  }
}

BOOL iap2_identification_cbIdentificationInfoUpdateParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4)
{
  BOOL v21 = 0;
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0:
      DataAsString = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[1] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
      }
      break;
    case 1:
      CFArrayRef v12 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[2] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v12, 0x8000100u);
      }
      break;
    case 2:
      BOOL v9 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[3] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v9, 0x8000100u);
      }
      break;
    case 3:
      uint64_t v10 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[4] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v10, 0x8000100u);
      }
      break;
    case 4:
      CFNumberRef v11 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[5] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v11, 0x8000100u);
      }
      break;
    case 5:
      unsigned int v13 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[6] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x8000100u);
      }
      break;
    case 6:
      if (gLogObjects) {
        BOOL v14 = gNumLogObjects < 26;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        uint64_t v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v19 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        int v23 = 6;
        int v16 = "language updates no longer supported, paramID:%04X";
        uint64_t v17 = v19;
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        goto LABEL_32;
      }
      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        uint64_t v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v15 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v23 = ParamID;
        int v16 = "iAP2MsgIdentificationInfoUpdate unhandled paramID:%04X\n";
        uint64_t v17 = v15;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, 8u);
      }
      break;
  }
  return v21;
}

uint64_t iap2_identification_updateIdentificationInfo(uint64_t *a1, void *a2)
{
  if (a1)
  {
    if (*a1)
    {
      if (a2)
      {
        if (a1[1])
        {
          uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo((uint64_t)a1);
          if (IdentificationInfo)
          {
            BOOL v5 = (void *)IdentificationInfo;
            uint64_t v25 = 0;
            long long v24 = 0u;
            long long v23 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            long long v15 = 0u;
            long long v16 = 0u;
            unsigned int v6 = *(const void **)(IdentificationInfo + 8);
            if (a2[1])
            {
              if (v6)
              {
                CFRelease(v6);
                v5[1] = 0;
              }
              unsigned int v6 = (const void *)a2[1];
              v5[1] = v6;
            }
            BOOL v14 = v6;
            unsigned int v7 = (const void *)v5[2];
            if (a2[2])
            {
              if (v7)
              {
                CFRelease(v7);
                _DWORD v5[2] = 0;
              }
              unsigned int v7 = (const void *)a2[2];
              _DWORD v5[2] = v7;
            }
            *((void *)&v15 + 1) = v7;
            BOOL v8 = (const void *)v5[3];
            if (a2[3])
            {
              if (v8)
              {
                CFRelease(v8);
                v5[3] = 0;
              }
              BOOL v8 = (const void *)a2[3];
              v5[3] = v8;
            }
            *(void *)&long long v15 = v8;
            BOOL v9 = (const void *)v5[4];
            if (a2[4])
            {
              if (v9)
              {
                CFRelease(v9);
                v5[4] = 0;
              }
              BOOL v9 = (const void *)a2[4];
              v5[4] = v9;
            }
            *(void *)&long long v16 = v9;
            uint64_t v10 = (const void *)v5[5];
            if (a2[5])
            {
              if (v10)
              {
                CFRelease(v10);
                v5[5] = 0;
              }
              uint64_t v10 = (const void *)a2[5];
              v5[5] = v10;
            }
            *(void *)&long long v17 = v10;
            CFNumberRef v11 = (const void *)v5[6];
            if (a2[6])
            {
              if (v11)
              {
                CFRelease(v11);
                void v5[6] = 0;
              }
              CFNumberRef v11 = (const void *)a2[6];
              void v5[6] = v11;
            }
            *((void *)&v16 + 1) = v11;
            CFArrayRef v12 = (const void *)v5[8];
            if (a2[8])
            {
              if (v12)
              {
                CFRelease(v12);
                void v5[8] = 0;
              }
              CFArrayRef v12 = (const void *)a2[8];
              void v5[8] = v12;
            }
            *(void *)&long long v18 = v12;
            acc_endpoint_setAccessoryInfo(*a1, (uint64_t)&v14);
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

BOOL iap2_identification_identificationInfoUpdateHandler(uint64_t *a1, uint64_t a2)
{
  if (iap2_identification_getState((uint64_t)a1) == 6)
  {
    uint64_t IdentificationInfo = iap2_identification_createIdentificationInfo();
    if (IdentificationInfo)
    {
      int v5 = iAP2MsgForEachParamDo(a2, 0, (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))iap2_identification_cbIdentificationInfoUpdateParams, (uint64_t)IdentificationInfo);
      if (v5)
      {
        int v6 = v5;
        if (gLogObjects && gNumLogObjects >= 26)
        {
          unsigned int v7 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          unsigned int v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109120;
          v12[1] = v6;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IdentificationInfoUpdate message processing error: %d\n", (uint8_t *)v12, 8u);
        }
      }
      else
      {
        iap2_identification_updateIdentificationInfo(a1, IdentificationInfo);
        int v6 = -1;
      }
    }
    else
    {
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        BOOL v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        BOOL v9 = *(NSObject **)(gLogObjects + 200);
      }
      int v6 = 0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "iAP2MsgIdentificationInfoUpdate: IdentificationInfo invalid\n", (uint8_t *)v12, 2u);
        int v6 = 0;
      }
    }
    uint64_t v10 = (void **)IdentificationInfo[27];
    if (v10)
    {
      if (!*v10 || (free(*v10), (uint64_t v10 = (void **)IdentificationInfo[27]) != 0)) {
        free(v10);
      }
    }
    free(IdentificationInfo);
  }
  else
  {
    int v6 = 0;
  }
  return v6 == 0;
}

BOOL iap2_identification_cancelIdentificationHandler(uint64_t *a1)
{
  if (a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 26;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v3 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Identification cancelled by accessory!", buf, 2u);
    }
    if ((iap2_identification_getState((uint64_t)a1) & 0xFFFFFFFD) == 1)
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        uint64_t v4 = *(NSObject **)(gLogObjects + 200);
      }
      else
      {
        uint64_t v4 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Displaying accessory not supported dialog...", v10, 2u);
      }
      iap2_identification_setIdentificationState(a1, 4);
      AccessoryNotSupportedCF = (void *)acc_userNotifications_createAccessoryNotSupportedCF();
      CFStringRef Identifier = acc_userNotifications_createIdentifier(@"identification", a1[1]);
      ACCUNSetIdentifier(AccessoryNotSupportedCF, (uint64_t)Identifier);
      if (Identifier) {
        CFRelease(Identifier);
      }
      uint64_t ParentConnection = acc_endpoint_getParentConnection(*a1);
      uint64_t v8 = acc_endpoint_getParentConnection(ParentConnection);
      ACCUNSetGroupIdentifier(AccessoryNotSupportedCF, v8);
      ACCUNManagerPresentNotification(AccessoryNotSupportedCF, 0);
      if (AccessoryNotSupportedCF) {
        CFRelease(AccessoryNotSupportedCF);
      }
    }
  }
  return a1 != 0;
}

int *iap2_identification_handleIdentificationRejected(int *result)
{
  if (result)
  {
    id v1 = result;
    unsigned __int8 v11 = 0;
    uint64_t result = iap2_feature_getFeatureInfoEntries((int *)&v11);
    if (result)
    {
      unsigned int v2 = v11;
      if (v11)
      {
        unint64_t v3 = 0;
        uint64_t v4 = (uint64_t **)(result + 2);
        do
        {
          uint64_t v5 = **v4;
          if (v5 && *(void *)(v5 + 32))
          {
            uint64_t v6 = gLogObjects;
            int v7 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v8 = gNumLogObjects < 26;
            }
            else {
              BOOL v8 = 1;
            }
            if (v8)
            {
              BOOL v9 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v13 = v6;
                __int16 v14 = 1024;
                int v15 = v7;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                BOOL v9 = &_os_log_default;
              }
            }
            else
            {
              BOOL v9 = *(NSObject **)(gLogObjects + 200);
            }
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              int v10 = *((_DWORD *)v4 - 2);
              *(_DWORD *)buf = 67109120;
              LODWORD(v13) = v10;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Clearing feature data for feature: %{coreacc:iAP2Feature_t}d...", buf, 8u);
            }
            uint64_t result = (int *)(*(uint64_t (**)(int *))(**v4 + 32))(v1);
            unsigned int v2 = v11;
          }
          ++v3;
          v4 += 2;
        }
        while (v3 < v2);
      }
    }
  }
  return result;
}

uint64_t iap2_identification_identificationRejected(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v5 = (uint64_t *)(a2 + 136);
    if (*(void *)(a2 + 136))
    {
      if (gLogObjects) {
        BOOL v6 = gNumLogObjects < 26;
      }
      else {
        BOOL v6 = 1;
      }
      if (v6)
      {
        int v7 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        int v7 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a2 + 192), 0x8000100u);
        int v11 = 136315138;
        CFArrayRef v12 = CStringPtr;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s\n", (uint8_t *)&v11, 0xCu);
      }
      if (!iap2_sessionControl_sendOutgoingMessage(a1, *v5))
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          int v10 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          int v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        uint64_t v2 = 1;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 67109120;
          LODWORD(v12) = 1;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "IdentificationRejected processing error : %d\n", (uint8_t *)&v11, 8u);
        }
        goto LABEL_16;
      }
      uint64_t *v5 = 0;
      *(void *)(a2 + 144) = 0;
    }
    iap2_identification_setIdentificationState(a1, 3);
    uint64_t v2 = 0;
LABEL_16:
    iap2_identification_handleIdentificationRejected((int *)a1);
  }
  return v2;
}

uint64_t iap2_identification_checkIdentificationMsgIDs(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  CFSetRef v9 = *(const __CFSet **)(IdentificationInfo + 96);
  CFSetRef v10 = *(const __CFSet **)(IdentificationInfo + 104);
  char v20 = 0;
  int v11 = iap2_identification_checkRequiredMsgIDs(a1, a2, a3, &v20);
  char v12 = v20;
  if (!v20)
  {
    uint64_t result = 0;
    if (!a4) {
      return result;
    }
    goto LABEL_18;
  }
  int v19 = v11;
  if (a3)
  {
    uint64_t v13 = a3;
    __int16 v14 = (unsigned char *)(a2 + 8);
    do
    {
      uint64_t v15 = *((unsigned __int16 *)v14 - 4);
      int v16 = *((_DWORD *)v14 - 1);
      if (v16 == 1)
      {
        if (!v10) {
          goto LABEL_11;
        }
        CFSetRef v17 = v10;
      }
      else
      {
        if (!v9) {
          goto LABEL_11;
        }
        CFSetRef v17 = v9;
      }
      if (!CFSetContainsValue(v17, (const void *)*((unsigned __int16 *)v14 - 4)))
      {
LABEL_11:
        if (*v14) {
          iap2_identification_rejectMsgID(a1, v15, v16, 2u);
        }
        goto LABEL_13;
      }
      iap2_identification_acceptMsgID(IdentificationInfo, (void *)v15, v16);
LABEL_13:
      v14 += 12;
      --v13;
    }
    while (v13);
  }
  if (v19) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 2;
  }
  if (a4) {
LABEL_18:
  }
    *a4 = v12;
  return result;
}

uint64_t iap2_identification_checkRequiredMsgIDs(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  LODWORD(v5) = a3;
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  char v8 = 0;
  if (v5)
  {
    CFSetRef v9 = *(const __CFSet **)(IdentificationInfo + 96);
    CFSetRef v10 = *(const __CFSet **)(IdentificationInfo + 104);
    int v11 = (unsigned __int8 *)(a2 + 8);
    LODWORD(a2) = 1;
    uint64_t v5 = v5;
    while (1)
    {
      if (*((_DWORD *)v11 - 1) == 1)
      {
        CFSetRef v12 = v10;
        if (v10) {
          goto LABEL_7;
        }
      }
      else
      {
        CFSetRef v12 = v9;
        if (v9)
        {
LABEL_7:
          BOOL v13 = CFSetContainsValue(v12, (const void *)*((unsigned __int16 *)v11 - 4)) != 0;
          goto LABEL_8;
        }
      }
      BOOL v13 = 0;
LABEL_8:
      int v14 = *v11;
      v11 += 12;
      v8 |= v13;
      if (!v14) {
        BOOL v13 = 1;
      }
      a2 = a2 & v13;
      if (!--v5) {
        goto LABEL_13;
      }
    }
  }
  a2 = 1;
LABEL_13:
  *a4 = v8 & 1;
  return a2;
}

void iap2_identification_rejectAllMsgIDsForList(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  if (a3)
  {
    CFSetRef v9 = *(const __CFSet **)(IdentificationInfo + 96);
    CFSetRef v10 = *(const __CFSet **)(IdentificationInfo + 104);
    uint64_t v11 = a3;
    CFSetRef v12 = (int *)(a2 + 4);
    do
    {
      uint64_t v13 = *((unsigned __int16 *)v12 - 2);
      int v14 = *v12;
      if (*v12 == 1) {
        CFSetRef v15 = v10;
      }
      else {
        CFSetRef v15 = v9;
      }
      if (CFSetContainsValue(v15, (const void *)*((unsigned __int16 *)v12 - 2))) {
        iap2_identification_rejectMsgID(a1, v13, v14, a4);
      }
      v12 += 3;
      --v11;
    }
    while (v11);
  }
}

uint64_t iap2_identification_checkMsgIDList(uint64_t a1, CFSetRef *a2)
{
  uint64_t v2 = 1;
  if (!a1 || !a2) {
    return v2;
  }
  CFSetRef v5 = a2[12];
  if (v5)
  {
    int64_t Count = CFSetGetCount(v5);
    int v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x10040436913F5uLL);
    CFSetGetValues(a2[12], v7);
    if (Count < 1)
    {
      uint64_t v9 = 0;
      uint64_t v2 = 0;
      if (!v7) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        if (!CFSetContainsValue(a2[22], v7[v8]))
        {
          uint64_t v9 = 1;
          iap2_identification_rejectMsgID(a1, LOWORD(v7[v8]), 0, 1u);
        }
        uint64_t v8 = v10;
        BOOL v11 = Count <= v10++;
      }
      while (!v11);
    }
    free(v7);
    uint64_t v2 = v9;
  }
  else
  {
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 26;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      CFSetRef v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      CFSetRef v12 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkMsgIDList_cold_3();
    }
    uint64_t v2 = 0;
  }
LABEL_23:
  CFSetRef v13 = a2[13];
  if (v13)
  {
    int64_t v14 = CFSetGetCount(v13);
    CFSetRef v15 = (const void **)malloc_type_calloc(v14, 8uLL, 0x10040436913F5uLL);
    CFSetGetValues(a2[13], v15);
    if (v14 >= 1)
    {
      uint64_t v16 = 0;
      unsigned int v17 = 1;
      do
      {
        if (!CFSetContainsValue(a2[23], v15[v16]))
        {
          uint64_t v2 = 1;
          iap2_identification_rejectMsgID(a1, LOWORD(v15[v16]), 1, 1u);
        }
        uint64_t v16 = v17;
        BOOL v11 = v14 <= v17++;
      }
      while (!v11);
      goto LABEL_35;
    }
    if (v15) {
LABEL_35:
    }
      free(v15);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      long long v18 = *(NSObject **)(gLogObjects + 200);
    }
    else
    {
      long long v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkMsgIDList_cold_1();
    }
  }
  return v2;
}

BOOL iap2_identification_checkRequiredTransportComponentParam(uint64_t *a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 1;
  }
  BOOL result = 1;
  if (a2)
  {
    uint64_t v6 = *a1;
    if (v6)
    {
      BOOL result = 0;
      switch(a3)
      {
        case 14:
          if (*(_DWORD *)(v6 + 24) != 6) {
            goto LABEL_32;
          }
          int v7 = *(_DWORD **)(a2 + 216);
          if (v7[2] >= 0xFu)
          {
            if (*(_DWORD *)(*(void *)v7 + 56)) {
              goto LABEL_32;
            }
          }
          goto LABEL_27;
        case 15:
          if (!*(_DWORD *)(v6 + 24))
          {
            uint64_t v8 = *(_DWORD **)(a2 + 216);
            if (v8[2] < 0x10u || !*(_DWORD *)(*(void *)v8 + 60)) {
              goto LABEL_27;
            }
          }
          goto LABEL_32;
        case 16:
          if (*(_DWORD *)(v6 + 24) == 8)
          {
            uint64_t v9 = *(_DWORD **)(a2 + 216);
            if (v9[2] < 0x11u || !*(_DWORD *)(*(void *)v9 + 64)) {
              goto LABEL_27;
            }
          }
          goto LABEL_32;
        case 17:
          if ((*(_DWORD *)(v6 + 24) & 0xFFFFFFFE) == 2)
          {
            unsigned int v10 = *(_DWORD **)(a2 + 216);
            if (v10[2] < 0x12u || !*(_DWORD *)(*(void *)v10 + 68)) {
              goto LABEL_27;
            }
          }
          goto LABEL_32;
        case 24:
          if (*(_DWORD *)(v6 + 24) != 4) {
            goto LABEL_32;
          }
          CFSetRef v12 = *(_DWORD **)(a2 + 216);
          if (v12[2] > 0x18u)
          {
            if (*(_DWORD *)(*(void *)v12 + 96)) {
              goto LABEL_32;
            }
          }
LABEL_27:
          _addRejectParam(a2, a3, 2u);
          BOOL result = 1;
          *(unsigned char *)(a2 + 132) = 1;
          break;
        case 26:
          return result;
        default:
          if (gLogObjects && gNumLogObjects >= 26)
          {
            BOOL v11 = *(NSObject **)(gLogObjects + 200);
          }
          else
          {
            BOOL v11 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          iap2_identification_checkRequiredTransportComponentParam_cold_1();
LABEL_32:
          BOOL result = 0;
          break;
      }
    }
  }
  return result;
}

uint64_t iap2_identification_checkIdentificationInfoForRequiredTransportParam(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 1;
  if (a1)
  {
    if (a2)
    {
      BOOL v5 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 14);
      int v6 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 15) || v5;
      BOOL v7 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 16);
      int v8 = v6 | v7 | iap2_identification_checkRequiredTransportComponentParam(a1, a2, 17);
      return v8 | iap2_identification_checkRequiredTransportComponentParam(a1, a2, 24) | (*a1 == 0);
    }
  }
  return result;
}

uint64_t iap2_identification_checkIdentificationInfo(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t IdentificationInfo = (CFSetRef *)iap2_identification_getIdentificationInfo(a1);
  int v3 = iap2_identification_checkIdentificationInfoFeatures(a1, (uint64_t)IdentificationInfo);
  uint64_t v4 = iap2_identification_checkMsgIDList(a1, IdentificationInfo) | v3;
  if (v4)
  {
    iap2_identification_addMsgListParamWithDirection((uint64_t)IdentificationInfo, 0);
    iap2_identification_addMsgListParamWithDirection((uint64_t)IdentificationInfo, 1);
  }
  return v4;
}

uint64_t iap2_identification_checkIdentificationInfoAll(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return 1;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 1u);
  if (Feature)
  {
    uint64_t v4 = Feature;
    BOOL v5 = *(__CFSet **)(*(void *)(Feature + 8) + 112);
    if (v5) {
      CFSetRemoveAllValues(v5);
    }
    else {
      *(void *)(*(void *)(v4 + 8) + 112) = CFSetCreateMutable(kCFAllocatorDefault, 0, 0);
    }
  }

  return iap2_identification_checkIdentificationInfo(a1);
}

void _CFSetValidateRequiredIdentificationParamsApplierFunction(const __CFNumber *a1, uint64_t a2)
{
  if (a2)
  {
    int valuePtr = 0;
    CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    if (!CFSetContainsValue(*(CFSetRef *)(a2 + 120), a1))
    {
      _addRejectParam(a2, valuePtr, 2u);
      *(unsigned char *)(a2 + 132) = 1;
    }
  }
}

BOOL iap2_identification_identificationInfoHandler(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1)
  {
    if ((iap2_identification_getState((uint64_t)a1) & 0xFFFFFFFD) == 1)
    {
      uint64_t IdentificationInfo = iap2_identification_createIdentificationInfo();
      if (IdentificationInfo)
      {
        uint64_t v5 = (uint64_t)IdentificationInfo;
        if (iap2_identification_setIdentificationInfo((uint64_t)a1, (uint64_t)IdentificationInfo))
        {
          int RejectMessage = iap2_identification_createRejectMessage(v5);
          if (!RejectMessage)
          {
            int v7 = iAP2MsgForEachParamDo(a2, 0, (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))iap2_identification_cbIdentificationInfoParams, (uint64_t)a1);
            if (v7)
            {
              int RejectMessage = v7;
              if (gLogObjects && gNumLogObjects >= 26)
              {
                int v8 = *(NSObject **)(gLogObjects + 200);
              }
              else
              {
                int v8 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
                iap2_identification_identificationInfoHandler_cold_5();
              }
            }
            else
            {
              CFArrayRef v13 = (const __CFArray *)_giAP2RequiredIdentificationParams;
              v24.unsigned int length = CFArrayGetCount((CFArrayRef)_giAP2RequiredIdentificationParams);
              v24.location = 0;
              CFArrayApplyFunction(v13, v24, (CFArrayApplierFunction)_CFSetValidateRequiredIdentificationParamsApplierFunction, (void *)v5);
              int v14 = iap2_identification_checkIdentificationInfoForRequiredTransportParam(a1, v5);
              if (*(unsigned char *)(v5 + 132))
              {
                int RejectMessage = -1;
              }
              else
              {
                if (!v14)
                {
                  if (gLogObjects && gNumLogObjects >= 26)
                  {
                    long long v18 = *(NSObject **)(gLogObjects + 200);
                  }
                  else
                  {
                    long long v18 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "IdentificationInfo params processed, checking identification info...", buf, 2u);
                  }
                  int RejectMessage = iap2_identification_checkIdentificationInfoAll((uint64_t)a1, v5);
                  uint64_t v16 = *(const void **)(v5 + 8);
                  v19[0] = _NSConcreteStackBlock;
                  v19[1] = 0x40000000;
                  v19[2] = __iap2_identification_identificationInfoHandler_block_invoke_76;
                  v19[3] = &__block_descriptor_tmp_77;
                  int v20 = RejectMessage;
                  v19[4] = a1;
                  v19[5] = v5;
                  unsigned int v17 = v19;
                  goto LABEL_49;
                }
                int RejectMessage = 1;
              }
            }
          }
          if (gLogObjects && gNumLogObjects >= 26)
          {
            CFSetRef v15 = *(NSObject **)(gLogObjects + 200);
          }
          else
          {
            CFSetRef v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v23 = RejectMessage;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "IdentificationInfo rejected. Error: %d", buf, 8u);
          }
          uint64_t v16 = *(const void **)(v5 + 8);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 0x40000000;
          _DWORD v21[2] = __iap2_identification_identificationInfoHandler_block_invoke;
          v21[3] = &__block_descriptor_tmp_18;
          v21[4] = a1;
          v21[5] = v5;
          unsigned int v17 = v21;
LABEL_49:
          iap2_sessionControl_authorizationHook_identification((unsigned int *)a1, v16, (uint64_t)v17);
          return RejectMessage == 0;
        }
        if (gLogObjects && gNumLogObjects >= 26)
        {
          BOOL v11 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          BOOL v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          iap2_identification_identificationInfoHandler_cold_7();
        }
        free((void *)v5);
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          unsigned int v10 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          unsigned int v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          _addRejectParam_cold_1();
        }
      }
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        uint64_t v9 = *(NSObject **)(gLogObjects + 200);
      }
      else
      {
        uint64_t v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "After accessory has already completed Identify process once, any subsequent IdentificationInfo is ignored.", buf, 2u);
      }
    }
  }
  int RejectMessage = -1;
  return RejectMessage == 0;
}

uint64_t __iap2_identification_identificationInfoHandler_block_invoke(uint64_t result, int a2)
{
  if (a2) {
    return iap2_identification_identificationRejected(*(uint64_t **)(result + 32), *(void *)(result + 40));
  }
  return result;
}

void __iap2_identification_identificationInfoHandler_block_invoke_76(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 26;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        uint64_t v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v5 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 48);
        int v8 = 67109120;
        int v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IdentificationInfo rejected. Error: %d", (uint8_t *)&v8, 8u);
      }
      iap2_identification_identificationRejected(*(uint64_t **)(a1 + 32), *(void *)(a1 + 40));
    }
    else
    {
      iap2_identification_setIdentificationState(*(uint64_t **)(a1 + 32), 2);
      uint64_t v4 = *(uint64_t **)(a1 + 32);
      iAP2MsgInit((uint64_t)(v4 + 15), 7426, v4[24], 0xFFFF, 0, 0);
      if (iap2_sessionControl_sendOutgoingMessage(v4, (uint64_t)(v4 + 15)))
      {
        iap2_identification_setIdentificationState(v4, 6);
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          int v7 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          int v7 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 67109120;
          int v9 = 1;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IdentificationAccepted processing error : %d\n", (uint8_t *)&v8, 8u);
        }
      }
      if (iap2_identification_isIdentifiedForCarPlay((uint64_t)v4)
        && *(double *)(iap2_feature_getFeature((uint64_t)v4, 0) + 88) != 0.0)
      {
        iAP2_carPlaySendAllConnectionEvents((uint64_t)v4);
      }
      iap2_identification_releaseRejectMessage(*(void **)(a1 + 40));
    }
  }
}

uint64_t iap2_identification_isIdentifiedForIncomingMessageID(uint64_t result, int a2)
{
  if (!result) {
    return result;
  }
  BOOL v3 = (unsigned int *)result;
  uint64_t result = 1;
  if (a2 <= 7424)
  {
    if (a2 > 5) {
      goto LABEL_17;
    }
    int v4 = 1 << a2;
    goto LABEL_8;
  }
  if (a2 <= 43520)
  {
    if ((a2 - 7425) > 5) {
      goto LABEL_17;
    }
    int v4 = 1 << (a2 - 1);
LABEL_8:
    if ((v4 & 0x31) != 0) {
      return result;
    }
    goto LABEL_17;
  }
  if (a2 == 43521 || a2 == 43523) {
    return result;
  }
  if (a2 == 43526)
  {
    uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    if (*(void *)(result + 96) && iap2_identification_getState((uint64_t)v3) == 6)
    {
      uint64_t result = *(void *)(v5 + 96);
      uint64_t v6 = 43526;
      return CFSetContainsValue((CFSetRef)result, (const void *)v6) != 0;
    }
    return 0;
  }
LABEL_17:
  uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (iap2_accAuthentication_getState(v3) != 2
    || iap2_identification_getState((uint64_t)v3) != 6)
  {
    return 0;
  }
  uint64_t result = *(void *)(v7 + 96);
  if (result)
  {
    uint64_t v6 = a2;
    return CFSetContainsValue((CFSetRef)result, (const void *)v6) != 0;
  }
  return result;
}

BOOL iap2_identification_isIdentificationAccepted(uint64_t a1)
{
  return iap2_identification_getState(a1) == 6;
}

uint64_t iap2_identification_isIdentifiedForOutgoingMessageID(uint64_t result, unsigned int a2)
{
  if (result)
  {
    BOOL v3 = (unsigned int *)result;
    uint64_t result = 1;
    if ((a2 - 43520 > 5 || ((1 << a2) & 0x35) == 0)
      && (a2 > 5 || ((1 << a2) & 0x31) == 0)
      && (a2 - 7424 > 3 || a2 == 7425))
    {
      uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
      if (result)
      {
        uint64_t v4 = result;
        if (iap2_accAuthentication_getState(v3) == 2
          && iap2_identification_getState((uint64_t)v3) == 6)
        {
          uint64_t result = *(void *)(v4 + 104);
          if (result)
          {
            uint64_t result = CFSetContainsValue((CFSetRef)result, (const void *)a2);
            if (result)
            {
              kdebug_trace();
              return 1;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

CFSetRef iap2_identification_isIdentifiedForFeature(const __CFSet *result, unsigned int a2)
{
  if (result)
  {
    uint64_t result = (const __CFSet *)iap2_feature_getFeature((uint64_t)result, 1u);
    if (result)
    {
      if (*(_DWORD *)result == 6 && (uint64_t v3 = *((void *)result + 1)) != 0)
      {
        uint64_t result = *(const __CFSet **)(v3 + 112);
        if (result) {
          return (const __CFSet *)(CFSetContainsValue(result, (const void *)a2) != 0);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t iap2_identification_isIdentifiedForCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 128) != 0;
  }
  return result;
}

uint64_t iap2_identification_isIdentifiedForWirelessCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 129) != 0;
  }
  return result;
}

uint64_t iap2_identification_isIdentifiedForUSBCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 130) != 0;
  }
  return result;
}

uint64_t iap2_identification_isIdentifiedForThemeAssets(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 131) != 0;
  }
  return result;
}

void iap2_identification_setIdentifiedForFeature(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 1u);
    if (Feature)
    {
      uint64_t v4 = *(void *)(Feature + 8);
      if (v4)
      {
        uint64_t v5 = *(__CFSet **)(v4 + 112);
        if (v5)
        {
          CFSetAddValue(v5, (const void *)a2);
          if (gLogObjects && gNumLogObjects >= 26)
          {
            uint64_t v6 = *(NSObject **)(gLogObjects + 200);
          }
          else
          {
            uint64_t v6 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            v7[0] = 67109120;
            v7[1] = a2;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Identified for feature: %{coreacc:iAP2Feature_t}d!", (uint8_t *)v7, 8u);
          }
        }
      }
    }
  }
}

uint64_t iap2_identification_transportComponents(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_identification_getIdentificationInfo(result);
    if (result) {
      return *(void *)(result + 72);
    }
  }
  return result;
}

void *iap2_identification_getTransportComponent(void *result, int a2)
{
  if (!result) {
    return result;
  }
  uint64_t result = (void *)iap2_feature_getFeature((uint64_t)result, 1u);
  if (!result) {
    return result;
  }
  uint64_t v3 = result[1];
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(v3 + 72);
  if (!v4) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 72));
  uint64_t v6 = __chkstk_darwin();
  int v8 = (const void **)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v6)
  {
    CFDictionaryGetKeysAndValues(v4, 0, (const void **)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0)));
    return 0;
  }
  memset((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v7);
  CFDictionaryGetKeysAndValues(v4, 0, v8);
  if (Count < 1) {
    return 0;
  }
  while (1)
  {
    uint64_t result = *v8;
    if (*v8)
    {
      if (*((_DWORD *)result + 5) == a2) {
        break;
      }
    }
    ++v8;
    if (!--Count) {
      return 0;
    }
  }
  return result;
}

CFDataRef iap2_identification_copyMacAddressForComponentID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  if (!IdentificationInfo) {
    return 0;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(IdentificationInfo + 72);
  if (!v4) {
    return 0;
  }
  size_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(IdentificationInfo + 72));
  if (!Count) {
    return 0;
  }
  uint64_t v6 = Count;
  size_t v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
  if (!v7) {
    return 0;
  }
  int v8 = v7;
  CFDictionaryGetKeysAndValues(v4, 0, v7);
  if (v6 < 1)
  {
LABEL_26:
    CFDataRef v17 = 0;
    goto LABEL_35;
  }
  uint64_t v9 = v8;
  while (1)
  {
    unsigned int v10 = (unsigned __int16 *)*v9;
    if (!*v9)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects < 26;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        uint64_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v21 = v13;
          __int16 v22 = 1024;
          int v23 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v16 = &_os_log_default;
        }
      }
      else
      {
        uint64_t v16 = *(NSObject **)(gLogObjects + 200);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "transportComponent is NULL!", buf, 2u);
      }
      goto LABEL_25;
    }
    if (*v10 == a2)
    {
      int v11 = *((_DWORD *)v10 + 5);
      if (v11 == 5 || v11 == 3) {
        break;
      }
    }
LABEL_25:
    ++v9;
    if (!--v6) {
      goto LABEL_26;
    }
  }
  CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v10 + 24, 6);
  if (gLogObjects && gNumLogObjects >= 26)
  {
    long long v18 = *(NSObject **)(gLogObjects + 200);
  }
  else
  {
    long long v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_copyMacAddressForComponentID_cold_1(v10, (uint64_t)v17, v18);
  }
LABEL_35:
  free(v8);
  return v17;
}

uint64_t iap2_identification_setParamHandler(void *key, void *value)
{
  unsigned int v3 = key;
  uint64_t result = _giAP2IdentificationParamHandlers;
  if (_giAP2IdentificationParamHandlers) {
    goto LABEL_12;
  }
  _giAP2IdentificationParamHandlers = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  if (!gLogObjects || gNumLogObjects < 26)
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_setParamHandler_cold_3();
  }
  uint64_t result = _giAP2IdentificationParamHandlers;
  if (_giAP2IdentificationParamHandlers)
  {
LABEL_12:
    CFDictionarySetValue((CFMutableDictionaryRef)result, (const void *)v3, value);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 26;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      int v8 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_identification_setParamHandler_cold_1();
    }
    return 1;
  }
  return result;
}

uint64_t iap2_identification_setRequiredIdentificationParam(int a1)
{
  int valuePtr = a1;
  if (!_giAP2RequiredIdentificationParams)
  {
    _giAP2RequiredIdentificationParams = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 243, &kCFTypeArrayCallBacks);
    if (!gLogObjects || gNumLogObjects < 26)
    {
      uint64_t v2 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v2 = *(NSObject **)(gLogObjects + 200);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_identification_setRequiredIdentificationParam_cold_3();
    }
    if (!_giAP2RequiredIdentificationParams) {
      return 0;
    }
  }
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue((CFMutableArrayRef)_giAP2RequiredIdentificationParams, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 200);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_setRequiredIdentificationParam_cold_1((uint64_t)&valuePtr, v5, v6, v7, v8, v9, v10, v11);
  }
  return 1;
}

_DWORD *_createFeature_21(_DWORD *result)
{
  if (result)
  {
    uint64_t result = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if (result) {
      const char *result = 0;
    }
  }
  return result;
}

uint64_t _destroyFeature_21(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      iap2_identification_releaseIdentInfo(*(void *)(v2 + 8));
      CFNumberRef v3 = *(void **)(v2 + 8);
      if (v3)
      {
        free(v3);
        *(void *)(v2 + 8) = 0;
      }
      if (*v1)
      {
        free(*v1);
        *uint64_t v1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _startFeatureFromDevice_12(uint64_t *a1)
{
  kdebug_trace();
  if (iap2_identification_getState((uint64_t)a1)) {
    return 0;
  }
  iAP2MsgInit((uint64_t)(a1 + 15), 7424, a1[24], 0xFFFF, 0, 0);
  if (iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15)))
  {
    uint64_t v2 = 1;
    iap2_identification_setIdentificationState(a1, 1);
    return v2;
  }
  if (gLogObjects && gNumLogObjects >= 26)
  {
    CFNumberRef v3 = *(NSObject **)(gLogObjects + 200);
  }
  else
  {
    CFNumberRef v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t v2 = 0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "StartIdentification processing error!", v5, 2u);
    return 0;
  }
  return v2;
}

BOOL _parseIdentificationParams_3(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v36 = 0;
  if (a1 && (uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1)) != 0)
  {
    uint64_t v7 = IdentificationInfo;
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    switch(ParamID)
    {
      case 0u:
        uint64_t v10 = (CFStringRef *)(v7 + 8);
        uint64_t v9 = *(const void **)(v7 + 8);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 1u:
        uint64_t v10 = (CFStringRef *)(v7 + 16);
        uint64_t v9 = *(const void **)(v7 + 16);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 2u:
        uint64_t v10 = (CFStringRef *)(v7 + 24);
        uint64_t v9 = *(const void **)(v7 + 24);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 3u:
        uint64_t v10 = (CFStringRef *)(v7 + 32);
        uint64_t v9 = *(const void **)(v7 + 32);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 4u:
        uint64_t v10 = (CFStringRef *)(v7 + 40);
        uint64_t v9 = *(const void **)(v7 + 40);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 5u:
        uint64_t v10 = (CFStringRef *)(v7 + 48);
        uint64_t v9 = *(const void **)(v7 + 48);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 6u:
        uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v36);
        if (v36)
        {
          uint64_t v13 = *(__CFString **)(v7 + 200);
          *(unsigned char *)(v7 + 168) = 1;
          CFStringAppendFormat(v13, 0, @" [msgID: 0x%04x Reason: %s]", 0xFFFFLL, "ParamParseError");
          uint64_t v14 = v7;
          int v15 = 0;
          goto LABEL_21;
        }
        int v29 = (unsigned __int16 *)DataAsData;
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(a3);
        uint64_t v31 = v7;
        CFRange v32 = v29;
        int v33 = 1;
        goto LABEL_51;
      case 7u:
        uint64_t v16 = iAP2MsgGetDataAsData((uint64_t)a3, &v36);
        if (v36)
        {
          CFDataRef v17 = *(__CFString **)(v7 + 208);
          *(unsigned char *)(v7 + 169) = 1;
          CFStringAppendFormat(v17, 0, @" [msgID: 0x%04x Reason: %s]", 0xFFFFLL, "ParamParseError");
          uint64_t v14 = v7;
          int v15 = 1;
LABEL_21:
          iap2_identification_addMsgListParamWithDirection(v14, v15);
        }
        else
        {
          BOOL v34 = (unsigned __int16 *)v16;
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(a3);
          uint64_t v31 = v7;
          CFRange v32 = v34;
          int v33 = 0;
LABEL_51:
          int v11 = iap2_identification_processMessagesSet(v31, v32, ParamValueLen, v33);
LABEL_37:
          BOOL v36 = v11;
        }
LABEL_38:
        uint64_t v27 = *(void *)(v7 + 216);
        if (*(_DWORD *)(v27 + 8) > ParamID) {
          ++*(_DWORD *)(*(void *)v27 + 4 * ParamID);
        }
        break;
      case 0xCu:
        uint64_t v10 = (CFStringRef *)(v7 + 80);
        uint64_t v9 = *(const void **)(v7 + 80);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 0xDu:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        BOOL v36 = iap2_identification_processStringParam(v7, a3, (CFStringRef *)buf);
        if (v36)
        {
          _addRejectParam(v7, 13, 8u);
        }
        else
        {
          CFSetRef Mutable = *(const __CFSet **)(v7 + 88);
          if (!Mutable)
          {
            CFSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1, &kCFTypeSetCallBacks);
            *(void *)(v7 + 88) = Mutable;
          }
          if (CFSetContainsValue(Mutable, *(const void **)buf))
          {
            _addRejectParam(v7, 13, 4u);
            BOOL v36 = 1;
          }
          else
          {
            CFSetAddValue(*(CFMutableSetRef *)(v7 + 88), *(const void **)buf);
          }
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
        }
        goto LABEL_38;
      case 0xEu:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoSerialTransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 0;
        goto LABEL_36;
      case 0xFu:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoUSBDeviceTransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 1;
        goto LABEL_36;
      case 0x10u:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoUSBHostTransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 2;
        goto LABEL_36;
      case 0x11u:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoBluetoothTransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 3;
        goto LABEL_36;
      case 0x13u:
        uint64_t v25 = v7;
        int v26 = 19;
        goto LABEL_48;
      case 0x18u:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoWirelessCarPlayTransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 4;
        goto LABEL_36;
      case 0x1Au:
        int v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoBluetoothLETransportComponentParams;
        uint64_t v20 = a1;
        uint64_t v21 = (unsigned char *)v7;
        uint64_t v22 = a2;
        int v23 = a3;
        int v24 = 5;
LABEL_36:
        int v11 = iap2_identification_parseTransportComponent(v20, v21, v22, v23, v24, v19);
        goto LABEL_37;
      case 0x22u:
        uint64_t v10 = (CFStringRef *)(v7 + 64);
        uint64_t v9 = *(const void **)(v7 + 64);
        if (v9)
        {
LABEL_5:
          CFRelease(v9);
          *uint64_t v10 = 0;
        }
LABEL_6:
        int v11 = iap2_identification_processStringParam(v7, a3, v10);
        goto LABEL_37;
      default:
        if (gLogObjects && gNumLogObjects >= 26)
        {
          long long v18 = *(NSObject **)(gLogObjects + 200);
        }
        else
        {
          long long v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "iAP2MsgIdentificationInfo unhandled paramID:%04X\n", buf, 8u);
        }
        uint64_t v25 = v7;
        int v26 = ParamID;
LABEL_48:
        _addRejectParam(v25, v26, 1u);
        BOOL v36 = 1;
        goto LABEL_38;
    }
  }
  else
  {
    BOOL v36 = 1;
  }
  return !v36;
}

uint64_t platform_timeSync_getAccessoryTime(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = *(id *)(gLogObjects + 464);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_getAccessoryTime";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#<Undefined>] %s entering get time from acc", (uint8_t *)&v5, 0xCu);
  }

  return accFeatureHandlers_invokeHandler(0, 64, a1);
}

uint64_t platform_timeSync_sendHostTimeToAccessory(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = *(id *)(gLogObjects + 464);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_sendHostTimeToAccessory";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#<Undefined>] %s entering send host time to accessory", (uint8_t *)&v5, 0xCu);
  }

  return accFeatureHandlers_invokeHandler(0, 65, a1);
}

void platform_timeSync_setSystemTime(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = *(id *)(gLogObjects + 464);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_setSystemTime";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[#<Undefined>] %s sending time to CoreTime plugin", (uint8_t *)&v5, 0xCu);
  }

  BOOL v4 = +[ACCTimeSyncServer sharedServer];
  [v4 setSystemTime:a1];
}

void platform_timeSync_startServer()
{
  id v0 = +[ACCTimeSyncServer sharedServer];
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v1 = *(id *)(gLogObjects + 464);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v1 = &_os_log_default;
    id v2 = &_os_log_default;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = [v0 isServerActive];
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[#<Undefined>] is TimeSync Server active:%u", (uint8_t *)v3, 8u);
  }
}

uint64_t iap2_sessionLog_start(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (uint64_t)malloc_type_malloc(0xA8uLL, 0x1090040E72C28DDuLL);
    if (result)
    {
      id v2 = (void *)result;
      id v3 = malloc_type_calloc(1uLL, 0x50uLL, 0x1060040881D8D0DuLL);
      if (v3)
      {
        BOOL v4 = v3;
        *id v3 = *(void *)(v1 + 8);
        v3[8] = dispatch_queue_create("LoggingProtocol-DeviceContext-Queue", 0);
        v2[4] = v4;
        *(_DWORD *)id v2 = 0;
        *((_WORD *)v2 + 2) = 2;
        v2[2] = 0;
        *((_WORD *)v2 + 12) = 0;
        *((_DWORD *)v2 + 2) = 0;
        v2[11] = 0;
        v2[12] = 0;
        v2[10] = 0;
        *((unsigned char *)v2 + 104) = 0;
        *((_DWORD *)v2 + 27) = 2;
        *((unsigned char *)v2 + 112) = 0;
        *((_DWORD *)v2 + 29) = 0;
        uint64_t result = 1;
        *(void *)(v1 + 448) = v2;
      }
      else
      {
        free(v2);
        return 0;
      }
    }
  }
  return result;
}

BOOL iap2_sessionLog_cleanup(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(dispatch_object_t **)(*(void *)(a1 + 448) + 32);
    id v3 = v2[9];
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(v2[9]);
      v2[9] = 0;
    }
    BOOL v4 = v2[6];
    if (v4)
    {
      dispatch_source_cancel(v4);
      dispatch_release(v2[6]);
      v2[6] = 0;
    }
    int v5 = v2[7];
    if (v5)
    {
      dispatch_source_cancel(v5);
      dispatch_release(v2[7]);
      v2[7] = 0;
    }
    uint64_t v6 = v2[8];
    if (v6)
    {
      dispatch_sync(v6, &__block_literal_global_41);
      dispatch_release(v2[8]);
      v2[8] = 0;
    }
    acc_platform_loggingProtocol_removeNotificationObserver(**(id **)(*(void *)(a1 + 448) + 32));
    uint64_t v7 = *(void ***)(a1 + 448);
    if (v7[4])
    {
      free(v7[4]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[4] = 0;
    }
    if (v7[2])
    {
      free(v7[2]);
      uint64_t v7 = *(void ***)(a1 + 448);
      _DWORD v7[2] = 0;
    }
    if (v7[10])
    {
      free(v7[10]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[10] = 0;
    }
    if (v7[11])
    {
      free(v7[11]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[11] = 0;
    }
    if (v7[12])
    {
      free(v7[12]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[12] = 0;
    }
    free(v7);
    *(void *)(a1 + 448) = 0;
    acc_platform_loggingProtocol_postLoggingCleanup();
  }
  return a1 != 0;
}

uint64_t iap2_sessionLog_parseIncomingMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || !a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 448);
  if (!*(void *)(v5 + 16)) {
    *(void *)(v5 + 16) = malloc_type_malloc(0xFFFFuLL, 0x3733775AuLL);
  }

  return loggingProtocol_parseIncomingByteStream(a2, a3, v5);
}

BOOL iap2_sessionLog_sendOutgoingMessage(uint64_t a1, char *a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  BOOL v4 = *(const void ***)(a1 + 32);
  if (!v4) {
    return 0;
  }
  if (!*v4) {
    return 0;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(*v4);
  if (!EndpointWithUUID) {
    return 0;
  }
  uint64_t v7 = EndpointWithUUID[7];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int SessionForService = iAP2LinkGetSessionForService(v9, 4);

  return iAP2LinkQueueSendData(v9, a2, a3, SessionForService, 0, 0, 0, 0);
}

void iap2_sessionLog_registerForNotifications(uint64_t a1)
{
  acc_platform_loggingProtocol_registerForPrefsNotification();
  acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification(**(void **)(a1 + 32), a1);
  uint64_t v2 = **(void **)(a1 + 32);

  acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification(v2, a1);
}

uint64_t iap2_oobBtPairing_accessoryInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)__int16 v37 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing AccessoryInfo Handler %@", buf, 0xCu);
  }
  uint64_t v6 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    int v35 = 0;
    unsigned __int16 valuePtr = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      unsigned __int16 v9 = 0;
      int v10 = 0;
      uint64_t v11 = 0;
      int v12 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        int v14 = ParamID;
        if (ParamID == 1) {
          break;
        }
        if (ParamID) {
          goto LABEL_21;
        }
        unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v35);
        if (v35)
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
          return 0;
        }
        unsigned __int16 v9 = DataAsU16;
        unsigned __int16 valuePtr = DataAsU16;
        int v12 = 1;
LABEL_22:
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_25;
        }
      }
      uint64_t DataAsU32 = iAP2MsgGetDataAsU32(NextParam, &v35);
      if (v35)
      {
        int v33 = iAP2MsgGetMsgID(a2);
        printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 1, v33);
        return 0;
      }
      uint64_t v11 = DataAsU32;
      int v10 = 1;
LABEL_21:
      int v17 = iAP2MsgGetMsgID(a2);
      printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v14, v17);
      goto LABEL_22;
    }
    unsigned __int16 v9 = 0;
    int v12 = 0;
    uint64_t v11 = 0;
    int v10 = 0;
LABEL_25:
    if (gLogObjects && gNumLogObjects >= 46)
    {
      long long v18 = *(NSObject **)(gLogObjects + 360);
    }
    else
    {
      long long v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing AccessoryInfo: %@", buf, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 0xFu);
    if (Feature
      && (uint64_t v21 = Feature, *(unsigned char *)(Feature + 28))
      && (buf[0] = 0,
          iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf)))
    {
      if (v10 & v12)
      {
        CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)v21, v22);
        CFDataRef v24 = iap2_identification_copyMacAddressForComponentID(a1, valuePtr);
        if (gLogObjects && gNumLogObjects >= 46)
        {
          uint64_t v25 = *(NSObject **)(gLogObjects + 360);
        }
        else
        {
          uint64_t v25 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)__int16 v37 = valuePtr;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&unsigned char v37[6] = Value;
          *(_WORD *)&v37[14] = 2112;
          *(void *)&v37[16] = v24;
          _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "iAP2OOBBTPairing AccessoryInfo: for componentID=%d, uuid=%@ accessoryMacAddr=%@", buf, 0x1Cu);
        }
        if (Value) {
          BOOL v27 = v24 == 0;
        }
        else {
          BOOL v27 = 1;
        }
        uint64_t v6 = !v27;
        if (v27)
        {
          if (gLogObjects && gNumLogObjects >= 46)
          {
            int v29 = *(NSObject **)(gLogObjects + 360);
          }
          else
          {
            int v29 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v30 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 138413058;
            *(void *)__int16 v37 = v30;
            *(_WORD *)&v37[8] = 2112;
            *(void *)&unsigned char v37[10] = Value;
            *(_WORD *)&v37[18] = 2112;
            *(void *)&unsigned char v37[20] = v24;
            LOWORD(v38[0]) = 1024;
            *(_DWORD *)((char *)v38 + 2) = valuePtr;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing AccessoryInfo: %@, no uuid(%@) or accesoryMacAddr(%@) for componentID %d, ignore message", buf, 0x26u);
          }
        }
        else
        {
          if (*(_DWORD *)(v21 + 24) != valuePtr)
          {
            *(_DWORD *)(v21 + 24) = valuePtr;
            *(void *)(v21 + 16) = CFStringCreateCopy(kCFAllocatorDefault, Value);
          }
          platform_oobBtPairing_accessoryInfo(*(void *)(a1 + 8), (uint64_t)Value, (uint64_t)v24, v11);
        }
        if (v22) {
          CFRelease(v22);
        }
        if (v24) {
          CFRelease(v24);
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          int v26 = *(NSObject **)(gLogObjects + 360);
        }
        else
        {
          int v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        uint64_t v6 = 0;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 138413314;
          *(void *)__int16 v37 = v28;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&unsigned char v37[10] = v9;
          *(_WORD *)&v37[14] = 1024;
          *(_DWORD *)&v37[16] = v12 & 1;
          *(_WORD *)&unsigned char v37[20] = 1024;
          *(_DWORD *)&v37[22] = v11;
          *(_WORD *)&v37[26] = 1024;
          v38[0] = v10 & 1;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing AccessoryInfo: %@, no componentID (%d / %d) or no deviceClass (%d / %d) parameter, ignore message", buf, 0x24u);
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t iap2_oobBtPairing_completionInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing CompletionInfo Handler %@", buf, 0xCu);
  }
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v25 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    char v9 = 0;
    unsigned __int8 v10 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v12 = ParamID;
        int MsgID = iAP2MsgGetMsgID(a2);
        printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v12, MsgID);
      }
      else
      {
        unsigned __int8 DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v25);
        if (v25)
        {
          int v24 = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v24);
          return 0;
        }
        unsigned __int8 v10 = DataAsU8;
        char v9 = 1;
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_22;
      }
    }
  }
  unsigned __int8 v10 = 0;
  char v9 = 0;
LABEL_22:
  if (gLogObjects && gNumLogObjects >= 46)
  {
    int v15 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing CompletionInfo: %@", buf, 0xCu);
  }
  uint64_t result = iap2_feature_getFeature(a1, 0xFu);
  if (result)
  {
    uint64_t v17 = result;
    if (!*(unsigned char *)(result + 28)) {
      return 0;
    }
    buf[0] = 0;
    uint64_t result = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf);
    if (result)
    {
      if ((v9 & 1) != 0 && (uint64_t v18 = *(void *)(v17 + 16)) != 0)
      {
        platform_oobBtPairing_completionStatus(*(void *)(a1 + 8), v18, v10);
        *(_DWORD *)(v17 + 24) = -1;
        uint64_t v19 = *(const void **)(v17 + 16);
        if (v19)
        {
          CFRelease(v19);
          *(void *)(v17 + 16) = 0;
        }
        return 1;
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          uint64_t v20 = *(NSObject **)(gLogObjects + 360);
        }
        else
        {
          uint64_t v20 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v21)
        {
          uint64_t v22 = *(void *)(a1 + 8);
          uint64_t v23 = *(void *)(v17 + 16);
          *(_DWORD *)buf = 138413058;
          uint64_t v27 = v22;
          __int16 v28 = 1024;
          int v29 = v10;
          __int16 v30 = 1024;
          int v31 = v9 & 1;
          __int16 v32 = 2112;
          uint64_t v33 = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing CompletionInfo: %@, no resultCode (%d / %d) parameter or no currentOOBBTPairingUID (%@), ignore message", buf, 0x22u);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_oobBtPairing_startPairingHandler(uint64_t *a1, void *a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v18 = 138412290;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StartPairing Handler %@", (uint8_t *)&v18, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v18 = 138412546;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    BOOL v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StartPairing %@ oobBtPairing %s", (uint8_t *)&v18, 0x16u);
  }
  if (!Feature) {
    return 0;
  }
  *(_DWORD *)(Feature + 24) = -1;
  unsigned __int8 v10 = *(const void **)(Feature + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(Feature + 16) = 0;
  }
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v11 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = a1[1];
    int v18 = 138412290;
    uint64_t v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StartPairing %@, create msg", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v13 = iAP2MsgInit((uint64_t)(a1 + 15), 176, a1[24], 0xFFFF, 0, 0);
  *(unsigned char *)(Feature + 28) = 1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    int v14 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = a1[1];
    int MsgID = iAP2MsgGetMsgID(v13);
    int v18 = 138412546;
    uint64_t v19 = v15;
    __int16 v20 = 1024;
    LODWORD(v21) = MsgID;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StartPairing %@ send message %xh", (uint8_t *)&v18, 0x12u);
  }
  iap2_sessionControl_sendOutgoingMessage(a1, v13);
  platform_oobBtPairing_deleteParams(a2);
  return 1;
}

uint64_t iap2_oobBtPairing_pairingLinkKeyInfoHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v31 = 138412290;
    uint64_t v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing pairingLinkKeyInfo Handler %@", (uint8_t *)&v31, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v31 = 138412546;
    uint64_t v32 = v9;
    __int16 v33 = 2080;
    CFIndex v34 = (CFIndex)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing pairingLinkKeyInfo %@ oobBtPairing %s", (uint8_t *)&v31, 0x16u);
  }
  if (!Feature) {
    return 0;
  }
  uint64_t result = 0;
  if (!a2 || !*(unsigned char *)(Feature + 28)) {
    return result;
  }
  if (*(_DWORD *)a2 != 1) {
    return 0;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (*(void *)(a2 + 24))
    {
      if (gLogObjects && gNumLogObjects >= 46)
      {
        uint64_t v13 = *(NSObject **)(gLogObjects + 360);
      }
      else
      {
        uint64_t v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = a1[1];
        int v31 = 138412290;
        uint64_t v32 = v19;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing pairingLinkKeyInfo %@, create msg", (uint8_t *)&v31, 0xCu);
      }
      uint64_t v20 = iAP2MsgInit((uint64_t)(a1 + 15), 178, a1[24], 0xFFFF, 0, 0);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 16));
      unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
      unint64_t v23 = (unint64_t)iAP2MsgAddDataParam(v20, 0, 0, BytePtr, Length);
      int v24 = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
      unsigned __int16 v25 = CFDataGetLength(*(CFDataRef *)(a2 + 24));
      if ((unint64_t)iAP2MsgAddDataParam(v20, 0, 1, v24, v25) | v23)
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          int v26 = *(NSObject **)(gLogObjects + 360);
        }
        else
        {
          int v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v29 = a1[1];
          int MsgID = iAP2MsgGetMsgID(v20);
          int v31 = 138412546;
          uint64_t v32 = v29;
          __int16 v33 = 1024;
          LODWORD(v34) = MsgID;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing pairingLinkKeyInfo %@ send message %xh", (uint8_t *)&v31, 0x12u);
        }
        iap2_sessionControl_sendOutgoingMessage(a1, v20);
      }
      platform_oobBtPairing_deleteParams((void *)a2);
      return 1;
    }
  }
  else
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
  }
  if (v11 && v12 >= 46)
  {
    int v14 = *(NSObject **)(v11 + 360);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v15)
  {
    uint64_t v16 = a1[1];
    CFDataRef v17 = *(const __CFData **)(a2 + 16);
    if (v17) {
      CFIndex v18 = CFDataGetLength(v17);
    }
    else {
      CFIndex v18 = -1;
    }
    CFDataRef v27 = *(const __CFData **)(a2 + 24);
    if (v27) {
      CFIndex v28 = CFDataGetLength(v27);
    }
    else {
      CFIndex v28 = -1;
    }
    int v31 = 138412802;
    uint64_t v32 = v16;
    __int16 v33 = 2048;
    CFIndex v34 = v18;
    __int16 v35 = 2048;
    CFIndex v36 = v28;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "iAP2OOBBTPairing pairingLinkKeyInfo %@, Invalid linkKey(%ld bytes) or deviceMacAddr(%ld bytes), message not sent!", (uint8_t *)&v31, 0x20u);
    return 0;
  }
  return result;
}

uint64_t iap2_oobBtPairing_stopPairingHandler(uint64_t *a1, void *a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0;
    }
    int v17 = 138412290;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StopPairing Handler %@", (uint8_t *)&v17, 0xCu);
  }
  if (!a1) {
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v17 = 138412546;
    uint64_t v18 = v9;
    __int16 v19 = 2080;
    uint64_t v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StopPairing %@ oobBtPairing %s", (uint8_t *)&v17, 0x16u);
  }
  if (!Feature) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 46)
  {
    unsigned __int8 v10 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    unsigned __int8 v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[1];
    int v17 = 138412290;
    uint64_t v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StopPairing %@, create msg", (uint8_t *)&v17, 0xCu);
  }
  uint64_t v12 = iAP2MsgInit((uint64_t)(a1 + 15), 180, a1[24], 0xFFFF, 0, 0);
  *(unsigned char *)(Feature + 28) = 0;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v13 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = a1[1];
    int MsgID = iAP2MsgGetMsgID(v12);
    int v17 = 138412546;
    uint64_t v18 = v14;
    __int16 v19 = 1024;
    LODWORD(v20) = MsgID;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing StopPairing %@ send message %xh", (uint8_t *)&v17, 0x12u);
  }
  iap2_sessionControl_sendOutgoingMessage(a1, v12);
  platform_oobBtPairing_deleteParams(a2);
  return 1;
}

void *_createFeature_22(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v5[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing _createFeature", (uint8_t *)v5, 2u);
  }
  if (a1)
  {
    id v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040E032A7B1uLL);
    a1 = v3;
    if (v3)
    {
      _DWORD v3[2] = 0;
      *((_DWORD *)v3 + 6) = -1;
      *((unsigned char *)v3 + 28) = 0;
      *id v3 = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      a1[1] = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  return a1;
}

uint64_t _destroyFeature_22(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v9[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing _destroyFeature", (uint8_t *)v9, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_oobBtPairing_accessoryDetached(*(void *)(a2 + 8));
      platform_oobBTPairing_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0;
      }
      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0;
      }
      CFTypeRef v8 = v6[2];
      if (v8)
      {
        CFRelease(v8);
        _DWORD v6[2] = 0;
      }
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_13(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 360);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing _startFeatureFromDevice", buf, 2u);
  }
  uint64_t Feature = (CFMutableDictionaryRef *)iap2_feature_getFeature(a1, 0xFu);
  if (Feature)
  {
    buf[0] = 0;
    if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf))
    {
      uint64_t v4 = iap2_feature_getFeature(a1, 0);
      uint64_t v5 = iap2_feature_getFeature(a1, 1u);
      uint64_t v6 = iap2_feature_getFeature(a1, 0x14u);
      if (v6)
      {
        CFTypeRef v7 = *(const void **)(v6 + 24);
        if (v4)
        {
LABEL_12:
          CFTypeRef v8 = iap2_accAuthentication_copyCertificate(a1);
          CFTypeRef v9 = iap2_accAuthentication_copyCertificateSerial(a1);
          goto LABEL_15;
        }
      }
      else
      {
        CFTypeRef v7 = 0;
        if (v4) {
          goto LABEL_12;
        }
      }
      CFTypeRef v8 = 0;
      CFTypeRef v9 = 0;
LABEL_15:
      CFDictionaryRef v10 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
      if (v10)
      {
        CFDictionaryRef v11 = v10;
        CFIndex Count = CFDictionaryGetCount(v10);
        if (Count)
        {
          uint64_t v13 = Count;
          uint64_t v47 = v5;
          uint64_t v48 = v7;
          CFTypeRef v49 = v8;
          CFTypeRef v50 = v9;
          uint64_t v51 = a1;
          uint64_t v46 = &v42;
          __chkstk_darwin(Count);
          BOOL v15 = (unsigned __int16 **)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
          memset(v15, 170, v14);
          CFDictionaryGetKeysAndValues(v11, 0, (const void **)v15);
          if (v13 >= 1)
          {
            CFAllocatorRef v52 = kCFAllocatorDefault;
            int v43 = v54;
            *(void *)&long long v16 = 134218240;
            long long v44 = v16;
            *(void *)&long long v16 = 67111170;
            long long v45 = v16;
            do
            {
              int v17 = *v15;
              if (*v15)
              {
                int v18 = *((_DWORD *)v17 + 5);
                if (v18 == 5 || v18 == 3)
                {
                  CFAllocatorRef v20 = v52;
                  CFUUIDRef v21 = CFUUIDCreate(v52);
                  CFStringRef v22 = CFUUIDCreateString(v20, v21);
                  CFNumberRef v23 = CFNumberCreate(v20, kCFNumberSInt16Type, v17);
                  uint64_t v24 = gLogObjects;
                  int v25 = gNumLogObjects;
                  if (gLogObjects && gNumLogObjects >= 46)
                  {
                    int v26 = *(NSObject **)(gLogObjects + 360);
                  }
                  else
                  {
                    int v26 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v44;
                      *(void *)uint64_t v56 = v24;
                      *(_WORD *)&v56[8] = 1024;
                      *(_DWORD *)&unsigned char v56[10] = v25;
                      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    }
                  }
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                  {
                    int v30 = *v17;
                    int v31 = *((unsigned __int8 *)v17 + 24);
                    int v32 = *((unsigned __int8 *)v17 + 25);
                    int v33 = *((unsigned __int8 *)v17 + 26);
                    int v34 = *((unsigned __int8 *)v17 + 27);
                    int v35 = *((unsigned __int8 *)v17 + 28);
                    int v36 = *((unsigned __int8 *)v17 + 29);
                    *(_DWORD *)buf = v45;
                    *(_DWORD *)uint64_t v56 = v30;
                    *(_WORD *)&v56[4] = 2112;
                    *(void *)&v56[6] = v23;
                    __int16 v57 = 2112;
                    CFStringRef v58 = v22;
                    char v59 = 0;
                    char v60 = 4;
                    int v61 = v31;
                    __int16 v62 = 1024;
                    int v63 = v32;
                    __int16 v64 = 1024;
                    int v65 = v33;
                    __int16 v66 = 1024;
                    int v67 = v34;
                    __int16 v68 = 1024;
                    int v69 = v35;
                    __int16 v70 = 1024;
                    int v71 = v36;
                    _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "iAP2OOBBTPairing _startFeatureFromDevice: add transportComponent: componentID=%d componentIDObj=%@ uuidStr=%@ macAddr=(%02X %02X %02X %02X %02X %02X)", buf, 0x40u);
                  }
                  CFDictionarySetValue(*Feature, v23, v22);
                  CFDictionarySetValue(Feature[1], v22, v23);
                  if (v21) {
                    CFRelease(v21);
                  }
                  if (v22) {
                    CFRelease(v22);
                  }
                  if (v23) {
                    CFRelease(v23);
                  }
                }
              }
              else
              {
                uint64_t v27 = gLogObjects;
                int v28 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 46)
                {
                  uint64_t v29 = *(NSObject **)(gLogObjects + 360);
                }
                else
                {
                  uint64_t v29 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v44;
                    *(void *)uint64_t v56 = v27;
                    *(_WORD *)&v56[8] = 1024;
                    *(_DWORD *)&unsigned char v56[10] = v28;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                  }
                }
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                  _getEndpointSampleRates_cold_1(&v53, v43, v29);
                }
              }
              ++v15;
              --v13;
            }
            while (v13);
          }
          uint64_t v5 = v47;
          CFTypeRef v9 = v50;
          a1 = v51;
          CFTypeRef v7 = v48;
          CFTypeRef v8 = v49;
        }
      }
      char isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
      unsigned int v38 = *(const void ***)(v5 + 8);
      AccInfoMutableDict = platform_oobBtPairing_createAccInfoMutableDict(v38[2], v38[3], v38[1], v38[4], v38[5], v38[6], v7, v8, v9, isIdentifiedForCarPlay);
      platform_oobBTPairing_incrementUserCount();
      if (!a1 || (uint64_t v40 = *(void *)(a1 + 8)) == 0) {
        uint64_t v40 = 0;
      }
      platform_oobBtPairing_accessoryAttached(v40, (uint64_t)AccInfoMutableDict);
      if (AccInfoMutableDict) {
        CFRelease(AccInfoMutableDict);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_19(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5u, &v9);
  uint64_t v3 = v2;
  if (v9) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = v4;
  if (v9) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v2 == 0)
  {
    iap2_features_createFeature(a1, 0xFu);
    iap2_identification_setIdentifiedForFeature(a1, 0xFu);
  }
  return v3;
}

CFStringRef acc_userNotifications_createIdentifier(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@_%@", a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t acc_userNotifications_createAccessoryNotSupportedCF()
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t acc_protocolParser_init(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)result) {
      return 0;
    }
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0x10200402FA71B58uLL);
    *(void *)uint64_t v1 = result;
    if (!result) {
      return result;
    }
    **(void **)uint64_t v1 = CFDataCreateMutable(kCFAllocatorDefault, 0);
    if (!**(void **)v1) {
      return 0;
    }
    *(_WORD *)(*(void *)v1 + 24) = 512;
    *(void *)(*(void *)v1 + 16) = malloc_type_calloc(2uLL, 0x10uLL, 0x10800407411B482uLL);
    uint64_t v2 = *(void *)(*(void *)v1 + 16);
    *(_DWORD *)uint64_t v2 = 3;
    acc_protocolParser_iAP1_create((void *)(v2 + 8));
    uint64_t v3 = *(void *)(*(void *)v1 + 16);
    *(_DWORD *)(v3 + 16) = 4;
    acc_protocolParser_iAP2_create((void *)(v3 + 24));
    *(_DWORD *)(*(void *)v1 + 28) = 0;
    if (gLogObjects && gNumLogObjects >= 16)
    {
      BOOL v4 = *(NSObject **)(gLogObjects + 120);
    }
    else
    {
      BOOL v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(*(void *)v1 + 25);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initialized protocol parser. Matching against %u protocols...", (uint8_t *)v6, 8u);
    }
    return 1;
  }
  return result;
}

BOOL acc_protocolParser_destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*((unsigned char *)v2 + 25))
      {
        uint64_t v3 = 0;
        unint64_t v4 = 0;
        do
        {
          uint64_t v5 = v2[2];
          int v6 = *(_DWORD *)(v5 + v3);
          if (v6 == 4 || v6 == 3)
          {
            acc_protocolParser_iAP2_destroy((void **)(v5 + v3 + 8));
          }
          else
          {
            uint64_t v7 = gLogObjects;
            int v8 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v9 = gNumLogObjects < 16;
            }
            else {
              BOOL v9 = 1;
            }
            if (v9)
            {
              CFDictionaryRef v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v15 = v7;
                __int16 v16 = 1024;
                int v17 = v8;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                CFDictionaryRef v10 = &_os_log_default;
              }
            }
            else
            {
              CFDictionaryRef v10 = *(NSObject **)(gLogObjects + 120);
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              int v11 = *(_DWORD *)(v2[2] + v3);
              *(_DWORD *)buf = 67109120;
              LODWORD(v15) = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Cannot destroy parser for unknown protocol: %d", buf, 8u);
            }
          }
          ++v4;
          v3 += 16;
        }
        while (v4 < *((unsigned __int8 *)v2 + 25));
        uint64_t v2 = *(void **)a1;
      }
      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        **(void **)a1 = 0;
        uint64_t v2 = *(void **)a1;
      }
      uint64_t v12 = (void *)v2[2];
      if (!v12 || (free(v12), *(void *)(*(void *)a1 + 16) = 0, (uint64_t v2 = *(void **)a1) != 0))
      {
        free(v2);
        *(void *)a1 = 0;
      }
    }
  }
  return a1 != 0;
}

uint64_t acc_protocolParser_detectProtocol(uint64_t *a1, CFDataRef theData)
{
  uint64_t result = 0;
  if (!a1 || !theData) {
    return result;
  }
  uint64_t v5 = (void *)*a1;
  if (!*a1)
  {
    uint64_t result = acc_protocolParser_init((uint64_t)a1);
    if (!result) {
      return result;
    }
    uint64_t v5 = (void *)*a1;
  }
  if (!*v5) {
    return 0;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (CFDataGetLength(*(CFDataRef *)*a1) >= 33)
  {
    if (gLogObjects && gNumLogObjects >= 16)
    {
      uint64_t v7 = *(NSObject **)(gLogObjects + 120);
    }
    else
    {
      uint64_t v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67109120;
      int v21 = 32;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reached buffer reset size of %u, resetting parser...", (uint8_t *)&v20, 8u);
    }
    _resetParser(*a1);
  }
  if (Length >= 0x10000)
  {
    __int16 v19 = logObjectForModule_10();
    uint64_t result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    acc_protocolParser_detectProtocol_cold_1(v19);
    return 0;
  }
  int v8 = *(__CFData **)*a1;
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex v10 = CFDataGetLength(theData);
  CFDataAppendBytes(v8, BytePtr, v10);
  CFIndex v11 = CFDataGetLength(*(CFDataRef *)*a1);
  unsigned __int16 v12 = v11;
  CFIndex v13 = *(unsigned __int16 *)(*a1 + 8);
  if (v11 < v13)
  {
    LODWORD(v13) = 0;
    *(_WORD *)(*a1 + 8) = 0;
  }
  if (gLogObjects && gNumLogObjects >= 16)
  {
    size_t v14 = *(NSObject **)(gLogObjects + 120);
  }
  else
  {
    size_t v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v20 = 67109120;
    int v21 = (unsigned __int16)(v12 - v13);
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "parseDataLength: %hu", (uint8_t *)&v20, 8u);
  }
  uint64_t v15 = *a1;
  if (v13 != v12)
  {
    if ((unsigned __int16)(v12 - v13) <= 1u) {
      int v16 = 1;
    }
    else {
      int v16 = (unsigned __int16)(v12 - v13);
    }
    do
    {
      _runFSM(v15);
      uint64_t v15 = *a1;
      if (*(_DWORD *)(*a1 + 28)) {
        break;
      }
      if (*(unsigned __int8 *)(v15 + 24) >= *(unsigned __int8 *)(v15 + 25))
      {
        if (gLogObjects) {
          BOOL v17 = gNumLogObjects < 16;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          int v18 = *(NSObject **)(gLogObjects + 120);
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "All protocol matching verifications have failed, resetting parser...", (uint8_t *)&v20, 2u);
        }
        _resetParser(*a1);
        uint64_t v15 = *a1;
        return *(unsigned int *)(v15 + 28);
      }
      --v16;
    }
    while (v16);
  }
  return *(unsigned int *)(v15 + 28);
}

void _resetParser(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(__CFData **)a1;
    if (v2)
    {
      v16.unsigned int length = *(unsigned __int16 *)(a1 + 8);
      v16.location = 0;
      CFDataDeleteBytes(v2, v16);
      *(_WORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      if (*(unsigned char *)(a1 + 25))
      {
        uint64_t v3 = 0;
        unint64_t v4 = 0;
        do
        {
          uint64_t v5 = *(void *)(a1 + 16);
          int v6 = *(_DWORD *)(v5 + v3);
          if (v6 == 4)
          {
            acc_protocolParser_iAP2_reset(*(void *)(v5 + v3 + 8));
          }
          else if (v6 == 3)
          {
            acc_protocolParser_iAP1_reset(*(void *)(v5 + v3 + 8));
          }
          else
          {
            uint64_t v7 = gLogObjects;
            int v8 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v9 = gNumLogObjects < 16;
            }
            else {
              BOOL v9 = 1;
            }
            if (v9)
            {
              CFIndex v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v13 = v7;
                __int16 v14 = 1024;
                int v15 = v8;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                CFIndex v10 = &_os_log_default;
              }
            }
            else
            {
              CFIndex v10 = *(NSObject **)(gLogObjects + 120);
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              int v11 = *(_DWORD *)(*(void *)(a1 + 16) + v3);
              *(_DWORD *)buf = 67109120;
              LODWORD(v13) = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Cannot reset parser for unknown protocol: %d", buf, 8u);
            }
          }
          ++v4;
          v3 += 16;
        }
        while (v4 < *(unsigned __int8 *)(a1 + 25));
      }
    }
  }
}

void _runFSM(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8);
  uint64_t v3 = (unsigned __int8 *)&CFDataGetBytePtr(*(CFDataRef *)a1)[*(unsigned __int16 *)(a1 + 8)];
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 16;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 120);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _runFSM_cold_1(v3, (unsigned __int16 *)(a1 + 8), v5);
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      int v8 = (_DWORD *)(*(void *)(a1 + 16) + v6);
      if (*v8 == 4)
      {
        acc_protocolParser_iAP2_run(a1, (uint64_t)v8, v3);
      }
      else if (*v8 == 3)
      {
        acc_protocolParser_iAP1_run(a1, (uint64_t)v8, v3);
      }
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned __int8 *)(a1 + 25));
  }
  ++*v2;
}

uint64_t iap2_messageHandlers_setHandler(void *key, void *value)
{
  unsigned int v3 = key;
  uint64_t result = _giAP2MessageHandlers;
  if (_giAP2MessageHandlers) {
    goto LABEL_12;
  }
  _giAP2MessageHandlers = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
  if (!gLogObjects || gNumLogObjects < 23)
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_2();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 176);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    iap2_messageHandlers_setHandler_cold_3(v6);
  }
  uint64_t result = _giAP2MessageHandlers;
  if (_giAP2MessageHandlers)
  {
LABEL_12:
    CFDictionarySetValue((CFMutableDictionaryRef)result, (const void *)v3, value);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 23;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_bluetooth_copyNameForMacAddress_cold_2();
      }
    }
    else
    {
      int v8 = *(NSObject **)(gLogObjects + 176);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_messageHandlers_setHandler_cold_1(v3, v8);
    }
    return 1;
  }
  return result;
}

const void *iap2_messageHandlers_getHandler(void *key)
{
  unsigned int v1 = key;
  uint64_t result = (const void *)_giAP2MessageHandlers;
  if (_giAP2MessageHandlers) {
    return CFDictionaryGetValue((CFDictionaryRef)_giAP2MessageHandlers, (const void *)v1);
  }
  return result;
}

void *t56_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x108uLL, 0x10F00408241FA1CuLL);
    unsigned int v3 = v2;
    if (v2)
    {
      *uint64_t v2 = a1;
      CFTypeRef v4 = *(CFTypeRef *)(a1 + 16);
      if (v4) {
        CFTypeRef v4 = CFRetain(v4);
      }
      _DWORD v3[2] = v4;
      CFTypeRef v5 = *(CFTypeRef *)(a1 + 8);
      if (v5) {
        CFTypeRef v5 = CFRetain(v5);
      }
      v3[1] = v5;
      *((_WORD *)v3 + 128) = 2000;
      uint64_t v6 = malloc_type_calloc(1uLL, 0x7D0uLL, 0x9A9B19CDuLL);
      v3[31] = v6;
      *((_WORD *)v3 + 129) = 0;
      *(_OWORD *)(v3 + 27) = 0u;
      *(_OWORD *)(v3 + 29) = 0u;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 11) = 0u;
      *((_OWORD *)v3 + 12) = 0u;
      *((_DWORD *)v3 + 52) = 0;
      if (v6)
      {
        CFStringRef Copy = (const __CFString *)v3[2];
        if (Copy)
        {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Copy);
          uint64_t v8 = v3[31];
        }
        else
        {
          uint64_t v8 = (uint64_t)v6;
        }
        v3[17] = v3 + 5;
        if (!t56_protocol_init((uint64_t)(v3 + 5), (uint64_t)Copy, 0, 1, 1u, v8, *((_WORD *)v3 + 128)))
        {
          BOOL v9 = dispatch_queue_create("T56Endpoint", 0);
          v3[4] = v9;
          if (v9)
          {
            dispatch_set_context(v9, v3);
            dispatch_set_finalizer_f((dispatch_object_t)v3[4], (dispatch_function_t)_t56_endpoint_dispatchQueueFinalizer);
            uint64_t v10 = 0;
            while (1)
            {
              int v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)v3[4]);
              unsigned __int16 v12 = &v3[v10];
              v12[18] = v11;
              if (!v11) {
                break;
              }
              dispatch_source_set_timer(v11, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
              uint64_t v13 = v12[18];
              v26[0] = (uint64_t)_NSConcreteStackBlock;
              v26[1] = 0x40000000;
              void v26[2] = (uint64_t)__t56_endpoint_create_block_invoke;
              v26[3] = (uint64_t)&__block_descriptor_tmp_20;
              v26[4] = (uint64_t)v3;
              int v27 = v10;
              dispatch_source_set_event_handler(v13, v26);
              dispatch_activate((dispatch_object_t)v12[18]);
              if (++v10 == 4)
              {
                acc_platform_packetLogging_logEvent(*v3, "ATTACH", (uint64_t)"T56 accessory attached!", v14, v15, v16, v17, v18, v26[0]);
                return v3;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v20 = logObjectForModule_29();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    unsigned int v3 = 0;
  }
  uint64_t v21 = v3[17];
  if (v21) {
    t56_protocol_cleanup(v21, 0, 0);
  }
  for (uint64_t i = 18; i != 22; ++i)
  {
    CFNumberRef v23 = v3[i];
    if (v23)
    {
      dispatch_release(v23);
      v3[i] = 0;
    }
  }
  uint64_t v24 = v3[4];
  if (v24)
  {
    v3[4] = 0;
    dispatch_release(v24);
  }
  else
  {
    int v25 = (void *)v3[31];
    if (v25) {
      free(v25);
    }
    free(v3);
  }
  return 0;
}

void *logObjectForModule_29()
{
  if (gLogObjects && gNumLogObjects >= 61) {
    return *(void **)(gLogObjects + 480);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _t56_endpoint_dispatchQueueFinalizer(uint64_t *a1)
{
  if (a1)
  {
    t56_protocol_cleanup(a1[17], 0, 0);
    for (uint64_t i = 18; i != 22; ++i)
    {
      unsigned int v3 = a1[i];
      if (v3)
      {
        dispatch_release(v3);
        a1[i] = 0;
      }
    }
    CFTypeRef v4 = (void *)a1[31];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
  else
  {
    CFTypeRef v5 = logObjectForModule_29();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
  }
}

void __t56_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 40);
    BOOL v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3 + 176) != 0;
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "T56 timer source fired!!! T56TimerCallback(%d), timerID %d", (uint8_t *)v7, 0xEu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void (**)(void))(v5 + 8 * *(int *)(a1 + 40) + 176);
  if (v6)
  {
    v6(*(void *)(v5 + 136));
    *(void *)(*(void *)(a1 + 32) + 8 * *(int *)(a1 + 40) + 176) = 0;
  }
}

uint64_t t56_endpoint_publish(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "T56 endpoint_publish", buf, 2u);
  }
  if (a1)
  {
    if (!*(void *)a1 || !*(void *)(a1 + 248) || !*(_WORD *)(a1 + 256)) {
      return 0;
    }
    CFStringRef v3 = acc_endpoint_copyParentEndpointUUID(*(void *)a1);
    if (gLogObjects && gNumLogObjects >= 61)
    {
      BOOL v4 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      BOOL v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(*(void *)a1 + 24);
      *(_DWORD *)buf = 67109378;
      int v15 = v5;
      __int16 v16 = 2112;
      CFStringRef v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@", buf, 0x12u);
    }
    if (acc_endpoint_isPublished(*(void *)a1))
    {
      CFStringRef v6 = *(const __CFString **)(a1 + 16);
      CFStringRef v7 = v6 ? CFStringCreateCopy(kCFAllocatorDefault, v6) : 0;
      t56_protocol_cleanup(*(void *)(a1 + 136), 0, 0);
      if (!t56_protocol_init(*(void *)(a1 + 136), (uint64_t)v7, 0, 1, 1u, *(void *)(a1 + 248), *(_WORD *)(a1 + 256)))
      {
        a1 = 0;
        if (!v3) {
          return a1;
        }
        goto LABEL_33;
      }
    }
    if (gLogObjects && gNumLogObjects >= 61)
    {
      __int16 v8 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      __int16 v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(*(void *)a1 + 24);
      *(_DWORD *)buf = 67109378;
      int v15 = v9;
      __int16 v16 = 2112;
      CFStringRef v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@, start protocol!!!", buf, 0x12u);
    }
    if (v3) {
      CFRetain(v3);
    }
    dispatch_time_t v10 = dispatch_time(0, 100000000);
    int v11 = *(NSObject **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000;
    _DWORD v13[2] = __t56_endpoint_publish_block_invoke;
    v13[3] = &__block_descriptor_tmp_4_3;
    v13[4] = a1;
    v13[5] = v3;
    dispatch_after(v10, v11, v13);
    a1 = 1;
    if (v3) {
LABEL_33:
    }
      CFRelease(v3);
  }
  return a1;
}

void __t56_endpoint_publish_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(_DWORD *)(**(void **)(a1 + 32) + 24);
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@, after delay, call t56_protocol_start", (uint8_t *)v6, 0x12u);
  }
  t56_protocol_start(*(void *)(*(void *)(a1 + 32) + 136));
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t t56_endpoint_destroy(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent(*(void *)v9, "DETACH", (uint64_t)"T56 accessory detached!", a4, a5, a6, a7, a8, v16);
      dispatch_release(*(dispatch_object_t *)(v9 + 32));
      *a1 = 0;
      return 1;
    }
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v11 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v12)
    {
      LOWORD(v16) = 0;
      uint64_t v13 = "T56 Endpoint Destroy. *ppProtocolEndpoint is null!";
      uint64_t v14 = (uint8_t *)&v16;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      return 0;
    }
  }
  else
  {
    int v11 = logObjectForModule_29();
    BOOL v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v15)
    {
      __int16 v17 = 0;
      uint64_t v13 = "T56 Endpoint Destroy. NULL ppProtocolEndpoint!";
      uint64_t v14 = (uint8_t *)&v17;
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t t56_endpoint_processIncomingData(uint64_t result, CFDataRef theData)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0;
    if (theData)
    {
      if (v3[17])
      {
        unsigned int Length = CFDataGetLength(theData);
        if (Length > 1
          && (CFRetain(theData),
              unsigned int v5 = *CFDataGetBytePtr(theData),
              acc_platform_packetLogging_logT56Msg(*v3, theData, 1),
              t56_protocol_checkValidMessageHeaderAndSize(v3[17], v5, Length)))
        {
          CFStringRef v6 = v3[4];
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000;
          block[2] = __t56_endpoint_processIncomingData_block_invoke;
          block[3] = &__block_descriptor_tmp_7_1;
          void block[4] = v3;
          void block[5] = theData;
          char v9 = v5;
          unsigned int v8 = Length;
          dispatch_async(v6, block);
          return 1;
        }
        else
        {
          CFRelease(theData);
          return 0;
        }
      }
    }
  }
  return result;
}

void __t56_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 40);
  if (!_t56_endpoint_handleMessage(*(void *)(a1 + 32), *(CFDataRef *)(a1 + 40)))
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __t56_endpoint_processIncomingData_block_invoke_cold_1(a1, v2, v3);
    }
  }
  if (*v2) {
    CFRelease((CFTypeRef)*v2);
  }
}

BOOL _t56_endpoint_handleMessage(uint64_t a1, CFDataRef theData)
{
  if (a1)
  {
    if (*(void *)(a1 + 248) && *(_WORD *)(a1 + 256))
    {
      uint64_t v3 = *(void *)(a1 + 136);
      BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
      unsigned __int16 Length = CFDataGetLength(theData);
      return t56_protocol_processIncomingData(v3, BytePtr, Length) < 2;
    }
    __int16 v7 = logObjectForModule_29();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _t56_endpoint_handleMessage_cold_2();
      return 0;
    }
  }
  else
  {
    unsigned int v8 = logObjectForModule_29();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      mfi4Auth_endpoint_create_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t t56_endpoint_sendOutgoingData(uint64_t *a1, const UInt8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    CFStringRef v6 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    CFStringRef v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    t56_endpoint_sendOutgoingData_cold_3((uint64_t)a1, a3, v6);
    if (a2) {
      goto LABEL_9;
    }
LABEL_14:
    dispatch_time_t v10 = logObjectForModule_29();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      t56_endpoint_sendOutgoingData_cold_1();
    }
    return 0;
  }
  if (!a1)
  {
    int v11 = logObjectForModule_29();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0;
  }
  if (!a2) {
    goto LABEL_14;
  }
LABEL_9:
  if (!a3)
  {
    BOOL v12 = logObjectForModule_29();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      t56_endpoint_sendOutgoingData_cold_2();
    }
    return 0;
  }
  CFDataRef v7 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, a3, kCFAllocatorNull);
  uint64_t v8 = t56_endpoint_sendOutgoingDataCF(a1, v7);
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

uint64_t t56_endpoint_sendOutgoingDataCF(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    int v11 = logObjectForModule_29();
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_create_cold_1();
    return 0;
  }
  if (!a2)
  {
    BOOL v12 = logObjectForModule_29();
    uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    t56_endpoint_sendOutgoingDataCF_cold_2();
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v4 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    t56_endpoint_sendOutgoingDataCF_cold_8();
  }
  if (!*a1)
  {
    uint64_t v13 = logObjectForModule_29();
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    t56_endpoint_sendOutgoingDataCF_cold_3();
    return 0;
  }
  acc_platform_packetLogging_logT56Msg(*a1, a2, 0);
  CFStringRef v5 = acc_endpoint_copyParentEndpointUUID(*a1);
  if (v5 && (EndpointWithUUID = acc_manager_getEndpointWithUUID(v5)) != 0)
  {
    uint64_t v7 = (uint64_t)EndpointWithUUID;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      t56_endpoint_sendOutgoingDataCF_cold_6();
    }
    return acc_endpoint_processOutgoingSecureTunnelDataForClient(v7, 2, (CFDataRef)a2);
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      char v9 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      char v9 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      t56_endpoint_sendOutgoingDataCF_cold_4((uint64_t)a2, v9);
    }
    return acc_endpoint_sendOutgoingData(*a1, (const __CFData *)a2);
  }
}

uint64_t iAP2PacketCreateTimeSyncPacket(uint64_t a1, char a2, char a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = a2;
  v9[1] = HIBYTE(a5);
  _DWORD v9[2] = BYTE6(a5);
  v9[3] = BYTE5(a5);
  void v9[4] = BYTE4(a5);
  v9[5] = BYTE3(a5);
  v9[6] = BYTE2(a5);
  v9[7] = BYTE1(a5);
  __int16 v9[8] = a5;
  v9[9] = HIBYTE(a6);
  v9[10] = BYTE6(a6);
  v9[11] = BYTE5(a6);
  v9[12] = BYTE4(a6);
  v9[13] = BYTE3(a6);
  v9[14] = BYTE2(a6);
  v9[15] = BYTE1(a6);
  uint8_t v9[16] = a6;
  v9[17] = HIBYTE(a7);
  v9[18] = BYTE6(a7);
  v9[19] = BYTE5(a7);
  v9[20] = BYTE4(a7);
  v9[21] = BYTE3(a7);
  v9[22] = BYTE2(a7);
  v9[23] = BYTE1(a7);
  v9[24] = a7;
  if (a4)
  {
    LOBYTE(a4) = *a4;
    char v7 = 68;
  }
  else
  {
    char v7 = 4;
  }
  return iAP2PacketCreate(a1, v7, a3, (char)a4, v9, 25, 0, 1);
}

uint64_t mfi4Auth_protocol_decryptIncomingData(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v21 = logObjectForModule_30();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_3();
    }
    goto LABEL_59;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v21 = logObjectForModule_30();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_10();
    }
    goto LABEL_59;
  }
  if (!a3)
  {
    uint64_t v21 = logObjectForModule_30();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_4();
    }
    goto LABEL_59;
  }
  if (*(_DWORD *)(a1 + 160))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFStringRef v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "decryptIncomingData", (uint8_t *)v23, 2u);
    }

    int MsgID = iAP2MsgGetMsgID(a3);
    if (MsgID)
    {
      int v9 = MsgID;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        dispatch_time_t v10 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        dispatch_time_t v10 = &_os_log_default;
        id v11 = &_os_log_default;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v23[0] = 67109120;
        v23[1] = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "decryptIncomingData: rsp:0x%x", (uint8_t *)v23, 8u);
      }

      if (v9 > 21091)
      {
        if ((v9 - 21092) >= 3 && v9 != 21247) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v12 = (v9 - 21011);
        if (v12 > 0x37)
        {
LABEL_36:
          if (v9 == 21010)
          {
            if (!a2) {
              goto LABEL_60;
            }
            uint64_t v13 = a1;
            uint64_t v14 = a3;
            unint64_t v15 = 3;
            unint64_t v16 = 4;
            goto LABEL_33;
          }
LABEL_41:
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v19 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v19 = &_os_log_default;
            id v20 = &_os_log_default;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
            mfi4Auth_protocol_decryptIncomingData_cold_6();
          }
          uint64_t v17 = 1;
          goto LABEL_50;
        }
        if (((1 << (v9 - 19)) & 0x8428A480000000) == 0)
        {
          if (v9 == 21011)
          {
            if (!a2) {
              goto LABEL_60;
            }
            uint64_t v13 = a1;
            uint64_t v14 = a3;
            unint64_t v15 = 10;
            unint64_t v16 = 11;
LABEL_33:
            if (!mfi4Auth_protocol_decryptPayload(v13, v14, v15, v16, 0)) {
              return 1;
            }
            goto LABEL_60;
          }
          if (v12 == 1)
          {
            if (a2)
            {
              uint64_t v13 = a1;
              uint64_t v14 = a3;
              unint64_t v15 = 7;
              unint64_t v16 = 8;
              goto LABEL_33;
            }
LABEL_60:
            if (gLogObjects && gNumLogObjects >= 56)
            {
              __int16 v19 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v19 = &_os_log_default;
              id v22 = &_os_log_default;
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_decryptIncomingData_cold_1();
            }
            uint64_t v17 = 0;
LABEL_50:

            return v17;
          }
          goto LABEL_36;
        }
      }
      if (!a2) {
        goto LABEL_60;
      }
      uint64_t v13 = a1;
      uint64_t v14 = a3;
      unint64_t v15 = 12;
      unint64_t v16 = 13;
      goto LABEL_33;
    }
    uint64_t v21 = logObjectForModule_30();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_5();
    }
LABEL_59:

    goto LABEL_60;
  }
  return 1;
}

id logObjectForModule_30()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v0 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      logObjectForModule_cold_1_0();
    }
    id v0 = &_os_log_default;
    id v1 = &_os_log_default;
  }

  return v0;
}

uint64_t mfi4Auth_protocol_decryptPayload(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    int v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_1();
    }
    goto LABEL_62;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_9();
    }
    goto LABEL_62;
  }
  if (!a2)
  {
    int v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_2();
    }
LABEL_62:
    uint64_t v30 = 1;
    goto LABEL_54;
  }
  uint64_t MsgLen = iAP2MsgGetMsgLen(a2);
  uint64_t v10 = *(void *)(a2 + 24);
  size_t v11 = MsgLen - 22;
  uint64_t v12 = malloc_type_calloc(MsgLen - 22, 1uLL, 0xDCD0EA50uLL);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = v12;
  long long v39 = *(_OWORD *)(v10 + 6 + MsgLen - 22);
  uint64_t v14 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:v10 + 6 length:v11]);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    unint64_t v15 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unint64_t v15 = &_os_log_default;
    id v16 = &_os_log_default;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v38 = (unint64_t)v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "decryptPayload: cyphertext: %@", buf, 0xCu);
  }

  uint64_t v17 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:&v39 length:16]);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v18 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v18 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v38 = (unint64_t)v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "tag: %@", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v20 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v20 = &_os_log_default;
    id v21 = &_os_log_default;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    unint64_t v38 = a3;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "decryptPayload: key_index: %zu", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v22 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v22 = &_os_log_default;
    id v23 = &_os_log_default;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(unsigned __int8 *)(a1 + 144);
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "decryptPayload: negotiatedVersion: %d", buf, 8u);
  }

  if (*(unsigned __int8 *)(a1 + 144) < 3u)
  {
    int v25 = *(uint64_t **)(a1 + 96);
    unint64_t v27 = a4;
    unint64_t v26 = a3;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    if (a5) {
      int v25 = **(uint64_t ***)(a1 + 712);
    }
    else {
      int v25 = *(uint64_t **)(a1 + 96);
    }
    unint64_t v27 = a4;
    unint64_t v26 = a3;
    uint64_t v28 = 6;
    uint64_t v29 = v10;
  }
  uint64_t v30 = ccsigma_open(v25, v26, v27, v28, v29, v11, v10 + 6, (uint64_t)v13);
  int v31 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v13, v11, &v39));

  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v32 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v32 = &_os_log_default;
    id v33 = &_os_log_default;
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v38 = (unint64_t)v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "decryptPayload: plainText: %@", buf, 0xCu);
  }

  if (v30)
  {
    int v35 = logObjectForModule_30();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_3();
    }
  }
  else
  {
    memcpy((void *)(*(void *)(a2 + 24) + 6), v13, v11);
    *(unsigned char *)(*(void *)(a2 + 24) + 2) = (unsigned __int16)(MsgLen - 16) >> 8;
    *(unsigned char *)(*(void *)(a2 + 24) + 3) = MsgLen - 16;
  }
  free(v13);
LABEL_54:

  return v30;
}

uint64_t mfi4Auth_protocol_encryptOutgoingData(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    size_t v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_1();
    }
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    size_t v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_9();
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    size_t v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_2();
    }
    goto LABEL_49;
  }
  if (*(_DWORD *)(a1 + 160))
  {
    int MsgID = iAP2MsgGetMsgID(a2);
    if (!MsgID)
    {
      size_t v11 = logObjectForModule_30();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_encryptOutgoingData_cold_3();
      }
      goto LABEL_49;
    }
    int v5 = MsgID;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFStringRef v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 67109120;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "encryptOutgoingData: cmd:0x%x", (uint8_t *)&v13, 8u);
    }

    uint64_t v8 = (v5 - 20754);
    if (v8 <= 0x37)
    {
      if (((1 << (v5 - 18)) & 0x812E82C0000000) != 0) {
        goto LABEL_16;
      }
      if (v5 == 20754)
      {
        if (!mfi4Auth_protocol_encryptPayload(a1, a2, 0xAuLL, 0xBuLL, 0)) {
          return 1;
        }
        size_t v11 = logObjectForModule_30();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (v8 == 1)
      {
        if (!mfi4Auth_protocol_encryptPayload(a1, a2, 3uLL, 4uLL, 0)) {
          return 1;
        }
        size_t v11 = logObjectForModule_30();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
    }
    if ((v5 - 20835) >= 2 && v5 != 20991)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        size_t v11 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        size_t v11 = &_os_log_default;
        id v12 = &_os_log_default;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 67109120;
        int v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "encryptOutgoingData: no encrypting required: %x", (uint8_t *)&v13, 8u);
      }
      uint64_t v9 = 1;
      goto LABEL_38;
    }
LABEL_16:
    if (!mfi4Auth_protocol_encryptPayload(a1, a2, 5uLL, 6uLL, 0)) {
      return 1;
    }
    size_t v11 = logObjectForModule_30();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
LABEL_48:
    mfi4Auth_protocol_encryptOutgoingData_cold_5();
LABEL_49:
    uint64_t v9 = 0;
LABEL_38:

    return v9;
  }
  return 1;
}

uint64_t mfi4Auth_protocol_encryptPayload(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = *(void *)(a2 + 24);
  unsigned int MsgLen = iAP2MsgGetMsgLen(a2);
  uint64_t v11 = MsgLen;
  *(_WORD *)(v9 + 2) = bswap32(MsgLen + 16) >> 16;
  uint64_t v12 = MsgLen - 6;
  int v13 = malloc_type_malloc(v12, 0xCD2A40C2uLL);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  int v14 = v13;
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 30))
    {
      unint64_t v29 = a3;
      unint64_t v15 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:v9 + 6 length:v12]);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v16 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v16 = &_os_log_default;
        id v17 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "encryptPayload: plaintext: %@", buf, 0xCu);
      }

      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v18 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v18 = &_os_log_default;
        id v19 = &_os_log_default;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(unsigned __int8 *)(a1 + 144);
        *(_DWORD *)buf = 67109120;
        LODWORD(v31) = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "decryptPayload: negotiatedVersion: %d", buf, 8u);
      }

      if (*(unsigned __int8 *)(a1 + 144) < 3u)
      {
        uint64_t v22 = ccsigma_seal(*(uint64_t **)(a1 + 96), v29, a4, 0, 0, v12, v9 + 6, (uint64_t)v14, (uint64_t)&v32);
      }
      else
      {
        if (a5) {
          id v21 = **(uint64_t ***)(a1 + 712);
        }
        else {
          id v21 = *(uint64_t **)(a1 + 96);
        }
        uint64_t v22 = ccsigma_seal(v21, v29, a4, 6, v9, v12, v9 + 6, (uint64_t)v14, (uint64_t)&v32);
      }
      uint64_t v23 = v22;
      if (v22)
      {
        uint64_t v28 = logObjectForModule_30();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_encryptPayload_cold_3();
        }
      }
      else
      {
        memcpy((void *)(v9 + 6), v14, v12);
        *(_OWORD *)(v9 + v11) = v32;
        int v24 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:v14 length:v12]);

        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v25 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v25 = &_os_log_default;
          id v26 = &_os_log_default;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          int v31 = v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "encryptPayload: cyphertext: %@", buf, 0xCu);
        }

        uint64_t v23 = 0;
        unint64_t v15 = v24;
      }
      goto LABEL_36;
    }
    unint64_t v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptPayload_cold_6();
    }
  }
  else
  {
    unint64_t v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptPayload_cold_1();
    }
  }
  uint64_t v23 = 1;
LABEL_36:

  free(v14);
  return v23;
}

uint64_t mfi4Auth_protocol_authSetupStart(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_authSetupStart_cold_1();
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_authSetupStart_cold_3();
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_authSetupStart_cold_2();
    }
LABEL_13:

    return 1;
  }

  return mfi4Auth_protocol_initMessage_RequestAuthSetup(a1, a2);
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthSetup(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    uint64_t v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_1();
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_3();
    }
    goto LABEL_18;
  }
  if (!a2)
  {
    uint64_t v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_2();
    }
LABEL_18:

    return 1;
  }
  int v4 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20736, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU8Param(*a2, 0, 0, *(unsigned char *)(a1 + 112));
  iAP2MsgAddU8Param(*a2, 0, 1, *(unsigned char *)(a1 + 113));
  iAP2MsgAddU8Param(*a2, 0, 2, 1);
  if (*(void *)(a1 + 120))
  {
    unint64_t v5 = 0;
    do
      iAP2MsgAddU8Param(*a2, 0, 3, *(unsigned char *)(a1 + 114 + v5++));
    while (*(void *)(a1 + 120) > v5);
  }
  if (*(void *)(a1 + 136))
  {
    unint64_t v6 = 0;
    do
      iAP2MsgAddU8Param(*a2, 0, 4, *(unsigned char *)(a1 + 128 + v6++));
    while (*(void *)(a1 + 136) > v6);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20736;
  return result;
}

void mfi4Auth_protocol_handleAuthSessionClose(uint64_t a1, int a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v4 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 136315650;
    uint64_t v18 = (uint64_t)"mfi4Auth_protocol_handleAuthSessionClose";
    __int16 v19 = 1024;
    BOOL v20 = a1 != 0;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: authSession(%d), keepOpen %d", (uint8_t *)&v17, 0x18u);
  }

  if (a1)
  {
    if (*(unsigned char *)(a1 + 30))
    {
      unint64_t v15 = logObjectForModule_30();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handleAuthSessionClose_cold_6();
      }
    }
    else
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (Copy)
      {
        CFStringRef v7 = Copy;
        EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
        if (EndpointWithUUID)
        {
          uint64_t v9 = EndpointWithUUID;
          uint64_t v10 = *(void *)&EndpointWithUUID->__opaque[48];
          if (v10)
          {
            if (acc_endpoint_getTransportType(*(void *)v10) == 13)
            {
              if (a2)
              {
                if (gLogObjects && gNumLogObjects >= 56)
                {
                  uint64_t v11 = *(id *)(gLogObjects + 440);
                }
                else
                {
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                  uint64_t v11 = &_os_log_default;
                  id v12 = &_os_log_default;
                }
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  int v17 = 134217984;
                  uint64_t v18 = 10;
                  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handleAuthSessionClose: Keep session open for %llds", (uint8_t *)&v17, 0xCu);
                }

                int v13 = *(NSObject **)(v10 + 32);
                dispatch_time_t v14 = dispatch_time(0, 10000000000);
                dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
              }
              else
              {
                dispatch_source_set_timer(*(dispatch_source_t *)(v10 + 32), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                acc_endpoint_setProperty(v9, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
              }
            }
            goto LABEL_26;
          }
          id v16 = logObjectForModule_30();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handleAuthSessionClose_cold_4();
          }
        }
        else
        {
          id v16 = logObjectForModule_30();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handleAuthSessionClose_cold_3();
          }
        }

LABEL_26:
        CFRelease(v7);
        return;
      }
      unint64_t v15 = logObjectForModule_30();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handleAuthSessionClose_cold_2();
      }
    }
  }
  else
  {
    unint64_t v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handleAuthSessionClose_cold_1();
    }
  }
}

uint64_t mfi4Auth_protocol_handle_AuthSetup(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int inited = 1;
  if (!a1)
  {
    uint64_t v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_1();
    }
LABEL_69:

    if (!inited) {
      return 0;
    }
    goto LABEL_70;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_21();
    }
    goto LABEL_69;
  }
  if (!a2)
  {
    uint64_t v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_2();
    }
    goto LABEL_69;
  }
  char v52 = 0;
  *(_WORD *)(a1 + 145) = 0;
  uint64_t v6 = a1 + 145;
  *(unsigned char *)(a1 + 147) = 0;
  *(void *)(a1 + 152) = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v8 = 0;
  uint64_t v9 = (unsigned int *)(a1 + 160);
  uint64_t v10 = (unsigned char *)(a1 + 144);
  while (FirstParam)
  {
    switch(iAP2MsgGetParamID((uint64_t)FirstParam))
    {
      case 0u:
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, &inited);
        *uint64_t v10 = DataAsU8;
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_11();
          }
        }
        else
        {
          if (*(unsigned __int8 *)(a1 + 112) <= DataAsU8 && DataAsU8 <= *(unsigned __int8 *)(a1 + 113))
          {
            v8 |= 1u;
            goto LABEL_25;
          }
          unsigned int inited = -1;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v30 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v30 = &_os_log_default;
            id v33 = &_os_log_default;
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_9((uint64_t)v10, v30, v34, v35, v36, v37, v38, v39);
          }
        }
        goto LABEL_69;
      case 1u:
        unsigned int v12 = iAP2MsgGetDataAsU8(FirstParam, &inited);
        *uint64_t v9 = v12;
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_13();
          }
          goto LABEL_69;
        }
        if (v12 >= 4)
        {
          unsigned int inited = -1;
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_12(v6 + 15, v30, v40, v41, v42, v43, v44, v45);
          }
          goto LABEL_69;
        }
        v8 |= 2u;
        goto LABEL_25;
      case 2u:
        uint64_t v13 = iAP2MsgGetDataAsU8(FirstParam, &inited);
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_15();
          }
          goto LABEL_69;
        }
        uint64_t v14 = v13;
        if (v13)
        {
          unsigned int inited = -1;
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_14(v14, v30, v46, v47, v48, v49, v50, v51);
          }
          goto LABEL_69;
        }
        v8 |= 4u;
        goto LABEL_25;
      case 3u:
        *(_WORD *)(a1 + 202) = iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_16();
          }
          goto LABEL_69;
        }
        v8 |= 8u;
        goto LABEL_25;
      case 4u:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, (void *)(v6 + 61), 33);
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_18();
          }
          goto LABEL_69;
        }
        if (DataAsArrayU8 != 33)
        {
          unsigned int inited = -1;
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_17();
          }
          goto LABEL_69;
        }
        v8 |= 0x10u;
        goto LABEL_25;
      case 5u:
        char v16 = iAP2MsgGetDataAsU8(FirstParam, &inited);
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_20();
          }
          goto LABEL_69;
        }
        unint64_t v17 = *(void *)(a1 + 152);
        if (v17 >= 3)
        {
          unsigned int inited = -1;
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_19();
          }
          goto LABEL_69;
        }
        *(unsigned char *)(a1 + v17 + 145) = v16;
        ++*(void *)(a1 + 152);
        v8 |= 0x20u;
LABEL_25:
        unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v52);
        if (v52) {
          goto LABEL_26;
        }
        break;
      default:
        goto LABEL_25;
    }
  }
  if ((~v8 & 7) != 0)
  {
LABEL_26:
    unsigned int inited = -1;
LABEL_70:
    mfi4Auth_protocol_handle_AuthState(a1, 1);
    return inited;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v18 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v18 = &_os_log_default;
    id v19 = &_os_log_default;
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v20 = *v9;
    *(_DWORD *)buf = 67109120;
    unsigned int v55 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthSetup: authType:%x", buf, 8u);
  }

  unsigned int v21 = *v9;
  if (*v9 == 2)
  {
    if ((~v8 & 0x18) != 0)
    {
      unsigned int inited = -1;
      uint64_t v30 = logObjectForModule_30();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthSetup_cold_7();
      }
    }
    else
    {
      do
      {
        __int16 v23 = arc4random();
        *(_WORD *)(a1 + 204) = v23;
        unsigned __int16 v24 = *(_WORD *)(a1 + 202) ^ v23;
        *(_WORD *)(a1 + 200) = v24;
        if (v24) {
          BOOL v25 = v24 == 0xFFFF;
        }
        else {
          BOOL v25 = 1;
        }
      }
      while (v25);
      uint64_t v26 = *(void *)(a1 + 120) + *(void *)(a1 + 152) + *(void *)(a1 + 136) + 3;
      unint64_t v27 = malloc_type_malloc(v26, 0x2474412AuLL);
      if (v27)
      {
        uint64_t v28 = v27;
        *unint64_t v27 = *(unsigned char *)(a1 + 113);
        unint64_t v29 = v27 + 1;
        memcpy(v27 + 1, (const void *)(a1 + 114), *(void *)(a1 + 120));
        memcpy(&v29[*(void *)(a1 + 120)], (const void *)(a1 + 128), *(void *)(a1 + 136));
        v28[*(void *)(a1 + 120) + 1 + *(void *)(a1 + 136)] = *(unsigned char *)(a1 + 144);
        v28[*(void *)(a1 + 120) + 2 + *(void *)(a1 + 136)] = *(_DWORD *)(a1 + 160);
        memcpy(&v28[*(void *)(a1 + 120) + 3 + *(void *)(a1 + 136)], (const void *)(a1 + 145), *(void *)(a1 + 152));
        unsigned int inited = mfi4Auth_protocol_initSigmaContext(a1, (uint64_t)v28, v26);
        free(v28);
        if (inited)
        {
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_6();
          }
        }
        else
        {
          uint64_t result = mfi4Auth_protocol_initMessage_AuthStart(a1, a3);
          unsigned int inited = result;
          if (!result) {
            return result;
          }
          uint64_t v30 = logObjectForModule_30();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_5();
          }
        }
      }
      else
      {
        unsigned int inited = -1;
        uint64_t v30 = logObjectForModule_30();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_AuthSetup_cold_4();
        }
      }
    }
    goto LABEL_69;
  }
  if (v21 != 1)
  {
    if (!v21)
    {
      *(_OWORD *)(a1 + 568) = 0u;
      arc4random_buf((void *)(a1 + 568), 0x10uLL);
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse(a1, a3);
    }
    return 0;
  }
  unsigned __int16 v31 = 0;
  *(unsigned char *)(v6 + 93) = 0;
  *(_OWORD *)(a1 + 206) = 0u;
  *(_OWORD *)(v6 + 77) = 0u;
  while (1)
  {
    *(_WORD *)(a1 + 202) = v31;
    if (v31 != 0xFFFF && v31 != 0) {
      break;
    }
    unsigned __int16 v31 = arc4random();
  }
  uint64_t result = mfi4Auth_protocol_initMessage_RequestAuthStart(a1, a3);
  unsigned int inited = result;
  if (result)
  {
    uint64_t v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_3();
    }
    goto LABEL_69;
  }
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_1();
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_4();
    }
    goto LABEL_18;
  }
  if (!a2)
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_2();
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 160))
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_3();
    }
LABEL_18:

    return 1;
  }
  int v4 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(unsigned __int8 *)(a1 + 144);
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20757, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  if (v5 == 2) {
    unsigned int v6 = 33;
  }
  else {
    unsigned int v6 = 16;
  }
  iAP2MsgAddArrayU8Param(*a2, 0, 0, a1 + 568, v6);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20757;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthStart(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    unsigned int v6 = logObjectForModule_30();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_1();
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    unsigned int v6 = logObjectForModule_30();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_3();
    }
    goto LABEL_12;
  }
  if (!a2)
  {
    unsigned int v6 = logObjectForModule_30();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_2();
    }
LABEL_12:

    return 1;
  }
  int v4 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20752, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  iAP2MsgAddU16Param(*a2, 0, 0, *(unsigned __int16 *)(a1 + 202));
  iAP2MsgAddArrayU8Param(*a2, 0, 1, a1 + 206, 0x21u);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20752;
  return result;
}

uint64_t mfi4Auth_protocol_initSigmaContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = ccsigma_mfi_info();
  rsize_t v56 = 33;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFStringRef v7 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v7 = &_os_log_default;
    id v8 = &_os_log_default;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initSigmaContext", buf, 2u);
  }

  if (!a1)
  {
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_1();
    }
    goto LABEL_155;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_27();
    }
    goto LABEL_155;
  }
  if (!a2)
  {
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_2();
    }
    goto LABEL_155;
  }
  uint64_t v9 = +[ACCUserDefaults sharedDefaults];
  unsigned int v10 = [v9 BOOLForKey:@"AllowMFi4DevCertsOnProdDevice"];

  int v11 = MFAAIsDevelopmentHW();
  char v12 = *(unsigned char *)(a1 + 88);
  if ((v12 & 1 | 2) == 2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initSigmaContext: try prod identity", buf, 2u);
    }

    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 88) & 0xFC | 1;
LABEL_36:
    int v18 = 1;
    goto LABEL_37;
  }
  if ((v11 | v10) != 1 || (v12 & 4 | 8) != 8)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v16 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v16 = &_os_log_default;
      id v17 = &_os_log_default;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_23();
    }

    goto LABEL_36;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = &_os_log_default;
    id v55 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initSigmaContext: try dev identity", buf, 2u);
  }

  int v18 = 0;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 88) & 0xF3 | 4;
LABEL_37:
  uint64_t inited = mfi4Auth_protocol_initIdentity(a1, v18);
  if (inited)
  {
    uint64_t v30 = inited;
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_22();
    }
    goto LABEL_121;
  }
  unsigned int v20 = malloc_type_malloc(0x2F0uLL, 0x10E0040123A03EAuLL);
  *(void *)(a1 + 96) = v20;
  if (!v20)
  {
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_3();
    }
    goto LABEL_155;
  }
  unsigned int v21 = ccrng(0);
  *(void *)(a1 + 104) = v21;
  if (!v21)
  {
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_4();
    }
LABEL_155:
    uint64_t v30 = 0xFFFFFFFFLL;
    goto LABEL_121;
  }
  int v22 = *(unint64_t ****)(a1 + 96);
  uint64_t v23 = ccsigma_init((uint64_t)v6, (uint64_t)v22, 1, (uint64_t (**)(void, uint64_t, uint64_t *))v21);
  if (v23)
  {
    uint64_t v30 = v23;
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_21();
    }
    goto LABEL_121;
  }
  if (*(void *)(a1 + 376))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned __int16 v24 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned __int16 v24 = &_os_log_default;
      id v28 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "initSigmaContext: ccsigma_import_signing_key", buf, 2u);
    }

    uint64_t v29 = ccsigma_import_signing_key(v22, *(void *)(a1 + 384), *(unsigned __int8 **)(a1 + 376));
    if (v29)
    {
      uint64_t v30 = v29;
      unsigned __int16 v31 = logObjectForModule_30();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initSigmaContext_cold_19();
      }
      goto LABEL_121;
    }
  }
  else
  {
    if (gLogObjects) {
      BOOL v25 = gNumLogObjects <= 55;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (*(void *)(a1 + 392))
    {
      if (v26)
      {
        unint64_t v27 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unint64_t v27 = &_os_log_default;
        id v33 = &_os_log_default;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "initSigmaContext: ccsigma_set_signing_function", buf, 2u);
      }

      if (ccsigma_set_signing_function((uint64_t)v22, (uint64_t)seckey_sign, *(void *)(a1 + 392)))
      {
        unsigned __int16 v31 = logObjectForModule_30();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContext_cold_17();
        }
        uint64_t v30 = 0;
        goto LABEL_121;
      }
    }
    else
    {
      if (v26)
      {
        long long v32 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        long long v32 = &_os_log_default;
        id v34 = &_os_log_default;
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initSigmaContext_cold_15();
      }
    }
  }
  uint64_t v35 = a1 + 206;
  uint64_t v36 = ccsigma_import_peer_key_share(v22, 33, (unsigned __int8 *)(a1 + 206));
  if (v36)
  {
    uint64_t v30 = v36;
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_14();
    }
    goto LABEL_121;
  }
  uint64_t v37 = ccsigma_derive_session_keys((uint64_t **)v22, a3, a2, *(uint64_t (***)(void, uint64_t, uint64_t *))(a1 + 104));
  if (v37)
  {
    uint64_t v30 = v37;
    unsigned __int16 v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_13();
    }
    goto LABEL_121;
  }
  uint64_t v38 = malloc_type_malloc(*(void *)(a1 + 352) + 16, 0x9A780EF3uLL);
  if (!v38) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v39 = v38;
  arc4random_buf((void *)(a1 + 272), 0x10uLL);
  *uint64_t v39 = *(_OWORD *)(a1 + 272);
  memcpy(v39 + 1, *(const void **)(a1 + 344), *(void *)(a1 + 352));
  CC_SHA256(v39, *(_DWORD *)(a1 + 352) + 16, (unsigned __int8 *)(a1 + 308));
  unsigned __int16 v31 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:a1 + 308 length:32]);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v40 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v40 = &_os_log_default;
    id v41 = &_os_log_default;
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFStringRef v58 = v31;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "initSigmaContext: cert_hash_resp: %@", buf, 0xCu);
  }

  uint64_t v42 = (char *)(a1 + 239);
  uint64_t v30 = ccsigma_export_key_share((uint64_t **)v22, &v56, v42);
  if (v30)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v43 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v43 = &_os_log_default;
      id v46 = &_os_log_default;
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_10();
    }
  }
  else
  {
    if (v56 == 33)
    {
      uint64_t v44 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:a2 length:a3]);

      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v45 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v45 = &_os_log_default;
        id v47 = &_os_log_default;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFStringRef v58 = v44;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "negoTrans %@", buf, 0xCu);
      }

      uint64_t v48 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:v35 length:33]);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v49 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v49 = &_os_log_default;
        id v52 = &_os_log_default;
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFStringRef v58 = v48;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "dhPublicKeyInitiator %@", buf, 0xCu);
      }

      unsigned __int16 v31 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:v42 length:33]);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint8_t v53 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint8_t v53 = &_os_log_default;
        id v54 = &_os_log_default;
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFStringRef v58 = v31;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "dhPublicKeyResponder %@", buf, 0xCu);
      }

      printSessionKeys((uint64_t)v22, 0);
      goto LABEL_120;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v43 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v43 = &_os_log_default;
      id v50 = &_os_log_default;
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_8();
    }
  }

LABEL_120:
  free(v39);
LABEL_121:

  return v30;
}

uint64_t mfi4Auth_protocol_initMessage_AuthStart(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    char v12 = logObjectForModule_30();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_3();
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    char v12 = logObjectForModule_30();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_7();
    }
    goto LABEL_15;
  }
  if (!a2)
  {
    char v12 = logObjectForModule_30();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_4();
    }
LABEL_15:
    uint64_t v10 = 1;
LABEL_20:

    goto LABEL_21;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v23 = v4;
  long long v24 = v4;
  long long v25 = v4;
  long long v26 = v4;
  long long v27 = v4;
  long long v28 = v4;
  long long v17 = v4;
  long long v18 = v4;
  long long v19 = v4;
  long long v20 = v4;
  long long v21 = v4;
  long long v22 = v4;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v5 = *(uint64_t **)(a1 + 96);
  uint64_t v6 = ccsigma_sign(v5, (uint64_t)&v29, 32, a1 + 308, *(void *)(a1 + 104));
  if (v6)
  {
    uint64_t v10 = v6;
    char v12 = logObjectForModule_30();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_6();
    }
    goto LABEL_20;
  }
  long long v7 = *(_OWORD *)(a1 + 324);
  long long v23 = *(_OWORD *)(a1 + 308);
  long long v24 = v7;
  long long v25 = v29;
  long long v26 = v30;
  long long v27 = v31;
  long long v28 = v32;
  uint64_t v8 = ccsigma_seal(v5, 0, 1uLL, 0, 0, 96, (uint64_t)&v23, (uint64_t)&v17, (uint64_t)&v16);
  if (v8)
  {
    uint64_t v10 = v8;
    char v12 = logObjectForModule_30();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_5();
    }
    goto LABEL_20;
  }
  _DWORD v15[2] = v19;
  v15[3] = v20;
  void v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  v15[6] = v16;
  uint64_t v9 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v9;
  if (v9)
  {
    iAP2MsgInitWithSom((uint64_t)v9, 0, 20753, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
    iAP2MsgAddU16Param(*a2, 0, 0, *(unsigned __int16 *)(a1 + 204));
    iAP2MsgAddArrayU8Param(*a2, 0, 1, a1 + 239, 0x21u);
    iAP2MsgAddArrayU8Param(*a2, 0, 2, (uint64_t)v15, 0x70u);
    uint64_t v10 = 0;
    *(_WORD *)(a1 + 28) = 20753;
    return v10;
  }
  uint64_t v10 = 0xFFFFFFFFLL;
LABEL_21:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v13 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_initMessage_AuthStart_cold_1();
  }

  return v10;
}

void mfi4Auth_protocol_handle_AuthState(uint64_t a1, int a2)
{
  if (!a1)
  {
    long long v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthState_cold_1();
    }
    goto LABEL_50;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    long long v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthState_cold_4();
    }
LABEL_50:

    return;
  }
  if (*(void *)a1)
  {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
    if (Copy)
    {
      CFStringRef v5 = Copy;
      EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
      if (EndpointWithUUID)
      {
        char v12 = EndpointWithUUID;
        switch(a2)
        {
          case 1:
            uint64_t v13 = "AUTH FAILED";
            id v14 = "MFi4Auth accessory authentication Failed!";
            break;
          case 3:
            uint64_t v13 = "AUTH TIMEOUT";
            id v14 = "MFi4Auth accessory authentication Timed Out!";
            break;
          case 2:
            uint64_t v13 = "AUTH PASSED";
            id v14 = "MFi4Auth accessory authentication Passed!";
            break;
          default:
            if (gLogObjects && gNumLogObjects >= 56)
            {
              id v15 = *(id *)(gLogObjects + 440);
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              id v15 = &_os_log_default;
              id v16 = &_os_log_default;
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthState_cold_2();
            }

LABEL_22:
            CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)(a1 + 440), *(void *)(a1 + 448));
            acc_connection_setAuthCertData(*(void *)v12, v17);
            acc_connection_setAuthStatus(*(void *)v12, 1, a2);
            if (a2 == 2)
            {
              if (*((_DWORD *)v12 + 6) == 4)
              {
                CFDataRef v18 = (const __CFData *)acc_properties_copyProperty(*((const __CFDictionary **)v12 + 10), kCFACCProperties_Endpoint_MFi4Auth_AccessoryCertInfoToMatch);
                if (!v18)
                {
                  CFDataRef v24 = (const __CFData *)v5;
                  goto LABEL_36;
                }
                CFDataRef v19 = v18;
                if (*(_DWORD *)(a1 + 400) == 3)
                {
                  BytePtr = (unint64_t *)CFDataGetBytePtr(v18);
                  unint64_t v21 = bswap64(*BytePtr);
                  unint64_t v22 = bswap64(*(void *)(a1 + 404));
                  if (v21 == v22
                    && (unint64_t v21 = bswap64(BytePtr[1]), v22 = bswap64(*(void *)(a1 + 412)), v21 == v22)
                    && (unint64_t v21 = bswap64(BytePtr[2]), v22 = bswap64(*(void *)(a1 + 420)), v21 == v22)
                    && (unint64_t v21 = bswap64(BytePtr[3]), v22 = bswap64(*(void *)(a1 + 428)), v21 == v22))
                  {
                    int v23 = 0;
                  }
                  else if (v21 < v22)
                  {
                    int v23 = -1;
                  }
                  else
                  {
                    int v23 = 1;
                  }
                }
                else
                {
                  uint64_t v25 = MFAACreateCertificateSerialNumber();
                  if (!v25) {
                    goto LABEL_54;
                  }
                  CFDataRef v26 = (const __CFData *)v25;
                  long long v27 = CFDataGetBytePtr(v19);
                  long long v28 = CFDataGetBytePtr(v26);
                  size_t Length = CFDataGetLength(v26);
                  int v23 = memcmp(v27, v28, Length);
                  CFRelease(v26);
                }
                if (!v23)
                {
                  acc_connection_setProperty(*(void *)v12, kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch, v19);
                  if (!v17)
                  {
LABEL_34:
                    CFRelease(v5);
                    if (!v19) {
                      return;
                    }
                    goto LABEL_35;
                  }
LABEL_33:
                  CFRelease(v17);
                  goto LABEL_34;
                }
LABEL_54:
                CFRelease(v5);
LABEL_35:
                CFDataRef v24 = v19;
LABEL_36:
                CFRelease(v24);
                return;
              }
              mfi4Auth_protocol_supportsRelay(a1);
            }
            CFDataRef v19 = 0;
            if (!v17) {
              goto LABEL_34;
            }
            goto LABEL_33;
        }
        acc_platform_packetLogging_logEvent((uint64_t)EndpointWithUUID, v13, (uint64_t)v14, v7, v8, v9, v10, v11, v31);
        goto LABEL_22;
      }
      CFRelease(v5);
    }
  }
}

uint64_t mfi4Auth_protocol_handle_AuthSetupFailed(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_1();
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_3();
    }
    goto LABEL_12;
  }
  if (!a2)
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_2();
    }
LABEL_12:

    return 0;
  }
  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return 0;
}

uint64_t mfi4Auth_protocol_handle_AuthStart(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 30))
    {
      uint64_t v3 = logObjectForModule_30();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initMessage_AuthStart_cold_7();
      }
    }
    else
    {
      if (a2) {
        return 0;
      }
      uint64_t v3 = logObjectForModule_30();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthStart_cold_2();
      }
    }
  }
  else
  {
    uint64_t v3 = logObjectForModule_30();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_3();
    }
  }

  return 1;
}

uint64_t mfi4Auth_protocol_handle_RequestAuthCert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unsigned int inited = 1;
  char v33 = 0;
  if (!a1)
  {
    long long v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_1();
    }
    goto LABEL_78;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    long long v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_6();
    }
    goto LABEL_78;
  }
  if (!a2)
  {
    long long v30 = logObjectForModule_30();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_2();
    }
LABEL_78:

    CFDataRef v18 = 0;
    goto LABEL_67;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  uint64_t v32 = v3;
  if (!FirstParam)
  {
    LOBYTE(v7) = 0;
LABEL_48:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFDataRef v24 = *(id *)(gLogObjects + 440);
      uint64_t v3 = v32;
    }
    else
    {
      uint64_t v3 = v32;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFDataRef v24 = &_os_log_default;
      id v25 = &_os_log_default;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_3(v7, v24);
    }

    if ((v7 - 3) <= 0xFDu)
    {
      CFDataRef v18 = 0;
      unsigned int inited = -1;
    }
    else
    {
      if (v7 == 1) {
        int v26 = 6;
      }
      else {
        int v26 = 4;
      }
      CFDataRef v18 = 0;
      unsigned int inited = mfi4Auth_protocol_initMessage_AuthCert(v3, a3, v26);
      if (!inited) {
        goto LABEL_62;
      }
    }
    goto LABEL_61;
  }
  uint64_t v6 = (unsigned __int16 *)FirstParam;
  int v7 = 0;
  uint64_t v8 = (void *)(v3 + 308);
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v6);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v12 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
      }
      id v13 = &_os_log_default;
      char v12 = &_os_log_default;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "RequestAuthCert: paramId %d (0x%x)", buf, 0xEu);
    }

    if (ParamID == 1) {
      break;
    }
    if (ParamID)
    {
      CFDataRef v18 = 0;
    }
    else
    {
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v14;
      *(_OWORD *)&uint8_t buf[16] = v14;
      if (iAP2MsgGetDataAsArrayU8(v6, &inited, buf, 32) != 32
        || (*v8 == *(void *)buf ? (BOOL v15 = v8[1] == *(void *)&buf[8]) : (BOOL v15 = 0),
            v15 ? (BOOL v16 = v8[2] == *(void *)&buf[16]) : (BOOL v16 = 0),
            v16 ? (BOOL v17 = v8[3] == *(void *)&buf[24]) : (BOOL v17 = 0),
            !v17))
      {
LABEL_65:
        CFDataRef v18 = 0;
LABEL_66:
        unsigned int inited = -1;
        uint64_t v3 = v32;
        goto LABEL_67;
      }
      CFDataRef v18 = 0;
      v7 |= 1u;
    }
LABEL_42:
    NextParamWithError = iAP2MsgGetNextParamWithError(a2, 0, v6, &v33);
    if (v33) {
      goto LABEL_66;
    }
    uint64_t v6 = NextParamWithError;
    if (v18) {
      CFRelease(v18);
    }
    if (!v6) {
      goto LABEL_48;
    }
  }
  memset(buf, 0, 20);
  if (iAP2MsgGetDataAsArrayU8(v6, &inited, buf, 20) != 20) {
    goto LABEL_65;
  }
  CFDataRef v18 = (const void *)SecCertificateCreateWithBytes();
  if (!v18) {
    goto LABEL_66;
  }
  CFDataRef SubjectKeyID = (const __CFData *)SecCertificateGetSubjectKeyID();
  if (!SubjectKeyID) {
    goto LABEL_66;
  }
  BytePtr = CFDataGetBytePtr(SubjectKeyID);
  if (*(void *)buf == *(void *)BytePtr
    && *(void *)&buf[8] == *((void *)BytePtr + 1)
    && *(unsigned int *)&buf[16] == (unint64_t)*((unsigned int *)BytePtr + 4))
  {
    v7 |= 2u;
    goto LABEL_42;
  }
  unsigned int inited = -1;
  long long v28 = logObjectForModule_30();
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
  uint64_t v3 = v32;
  if (v29) {
    mfi4Auth_protocol_handle_RequestAuthCert_cold_5();
  }

LABEL_67:
  if (inited) {
LABEL_61:
  }
    mfi4Auth_protocol_handle_AuthState(v3, 1);
LABEL_62:
  if (v18) {
    CFRelease(v18);
  }
  return inited;
}

uint64_t mfi4Auth_protocol_initMessage_AuthCert(uint64_t a1, uint64_t *a2, int a3)
{
  size_t size = 0xAAAAAAAAAAAAAAAALL;
  if (*(unsigned char *)(a1 + 30))
  {
    long long v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_4();
    }
    goto LABEL_36;
  }
  if (!a2)
  {
    long long v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_1();
    }
    goto LABEL_36;
  }
  __int16 v6 = *(_WORD *)(a1 + 200);
  int v7 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v7;
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  if (a3 == 6) {
    uint64_t v8 = "MFi40Attestation-Certificate";
  }
  else {
    uint64_t v8 = "MFi40Attestation-Intermediate";
  }
  uint64_t v9 = 360;
  if (a3 == 6) {
    uint64_t v9 = 344;
  }
  uint64_t v10 = 368;
  if (a3 == 6) {
    uint64_t v10 = 352;
  }
  CFIndex v11 = *(void *)(a1 + v10);
  char v12 = *(const UInt8 **)(a1 + v9);
  mfi4Auth_util_packetLogging_logData(*(const void **)a1, v8, "MFi4Auth", v12, v11, 0);
  if (!v11 || !v12)
  {
    long long v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_2();
    }
LABEL_36:

    return 1;
  }
  uint64_t v13 = CTCompressComputeBufferSize((unint64_t)v12, v11, &size);
  if (!v13)
  {
    long long v14 = malloc_type_malloc(size, 0x83F000F1uLL);
    if (v14)
    {
      BOOL v15 = v14;
      uint64_t v16 = CTCompress((unint64_t)v12, v11, v14, size);
      if (v16)
      {
        unint64_t v22 = logObjectForModule_30();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110146;
          int v25 = v16;
          __int16 v26 = 1024;
          *(_DWORD *)long long v27 = a3;
          *(_WORD *)&v27[4] = 2048;
          *(void *)&v27[6] = v11;
          *(_WORD *)&v27[14] = 1040;
          *(_DWORD *)&v27[16] = v11;
          __int16 v28 = 2096;
          BOOL v29 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CTCompress: error: %d, certType %d, cert_resp: (%zu bytes)\n%{coreacc:bytes}.*P>", buf, 0x28u);
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          BOOL v17 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          BOOL v17 = &_os_log_default;
          id v18 = &_os_log_default;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          int v25 = a3;
          __int16 v26 = 2048;
          *(void *)long long v27 = v11;
          *(_WORD *)&v27[8] = 2048;
          *(void *)&unsigned char v27[10] = size;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AuthCert:: certType %d, cert_resp_len %zu, compressedLength %zu", buf, 0x1Cu);
        }

        iAP2MsgInitWithSom(*a2, v6, 20755, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
        iAP2MsgAddU8Param(*a2, 0, 0, a3);
        iAP2MsgAddDataParam(*a2, 0, 1, v15, (unsigned __int16)size);
        if (a3 == 6) {
          iAP2MsgAddArrayU8Param(*a2, 0, 2, a1 + 272, 0x10u);
        }
        *(_WORD *)(a1 + 28) = 20755;
      }
      free(v15);
      return v16;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = v13;
  unint64_t v21 = logObjectForModule_30();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67110146;
    int v25 = v16;
    __int16 v26 = 1024;
    *(_DWORD *)long long v27 = a3;
    *(_WORD *)&v27[4] = 2048;
    *(void *)&v27[6] = v11;
    *(_WORD *)&v27[14] = 1040;
    *(_DWORD *)&v27[16] = v11;
    __int16 v28 = 2096;
    BOOL v29 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CTCompressComputeBufferSize: error: %d, certType %d, cert_resp: (%zu bytes)\n%{coreacc:bytes}.*P>", buf, 0x28u);
  }

  return v16;
}

uint64_t mfi4Auth_protocol_handle_AuthCert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unsigned int v93 = 1;
  char v92 = 0;
  size_t size = 0;
  if (!a1)
  {
    int v84 = logObjectForModule_30();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthCert_cold_1();
    }
    goto LABEL_190;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v84 = logObjectForModule_30();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_4();
    }
    goto LABEL_190;
  }
  if (!a2)
  {
    int v84 = logObjectForModule_30();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthCert_cold_2();
    }
LABEL_190:

    __int16 v28 = 0;
    long long v27 = 0;
    CFDataRef v19 = 0;
    goto LABEL_181;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  uint64_t DataAsData = 0;
  unsigned __int16 v7 = 0;
  int v8 = 0;
  uint64_t v89 = v3;
  uint64_t v9 = (_OWORD *)(v3 + 288);
  unsigned int DataAsU8 = 13;
  while (1)
  {
    if (!FirstParam)
    {
      if (DataAsU8 >= 4)
      {
LABEL_60:
        CFDataRef v19 = 0;
      }
      else
      {
        if (DataAsU8)
        {
          unsigned int v93 = CTDecompressComputeBufferSize((unint64_t)DataAsData, v7, &size);
          if (v93)
          {
            __int16 v83 = logObjectForModule_30();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_16();
            }
            goto LABEL_177;
          }
          id v18 = (const UInt8 *)malloc_type_malloc(size, 0x7B95809FuLL);
          if (!v18)
          {
            unsigned int v93 = -1;
            __int16 v83 = logObjectForModule_30();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_14();
            }
            goto LABEL_177;
          }
          CFDataRef v19 = v18;
          unsigned int v93 = CTDecompress((unint64_t)DataAsData, v7, (unint64_t)v18, size);
          if (v93)
          {
            __int16 v83 = logObjectForModule_30();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_15();
            }
            goto LABEL_177;
          }
          if (DataAsU8 == 3) {
            long long v20 = "MFi40Accessory-Certificate";
          }
          else {
            long long v20 = "MFi40Accessory-Intermediate";
          }
          unint64_t v21 = *(const void **)v89;
          size_t v22 = size;
LABEL_38:
          mfi4Auth_util_packetLogging_logData(v21, v20, "MFi4Auth", v19, v22, 1);
          if (gLogObjects && gNumLogObjects >= 56)
          {
            CFDataRef v24 = *(id *)(gLogObjects + 440);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            CFDataRef v24 = &_os_log_default;
            id v25 = &_os_log_default;
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v7;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(void *)&buf[10] = size;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: compressedLength %d, decompressedLength %zu", buf, 0x12u);
          }

          size_t v26 = size;
          if (size > 0x1000)
          {
            __int16 v83 = logObjectForModule_30();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_3();
            }
            goto LABEL_177;
          }
          switch(DataAsU8)
          {
            case 0u:
              if ((~v8 & 3) != 0) {
                goto LABEL_60;
              }
              uint64_t v3 = v89;
              if (*(_DWORD *)(v89 + 160))
              {
                *(void *)(v89 + 440) = v19;
                *(void *)(v89 + 448) = v26;
                *(_DWORD *)(v89 + 400) = 0;
              }
              else
              {
                *(void *)(v89 + 696) = v19;
                *(void *)(v89 + 704) = v26;
                *(_DWORD *)(v89 + 652) = 0;
              }
              *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)buf = v29;
              *(_OWORD *)&uint8_t buf[16] = v29;
              long long v30 = logObjectForModule_30();
              BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
              if ((v8 & 2) != 0)
              {
                if (v31)
                {
                  *(_WORD *)unsigned int v90 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: Accessory DID provide PrivacyPrefix!", v90, 2u);
                }

                uint64_t v32 = malloc_type_malloc(size + 16, 0xBF2ECA1DuLL);
                *uint64_t v32 = *v9;
                int v34 = size;
                memcpy(v32 + 1, v19, size);
                CC_LONG v33 = v34 + 16;
              }
              else
              {
                if (v31)
                {
                  *(_WORD *)unsigned int v90 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: Accessory did NOT provide PrivacyPrefix!", v90, 2u);
                }

                uint64_t v32 = malloc_type_malloc(size, 0x8B79EC4CuLL);
                memcpy(v32, v19, size);
                CC_LONG v33 = size;
              }
              CC_SHA256(v32, v33, buf);
              if (*(_DWORD *)(v89 + 160)) {
                uint64_t v35 = (uint64_t *)(v89 + 404);
              }
              else {
                uint64_t v35 = (uint64_t *)(v89 + 656);
              }
              uint64_t v36 = *v35;
              uint64_t v37 = v35[1];
              uint64_t v39 = v35[2];
              uint64_t v38 = v35[3];
              BOOL v43 = *(void *)buf != v36
                 || *(void *)&buf[8] != v37
                 || *(void *)&buf[16] != v39
                 || *(void *)&buf[24] != v38;
              if (v32) {
                free(v32);
              }
              if (!v43)
              {
                CFDataRef v19 = 0;
                long long v27 = 0;
                __int16 v28 = 0;
                goto LABEL_142;
              }
              unsigned int v93 = -1;
              __int16 v83 = logObjectForModule_30();
              if (!os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
                goto LABEL_177;
              }
              goto LABEL_215;
            case 1u:
              if (v8 != 3) {
                goto LABEL_60;
              }
              *(void *)(v89 + 456) = v19;
              *(void *)(v89 + 464) = v26;
              goto LABEL_118;
            case 2u:
              if (v8 != 3) {
                goto LABEL_60;
              }
              *(void *)(v89 + 472) = v19;
              *(void *)(v89 + 480) = v26;
              goto LABEL_118;
            case 3u:
              if ((~v8 & 3) != 0) {
                goto LABEL_60;
              }
              if (*(_DWORD *)(v89 + 160))
              {
                *(void *)(v89 + 440) = v19;
                *(void *)(v89 + 448) = v26;
                *(_DWORD *)(v89 + 400) = 3;
              }
              else
              {
                *(void *)(v89 + 696) = v19;
                *(void *)(v89 + 704) = v26;
                *(_DWORD *)(v89 + 652) = 3;
              }
              *(void *)&long long v44 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)buf = v44;
              *(_OWORD *)&uint8_t buf[16] = v44;
              uint64_t v45 = logObjectForModule_30();
              BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
              if ((v8 & 2) != 0)
              {
                if (v46)
                {
                  *(_WORD *)unsigned int v90 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: Accessory DID provide PrivacyPrefix!", v90, 2u);
                }

                id v47 = malloc_type_malloc(size + 16, 0xA17C5EFAuLL);
                *id v47 = *v9;
                int v49 = size;
                memcpy(v47 + 1, v19, size);
                CC_LONG v48 = v49 + 16;
              }
              else
              {
                if (v46)
                {
                  *(_WORD *)unsigned int v90 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: Accessory did NOT provide PrivacyPrefix!", v90, 2u);
                }

                id v47 = malloc_type_malloc(size, 0xC2BA274AuLL);
                memcpy(v47, v19, size);
                CC_LONG v48 = size;
              }
              CC_SHA256(v47, v48, buf);
              if (*(_DWORD *)(v89 + 160)) {
                id v50 = (uint64_t *)(v89 + 404);
              }
              else {
                id v50 = (uint64_t *)(v89 + 656);
              }
              uint64_t v51 = *v50;
              uint64_t v52 = v50[1];
              uint64_t v54 = v50[2];
              uint64_t v53 = v50[3];
              BOOL v58 = *(void *)buf != v51
                 || *(void *)&buf[8] != v52
                 || *(void *)&buf[16] != v54
                 || *(void *)&buf[24] != v53;
              if (v47) {
                free(v47);
              }
              if (v58)
              {
                unsigned int v93 = -1;
                __int16 v83 = logObjectForModule_30();
                if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
LABEL_215:
                }
                  mfi4Auth_protocol_handle_AuthCert_cold_11();
                goto LABEL_177;
              }
              size_t v26 = size;
LABEL_118:
              uint64_t CertificateRefWithBytes = __createCertificateRefWithBytes((uint64_t)v19, v26, DataAsU8);
              if (!CertificateRefWithBytes)
              {
                unsigned int v93 = -1;
                __int16 v83 = logObjectForModule_30();
                if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_5();
                }
                goto LABEL_177;
              }
              __int16 v28 = (const void *)CertificateRefWithBytes;
              uint64_t AuthorityKeyID = SecCertificateGetAuthorityKeyID();
              if (AuthorityKeyID)
              {
                int v61 = (void *)AuthorityKeyID;
                uint64_t v62 = SecCertificateCreateWithBytes();
                if (v62)
                {
                  CFDataRef v19 = (const UInt8 *)v62;
                  uint64_t SubjectKeyID = SecCertificateGetSubjectKeyID();
                  if (SubjectKeyID)
                  {
                    __int16 v64 = (const void *)SubjectKeyID;
                    uint64_t v65 = SecCertificateCreateWithBytes();
                    if (v65)
                    {
                      long long v27 = (const void *)v65;
                      uint64_t v66 = SecCertificateGetSubjectKeyID();
                      if (!v66)
                      {
                        unsigned int v93 = -1;
                        __int16 v87 = logObjectForModule_30();
                        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
                          mfi4Auth_protocol_handle_AuthCert_cold_8();
                        }

                        goto LABEL_180;
                      }
                      int v67 = (const void *)v66;
                      if (DataAsU8 != 2)
                      {
                        if (DataAsU8 != 1) {
                          goto LABEL_133;
                        }
                        int v68 = CFEqual(v61, v64);
                        int v69 = CFEqual(v61, v67);
                        __int16 v70 = logObjectForModule_30();
                        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109376;
                          *(_DWORD *)&uint8_t buf[4] = v68 != 0;
                          *(_WORD *)&uint8_t buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v69 != 0;
                          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: authorityIsRoot: dev:%d, prod:%d", buf, 0xEu);
                        }

                        if (!(v68 | v69))
                        {
LABEL_133:
                          uint64_t v3 = v89;
                          unsigned int inited = mfi4Auth_protocol_initMessage_RequestAuthCert(v89, a3, v61);
                          goto LABEL_134;
                        }
                        int v71 = logObjectForModule_30();
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: known skid", buf, 2u);
                        }

LABEL_132:
                        uint64_t v3 = v89;
LABEL_142:
                        unsigned int inited = mfi4Auth_protocol_validateCertChain(v3);
                        unsigned int v93 = inited;
                        if (inited) {
                          goto LABEL_182;
                        }
                        unsigned int v93 = mfi4Auth_protocol_validateSignature(v3);
                        if (v93) {
                          goto LABEL_63;
                        }
                        if (acc_userDefaults_BOOLForKey(@"PretendNFCAuthFailed"))
                        {
                          if (gLogObjects && gNumLogObjects >= 56)
                          {
                            long long v77 = *(id *)(gLogObjects + 440);
                          }
                          else
                          {
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              platform_connectionInfo_configStreamCategoryListReady_cold_1();
                            }
                            long long v77 = &_os_log_default;
                            id v79 = &_os_log_default;
                          }
                          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "mfi4Auth_protocol_handle_AuthCert";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&unsigned char buf[14] = 1;
                            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%s: PretendNFCAuthFailed!!!, set status(%d)", buf, 0x12u);
                          }

                          uint64_t v80 = v3;
                          int v81 = 1;
                          goto LABEL_158;
                        }
                        if (acc_userDefaults_BOOLForKey(@"PretendNFCAuthTimeout"))
                        {
                          long long v78 = logObjectForModule_30();
                          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "mfi4Auth_protocol_handle_AuthCert";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&unsigned char buf[14] = 2;
                            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%s: PretendNFCAuthTimeout!!!, ignore status(%d)", buf, 0x12u);
                          }

                          goto LABEL_159;
                        }
                        if (!*(_DWORD *)(v3 + 160))
                        {
                          uint64_t v80 = v3;
                          int v81 = 2;
LABEL_158:
                          mfi4Auth_protocol_handle_AuthState(v80, v81);
LABEL_159:
                          unsigned int v93 = 0;
                          goto LABEL_160;
                        }
                        unsigned int inited = mfi4Auth_protocol_initMessage_AuthenticationSucceeded(v3, a3);
LABEL_134:
                        unsigned int v93 = inited;
                        if (inited) {
                          goto LABEL_182;
                        }
                        goto LABEL_159;
                      }
                      int v73 = CFEqual(v61, v64);
                      int v74 = CFEqual(v61, v67);
                      CFArrayRef v75 = logObjectForModule_30();
                      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)&uint8_t buf[4] = v73 != 0;
                        *(_WORD *)&uint8_t buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v74 != 0;
                        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: authorityIsRoot: dev:%d, prod:%d", buf, 0xEu);
                      }

                      if (v73 | v74)
                      {
                        long long v76 = logObjectForModule_30();
                        uint64_t v3 = v89;
                        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: known skid", buf, 2u);
                        }

                        goto LABEL_142;
                      }
LABEL_62:
                      unsigned int v93 = -1;
                      uint64_t v3 = v89;
                      goto LABEL_63;
                    }
                    unsigned int v93 = -1;
                    CFStringRef v86 = logObjectForModule_30();
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
                      mfi4Auth_protocol_handle_AuthCert_cold_5();
                    }
                  }
                  else
                  {
                    unsigned int v93 = -1;
                    CFStringRef v86 = logObjectForModule_30();
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
                      mfi4Auth_protocol_handle_AuthCert_cold_8();
                    }
                  }

                  long long v27 = 0;
                  goto LABEL_180;
                }
                unsigned int v93 = -1;
                __int16 v85 = logObjectForModule_30();
                if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_5();
                }
              }
              else
              {
                unsigned int v93 = -1;
                __int16 v85 = logObjectForModule_30();
                if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_6();
                }
              }

              goto LABEL_179;
            default:
              if (DataAsU8) {
                goto LABEL_118;
              }
              CFDataRef v19 = 0;
              long long v27 = 0;
              __int16 v28 = 0;
              goto LABEL_132;
          }
        }
        size_t size = v7;
        int v23 = (UInt8 *)malloc_type_malloc(v7, 0x1D753783uLL);
        CFDataRef v19 = v23;
        if (v23)
        {
          memcpy(v23, DataAsData, size);
          unint64_t v21 = *(const void **)v89;
          size_t v22 = size;
          long long v20 = "MFi30Accessory-Certificate";
          goto LABEL_38;
        }
      }
      long long v27 = 0;
      __int16 v28 = 0;
      goto LABEL_62;
    }
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID != 2) {
      break;
    }
    int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v93, v9, 16);
    if (v93)
    {
      __int16 v83 = logObjectForModule_30();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        goto LABEL_172;
      }
      goto LABEL_177;
    }
    if (DataAsArrayU8 != 16)
    {
      unsigned int v93 = -1;
      __int16 v83 = logObjectForModule_30();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthCert_cold_18();
      }
      goto LABEL_177;
    }
    v8 |= 4u;
LABEL_25:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v92);
    if (v92)
    {
LABEL_170:
      __int16 v28 = 0;
      long long v27 = 0;
      CFDataRef v19 = 0;
      unsigned int v93 = -1;
      goto LABEL_180;
    }
  }
  if (ParamID != 1)
  {
    if (!ParamID)
    {
      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, &v93);
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        long long v14 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v13;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
        id v17 = &_os_log_default;
        long long v14 = &_os_log_default;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = DataAsU8;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_handle_AuthCert: certType:%d", buf, 8u);
      }

      if (v93) {
        goto LABEL_178;
      }
      if (DataAsU8 >= 0xD) {
        goto LABEL_170;
      }
      v8 |= 1u;
    }
    goto LABEL_25;
  }
  uint64_t DataAsData = (const void *)iAP2MsgGetDataAsData((uint64_t)FirstParam, &v93);
  unsigned __int16 ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
  if (!v93)
  {
    unsigned __int16 v7 = ParamValueLen;
    v8 |= 2u;
    goto LABEL_25;
  }
  __int16 v83 = logObjectForModule_30();
  if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
LABEL_172:
  }
    mfi4Auth_protocol_handle_AuthCert_cold_17();
LABEL_177:

LABEL_178:
  __int16 v28 = 0;
LABEL_179:
  long long v27 = 0;
  CFDataRef v19 = 0;
LABEL_180:
  uint64_t v3 = v89;
LABEL_181:
  unsigned int inited = v93;
LABEL_182:
  if (inited) {
LABEL_63:
  }
    mfi4Auth_protocol_handle_AuthState(v3, 1);
LABEL_160:
  if (v19) {
    CFRelease(v19);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v93;
}

uint64_t __createCertificateRefWithBytes(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2) {
    return 0;
  }
  long long v4 = +[NSData dataWithBytes:a1 length:a2];
  uint64_t CertificateRefWithData = __createCertificateRefWithData(v4, a3);

  return CertificateRefWithData;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthCert(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  if (!a1)
  {
    BOOL v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_1();
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    BOOL v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_6();
    }
    goto LABEL_19;
  }
  if (!a2)
  {
    BOOL v15 = logObjectForModule_30();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthCert_cold_2();
    }
LABEL_19:

    uint64_t v13 = 1;
    goto LABEL_12;
  }
  __int16 v6 = *(_WORD *)(a1 + 200);
  unsigned __int16 v7 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = (uint64_t)v7;
  if (v7)
  {
    iAP2MsgInitWithSom((uint64_t)v7, v6, 20754, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
    if (v5)
    {
      uint64_t v8 = *a2;
      id v9 = [v5 bytes];
      uint64_t v10 = v8;
      __int16 v11 = 1;
      unsigned int v12 = 20;
    }
    else
    {
      uint64_t v10 = *a2;
      if (*(_DWORD *)(a1 + 160)) {
        id v9 = (id)(a1 + 404);
      }
      else {
        id v9 = (id)(a1 + 656);
      }
      __int16 v11 = 0;
      unsigned int v12 = 32;
    }
    iAP2MsgAddArrayU8Param(v10, 0, v11, (uint64_t)v9, v12);
    uint64_t v13 = 0;
    *(_WORD *)(a1 + 28) = 20754;
  }
  else
  {
    uint64_t v16 = logObjectForModule_30();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthCert_cold_3();
    }

    uint64_t v13 = 0xFFFFFFFFLL;
  }
LABEL_12:

  return v13;
}

uint64_t mfi4Auth_protocol_validateCertChain(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray arrayWithCapacity:3];
  uint64_t v3 = (void *)v2;
  if (!a1)
  {
    int v34 = logObjectForModule_30();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_3();
    }
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v34 = logObjectForModule_30();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_8();
    }
LABEL_69:
    uint64_t v30 = 0xFFFFFFFFLL;
LABEL_73:

    goto LABEL_54;
  }
  if (!v2)
  {
    int v34 = logObjectForModule_30();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_4();
    }
    uint64_t v30 = 2;
    goto LABEL_73;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 55;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (*(_DWORD *)(a1 + 160))
  {
    if (v5)
    {
      __int16 v6 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v6 = &_os_log_default;
      id v8 = &_os_log_default;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v9 = *(_DWORD *)(a1 + 160);
      uint64_t v10 = *(void *)(a1 + 448);
      int v11 = *(_DWORD *)(a1 + 400);
      uint64_t v12 = *(void *)(a1 + 464);
      int v35 = 136316418;
      uint64_t v36 = "mfi4Auth_protocol_validateCertChain";
      __int16 v37 = 1024;
      int v38 = 2448;
      __int16 v39 = 1024;
      int v40 = v9;
      __int16 v41 = 2048;
      uint64_t v42 = v10;
      __int16 v43 = 1024;
      int v44 = v11;
      __int16 v45 = 2048;
      uint64_t v46 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d negotiatedAuthType %d, cert_init_len %zu, cert_init_type %d, intermediate1_cert_init_len %zu", (uint8_t *)&v35, 0x32u);
    }

    if (!*(void *)(a1 + 448)) {
      goto LABEL_64;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 400);
    if (v13)
    {
      if (!*(void *)(a1 + 464)) {
        goto LABEL_64;
      }
    }
    long long v14 = (void *)(a1 + 440);
  }
  else
  {
    if (v5)
    {
      unsigned __int16 v7 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned __int16 v7 = &_os_log_default;
      id v15 = &_os_log_default;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 160);
      uint64_t v17 = *(void *)(a1 + 704);
      int v18 = *(_DWORD *)(a1 + 652);
      uint64_t v19 = *(void *)(a1 + 464);
      int v35 = 136316418;
      uint64_t v36 = "mfi4Auth_protocol_validateCertChain";
      __int16 v37 = 1024;
      int v38 = 2433;
      __int16 v39 = 1024;
      int v40 = v16;
      __int16 v41 = 2048;
      uint64_t v42 = v17;
      __int16 v43 = 1024;
      int v44 = v18;
      __int16 v45 = 2048;
      uint64_t v46 = v19;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s:%d negotiatedAuthType %d, leafCertLen %zu, leafCertType %d, intermediate1_cert_init_len %zu", (uint8_t *)&v35, 0x32u);
    }

    if (!*(void *)(a1 + 704)) {
      goto LABEL_64;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 652);
    if (v13)
    {
      if (!*(void *)(a1 + 464)) {
        goto LABEL_64;
      }
    }
    long long v14 = (void *)(a1 + 696);
  }
  if (!*v14) {
    goto LABEL_64;
  }
  long long v20 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:");
  [v3 addObject:v20];

  if (*(void *)(a1 + 464))
  {
    unint64_t v21 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(void *)(a1 + 456));
    [v3 addObject:v21];
  }
  if (*(void *)(a1 + 480))
  {
    size_t v22 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(void *)(a1 + 472));
    [v3 addObject:v22];
  }
  if (![v3 count]
    || (v13 > 9 ? (uint64_t v23 = 0xFFFFFFFFLL) : (uint64_t v23 = dword_1001B8F00[v13]),
        +[MFAACertificateManager sharedManager],
        CFDataRef v24 = objc_claimAutoreleasedReturnValue(),
        id v25 = [v24 copyParsedCertificateChainInfoFromCerts:v3 assumeType:v23],
        v24,
        !v25))
  {
LABEL_64:
    uint64_t v30 = 2;
    goto LABEL_54;
  }
  size_t v26 = +[MFAACertificateManager sharedManager];
  long long v27 = (char *)[v26 copyEvaluatedCertificateChainInfo:v25];

  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v28 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v28 = &_os_log_default;
    id v29 = &_os_log_default;
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = 138412290;
    uint64_t v36 = v27;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_validateCertChain: certListDict %@", (uint8_t *)&v35, 0xCu);
  }

  if (v27)
  {
    uint64_t v30 = 0;
    goto LABEL_63;
  }
  uint64_t v30 = 0xFFFFFFFFLL;
LABEL_54:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v31 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v31 = &_os_log_default;
    id v32 = &_os_log_default;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_validateCertChain_cold_1();
  }

  long long v27 = 0;
LABEL_63:

  return v30;
}

uint64_t mfi4Auth_protocol_validateSignature(uint64_t a1)
{
  CFErrorRef error = 0;
  if (!a1)
  {
    __int16 v28 = logObjectForModule_30();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_1();
    }
    goto LABEL_72;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    __int16 v28 = logObjectForModule_30();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_15();
    }
    goto LABEL_72;
  }
  if (!*(_DWORD *)(a1 + 160))
  {
    int v11 = *(const UInt8 **)(a1 + 696);
    if (v11)
    {
      CFIndex v12 = *(void *)(a1 + 704);
      data[0] = 0;
      *(_OWORD *)&data[1] = *(_OWORD *)(a1 + 568);
      long long v34 = *(_OWORD *)(a1 + 552);
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)md = v13;
      long long v32 = v13;
      CC_SHA256(data, 0x21u, md);
      CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, v11, v12);
      CFDataRef v15 = CFDataCreate(kCFAllocatorDefault, md, 32);
      CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a1 + 584), 64);
      if (v14)
      {
        if (v15)
        {
          if (v16)
          {
            if (MFAAVerifyNonceSignature())
            {
              uint64_t v3 = 0;
              int v5 = 0;
              CFDataRef v6 = 0;
              int v9 = 0;
LABEL_26:
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v23 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v23 = &_os_log_default;
                id v24 = &_os_log_default;
              }
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)data = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_validateSignature: verification passed", data, 2u);
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              if (!v3) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }
            __int16 v28 = logObjectForModule_30();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_validateSignature_cold_7();
            }
          }
          else
          {
            __int16 v28 = logObjectForModule_30();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_validateSignature_cold_5();
            }
          }
        }
        else
        {
          __int16 v28 = logObjectForModule_30();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_validateSignature_cold_4();
          }
        }
      }
      else
      {
        __int16 v28 = logObjectForModule_30();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_validateSignature_cold_3();
        }
      }
    }
    else
    {
      __int16 v28 = logObjectForModule_30();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_validateSignature_cold_2();
      }
    }
LABEL_72:

    int v9 = 0;
    uint64_t v26 = 0xFFFFFFFFLL;
    goto LABEL_40;
  }
  uint64_t CertificateRefWithBytes = (__SecCertificate *)__createCertificateRefWithBytes(*(void *)(a1 + 440), *(void *)(a1 + 448), *(_DWORD *)(a1 + 400));
  if (!CertificateRefWithBytes)
  {
    __int16 v28 = logObjectForModule_30();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_8();
    }
    goto LABEL_72;
  }
  uint64_t v3 = CertificateRefWithBytes;
  BOOL v4 = SecCertificateCopyKey(CertificateRefWithBytes);
  if (!v4)
  {
    id v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_9();
    }
    int v9 = 0;
    CFDataRef v6 = 0;
    int v5 = 0;
    goto LABEL_60;
  }
  int v5 = v4;
  CFDataRef v6 = SecKeyCopyExternalRepresentation(v4, &error);
  if (error)
  {
    unsigned __int16 v7 = CFErrorCopyDescription(error);
    id v8 = v7;
    if (error)
    {
      id v29 = logObjectForModule_30();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_validateSignature_cold_14();
      }

      int v9 = 0;
      goto LABEL_60;
    }
  }
  if (!v6)
  {
    id v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_10();
    }
    int v9 = 0;
    CFDataRef v6 = 0;
LABEL_60:
    uint64_t v25 = 0xFFFFFFFFLL;
    goto LABEL_61;
  }
  int v9 = _dumpSimpleHex(v6);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v10 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v10 = &_os_log_default;
    id v17 = &_os_log_default;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)data = 138412290;
    *(void *)&data[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "validateSignature: keyRepresentation: %@\n", data, 0xCu);
  }

  int v18 = *(_DWORD **)(a1 + 96);
  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v6);
  uint64_t v21 = ccsigma_import_peer_verification_key((uint64_t)v18, Length, BytePtr);
  if (v21)
  {
    uint64_t v25 = v21;
    id v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_12();
    }
  }
  else
  {
    uint64_t v22 = ccsigma_verify(v18, a1 + 488, 32, a1 + 404);
    if (!v22) {
      goto LABEL_26;
    }
    uint64_t v25 = v22;
    id v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_11();
    }
  }
LABEL_61:

LABEL_35:
  CFRelease(v3);
  uint64_t v26 = v25;
LABEL_36:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_40:

  return v26;
}

uint64_t mfi4Auth_protocol_initMessage_AuthenticationSucceeded(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 30))
  {
    unsigned __int16 v7 = logObjectForModule_30();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_2();
    }
    goto LABEL_9;
  }
  if (!a2)
  {
    unsigned __int16 v7 = logObjectForModule_30();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_1();
    }
LABEL_9:

    return 1;
  }
  __int16 v4 = *(_WORD *)(a1 + 200);
  int v5 = malloc_type_malloc(0x48uLL, 0x109004066C3AFE2uLL);
  *a2 = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v5, v4, 20991, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
  uint64_t result = 0;
  *(_WORD *)(a1 + 28) = 20991;
  return result;
}

uint64_t mfi4Auth_protocol_handle_AuthFinish(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v13 = 1;
  if (!a1)
  {
    int v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_1();
    }
    goto LABEL_27;
  }
  if (a1[30])
  {
    int v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_4();
    }
    goto LABEL_27;
  }
  if (!a2)
  {
    int v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_2();
    }
    goto LABEL_27;
  }
  char v12 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID == 1)
    {
      int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v13, a1 + 488, 64);
      if (v13) {
        goto LABEL_15;
      }
      if (DataAsArrayU8 != 64) {
        return 0;
      }
    }
    else if (!ParamID)
    {
      int v8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v13, a1 + 404, 32);
      if (v13) {
        goto LABEL_15;
      }
      if (v8 != 32) {
        return 0;
      }
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v12);
    if (v12) {
      goto LABEL_14;
    }
  }
  uint64_t result = mfi4Auth_protocol_initMessage_RequestAuthCert((uint64_t)a1, a3, 0);
  unsigned int v13 = result;
  if (result)
  {
    int v11 = logObjectForModule_30();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_3();
    }
LABEL_27:

LABEL_14:
    if (v13)
    {
LABEL_15:
      mfi4Auth_protocol_handle_AuthState((uint64_t)a1, 1);
      return v13;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mfi4Auth_protocol_handle_AuthChallengeResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v16 = 1;
  if (!a1)
  {
    CFDataRef v14 = logObjectForModule_30();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_1();
    }
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    CFDataRef v14 = logObjectForModule_30();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_3();
    }
    goto LABEL_31;
  }
  if (!a2)
  {
    CFDataRef v14 = logObjectForModule_30();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_2();
    }
LABEL_31:

    goto LABEL_21;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
  int v7 = 0;
  char v15 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    switch(ParamID)
    {
      case 2:
        *(void *)(a1 + 688) = 32;
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v16, (void *)(a1 + 656), 32);
        unsigned int v10 = v16;
        if (v16 || DataAsArrayU8 != 32) {
          goto LABEL_20;
        }
        v7 |= 4u;
        break;
      case 1:
        int v12 = iAP2MsgGetDataAsArrayU8(FirstParam, &v16, (void *)(a1 + 552), 16);
        unsigned int v10 = v16;
        if (v16 || v12 != 16) {
          goto LABEL_20;
        }
        v7 |= 2u;
        break;
      case 0:
        int v9 = iAP2MsgGetDataAsArrayU8(FirstParam, &v16, (void *)(a1 + 584), 64);
        unsigned int v10 = v16;
        if (v16 || v9 != 64) {
          goto LABEL_20;
        }
        v7 |= 1u;
        break;
    }
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0, FirstParam, &v15);
    if (v15)
    {
      unsigned int v10 = v16;
LABEL_20:
      if (v10) {
        goto LABEL_21;
      }
      return 0;
    }
  }
  if ((~v7 & 7) == 0)
  {
    mfi4Auth_protocol_initMessage_RequestAuthCert(a1, a3, 0);
    return 0;
  }
  unsigned int v16 = -1;
LABEL_21:
  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return v16;
}

uint64_t mfi4Auth_protocol_handle_AuthenticationReset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_1();
    }
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_4();
    }
    goto LABEL_23;
  }
  if (!a2)
  {
    int v8 = logObjectForModule_30();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_2();
    }
LABEL_23:

    return 1;
  }
  if (acc_userDefaults_BOOLForKey(@"IgnoreAuthReset"))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v5 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AuthenticationReset: Ignored", v9, 2u);
    }

    return 0;
  }
  else
  {
    return mfi4Auth_protocol_initMessage_RequestAuthSetup(a1, a3);
  }
}

uint64_t mfi4Auth_protocol_handle_AuthenticationFailed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    id v7 = logObjectForModule_30();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_1();
    }
    goto LABEL_17;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    id v7 = logObjectForModule_30();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_3();
    }
    goto LABEL_17;
  }
  if (!a2)
  {
    id v7 = logObjectForModule_30();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_2();
    }
LABEL_17:

    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 88);
  if ((v3 & 3) == 1) {
    int v4 = 3;
  }
  else {
    int v4 = 12;
  }
  int v5 = v4 | v3;
  *(unsigned char *)(a1 + 88) = v5;
  if ((~v5 & 0xF) != 0) {
    mfi4Auth_protocol_initMessage_RequestAuthSetup(a1, a3);
  }
  else {
    mfi4Auth_protocol_handle_AuthState(a1, 1);
  }
  return 0;
}

uint64_t mfi4Auth_protocol_handle_AuthenticationSucceeded(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    BOOL v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationSucceeded_cold_1();
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    BOOL v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_2();
    }
    goto LABEL_64;
  }
  if (!a2)
  {
    BOOL v31 = logObjectForModule_30();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationSucceeded_cold_2();
    }
LABEL_64:

    return 1;
  }
  char v5 = *(unsigned char *)(a1 + 88);
  int v6 = v5 & 3;
  char v7 = v5 & 0xF3 | 8;
  char v8 = v5 & 0xFC | 2;
  if (v6 != 1) {
    char v8 = v7;
  }
  *(unsigned char *)(a1 + 88) = v8;
  mfi4Auth_protocol_handle_AuthState(a1, 2);
  switch(*(_DWORD *)(a1 + 32))
  {
    case 1:
      unsigned int v13 = (unsigned __int16 *)malloc_type_malloc(0x12uLL, 0x1000040BDFB0063uLL);
      if (!v13) {
        goto LABEL_57;
      }
      CFDataRef v14 = v13;
      for (uint64_t i = 0; i != 9; ++i)
        v13[i] = i + 20994;
      uint64_t inited = mfi4Auth_protocol_initMessage_RequestVendorNVMRead(a1, a3, v13, 9);
      free(v14);
      if (!inited) {
        goto LABEL_47;
      }
      return inited;
    case 4:
    case 0xC:
      __int16 v9 = *(_WORD *)(a1 + 200);
      uint64_t v10 = a1;
      int v11 = a3;
      unsigned int v12 = 21248;
      goto LABEL_35;
    case 5:
      if (*(unsigned char *)(a1 + 144) == 2)
      {
        uint64_t v17 = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(a1, *(_WORD *)(a1 + 200), a3, 0x5300u);
      }
      else
      {
        *(_WORD *)buf = 20736;
        uint64_t v17 = mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead(a1, a3, (unsigned __int16 *)buf, 1);
      }
      uint64_t inited = v17;
      if (v17) {
        return inited;
      }
      goto LABEL_47;
    case 6:
      if (!*(_DWORD *)(a1 + 36)) {
        goto LABEL_57;
      }
      int v18 = *(unsigned __int16 **)(a1 + 40);
      if (!v18) {
        goto LABEL_57;
      }
      uint64_t v19 = *(uint64_t **)(a1 + 48);
      if (!v19) {
        goto LABEL_57;
      }
      long long v20 = *(_DWORD **)(a1 + 56);
      if (!v20) {
        goto LABEL_57;
      }
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestUserNVMWrite(a1, *(_WORD *)(a1 + 200), a3, v18, v19, v20, *(_DWORD *)(a1 + 36), 0, 0);
      if (v21) {
        goto LABEL_65;
      }
      goto LABEL_47;
    case 7:
      if (!*(_DWORD *)(a1 + 36)) {
        goto LABEL_57;
      }
      uint64_t v22 = *(unsigned __int16 **)(a1 + 40);
      if (!v22) {
        goto LABEL_57;
      }
      int v23 = *(_DWORD *)(a1 + 36);
      goto LABEL_46;
    case 8:
      if (*(_DWORD *)(a1 + 36) && *(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 56))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v24 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v24 = &_os_log_default;
          id v28 = &_os_log_default;
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v29 = *(_DWORD *)(a1 + 36);
          int v30 = **(unsigned __int16 **)(a1 + 40);
          *(_DWORD *)buf = 67109376;
          int v33 = v29;
          __int16 v34 = 1024;
          int v35 = v30;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "kMfi4Auth_Action_WriteUserName: count:%d, [0]:0x%x", buf, 0xEu);
        }

        if (*(unsigned char *)(a1 + 144) == 2) {
          mfi4Auth_protocol_initMessage_RequestUserNVMWrite(a1, *(_WORD *)(a1 + 200), a3, *(unsigned __int16 **)(a1 + 40), *(uint64_t **)(a1 + 48), *(_DWORD **)(a1 + 56), *(unsigned __int8 *)(a1 + 36), 0, 0);
        }
        else {
          mfi4Auth_protocol_initMessage_RequestNVMAuthStart(a1, a3, 0x5300u);
        }
LABEL_47:
        uint64_t inited = 0;
      }
      else
      {
LABEL_57:
        uint64_t inited = 0xFFFFFFFFLL;
      }
      break;
    case 9:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v25 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v25 = &_os_log_default;
        id v26 = &_os_log_default;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "kMfi4Auth_Action_ReadUserName", buf, 2u);
      }

      uint64_t v22 = *(unsigned __int16 **)(a1 + 40);
      int v23 = *(unsigned __int8 *)(a1 + 36);
LABEL_46:
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestUserNVMRead(a1, a3, v22, v23, 0, 0);
      if (!v21) {
        goto LABEL_47;
      }
      goto LABEL_65;
    case 0xA:
      __int16 v9 = *(_WORD *)(a1 + 200);
      uint64_t v10 = a1;
      int v11 = a3;
      unsigned int v12 = 20992;
LABEL_35:
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(v10, v9, v11, v12);
      if (!v21) {
        goto LABEL_47;
      }
LABEL_65:
      uint64_t inited = v21;
      break;
    default:
      goto LABEL_47;
  }
  return inited;
}

uint64_t mfi4Auth_protocol_initIdentity(uint64_t a1, int a2)
{
  if (!a1)
  {
    CFDataRef v14 = logObjectForModule_30();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentity_cold_2();
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    CFDataRef v14 = logObjectForModule_30();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentity_cold_3();
    }
LABEL_25:

    uint64_t inited = 0;
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(a1 + 712);
  *(void *)(v4 + 128) = 97;
  char v5 = *(void **)(v4 + 120);
  if (v5)
  {
    free(v5);
    *(void *)(v4 + 120) = 0;
  }
  *(void *)(v4 + 120) = malloc_type_malloc(0x61uLL, 0xAF4FE5EFuLL);
  if (a2)
  {
    uint64_t inited = mfi4Auth_protocol_initIdentityCerts(a1);
  }
  else
  {
    *(void *)(a1 + 384) = 97;
    char v7 = malloc_type_malloc(0x61uLL, 0x3EB9FA32uLL);
    *(void *)(a1 + 376) = v7;
    if (v7
      && (*(void *)(a1 + 352) = 617,
          char v8 = malloc_type_malloc(0x269uLL, 0x496D8C48uLL),
          (*(void *)(a1 + 344) = v8) != 0)
      && (*(void *)(a1 + 368) = 557,
          __int16 v9 = malloc_type_malloc(0x22DuLL, 0x48AE6EB7uLL),
          (*(void *)(a1 + 360) = v9) != 0))
    {
      uint64_t v10 = *(void *)(a1 + 376);
      *(_OWORD *)(v10 + 32) = xmmword_1001B8EBE;
      *(_OWORD *)(v10 + 48) = unk_1001B8ECE;
      *(_OWORD *)(v10 + 64) = xmmword_1001B8EDE;
      *(_OWORD *)(v10 + 80) = unk_1001B8EEE;
      *(_OWORD *)uint64_t v10 = pvt_key_test;
      *(_OWORD *)(v10 + 16) = unk_1001B8EAE;
      *(unsigned char *)(v10 + 96) = -89;
      memcpy(*(void **)(a1 + 344), &cert_resp_test, 0x269uLL);
      memcpy(*(void **)(a1 + 360), &intermediate_cert_resp_test, 0x22DuLL);
      uint64_t inited = 0;
      *(void *)(a1 + 392) = 0;
    }
    else
    {
      uint64_t inited = 0xFFFFFFFFLL;
    }
  }
LABEL_11:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v11 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v11 = &_os_log_default;
    id v12 = &_os_log_default;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 67109120;
    v15[1] = inited;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initIdentity: error:%d", (uint8_t *)v15, 8u);
  }

  return inited;
}

uint64_t mfi4Auth_protocol_initIdentityCerts(uint64_t a1)
{
  uint64_t v18 = 0;
  CFArrayRef theArray = 0;
  if (!copyDeviceIdentityCertificates((uint64_t)&theArray, &v18)) {
    goto LABEL_25;
  }
  CFArrayRef v2 = theArray;
  if (theArray) {
    BOOL v3 = v18 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v13 = 0xFFFFFFFFLL;
    if (!theArray) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (CFArrayGetCount(theArray) != 2
    || !CFArrayGetValueAtIndex(theArray, 0)
    || !CFArrayGetValueAtIndex(theArray, 1))
  {
LABEL_25:
    uint64_t v13 = 0xFFFFFFFFLL;
    goto LABEL_14;
  }
  size_t Length = SecCertificateGetLength();
  uint64_t v5 = SecCertificateGetLength();
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 30))
    {
      size_t v6 = v5;
      char v7 = malloc_type_malloc(Length, 0xDD338A31uLL);
      *(void *)(a1 + 344) = v7;
      if (v7)
      {
        char v8 = malloc_type_malloc(v6, 0x3143B991uLL);
        *(void *)(a1 + 360) = v8;
        if (v8)
        {
          __int16 v9 = *(void **)(a1 + 344);
          BytePtr = (const void *)SecCertificateGetBytePtr();
          memcpy(v9, BytePtr, Length);
          int v11 = *(void **)(a1 + 360);
          id v12 = (const void *)SecCertificateGetBytePtr();
          memcpy(v11, v12, v6);
          uint64_t v13 = 0;
          *(void *)(a1 + 352) = Length;
          *(void *)(a1 + 368) = v6;
          *(void *)(a1 + 376) = 0;
          *(void *)(a1 + 392) = v18;
          goto LABEL_14;
        }
      }
      goto LABEL_25;
    }
    uint64_t v17 = logObjectForModule_30();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentityCerts_cold_3();
    }
  }
  else
  {
    uint64_t v17 = logObjectForModule_30();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentityCerts_cold_2();
    }
  }

  uint64_t v13 = 0;
LABEL_14:
  CFArrayRef v2 = theArray;
  if (theArray)
  {
LABEL_15:
    CFRelease(v2);
    CFArrayRef theArray = 0;
  }
LABEL_16:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFDataRef v14 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFDataRef v14 = &_os_log_default;
    id v15 = &_os_log_default;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initIdentityCerts: error:%d", buf, 8u);
  }

  return v13;
}

uint64_t mfi4Auth_protocol_initIdentityCertStates()
{
  return _MFAADeviceIdentityInitCertStates();
}

uint64_t copyDeviceIdentityCertificates(uint64_t a1, void *a2)
{
  BOOL v3 = +[ACCUserDefaults sharedDefaults];
  id v4 = [v3 integerForKey:@"IdentityCertRefreshInterval"];
  double v5 = (double)(uint64_t)v4;

  if (!v4) {
    double v5 = 86400.0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    size_t v6 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    size_t v6 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "copyDeviceIdentityCertificates interval: %f\n", buf, 0xCu);
  }

  char v8 = +[NSNumber numberWithUnsignedLongLong:4];
  __int16 v9 = +[NSNumber numberWithDouble:v5, @"Count", @"RefreshInterval", v8];
  v17[1] = v9;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:v17 forKeys:&v16 count:2];
  int v11 = +[NSMutableDictionary dictionaryWithDictionary:v10];

  uint64_t v12 = MFAADeviceIdentityCopyCertificate();
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v13 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v13 = &_os_log_default;
    id v14 = &_os_log_default;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "copyDeviceIdentityCertificates completed: %d\n", buf, 8u);
  }

  if (!*a2) {
    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t seckey_sign(uint64_t a1, CFIndex a2, const UInt8 *a3, size_t *a4, void *a5)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v9 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v9 = &_os_log_default;
    id v10 = &_os_log_default;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v29) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "seckey_sign\n", (uint8_t *)&v29, 2u);
  }

  CFDataRef v11 = CFDataCreate(kCFAllocatorDefault, a3, a2);
  CFDataRef Signature = (const __CFData *)MFAADeviceIdentityCreateSignature();
  CFDataRef v13 = Signature;
  if (Signature)
  {
    unint64_t v14 = *a4;
    if (v14 >= CFDataGetLength(Signature))
    {
      *a4 = CFDataGetLength(v13);
      BytePtr = CFDataGetBytePtr(v13);
      memcpy(a5, BytePtr, *a4);
      uint64_t v17 = _dumpSimpleHex(v11);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v18 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v18 = &_os_log_default;
        id v25 = &_os_log_default;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 138412290;
        int v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "seckey_sign: challenge: %@\n", (uint8_t *)&v29, 0xCu);
      }

      id v26 = _dumpSimpleHex(v13);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        long long v27 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        long long v27 = &_os_log_default;
        id v28 = &_os_log_default;
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 138412290;
        int v30 = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "seckey_sign: signature: %@\n", (uint8_t *)&v29, 0xCu);
      }

      uint64_t v20 = 0;
LABEL_58:
      CFRelease(v13);
      if (!v11) {
        return v20;
      }
      goto LABEL_42;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v15 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v15 = &_os_log_default;
      id v21 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "seckey_sign: signature buffer is too small\n", (uint8_t *)&v29, 2u);
    }
    uint64_t v20 = 4294967289;
  }
  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v15 = *(id *)(gLogObjects + 440);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v15 = &_os_log_default;
      id v19 = &_os_log_default;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "seckey_sign: MFAADeviceIdentityCreateSignature error\n", (uint8_t *)&v29, 2u);
    }
    uint64_t v20 = 0xFFFFFFFFLL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v22 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v22 = &_os_log_default;
    id v23 = &_os_log_default;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = 67109120;
    LODWORD(v30) = v20;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "seckey_sign: error: %d\n", (uint8_t *)&v29, 8u);
  }

  if (v13) {
    goto LABEL_58;
  }
  if (v11) {
LABEL_42:
  }
    CFRelease(v11);
  return v20;
}

uint64_t mfi4Auth_protocol_processIncomingMessage(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 30))
    {
      CFDataRef v13 = logObjectForModule_30();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessage_cold_27();
      }
    }
    else if (a3)
    {
      int MsgID = iAP2MsgGetMsgID(a3);
      if (MsgID)
      {
        int v9 = MsgID;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v10 = *(id *)(gLogObjects + 440);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v10 = &_os_log_default;
          id v11 = &_os_log_default;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(unsigned __int16 *)(a1 + 28);
          v28[0] = 67109376;
          v28[1] = v12;
          __int16 v29 = 1024;
          int v30 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_processIncomingMessage: cmd:0x%x  rsp:0x%x", (uint8_t *)v28, 0xEu);
        }

        if (v9 > 21241)
        {
          switch(v9)
          {
            case 21242:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                unint64_t v14 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                unint64_t v14 = &_os_log_default;
                id v19 = &_os_log_default;
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_9();
              }

              return 1;
            case 21245:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v15 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v15 = &_os_log_default;
                id v20 = &_os_log_default;
              }
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_20();
              }

              if (!mfi4Auth_protocol_handle_AuthenticationReset(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_19();
              }
              break;
            case 21246:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v16 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v16 = &_os_log_default;
                id v21 = &_os_log_default;
              }
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_22();
              }

              mfi4Auth_protocol_handle_AuthenticationFailed(a1, a3, a4);
              return 1;
            case 21247:
              if (!a2) {
                goto LABEL_103;
              }
              int v17 = *(_DWORD *)(a1 + 160);
              if ((v17 - 3) < 0xFFFFFFFE) {
                goto LABEL_103;
              }
              if (v17 == 2)
              {
                if (*(_WORD *)(a1 + 28) != 20991) {
                  goto LABEL_103;
                }
              }
              else if (v17 == 1 && *(unsigned __int16 *)(a1 + 28) - 20757 < 0xFFFFFFFE)
              {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v26 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v26 = &_os_log_default;
                id v27 = &_os_log_default;
              }
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v28[0]) = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received AuthenticationSucceeded", (uint8_t *)v28, 2u);
              }

              if (!mfi4Auth_protocol_handle_AuthenticationSucceeded(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_24();
              }
              break;
            default:
LABEL_69:
              if (gLogObjects && gNumLogObjects >= 56)
              {
                CFDataRef v13 = *(id *)(gLogObjects + 440);
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                CFDataRef v13 = &_os_log_default;
                id v22 = &_os_log_default;
              }
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
              }
              break;
          }
        }
        else
        {
          switch(v9)
          {
            case 21009:
              if (a2 || *(_DWORD *)(a1 + 160) != 1 || *(_WORD *)(a1 + 28) != 20752) {
                goto LABEL_103;
              }
              if (!mfi4Auth_protocol_handle_AuthStart(a1, a3)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_11();
              }
              break;
            case 21010:
              if (!a2) {
                goto LABEL_103;
              }
              int v18 = *(_DWORD *)(a1 + 160);
              if ((v18 - 3) <= 0xFFFFFFFD)
              {
                CFDataRef v13 = logObjectForModule_30();
                if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                  break;
                }
                goto LABEL_140;
              }
              if (v18 == 2)
              {
                if ((*(_WORD *)(a1 + 28) & 0xFFFD) != 0x5111)
                {
                  CFDataRef v13 = logObjectForModule_30();
                  if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                    break;
                  }
                  goto LABEL_140;
                }
              }
              else if (v18 == 1 && *(unsigned __int16 *)(a1 + 28) - 20757 <= 0xFFFFFFFD)
              {
                CFDataRef v13 = logObjectForModule_30();
                if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                  break;
                }
LABEL_140:
                mfi4Auth_protocol_processIncomingMessage_cold_12();
                break;
              }
              if (!mfi4Auth_protocol_handle_RequestAuthCert(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_13();
              }
              break;
            case 21011:
              if (!a2 && *(_DWORD *)(a1 + 160) || *(_WORD *)(a1 + 28) != 20754) {
                goto LABEL_103;
              }
              if (!mfi4Auth_protocol_handle_AuthCert(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_16();
              }
              break;
            case 21012:
              if (!a2 || *(_DWORD *)(a1 + 160) != 2 || (*(_WORD *)(a1 + 28) & 0xFFFD) != 0x5111) {
                goto LABEL_103;
              }
              if (!mfi4Auth_protocol_handle_AuthFinish((unsigned char *)a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_17();
              }
              break;
            case 21013:
              goto LABEL_69;
            case 21014:
              if (a2 || *(_DWORD *)(a1 + 160)) {
                goto LABEL_103;
              }
              if (!mfi4Auth_protocol_handle_AuthChallengeResponse(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_18();
              }
              break;
            default:
              if (v9 != 20993)
              {
                if (v9 != 20994) {
                  goto LABEL_69;
                }
                if (!a2 && *(_WORD *)(a1 + 28) == 20736)
                {
                  mfi4Auth_protocol_handle_AuthSetupFailed(a1, a3);
                  return 1;
                }
                goto LABEL_103;
              }
              if (a2 || *(_WORD *)(a1 + 28) != 20736) {
                goto LABEL_103;
              }
              if (!mfi4Auth_protocol_handle_AuthSetup(a1, a3, a4)) {
                return 1;
              }
              CFDataRef v13 = logObjectForModule_30();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_8();
              }
              break;
          }
        }
      }
      else
      {
        CFDataRef v13 = logObjectForModule_30();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_processIncomingMessage_cold_5();
        }
      }
    }
    else
    {
      CFDataRef v13 = logObjectForModule_30();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessage_cold_4();
      }
    }
  }
  else
  {
    CFDataRef v13 = logObjectForModule_30();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessage_cold_3();
    }
  }

LABEL_103:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v23 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v23 = &_os_log_default;
    id v24 = &_os_log_default;
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessage_cold_1();
  }

  return 0;
}

uint64_t mfi4Auth_protocol_processIncomingMessageExtra(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  if (!a1)
  {
    id v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_3();
    }
    goto LABEL_63;
  }
  if (*(unsigned char *)(a1 + 30))
  {
    id v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_9();
    }
    goto LABEL_63;
  }
  if (!a3)
  {
    id v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_4();
    }
    goto LABEL_63;
  }
  int MsgID = iAP2MsgGetMsgID(a3);
  if (!MsgID)
  {
    id v20 = logObjectForModule_30();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessage_cold_5();
    }
LABEL_63:

    goto LABEL_64;
  }
  int v11 = MsgID;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v12 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int16 *)(a1 + 28);
    v22[0] = 67109376;
    v22[1] = v14;
    __int16 v23 = 1024;
    int v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_processIncomingMessageExtra: cmd:0x%x  rsp:0x%x", (uint8_t *)v22, 0xEu);
  }

  if (v11 <= 21060)
  {
    switch(v11)
    {
      case 21045:
        if (!a2 || mfi4Auth_protocol_handle_NVMWriteResponse(a1, a2, a3, a4)) {
          goto LABEL_64;
        }
        return 1;
      case 21046:
      case 21047:
      case 21049:
      case 21051:
      case 21052:
      case 21053:
        goto LABEL_30;
      case 21048:
        if (!a2 || mfi4Auth_protocol_handle_NVMEraseResponse(a1, a3)) {
          goto LABEL_64;
        }
        return 1;
      case 21050:
        if (!a2 || mfi4Auth_protocol_handle_NVMPublicKeyChallenge(a1, a2, a3, a4, a5)) {
          goto LABEL_64;
        }
        return 1;
      case 21054:
        if (!a2
          || *(_WORD *)(a1 + 28) != 20797
          || mfi4Auth_protocol_handle_NVMAuthStart(a1, a3, (uint64_t)a4, (uint64_t)a5))
        {
          goto LABEL_64;
        }
        return 1;
      default:
        if (v11 != 21042) {
          goto LABEL_30;
        }
        if (!a2) {
          goto LABEL_64;
        }
        unsigned int v15 = *(unsigned __int16 *)(a1 + 28) - 20784;
        if (v15 > 0x12
          || ((1 << v15) & 0x40003) == 0
          || mfi4Auth_protocol_handle_NVMReadResponse(a1, a3, a4))
        {
          goto LABEL_64;
        }
        return 1;
    }
  }
  if (v11 == 21061)
  {
    if (!a2
      || *(_WORD *)(a1 + 28) != 20799
      || mfi4Auth_protocol_handle_NVMAuthFinish(a1, a3, a4, (uint64_t)a5))
    {
      goto LABEL_64;
    }
  }
  else
  {
    if (v11 != 21066)
    {
LABEL_30:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v16 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v16 = &_os_log_default;
        id v19 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
      }
      uint64_t v17 = 1;
      goto LABEL_54;
    }
    if (!a2
      || *(_WORD *)(a1 + 28) != 20809
      || mfi4Auth_protocol_handle_NVMOperationResponse(a1, a3, a4, (uint64_t)a5))
    {
LABEL_64:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v16 = *(id *)(gLogObjects + 440);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v16 = &_os_log_default;
        id v21 = &_os_log_default;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageExtra_cold_1();
      }
      uint64_t v17 = 0;
LABEL_54:

      return v17;
    }
  }
  return 1;
}

uint64_t __createCertificateRefWithData(void *a1, int a2)
{
  id v3 = a1;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v4 = *(id *)(gLogObjects + 440);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315394;
    unsigned int v15 = "__createCertificateRefWithData";
    __int16 v16 = 2048;
    id v17 = [v3 length];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s (certData.length: %lu)", (uint8_t *)&v14, 0x16u);
  }

  if (v3)
  {
    if (!a2)
    {
      id v10 = (void *)SecCMSCertificatesOnlyMessageCopyCertificates();
      int v9 = v10;
      if (!v10 || ![v10 count])
      {
        id v12 = v3;
        [v12 bytes];
        [v12 length];
        uint64_t v11 = SecCertificateCreateWithBytes();
        goto LABEL_20;
      }
LABEL_18:
      uint64_t v11 = [v9 objectAtIndexedSubscript:0];
LABEL_20:
      uint64_t v7 = v11;
      goto LABEL_21;
    }
    id v6 = v3;
    [v6 bytes];
    [v6 length];
    uint64_t v7 = SecCertificateCreateWithBytes();
    if (!v7)
    {
      char v8 = (void *)SecCMSCertificatesOnlyMessageCopyCertificates();
      int v9 = v8;
      if (!v8 || ![v8 count])
      {
        uint64_t v7 = 0;
LABEL_21:

        goto LABEL_22;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_22:

  return v7;
}

void sub_100151558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_10015220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100152450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001526F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t t56_protocol_init(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, __int16 a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v11 = a2;
    uint64_t v12 = a6;
    id v13 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v12 = a6;
    id v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    id v19 = "t56_protocol_init";
    __int16 v20 = 1024;
    int v21 = 81;
    __int16 v22 = 1024;
    int v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s:%d role %d", buf, 0x18u);
  }
  uint64_t v14 = 4294967294;
  if (a1 && a4 && a5 <= 1)
  {
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 8) = a3;
    *(_WORD *)(a1 + 32) = a7;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 13) = a4;
    *(unsigned char *)(a1 + 14) = a5;
    *(unsigned char *)(a1 + 12) = a5;
    *(unsigned char *)(a1 + 40) = 5;
    *(_DWORD *)(a1 + 44) = -1;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 84) = 0xFFFFFFFF00000000;
    uint64_t v14 = t56_util_init(a1);
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v15 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_init_cold_1();
  }
  return v14;
}

void t56_protocol_cleanup(uint64_t a1, void *a2, _WORD *a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      id v6 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      id v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 122;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s:%d role %d", (uint8_t *)&v14, 0x18u);
    }
    t56_util_cleanup(a1);
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 14);
    *(_DWORD *)(a1 + 36) = 0;
    if (a2) {
      *a2 = *(void *)(a1 + 24);
    }
    if (a3) {
      *a3 = *(_WORD *)(a1 + 32);
    }
    if (gLogObjects && gNumLogObjects >= 61)
    {
      char v8 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      char v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 140;
      __int16 v18 = 1024;
      int v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s:%d role %d, clear authState and rx digest / cert cache", (uint8_t *)&v14, 0x18u);
    }
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 44);
    if ((v10 & 0x80000000) == 0)
    {
      t56_util_cancelTimer((const void **)a1, v10);
      *(_DWORD *)(a1 + 44) = -1;
    }
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v11 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 153;
      __int16 v18 = 1024;
      int v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s:%d role %d, clear tx digest / cert cache", (uint8_t *)&v14, 0x18u);
    }
    unsigned int v13 = *(_DWORD *)(a1 + 88);
    if ((v13 & 0x80000000) == 0)
    {
      t56_util_cancelTimer((const void **)a1, v13);
      *(_DWORD *)(a1 + 88) = -1;
    }
  }
}

uint64_t t56_protocol_start(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24) || !*(_WORD *)(a1 + 32))
  {
    uint64_t v3 = 4294967294;
    goto LABEL_20;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    CFArrayRef v2 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    CFArrayRef v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(unsigned __int16 *)(a1 + 32);
    int v22 = 136315906;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 175;
    __int16 v26 = 1024;
    unsigned int v27 = v5;
    __int16 v28 = 1024;
    int v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d role %d, outMsgBufferSize %d", (uint8_t *)&v22, 0x1Eu);
  }
  if (*(_DWORD *)(a1 + 8)
    || (int v12 = *(unsigned __int8 **)(a1 + 24)) == 0
    || (unsigned int v13 = *(unsigned __int16 *)(a1 + 32), v13 < 7))
  {
    int inited = -2;
LABEL_14:
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    if (v8 == 1) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = inited;
    }
    if (v8 >= 2) {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v3 = v9;
    }
    goto LABEL_20;
  }
  int inited = t56_protocol_initMsg_SESSION(v4, 0, 1, 0, v12, v13, (_WORD *)(a1 + 34));
  if (inited) {
    goto LABEL_14;
  }
  unsigned int v14 = t56_protocol_timeoutForRequest(a1, **(unsigned __int8 **)(a1 + 24));
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) == 0)
  {
    unsigned int v15 = logObjectForModule_29();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 36);
      if ((v16 - 1) > 7) {
        int v17 = "UNKNOWN";
      }
      else {
        int v17 = off_10021A7C8[v16 - 1];
      }
      int v22 = 136316162;
      int v23 = "t56_protocol_start";
      __int16 v24 = 1024;
      int v25 = 194;
      __int16 v26 = 1024;
      unsigned int v27 = v14;
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 2080;
      BOOL v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s:%d Cancel responseTimer, %u ms, outMsgType %u(%s)", (uint8_t *)&v22, 0x28u);
    }
    t56_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 44));
  }
  __int16 v18 = logObjectForModule_29();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = **(unsigned __int8 **)(a1 + 24);
    int v22 = 136315906;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 198;
    __int16 v26 = 1024;
    unsigned int v27 = v14;
    __int16 v28 = 1024;
    int v29 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", (uint8_t *)&v22, 0x1Eu);
  }
  int v20 = t56_util_callbackOnTimer((const void **)a1, v14, (uint64_t)_T56Protocol_timeoutCallback, 0);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 44) = v20;
    t56_protocol_sendData(a1, *(const UInt8 **)(a1 + 24), *(unsigned __int16 *)(a1 + 34));
    int inited = 0;
    goto LABEL_14;
  }
  int v21 = logObjectForModule_29();
  uint64_t v3 = 0;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315394;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 201;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s:%d Failed to start timer!!!", (uint8_t *)&v22, 0x12u);
    uint64_t v3 = 0;
  }
LABEL_20:
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v10 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_start_cold_1();
  }
  return v3;
}

uint64_t t56_protocol_initMsg_SESSION(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, _WORD *a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v12 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    int v21 = "t56_protocol_initMsg_SESSION";
    __int16 v22 = 1024;
    int v23 = 1267;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d sessionID %d, version %d, sessionCommand %d", buf, 0x24u);
  }
  uint64_t v13 = 4294967294;
  if (a5 && a6 >= 7)
  {
    uint64_t v13 = 0;
    *a5 = 1;
    a5[1] = BYTE1(a2);
    a5[2] = a2;
    a5[3] = BYTE1(a3);
    a5[4] = a3;
    a5[5] = a4;
    a5[6] = 0;
    *a7 = 7;
  }
  int v14 = *a5;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v15 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if ((v14 - 1) > 7u)
    {
      int v17 = "UNKNOWN";
      if (a7) {
        goto LABEL_20;
      }
    }
    else
    {
      int v17 = off_10021A7C8[(char)(v14 - 1)];
      if (a7)
      {
LABEL_20:
        int v18 = (unsigned __int16)*a7;
LABEL_23:
        *(_DWORD *)buf = 136316674;
        int v21 = "t56_protocol_initMsg_SESSION";
        __int16 v22 = 1024;
        int v23 = 1287;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = v14;
        __int16 v30 = 2080;
        BOOL v31 = v17;
        __int16 v32 = 1024;
        int v33 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v13;
      }
    }
    int v18 = -1;
    goto LABEL_23;
  }
  return v13;
}

uint64_t t56_protocol_timeoutForRequest(uint64_t a1, int a2)
{
  if (a2 - 1) < 7 && ((0x75u >> (a2 - 1))) {
    return 1000;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    t56_protocol_timeoutForRequest_cold_1(a1, a2, v4);
    return 0;
  }
  return result;
}

const char *t56_protocol_msgTypeString(int a1)
{
  if ((a1 - 1) > 7) {
    return "UNKNOWN";
  }
  else {
    return off_10021A7C8[a1 - 1];
  }
}

void _T56Protocol_timeoutCallback(uint64_t a1, int a2, unsigned int a3)
{
  if (a1 && (a2 & 0x80000000) == 0)
  {
    int v6 = a3;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v7 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 8);
      int v15 = 136316674;
      int v16 = "_T56Protocol_timeoutCallback";
      __int16 v17 = 1024;
      int v18 = 571;
      __int16 v19 = 1024;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = v6;
      __int16 v23 = 1024;
      int v24 = v8;
      __int16 v25 = 1024;
      int v26 = HIWORD(a3) & 0xF;
      __int16 v27 = 1024;
      unsigned int v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s:%d Timeout: timer %d, type %d, role %d, slot %d, context %u", (uint8_t *)&v15, 0x30u);
    }
    int v9 = *(_DWORD *)(a1 + 8);
    if (!v9)
    {
      if (*(_DWORD *)(a1 + 44) == a2)
      {
        *(_DWORD *)(a1 + 44) = -1;
        if ((_BYTE)a3)
        {
          if (a3 == 1)
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              unsigned int v10 = *(NSObject **)(gLogObjects + 480);
            }
            else
            {
              unsigned int v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v12 = **(unsigned __int8 **)(a1 + 24);
              int v13 = *(unsigned __int16 *)(a1 + 34);
              int v15 = 136316162;
              int v16 = "_T56Protocol_timeoutCallback";
              __int16 v17 = 1024;
              int v18 = 612;
              __int16 v19 = 1024;
              int v20 = HIWORD(a3) & 0xF;
              __int16 v21 = 1024;
              int v22 = v12;
              __int16 v23 = 1024;
              int v24 = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s:%d slot %d, resend message %d, len %d", (uint8_t *)&v15, 0x24u);
            }
            t56_protocol_sendData(a1, *(const UInt8 **)(a1 + 24), *(unsigned __int16 *)(a1 + 34));
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              uint64_t v11 = *(NSObject **)(gLogObjects + 480);
            }
            else
            {
              uint64_t v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
              _T56Protocol_timeoutCallback_cold_3();
            }
          }
        }
      }
      int v9 = *(_DWORD *)(a1 + 8);
    }
    if (v9)
    {
      if (v9 == 1)
      {
        if (*(_DWORD *)(a1 + 88) == a2) {
          *(_DWORD *)(a1 + 88) = -1;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v14 = *(NSObject **)(gLogObjects + 480);
        }
        else
        {
          int v14 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          _T56Protocol_timeoutCallback_cold_1();
        }
      }
    }
  }
}

uint64_t t56_protocol_sendData(uint64_t a1, const UInt8 *a2, unsigned int a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = 4294967294;
  if (a1 && a2 && (unsigned __int16)(a3 - 1) <= 0x7CFu)
  {
    unsigned int v4 = *a2;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v8 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      int v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = *(_DWORD *)(a1 + 36);
      if (v9 - 1 > 7) {
        unsigned int v10 = "UNKNOWN";
      }
      else {
        unsigned int v10 = off_10021A7C8[v9 - 1];
      }
      if ((v4 - 1) > 7u) {
        uint64_t v11 = "UNKNOWN";
      }
      else {
        uint64_t v11 = off_10021A7C8[(char)(v4 - 1)];
      }
      int v15 = 136316930;
      int v16 = "t56_protocol_sendData";
      __int16 v17 = 1024;
      int v18 = 378;
      __int16 v19 = 1024;
      int v20 = 0;
      __int16 v21 = 1024;
      unsigned int v22 = a3;
      __int16 v23 = 1024;
      unsigned int v24 = v9;
      __int16 v25 = 2080;
      int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = v4;
      __int16 v29 = 2080;
      __int16 v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:%d ver %d, dataOutLen %d, lastMsgSent %d(%s) -> %d(%s)", (uint8_t *)&v15, 0x3Eu);
    }
    *(_DWORD *)(a1 + 36) = v4;
    t56_util_sendData((const void **)a1, a2, a3);
    uint64_t v5 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v12 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if ((v4 - 1) > 7u) {
      int v13 = "UNKNOWN";
    }
    else {
      int v13 = off_10021A7C8[(char)(v4 - 1)];
    }
    int v15 = 136316674;
    int v16 = "t56_protocol_sendData";
    __int16 v17 = 1024;
    int v18 = 388;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    unsigned int v22 = 0;
    __int16 v23 = 1024;
    unsigned int v24 = v4;
    __int16 v25 = 2080;
    int v26 = v13;
    __int16 v27 = 1024;
    unsigned int v28 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, ver %d, msgType %d(%s), dataOutLen %d", (uint8_t *)&v15, 0x34u);
  }
  return v5;
}

uint64_t t56_protocol_processIncomingData(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5 = 0;
  unsigned __int16 v33 = 0;
  uint64_t v6 = 4294967294;
  if (a1 && a2)
  {
    unsigned int v8 = 0;
    if (a3)
    {
      unsigned int v9 = (int *)(a1 + 8);
      if (*(_DWORD *)(a1 + 8) >= 2u)
      {
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v13 = *(NSObject **)(gLogObjects + 480);
        }
        else
        {
          int v13 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          t56_protocol_processIncomingData_cold_4();
        }
        int v5 = 0;
LABEL_22:
        unsigned int v8 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
      }
      else
      {
        int v5 = *a2;
        unsigned int v10 = *(unsigned __int8 **)(a1 + 24);
        unsigned int v11 = *(unsigned __int16 *)(a1 + 32);
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v12 = *(NSObject **)(gLogObjects + 480);
        }
        else
        {
          int v12 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v14 = *v9;
          if ((v5 - 1) > 7u) {
            int v15 = "UNKNOWN";
          }
          else {
            int v15 = off_10021A7C8[(char)(v5 - 1)];
          }
          *(_DWORD *)buf = 136317186;
          int v35 = "t56_protocol_processIncomingData";
          __int16 v36 = 1024;
          int v37 = 251;
          __int16 v38 = 1024;
          int v39 = v14;
          __int16 v40 = 1024;
          int v41 = 0;
          __int16 v42 = 1024;
          *(_DWORD *)__int16 v43 = v5;
          *(_WORD *)&v43[4] = 2080;
          *(void *)&v43[6] = v15;
          *(_WORD *)&v43[14] = 1024;
          *(_DWORD *)&v43[16] = a3;
          __int16 v44 = 1024;
          BOOL v45 = v10 != 0;
          __int16 v46 = 1024;
          unsigned int v47 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d role %d, ver %d, msgType %d(%s), dataInLen %d, _dataOut(%d), _dataOutSize %d", buf, 0x40u);
        }
        unsigned int v8 = 0;
        uint64_t v6 = 4294967294;
        if (v10 && v11)
        {
          if (!t56_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3)) {
            goto LABEL_53;
          }
          *(unsigned char *)(a1 + 40) = 0;
          if (!*(_DWORD *)(a1 + 8))
          {
            unsigned int v16 = *(_DWORD *)(a1 + 44);
            if ((v16 & 0x80000000) == 0)
            {
              t56_util_cancelTimer((const void **)a1, v16);
              *(_DWORD *)(a1 + 44) = -1;
            }
            switch(v5)
            {
              case 2:
                uint64_t v17 = _t56_protocol_handleResponse_SESSION_RSP(a1, a2, a3, v10, v11, &v33);
                goto LABEL_38;
              case 4:
                uint64_t v17 = _t56_protocol_handleResponse_DISCOVER_RSP(a1, a2, a3, v10, v11, &v33);
                goto LABEL_38;
              case 6:
                uint64_t v17 = _t56_protocol_handleResponse_DATA(a1, a2, a3, (uint64_t)v10, v11, &v33);
                goto LABEL_38;
              case 8:
                uint64_t v17 = _t56_protocol_handleResponse_STATUS(a1, a2, a3, v10, v11, &v33);
LABEL_38:
                uint64_t v6 = v17;
                break;
              default:
                int v18 = logObjectForModule_29();
                if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                {
                  if ((v5 - 1) > 6) {
                    __int16 v32 = "UNKNOWN";
                  }
                  else {
                    __int16 v32 = off_10021A750[(char)(v5 - 1)];
                  }
                  *(_DWORD *)buf = 136316418;
                  int v35 = "t56_protocol_processIncomingData";
                  __int16 v36 = 1024;
                  int v37 = 289;
                  __int16 v38 = 1024;
                  int v39 = 0;
                  __int16 v40 = 1024;
                  int v41 = v5;
                  __int16 v42 = 2080;
                  *(void *)__int16 v43 = v32;
                  *(_WORD *)&v43[8] = 1024;
                  *(_DWORD *)&unsigned char v43[10] = a3;
                  _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s:%d Device: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d", buf, 0x2Eu);
                }
                uint64_t v6 = 0xFFFFFFFFLL;
                break;
            }
          }
          if (t56_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3) && *v9 == 1)
          {
            switch(v5)
            {
              case 1:
                uint64_t v20 = _t56_protocol_handleRequest_SESSION(a1, a2, a3, v10, v11, &v33);
                goto LABEL_51;
              case 3:
                _t56_protocol_handleRequest_DISCOVER(a1, a2, a3, v19, 0, &v33);
                unsigned int v8 = 0;
                int v5 = 3;
                goto LABEL_48;
              case 5:
                _t56_protocol_handleRequest_POLL(a1, a2, a3, v19, 0, &v33);
                unsigned int v8 = 0;
                int v5 = 5;
LABEL_48:
                uint64_t v6 = 4294967294;
                goto LABEL_54;
              case 6:
                uint64_t v20 = _t56_protocol_handleRequest_DATA(a1, a2, a3, v10, v11, &v33);
                goto LABEL_51;
              case 7:
                uint64_t v20 = _t56_protocol_handleRequest_TERMINATE(a1, a2, a3, v10, v11, &v33);
LABEL_51:
                uint64_t v6 = v20;
                break;
              default:
                __int16 v21 = logObjectForModule_29();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  if ((v5 - 1) > 7u) {
                    unsigned int v22 = "UNKNOWN";
                  }
                  else {
                    unsigned int v22 = off_10021A788[(char)(v5 - 1)];
                  }
                  *(_DWORD *)buf = 136316418;
                  int v35 = "t56_protocol_processIncomingData";
                  __int16 v36 = 1024;
                  int v37 = 324;
                  __int16 v38 = 1024;
                  int v39 = 0;
                  __int16 v40 = 1024;
                  int v41 = v5;
                  __int16 v42 = 2080;
                  *(void *)__int16 v43 = v22;
                  *(_WORD *)&v43[8] = 1024;
                  *(_DWORD *)&unsigned char v43[10] = a3;
                  _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s:%d Accessory: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d", buf, 0x2Eu);
                }
                goto LABEL_22;
            }
          }
          if (v6) {
            goto LABEL_53;
          }
          int v28 = v33;
          *(_WORD *)(a1 + 34) = v33;
          if (!v28)
          {
            uint64_t v6 = 0;
LABEL_53:
            unsigned int v8 = 0;
            goto LABEL_54;
          }
          unsigned int v8 = *v10;
          if (!*v9)
          {
            unsigned int v29 = t56_protocol_timeoutForRequest(a1, *v10);
            __int16 v30 = logObjectForModule_29();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              int v35 = "t56_protocol_processIncomingData";
              __int16 v36 = 1024;
              int v37 = 346;
              __int16 v38 = 1024;
              int v39 = v29;
              __int16 v40 = 1024;
              int v41 = v8;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s:%d Start responseTimer, %u ms, outMsgType %u", buf, 0x1Eu);
            }
            *(_DWORD *)(a1 + 44) = t56_util_callbackOnTimer((const void **)a1, v29, (uint64_t)_T56Protocol_timeoutCallback, 0);
          }
          BOOL v31 = logObjectForModule_29();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            t56_protocol_processIncomingData_cold_2();
          }
          t56_protocol_sendData(a1, v10, v33);
          uint64_t v6 = 0;
        }
      }
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_54:
  if (gLogObjects && gNumLogObjects >= 61)
  {
    __int16 v23 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    __int16 v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if ((v5 - 1) > 7u) {
      unsigned int v24 = "UNKNOWN";
    }
    else {
      unsigned int v24 = off_10021A7C8[(char)(v5 - 1)];
    }
    int v25 = *(_DWORD *)(a1 + 8);
    if ((v8 - 1) > 7u) {
      int v26 = "UNKNOWN";
    }
    else {
      int v26 = off_10021A7C8[(char)(v8 - 1)];
    }
    *(_DWORD *)buf = 136317698;
    int v35 = "t56_protocol_processIncomingData";
    __int16 v36 = 1024;
    int v37 = 358;
    __int16 v38 = 1024;
    int v39 = v6;
    __int16 v40 = 1024;
    int v41 = v25;
    __int16 v42 = 1024;
    *(_DWORD *)__int16 v43 = 0;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v5;
    *(_WORD *)&unsigned char v43[10] = 2080;
    *(void *)&v43[12] = v24;
    __int16 v44 = 1024;
    BOOL v45 = a3;
    __int16 v46 = 1024;
    unsigned int v47 = v8;
    __int16 v48 = 2080;
    int v49 = v26;
    __int16 v50 = 1024;
    int v51 = v33;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, role %d, ver %d, msgType %d(%s), dataInLen %d, outMsgType %d(%s), dataOutLen %d", buf, 0x50u);
  }
  return v6;
}

BOOL t56_protocol_checkValidMessageHeaderAndSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((a2 - 1) > 7u) {
        unsigned int v8 = "UNKNOWN";
      }
      else {
        unsigned int v8 = off_10021A7C8[(char)(a2 - 1)];
      }
      int v26 = 136316418;
      __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
      __int16 v28 = 1024;
      int v29 = 400;
      __int16 v30 = 1024;
      int v31 = a2;
      __int16 v32 = 2080;
      *(void *)unsigned __int16 v33 = v8;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a2;
      *(_WORD *)&v33[14] = 1024;
      *(_DWORD *)&v33[16] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x2Eu);
    }
    int v9 = *(_DWORD *)(a1 + 8);
    if (v9)
    {
      int v7 = -2;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v10 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        unsigned int v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        if ((a2 - 1) > 7u) {
          unsigned int v24 = "UNKNOWN";
        }
        else {
          unsigned int v24 = off_10021A7C8[(char)(a2 - 1)];
        }
        int v26 = 136316418;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 406;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 2080;
        *(void *)unsigned __int16 v33 = v24;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&v33[10] = a2;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s:%d Device, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x2Eu);
      }
      switch(a2)
      {
        case 2u:
          BOOL v11 = a3 > 0xC;
          goto LABEL_27;
        case 4u:
          BOOL v11 = (unint64_t)a3 - 17 < 0xFFFFFFFFFFFFFFF6 && a3 > 6;
          goto LABEL_27;
        case 6u:
          BOOL v11 = a3 > 8;
LABEL_27:
          if (v11) {
            int v7 = 0;
          }
          else {
            int v7 = -2;
          }
          break;
        case 8u:
          if (a3 == 9) {
            int v7 = 0;
          }
          else {
            int v7 = -2;
          }
          break;
        default:
          if (gLogObjects && gNumLogObjects >= 61)
          {
            int v12 = *(NSObject **)(gLogObjects + 480);
          }
          else
          {
            int v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (a2 - 1 > 6) {
              int v25 = "UNKNOWN";
            }
            else {
              int v25 = off_10021A750[(char)(a2 - 1)];
            }
            int v26 = 136316418;
            __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
            __int16 v28 = 1024;
            int v29 = 441;
            __int16 v30 = 1024;
            int v31 = a2;
            __int16 v32 = 2080;
            *(void *)unsigned __int16 v33 = v25;
            *(_WORD *)&v33[8] = 1024;
            *(_DWORD *)&v33[10] = a2;
            *(_WORD *)&v33[14] = 1024;
            *(_DWORD *)&v33[16] = a3;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s:%d Device: Unexpected MsgType!!! msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x2Eu);
          }
          int v7 = -2;
          break;
      }
      int v9 = *(_DWORD *)(a1 + 8);
    }
    if (v9 == 1)
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v13 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v13 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        if ((a2 - 1) > 7u) {
          __int16 v21 = "UNKNOWN";
        }
        else {
          __int16 v21 = off_10021A7C8[(char)(a2 - 1)];
        }
        int v26 = 136316418;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 450;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 2080;
        *(void *)unsigned __int16 v33 = v21;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&v33[10] = a2;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s:%d Accessory, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x2Eu);
      }
      switch(a2)
      {
        case 1u:
          BOOL v14 = a3 > 6;
          goto LABEL_56;
        case 3u:
        case 7u:
          BOOL v14 = a3 > 2;
          goto LABEL_56;
        case 5u:
          BOOL v14 = a3 > 4;
          goto LABEL_56;
        case 6u:
          BOOL v14 = a3 > 8;
LABEL_56:
          if (v14) {
            int v7 = 0;
          }
          break;
        default:
          if (gLogObjects && gNumLogObjects >= 61)
          {
            int v15 = *(NSObject **)(gLogObjects + 480);
          }
          else
          {
            int v15 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            if ((a2 - 1) > 7u) {
              uint64_t v20 = "UNKNOWN";
            }
            else {
              uint64_t v20 = off_10021A788[(char)(a2 - 1)];
            }
            int v26 = 136316418;
            __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
            __int16 v28 = 1024;
            int v29 = 491;
            __int16 v30 = 1024;
            int v31 = a2;
            __int16 v32 = 2080;
            *(void *)unsigned __int16 v33 = v20;
            *(_WORD *)&v33[8] = 1024;
            *(_DWORD *)&v33[10] = a2;
            *(_WORD *)&v33[14] = 1024;
            *(_DWORD *)&v33[16] = a3;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s:%d Accessory: Unexpected MsgType!!! msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x2Eu);
          }
          break;
      }
    }
    if (*(_DWORD *)(a1 + 8) >= 2u)
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v16 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        unsigned int v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v22 = *(_DWORD *)(a1 + 8);
        if ((a2 - 1) > 7u) {
          __int16 v23 = "UNKNOWN";
        }
        else {
          __int16 v23 = off_10021A7C8[(char)(a2 - 1)];
        }
        int v26 = 136316930;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 500;
        __int16 v30 = 1024;
        int v31 = v22;
        __int16 v32 = 1024;
        *(_DWORD *)unsigned __int16 v33 = v7;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = a2;
        *(_WORD *)&v33[10] = 2080;
        *(void *)&v33[12] = v23;
        __int16 v34 = 1024;
        unsigned int v35 = a2;
        __int16 v36 = 1024;
        unsigned int v37 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s:%d Unknown Role! %d, result %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x3Au);
      }
    }
  }
  else
  {
    int v7 = -2;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v17 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if ((a2 - 1) > 7u) {
      int v18 = "UNKNOWN";
    }
    else {
      int v18 = off_10021A7C8[(char)(a2 - 1)];
    }
    int v26 = 136316674;
    __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
    __int16 v28 = 1024;
    int v29 = 505;
    __int16 v30 = 1024;
    int v31 = v7;
    __int16 v32 = 1024;
    *(_DWORD *)unsigned __int16 v33 = a2;
    *(_WORD *)&v33[4] = 2080;
    *(void *)&v33[6] = v18;
    *(_WORD *)&v33[14] = 1024;
    *(_DWORD *)&v33[16] = a2;
    __int16 v34 = 1024;
    unsigned int v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s:%d result %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d", (uint8_t *)&v26, 0x34u);
  }
  return v7 == 0;
}

uint64_t _t56_protocol_handleResponse_SESSION_RSP(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v12 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_SESSION_RSP_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294;
    if (a3 >= 0xD && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        if ((v13 - 1) > 7u) {
          __int16 v27 = "UNKNOWN";
        }
        else {
          __int16 v27 = off_10021A7C8[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
        __int16 v38 = 1024;
        int v39 = 1001;
        __int16 v40 = 1024;
        int v41 = v26;
        __int16 v42 = 1024;
        int v43 = v13;
        __int16 v44 = 2080;
        BOOL v45 = v27;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
      }
      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 2)
      {
        *a6 = 0;
        *(unsigned char *)(a1 + 48) = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v33 = a2[4];
        int v34 = a2[3];
        int v31 = a2[8];
        int v32 = a2[7];
        int v29 = a2[10];
        int v30 = a2[9];
        int v28 = a2[11];
        int v17 = a2[12];
        if (v7 && gNumLogObjects >= 61)
        {
          int v18 = *(NSObject **)(v7 + 480);
        }
        else
        {
          int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317442;
          unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
          __int16 v38 = 1024;
          int v39 = 1024;
          __int16 v40 = 1024;
          int v41 = v21;
          __int16 v42 = 1024;
          int v43 = 2;
          __int16 v44 = 2080;
          BOOL v45 = "SESSION_RSP";
          __int16 v46 = 1024;
          unsigned int v47 = v19;
          __int16 v48 = 1024;
          int v49 = v33 | (v34 << 8);
          __int16 v50 = 1024;
          int v51 = v31 | (v32 << 8);
          __int16 v52 = 1024;
          int v53 = v29 | (v30 << 8);
          __int16 v54 = 1024;
          int v55 = v17 | (v28 << 8);
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, version %d, maxLength %d, status %d, info %d", buf, 0x46u);
        }
        uint64_t inited = t56_protocol_initMsg_DISCOVER(v20, v19, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 2;
      }
    }
  }
  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294;
  }
  if (v7 && gNumLogObjects >= 61)
  {
    int v22 = *(NSObject **)(v7 + 480);
  }
  else
  {
    int v22 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      __int16 v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }
    else
    {
      __int16 v23 = off_10021A7C8[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
        __int16 v38 = 1024;
        int v39 = 1030;
        __int16 v40 = 1024;
        int v41 = inited;
        __int16 v42 = 1024;
        int v43 = v13;
        __int16 v44 = 2080;
        BOOL v45 = v23;
        __int16 v46 = 1024;
        unsigned int v47 = a3;
        __int16 v48 = 1024;
        int v49 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v24 = -1;
    goto LABEL_42;
  }
  return inited;
}

uint64_t _t56_protocol_handleResponse_DISCOVER_RSP(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, _WORD *a6)
{
  unsigned int v7 = a3;
  unsigned int v8 = &unk_100239000;
  int v9 = (int *)&unk_100239000;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = a5;
      int v13 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v12 = a5;
      int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_DISCOVER_RSP_cold_6();
    }
    int v14 = 0;
    uint64_t inited = 4294967294;
    unsigned int v7 = a3;
    if (a3 >= 7 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v14 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v16 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        unsigned int v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      unsigned int v7 = a3;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v51 = *(_DWORD *)(a1 + 8);
        if ((v14 - 1) > 7u) {
          __int16 v52 = "UNKNOWN";
        }
        else {
          __int16 v52 = off_10021A7C8[(char)(v14 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
        __int16 v63 = 1024;
        int v64 = 1053;
        __int16 v65 = 1024;
        int v66 = v51;
        __int16 v67 = 1024;
        int v68 = v14;
        __int16 v69 = 2080;
        *(void *)__int16 v70 = v52;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
      }
      uint64_t inited = 4294967294;
      if (a6)
      {
        if (v12 >= 0x7D0)
        {
          if (a4)
          {
            unsigned int v54 = v12;
            if (v14 == 4)
            {
              *a6 = 0;
              *(unsigned char *)(a1 + 48) = 0;
              int v56 = __rev16(*(unsigned __int16 *)(a2 + 1));
              uint64_t v17 = __rev16(*(unsigned __int16 *)(a2 + 5));
              if (v17 >= 5)
              {
                uint64_t v22 = a1;
                if (gLogObjects && gNumLogObjects >= 61)
                {
                  __int16 v23 = *(NSObject **)(gLogObjects + 480);
                }
                else
                {
                  __int16 v23 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }
                int v14 = 4;
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  int v25 = *(_DWORD *)(v22 + 8);
                  *(_DWORD *)buf = 136317186;
                  uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                  __int16 v63 = 1024;
                  int v64 = 1071;
                  __int16 v65 = 1024;
                  int v66 = v17;
                  __int16 v67 = 1024;
                  int v68 = 4;
                  __int16 v69 = 1024;
                  *(_DWORD *)__int16 v70 = v25;
                  *(_WORD *)&v70[4] = 1024;
                  *(_DWORD *)&v70[6] = 4;
                  *(_WORD *)int v71 = 2080;
                  *(void *)&v71[2] = "DISCOVER_RSP";
                  __int16 v72 = 1024;
                  int v73 = v56;
                  __int16 v74 = 1024;
                  int v75 = v17;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s:%d numClients(%d) too large! (max %d), role %d, msgType %d(%s), sessionID %d, numClients %d", buf, 0x40u);
                }
                uint64_t inited = 4294967294;
                unsigned int v8 = &unk_100239000;
              }
              else
              {
                int v53 = a6;
                if (gLogObjects) {
                  BOOL v18 = gNumLogObjects <= 60;
                }
                else {
                  BOOL v18 = 1;
                }
                int v19 = !v18;
                if (10 * (int)v17 + 7 <= a3)
                {
                  if (v19)
                  {
                    int v24 = *(NSObject **)(gLogObjects + 480);
                  }
                  else
                  {
                    int v24 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  BOOL v27 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
                  if (v27)
                  {
                    int v28 = *(_DWORD *)(a1 + 8);
                    *(_DWORD *)buf = 136316674;
                    uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                    __int16 v63 = 1024;
                    int v64 = 1082;
                    __int16 v65 = 1024;
                    int v66 = v28;
                    __int16 v67 = 1024;
                    int v68 = 4;
                    __int16 v69 = 2080;
                    *(void *)__int16 v70 = "DISCOVER_RSP";
                    *(_WORD *)&v70[8] = 1024;
                    *(_DWORD *)int v71 = v56;
                    *(_WORD *)&v71[4] = 1024;
                    *(_DWORD *)&v71[6] = v17;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, numClients %d", buf, 0x34u);
                  }
                  uint64_t v55 = a1;
                  if (v17)
                  {
                    uint64_t v29 = 0;
                    int v30 = (int *)(a1 + 56);
                    int v31 = a2 + 16;
                    uint64_t v57 = v17;
                    do
                    {
                      *((_WORD *)v30 - 2) = bswap32(*(unsigned __int16 *)(v31 - 7)) >> 16;
                      int v32 = *(v31 - 3);
                      int v33 = *(v31 - 2);
                      int v34 = *(v31 - 1);
                      int v35 = *v31;
                      *int v30 = (v32 << 24) | (v33 << 16) | (v34 << 8) | v35;
                      uint64_t v36 = gLogObjects;
                      int v37 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 61)
                      {
                        __int16 v38 = *(NSObject **)(gLogObjects + 480);
                      }
                      else
                      {
                        __int16 v38 = &_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          uint64_t v62 = (const char *)v36;
                          __int16 v63 = 1024;
                          int v64 = v37;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                        }
                      }
                      BOOL v27 = os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
                      if (v27)
                      {
                        int v39 = *(_DWORD *)(v55 + 8);
                        int v40 = *((unsigned __int16 *)v30 - 2);
                        int v41 = *v30;
                        if ((v32 - 32) >= 0x5F) {
                          int v42 = 46;
                        }
                        else {
                          int v42 = v32;
                        }
                        if ((v33 - 32) >= 0x5F) {
                          int v43 = 46;
                        }
                        else {
                          int v43 = v33;
                        }
                        *(_DWORD *)buf = 136318722;
                        if ((v34 - 32) >= 0x5F) {
                          int v44 = 46;
                        }
                        else {
                          int v44 = v34;
                        }
                        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                        __int16 v63 = 1024;
                        if ((v35 - 32) >= 0x5F) {
                          int v45 = 46;
                        }
                        else {
                          int v45 = v35;
                        }
                        int v64 = 1103;
                        __int16 v65 = 1024;
                        int v66 = v39;
                        __int16 v67 = 1024;
                        int v68 = 4;
                        __int16 v69 = 2080;
                        *(void *)__int16 v70 = "DISCOVER_RSP";
                        *(_WORD *)&v70[8] = 1024;
                        *(_DWORD *)int v71 = v56;
                        *(_WORD *)&v71[4] = 1024;
                        *(_DWORD *)&v71[6] = v29;
                        __int16 v72 = 1024;
                        int v73 = v40;
                        __int16 v74 = 1024;
                        int v75 = v40;
                        __int16 v76 = 1024;
                        int v77 = v41;
                        __int16 v78 = 1024;
                        int v79 = v41;
                        __int16 v80 = 1024;
                        int v81 = v42;
                        __int16 v82 = 1024;
                        int v83 = v43;
                        __int16 v84 = 1024;
                        int v85 = v44;
                        __int16 v86 = 1024;
                        int v87 = v45;
                        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, client[%d]: clientID 0x%x(%d), identifier 0x%x(%d '%c%c%c%c')", buf, 0x64u);
                      }
                      v31 += 10;
                      ++v29;
                      v30 += 2;
                    }
                    while (v57 != v29);
                  }
                  char v60 = 0;
                  a6 = v53;
                  uint64_t inited = t56_protocol_initMsg_DATA(v27, v56, *(unsigned __int16 *)(v55 + 52), 0, 1u, &v60, a4, v54, v53);
                  int v14 = 4;
                  unsigned int v7 = a3;
                  int v9 = (_DWORD *)&unk_100239000;
                  unsigned int v8 = (void *)&unk_100239000;
                }
                else
                {
                  uint64_t v20 = a1;
                  if (v19)
                  {
                    int v21 = *(NSObject **)(gLogObjects + 480);
                  }
                  else
                  {
                    int v21 = &_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }
                  int v14 = 4;
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
                  {
                    int v26 = *(_DWORD *)(v20 + 8);
                    *(_DWORD *)buf = 136317186;
                    uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                    __int16 v63 = 1024;
                    int v64 = 1078;
                    __int16 v65 = 1024;
                    unsigned int v7 = a3;
                    int v66 = a3;
                    __int16 v67 = 1024;
                    int v68 = 10 * v17 + 7;
                    __int16 v69 = 1024;
                    *(_DWORD *)__int16 v70 = v26;
                    *(_WORD *)&v70[4] = 1024;
                    *(_DWORD *)&v70[6] = 4;
                    *(_WORD *)int v71 = 2080;
                    *(void *)&v71[2] = "DISCOVER_RSP";
                    __int16 v72 = 1024;
                    int v73 = v56;
                    __int16 v74 = 1024;
                    int v75 = v17;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s:%d Invalid message size %d vs %d, role %d, msgType %d(%s), sessionID %d, numClients %d", buf, 0x40u);
                    uint64_t inited = 4294967294;
                  }
                  else
                  {
                    uint64_t inited = 4294967294;
                    unsigned int v7 = a3;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v14 = 0;
    uint64_t inited = 4294967294;
  }
  uint64_t v46 = v8[49];
  if (v46 && v9[100] >= 61)
  {
    unsigned int v47 = *(NSObject **)(v46 + 480);
  }
  else
  {
    unsigned int v47 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 7u)
    {
      __int16 v48 = "UNKNOWN";
      if (a6) {
        goto LABEL_83;
      }
    }
    else
    {
      __int16 v48 = off_10021A7C8[(char)(v14 - 1)];
      if (a6)
      {
LABEL_83:
        int v49 = (unsigned __int16)*a6;
LABEL_86:
        *(_DWORD *)buf = 136316674;
        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
        __int16 v63 = 1024;
        int v64 = 1114;
        __int16 v65 = 1024;
        int v66 = inited;
        __int16 v67 = 1024;
        int v68 = v14;
        __int16 v69 = 2080;
        *(void *)__int16 v70 = v48;
        *(_WORD *)&v70[8] = 1024;
        *(_DWORD *)int v71 = v7;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v49 = -1;
    goto LABEL_86;
  }
  return inited;
}

uint64_t _t56_protocol_handleResponse_DATA(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, _WORD *a6)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      int v13 = *(_DWORD *)(a1 + 8);
    }
    else {
      int v13 = -1;
    }
    *(_DWORD *)buf = 136316162;
    uint64_t v46 = "_t56_protocol_handleResponse_DATA";
    __int16 v47 = 1024;
    int v48 = 1127;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 1024;
    int v52 = a3;
    __int16 v53 = 1024;
    LODWORD(v54) = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d role %d, dataInLen %d, dataOutSize %d", buf, 0x24u);
  }
  if (!a1)
  {
    int v15 = 0;
    goto LABEL_16;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v14 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    _t56_protocol_handleResponse_DATA_cold_7();
  }
  int v15 = 0;
  uint64_t v16 = 4294967294;
  if (a3 >= 9 && a2 && !*(_DWORD *)(a1 + 8))
  {
    int v15 = *a2;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v17 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      int v39 = *(_DWORD *)(a1 + 8);
      if ((v15 - 1) > 7u) {
        int v40 = "UNKNOWN";
      }
      else {
        int v40 = off_10021A7C8[(char)(v15 - 1)];
      }
      *(_DWORD *)buf = 136316162;
      uint64_t v46 = "_t56_protocol_handleResponse_DATA";
      __int16 v47 = 1024;
      int v48 = 1139;
      __int16 v49 = 1024;
      int v50 = v39;
      __int16 v51 = 1024;
      int v52 = v15;
      __int16 v53 = 2080;
      unsigned int v54 = v40;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
    }
    uint64_t v16 = 4294967294;
    if (a6)
    {
      if (a5 >= 0x7D0 && a4 && v15 == 6)
      {
        int v44 = a6;
        *a6 = 0;
        unsigned int v18 = *(unsigned __int16 *)(a2 + 1);
        unsigned int v19 = *(unsigned __int16 *)(a2 + 3);
        int v43 = a2[5];
        int v20 = a2[6];
        unsigned int v21 = *(unsigned __int16 *)(a2 + 7);
        if (gLogObjects && gNumLogObjects >= 61)
        {
          uint64_t v22 = *(NSObject **)(gLogObjects + 480);
        }
        else
        {
          uint64_t v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        unsigned int v23 = __rev16(v21);
        unsigned int v24 = __rev16(v18);
        unsigned int v25 = __rev16(v19);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int v26 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317186;
          uint64_t v46 = "_t56_protocol_handleResponse_DATA";
          __int16 v47 = 1024;
          int v48 = 1164;
          __int16 v49 = 1024;
          int v50 = v26;
          __int16 v51 = 1024;
          int v52 = 6;
          __int16 v53 = 2080;
          unsigned int v54 = "DATA";
          __int16 v55 = 1024;
          unsigned int v56 = v24;
          __int16 v57 = 1024;
          unsigned int v58 = v25;
          __int16 v59 = 1024;
          int v60 = v20 | (v43 << 8);
          __int16 v61 = 1024;
          int v62 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, remaining %d, payloadLen %d", buf, 0x40u);
        }
        a6 = v44;
        if (v23 > 3)
        {
          unsigned int v27 = v25;
          if (a2[9] == 1)
          {
            int v28 = (a2[12] << 16) | (a2[11] << 8);
            int v29 = a2[10];
            if (gLogObjects && gNumLogObjects >= 61)
            {
              int v30 = *(NSObject **)(gLogObjects + 480);
            }
            else
            {
              int v30 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              int v34 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)buf = 136317186;
              uint64_t v46 = "_t56_protocol_handleResponse_DATA";
              __int16 v47 = 1024;
              int v48 = 1180;
              __int16 v49 = 1024;
              int v50 = v34;
              __int16 v51 = 1024;
              int v52 = 6;
              __int16 v53 = 2080;
              unsigned int v54 = "DATA";
              __int16 v55 = 1024;
              unsigned int v56 = v24;
              __int16 v57 = 1024;
              unsigned int v58 = v27;
              __int16 v59 = 1024;
              int v60 = v28 | v29;
              __int16 v61 = 1024;
              int v62 = v28 | v29;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, received rxID 0x%x (%d)", buf, 0x40u);
            }
            t56_util_notifyRxID((const void **)a1, v28 | v29);
            uint64_t v16 = 0;
            int v15 = 6;
            a6 = v44;
          }
          else
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              int v32 = *(NSObject **)(gLogObjects + 480);
            }
            else
            {
              int v32 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            int v15 = 6;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              int v41 = *(_DWORD *)(a1 + 8);
              int v42 = a2[9];
              *(_DWORD *)buf = 136317186;
              uint64_t v46 = "_t56_protocol_handleResponse_DATA";
              __int16 v47 = 1024;
              int v48 = 1188;
              __int16 v49 = 1024;
              int v50 = v41;
              __int16 v51 = 1024;
              int v52 = 6;
              __int16 v53 = 2080;
              unsigned int v54 = "DATA";
              __int16 v55 = 1024;
              unsigned int v56 = v24;
              __int16 v57 = 1024;
              unsigned int v58 = v25;
              __int16 v59 = 1024;
              int v60 = v42;
              __int16 v61 = 1024;
              int v62 = v42;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, Unknown RxID command 0x%x (%d)", buf, 0x40u);
            }
            uint64_t v16 = 0;
          }
          goto LABEL_66;
        }
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v31 = *(NSObject **)(gLogObjects + 480);
        }
        else
        {
          int v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v15 = 6;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          uint64_t v46 = "_t56_protocol_handleResponse_DATA";
          __int16 v47 = 1024;
          int v48 = 1170;
          __int16 v49 = 1024;
          int v50 = v33;
          __int16 v51 = 1024;
          int v52 = 6;
          __int16 v53 = 2080;
          unsigned int v54 = "DATA";
          __int16 v55 = 1024;
          unsigned int v56 = v24;
          __int16 v57 = 1024;
          unsigned int v58 = v25;
          __int16 v59 = 1024;
          int v60 = 3;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, expecting payloadLen at least %d!!!", buf, 0x3Au);
        }
LABEL_16:
        uint64_t v16 = 4294967294;
      }
    }
  }
LABEL_66:
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v35 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v35 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 7u)
    {
      uint64_t v36 = "UNKNOWN";
      if (a6) {
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v36 = off_10021A7C8[(char)(v15 - 1)];
      if (a6)
      {
LABEL_74:
        int v37 = (unsigned __int16)*a6;
LABEL_77:
        *(_DWORD *)buf = 136316674;
        uint64_t v46 = "_t56_protocol_handleResponse_DATA";
        __int16 v47 = 1024;
        int v48 = 1196;
        __int16 v49 = 1024;
        int v50 = v16;
        __int16 v51 = 1024;
        int v52 = v15;
        __int16 v53 = 2080;
        unsigned int v54 = v36;
        __int16 v55 = 1024;
        unsigned int v56 = a3;
        __int16 v57 = 1024;
        unsigned int v58 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return v16;
      }
    }
    int v37 = -1;
    goto LABEL_77;
  }
  return v16;
}

uint64_t _t56_protocol_handleResponse_STATUS(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_STATUS_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t v14 = 4294967294;
    if (a3 >= 9 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *(_DWORD *)(a1 + 8);
        if ((v13 - 1) > 7u) {
          int v26 = "UNKNOWN";
        }
        else {
          int v26 = off_10021A7C8[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        int v35 = "_t56_protocol_handleResponse_STATUS";
        __int16 v36 = 1024;
        int v37 = 1219;
        __int16 v38 = 1024;
        int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        int v43 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
      }
      uint64_t v7 = gLogObjects;
      uint64_t v14 = 4294967294;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 8)
      {
        *a6 = 0;
        *(unsigned char *)(a1 + 48) = 0;
        int v31 = a2[2];
        int v32 = a2[1];
        int v29 = a2[4];
        int v30 = a2[3];
        int v16 = a2[5];
        int v17 = a2[6];
        int v27 = a2[8];
        int v28 = a2[7];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(NSObject **)(v7 + 480);
        }
        else
        {
          unsigned int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v19)
        {
          int v20 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          int v35 = "_t56_protocol_handleResponse_STATUS";
          __int16 v36 = 1024;
          int v37 = 1238;
          __int16 v38 = 1024;
          int v39 = v20;
          __int16 v40 = 1024;
          int v41 = 8;
          __int16 v42 = 2080;
          int v43 = "STATUS";
          __int16 v44 = 1024;
          int v45 = v31 | (v32 << 8);
          __int16 v46 = 1024;
          int v47 = v29 | (v30 << 8);
          __int16 v48 = 1024;
          int v49 = (v16 << 24) | (v17 << 16) | (v28 << 8) | v27;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, status %d, errorCode %d", buf, 0x3Au);
        }
        t56_protocol_initMsg_POLL(v19, a4, a5, a6);
        uint64_t v14 = 0;
        uint64_t v7 = gLogObjects;
        int v13 = 8;
      }
    }
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = 4294967294;
  }
  if (v7 && gNumLogObjects >= 61)
  {
    unsigned int v21 = *(NSObject **)(v7 + 480);
  }
  else
  {
    unsigned int v21 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      uint64_t v22 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v22 = off_10021A7C8[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v23 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        int v35 = "_t56_protocol_handleResponse_STATUS";
        __int16 v36 = 1024;
        int v37 = 1248;
        __int16 v38 = 1024;
        int v39 = v14;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        int v43 = v22;
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 1024;
        int v47 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return v14;
      }
    }
    int v23 = -1;
    goto LABEL_42;
  }
  return v14;
}

uint64_t _t56_protocol_handleRequest_SESSION(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_SESSION_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294;
    if (a3 == 7 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        if ((v13 - 1) > 7u) {
          int v27 = "UNKNOWN";
        }
        else {
          int v27 = off_10021A7C8[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        int v32 = "_t56_protocol_handleRequest_SESSION";
        __int16 v33 = 1024;
        int v34 = 662;
        __int16 v35 = 1024;
        int v36 = v26;
        __int16 v37 = 1024;
        int v38 = v13;
        __int16 v39 = 2080;
        __int16 v40 = v27;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
      }
      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 1)
      {
        *a6 = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v28 = a2[3];
        int v29 = a2[5];
        int v17 = a2[4];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(NSObject **)(v7 + 480);
        }
        else
        {
          unsigned int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          int v32 = "_t56_protocol_handleRequest_SESSION";
          __int16 v33 = 1024;
          int v34 = 684;
          __int16 v35 = 1024;
          int v36 = v21;
          __int16 v37 = 1024;
          int v38 = 1;
          __int16 v39 = 2080;
          __int16 v40 = "SESSION";
          __int16 v41 = 1024;
          int v42 = v19;
          __int16 v43 = 1024;
          int v44 = v17 | (v28 << 8);
          __int16 v45 = 1024;
          int v46 = v29;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, version %d, sessionCommand %d", buf, 0x3Au);
        }
        uint64_t inited = t56_protocol_initMsg_STATUS(v20, v19, 0, 0, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 1;
      }
    }
  }
  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294;
  }
  if (v7 && gNumLogObjects >= 61)
  {
    uint64_t v22 = *(NSObject **)(v7 + 480);
  }
  else
  {
    uint64_t v22 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      int v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }
    else
    {
      int v23 = off_10021A7C8[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        int v32 = "_t56_protocol_handleRequest_SESSION";
        __int16 v33 = 1024;
        int v34 = 704;
        __int16 v35 = 1024;
        int v36 = inited;
        __int16 v37 = 1024;
        int v38 = v13;
        __int16 v39 = 2080;
        __int16 v40 = v23;
        __int16 v41 = 1024;
        int v42 = a3;
        __int16 v43 = 1024;
        int v44 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v24 = -1;
    goto LABEL_42;
  }
  return inited;
}

uint64_t _t56_protocol_handleRequest_DISCOVER(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v10 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_DISCOVER_cold_3();
    }
    int v11 = 0;
    if (a3 == 3 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v11 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v12 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        unsigned int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        if ((v11 - 1) > 7u) {
          unsigned int v18 = "UNKNOWN";
        }
        else {
          unsigned int v18 = off_10021A7C8[(char)(v11 - 1)];
        }
        int v19 = 136316162;
        BOOL v20 = "_t56_protocol_handleRequest_DISCOVER";
        __int16 v21 = 1024;
        int v22 = 726;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", (uint8_t *)&v19, 0x28u);
      }
    }
  }
  else
  {
    int v11 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v13 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if ((v11 - 1) > 7u)
    {
      uint64_t v14 = "UNKNOWN";
      if (a6) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v14 = off_10021A7C8[(char)(v11 - 1)];
      if (a6)
      {
LABEL_27:
        int v15 = *a6;
LABEL_30:
        int v19 = 136316674;
        BOOL v20 = "_t56_protocol_handleRequest_DISCOVER";
        __int16 v21 = 1024;
        int v22 = 767;
        __int16 v23 = 1024;
        int v24 = -2;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v14;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        int v32 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", (uint8_t *)&v19, 0x34u);
        return 4294967294;
      }
    }
    int v15 = -1;
    goto LABEL_30;
  }
  return 4294967294;
}

uint64_t _t56_protocol_handleRequest_POLL(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v10 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_POLL_cold_3();
    }
    int v11 = 0;
    if (a3 == 5 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v11 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v12 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        unsigned int v12 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        if ((v11 - 1) > 7u) {
          unsigned int v18 = "UNKNOWN";
        }
        else {
          unsigned int v18 = off_10021A7C8[(char)(v11 - 1)];
        }
        int v19 = 136316162;
        BOOL v20 = "_t56_protocol_handleRequest_POLL";
        __int16 v21 = 1024;
        int v22 = 790;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", (uint8_t *)&v19, 0x28u);
      }
    }
  }
  else
  {
    int v11 = 0;
  }
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v13 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v13 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if ((v11 - 1) > 7u)
    {
      uint64_t v14 = "UNKNOWN";
      if (a6) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v14 = off_10021A7C8[(char)(v11 - 1)];
      if (a6)
      {
LABEL_27:
        int v15 = *a6;
LABEL_30:
        int v19 = 136316674;
        BOOL v20 = "_t56_protocol_handleRequest_POLL";
        __int16 v21 = 1024;
        int v22 = 830;
        __int16 v23 = 1024;
        int v24 = -2;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v14;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        int v32 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", (uint8_t *)&v19, 0x34u);
        return 4294967294;
      }
    }
    int v15 = -1;
    goto LABEL_30;
  }
  return 4294967294;
}

uint64_t _t56_protocol_handleRequest_DATA(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      unsigned int v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_DATA_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294;
    if (a3 == 9 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v15 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        if ((v13 - 1) > 7u) {
          __int16 v27 = "UNKNOWN";
        }
        else {
          __int16 v27 = off_10021A7C8[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        __int16 v35 = "_t56_protocol_handleRequest_DATA";
        __int16 v36 = 1024;
        int v37 = 853;
        __int16 v38 = 1024;
        int v39 = v26;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        __int16 v43 = v27;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", buf, 0x28u);
      }
      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 6)
      {
        *a6 = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v31 = a2[4];
        int v32 = a2[3];
        int v29 = a2[6];
        int v30 = a2[5];
        int v28 = a2[7];
        int v17 = a2[8];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(NSObject **)(v7 + 480);
        }
        else
        {
          unsigned int v18 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317186;
          __int16 v35 = "_t56_protocol_handleRequest_DATA";
          __int16 v36 = 1024;
          int v37 = 877;
          __int16 v38 = 1024;
          int v39 = v21;
          __int16 v40 = 1024;
          int v41 = 6;
          __int16 v42 = 2080;
          __int16 v43 = "DATA";
          __int16 v44 = 1024;
          int v45 = v19;
          __int16 v46 = 1024;
          int v47 = v31 | (v32 << 8);
          __int16 v48 = 1024;
          int v49 = v29 | (v30 << 8);
          __int16 v50 = 1024;
          int v51 = v17 | (v28 << 8);
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, remaining %d, payloadLen %d", buf, 0x40u);
        }
        uint64_t inited = t56_protocol_initMsg_STATUS(v20, v19, 0, 0, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 6;
      }
    }
  }
  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294;
  }
  if (v7 && gNumLogObjects >= 61)
  {
    int v22 = *(NSObject **)(v7 + 480);
  }
  else
  {
    int v22 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      __int16 v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }
    else
    {
      __int16 v23 = off_10021A7C8[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        __int16 v35 = "_t56_protocol_handleRequest_DATA";
        __int16 v36 = 1024;
        int v37 = 889;
        __int16 v38 = 1024;
        int v39 = inited;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        __int16 v43 = v23;
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 1024;
        int v47 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", buf, 0x34u);
        return inited;
      }
    }
    int v24 = -1;
    goto LABEL_42;
  }
  return inited;
}

uint64_t _t56_protocol_handleRequest_TERMINATE(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  int v7 = a3;
  uint64_t v8 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 480);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_TERMINATE_cold_4();
    }
    int v15 = 0;
    uint64_t v8 = gLogObjects;
    uint64_t inited = 4294967294;
    int v7 = a3;
    if (a3 == 3 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v15 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v17 = *(NSObject **)(gLogObjects + 480);
      }
      else
      {
        int v17 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      int v7 = 3;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v27 = *(_DWORD *)(a1 + 8);
        if ((v15 - 1) > 7u) {
          int v28 = "UNKNOWN";
        }
        else {
          int v28 = off_10021A7C8[(char)(v15 - 1)];
        }
        int v29 = 136316162;
        int v30 = "_t56_protocol_handleRequest_TERMINATE";
        __int16 v31 = 1024;
        int v32 = 912;
        __int16 v33 = 1024;
        int v34 = v27;
        __int16 v35 = 1024;
        int v36 = v15;
        __int16 v37 = 2080;
        __int16 v38 = v28;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s:%d role %d, msgType %d(%s)", (uint8_t *)&v29, 0x28u);
      }
      uint64_t v8 = gLogObjects;
      uint64_t inited = 4294967294;
      if (a6 && a5 >= 0x7D0 && a4 && v15 == 7)
      {
        *a6 = 0;
        unsigned int v18 = *(unsigned __int16 *)(a2 + 1);
        if (v8 && gNumLogObjects >= 61)
        {
          int v19 = *(NSObject **)(v8 + 480);
        }
        else
        {
          int v19 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        int v20 = __rev16(v18);
        BOOL v21 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
        if (v21)
        {
          int v22 = *(_DWORD *)(a1 + 8);
          int v29 = 136316418;
          int v30 = "_t56_protocol_handleRequest_TERMINATE";
          __int16 v31 = 1024;
          int v32 = 929;
          __int16 v33 = 1024;
          int v34 = v22;
          __int16 v35 = 1024;
          int v36 = 7;
          __int16 v37 = 2080;
          __int16 v38 = "DATA";
          __int16 v39 = 1024;
          int v40 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s:%d role %d, msgType %d(%s), sessionID %d", (uint8_t *)&v29, 0x2Eu);
        }
        uint64_t inited = t56_protocol_initMsg_STATUS(v21, v20, 0, 0, a4, a5, a6);
        uint64_t v8 = gLogObjects;
        int v15 = 7;
      }
    }
  }
  else
  {
    int v15 = 0;
    uint64_t inited = 4294967294;
  }
  if (v8 && gNumLogObjects >= 61)
  {
    __int16 v23 = *(NSObject **)(v8 + 480);
  }
  else
  {
    __int16 v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 7u)
    {
      int v24 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }
    else
    {
      int v24 = off_10021A7C8[(char)(v15 - 1)];
      if (a6)
      {
LABEL_39:
        int v25 = *a6;
LABEL_42:
        int v29 = 136316674;
        int v30 = "_t56_protocol_handleRequest_TERMINATE";
        __int16 v31 = 1024;
        int v32 = 938;
        __int16 v33 = 1024;
        int v34 = inited;
        __int16 v35 = 1024;
        int v36 = v15;
        __int16 v37 = 2080;
        __int16 v38 = v24;
        __int16 v39 = 1024;
        int v40 = v7;
        __int16 v41 = 1024;
        int v42 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u", (uint8_t *)&v29, 0x34u);
        return inited;
      }
    }
    int v25 = -1;
    goto LABEL_42;
  }
  return inited;
}

uint64_t t56_protocol_initMsg_STATUS(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, _WORD *a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    BOOL v21 = "t56_protocol_initMsg_STATUS";
    __int16 v22 = 1024;
    int v23 = 1463;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d sessionID %d, status %d, status 0x%08x", buf, 0x24u);
  }
  uint64_t v13 = 4294967294;
  if (a5 && a6 >= 9)
  {
    uint64_t v13 = 0;
    *a5 = 8;
    a5[1] = BYTE1(a2);
    a5[3] = BYTE1(a3);
    a5[2] = a2;
    a5[4] = a3;
    a5[5] = HIBYTE(a4);
    a5[6] = BYTE2(a4);
    a5[7] = BYTE1(a4);
    a5[8] = a4;
    *a7 = 9;
  }
  int v14 = *a5;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v15 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if ((v14 - 1) > 7u)
    {
      int v17 = "UNKNOWN";
      if (a7) {
        goto LABEL_20;
      }
    }
    else
    {
      int v17 = off_10021A7C8[(char)(v14 - 1)];
      if (a7)
      {
LABEL_20:
        int v18 = (unsigned __int16)*a7;
LABEL_23:
        *(_DWORD *)buf = 136316674;
        BOOL v21 = "t56_protocol_initMsg_STATUS";
        __int16 v22 = 1024;
        int v23 = 1482;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = v14;
        __int16 v30 = 2080;
        __int16 v31 = v17;
        __int16 v32 = 1024;
        int v33 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v13;
      }
    }
    int v18 = -1;
    goto LABEL_23;
  }
  return v13;
}

uint64_t t56_protocol_initMsg_DATA(uint64_t a1, int a2, int a3, int a4, unsigned int a5, const void *a6, unsigned __int8 *a7, unsigned int a8, _WORD *a9)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v13 = a8;
    int v14 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v13 = a8;
    int v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316418;
    int v25 = "t56_protocol_initMsg_DATA";
    __int16 v26 = 1024;
    int v27 = 1499;
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    __int16 v34 = 1024;
    LODWORD(v35) = a5;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s:%d sessionID %d, clientID %d, remaining %d, payloadLen %d", buf, 0x2Au);
  }
  uint64_t v15 = 4294967294;
  if (a5)
  {
    if (a6)
    {
      if (a7)
      {
        if (a5 <= 0x7C7)
        {
          unint64_t v16 = a5 + 9;
          if (v16 <= v13)
          {
            *a7 = 6;
            a7[1] = BYTE1(a2);
            a7[2] = a2;
            a7[3] = BYTE1(a3);
            a7[4] = a3;
            a7[5] = BYTE1(a4);
            a7[6] = a4;
            a7[7] = BYTE1(a5);
            a7[8] = a5;
            memcpy(a7 + 9, a6, a5);
            uint64_t v15 = 0;
            *a9 = v16;
          }
        }
      }
    }
  }
  int v17 = *a7;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v18 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v18 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    if ((v17 - 1) > 7u)
    {
      int v20 = "UNKNOWN";
      if (a9) {
        goto LABEL_23;
      }
    }
    else
    {
      int v20 = off_10021A7C8[(char)(v17 - 1)];
      if (a9)
      {
LABEL_23:
        int v21 = (unsigned __int16)*a9;
LABEL_26:
        *(_DWORD *)buf = 136316674;
        int v25 = "t56_protocol_initMsg_DATA";
        __int16 v26 = 1024;
        int v27 = 1522;
        __int16 v28 = 1024;
        int v29 = v15;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 1024;
        int v33 = v17;
        __int16 v34 = 2080;
        __int16 v35 = v20;
        __int16 v36 = 1024;
        int v37 = v21;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d", buf, 0x34u);
        return v15;
      }
    }
    int v21 = -1;
    goto LABEL_26;
  }
  return v15;
}

uint64_t t56_protocol_initMsg_DISCOVER(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, _WORD *a5)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v9 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_initMsg_DISCOVER_cold_2();
  }
  uint64_t v10 = 4294967294;
  if (a3 && a4 >= 3)
  {
    uint64_t v10 = 0;
    *a3 = 3;
    a3[1] = BYTE1(a2);
    a3[2] = a2;
    *a5 = 3;
  }
  int v11 = *a3;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    unsigned int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((v11 - 1) > 7u)
    {
      int v14 = "UNKNOWN";
      if (a5) {
        goto LABEL_20;
      }
    }
    else
    {
      int v14 = off_10021A7C8[(char)(v11 - 1)];
      if (a5)
      {
LABEL_20:
        int v15 = (unsigned __int16)*a5;
LABEL_23:
        int v16 = 136316674;
        int v17 = "t56_protocol_initMsg_DISCOVER";
        __int16 v18 = 1024;
        int v19 = 1316;
        __int16 v20 = 1024;
        int v21 = v10;
        __int16 v22 = 1024;
        int v23 = a2;
        __int16 v24 = 1024;
        int v25 = v11;
        __int16 v26 = 2080;
        int v27 = v14;
        __int16 v28 = 1024;
        int v29 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d", (uint8_t *)&v16, 0x34u);
        return v10;
      }
    }
    int v15 = -1;
    goto LABEL_23;
  }
  return v10;
}

uint64_t t56_protocol_initMsg_POLL(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _WORD *a4)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v7 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_initMsg_POLL_cold_2();
  }
  uint64_t v8 = 4294967294;
  if (a2 && a3 >= 5)
  {
    uint64_t v8 = 0;
    *a2 = 5;
    *(_DWORD *)(a2 + 1) = 0;
    *a4 = 5;
  }
  int v9 = *a2;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v10 = *(NSObject **)(gLogObjects + 480);
  }
  else
  {
    uint64_t v10 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if ((v9 - 1) > 7u) {
      unsigned int v12 = "UNKNOWN";
    }
    else {
      unsigned int v12 = off_10021A7C8[(char)(v9 - 1)];
    }
    int v13 = -1;
    if (a4) {
      int v13 = (unsigned __int16)*a4;
    }
    int v14 = 136316674;
    int v15 = "t56_protocol_initMsg_POLL";
    __int16 v16 = 1024;
    int v17 = 1344;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = -1;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 2080;
    int v25 = v12;
    __int16 v26 = 1024;
    int v27 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s:%d result %d sessionID %d, msgType %d(%s), msgDataOutLen %d", (uint8_t *)&v14, 0x34u);
  }
  return v8;
}

void OUTLINED_FUNCTION_5_11(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void *_createFeature_23(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200400CC4F872uLL);
  CFArrayRef v2 = v1;
  if (v1)
  {
    *(_WORD *)uint64_t v1 = 0;
    v1[1] = 0;
    platform_hid_incrementUserCount();
  }
  return v2;
}

uint64_t _destroyFeature_23(void **a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v5 = *a1;
    if (*a1)
    {
      uint64_t v2 = platform_hid_unregister_all_descriptors(*(void *)(a2 + 8));
      CFDictionaryRef v6 = (const __CFDictionary *)*((void *)v5 + 1);
      if (v6)
      {
        CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0);
        int v7 = (const void *)*((void *)v5 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((void *)v5 + 1) = 0;
        }
      }
      acc_endpoint_removeProperty(*(pthread_mutex_t **)a2, kCFACCProperties_Endpoint_Bluetooth_HIDFunction);
      platform_hid_decrementUserCount();
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t _startFeatureFromDevice_14(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    if (!*(void *)result) {
      return 0;
    }
    if (!iap2_feature_getFeature(result, 0xBu) || !*(unsigned char *)(iap2_feature_getFeature((uint64_t)v1, 0xBu) + 1)) {
      return 1;
    }
    uint64_t v2 = (uint64_t *)*v1;
    if (!*v1) {
      return 0;
    }
    uint64_t result = *v2;
    if (!*v2) {
      return result;
    }
    if (acc_connection_getType(result) == 2 || acc_endpoint_getTransportType(*v1) == 8)
    {
      iAP2MsgInit((uint64_t)(v1 + 15), 26630, v1[24], 0xFFFF, 0, 0);
      return iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _checkIdentificationInfo_20(uint64_t a1)
{
  unsigned __int8 v14 = -86;
  if (gLogObjects && gNumLogObjects >= 33)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_5();
  }
  uint64_t v3 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgHIDList, 7u, &v14);
  if (v3) {
    return v3;
  }
  int v4 = v14;
  uint64_t v5 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgNativeHIDList, 1u, &v14);
  uint64_t v6 = v5;
  BOOL v7 = 0;
  int v8 = v14;
  BOOL v9 = 0;
  if (v14 | v4 && !v5)
  {
    iap2_features_createFeature(a1, 0xBu);
    iap2_identification_setIdentifiedForFeature(a1, 0xBu);
    BOOL v7 = v4 != 0;
    BOOL v9 = v8 != 0;
  }
  uint64_t Feature = (unsigned char *)iap2_feature_getFeature(a1, 0xBu);
  if (Feature)
  {
    *uint64_t Feature = v7;
    Feature[1] = v9;
  }
  if (!v7) {
    goto LABEL_21;
  }
  if (gLogObjects && gNumLogObjects >= 33)
  {
    int v11 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    int v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    _checkIdentificationInfo_cold_3_1();
    if (!v9) {
      return v6;
    }
  }
  else
  {
LABEL_21:
    if (!v9) {
      return v6;
    }
  }
  if (gLogObjects && gNumLogObjects >= 33)
  {
    unsigned int v12 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    unsigned int v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_1_4();
  }
  return v6;
}

void _handleIdentificationRejection_3(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (Feature)
  {
    uint64_t v2 = Feature;
    CFDictionaryRef v3 = *(const __CFDictionary **)(Feature + 8);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0);
      int v4 = *(const void **)(v2 + 8);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 8) = 0;
      }
    }
  }
}

uint64_t _hidComponentFunctionType(uint64_t a1, int a2)
{
  if (!a1) {
    return 11;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    __int16 v16 = logObjectForModule_31();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _hidComponentFunctionType_cold_1();
    }
    return 11;
  }
  uint64_t v4 = Feature;
  CFDictionaryRef v5 = *(const __CFDictionary **)(Feature + 8);
  if (!v5)
  {
    int v17 = logObjectForModule_31();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _hidComponentFunctionType_cold_2();
    }
    return 11;
  }
  CFIndex Count = CFDictionaryGetCount(v5);
  if (!Count) {
    return 11;
  }
  uint64_t v7 = Count;
  __chkstk_darwin(Count);
  BOOL v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  memset(v9, 170, v8);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v4 + 8), 0, (const void **)v9);
  if (v7 >= 1)
  {
    int v19 = v21;
    *(void *)&long long v10 = 134218240;
    long long v18 = v10;
    do
    {
      uint64_t v11 = *v9;
      if (*v9)
      {
        if (!*(_DWORD *)v11)
        {
          uint64_t result = *(unsigned int *)(v11 + 16);
          if (result <= 0xA && *(unsigned __int16 *)(v11 + 4) == a2) {
            return result;
          }
        }
      }
      else
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          int v15 = *(NSObject **)(gLogObjects + 256);
        }
        else
        {
          int v15 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v18;
            uint64_t v23 = v13;
            __int16 v24 = 1024;
            int v25 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v15 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          _hidComponentFunctionType_cold_3(&v20, v19, v15);
        }
      }
      ++v9;
      --v7;
    }
    while (v7);
  }
  return 11;
}

void *logObjectForModule_31()
{
  if (gLogObjects && gNumLogObjects >= 33) {
    return *(void **)(gLogObjects + 256);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t _validateHIDComponent(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t Feature = iap2_feature_getFeature(result, 0xBu);
    if (Feature)
    {
      CFDictionaryRef v4 = *(const __CFDictionary **)(Feature + 8);
      if (v4)
      {
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(Feature + 8));
        if (Count)
        {
          uint64_t v6 = Count;
          __chkstk_darwin(Count);
          size_t v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
          memset(v8, 170, v7);
          CFDictionaryGetKeysAndValues(v4, 0, (const void **)v8);
          if (v6 >= 1)
          {
            int v17 = v19;
            *(void *)&long long v9 = 134218240;
            long long v16 = v9;
            do
            {
              uint64_t v10 = *v8;
              if (*v8)
              {
                if (!*(_DWORD *)v10 && *(_DWORD *)(v10 + 16) <= 0xAu && *(unsigned __int16 *)(v10 + 4) == a2)
                {
                  int v14 = 1;
                  return v14 != 0;
                }
              }
              else
              {
                uint64_t v11 = gLogObjects;
                int v12 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 33)
                {
                  uint64_t v13 = *(NSObject **)(gLogObjects + 256);
                }
                else
                {
                  uint64_t v13 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v16;
                    uint64_t v21 = v11;
                    __int16 v22 = 1024;
                    int v23 = v12;
                    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                    uint64_t v13 = &_os_log_default;
                  }
                }
                if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                  _hidComponentFunctionType_cold_3(&v18, v17, v13);
                }
              }
              ++v8;
              --v6;
            }
            while (v6);
          }
          int v14 = 0;
          return v14 != 0;
        }
      }
    }
    else
    {
      int v15 = logObjectForModule_31();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        _hidComponentFunctionType_cold_1();
      }
    }
    int v14 = 0;
    return v14 != 0;
  }
  return result;
}

uint64_t iap2_hid_StartHIDMsgHandler(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v73 = 0;
  char DataAsU8 = 0;
  int v71 = 0;
  if (a1 && a2)
  {
    kdebug_trace();
    if (iAP2MsgGetMsgID(a2) != 26624)
    {
      uint64_t v2 = 0;
      goto LABEL_84;
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v57 = 0;
      char v6 = 0;
      char v7 = 0;
      CFDataRef v8 = 0;
      unsigned __int16 v9 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        switch(ParamID)
        {
          case 0:
            int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v73);
            if (!v73)
            {
              unsigned __int16 v9 = DataAsU16;
              char v7 = _validateHIDComponent((uint64_t)a1, DataAsU16);
              goto LABEL_24;
            }
            __int16 v38 = logObjectForModule_31();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            goto LABEL_82;
          case 1:
            HIWORD(v71) = iAP2MsgGetDataAsU16(NextParam, &v73);
            char v6 = 1;
            goto LABEL_24;
          case 2:
            LOWORD(v71) = iAP2MsgGetDataAsU16(NextParam, &v73);
            char v57 = 1;
            goto LABEL_24;
          case 3:
            char DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v73);
            goto LABEL_24;
          case 4:
            unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
            uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v73);
            if (v73)
            {
              __int16 v39 = logObjectForModule_31();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
              }
              goto LABEL_82;
            }
            uint8_t v18 = (const UInt8 *)DataAsData;
            if (v8) {
              CFRelease(v8);
            }
            CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, v18, ParamValueLen);
LABEL_24:
            NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
            if (!NextParam) {
              goto LABEL_27;
            }
            break;
          default:
            CFDataRef v12 = v8;
            uint64_t v13 = gLogObjects;
            int v14 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 33)
            {
              int v15 = *(NSObject **)(gLogObjects + 256);
            }
            else
            {
              int v15 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v75 = v13;
                __int16 v76 = 1024;
                int v77 = v14;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v75) = ParamID;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
            }
            CFDataRef v8 = v12;
            goto LABEL_24;
        }
      }
    }
    unsigned __int16 v9 = 0;
    CFDataRef v8 = 0;
    char v7 = 0;
    char v6 = 0;
    char v57 = 0;
LABEL_27:
    if (v8 && (v6 & 1) != 0 && (v57 & 1) != 0 && (v7 & 1) != 0)
    {
      *(_DWORD *)buf = 0;
      int v69 = 2;
      int valuePtr = 1;
      int v67 = 4;
      int v68 = 3;
      int v65 = 6;
      int v66 = 5;
      int v64 = 7;
      int v63 = 9;
      int v61 = 11;
      int v62 = 10;
      int v60 = 12;
      CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, buf);
      CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v69);
      CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v68);
      CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v67);
      CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v66);
      CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v65);
      CFNumberRef v51 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v64);
      CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v63);
      CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v62);
      CFNumberRef v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v61);
      CFNumberRef v47 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v60);
      CFNumberRef value = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, (char *)&v71 + 2);
      CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &v71);
      CFNumberRef v45 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &DataAsU8);
      uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*a1);
      CFNumberRef key = v21;
      CFNumberRef cf = v22;
      if (AccessoryInfo)
      {
        uint64_t v24 = AccessoryInfo;
        int v25 = acc_accInfo_retainedProperty(AccessoryInfo, 0, 0);
        __int16 v26 = acc_accInfo_retainedProperty(v24, 1, 0);
        int v42 = acc_accInfo_retainedProperty(v24, 2, 0);
        __int16 v41 = acc_accInfo_retainedProperty(v24, 3, 0);
        int v27 = (void *)acc_accInfo_retainedProperty(v24, 5, 0);
      }
      else
      {
        __int16 v28 = iap2_identification_paramName(0);
        int v25 = CFStringCreateWithCString(kCFAllocatorDefault, v28, 0x8000100u);
        int v29 = iap2_identification_paramName(2);
        __int16 v26 = CFStringCreateWithCString(kCFAllocatorDefault, v29, 0x8000100u);
        __int16 v30 = iap2_identification_paramName(1);
        int v42 = CFStringCreateWithCString(kCFAllocatorDefault, v30, 0x8000100u);
        int v31 = iap2_identification_paramName(3);
        __int16 v41 = CFStringCreateWithCString(kCFAllocatorDefault, v31, 0x8000100u);
        __int16 v32 = iap2_identification_paramName(4);
        int v27 = (void *)CFStringCreateWithCString(kCFAllocatorDefault, v32, 0x8000100u);
      }
      int v33 = v27;
      uint64_t v34 = v9;
      int v59 = _hidComponentFunctionType((uint64_t)a1, v9);
      CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v59);
      CFSetRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, v19, @"iAP");
      CFDictionaryAddValue(Mutable, v20, value);
      CFDictionaryAddValue(Mutable, key, cf);
      CFDictionaryAddValue(Mutable, v47, v25);
      CFDictionaryAddValue(Mutable, v54, v26);
      CFDictionaryAddValue(Mutable, v53, v42);
      CFDictionaryAddValue(Mutable, v52, v41);
      CFTypeRef v43 = v33;
      CFDictionaryAddValue(Mutable, v55, v33);
      CFDictionaryAddValue(Mutable, v51, v45);
      CFDictionaryAddValue(Mutable, v50, v8);
      CFDictionaryAddValue(Mutable, v49, v35);
      CFDictionaryAddValue(Mutable, v48, kCFBooleanTrue);
      uint64_t v37 = platform_hid_register_descriptor(a1[1], v34, (uint64_t)Mutable);
      if (value) {
        CFRelease(value);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v45) {
        CFRelease(v45);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (v26) {
        CFRelease(v26);
      }
      if (v42) {
        CFRelease(v42);
      }
      if (v41) {
        CFRelease(v41);
      }
      if (v43) {
        CFRelease(v43);
      }
      if (v35) {
        CFRelease(v35);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (key) {
        CFRelease(key);
      }
      if (v55) {
        CFRelease(v55);
      }
      if (v54) {
        CFRelease(v54);
      }
      if (v53) {
        CFRelease(v53);
      }
      if (v52) {
        CFRelease(v52);
      }
      if (v51) {
        CFRelease(v51);
      }
      if (v50) {
        CFRelease(v50);
      }
      if (v49) {
        CFRelease(v49);
      }
      if (v48) {
        CFRelease(v48);
      }
      if (v47) {
        CFRelease(v47);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_83;
    }
LABEL_82:
    uint64_t v37 = 0;
    uint64_t v2 = 0;
    if (v8)
    {
LABEL_83:
      CFRelease(v8);
      uint64_t v2 = v37;
    }
  }
LABEL_84:
  kdebug_trace();
  return v2;
}

uint64_t iap2_hid_AccessoryHIDReportHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v23 = 0;
  if (a1 && a2)
  {
    kdebug_trace();
    if (iAP2MsgGetMsgID(a2) == 26626 && (unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0)) != 0)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      unsigned __int8 v7 = 0;
      CFDataRef v8 = 0;
      unsigned __int16 v9 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 1)
        {
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
          uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v23);
          if (v23)
          {
            CFNumberRef v21 = logObjectForModule_31();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_29;
          }
          int v15 = (const UInt8 *)DataAsData;
          if (v8) {
            CFRelease(v8);
          }
          CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, v15, ParamValueLen);
        }
        else
        {
          int v11 = ParamID;
          if (ParamID)
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 33)
            {
              uint8_t v18 = *(NSObject **)(gLogObjects + 256);
            }
            else
            {
              uint8_t v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v25 = v16;
                __int16 v26 = 1024;
                int v27 = v17;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v25) = v11;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
            }
          }
          else
          {
            int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v23);
            if (v23)
            {
              CFNumberRef v20 = logObjectForModule_31();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_29;
            }
            unsigned __int16 v9 = DataAsU16;
            unsigned __int8 v7 = _validateHIDComponent(a1, DataAsU16);
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      }
      while (NextParam);
      if ((v7 & (v8 != 0)) == 1)
      {
        uint64_t v19 = platform_hid_in_report(*(void *)(a1 + 8), v9, (uint64_t)v8);
        goto LABEL_30;
      }
LABEL_29:
      uint64_t v19 = 0;
      uint64_t v2 = 0;
      if (!v8) {
        goto LABEL_31;
      }
LABEL_30:
      CFRelease(v8);
      uint64_t v2 = v19;
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
LABEL_31:
  kdebug_trace();
  return v2;
}

unint64_t iap2_hid_AccessoryHIDGetReportResponseHandler(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0;
  int v28 = 0;
  uint64_t v27 = a1;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 26629)
    {
      unint64_t result = iAP2MsgGetFirstParam(a2, 0);
      if (result)
      {
        NextParam = (unsigned __int16 *)result;
        uint64_t v26 = 0;
        int v25 = 0;
        CFDataRef v6 = 0;
        unsigned __int8 v7 = 0;
        unsigned __int8 v8 = 0;
        unsigned __int16 v9 = 0;
        while (2)
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          switch(ParamID)
          {
            case 0:
              int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v28);
              if (!v28)
              {
                unsigned __int16 v9 = DataAsU16;
                int v25 = _validateHIDComponent(v27, DataAsU16);
                goto LABEL_24;
              }
              CFNumberRef v21 = logObjectForModule_31();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_36;
            case 1:
              unsigned __int8 DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v28);
              if (v28)
              {
                CFNumberRef v22 = logObjectForModule_31();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
                }
                goto LABEL_36;
              }
              unsigned __int8 v8 = DataAsU8;
              LODWORD(v26) = 1;
LABEL_24:
              NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
              if (NextParam) {
                continue;
              }
              if ((v25 & v26 & HIDWORD(v26) & 1) != 0 && v6)
              {
                uint64_t report_response = platform_hid_get_report_response(*(void *)(v27 + 8), v9, v8, v7, (uint64_t)v6);
                goto LABEL_37;
              }
LABEL_36:
              uint64_t report_response = 0;
              unint64_t result = 0;
              if (v6)
              {
LABEL_37:
                CFRelease(v6);
                unint64_t result = report_response;
              }
              break;
            case 2:
              unsigned __int8 v16 = iAP2MsgGetDataAsU8(NextParam, &v28);
              if (v28)
              {
                int v23 = logObjectForModule_31();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
                }
                goto LABEL_36;
              }
              unsigned __int8 v7 = v16;
              HIDWORD(v26) = 1;
              goto LABEL_24;
            case 3:
              unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
              uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v28);
              if (v28)
              {
                uint64_t v24 = logObjectForModule_31();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
                }
                goto LABEL_36;
              }
              uint64_t v19 = (const UInt8 *)DataAsData;
              if (v6) {
                CFRelease(v6);
              }
              CFDataRef v6 = CFDataCreate(kCFAllocatorDefault, v19, ParamValueLen);
              goto LABEL_24;
            default:
              uint64_t v12 = gLogObjects;
              int v13 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 33)
              {
                int v14 = *(NSObject **)(gLogObjects + 256);
              }
              else
              {
                int v14 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v30 = v12;
                  __int16 v31 = 1024;
                  int v32 = v13;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v30) = ParamID;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
              }
              goto LABEL_24;
          }
          break;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_hid_StopHIDMsgHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  int v15 = 0;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) != 26627) {
      return 0;
    }
    uint64_t result = iAP2MsgGetFirstParam(a2, 0);
    if (result)
    {
      NextParam = (unsigned __int16 *)result;
      char v6 = 0;
      unsigned __int16 v7 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v9 = ParamID;
          uint64_t v10 = gLogObjects;
          int v11 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 33)
          {
            uint64_t v12 = *(NSObject **)(gLogObjects + 256);
          }
          else
          {
            uint64_t v12 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v17 = v10;
              __int16 v18 = 1024;
              int v19 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              uint64_t v12 = &_os_log_default;
            }
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v17) = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
          }
        }
        else
        {
          int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v15);
          if (v15)
          {
            int v14 = logObjectForModule_31();
            uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0;
          }
          unsigned __int16 v7 = DataAsU16;
          char v6 = _validateHIDComponent(a1, DataAsU16);
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam)
        {
          if ((v6 & 1) == 0) {
            return 0;
          }
          return platform_hid_unregister_descriptor(*(void *)(a1 + 8), v7);
        }
      }
    }
  }
  return result;
}

uint64_t iap2_hid_sendOutReport(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0;
  if (a1 && theDict)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"Report");
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
    __int16 valuePtr = 0;
    CFNumberGetValue(v6, kCFNumberShortType, &valuePtr);
    iAP2MsgInit((uint64_t)(a1 + 15), 26625, a1[24], 0xFFFF, 0, 0);
    if (v6)
    {
      unsigned __int16 v11 = 0;
      CFNumberGetValue(v6, kCFNumberShortType, &v11);
      BOOL v7 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0, 0, v11) == 0;
      if (!Value) {
        return 0;
      }
    }
    else
    {
      BOOL v7 = 1;
      if (!Value) {
        return 0;
      }
    }
    BytePtr = CFDataGetBytePtr(Value);
    unsigned __int16 Length = CFDataGetLength(Value);
    if (iAP2MsgAddDataParam((uint64_t)(a1 + 15), 0, 1, BytePtr, Length)) {
      char v10 = v7;
    }
    else {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }
  return result;
}

uint64_t iap2_hid_sendGetReport(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0;
  if (!a1 || !theDict) {
    return result;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ReportType");
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ReportID");
  iAP2MsgInit((uint64_t)(a1 + 15), 26628, a1[24], 0xFFFF, 0, 0);
  if (Value)
  {
    unsigned __int16 valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
    BOOL v8 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0, 0, valuePtr) == 0;
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    BOOL v8 = 1;
    if (v6)
    {
LABEL_5:
      char v12 = 0;
      CFNumberGetValue(v6, kCFNumberCharType, &v12);
      BOOL v9 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 1, v12) == 0;
      if (v7) {
        goto LABEL_6;
      }
      return 0;
    }
  }
  BOOL v9 = 1;
  if (!v7) {
    return 0;
  }
LABEL_6:
  char v11 = 0;
  CFNumberGetValue(v7, kCFNumberCharType, &v11);
  char v10 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 2, v11);
  uint64_t result = 0;
  if (!v8 && !v9)
  {
    if (v10) {
      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }
  }
  return result;
}

uint64_t iap2_hid_sendComponentUpdate(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0;
  if (!a1 || !theDict) {
    return result;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Enabled");
  iAP2MsgInit((uint64_t)(a1 + 15), 26631, a1[24], 0xFFFF, 0, 0);
  if (!Value)
  {
    BOOL v7 = 1;
    if (v6) {
      goto LABEL_5;
    }
    return 0;
  }
  unsigned __int16 valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
  BOOL v7 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0, 0, valuePtr) == 0;
  if (!v6) {
    return 0;
  }
LABEL_5:
  char v10 = 0;
  CFNumberGetValue(v6, kCFNumberCharType, &v10);
  BOOL v8 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0, 1, v10);
  uint64_t result = 0;
  if (v8) {
    char v9 = v7;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0) {
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }
  return result;
}

BOOL _parseiAPHIDComponentIdentificationParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v36 = -1;
  if (!a1)
  {
    int v32 = logObjectForModule_31();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature(a1, 0xBu);
    uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
    if (!Feature)
    {
      int v33 = logObjectForModule_31();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0;
    }
  }
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    BOOL v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v38 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }
  if (ParamID != 18)
  {
    BOOL v23 = 0;
    unsigned int v14 = 10;
    goto LABEL_55;
  }
  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_43;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  cStr = 0;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  unsigned int v14 = 10;
  int v15 = 9;
  do
  {
    int v16 = iAP2MsgGetParamID((uint64_t)NextParam);
    if (v16 == 2)
    {
      if (v11)
      {
        BOOL v11 = 1;
        goto LABEL_23;
      }
      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v36);
      int v15 = DataAsU8;
      if (v36)
      {
        BOOL v11 = 0;
      }
      else
      {
        BOOL v11 = DataAsU8 < 0xB;
        if (DataAsU8 >= 0xB) {
          unsigned int v14 = 6;
        }
      }
    }
    else if (v16 == 1)
    {
      if (v12)
      {
        BOOL v12 = 1;
        goto LABEL_23;
      }
      cStr = (char *)iAP2MsgGetDataAsString(NextParam, (BOOL *)&v36);
      BOOL v12 = v36 == 0;
    }
    else
    {
      if (v16) {
        goto LABEL_30;
      }
      if (v13)
      {
        BOOL v13 = 1;
LABEL_23:
        unsigned int v14 = 5;
        goto LABEL_30;
      }
      __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v36);
      BOOL v13 = v36 == 0;
    }
LABEL_30:
    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }
  while (NextParam);
  if (!v13 || !v12 || !v11 || v14 == 5)
  {
    if (v14 != 10) {
      goto LABEL_54;
    }
LABEL_43:
    BOOL v23 = 0;
    unsigned int v14 = 2;
    goto LABEL_55;
  }
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFDictionaryRef Mutable = *(const __CFDictionary **)(Feature + 8);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, 0);
      *(void *)(Feature + 8) = Mutable;
    }
    if (CFDictionaryContainsKey(Mutable, v19))
    {
      CFDictionaryRef v21 = *(const __CFDictionary **)(Feature + 8);
      if (v21)
      {
        CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0);
        CFNumberRef v22 = *(const void **)(Feature + 8);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(Feature + 8) = 0;
        }
      }
      unsigned int v14 = 3;
    }
    else
    {
      uint64_t v24 = malloc_type_calloc(1uLL, 0x18uLL, 0x10600401C4EE62AuLL);
      int v25 = v24;
      if (v24)
      {
        _DWORD *v24 = 0;
        *((_WORD *)v24 + 2) = valuePtr;
        *((void *)v24 + 1) = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        v25[4] = v15;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          uint64_t v26 = *(NSObject **)(gLogObjects + 256);
        }
        else
        {
          uint64_t v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          int v27 = *v25;
          int v28 = *((unsigned __int16 *)v25 + 2);
          uint64_t v29 = *((void *)v25 + 1);
          int v30 = v25[4];
          *(_DWORD *)buf = 67109890;
          int v38 = v27;
          __int16 v39 = 1024;
          int v40 = v28;
          __int16 v41 = 2112;
          uint64_t v42 = v29;
          __int16 v43 = 1024;
          int v44 = v30;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Adding iAP HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDComponent_Function_t}d", buf, 0x1Eu);
        }
      }
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(Feature + 8), v19, v25);
      unsigned int v14 = 0;
      *(unsigned char *)uint64_t Feature = 1;
    }
    CFRelease(v19);
  }
LABEL_54:
  BOOL v23 = (v36 | v14) == 0;
  if (v14) {
LABEL_55:
  }
    iap2_identification_addRejectParam(a1, 18, v14);
  return v23;
}

BOOL _parseUSBHostHIDComponentIdentificationParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v42 = 0;
  if (!a1)
  {
    CFNumberRef v35 = logObjectForModule_31();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature(a1, 0xBu);
    uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
    if (!Feature)
    {
      int v36 = logObjectForModule_31();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0;
    }
  }
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    BOOL v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v44 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }
  if (ParamID != 23)
  {
    BOOL v18 = 0;
    unsigned int v16 = 10;
LABEL_63:
    platform_usb_clearUSBHostHIDInterfaces(*(void *)(a1 + 16));
    iap2_identification_addRejectParam(a1, 18, v16);
    return v18;
  }
  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam)
  {
LABEL_48:
    BOOL v18 = 0;
    unsigned int v16 = 2;
    goto LABEL_63;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  uint64_t v37 = Feature;
  cStr = 0;
  uint64_t v40 = 0;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  BOOL v15 = 0;
  unsigned int v16 = 10;
  int v38 = 9;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)NextParam))
    {
      case 0u:
        if (v15)
        {
          BOOL v15 = 1;
          goto LABEL_25;
        }
        __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v42);
        BOOL v15 = !v42;
        break;
      case 1u:
        if (v14)
        {
          BOOL v14 = 1;
          goto LABEL_25;
        }
        cStr = (char *)iAP2MsgGetDataAsString(NextParam, &v42);
        BOOL v14 = !v42;
        break;
      case 2u:
        if (v13)
        {
          BOOL v13 = 1;
          goto LABEL_25;
        }
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v42);
        int v38 = DataAsU8;
        if (v42)
        {
          BOOL v13 = 0;
        }
        else
        {
          BOOL v13 = DataAsU8 < 0xB;
          if (DataAsU8 >= 0xB) {
            unsigned int v16 = 6;
          }
        }
        break;
      case 3u:
        if (v12)
        {
          BOOL v12 = 1;
          goto LABEL_25;
        }
        LOWORD(v40) = iAP2MsgGetDataAsU16(NextParam, &v42);
        BOOL v12 = !v42;
        break;
      case 4u:
        if (v11)
        {
          BOOL v11 = 1;
LABEL_25:
          unsigned int v16 = 5;
        }
        else
        {
          WORD2(v40) = iAP2MsgGetDataAsU16(NextParam, &v42);
          BOOL v11 = !v42;
        }
        break;
      default:
        break;
    }
    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }
  while (NextParam);
  if (!v15 || !v14 || !v13 || !v12 || !v11 || v16 == 5)
  {
    if (v16 != 10) {
      goto LABEL_62;
    }
    goto LABEL_48;
  }
  CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFDictionaryRef Mutable = *(const __CFDictionary **)(v37 + 8);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, 0);
      *(void *)(v37 + 8) = Mutable;
    }
    if (CFDictionaryContainsKey(Mutable, v20))
    {
      CFDictionaryRef v22 = *(const __CFDictionary **)(v37 + 8);
      if (v22)
      {
        CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0);
        BOOL v23 = *(const void **)(v37 + 8);
        if (v23)
        {
          CFRelease(v23);
          *(void *)(v37 + 8) = 0;
        }
      }
      unsigned int v16 = 3;
    }
    else
    {
      uint64_t v24 = malloc_type_calloc(1uLL, 0x18uLL, 0x10600401C4EE62AuLL);
      if (v24)
      {
        int v25 = v24;
        *(_DWORD *)uint64_t v24 = 1;
        v24[2] = valuePtr;
        *((void *)v24 + 1) = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        *((_DWORD *)v25 + 4) = v38;
        unsigned char v25[10] = v40;
        v25[11] = WORD2(v40);
        if (gLogObjects && gNumLogObjects >= 33)
        {
          uint64_t v26 = *(NSObject **)(gLogObjects + 256);
        }
        else
        {
          uint64_t v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          int v27 = *(_DWORD *)v25;
          int v28 = (unsigned __int16)v25[2];
          uint64_t v29 = *((void *)v25 + 1);
          int v30 = *((_DWORD *)v25 + 4);
          int v31 = (unsigned __int16)v25[10];
          int v32 = (unsigned __int16)v25[11];
          *(_DWORD *)buf = 67110402;
          int v44 = v27;
          __int16 v45 = 1024;
          int v46 = v28;
          __int16 v47 = 2112;
          uint64_t v48 = v29;
          __int16 v49 = 1024;
          int v50 = v30;
          __int16 v51 = 1024;
          int v52 = v31;
          __int16 v53 = 1024;
          int v54 = v32;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Adding Native USB HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDComponent_Function_t}d nativeTransportComponentID: %d, interfaceNumber: %d", buf, 0x2Au);
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v37 + 8), v20, v25);
        if ((platform_usb_setUSBHostHIDInterface(*(void *)(a1 + 16), *((unsigned __int8 *)v25 + 22), *((unsigned int *)v25 + 4)) & 1) == 0)
        {
          int v33 = logObjectForModule_31();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            _parseUSBHostHIDComponentIdentificationParams_cold_3();
          }
        }
        unsigned int v16 = 0;
        *(unsigned char *)(v37 + 1) = 1;
      }
    }
    CFRelease(v20);
  }
LABEL_62:
  BOOL v18 = (v42 | v16) == 0;
  if (v16) {
    goto LABEL_63;
  }
  return v18;
}

BOOL _parseNativeBTHIDComponentIdentificationParams(pthread_mutex_t **a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v41 = 0;
  if (!a1)
  {
    uint64_t v34 = logObjectForModule_31();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0;
  }
  if (!*a1)
  {
    CFNumberRef v35 = logObjectForModule_31();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _parseNativeBTHIDComponentIdentificationParams_cold_2();
    }
    return 0;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature((uint64_t)a1, 0xBu);
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xBu);
    if (!Feature)
    {
      int v36 = logObjectForModule_31();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0;
    }
  }
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(NSObject **)(gLogObjects + 256);
  }
  else
  {
    BOOL v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v43 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }
  if (ParamID != 29)
  {
    BOOL v22 = 0;
    unsigned int v15 = 10;
LABEL_48:
    iap2_identification_addRejectParam((uint64_t)a1, 18, v15);
    return v22;
  }
  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam)
  {
LABEL_46:
    BOOL v22 = 0;
    unsigned int v15 = 2;
    goto LABEL_48;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  __int16 DataAsU16 = 0;
  cStr = 0;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  unsigned int v15 = 10;
  int v37 = 9;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)NextParam))
    {
      case 0u:
        if (v14)
        {
          BOOL v14 = 1;
          goto LABEL_24;
        }
        __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v41);
        BOOL v14 = !v41;
        break;
      case 1u:
        if (v13)
        {
          BOOL v13 = 1;
          goto LABEL_24;
        }
        cStr = (char *)iAP2MsgGetDataAsString(NextParam, &v41);
        BOOL v13 = !v41;
        break;
      case 2u:
        if (v12)
        {
          BOOL v12 = 1;
          goto LABEL_24;
        }
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v41);
        int v37 = DataAsU8;
        if (v41)
        {
          BOOL v12 = 0;
        }
        else
        {
          BOOL v12 = DataAsU8 < 0xB;
          if (DataAsU8 >= 0xB) {
            unsigned int v15 = 6;
          }
        }
        break;
      case 3u:
        if (v11)
        {
          BOOL v11 = 1;
LABEL_24:
          unsigned int v15 = 5;
        }
        else
        {
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v41);
          BOOL v11 = !v41;
        }
        break;
      default:
        break;
    }
    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }
  while (NextParam);
  if (!v14 || !v13 || !v12 || !v11 || v15 == 5)
  {
    if (v15 != 10) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  if (v17)
  {
    CFNumberRef v18 = v17;
    CFDictionaryRef Mutable = *(const __CFDictionary **)(Feature + 8);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, 0);
      *(void *)(Feature + 8) = Mutable;
    }
    if (CFDictionaryContainsKey(Mutable, v18))
    {
      CFDictionaryRef v20 = *(const __CFDictionary **)(Feature + 8);
      if (v20)
      {
        CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0);
        CFDictionaryRef v21 = *(const void **)(Feature + 8);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(Feature + 8) = 0;
        }
      }
      unsigned int v15 = 3;
    }
    else
    {
      uint64_t v24 = malloc_type_calloc(1uLL, 0x18uLL, 0x10600401C4EE62AuLL);
      if (v24)
      {
        int v25 = v24;
        *(_DWORD *)uint64_t v24 = 2;
        v24[2] = valuePtr;
        CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        *((_DWORD *)v25 + 4) = v37;
        *((void *)v25 + 1) = v26;
        unsigned char v25[10] = DataAsU16;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          int v27 = *(NSObject **)(gLogObjects + 256);
        }
        else
        {
          int v27 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          int v28 = *(_DWORD *)v25;
          int v29 = (unsigned __int16)v25[2];
          uint64_t v30 = *((void *)v25 + 1);
          int v31 = *((_DWORD *)v25 + 4);
          int v32 = (unsigned __int16)v25[10];
          *(_DWORD *)buf = 67110146;
          int v43 = v28;
          __int16 v44 = 1024;
          int v45 = v29;
          __int16 v46 = 2112;
          uint64_t v47 = v30;
          __int16 v48 = 1024;
          int v49 = v31;
          __int16 v50 = 1024;
          int v51 = v32;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Adding Native BT HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDComponent_Function_t}d nativeTransportComponentID: %d", buf, 0x24u);
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(Feature + 8), v18, v25);
        CFNullRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v25 + 8);
        if (acc_endpoint_setProperty(*a1, kCFACCProperties_Endpoint_Bluetooth_HIDFunction, v33))
        {
          unsigned int v15 = 0;
          *(unsigned char *)(Feature + 1) = 1;
        }
        if (v33) {
          CFRelease(v33);
        }
      }
    }
    CFRelease(v18);
  }
LABEL_47:
  BOOL v22 = (v41 | v15) == 0;
  if (v15) {
    goto LABEL_48;
  }
  return v22;
}

void _CFDictionaryApplierFunction_releaseHIDComponents(int a1, void *a2)
{
  if (a2)
  {
    CFDictionaryRef v3 = (const void *)a2[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a2);
  }
}

void platform_notifications_authenticationStatusDidChangeForConnectionUUID(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects < 7;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v14 = &_os_log_default;
    id v13 = &_os_log_default;
  }
  else
  {
    BOOL v14 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v32 = a1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[#Notifications] Informing transport clients/plugins that auth status has changed for connection %@...", buf, 0xCu);
  }

  if (a1)
  {
    v29[0] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionUUID;
    id v15 = a1;
    unsigned int v16 = +[NSString stringWithString:v15];
    v30[0] = v16;
    v29[1] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthStatusOld;
    CFNumberRef v17 = +[NSNumber numberWithInt:a2];
    v30[1] = v17;
    _DWORD v29[2] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthStatusNew;
    +[NSNumber numberWithInt:a3];
    CFNumberRef v18 = v28 = a3;
    v30[2] = v18;
    v29[3] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthType;
    CFNumberRef v19 = +[NSNumber numberWithInt:a4];
    v30[3] = v19;
    v29[4] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionIsAuthenticated;
    +[NSNumber numberWithBool:a5];
    v20 = unsigned int v27 = a5;
    v30[4] = v20;
    v29[5] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionWasAuthenticated;
    CFDictionaryRef v21 = +[NSNumber numberWithBool:a6];
    v30[5] = v21;
    +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:6];
    BOOL v22 = v26 = a6;

    BOOL v23 = +[NSNotificationCenter defaultCenter];

    [v23 postNotificationName:ACCTransportPlugin_AuthStatusDidChangeNotification object:0 userInfo:v22];
    uint64_t v24 = +[ACCTransportServer sharedServer];
    int v25 = +[NSString stringWithString:v15];
    [v24 authStateDidChange:v28 forConnectionWithUUID:v25 previousAuthState:a2 authType:a4 connectionIsAuthenticated:v27 connectionWasAuthenticated:v26];
  }
}

void platform_notifications_propertiesDidChangeForConnectionUUID(uint64_t a1, void *a2, void *a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v8 = &_os_log_default;
    id v7 = &_os_log_default;
  }
  else
  {
    BOOL v8 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v21 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[#Notifications] Informing transport clients/plugins that properties have changed for connection %@...", buf, 0xCu);
  }

  if (a1)
  {
    uint64_t v17 = a1;
    uint64_t v14 = ACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID;
    uint64_t v15 = ACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld;
    char v9 = a2;
    if (!a2)
    {
      char v9 = +[NSNull null];
    }
    CFNumberRef v18 = v9;
    uint64_t v16 = ACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew;
    char v10 = a3;
    if (!a3)
    {
      char v10 = +[NSNull null];
    }
    CFNumberRef v19 = v10;
    BOOL v11 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v14 count:3];
    if (a3)
    {
      if (a2)
      {
LABEL_18:
        BOOL v12 = +[NSNotificationCenter defaultCenter];
        [v12 postNotificationName:ACCTransportPlugin_ConnectionPropertiesDidChangeNotification object:0 userInfo:v11];

        id v13 = +[ACCTransportServer sharedServer];
        [v13 propertiesDidChange:a3 forConnectionWithUUID:a1 previousProperties:a2];

        return;
      }
    }
    else
    {

      if (a2) {
        goto LABEL_18;
      }
    }

    goto LABEL_18;
  }
}

void platform_notifications_propertiesDidChangeForEndpointUUID(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 7;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }
  else
  {
    char v10 = *(id *)(gLogObjects + 48);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v22 = a1;
    __int16 v23 = 2112;
    uint64_t v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[#Notifications] Informing transport clients/plugins that properties have changed for endpoint %@ (connection %@)...", buf, 0x16u);
  }

  if (a1 && a2)
  {
    v20[0] = a1;
    uint64_t v16 = ACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID;
    uint64_t v17 = ACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld;
    BOOL v11 = a3;
    if (!a3)
    {
      BOOL v11 = +[NSNull null];
    }
    v20[1] = v11;
    uint64_t v18 = ACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew;
    BOOL v12 = a4;
    if (!a4)
    {
      BOOL v12 = +[NSNull null];
    }
    uint64_t v19 = ACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID;
    _DWORD v20[2] = v12;
    v20[3] = a2;
    id v13 = +[NSDictionary dictionaryWithObjects:v20 forKeys:&v16 count:4];
    if (a4)
    {
      if (a3)
      {
LABEL_19:
        uint64_t v14 = +[NSNotificationCenter defaultCenter];
        [v14 postNotificationName:ACCTransportPlugin_EndpointPropertiesDidChangeNotification object:0 userInfo:v13];

        uint64_t v15 = +[ACCTransportServer sharedServer];
        [v15 propertiesDidChange:a4 forEndpointWithUUID:a1 previousProperties:a3 connectionUUID:a2];

        return;
      }
    }
    else
    {

      if (a3) {
        goto LABEL_19;
      }
    }

    goto LABEL_19;
  }
}

void *ea_endpoint_create(pthread_mutex_t *a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    CFDictionaryRef v3 = v2;
    if (v2)
    {
      *uint64_t v2 = a1;
      acc_endpoint_setProperty(a1, kCFACCProperties_Endpoint_EA_SessionOpen, kCFBooleanFalse);
    }
  }
  else
  {
    CFDictionaryRef v5 = logObjectForModule_32();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v5);
    }
    return 0;
  }
  return v3;
}

void *logObjectForModule_32()
{
  uint64_t v0 = gLogObjects;
  int v1 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 19;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    return *(void **)(gLogObjects + 144);
  }
  CFDictionaryRef v3 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    acc_nvmInfo_getPairingStatus_cold_1(v0, v1);
  }
  return v3;
}

void *ea_endpoint_publish(void *result)
{
  if (result) {
    return (void *)(*result != 0);
  }
  return result;
}

uint64_t ea_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    uint64_t result = *(void *)result;
    if (result)
    {
      free((void *)result);
      *int v1 = 0;
      return 1;
    }
  }
  return result;
}

BOOL mfi4Auth_protocol_initSessionCommon(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, unsigned int a5, const void *a6, unsigned int a7)
{
  if (a5 >= 5)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v14 = *(NSObject **)(gLogObjects + 440);
    }
    else
    {
      uint64_t v14 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSessionCommon_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    *(void *)(a1 + 8) = malloc_type_calloc(1uLL, 0x1001FuLL, 0xF4B500E3uLL);
    *(_WORD *)(a1 + 112) = 770;
    *(void *)(a1 + 120) = a5;
    memcpy((void *)(a1 + 114), a4, a5);
    if (a6 && a7)
    {
      *(void *)(a1 + 136) = a7;
      memcpy((void *)(a1 + 128), a6, a7);
    }
    else
    {
      *(void *)(a1 + 136) = 0;
    }
    *(_DWORD *)(a1 + 652) = 13;
    *(_DWORD *)(a1 + 24) = a3;
    *(void *)(a1 + 16) = malloc_type_calloc(1uLL, a3, 0xC935C756uLL);
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 30) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  return a5 < 5;
}

uint64_t mfi4Auth_protocol_cleanupSessionCommon(void *a1)
{
  if (a1)
  {
    mfi4Auth_relay_cleanup((uint64_t)a1);
    BOOL v2 = (void *)a1[55];
    if (v2)
    {
      free(v2);
      a1[55] = 0;
    }
    CFDictionaryRef v3 = (void *)a1[57];
    if (v3)
    {
      free(v3);
      a1[57] = 0;
    }
    CFDictionaryRef v4 = (void *)a1[59];
    if (v4)
    {
      free(v4);
      a1[59] = 0;
    }
    CFDictionaryRef v5 = (void *)a1[43];
    if (v5)
    {
      free(v5);
      a1[43] = 0;
    }
    BOOL v6 = (void *)a1[45];
    if (v6)
    {
      free(v6);
      a1[45] = 0;
    }
    id v7 = (void *)a1[47];
    if (v7)
    {
      free(v7);
      a1[47] = 0;
    }
    BOOL v8 = (void *)a1[2];
    if (v8)
    {
      free(v8);
      a1[2] = 0;
    }
    id v9 = (void *)a1[12];
    if (v9)
    {
      free(v9);
      a1[12] = 0;
    }
    iAP2LinkRunLoopInitImplementation(a1[1]);
    char v10 = (void *)a1[1];
    if (v10)
    {
      free(v10);
      a1[1] = 0;
    }
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v11 = *(NSObject **)(gLogObjects + 440);
  }
  else
  {
    BOOL v11 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "mfi4Auth_protocol_cleanupSessionCommon";
    __int16 v15 = 1024;
    int v16 = 87;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: %d", (uint8_t *)&v13, 0x12u);
  }
  return 1;
}

void init_logging()
{
  init_logging_modules((uint64_t)&_gLogObjects, 61, (uint64_t)_kLoggingModuleEntries);
  uint64_t v0 = (NSObject **)gLogObjects;
  int v1 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 1;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    CFDictionaryRef v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v15 = 134218240;
      *(void *)int v16 = v0;
      *(_WORD *)&v16[8] = 1024;
      int v17 = v1;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v15, 0x12u);
      uint64_t v0 = (NSObject **)gLogObjects;
      int v1 = gNumLogObjects;
    }
  }
  else
  {
    CFDictionaryRef v3 = *(NSObject **)gLogObjects;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (v0 && v1 >= 1)
    {
      CFDictionaryRef v4 = *v0;
    }
    else
    {
      CFDictionaryRef v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v15 = 134218240;
        *(void *)int v16 = v0;
        *(_WORD *)&v16[8] = 1024;
        int v17 = v1;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v15, 0x12u);
        uint64_t v0 = (NSObject **)gLogObjects;
        int v1 = gNumLogObjects;
      }
    }
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
    if (v0 && v1 >= 1)
    {
      BOOL v6 = *v0;
    }
    else
    {
      BOOL v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    int v15 = 67109376;
    *(_DWORD *)int v16 = v5;
    *(_WORD *)&uint8_t v16[4] = 1024;
    *(_DWORD *)&unsigned char v16[6] = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Daemon] Info enabled: %d, [Daemon] Debug enabled: %d", (uint8_t *)&v15, 0xEu);
    uint64_t v0 = (NSObject **)gLogObjects;
    int v1 = gNumLogObjects;
  }
  if (v0 && v1 >= 1)
  {
    BOOL v8 = *v0;
  }
  else
  {
    BOOL v8 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 20)
    {
      BOOL v11 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      BOOL v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v15 = 134218240;
        *(void *)int v16 = v9;
        *(_WORD *)&v16[8] = 1024;
        int v17 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v15, 0x12u);
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
      }
    }
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
    if (v9 && v10 >= 20)
    {
      int v13 = *(NSObject **)(v9 + 152);
    }
    else
    {
      int v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
    int v15 = 67109376;
    *(_DWORD *)int v16 = v12;
    *(_WORD *)&uint8_t v16[4] = 1024;
    *(_DWORD *)&unsigned char v16[6] = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[iAP2: Link Layer] Info enabled: %d, [iAP2: Link Layer] Debug enabled: %d", (uint8_t *)&v15, 0xEu);
  }
  init_logging_signposts();
}

void platform_assistiveTouch_accessoryAttached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 35)
  {
    BOOL v2 = *(id *)(gLogObjects + 272);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "assistiveTouch accessoryAttached: %@", (uint8_t *)&v5, 0xCu);
  }

  CFDictionaryRef v4 = +[ACCAssistiveTouchServer sharedServer];
  [v4 accessoryAssistiveTouchAttached:a1];
}

void platform_assistiveTouch_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 35)
  {
    BOOL v2 = *(id *)(gLogObjects + 272);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "assistiveTouch accessoryDetached: %@", (uint8_t *)&v5, 0xCu);
  }

  CFDictionaryRef v4 = +[ACCAssistiveTouchServer sharedServer];
  [v4 accessoryAssistiveTouchDetached:a1];
}

void platform_assistiveTouch_setState(void *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 35)
  {
    CFDictionaryRef v4 = *(id *)(gLogObjects + 272);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFDictionaryRef v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    BOOL v8 = a1;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "assistiveTouch setState: %@ enabled=%d", (uint8_t *)&v7, 0x12u);
  }

  uint64_t v6 = +[ACCAssistiveTouchServer sharedServer];
  [v6 setEnabled:a1 flag:a2];
}

void platform_assistiveTouch_requestStatus(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 35)
  {
    BOOL v2 = *(id *)(gLogObjects + 272);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = &_os_log_default;
    id v3 = &_os_log_default;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "assistiveTouch requestState: %@", (uint8_t *)&v5, 0xCu);
  }

  CFDictionaryRef v4 = +[ACCAssistiveTouchServer sharedServer];
  [v4 requestState:a1];
}

void platform_assistiveTouch_notifyStateHandler(void *a1, unsigned int a2)
{
  id v3 = a1;
  if (gLogObjects && gNumLogObjects >= 35)
  {
    CFDictionaryRef v4 = *(id *)(gLogObjects + 272);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFDictionaryRef v4 = &_os_log_default;
    id v5 = &_os_log_default;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 1024;
    unsigned int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "assistiveTouch notifyState %@ enabled=%d", (uint8_t *)&v6, 0x12u);
  }

  accFeatureHandlers_invokeHandler(v3, 17, a2);
}

void platform_assistiveTouch_incrementUserCount()
{
  uint64_t v0 = +[ACCAssistiveTouchServer sharedServer];
  [v0 incrementUserCount];

  int v1 = +[ACCAssistiveTouchServer sharedServer];
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = +[ACCFeaturePluginManager sharedManager];
    [v3 startPlugInsWithClasses:&off_100223308];
  }
}

void platform_assistiveTouch_decrementUserCount()
{
  id v0 = +[ACCAssistiveTouchServer sharedServer];
  [v0 decrementUserCount];
}

uint64_t iap2_deviceAuthentication_RequestDeviceCertificate(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t result = iap2_feature_getFeature(a1, 7u);
    if (result)
    {
      CFDictionaryRef v4 = *(NSObject **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = __iap2_deviceAuthentication_RequestDeviceCertificate_block_invoke;
      block[3] = &__block_descriptor_tmp_21;
      void block[4] = a1;
      dispatch_async(v4, block);
      return 1;
    }
  }
  return result;
}

uint64_t iap2_deviceAuthentication_RequestDeviceChallengeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v30 = 0;
  int v31 = &v30;
  uint64_t v26 = 0;
  unsigned int v27 = &v26;
  uint64_t v32 = 0x2000000000;
  uint64_t v33 = 0;
  uint64_t v28 = 0x2000000000;
  uint64_t v29 = 0;
  if (a1 && a2)
  {
    if (iap2_feature_getFeature(a1, 7u))
    {
      uint64_t v24 = a1;
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        while (1)
        {
          if (v31[3]) {
            goto LABEL_27;
          }
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          if (ParamID) {
            break;
          }
          ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)NextParam);
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
          unsigned int v14 = ParamValueLen;
          if (!ParamValueData || !ParamValueLen)
          {
            uint64_t v19 = gLogObjects;
            int v20 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 49)
            {
              uint64_t v21 = *(NSObject **)(gLogObjects + 384);
            }
            else
            {
              uint64_t v21 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)CFNumberRef v35 = v19;
                *(_WORD *)&v35[8] = 1024;
                int v36 = v20;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                uint64_t v21 = &_os_log_default;
              }
            }
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_26;
            }
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFNumberRef v35 = (unsigned __int16)ParamValueData;
            *(_WORD *)&v35[4] = 1024;
            *(_DWORD *)&v35[6] = v14;
            int v17 = v21;
            uint64_t v18 = "Auth challenge param malformed pChallengeBytes:%04X, challengeLength:%02X\n";
LABEL_25:
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0xEu);
            goto LABEL_26;
          }
          CFDataRef v15 = CFDataCreate(0, ParamValueData, ParamValueLen);
          v31[3] = (uint64_t)v15;
LABEL_26:
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
          if (!NextParam) {
            goto LABEL_27;
          }
        }
        int v8 = ParamID;
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 49)
        {
          BOOL v11 = *(NSObject **)(gLogObjects + 384);
        }
        else
        {
          BOOL v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)CFNumberRef v35 = v9;
            *(_WORD *)&v35[8] = 1024;
            int v36 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            BOOL v11 = &_os_log_default;
          }
        }
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)CFNumberRef v35 = v8;
        *(_WORD *)&v35[4] = 1024;
        *(_DWORD *)&v35[6] = MsgID;
        int v17 = v11;
        uint64_t v18 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
        goto LABEL_25;
      }
LABEL_27:
      void v27[3] = platform_auth_createDeviceNonceSignature();
      uint64_t v22 = *(NSObject **)(v24 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = __iap2_deviceAuthentication_RequestDeviceChallengeResponse_block_invoke;
      block[3] = &unk_10021AD40;
      void block[4] = &v26;
      void block[5] = &v30;
      void block[6] = v24;
      dispatch_async(v22, block);
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v2;
}

uint64_t iap2_deviceAuthentication_DeviceAuthenticationFailed(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (iap2_feature_getFeature(a1, 7u))
    {
      uint64_t v2 = 1;
      _setDeviceAuthState(a1, 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void _setDeviceAuthState(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t Feature = (int *)iap2_feature_getFeature(a1, 7u);
    if (Feature)
    {
      CFDictionaryRef v4 = Feature;
      *uint64_t Feature = a2;
      if (gLogObjects && gNumLogObjects >= 49)
      {
        id v5 = *(NSObject **)(gLogObjects + 384);
      }
      else
      {
        id v5 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = *v4;
        v7[0] = 67109120;
        v7[1] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "authState: %d", (uint8_t *)v7, 8u);
      }
    }
  }
}

uint64_t iap2_deviceAuthentication_DeviceAuthenticationSucceeded(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t result = iap2_feature_getFeature(a1, 7u);
    if (result)
    {
      _setDeviceAuthState(a1, 2);
      return 1;
    }
  }
  return result;
}

void *_createFeature_24(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v2) {
    _setDeviceAuthState(a1, 0);
  }
  return v2;
}

uint64_t _destroyFeature_24(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    uint64_t result = *(void *)result;
    if (result)
    {
      free((void *)result);
      *int v1 = 0;
      return 1;
    }
  }
  return result;
}

uint64_t _startFeatureFromDevice_15(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 49)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 384);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)CFDictionaryRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enabling Device Authentication Support...", v4, 2u);
  }
  _setDeviceAuthState(a1, 0);
  return 1;
}

uint64_t _checkIdentificationInfo_21(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgDeviceAuthList, 6u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 7u);
    iap2_identification_setIdentifiedForFeature(a1, 7u);
  }
  return v3;
}

double iAP2LinkDeviceActionAttach(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionAttach_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionAttach_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16) + 410;

  return iAP2LinkSetDefaultSYNParam(v2);
}

uint64_t *iAP2LinkDeviceActionSendResetSYNACK(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendResetSYNACK_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendResetSYNACK_cold_2();
  }
  __int16 v21 = -21846;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = v3;
  long long v20 = v3;
  long long v18 = v3;
  *a2 = 29;
  uint64_t v4 = *(void *)(a1 + 16);
  char NewSeqNum = iAP2LinkGetNewSeqNum(v4);
  iAP2LinkConnectedCB(v4, 0);
  uint64_t v6 = *(void *)(v4 + 280);
  if (v6)
  {
    iAP2LinkSetDefaultSYNParam(v4 + 410);
    iAP2LinkResetSeqAck(v4, 1, 0);
    id v7 = *(long long **)(v4 + 352);
    long long v9 = v7[1];
    long long v8 = v7[2];
    long long v10 = *v7;
    *(_WORD *)(v4 + 408) = *((_WORD *)v7 + 24);
    *(_OWORD *)(v4 + 376) = v9;
    *(_OWORD *)(v4 + 392) = v8;
    *(_OWORD *)(v4 + 360) = v10;
    BOOL v11 = *(unsigned __int8 **)(v6 + 72);
    unsigned int PayloadLen = iAP2PacketGetPayloadLen(v6);
    if (iAP2PacketParseSYNData(v11, PayloadLen, (uint64_t)&v18)) {
      iAP2LinkCheckNegotiation(v4, (unsigned __int8 *)&v18);
    }
  }
  else
  {
    __int16 v21 = *(_WORD *)(v4 + 408);
    long long v13 = *(_OWORD *)(v4 + 376);
    long long v18 = *(_OWORD *)(v4 + 360);
    long long v19 = v13;
    long long v20 = *(_OWORD *)(v4 + 392);
  }
  iAP2LinkResetSend(v4);
  char v14 = *(unsigned char *)(v4 + 212);
  if ((v14 & 4) == 0)
  {
    *(unsigned char *)(v4 + 190) = NewSeqNum;
    *(unsigned char *)(v4 + 212) = v14 | 4;
  }
  SYNPacket = (uint64_t *)iAP2PacketCreateSYNPacket(v4);
  unsigned int v16 = *(_DWORD *)(v4 + 464) + 1;
  *(_DWORD *)(v4 + 464) = v16;
  ++*(_DWORD *)(v4 + 496);
  ++*(_DWORD *)(v4 + 504);
  if ((*(unsigned char *)(v4 + 212) & 0x20) == 0 && v16 >= 0xB) {
    *a2 = 20;
  }
  iAP2LinkSendPacket(v4, (uint64_t)SYNPacket, 0);
  return iAP2PacketRelease(SYNPacket);
}

void iAP2LinkDeviceActionSendDetect(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendDetect_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendDetect_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  iAP2LinkResetSeqAck(v2, 0, 1);
  long long v3 = *(long long **)(v2 + 352);
  long long v5 = v3[1];
  long long v4 = v3[2];
  long long v6 = *v3;
  *(_WORD *)(v2 + 408) = *((_WORD *)v3 + 24);
  *(_OWORD *)(v2 + 376) = v5;
  *(_OWORD *)(v2 + 392) = v4;
  *(_OWORD *)(v2 + 360) = v6;
  iAP2LinkConnectedCB(v2, 0);

  iAP2LinkSendDetectCB(v2, 0, v7, v8, v9, v10, v11, v12);
}

void iAP2LinkDeviceActionSendRST(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendRST_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendRST_cold_2();
  }
  if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 20;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      long long v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v5 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 10);
      v13[0] = 67109120;
      v13[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ERROR: iAP2LinkDeviceActionSendRST: iAP2 Link Layer reset triggered! (state: %d)", (uint8_t *)v13, 8u);
    }
  }
  *a2 = 29;
  uint64_t v7 = *(void *)(a1 + 16);
  iAP2LinkResetSeqAck(v7, 0, 0);
  iAP2LinkSetDefaultSYNParam(v7 + 410);
  uint64_t v8 = *(long long **)(v7 + 352);
  long long v10 = v8[1];
  long long v9 = v8[2];
  long long v11 = *v8;
  *(_WORD *)(v7 + 408) = *((_WORD *)v8 + 24);
  *(_OWORD *)(v7 + 376) = v10;
  *(_OWORD *)(v7 + 392) = v9;
  *(_OWORD *)(v7 + 360) = v11;
  if ((*(unsigned char *)(v7 + 212) & 0x20) != 0 || *(_DWORD *)(v7 + 464) < 0xBu)
  {
    RSTPacket = (uint64_t *)iAP2PacketCreateRSTPacket(v7, *(unsigned char *)(v7 + 190));
    ++*(_DWORD *)(v7 + 584);
    iAP2LinkSendPacket(v7, (uint64_t)RSTPacket, 0);
    iAP2PacketRelease(RSTPacket);
  }
  else
  {
    *a2 = 20;
  }
}

uint64_t *iAP2LinkDeviceActionSendSYNACK(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendSYNACK_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendSYNACK_cold_2();
  }
  __int16 v17 = -21846;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v3;
  long long v16 = v3;
  long long v14 = v3;
  *a2 = 29;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 280);
  if (v5)
  {
    int v6 = *(unsigned __int8 **)(v5 + 72);
    unsigned int PayloadLen = iAP2PacketGetPayloadLen(v5);
    if (iAP2PacketParseSYNData(v6, PayloadLen, (uint64_t)&v14)) {
      iAP2LinkCheckNegotiation(v4, (unsigned __int8 *)&v14);
    }
  }
  else
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ERROR: Expected recvPck, just use previous negotiatedParam for now.", v13, 2u);
      }
    }
    __int16 v17 = *(_WORD *)(v4 + 408);
    long long v9 = *(_OWORD *)(v4 + 376);
    long long v14 = *(_OWORD *)(v4 + 360);
    long long v15 = v9;
    long long v16 = *(_OWORD *)(v4 + 392);
  }
  if ((*(unsigned char *)(v4 + 212) & 4) == 0)
  {
    *(unsigned char *)(v4 + 190) = iAP2LinkGetNewSeqNum(v4);
    *(unsigned char *)(v4 + 212) |= 4u;
  }
  SYNPacket = (uint64_t *)iAP2PacketCreateSYNPacket(v4);
  unsigned int v11 = *(_DWORD *)(v4 + 464) + 1;
  *(_DWORD *)(v4 + 464) = v11;
  ++*(_DWORD *)(v4 + 496);
  ++*(_DWORD *)(v4 + 504);
  if ((*(unsigned char *)(v4 + 212) & 0x20) == 0 && v11 >= 0xB) {
    *a2 = 20;
  }
  iAP2LinkSendPacket(v4, (uint64_t)SYNPacket, 0);
  return iAP2PacketRelease(SYNPacket);
}

uint64_t *iAP2LinkDeviceActionResendSYNACK(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionResendSYNACK_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionResendSYNACK_cold_2();
  }
  *a2 = 29;
  uint64_t v3 = *(void *)(a1 + 16);
  if ((*(unsigned char *)(v3 + 212) & 4) == 0)
  {
    *(unsigned char *)(v3 + 190) = iAP2LinkGetNewSeqNum(*(void *)(a1 + 16));
    *(unsigned char *)(v3 + 212) |= 4u;
  }
  uint64_t SYNPacket = iAP2PacketCreateSYNPacket(v3);
  uint64_t v5 = (uint64_t *)SYNPacket;
  unsigned int v6 = *(_DWORD *)(v3 + 472);
  if ((*(unsigned char *)(v3 + 212) & 0x20) != 0 || v6 < *(unsigned __int8 *)(v3 + 412))
  {
    unsigned int v7 = v6 + 1;
    *(_DWORD *)(v3 + 472) = v7;
    ++*(_DWORD *)(v3 + 512);
    ++*(_DWORD *)(v3 + 548);
    *(unsigned char *)(SYNPacket + 58) = v7;
    iAP2LinkSendPacket(v3, SYNPacket, 0);
  }
  else
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v8 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        uint64_t v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int8 *)(v3 + 412);
        int v11 = 136315394;
        uint64_t v12 = "Device:ResendSYNACK";
        __int16 v13 = 1024;
        int v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ERROR: %s Resend too many times! max=%d", (uint8_t *)&v11, 0x12u);
      }
    }
    *a2 = 20;
  }
  return iAP2PacketRelease(v5);
}

void iAP2LinkDeviceActionHandleMaxRetries(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionHandleMaxRetries_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionHandleMaxRetries_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);

  iAP2LinkEventNotify(v2, 6, 0);
}

void iAP2LinkDeviceActionNotifyConnection(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionNotifyConnection_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionNotifyConnection_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  *(_WORD *)(v2 + 458) = *(_WORD *)(v2 + 408);
  long long v3 = *(_OWORD *)(v2 + 376);
  *(_OWORD *)(v2 + 410) = *(_OWORD *)(v2 + 360);
  *(_OWORD *)(v2 + 426) = v3;
  *(_OWORD *)(v2 + 442) = *(_OWORD *)(v2 + 392);
  *(unsigned char *)(v2 + 214) = *(unsigned char *)(v2 + 213);
  *(unsigned char *)(v2 + 213) = *(unsigned char *)(v2 + 410);
  iAP2LinkEventNotify(v2, 2, v2 + 360);

  iAP2LinkConnectedCB(v2, 1);
}

void iAP2LinkDeviceActionSendRSTWithNewChecksumEnabled(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendRSTWithNewChecksumEnabled_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendRSTWithNewChecksumEnabled_cold_2();
  }
  *a2 = 29;
  uint64_t v3 = *(void *)(a1 + 16);
  *(unsigned char *)(v3 + 214) = *(unsigned char *)(v3 + 213);
  *(unsigned char *)(v3 + 213) = *(unsigned char *)(v3 + 410);
  iAP2LinkResetSeqAck(v3, 0, 0);
  iAP2LinkSetDefaultSYNParam(v3 + 410);
  uint64_t v4 = *(long long **)(v3 + 352);
  long long v6 = v4[1];
  long long v5 = v4[2];
  long long v7 = *v4;
  *(_WORD *)(v3 + 408) = *((_WORD *)v4 + 24);
  *(_OWORD *)(v3 + 376) = v6;
  *(_OWORD *)(v3 + 392) = v5;
  *(_OWORD *)(v3 + 360) = v7;
  if ((*(unsigned char *)(v3 + 212) & 0x20) != 0 || *(_DWORD *)(v3 + 464) < 0xBu)
  {
    RSTPacket = (uint64_t *)iAP2PacketCreateRSTPacket(v3, *(unsigned char *)(v3 + 190));
    ++*(_DWORD *)(v3 + 584);
    iAP2LinkSendPacket(v3, (uint64_t)RSTPacket, 0);
    iAP2PacketRelease(RSTPacket);
  }
  else
  {
    *a2 = 20;
  }
}

uint64_t *iAP2LinkDeviceActionSendSuspend(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendSuspend_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendSuspend_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  iAP2LinkEventNotify(v2, 7, v2 + 360);
  SUSPacket = (uint64_t *)iAP2PacketCreateSUSPacket(v2, *(unsigned char *)(v2 + 190));
  iAP2LinkSendPacketWaitSend(v2, (uint64_t)SUSPacket, 0);

  return iAP2PacketRelease(SUSPacket);
}

uint64_t *iAP2LinkDeviceActionSendResume(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkDeviceActionSendResume_cold_1();
  }
  if (!a2) {
    iAP2LinkDeviceActionSendResume_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  iAP2LinkEventNotify(v2, 8, v2 + 360);
  ACKPacket = (uint64_t *)iAP2PacketCreateACKPacket(v2, *(unsigned char *)(v2 + 190), *(unsigned char *)(v2 + 188), 0, 0, 0);
  iAP2LinkSendPacket(v2, (uint64_t)ACKPacket, 0);

  return iAP2PacketRelease(ACKPacket);
}

uint64_t iap2_voiceOver_moveCursorHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      long long v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "moveCursorHandler %@", buf, 0xCu);
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    int v20 = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v13 = ParamID;
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v13, MsgID);
        }
        else
        {
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v20);
          if (v20)
          {
            int v19 = iAP2MsgGetMsgID(a2);
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v19);
            return 0;
          }
          if (DataAsU8) {
            unsigned int v16 = -1;
          }
          else {
            unsigned int v16 = 4;
          }
          if (DataAsU8 == 1) {
            unsigned int v16 = 5;
          }
          if (DataAsU8 == 2) {
            unsigned int v16 = 24;
          }
          if (DataAsU8 <= 2) {
            uint64_t v11 = v16;
          }
          else {
            uint64_t v11 = v11;
          }
          if (DataAsU8 <= 2) {
            char v10 = 1;
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_32;
        }
      }
    }
    uint64_t v11 = 0;
    char v10 = 0;
LABEL_32:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      __int16 v17 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      __int16 v17 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412802;
      uint64_t v22 = v18;
      __int16 v23 = 1024;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v10 & 1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "moveCursotHandler: %@ action=%d (valid=%d)", buf, 0x18u);
    }
    if (v10)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0x15u);
      if (result)
      {
        platform_voiceOver_performAction(*(void *)(a1 + 8), v11, 0);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_selectCursorHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "selectCursorHandler %@", (uint8_t *)&v7, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0x15u);
    if (result)
    {
      platform_voiceOver_performAction(*(void *)(a1 + 8), 16, 0);
      return 1;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_scrollPageHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "scrollPageHandler %@", buf, 0xCu);
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    int v19 = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v13 = ParamID;
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v13, MsgID);
        }
        else
        {
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v19);
          if (v19)
          {
            int v18 = iAP2MsgGetMsgID(a2);
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v18);
            return 0;
          }
          if (DataAsU8 <= 3)
          {
            switch(DataAsU8)
            {
              case 0u:
                char v10 = 1;
                uint64_t v11 = 6;
                break;
              case 1u:
                char v10 = 1;
                uint64_t v11 = 7;
                break;
              case 2u:
                char v10 = 1;
                uint64_t v11 = 8;
                break;
              case 3u:
                char v10 = 1;
                uint64_t v11 = 9;
                break;
              default:
                char v10 = 1;
                uint64_t v11 = 0xFFFFFFFFLL;
                break;
            }
          }
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_27;
        }
      }
    }
    uint64_t v11 = 0;
    char v10 = 0;
LABEL_27:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      unsigned int v16 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      unsigned int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412802;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = v11;
      __int16 v24 = 1024;
      int v25 = v10 & 1;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "scrollPageHandler: %@ action=%d (valid=%d)", buf, 0x18u);
    }
    if (v10)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0x15u);
      if (result)
      {
        platform_voiceOver_performAction(*(void *)(a1 + 8), v11, 0);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_speakTextHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "speakTextHandler %@", buf, 0xCu);
    }
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    BOOL v20 = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v13 = ParamID;
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v13, MsgID);
        }
        else
        {
          DataAsString = iAP2MsgGetDataAsString(NextParam, &v20);
          if (v20)
          {
            int v19 = iAP2MsgGetMsgID(a2);
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v19);
            return 0;
          }
          if (DataAsString) {
            uint64_t v11 = DataAsString;
          }
          v10 |= DataAsString != 0;
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v11 = 0;
    char v10 = 0;
LABEL_23:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      unsigned int v16 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      unsigned int v16 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      int v18 = "";
      if (v10) {
        int v18 = (const char *)v11;
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v23 = v17;
      __int16 v24 = 2080;
      int v25 = v18;
      __int16 v26 = 1024;
      int v27 = v10 & 1;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "speakTextHandler: %@ text=%s (valid=%d)", buf, 0x1Cu);
    }
    if (v10)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0x15u);
      if (result)
      {
        v21[1] = v11;
        _DWORD v21[2] = 0xAAAAAAAAAAAAAAAALL;
        v21[0] = 0xAAAAAAAA00000017;
        platform_voiceOver_performAction(*(void *)(a1 + 8), 23, (uint64_t)v21);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_pauseSpeakingHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "pauseSpeakingHandler %@", (uint8_t *)&v7, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0x15u);
    if (result)
    {
      platform_voiceOver_performAction(*(void *)(a1 + 8), 19, 0);
      return 1;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_resumeSpeakingHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "resumeSpeakingHandler %@", (uint8_t *)&v7, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0x15u);
    if (result)
    {
      platform_voiceOver_performAction(*(void *)(a1 + 8), 20, 0);
      return 1;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_startInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    uint64_t v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "startInformationHandler %@", buf, 0xCu);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID == 2)
      {
        if (!iAP2MsgIsDataVoid(NextParam))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          int v26 = 2;
          goto LABEL_54;
        }
        int v10 = 1;
      }
      else
      {
        int v14 = ParamID;
        if (ParamID == 1)
        {
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            int v26 = 1;
LABEL_54:
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", v26, MsgID);
            return 0;
          }
          int v11 = 1;
        }
        else if (ParamID)
        {
          int v15 = iAP2MsgGetMsgID(a2);
          printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v14, v15);
        }
        else
        {
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            int v27 = iAP2MsgGetMsgID(a2);
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v27);
            return 0;
          }
          int v12 = 1;
        }
      }
      NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
      if (!NextParam) {
        goto LABEL_27;
      }
    }
  }
  int v12 = 0;
  int v11 = 0;
  int v10 = 0;
LABEL_27:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    unsigned int v16 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    unsigned int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138413058;
    uint64_t v29 = v17;
    __int16 v30 = 1024;
    int v31 = v12 & 1;
    __int16 v32 = 1024;
    int v33 = v11 & 1;
    __int16 v34 = 1024;
    int v35 = v10 & 1;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "startInformationHandler: %@ volumeValid=%d rateValid=%d enabledValid=%d", buf, 0x1Eu);
  }
  if (((v12 | v11 | v10) & 1) == 0) {
    return 0;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x15u);
  if (result)
  {
    int v18 = (int *)result;
    if (v11) {
      int v19 = 2;
    }
    else {
      int v19 = 0;
    }
    unsigned int v20 = v19 & 0xFFFFFFFE | v12 & 1;
    if (v10) {
      int v21 = 4;
    }
    else {
      int v21 = 0;
    }
    *(_DWORD *)uint64_t result = v20 | v21;
    if (gLogObjects && gNumLogObjects >= 21)
    {
      __int16 v22 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      __int16 v22 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a1 + 8);
      int v24 = *v18;
      *(_DWORD *)buf = 138412546;
      uint64_t v29 = v23;
      __int16 v30 = 1024;
      int v31 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "startInformationHandler: %@ infoRequestedMask=%xh, call requestInformationUpdate", buf, 0x12u);
    }
    platform_voiceOver_startInformationUpdate(*(void *)(a1 + 8));
    return 1;
  }
  return result;
}

uint64_t iap2_voiceOver_stopInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "stopInformationHandler %@", (uint8_t *)&v7, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0x15u);
    if (result)
    {
      *(_DWORD *)uint64_t result = 0;
      platform_voiceOver_stopInformationUpdate(*(void *)(a1 + 8));
      return 1;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_updateInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "updateInformationHandler %@", buf, 0xCu);
    }
    uint64_t v25 = 0;
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
    int v24 = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      int v10 = 0;
      int v11 = 0;
      float v12 = 0.0;
      float v13 = 0.0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v15 = ParamID;
          if (ParamID == 1)
          {
            unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v24);
            if (v24)
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 1, MsgID);
              return 0;
            }
            float v12 = (double)DataAsU8 / 255.0;
            *(float *)&uint64_t v25 = v12;
            int v10 = 1;
          }
          else
          {
            int v18 = iAP2MsgGetMsgID(a2);
            printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v15, v18);
          }
        }
        else
        {
          unsigned int v17 = iAP2MsgGetDataAsU8(NextParam, &v24);
          if (v24)
          {
            int v23 = iAP2MsgGetMsgID(a2);
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v23);
            return 0;
          }
          float v13 = (double)v17 / 255.0;
          *((float *)&v25 + 1) = v13;
          int v11 = 1;
        }
        NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
        if (!NextParam) {
          goto LABEL_24;
        }
      }
    }
    int v11 = 0;
    int v10 = 0;
    float v12 = 0.0;
    float v13 = 0.0;
LABEL_24:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      int v19 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      int v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138413314;
      uint64_t v27 = v20;
      __int16 v28 = 2048;
      double v29 = v13;
      __int16 v30 = 1024;
      int v31 = v11 & 1;
      __int16 v32 = 2048;
      double v33 = v12;
      __int16 v34 = 1024;
      int v35 = v10 & 1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "updateInformationHandler: %@ volume=%f (valid=%d), rate=%f (valid=%d)", buf, 0x2Cu);
    }
    if (((v10 | v11) & 1) != 0 && iap2_feature_getFeature(a1, 0x15u))
    {
      if (v11) {
        platform_voiceOver_setConfiguration(*(void *)(a1 + 8), 0, (_DWORD *)&v25 + 1);
      }
      uint64_t v2 = 1;
      if (v10) {
        platform_voiceOver_setConfiguration(*(void *)(a1 + 8), 1, &v25);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t iap2_voiceOver_startCursorInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    uint64_t v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "startCursorInformationHandler %@", buf, 0xCu);
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      switch(ParamID)
      {
        case 0:
          if (iAP2MsgIsDataVoid(NextParam))
          {
            int v13 = 1;
            goto LABEL_24;
          }
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
          return 0;
        case 1:
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            int v26 = iAP2MsgGetMsgID(a2);
            int v27 = 1;
            goto LABEL_58;
          }
          int v12 = 1;
          goto LABEL_24;
        case 2:
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            int v26 = iAP2MsgGetMsgID(a2);
            int v27 = 2;
            goto LABEL_58;
          }
          int v11 = 1;
          goto LABEL_24;
        case 3:
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            int v26 = iAP2MsgGetMsgID(a2);
            int v27 = 3;
LABEL_58:
            printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", v27, v26);
            return 0;
          }
          int v10 = 1;
LABEL_24:
          NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
          if (!NextParam) {
            goto LABEL_27;
          }
          break;
        default:
          int v15 = iAP2MsgGetMsgID(a2);
          printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", ParamID, v15);
          goto LABEL_24;
      }
    }
  }
  int v13 = 0;
  int v12 = 0;
  int v11 = 0;
  int v10 = 0;
LABEL_27:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    unsigned int v16 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    unsigned int v16 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138413314;
    uint64_t v30 = v17;
    __int16 v31 = 1024;
    int v32 = v13 & 1;
    __int16 v33 = 1024;
    int v34 = v12 & 1;
    __int16 v35 = 1024;
    int v36 = v11 & 1;
    __int16 v37 = 1024;
    int v38 = v10 & 1;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "startCursorInformationHandler: %@ labelValid=%d valueValid=%d hintValid=%d traitsValid=%d", buf, 0x24u);
  }
  if (((v13 | v12 | v11 | v10) & 1) == 0) {
    return 0;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x15u);
  if (result)
  {
    uint64_t v18 = result;
    if (v12) {
      int v19 = 2;
    }
    else {
      int v19 = 0;
    }
    unsigned int v20 = v19 & 0xFFFFFFFE | v13 & 1;
    if (v11) {
      int v21 = 4;
    }
    else {
      int v21 = 0;
    }
    if (v10) {
      int v22 = 8;
    }
    else {
      int v22 = 0;
    }
    *(_DWORD *)(result + 4) = v20 | v21 | v22;
    if (gLogObjects && gNumLogObjects >= 21)
    {
      int v23 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      int v23 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)(a1 + 8);
      int v25 = *(_DWORD *)(v18 + 4);
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v24;
      __int16 v31 = 1024;
      int v32 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "startCursorInformationHandler: %@ cursorInfoRequestedMask=%xh, call requestCursorInformationUpdate", buf, 0x12u);
    }
    platform_voiceOver_startCursorInformationUpdate(*(void *)(a1 + 8));
    return 1;
  }
  return result;
}

uint64_t iap2_voiceOver_stopCursorInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "stopCursorInformationHandler %@", (uint8_t *)&v7, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 0x15u);
    if (result)
    {
      *(_DWORD *)(result + 4) = 0;
      platform_voiceOver_stopCursorInformationUpdate(*(void *)(a1 + 8));
      return 1;
    }
  }
  return result;
}

uint64_t iap2_VoiceOver_startVoiceOverHandler(uint64_t a1, uint64_t a2)
{
  uint64_t Feature = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "startVoiceOverHandler %@", (uint8_t *)&v11, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 0x15u);
    if (gLogObjects && gNumLogObjects >= 21)
    {
      int v7 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      int v7 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = "exists";
      uint64_t v9 = *(void *)(a1 + 8);
      if (!Feature) {
        uint64_t v8 = "missing!!";
      }
      int v11 = 138412546;
      uint64_t v12 = v9;
      __int16 v13 = 2080;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "startVoiceOverHandler %@ voiceOver=%s", (uint8_t *)&v11, 0x16u);
    }
    if (Feature)
    {
      uint64_t Feature = 1;
      platform_VoiceOver_setEnabled(*(void *)(a1 + 8), 1);
    }
  }
  return Feature;
}

uint64_t iap2_VoiceOver_stopVoiceOverHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v5 = *(NSObject **)(gLogObjects + 160);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "stopVoiceOverHandler %@", (uint8_t *)&v11, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 0x15u);
    if (gLogObjects && gNumLogObjects >= 21)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 160);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = "exists";
      uint64_t v10 = *(void *)(a1 + 8);
      if (!Feature) {
        uint64_t v9 = "missing!!";
      }
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2080;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "stopVoiceOverHandler %@ voiceOver=%s", (uint8_t *)&v11, 0x16u);
    }
    if (Feature)
    {
      platform_VoiceOver_setEnabled(*(void *)(a1 + 8), 0);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_voiceOver_informationHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 280);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v5 = a1[1]) == 0) {
      uint64_t v5 = 0;
    }
    int v28 = 138412290;
    uint64_t v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "informationHandler  %@", (uint8_t *)&v28, 0xCu);
  }
  uint64_t Feature = (int *)iap2_feature_getFeature((uint64_t)a1, 0x15u);
  if (gLogObjects && gNumLogObjects >= 21)
  {
    int v7 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v8 = a1[1]) == 0) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = "exists";
    if (!Feature) {
      uint64_t v9 = "missing!!";
    }
    int v28 = 138412546;
    uint64_t v29 = v8;
    __int16 v30 = 2080;
    *(void *)__int16 v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "informationHandler %@ voiceOver %s", (uint8_t *)&v28, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (gLogObjects && gNumLogObjects >= 36)
    {
      int v11 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      iap2_voiceOver_informationHandler_cold_4();
    }
    if (*(_DWORD *)a2) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 36)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (!a1 || (uint64_t v22 = a1[1]) == 0) {
        uint64_t v22 = 0;
      }
      int v23 = *Feature;
      int v24 = *(_DWORD *)(a2 + 8);
      double v25 = *(float *)(a2 + 12);
      double v26 = *(float *)(a2 + 16);
      int v27 = *(unsigned __int8 *)(a2 + 20);
      int v28 = 138413570;
      uint64_t v29 = v22;
      __int16 v30 = 1024;
      *(_DWORD *)__int16 v31 = v23;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v24;
      __int16 v32 = 2048;
      double v33 = v25;
      __int16 v34 = 2048;
      double v35 = v26;
      __int16 v36 = 1024;
      int v37 = v27;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "informationHandler %@, infoRequestedMask=%xh, p (validMask=%xh volume=%f rate=%f enabled=%d)", (uint8_t *)&v28, 0x32u);
    }
    if (!*Feature) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 36)
    {
      __int16 v13 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      __int16 v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      if (!a1 || (uint64_t v14 = a1[1]) == 0) {
        uint64_t v14 = 0;
      }
      int v28 = 138412290;
      uint64_t v29 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "informationHandler %@, create msg", (uint8_t *)&v28, 0xCu);
    }
    uint64_t v15 = iAP2MsgInit((uint64_t)(a1 + 15), 22028, a1[24], 0xFFFF, 0, 0);
    uint64_t v16 = v15;
    int v17 = *(_DWORD *)(a2 + 8);
    if (v17)
    {
      int v18 = iAP2MsgAddU8Param(v15, 0, 0, vcvts_n_s32_f32(*(float *)(a2 + 12), 8uLL)) != 0;
      int v17 = *(_DWORD *)(a2 + 8);
      if ((v17 & 2) == 0) {
        goto LABEL_57;
      }
    }
    else
    {
      int v18 = 0;
      if ((v17 & 2) == 0) {
        goto LABEL_57;
      }
    }
    if (iAP2MsgAddU8Param(v16, 0, 1, vcvts_n_s32_f32(*(float *)(a2 + 16), 8uLL))) {
      ++v18;
    }
    int v17 = *(_DWORD *)(a2 + 8);
LABEL_57:
    if ((v17 & 4) != 0 && iAP2MsgAddU8Param(v16, 0, 2, *(unsigned char *)(a2 + 20)) || v18)
    {
      if (gLogObjects && gNumLogObjects >= 36)
      {
        int v19 = *(NSObject **)(gLogObjects + 280);
      }
      else
      {
        int v19 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = a1[1];
        int MsgID = iAP2MsgGetMsgID(v16);
        int v28 = 138412546;
        uint64_t v29 = v20;
        __int16 v30 = 1024;
        *(_DWORD *)__int16 v31 = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "informationHandler %@ send message %xh", (uint8_t *)&v28, 0x12u);
      }
      iap2_sessionControl_sendOutgoingMessage(a1, v16);
      platform_voiceOver_deleteParams((void *)a2);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t iap2_voiceOver_cursorInformationHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 280);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v5 = a1[1]) == 0) {
      uint64_t v5 = 0;
    }
    *(_DWORD *)__int16 v46 = 138412290;
    *(void *)&_DWORD v46[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "cursorInformationHandler %@", v46, 0xCu);
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x15u);
  if (gLogObjects && gNumLogObjects >= 21)
  {
    int v7 = *(NSObject **)(gLogObjects + 160);
  }
  else
  {
    int v7 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v8 = a1[1]) == 0) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = "exists";
    if (!Feature) {
      uint64_t v9 = "missing!!";
    }
    *(_DWORD *)__int16 v46 = 138412546;
    *(void *)&_DWORD v46[4] = v8;
    *(_WORD *)&v46[12] = 2080;
    *(void *)&v46[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "cursorInformationHandler %@ voiceOver %s", v46, 0x16u);
  }
  uint64_t result = 0;
  if (a2 && Feature)
  {
    if (gLogObjects && gNumLogObjects >= 36)
    {
      int v11 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      int v11 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      iap2_voiceOver_informationHandler_cold_4();
    }
    if (*(_DWORD *)a2 != 1) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 36)
    {
      uint64_t v12 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      uint64_t v12 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (!a1 || (uint64_t v33 = a1[1]) == 0) {
        uint64_t v33 = 0;
      }
      int v34 = *(_DWORD *)(Feature + 4);
      int v35 = *(_DWORD *)(a2 + 8);
      uint64_t v36 = *(void *)(a2 + 16);
      uint64_t v37 = *(void *)(a2 + 24);
      uint64_t v38 = *(void *)(a2 + 32);
      uint64_t v39 = *(void *)(a2 + 40);
      *(_DWORD *)__int16 v46 = 138413826;
      *(void *)&_DWORD v46[4] = v33;
      *(_WORD *)&v46[12] = 1024;
      *(_DWORD *)&v46[14] = v34;
      *(_WORD *)&v46[18] = 1024;
      *(_DWORD *)&v46[20] = v35;
      *(_WORD *)&v46[24] = 2112;
      *(void *)&v46[26] = v36;
      __int16 v47 = 2112;
      uint64_t v48 = v37;
      __int16 v49 = 2112;
      uint64_t v50 = v38;
      __int16 v51 = 2048;
      uint64_t v52 = v39;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "informationHandler %@, cursorInfoRequestedMask=%xh, p (validMask=%xh label=%@ value=%@ hint=%@ traitsMask=%llxh)", v46, 0x40u);
    }
    if (!*(_DWORD *)(Feature + 4)) {
      return 0;
    }
    if (gLogObjects && gNumLogObjects >= 36)
    {
      __int16 v13 = *(NSObject **)(gLogObjects + 280);
    }
    else
    {
      __int16 v13 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      if (!a1 || (uint64_t v14 = a1[1]) == 0) {
        uint64_t v14 = 0;
      }
      *(_DWORD *)__int16 v46 = 138412290;
      *(void *)&_DWORD v46[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "cursorInformationHandler %@, create msg", v46, 0xCu);
    }
    uint64_t v15 = (char *)malloc_type_malloc(0x400uLL, 0xB796052uLL);
    uint64_t v16 = iAP2MsgInit((uint64_t)(a1 + 15), 22032, a1[24], 0xFFFF, 0, 0);
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_51;
    }
    CStringPtr = (char *)CFStringGetCStringPtr(*(CFStringRef *)(a2 + 16), 0x8000100u);
    if (CStringPtr
      || CFStringGetCString(*(CFStringRef *)(a2 + 16), v15, 1024, 0x8000100u) && (CStringPtr = v15) != 0)
    {
      int v17 = iAP2MsgAddStringParam(v16, 0, 0, CStringPtr) != 0;
    }
    else
    {
      if (gLogObjects && gNumLogObjects >= 36)
      {
        __int16 v30 = *(NSObject **)(gLogObjects + 280);
      }
      else
      {
        __int16 v30 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      int v17 = 0;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = a1[1];
        uint64_t v41 = *(void *)(a2 + 16);
        *(_DWORD *)__int16 v46 = 138412546;
        *(void *)&_DWORD v46[4] = v40;
        *(_WORD *)&v46[12] = 2112;
        *(void *)&v46[14] = v41;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "cursorInformationHandler %@, failed to get label from p->label (%@)", v46, 0x16u);
LABEL_51:
        int v17 = 0;
      }
    }
    if ((*(unsigned char *)(a2 + 8) & 2) != 0)
    {
      int v19 = (char *)CFStringGetCStringPtr(*(CFStringRef *)(a2 + 24), 0x8000100u);
      if (v19 || CFStringGetCString(*(CFStringRef *)(a2 + 24), v15, 1024, 0x8000100u) && (int v19 = v15) != 0)
      {
        if (iAP2MsgAddStringParam(v16, 0, 1, v19)) {
          ++v17;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 36)
        {
          __int16 v31 = *(NSObject **)(gLogObjects + 280);
        }
        else
        {
          __int16 v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = a1[1];
          uint64_t v43 = *(void *)(a2 + 24);
          *(_DWORD *)__int16 v46 = 138412546;
          *(void *)&_DWORD v46[4] = v42;
          *(_WORD *)&v46[12] = 2112;
          *(void *)&v46[14] = v43;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "cursorInformationHandler %@, failed to get value from p->value (%@)", v46, 0x16u);
        }
      }
    }
    if ((*(unsigned char *)(a2 + 8) & 4) != 0)
    {
      uint64_t v20 = (char *)CFStringGetCStringPtr(*(CFStringRef *)(a2 + 32), 0x8000100u);
      if (v20 || CFStringGetCString(*(CFStringRef *)(a2 + 32), v15, 1024, 0x8000100u) && (uint64_t v20 = v15) != 0)
      {
        if (iAP2MsgAddStringParam(v16, 0, 2, v20)) {
          ++v17;
        }
      }
      else
      {
        if (gLogObjects && gNumLogObjects >= 36)
        {
          __int16 v32 = *(NSObject **)(gLogObjects + 280);
        }
        else
        {
          __int16 v32 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = a1[1];
          uint64_t v45 = *(void *)(a2 + 32);
          *(_DWORD *)__int16 v46 = 138412546;
          *(void *)&_DWORD v46[4] = v44;
          *(_WORD *)&v46[12] = 2112;
          *(void *)&v46[14] = v45;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "cursorInformationHandler %@, failed to get hint from p->hint (%@)", v46, 0x16u);
        }
      }
    }
    if ((*(unsigned char *)(a2 + 8) & 8) != 0)
    {
      *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__int16 v46 = v21;
      *(_OWORD *)&v46[16] = v21;
      unint64_t v22 = *(void *)(a2 + 40);
      if (v22)
      {
        uint64_t v23 = 0;
        unsigned __int16 v24 = 0;
        double v25 = v46;
        do
        {
          if (v22)
          {
            *v25++ = bswap32(_convertACCtoiAP2CursorTraits(v23)) >> 16;
            v24 += 2;
          }
          if (v22 < 2) {
            break;
          }
          v22 >>= 1;
          BOOL v26 = v23 >= 0xF;
          uint64_t v23 = (v23 + 1);
        }
        while (!v26);
      }
      else
      {
        unsigned __int16 v24 = 0;
      }
      if (iAP2MsgAddDataParam(v16, 0, 3, v46, v24)) {
        ++v17;
      }
    }
    if (v15) {
      free(v15);
    }
    if (v17)
    {
      if (gLogObjects && gNumLogObjects >= 36)
      {
        int v27 = *(NSObject **)(gLogObjects + 280);
      }
      else
      {
        int v27 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        if (!a1 || (uint64_t v28 = a1[1]) == 0) {
          uint64_t v28 = 0;
        }
        int MsgID = iAP2MsgGetMsgID(v16);
        *(_DWORD *)__int16 v46 = 138412546;
        *(void *)&_DWORD v46[4] = v28;
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = MsgID;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "iap2_voiceOver_informationHandler %@ send message %xh", v46, 0x12u);
      }
      iap2_sessionControl_sendOutgoingMessage(a1, v16);
      platform_voiceOver_deleteParams((void *)a2);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _convertACCtoiAP2CursorTraits(uint64_t result)
{
  if (result >= 0x10) {
    return 0xFFFFFFFFLL;
  }
  else {
    return result;
  }
}

uint64_t iap2_voiceOver_isSupportedOnConnection(uint64_t a1)
{
  char v3 = 0;
  if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgVoiceOverMainList, 12, &v3)) {
    return 1;
  }
  else {
    return iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgVoiceOverCursorList, 3, &v3);
  }
}

void *_createFeature_25(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    char v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    char v3 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2VoiceOver _createFeature", v5, 2u);
  }
  if (!a1) {
    return 0;
  }
  uint64_t result = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if (result) {
    void *result = 0;
  }
  return result;
}

uint64_t _destroyFeature_25(void **a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 21;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2VoiceOver _destroyFeature", v7, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      platform_voiceOver_accessoryDetached(*(void *)(a2 + 8));
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_16(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    char v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    char v3 = *(NSObject **)(gLogObjects + 160);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2VoiceOver _startFeatureFromDevice", v7, 2u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x15u);
  if (Feature && iap2_voiceOver_isSupportedOnConnection(a1))
  {
    if (!a1 || (uint64_t v5 = *(void *)(a1 + 8)) == 0) {
      uint64_t v5 = 0;
    }
    platform_voiceOver_accessoryAttached(v5);
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_22(uint64_t a1)
{
  __int16 v5 = 0;
  uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgVoiceOverMainList, 0xCu, (unsigned char *)&v5 + 1);
  if (HIBYTE(v5)) {
    BOOL v3 = result == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    LODWORD(result) = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgVoiceOverCursorList, 3u, &v5);
    if (HIBYTE(v5)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v5 == 0;
    }
    if (v4) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 2;
    }
    if (HIBYTE(v5))
    {
      if (!result)
      {
        iap2_features_createFeature(a1, 0x15u);
        iap2_identification_setIdentifiedForFeature(a1, 0x15u);
        return 0;
      }
    }
  }
  return result;
}

void *iap2_endpoint_create(void *a1)
{
  if (!a1)
  {
    int v18 = logObjectForModule_1(18);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v18);
    }
    return 0;
  }
  BOOL v2 = malloc_type_calloc(1uLL, 0x1D0uLL, 0x10F0040CDC522BDuLL);
  BOOL v3 = v2;
  if (!v2) {
    return v3;
  }
  *BOOL v2 = a1;
  CFStringRef v4 = (const __CFString *)a1[2];
  if (v4) {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v4);
  }
  else {
    CFStringRef Copy = 0;
  }
  v3[1] = Copy;
  CFStringRef v6 = (const __CFString *)a1[1];
  if (v6) {
    CFStringRef v7 = CFStringCreateCopy(kCFAllocatorDefault, v6);
  }
  else {
    CFStringRef v7 = 0;
  }
  _DWORD v3[2] = v7;
  uint64_t v8 = dispatch_queue_create("iAP2Endpoint", 0);
  v3[3] = v8;
  if (!v8)
  {
    free(v3);
    return 0;
  }
  dispatch_set_context(v8, v3);
  dispatch_set_finalizer_f((dispatch_object_t)v3[3], (dispatch_function_t)_iap2_endpoint_dispatchQueueFinalizer);
  v3[4] = 0;
  *((_DWORD *)v3 + 23) = 0;
  *((unsigned char *)v3 + 96) = 0;
  v3[24] = 0;
  v3[54] = 0;
  v3[13] = 0;
  v3[14] = 0;
  *((CFAbsoluteTime *)v3 + 57) = CFAbsoluteTimeGetCurrent();
  if (!v3[4])
  {
    *((_DWORD *)v3 + 10) = 2132705027;
    *((_WORD *)v3 + 24) = 0x7FFF;
    *((unsigned char *)v3 + 50) = 0;
    *((unsigned char *)v3 + 58) = 1;
    *(_DWORD *)((char *)v3 + 54) = 16843266;
    *(void *)((char *)v3 + 59) = 0x5554030000000000;
    *((_DWORD *)v3 + 11) = -1;
    *((_WORD *)v3 + 26) = -1;
    unsigned int BuffSize = iAP2LinkRunLoopGetBuffSize(0x7Fu);
    uint64_t v10 = malloc_type_malloc(BuffSize, 0xD84B853uLL);
    v3[4] = v10;
    v3[4] = iAP2LinkRunLoopCreateDevice((long long *)(v3 + 5), (uint64_t)v3, 1u, 0, 0x7Fu, 0xFFFF, (uint64_t)v10);
    int v11 = malloc_type_calloc(1uLL, 0x1001FuLL, 0x36A7C112uLL);
    v3[14] = iAP2MsgParserInit(0xFFFF, (uint64_t)v11, v3[4], 16448);
    acc_platform_packetLogging_logEvent(*v3, "ATTACH", (uint64_t)"iAP2 accessory attached!", v12, v13, v14, v15, v16, v19);
    iAP2LinkRunLoopAttached(v3[4]);
  }
  if ((acc_endpoint_isWireless(a1) & 1) == 0
    && acc_endpoint_getTransportType((uint64_t)a1) != 8)
  {
    iap2_power_registerForSleepNotification((uint64_t)v3);
  }
  return v3;
}

void _iap2_endpoint_dispatchQueueFinalizer(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 19;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(gLogObjects + 144);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "_iap2_endpoint_dispatchQueueFinalizer";
    __int16 v10 = 2048;
    uint64_t v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: protocolEndpoint %p", (uint8_t *)&v8, 0x16u);
  }
  if (a1)
  {
    *(void *)(a1 + 24) = 0;
    iAP2PacketRelease(*(uint64_t **)(a1 + 104));
    *(void *)(a1 + 104) = 0;
    iAP2LinkRunLoopDelete(*(void *)(a1 + 32));
    CFStringRef v4 = *(void **)(a1 + 32);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 32) = 0;
    }
    __int16 v5 = *(void **)(a1 + 112);
    if (v5)
    {
      free(v5);
      *(void *)(a1 + 112) = 0;
    }
    CFStringRef v6 = *(const void **)(a1 + 8);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 8) = 0;
    }
    CFStringRef v7 = *(const void **)(a1 + 16);
    if (v7) {
      CFRelease(v7);
    }
    free((void *)a1);
  }
}

uint64_t iap2_endpoint_destroy(void ***a1)
{
  if (!a1)
  {
    uint64_t v12 = logObjectForModule_1(19);
    BOOL v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v15) {
      return result;
    }
    *(_WORD *)buf = 0;
    uint64_t v14 = "iAP2 Endpoint Destroy. NULL ppProtocolEndpoint!";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
    return 0;
  }
  BOOL v2 = *a1;
  if (*a1)
  {
    if ((acc_endpoint_isWireless(*v2) & 1) == 0) {
      iap2_power_unregisterForSleepNotification((uint64_t)v2);
    }
    acc_platform_packetLogging_logEvent((uint64_t)*v2, "DETACH", (uint64_t)"iAP2 accessory detached!", v3, v4, v5, v6, v7, v16[0]);
    int v8 = v2[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __iap2_endpoint_destroy_block_invoke;
    block[3] = &__block_descriptor_tmp_22;
    void block[4] = v2;
    dispatch_sync(v8, block);
    uint64_t v9 = v2[3];
    v16[0] = (uint64_t)_NSConcreteStackBlock;
    v16[1] = 0x40000000;
    v16[2] = (uint64_t)__iap2_endpoint_destroy_block_invoke_4;
    v16[3] = (uint64_t)&__block_descriptor_tmp_5_2;
    uint8_t v16[4] = (uint64_t)v2;
    dispatch_sync(v9, v16);
    dispatch_release((dispatch_object_t)v2[3]);
    *a1 = 0;
    return 1;
  }
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 20;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v12 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v13)
  {
    *(_WORD *)buf = 0;
    uint64_t v14 = "iAP2 Endpoint Destroy. *ppProtocolEndpoint is null!";
    goto LABEL_15;
  }
  return result;
}

void __iap2_endpoint_destroy_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 20;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    label = dispatch_queue_get_label(0);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "iAP2 Endpoint Destroy. currentDispatchQueue: %s", (uint8_t *)&v4, 0xCu);
  }
  iAP2LinkRunLoopDetached(*(void *)(*(void *)(a1 + 32) + 32));
}

uint64_t __iap2_endpoint_destroy_block_invoke_4(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 20;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    label = dispatch_queue_get_label(0);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "iAP2 Endpoint Destroy. currentDispatchQueue: %s", (uint8_t *)&v5, 0xCu);
  }
  iAP2LinkRunLoopShuttingDown(*(void *)(*(void *)(a1 + 32) + 32));
  return iap2_sessionControl_cleanup(*(void *)(a1 + 32));
}

uint64_t iap2_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (cf)
    {
      if (*(void *)(v3 + 32))
      {
        CFRetain(cf);
        int v4 = *(NSObject **)(v3 + 24);
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000;
        _DWORD v5[2] = __iap2_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_6_3;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1;
      }
    }
  }
  return result;
}

void __iap2_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 32) + 24);
  unsigned int Length = CFDataGetLength(*(CFDataRef *)(a1 + 40));
  kdebug_trace();
  unsigned int v24 = Length;
  if (Length)
  {
    int v3 = 0;
    int v4 = Length;
    do
    {
      if (!*(void *)(*(void *)(a1 + 32) + 104))
      {
        *(void *)(*(void *)(a1 + 32) + 104) = iAP2PacketCreateEmptyRecvPacket(v25);
        if (!*(void *)(*(void *)(a1 + 32) + 104)) {
          break;
        }
      }
      uint64_t v5 = gLogObjects;
      int v6 = gNumLogObjects;
      if (!gLogObjects || gNumLogObjects < 19)
      {
        int v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)__int16 v31 = v5;
          *(_WORD *)&v31[8] = 1024;
          v32[0] = v6;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          int v8 = &_os_log_default;
        }
      }
      else
      {
        int v8 = *(NSObject **)(gLogObjects + 144);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)__int16 v31 = v24;
        *(_WORD *)&v31[4] = 1024;
        *(_DWORD *)&v31[6] = v4;
        LOWORD(v32[0]) = 1024;
        *(_DWORD *)((char *)v32 + 2) = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Calling iAP2PacketParseBuffer, dataLength: %u, numBytesRemaining: %u, byteIndex: %u", buf, 0x14u);
      }
      uint64_t v9 = (char *)&CFDataGetBytePtr(*(CFDataRef *)(a1 + 40))[v3];
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104);
      unsigned int MaxRecvPacketSize = iAP2LinkGetMaxRecvPacketSize(v25);
      int v12 = iAP2PacketParseBuffer(v9, v4, v10, MaxRecvPacketSize, 0, 0, 0, 2);
      if (!v12) {
        break;
      }
      int v13 = v12;
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 19)
      {
        uint64_t v16 = *(NSObject **)(gLogObjects + 144);
      }
      else
      {
        uint64_t v16 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)__int16 v31 = v14;
          *(_WORD *)&v31[8] = 1024;
          v32[0] = v15;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          uint64_t v16 = &_os_log_default;
        }
      }
      v4 -= v13;
      v3 += v13;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)__int16 v31 = v13;
        *(_WORD *)&v31[4] = 1024;
        *(_DWORD *)&v31[6] = v4;
        LOWORD(v32[0]) = 1024;
        *(_DWORD *)((char *)v32 + 2) = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "iAP2PacketParseBuffer finished, numBytesRead: %u, numBytesRemaining: %u, byteIndex: %u", buf, 0x14u);
      }
      BOOL IsComplete = iAP2PacketIsComplete(*(void *)(*(void *)(a1 + 32) + 104));
      uint64_t v18 = gLogObjects;
      int v19 = gNumLogObjects;
      BOOL v20 = !gLogObjects || gNumLogObjects <= 18;
      BOOL v21 = !v20;
      if (IsComplete)
      {
        if (v21)
        {
          unint64_t v22 = *(NSObject **)(gLogObjects + 144);
        }
        else
        {
          unint64_t v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v31 = v18;
            *(_WORD *)&v31[8] = 1024;
            v32[0] = v19;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            unint64_t v22 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          __iap2_endpoint_processIncomingData_block_invoke_cold_1(&v28, v29, v22);
        }
        acc_platform_packetLogging_logiAP2Packet(*(uint64_t **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 104), 1);
        kdebug_trace();
        iAP2LinkRunLoopHandleReadyPacket(*(void *)(*(void *)(a1 + 32) + 32), *(uint64_t **)(*(void *)(a1 + 32) + 104));
        iAP2PacketRelease(*(uint64_t **)(*(void *)(a1 + 32) + 104));
        *(void *)(*(void *)(a1 + 32) + 104) = 0;
      }
      else
      {
        if (v21)
        {
          uint64_t v23 = *(NSObject **)(gLogObjects + 144);
        }
        else
        {
          uint64_t v23 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v31 = v18;
            *(_WORD *)&v31[8] = 1024;
            v32[0] = v19;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v23 = &_os_log_default;
          }
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          __iap2_endpoint_processIncomingData_block_invoke_cold_2(&v26, v27, v23);
        }
      }
    }
    while (v4 - 1 < v24);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t iap2_endpoint_sendOutgoingData(uint64_t *a1, const UInt8 *a2, unsigned int a3)
{
  if (a1)
  {
    kdebug_trace();
    CFDataRef v6 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, a3, kCFAllocatorNull);
    uint64_t v7 = acc_endpoint_sendOutgoingData(*a1, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    uint64_t v9 = logObjectForModule_1(18);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v9);
    }
    return 0;
  }
  return v7;
}

uint64_t iap2_endpoint_setInitialized(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  *(unsigned char *)(a1 + 440) = a2;
  BOOL v2 = *(pthread_mutex_t **)a1;
  if (!v2) {
    return 0;
  }
  if (a2) {
    return acc_endpoint_setProperty(v2, kCFACCProperties_Endpoint_iAP2_Initialized, 0);
  }
  return acc_endpoint_removeProperty(v2, kCFACCProperties_Endpoint_iAP2_Initialized);
}

BOOL iap2_endpoint_isInitialized(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 440) != 0;
  }
  return result;
}

void iap2_endpoint_linkStateChanged(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 20;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Link state changed! (Connected: %d)", (uint8_t *)v7, 8u);
  }
  int v6 = *(unsigned __int8 *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = a2;
  if (v6 || !a2)
  {
    if (v6)
    {
      if ((a2 & 1) == 0)
      {
        iap2_sessionControl_cleanup(a1);
        iap2_sessionFileTransfer_cleanup(a1);
        iap2_sessionLog_cleanup(a1);
      }
    }
  }
  else
  {
    iap2_endpoint_configUSBHost((uint64_t *)a1);
    iap2_sessionControl_init((const __CFSet *)a1);
    iap2_sessionControl_start((unsigned __int8 *)a1);
    iap2_sessionFileTransfer_init(a1);
    iap2_sessionFileTransfer_start((unsigned __int8 *)a1);
    platform_systemInfo_supportsQiAuth();
    iap2_sessionLog_start(a1);
  }
}

uint64_t *iap2_endpoint_configUSBHost(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (*result)
    {
      if (*(_DWORD *)(v1 + 24) == 8)
      {
        BOOL v2 = *(uint64_t **)v1;
        if (*(void *)v1)
        {
          uint64_t v3 = result[4];
          if (v3) {
            uint64_t MaxSendPacketSize = iAP2LinkGetMaxSendPacketSize(*(void *)(v3 + 24));
          }
          else {
            uint64_t MaxSendPacketSize = 0;
          }
          if (gLogObjects && gNumLogObjects >= 20)
          {
            uint64_t v5 = *(NSObject **)(gLogObjects + 152);
          }
          else
          {
            uint64_t v5 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v6 = *v2;
            int v7 = *(_DWORD *)(v1 + 24);
            int v8 = 138412802;
            uint64_t v9 = v6;
            __int16 v10 = 1024;
            int v11 = v7;
            __int16 v12 = 1024;
            int v13 = MaxSendPacketSize;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ConfigUSBHost: connection:%@ type:%{coreacc:ACCEndpoint_TransportType_t}d maxOutSize:%d", (uint8_t *)&v8, 0x18u);
          }
          return (uint64_t *)platform_usb_setNeedOutZlp(*v2, 1, MaxSendPacketSize);
        }
      }
    }
  }
  return result;
}

uint64_t iap2_endpoint_getMaxSendPayloadSize(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 96) && (uint64_t v1 = *(void *)(result + 32)) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result) {
        LOWORD(result) = iAP2LinkGetMaxPayloadSize(result, 0);
      }
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t iap2_endpoint_getMaxSendPayloadSizeWithOverride(uint64_t a1)
{
  if (!a1)
  {
    LOWORD(v2) = 0;
    return (unsigned __int16)v2;
  }
  LOWORD(v2) = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (!v3)
      {
        LOWORD(v2) = 0;
        return (unsigned __int16)v2;
      }
      unsigned __int16 MaxPayloadSize = iAP2LinkGetMaxPayloadSize(v3, 0);
      unint64_t v5 = (unint64_t)acc_userDefaults_copyIntegerForKey(@"MaxOutboundiAP2PacketSize");
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_10;
      }
      __int16 v6 = v5;
      if (v5) {
        goto LABEL_11;
      }
      if (!*(void *)a1 || (uint64_t v7 = *(unsigned int *)(*(void *)a1 + 24), v7 > 0xF)) {
LABEL_10:
      }
        __int16 v6 = -1;
      else {
        __int16 v6 = word_1001B90B0[v7];
      }
LABEL_11:
      __int16 v8 = iAP2LinkCurPckHdrSize(*(void *)(*(void *)(a1 + 32) + 24));
      LOWORD(v2) = v6 - (v8 + iAP2LinkCurPckChksumSize(*(void *)(*(void *)(a1 + 32) + 24)));
      if (MaxPayloadSize <= (unsigned __int16)v2) {
        LOWORD(v2) = MaxPayloadSize;
      }
    }
  }
  return (unsigned __int16)v2;
}

uint64_t iap2_endpoint_getLinkMaxCumAck(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 96) && (uint64_t v1 = *(void *)(result + 32)) != 0 && (v2 = *(void *)(v1 + 24)) != 0) {
      return *(unsigned __int8 *)(v2 + 363);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t iap2_blePairing_accessoryStateUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BLEPairing AccessoryStateUpdate Handler", buf, 2u);
  }
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v28 = 0;
  if (!FirstParam)
  {
    BOOL v12 = 0;
    int v11 = 0;
    uint64_t v10 = 0;
    int v9 = 0;
    int v8 = 0;
LABEL_25:
    if (gLogObjects && gNumLogObjects >= 42)
    {
      int v19 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      int v19 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138413826;
      uint64_t v30 = v20;
      __int16 v31 = 1024;
      int v32 = v11 & 1;
      __int16 v33 = 1024;
      int v34 = v12;
      __int16 v35 = 1024;
      int v36 = v9 & 1;
      __int16 v37 = 1024;
      int v38 = v10;
      __int16 v39 = 1024;
      int v40 = v8 & 1;
      __int16 v41 = 1024;
      int v42 = v40;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "AccessoryStateUpdate: %@, btRadioOn(valid=%d) %d, pairingState(valid=%d) %d, pairingModeOn(valid=%d) %d", buf, 0x30u);
    }
    uint64_t result = iap2_feature_getFeature(a1, 4u);
    if (result)
    {
      BOOL v21 = (uint64_t *)result;
      buf[0] = 0;
      uint64_t result = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8, buf);
      if (result)
      {
        if ((v11 | v9 | v8))
        {
          if (v9) {
            int v22 = 2;
          }
          else {
            int v22 = 0;
          }
          unsigned int v23 = v22 & 0xFFFFFFFE | v11 & 1;
          if (v8) {
            int v24 = 4;
          }
          else {
            int v24 = 0;
          }
          platform_blePairing_accessoryStateUpdate(*(void *)(a1 + 8), *v21, v23 | v24, v12, v10, v8 & 1);
        }
        return 1;
      }
    }
    return result;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  BOOL v12 = 0;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    int v14 = ParamID;
    if (ParamID == 2)
    {
      BOOL IsDataVoid = iAP2MsgIsDataVoid(NextParam);
      int v28 = !IsDataVoid;
      if (!IsDataVoid)
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        int v26 = 2;
        goto LABEL_47;
      }
      int v8 = 1;
LABEL_19:
      int v17 = iAP2MsgGetMsgID(a2);
      printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v14, v17);
      goto LABEL_22;
    }
    if (ParamID == 1) {
      break;
    }
    if (ParamID) {
      goto LABEL_19;
    }
    BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, (BOOL *)&v28);
    if (v28)
    {
      int v27 = iAP2MsgGetMsgID(a2);
      printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v27);
      return 0;
    }
    BOOL v12 = DataAsBool;
    int v11 = 1;
LABEL_22:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
    if (!NextParam) {
      goto LABEL_25;
    }
  }
  uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v28);
  if (!v28)
  {
    uint64_t v10 = DataAsU8;
    int v9 = 1;
    goto LABEL_22;
  }
  int MsgID = iAP2MsgGetMsgID(a2);
  int v26 = 1;
LABEL_47:
  printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", v26, MsgID);
  return 0;
}

uint64_t iap2_blePairing_accessoryPairingInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BLEPairing AccessoryPairingInfo Handler", buf, 2u);
  }
  uint64_t v5 = 0;
  if (a1 && a2)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0);
    int v28 = 0;
    CFDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (FirstParam)
    {
      int v8 = 0;
      int v9 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
        int v11 = ParamID;
        if (ParamID == 1) {
          break;
        }
        if (ParamID) {
          goto LABEL_20;
        }
        int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, &v28);
        if (v28)
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
          goto LABEL_48;
        }
        int v9 = DataAsU8;
        int v8 = 1;
LABEL_21:
        unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0, FirstParam);
        if (!FirstParam) {
          goto LABEL_24;
        }
      }
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)FirstParam, &v28);
      if (v28)
      {
        int v27 = iAP2MsgGetMsgID(a2);
        printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 1, v27);
        goto LABEL_48;
      }
      int v14 = (const UInt8 *)DataAsData;
      if (iAP2MsgGetParamValueLen(FirstParam))
      {
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
        CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, v14, ParamValueLen);
        CFArrayAppendValue(Mutable, v16);
        if (v16) {
          CFRelease(v16);
        }
      }
LABEL_20:
      int v17 = iAP2MsgGetMsgID(a2);
      printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v11, v17);
      goto LABEL_21;
    }
    int v9 = 0;
    int v8 = 0;
LABEL_24:
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v18 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "AccessoryPairingInformation: %@", buf, 0xCu);
    }
    uint64_t Feature = iap2_feature_getFeature(a1, 4u);
    if (!Feature)
    {
LABEL_48:
      uint64_t v5 = 0;
      if (!Mutable) {
        return v5;
      }
      goto LABEL_44;
    }
    BOOL v21 = (uint64_t *)Feature;
    buf[0] = 0;
    uint64_t v5 = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8, buf);
    if ((v5 & v8) == 1)
    {
      if (gLogObjects && gNumLogObjects >= 42)
      {
        int v22 = *(NSObject **)(gLogObjects + 328);
      }
      else
      {
        int v22 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412802;
        uint64_t v30 = v23;
        __int16 v31 = 1024;
        int v32 = v9;
        __int16 v33 = 2112;
        int v34 = Mutable;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "AccessoryPairingInformation: %@, call platform, pairType=%d pairInfoList=%@", buf, 0x1Cu);
      }
      CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, Mutable);
      platform_blePairing_accessoryPairingInfo(*(void *)(a1 + 8), *v21, v9, (uint64_t)Copy);
      if (Copy) {
        CFRelease(Copy);
      }
      uint64_t v5 = 1;
    }
    if (Mutable) {
LABEL_44:
    }
      CFRelease(Mutable);
  }
  return v5;
}

uint64_t iap2_blePairing_accessoryPairingDataHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BLEPairing AccessoryPairingData Handler", buf, 2u);
  }
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0);
  int v23 = 0;
  if (!FirstParam)
  {
    int v12 = 0;
    int v11 = 0;
    uint64_t v10 = 0;
    unsigned __int16 ParamValueLen = 0;
    int v8 = 0;
LABEL_22:
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v18 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v18 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "AccessoryPairingData: %@", buf, 0xCu);
    }
    uint64_t result = iap2_feature_getFeature(a1, 4u);
    if (result)
    {
      uint64_t v20 = (uint64_t *)result;
      buf[0] = 0;
      uint64_t result = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8, buf);
      if (result)
      {
        if (v11 & v8) {
          platform_blePairing_accessoryPairingData(*(void *)(a1 + 8), *v20, v12, v10, ParamValueLen);
        }
        return 1;
      }
    }
    return result;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  int v8 = 0;
  unsigned __int16 ParamValueLen = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 0;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    int v14 = ParamID;
    if (ParamID == 1) {
      break;
    }
    if (ParamID) {
      goto LABEL_18;
    }
    int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v23);
    if (v23)
    {
      int MsgID = iAP2MsgGetMsgID(a2);
      printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
      return 0;
    }
    int v12 = DataAsU8;
    int v11 = 1;
LABEL_19:
    NextParam = iAP2MsgGetNextParam(a2, 0, NextParam);
    if (!NextParam) {
      goto LABEL_22;
    }
  }
  uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v23);
  if (!v23)
  {
    uint64_t v10 = DataAsData;
    unsigned __int16 ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
    int v8 = 1;
LABEL_18:
    int v17 = iAP2MsgGetMsgID(a2);
    printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v14, v17);
    goto LABEL_19;
  }
  int v22 = iAP2MsgGetMsgID(a2);
  printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 1, v22);
  return 0;
}

uint64_t iap2_blePairing_startBLEUpdatesHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 4u);
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        __int16 v6 = "missing!!";
      }
      int v22 = 138412546;
      uint64_t v23 = v7;
      __int16 v24 = 2080;
      uint64_t v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "startBLEUpdatesHandler %@ blePairing %s", (uint8_t *)&v22, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (*(_DWORD *)a2) {
          return 0;
        }
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects <= 41;
        }
        else {
          BOOL v8 = 1;
        }
        int v9 = !v8;
        if (*(_DWORD *)(a2 + 16) <= 1u)
        {
          if (v9)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 328);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v22 = 138412290;
            uint64_t v23 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "startBLEUpdatesHandler %@, create msg", (uint8_t *)&v22, 0xCu);
          }
          uint64_t v13 = iAP2MsgInit((uint64_t)(v3 + 15), 45312, v3[24], 0xFFFF, 0, 0);
          *(unsigned char *)(Feature + 8) = 1;
          int v14 = iAP2MsgAddU8Param(v13, 0, 0, *(unsigned char *)(a2 + 16));
          int v15 = iAP2MsgAddU8Param(v13, 0, 1, *(unsigned char *)(a2 + 21));
          if (iAP2MsgAddU8Param(v13, 0, 2, *(unsigned char *)(a2 + 20)) || v15 || (uint64_t result = 0, v14))
          {
            if (gLogObjects && gNumLogObjects >= 42)
            {
              CFDataRef v16 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              CFDataRef v16 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              uint64_t v20 = v3[1];
              int MsgID = iAP2MsgGetMsgID(v13);
              int v22 = 138412546;
              uint64_t v23 = v20;
              __int16 v24 = 1024;
              LODWORD(v25) = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "startBLEUpdatesHandler %@ send message %xh", (uint8_t *)&v22, 0x12u);
            }
            iap2_sessionControl_sendOutgoingMessage(v3, v13);
            platform_blePairing_deleteParams((void *)a2);
            return 1;
          }
          return result;
        }
        if (v9)
        {
          int v11 = *(NSObject **)(gLogObjects + 328);
        }
        else
        {
          int v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v17 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v17)
        {
          uint64_t v18 = v3[1];
          int v19 = *(_DWORD *)(a2 + 16);
          int v22 = 138412546;
          uint64_t v23 = v18;
          __int16 v24 = 1024;
          LODWORD(v25) = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "startBLEUpdatesHandler %@, Invalid pairType:%d, updates not started", (uint8_t *)&v22, 0x12u);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_blePairing_deviceStateUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 4u);
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        __int16 v6 = "missing!!";
      }
      int v21 = 138412546;
      uint64_t v22 = v7;
      __int16 v23 = 2080;
      __int16 v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceStateUpdateHandler %@ blePairing %s", (uint8_t *)&v21, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (*(_DWORD *)a2 == 1)
        {
          if (gLogObjects) {
            BOOL v8 = gNumLogObjects <= 41;
          }
          else {
            BOOL v8 = 1;
          }
          int v9 = !v8;
          if (*(unsigned char *)(Feature + 8))
          {
            if (v9)
            {
              uint64_t v10 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              uint64_t v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              uint64_t v12 = v3[1];
              int v21 = 138412290;
              uint64_t v22 = v12;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "deviceStateUpdateHandler %@, create msg", (uint8_t *)&v21, 0xCu);
            }
            uint64_t v13 = iAP2MsgInit((uint64_t)(v3 + 15), 45313, v3[24], 0xFFFF, 0, 0);
            int v14 = iAP2MsgAddU8Param(v13, 0, 0, *(unsigned char *)(a2 + 16));
            int v15 = iAP2MsgAddU8Param(v13, 0, 1, *(unsigned char *)(a2 + 20));
            if (iAP2MsgAddU8Param(v13, 0, 2, *(unsigned char *)(a2 + 24)) || v15 || v14)
            {
              if (gLogObjects && gNumLogObjects >= 42)
              {
                CFDataRef v16 = *(NSObject **)(gLogObjects + 328);
              }
              else
              {
                CFDataRef v16 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                uint64_t v19 = v3[1];
                int MsgID = iAP2MsgGetMsgID(v13);
                int v21 = 138412546;
                uint64_t v22 = v19;
                __int16 v23 = 1024;
                LODWORD(v24) = MsgID;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "deviceStateUpdateHandler %@ send message %xh", (uint8_t *)&v21, 0x12u);
              }
              iap2_sessionControl_sendOutgoingMessage(v3, v13);
              if (*(_DWORD *)(a2 + 20)) {
                platform_blePairing_finishedNegotiation(v3[1], *(void *)Feature);
              }
              platform_blePairing_deleteParams((void *)a2);
              return 1;
            }
          }
          else
          {
            if (v9)
            {
              int v11 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              int v11 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v17 = v3[1];
              int v18 = *(unsigned __int8 *)(Feature + 8);
              int v21 = 138412546;
              uint64_t v22 = v17;
              __int16 v23 = 1024;
              LODWORD(v24) = v18;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "deviceStateUpdateHandler %@, Updates not started bUpdateStarted:%d", (uint8_t *)&v21, 0x12u);
            }
          }
          if (*(_DWORD *)(a2 + 20)) {
            platform_blePairing_finishedNegotiation(v3[1], *(void *)Feature);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t iap2_blePairing_devicePairingDataHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 4u);
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        __int16 v6 = "missing!!";
      }
      int v24 = 138412546;
      uint64_t v25 = v7;
      __int16 v26 = 2080;
      int v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "devicePairingDataHandler %@ blePairing %s", (uint8_t *)&v24, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (*(_DWORD *)a2 != 2) {
          return 0;
        }
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects <= 41;
        }
        else {
          BOOL v8 = 1;
        }
        int v9 = !v8;
        if (*(unsigned char *)(Feature + 8))
        {
          if (v9)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 328);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v24 = 138412290;
            uint64_t v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "devicePairingDataHandler %@, create msg", (uint8_t *)&v24, 0xCu);
          }
          uint64_t v13 = iAP2MsgInit((uint64_t)(v3 + 15), 45316, v3[24], 0xFFFF, 0, 0);
          unint64_t v14 = (unint64_t)iAP2MsgAddU8Param(v13, 0, 0, *(unsigned char *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          unint64_t v17 = (unint64_t)iAP2MsgAddDataParam(v13, 0, 1, BytePtr, Length);
          uint64_t result = 0;
          if (v17 | v14)
          {
            if (gLogObjects && gNumLogObjects >= 42)
            {
              int v18 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              int v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              uint64_t v22 = v3[1];
              int MsgID = iAP2MsgGetMsgID(v13);
              int v24 = 138412546;
              uint64_t v25 = v22;
              __int16 v26 = 1024;
              LODWORD(v27) = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "devicePairingDataHandler %@ send message %xh", (uint8_t *)&v24, 0x12u);
            }
            iap2_sessionControl_sendOutgoingMessage(v3, v13);
            platform_blePairing_deleteParams((void *)a2);
            return 1;
          }
          return result;
        }
        if (v9)
        {
          int v11 = *(NSObject **)(gLogObjects + 328);
        }
        else
        {
          int v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v19 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v19)
        {
          uint64_t v20 = v3[1];
          int v21 = *(unsigned __int8 *)(Feature + 8);
          int v24 = 138412546;
          uint64_t v25 = v20;
          __int16 v26 = 1024;
          LODWORD(v27) = v21;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "devicePairingDataHandler %@, Updates not started bUpdateStarted:%d", (uint8_t *)&v24, 0x12u);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_blePairing_deviceUpdatePairingInfoHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 4u);
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        __int16 v6 = "missing!!";
      }
      int v24 = 138412546;
      uint64_t v25 = v7;
      __int16 v26 = 2080;
      int v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@ blePairing %s", (uint8_t *)&v24, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (*(_DWORD *)a2 != 3) {
          return 0;
        }
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects <= 41;
        }
        else {
          BOOL v8 = 1;
        }
        int v9 = !v8;
        if (*(unsigned char *)(Feature + 8))
        {
          if (v9)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 328);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v24 = 138412290;
            uint64_t v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@, create msg", (uint8_t *)&v24, 0xCu);
          }
          uint64_t v13 = iAP2MsgInit((uint64_t)(v3 + 15), 45318, v3[24], 0xFFFF, 0, 0);
          unint64_t v14 = (unint64_t)iAP2MsgAddU8Param(v13, 0, 0, *(unsigned char *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          unint64_t v17 = (unint64_t)iAP2MsgAddDataParam(v13, 0, 1, BytePtr, Length);
          uint64_t result = 0;
          if (v17 | v14)
          {
            if (gLogObjects && gNumLogObjects >= 42)
            {
              int v18 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              int v18 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              uint64_t v22 = v3[1];
              int MsgID = iAP2MsgGetMsgID(v13);
              int v24 = 138412546;
              uint64_t v25 = v22;
              __int16 v26 = 1024;
              LODWORD(v27) = MsgID;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@ send message %xh", (uint8_t *)&v24, 0x12u);
            }
            iap2_sessionControl_sendOutgoingMessage(v3, v13);
            platform_blePairing_deleteParams((void *)a2);
            return 1;
          }
          return result;
        }
        if (v9)
        {
          int v11 = *(NSObject **)(gLogObjects + 328);
        }
        else
        {
          int v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v19 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v19)
        {
          uint64_t v20 = v3[1];
          int v21 = *(unsigned __int8 *)(Feature + 8);
          int v24 = 138412546;
          uint64_t v25 = v20;
          __int16 v26 = 1024;
          LODWORD(v27) = v21;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "deviceUpdatePairingInfoHandler %@, Updates not started bUpdateStarted:%d", (uint8_t *)&v24, 0x12u);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t iap2_blePairing_stopBLEUpdatesHandler(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 4u);
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v5 = *(NSObject **)(gLogObjects + 328);
    }
    else
    {
      uint64_t v5 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        __int16 v6 = "missing!!";
      }
      int v20 = 138412546;
      uint64_t v21 = v7;
      __int16 v22 = 2080;
      __int16 v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@ blePairing %s", (uint8_t *)&v20, 0x16u);
    }
    uint64_t result = 0;
    if (a2)
    {
      if (Feature)
      {
        if (*(_DWORD *)a2 != 4) {
          return 0;
        }
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects <= 41;
        }
        else {
          BOOL v8 = 1;
        }
        int v9 = !v8;
        if (*(unsigned char *)(Feature + 8))
        {
          if (v9)
          {
            uint64_t v10 = *(NSObject **)(gLogObjects + 328);
          }
          else
          {
            uint64_t v10 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v20 = 138412290;
            uint64_t v21 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@, create msg", (uint8_t *)&v20, 0xCu);
          }
          uint64_t v13 = iAP2MsgInit((uint64_t)(v3 + 15), 45319, v3[24], 0xFFFF, 0, 0);
          *(unsigned char *)(Feature + 8) = 0;
          if (gLogObjects && gNumLogObjects >= 42)
          {
            unint64_t v14 = *(NSObject **)(gLogObjects + 328);
          }
          else
          {
            unint64_t v14 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = v3[1];
            int MsgID = iAP2MsgGetMsgID(v13);
            int v20 = 138412546;
            uint64_t v21 = v15;
            __int16 v22 = 1024;
            LODWORD(v23) = MsgID;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "deviceUpdatePairingInfoHandler %@ send message %xh", (uint8_t *)&v20, 0x12u);
          }
          iap2_sessionControl_sendOutgoingMessage(v3, v13);
          platform_blePairing_deleteParams(a2);
          return 1;
        }
        if (v9)
        {
          int v11 = *(NSObject **)(gLogObjects + 328);
        }
        else
        {
          int v11 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        BOOL v17 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v17)
        {
          uint64_t v18 = v3[1];
          int v19 = *(unsigned __int8 *)(Feature + 8);
          int v20 = 138412546;
          uint64_t v21 = v18;
          __int16 v22 = 1024;
          LODWORD(v23) = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "deviceUpdatePairingInfoHandler %@, Updates not started bUpdateStarted:%d", (uint8_t *)&v20, 0x12u);
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *_createFeature_26(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2BLEPairing _createFeature", v4, 2u);
  }
  if (!a1) {
    return 0;
  }
  uint64_t result = malloc_type_calloc(1uLL, 0x10uLL, 0x1060040E5A1EACFuLL);
  if (result)
  {
    *(void *)uint64_t result = 0;
    result[8] = 0;
  }
  return result;
}

uint64_t _destroyFeature_26(uint64_t **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    BOOL v4 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    BOOL v4 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2BLEPairing _destroyFeature", v6, 2u);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      platform_blePairing_accessoryDetached(*(void *)(a2 + 8), **a1);
      platform_blePairing_decrementUserCount();
      if (*a1)
      {
        free(*a1);
        *a1 = 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _startFeatureFromDevice_17(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v2 = *(NSObject **)(gLogObjects + 328);
  }
  else
  {
    uint64_t v2 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2BLEPairing _startFeatureFromDevice", (uint8_t *)&v17, 2u);
  }
  uint64_t Feature = (uint64_t *)iap2_feature_getFeature(a1, 4u);
  if (Feature)
  {
    LOBYTE(v17) = 0;
    if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8, &v17))
    {
      uint64_t v4 = iap2_feature_getFeature(a1, 0);
      *uint64_t Feature = (uint64_t)CFDataCreateCopy(kCFAllocatorDefault, *(CFDataRef *)(v4 + 24));
      uint64_t v5 = iap2_feature_getFeature(a1, 1u);
      __int16 v6 = *(const void ***)(v5 + 8);
      AccInfoMutableDict = platform_blePairing_createAccInfoMutableDict(v6[2], v6[3], v6[1], v6[4], v6[5], v6[6]);
      CFDictionaryRef v8 = _copySupportedPairTypesData(a1);
      platform_blePairing_incrementUserCount();
      if (gLogObjects && gNumLogObjects >= 42)
      {
        int v9 = *(NSObject **)(gLogObjects + 328);
      }
      else
      {
        int v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(*(void *)(v5 + 8) + 16);
        BOOL isApplePencilGen1Supported = platform_systemInfo_isApplePencilGen1Supported();
        int v17 = 136315906;
        uint64_t v18 = "_startFeatureFromDevice";
        __int16 v19 = 1024;
        int v20 = 864;
        __int16 v21 = 2112;
        uint64_t v22 = v10;
        __int16 v23 = 1024;
        BOOL v24 = isApplePencilGen1Supported;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s:%d model %@, isApplePencilGen1Supported %d", (uint8_t *)&v17, 0x22u);
      }
      if (CFStringCompare(*(CFStringRef *)(*(void *)(v5 + 8) + 16), @"A1603", 0)
        || platform_systemInfo_isApplePencilGen1Supported())
      {
        if (!a1 || (uint64_t v12 = *(void *)(a1 + 8)) == 0) {
          uint64_t v12 = 0;
        }
        platform_blePairing_accessoryAttached(v12, *Feature, (uint64_t)AccInfoMutableDict, (uint64_t)v8);
      }
      else if (platform_systemInfo_isIPad())
      {
        AccessoryNotSupportedCF = (void *)acc_userNotifications_createAccessoryNotSupportedCF();
        CFStringRef Identifier = acc_userNotifications_createIdentifier(@"iap2_pairing_not_supported", *(void *)(a1 + 8));
        ACCUNSetIdentifier(AccessoryNotSupportedCF, (uint64_t)Identifier);
        if (Identifier) {
          CFRelease(Identifier);
        }
        if (*(void *)a1)
        {
          if (**(void **)a1)
          {
            uint64_t v16 = *(void *)(a1 + 16);
            if (v16) {
              ACCUNSetGroupIdentifier(AccessoryNotSupportedCF, v16);
            }
          }
        }
        ACCUNManagerPresentNotification(AccessoryNotSupportedCF, 0);
        if (AccessoryNotSupportedCF) {
          CFRelease(AccessoryNotSupportedCF);
        }
      }
      if (AccInfoMutableDict) {
        CFRelease(AccInfoMutableDict);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  return Feature != 0;
}

uint64_t _checkIdentificationInfo_23(uint64_t a1)
{
  unsigned __int8 v10 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8u, &v10);
  uint64_t v3 = v2;
  int v4 = v10;
  if (v10) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v10) {
      BOOL v6 = v2 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      CFDictionaryRef v7 = _copySupportedPairTypesData(a1);
      if (!v7) {
        return 2;
      }
      CFDictionaryRef v8 = v7;
      uint64_t v3 = 2 * (CFDataGetLength(v7) < 1);
      CFRelease(v8);
      int v4 = v10;
    }
    if (v4 && !v3)
    {
      iap2_features_createFeature(a1, 4u);
      iap2_identification_setIdentifiedForFeature(a1, 4u);
    }
  }
  return v3;
}

CFDictionaryRef _copySupportedPairTypesData(uint64_t a1)
{
  CFDictionaryRef result = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  if (result)
  {
    CFDictionaryRef v2 = result;
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result)
    {
      uint64_t v3 = (uint64_t)result;
      __chkstk_darwin(result);
      BOOL v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
      memset(v5, 170, v4);
      CFDictionaryGetKeysAndValues(v2, 0, (const void **)v5);
      if (v3 >= 1)
      {
        *(void *)&long long v6 = 134218240;
        long long v11 = v6;
        do
        {
          uint64_t v7 = *v5;
          if (*v5)
          {
            if (*(_DWORD *)(v7 + 20) == 5) {
              return CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)(v7 + 32), *(unsigned __int8 *)(v7 + 40));
            }
          }
          else
          {
            uint64_t v8 = gLogObjects;
            int v9 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 42)
            {
              unsigned __int8 v10 = *(NSObject **)(gLogObjects + 328);
            }
            else
            {
              unsigned __int8 v10 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v11;
                uint64_t v15 = v8;
                __int16 v16 = 1024;
                int v17 = v9;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                unsigned __int8 v10 = &_os_log_default;
              }
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
              _getEndpointSampleRates_cold_1(&v12, v13, v10);
            }
          }
          ++v5;
          --v3;
        }
        while (v3);
      }
      return 0;
    }
  }
  return result;
}

id _platform_vehicle_checkForLowDistanceRangeStatus(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  BOOL v5 = v4;
  if (v4 && ([v4 objectForKey:v3], (long long v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v7 = v6;
    id v8 = [v6 BOOLValue];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id platform_vehicle_vehicleStatusChanged(uint64_t a1, void *a2)
{
  if ((_platform_vehicle_checkForLowDistanceRangeStatus(a2, kACCVehicleInfoHasLowDistanceRangeKey) & 1) != 0
    || (_platform_vehicle_checkForLowDistanceRangeStatus(a2, kACCVehicleInfoHasLowDistanceRangeGasolineKey) & 1) != 0|| (_platform_vehicle_checkForLowDistanceRangeStatus(a2, kACCVehicleInfoHasLowDistanceRangeDieselKey) & 1) != 0|| (_platform_vehicle_checkForLowDistanceRangeStatus(a2, kACCVehicleInfoHasLowDistanceRangeElectricKey) & 1) != 0|| _platform_vehicle_checkForLowDistanceRangeStatus(a2, kACCVehicleInfoHasLowDistanceRangeCNGKey))
  {
    uint64_t v4 = gLogObjects;
    int v5 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_nvmInfo_getPairingStatus_cold_1(v4, v5);
      }
      id v8 = &_os_log_default;
      id v7 = &_os_log_default;
    }
    else
    {
      id v8 = *(id *)(gLogObjects + 48);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Have low fuel update...launch maps application", v13, 2u);
    }

    platform_system_launchApplicationToBackground(@"com.apple.Maps");
  }
  int v9 = +[ACCExternalAccessoryServer sharedServer];
  unsigned __int8 v10 = v9;
  if (v9) {
    id v11 = [v9 vehicleStatusDidChange:a2 forAccessoryUUID:a1];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

uint64_t iAP2LinkActionNone(uint64_t result, unsigned char *a2)
{
  if (!result) {
    iAP2LinkActionNone_cold_1();
  }
  if (!a2) {
    iAP2LinkActionNone_cold_2();
  }
  *a2 = 29;
  return result;
}

uint64_t iAP2LinkActionHandleACK(uint64_t result, unsigned char *a2)
{
  if (!result) {
    iAP2LinkActionHandleACK_cold_1();
  }
  if (!a2) {
    iAP2LinkActionHandleACK_cold_2();
  }
  *a2 = 29;
  return result;
}

void iAP2LinkActionSendData(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionSendData_cold_1();
  }
  if (!a2) {
    iAP2LinkActionSendData_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);

  iAP2LinkProcessOutQueue(v2);
}

void iAP2LinkProcessOutQueue(uint64_t a1)
{
  if (!a1) {
    iAP2LinkProcessOutQueue_cold_1();
  }
  uint64_t v2 = (unsigned __int8 *)(a1 + 440);
  int v3 = 5;
  while (v3 && iAP2LinkSendWindowAvailable(a1))
  {
    int v4 = 0;
    char v5 = 0;
    --v3;
    while (iAP2LinkSendWindowAvailable(a1) && iAP2ListArrayGetAvailSpace(*(unsigned char **)(a1 + 296)))
    {
      uint64_t v6 = a1 + 8 * *(unsigned __int8 *)(a1 + 344);
      if (iAP2ListArrayGetCount(*(unsigned __int8 **)(v6 + 304)))
      {
        id v7 = (unsigned __int8 **)(v6 + 304);
        unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(v6 + 304));
        int v9 = (uint64_t *)iAP2ListArrayItemForIndex(*(void *)(v6 + 304), FirstItemIndex);
        if (v9)
        {
          uint64_t v10 = *v9;
          if (*v9)
          {
            iAP2PacketRetain(*v9);
            id v11 = *(unsigned char **)(v10 + 64);
            uint64_t v12 = *(unsigned __int8 *)(a1 + 420);
            if (!*(unsigned char *)(a1 + 420)) {
              goto LABEL_19;
            }
            uint64_t v13 = 0;
            unint64_t v14 = v2;
            uint64_t v15 = v2;
            do
            {
              int v16 = *v15;
              v15 += 4;
              if (v16 == v11[7]) {
                uint64_t v13 = v14;
              }
              unint64_t v14 = v15;
              --v12;
            }
            while (v12);
            if (v13 && v13[3]) {
              char v17 = 0;
            }
            else {
LABEL_19:
            }
              char v17 = 1;
            v11[5] = *(unsigned char *)(a1 + 190) + v17;
            v11[6] = *(unsigned char *)(a1 + 188);
            if (!_iAP2LinkSendPacketCommon(a1, v10, 0, 0)) {
              break;
            }
            *(_DWORD *)(a1 + 532) += iAP2PacketGetPayloadLen(v10);
            ++*(_DWORD *)(a1 + 540);
            iAP2ListArrayDeleteItem(*v7, FirstItemIndex, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
            uint64_t v18 = *(void (**)(uint64_t, void))(v10 + 24);
            if (v18) {
              v18(a1, *(void *)(v10 + 8));
            }
            __int16 v19 = *(void (**)(uint64_t, void))(v10 + 16);
            if (v19 && (*(_WORD *)(v10 + 61) & 0x800) == 0) {
              v19(a1, *(void *)(v10 + 8));
            }
            iAP2PacketRelease((uint64_t *)v10);
          }
        }
        if (iAP2ListArrayGetCount(*v7)) {
          char v5 = 1;
        }
      }
      unsigned int v20 = *(unsigned __int8 *)(a1 + 344);
      if (v20 < 4) {
        char v21 = v20 + 1;
      }
      else {
        char v21 = 0;
      }
      *(unsigned char *)(a1 + 344) = v21;
      if (++v4 == 5) {
        break;
      }
    }
    if ((v5 & 1) == 0)
    {
      int v22 = 0;
      goto LABEL_36;
    }
  }
  int v22 = 1;
LABEL_36:
  if (!iAP2LinkSendWindowAvailable(a1)) {
    iAP2LinkEventNotify(a1, 4, 0);
  }
  if (v22)
  {
    iAP2LinkSignalSendBuffCB(a1);
  }
}

void iAP2LinkActionDetach(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionDetach_cold_1();
  }
  if (!a2) {
    iAP2LinkActionDetach_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);

  iAP2LinkConnectedCB(v2, 0);
}

uint64_t *iAP2LinkActionSendACK(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionSendACK_cold_1();
  }
  if (!a2) {
    iAP2LinkActionSendACK_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  iAP2TimeCancelTimer(*(unsigned int **)(v2 + 200), *(unsigned char *)(v2 + 194));
  *(unsigned char *)(v2 + 194) = -1;
  int v3 = *(unsigned __int8 **)(v2 + 288);
  if (!v3 || !iAP2ListArrayGetCount(v3)) {
    goto LABEL_17;
  }
  unsigned __int8 v22 = -86;
  unint64_t RecvPckFirstItem = _GetRecvPckFirstItem(v2, &v22);
  unsigned __int8 v5 = -1;
  if (RecvPckFirstItem)
  {
    do
    {
      if (*(unsigned char *)(v2 + 212)) {
        unsigned int v6 = iAP2PacketCalcSeqGap(*(unsigned char *)(v2 + 188), *(unsigned char *)(*(void *)(RecvPckFirstItem + 64) + 5));
      }
      else {
        unsigned int v6 = 128;
      }
      if (v6 < v5 && v6 != 0) {
        unsigned __int8 v5 = v6;
      }
      unint64_t RecvPckFirstItem = _GetRecvPckNextItem(v2, v22, &v22);
    }
    while (RecvPckFirstItem);
    if (v5 <= 1u) {
      goto LABEL_17;
    }
  }
  if (*(unsigned __int8 *)(v2 + 411) >= v5)
  {
    if (!iAP2ListArrayGetCount(*(unsigned __int8 **)(v2 + 288))) {
      iAP2LinkActionSendACK_cold_4();
    }
    unsigned int Count = iAP2ListArrayGetCount(*(unsigned __int8 **)(v2 + 288));
    unsigned int v12 = *(unsigned __int16 *)(v2 + 422);
    if (v12 >= *(unsigned __int16 *)(v2 + 192)) {
      unsigned int v12 = *(unsigned __int16 *)(v2 + 192);
    }
    if (*(unsigned char *)(v2 + 213) == 2) {
      int v13 = -12;
    }
    else {
      int v13 = -10;
    }
    unsigned int v14 = v13 + v12;
    if (v14 >= Count) {
      int v15 = Count;
    }
    else {
      int v15 = v14;
    }
    if (v14 >= Count) {
      unsigned __int8 v16 = Count;
    }
    else {
      unsigned __int8 v16 = v14;
    }
    uint64_t EAKPacket = iAP2PacketCreateEAKPacket(v2, *(unsigned char *)(v2 + 190), *(unsigned char *)(v2 + 188), 0, v15);
    if (!EAKPacket) {
      iAP2LinkActionSendACK_cold_5();
    }
    int v9 = (uint64_t *)EAKPacket;
    uint64_t v18 = *(unsigned char **)(EAKPacket + 72);
    unsigned __int8 v23 = -86;
    unint64_t RecvPckNextItem = _GetRecvPckFirstItem(v2, &v23);
    if (v16 && RecvPckNextItem)
    {
      int v20 = 0;
      do
      {
        *v18++ = *(unsigned char *)(*(void *)(RecvPckNextItem + 64) + 5);
        ++v20;
        unint64_t RecvPckNextItem = _GetRecvPckNextItem(v2, v23, &v23);
      }
      while (v20 < v16 && RecvPckNextItem != 0);
    }
    ++*(_DWORD *)(v2 + 560);
    ++*(_DWORD *)(v2 + 580);
  }
  else
  {
LABEL_17:
    uint64_t ACKPacket = iAP2PacketCreateACKPacket(v2, *(unsigned char *)(v2 + 190), *(unsigned char *)(v2 + 188), 0, 0, 0);
    if (!ACKPacket) {
      iAP2LinkActionSendACK_cold_3();
    }
    int v9 = (uint64_t *)ACKPacket;
    ++*(_DWORD *)(v2 + 588);
  }
  _iAP2LinkSendPacketCommon(v2, (uint64_t)v9, 0, 0);

  return iAP2PacketRelease(v9);
}

uint64_t iAP2LinkSendPacket(uint64_t a1, uint64_t a2, int a3)
{
  return _iAP2LinkSendPacketCommon(a1, a2, a3, 0);
}

void iAP2LinkActionResendMissing(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionResendMissing_cold_1();
  }
  if (!a2) {
    iAP2LinkActionResendMissing_cold_2();
  }
  *a2 = 29;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(void **)(v3 + 280);
  unsigned int v22 = 0;
  MissingSeqFromEAK = (void **)iAP2PacketGetMissingSeqFromEAK(v4, *(unsigned __int8 *)(v3 + 421), &v22);
  unsigned int v6 = MissingSeqFromEAK;
  if (MissingSeqFromEAK) {
    BOOL v7 = v22 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    id v8 = (void **)((char *)MissingSeqFromEAK + v22);
    unsigned int v21 = 1;
    int v9 = (uint64_t *)iAP2PacketCreateEmptySendPacket(v3, &v21);
    char v10 = 0;
    *int v9 = v3;
    id v11 = v6;
LABEL_8:
    char v20 = v10;
    do
    {
      *(unsigned char *)(v9[8] + 5) = *(unsigned char *)v11;
      *(void *)buf = v9;
      unsigned int Item = iAP2ListArrayFindItem(*(unsigned char **)(v3 + 296), (uint64_t)buf, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_iAP2LinkComparePacketSeq);
      int v13 = (uint64_t *)iAP2ListArrayItemForIndex(*(void *)(v3 + 296), Item);
      if (v13)
      {
        uint64_t v14 = *v13;
        if (*v13)
        {
          if (iAP2PacketIsACKOnly(*v13))
          {
            iAP2ListArrayDeleteItem(*(unsigned char **)(v3 + 296), Item, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
          }
          else
          {
            unsigned int v15 = *(unsigned __int8 *)(v14 + 58);
            if (v15 < *(unsigned __int8 *)(v3 + 412))
            {
              *(unsigned char *)(v14 + 58) = v15 + 1;
              ++*(_DWORD *)(v3 + 552);
              ++*(_DWORD *)(v3 + 608);
              char v10 = 1;
              _iAP2LinkSendPacketCommon(v3, v14, 1, 0);
              id v11 = (void **)((char *)v11 + 1);
              if (v11 < v8) {
                goto LABEL_8;
              }
              iAP2PacketRelease(v9);
              goto LABEL_30;
            }
            if (_iAP2LogEnableMask)
            {
              uint64_t v16 = gLogObjects;
              int v17 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 20)
              {
                uint64_t v18 = *(NSObject **)(gLogObjects + 152);
              }
              else
              {
                uint64_t v18 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v16;
                  __int16 v24 = 1024;
                  int v25 = v17;
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
                }
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v19 = "Device:ResendMissing";
                if (!*(_DWORD *)(v3 + 184)) {
                  __int16 v19 = "Accessory:ResendMissing";
                }
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "iAP2LinkActionResendMissing";
                __int16 v24 = 1024;
                int v25 = 2028;
                __int16 v26 = 2080;
                int v27 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d %s Resend too many times!", buf, 0x1Cu);
              }
            }
            *a2 = 20;
          }
        }
      }
      id v11 = (void **)((char *)v11 + 1);
    }
    while (v11 < v8);
    iAP2PacketRelease(v9);
    if (v20) {
LABEL_30:
    }
      iAP2LinkEventNotify(v3, 5, 0);
  }
  if (v6) {
    iAP2BuffPoolReturn(*(unsigned __int8 **)(v3 + 256), v6);
  }
}

void iAP2LinkEventNotify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2 > 8)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects) {
          BOOL v21 = gNumLogObjects < 20;
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          unsigned int v22 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          unsigned int v22 = *(NSObject **)(gLogObjects + 152);
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v26 = "iAP2LinkEventNotify";
          __int16 v27 = 1024;
          int v28 = 6020;
          __int16 v29 = 1024;
          int v30 = v3;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Unknown event(%d)!", buf, 0x18u);
        }
      }
    }
    else
    {
      uint64_t v4 = a3;
      uint64_t v5 = a1;
      unint64_t v6 = 0;
      int v7 = 0;
      id v8 = (unsigned __int8 *)(a1 + a2 + 160);
      int v23 = (unsigned __int16)a3;
      char v9 = 1;
      uint64_t v10 = a1 + 16 * a2;
      uint64_t v24 = v10;
      do
      {
        char v11 = v9;
        if (v6 >= *v8) {
          break;
        }
        unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8 * v6 + 16);
        if (v12)
        {
          if ((_iAP2LogEnableMask & 4) != 0)
          {
            int v13 = v8;
            uint64_t v14 = v5;
            uint64_t v15 = v4;
            uint64_t v16 = v3;
            uint64_t v17 = gLogObjects;
            int v18 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v19 = gNumLogObjects < 20;
            }
            else {
              BOOL v19 = 1;
            }
            if (v19)
            {
              char v20 = &_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                __int16 v26 = (const char *)v17;
                __int16 v27 = 1024;
                int v28 = v18;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
              }
            }
            else
            {
              char v20 = *(NSObject **)(gLogObjects + 152);
            }
            uint64_t v3 = v16;
            uint64_t v4 = v15;
            uint64_t v5 = v14;
            id v8 = v13;
            uint64_t v10 = v24;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316162;
              __int16 v26 = "iAP2LinkEventNotify";
              __int16 v27 = 1024;
              int v28 = 6013;
              __int16 v29 = 1024;
              int v30 = v3;
              __int16 v31 = 1024;
              int v32 = v7;
              __int16 v33 = 1024;
              int v34 = v23;
              _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s:%d eventNotifyCB, event=%d i=%d param=%hx!", buf, 0x24u);
            }
          }
          v12(v5, v3, v4);
        }
        char v9 = 0;
        unint64_t v6 = 1;
        int v7 = 1;
      }
      while ((v11 & 1) != 0);
    }
  }
}

void iAP2LinkActionResendData(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionResendData_cold_1();
  }
  if (!a2) {
    iAP2LinkActionResendData_cold_2();
  }
  *a2 = 29;
  uint64_t v3 = *(void *)(a1 + 16);
  int CurTimeMs = iAP2TimeGetCurTimeMs();
  int v5 = *(unsigned __int16 *)(v3 + 416);
  if (!iAP2ListArrayGetCount(*(unsigned __int8 **)(v3 + 296))) {
    return;
  }
  char v21 = -86;
  SendPckFirstunsigned int Item = _GetSendPckFirstItem(v3, &v21);
  if (!SendPckFirstItem) {
    return;
  }
  SendPckNextunsigned int Item = SendPckFirstItem;
  char v8 = 0;
  unsigned int v9 = CurTimeMs + v5;
  uint64_t v10 = &_iAP2LogEnableMask;
  unsigned __int8 v11 = v21;
  do
  {
    while (1)
    {
      uint64_t v12 = SendPckNextItem;
      char v20 = -86;
      SendPckNextunsigned int Item = _GetSendPckNextItem(v3, v11, &v20);
      if (*(_DWORD *)(v12 + 48) > v9) {
        goto LABEL_13;
      }
      if (*(unsigned char *)(v3 + 212))
      {
        unsigned int v13 = iAP2PacketCalcSeqGap(*(unsigned char *)(v3 + 189), *(unsigned char *)(*(void *)(v12 + 64) + 5));
        if (!v13) {
          goto LABEL_12;
        }
      }
      else
      {
        unsigned int v13 = 128;
      }
      if (v13 > *(unsigned __int8 *)(v3 + 411) || iAP2PacketIsACKOnly(v12))
      {
LABEL_12:
        iAP2ListArrayDeleteItem(*(unsigned char **)(v3 + 296), v11, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
        goto LABEL_13;
      }
      unsigned int v14 = *(unsigned __int8 *)(v12 + 58);
      if (v14 >= *(unsigned __int8 *)(v3 + 412)) {
        break;
      }
      *(unsigned char *)(v12 + 58) = v14 + 1;
      ++*(_DWORD *)(v3 + 548);
      ++*(_DWORD *)(v3 + 608);
      char v8 = 1;
      _iAP2LinkSendPacketCommon(v3, v12, 1, 0);
      unsigned __int8 v11 = v20;
      if (!SendPckNextItem) {
        goto LABEL_30;
      }
    }
    if (*(unsigned char *)v10)
    {
      uint64_t v15 = v10;
      uint64_t v16 = gLogObjects;
      int v17 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v18 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        int v18 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          int v23 = (const char *)v16;
          __int16 v24 = 1024;
          int v25 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      uint64_t v10 = v15;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v19 = "Device:ResendData";
        if (!*(_DWORD *)(v3 + 184)) {
          BOOL v19 = "Accessory:ResendData";
        }
        *(_DWORD *)buf = 136315650;
        int v23 = "iAP2LinkActionResendData";
        __int16 v24 = 1024;
        int v25 = 2147;
        __int16 v26 = 2080;
        __int16 v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d %s: Resend too many times!", buf, 0x1Cu);
      }
    }
    *a2 = 20;
LABEL_13:
    unsigned __int8 v11 = v20;
  }
  while (SendPckNextItem);
  if ((v8 & 1) == 0) {
    return;
  }
LABEL_30:
  iAP2LinkEventNotify(v3, 5, 0);
}

unint64_t _GetSendPckFirstItem(uint64_t a1, unsigned char *a2)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 296));
  *a2 = FirstItemIndex;
  unint64_t result = iAP2ListArrayItemForIndex(*(void *)(a1 + 296), FirstItemIndex);
  if (result) {
    return *(void *)result;
  }
  return result;
}

unint64_t _GetSendPckNextItem(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unsigned int NextItemIndex = iAP2ListArrayGetNextItemIndex(*(void *)(a1 + 296), a2);
  *a3 = NextItemIndex;
  unint64_t result = iAP2ListArrayItemForIndex(*(void *)(a1 + 296), NextItemIndex);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t iAP2LinkActionHandleData(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionHandleData_cold_1();
  }
  if (!a2) {
    iAP2LinkActionHandleData_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 280);
  uint64_t v4 = *(void *)(v3 + 64);
  *(_DWORD *)(v2 + 536) += iAP2PacketGetPayloadLen(v3);
  ++*(_DWORD *)(v2 + 544);
  if (!*(unsigned char *)(v2 + 420)) {
    goto LABEL_10;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 440;
  do
  {
    if (*(unsigned __int8 *)(v7 + v5) == *(unsigned __int8 *)(v4 + 7)) {
      uint64_t v6 = v7 + v5;
    }
    v5 += 4;
  }
  while (4 * *(unsigned __int8 *)(v2 + 420) != v5);
  if (v6)
  {
    char v8 = *(unsigned __int16 **)(v3 + 72);
    unsigned __int16 PayloadLen = iAP2PacketGetPayloadLen(v3);
    iAP2LinkDataReadyCB(v2, v8, PayloadLen, v3, *(unsigned __int8 *)(v4 + 7));
  }
  else
  {
LABEL_10:
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v10 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        uint64_t v10 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(unsigned __int8 *)(v4 + 7);
        int v13 = 136315650;
        unsigned int v14 = "iAP2LinkActionHandleData";
        __int16 v15 = 1024;
        int v16 = 2221;
        __int16 v17 = 1024;
        int v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Invalid session(%u)!", (uint8_t *)&v13, 0x18u);
      }
    }
  }
  uint64_t result = iAP2LinkIsNoRetransmit(v2 + 410);
  if ((result & 1) == 0 && *(unsigned __int8 *)(v2 + 194) == 255)
  {
    uint64_t result = iAP2TimeCallbackAfter(*(void *)(v2 + 200), 13, *(unsigned __int16 *)(v2 + 418));
    *(unsigned char *)(v2 + 194) = result;
  }
  return result;
}

unsigned __int8 *iAP2LinkGetSessionInfo(unsigned __int8 *result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[420];
    if (result[420])
    {
      uint64_t result = 0;
      uint64_t v4 = v2 + 440;
      uint64_t v5 = v4;
      do
      {
        int v6 = *v5;
        v5 += 4;
        if (v6 == a2) {
          uint64_t result = v4;
        }
        uint64_t v4 = v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL iAP2LinkIsNoRetransmit(uint64_t a1)
{
  uint64_t v2 = (unsigned __int16 *)(a1 + 6);
  if (!*(_WORD *)(a1 + 6) && !*(_WORD *)(a1 + 8) && !*(unsigned char *)(a1 + 2) && !*(unsigned char *)(a1 + 3)) {
    return 1;
  }
  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 20;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    iAP2LinkIsNoRetransmit_cold_1(v2, a1, v5);
    return 0;
  }
  return result;
}

void iAP2LinkActionNotifyConnectionFail(uint64_t a1, unsigned char *a2)
{
  if (!a1) {
    iAP2LinkActionNotifyConnectionFail_cold_1();
  }
  if (!a2) {
    iAP2LinkActionNotifyConnectionFail_cold_2();
  }
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);

  iAP2LinkConnectedCB(v2, 0);
}

double iAP2LinkSetDefaultSYNParam(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 4) = 65601535;
    *(_WORD *)(a1 + 8) = 10;
    *(void *)&double result = 1966337;
    *(_DWORD *)a1 = 1966337;
    *(_DWORD *)(a1 + 10) = -65280;
  }
  return result;
}

uint64_t iAP2LinkIsValidSynParam(unsigned __int8 *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (!a1 || a2 - 1 > 2) {
    return v4;
  }
  uint64_t v5 = a1;
  unsigned int v6 = *a1;
  BOOL v7 = v6 < a2 || v6 >= 4;
  char v8 = &_iAP2LogEnableMask;
  if (v7)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v9 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        unsigned int v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        iAP2LinkIsValidSynParam_cold_11();
      }
    }
    goto LABEL_74;
  }
  if (__iAP2LinkIsValidSynParamMaxOutstandingPackets((uint64_t)a1))
  {
    if (*((unsigned __int16 *)v5 + 2) <= 0x17u)
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v29 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v29 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkIsValidSynParam_cold_9();
        }
      }
      goto LABEL_74;
    }
    if (iAP2LinkIsNoRetransmit((uint64_t)v5)) {
      goto LABEL_144;
    }
    if (*((unsigned __int16 *)v5 + 3) <= 0x13u)
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v30 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v30 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkIsValidSynParam_cold_7();
        }
      }
      goto LABEL_74;
    }
    if (__iAP2LinkIsValidSynParamCumAckTimeout((uint64_t)v5)
      && __iAP2LinkIsValidSynParamMaxRetransmissions((uint64_t)v5)
      && __iAP2LinkIsValidSynParamMaxCumAck((uint64_t)v5))
    {
LABEL_144:
      if (*v5 < 2u || !v5[24] || iAP2LinkCommandIsFeatureSetValid((uint64_t)v5))
      {
        *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int16 v65 = -21846;
        *(_OWORD *)&uint8_t buf[16] = v11;
        long long v64 = v11;
        *(_OWORD *)buf = v11;
        buf[10] = 0;
        if (v5[10])
        {
          unsigned __int8 v12 = 0;
          uint64_t v13 = 0;
          int v14 = 0;
          while (1)
          {
            __int16 v15 = &v5[4 * v13 + 30];
            if (v12)
            {
              int v16 = *v15;
              if (buf[30] == v16) {
                goto LABEL_65;
              }
              int v17 = v5[4 * v13 + 31];
              if (buf[31] == v17) {
                goto LABEL_65;
              }
              int v18 = (unsigned __int8 *)&v64 + 3;
              uint64_t v19 = 1;
              do
              {
                unint64_t v20 = v19;
                if (v12 == v19) {
                  break;
                }
                if (*(v18 - 1) == v16) {
                  break;
                }
                int v21 = *v18;
                v18 += 4;
                ++v19;
              }
              while (v21 != v17);
              if (v20 < v12)
              {
LABEL_65:
                uint64_t v4 = 0;
                int v28 = 1;
                goto LABEL_67;
              }
            }
            else
            {
              int v16 = *v15;
            }
            if (!v16) {
              goto LABEL_65;
            }
            unsigned int v22 = v8;
            int v23 = &v5[4 * v13];
            __int16 v24 = v23 + 31;
            if (v23[31] > 4u) {
              break;
            }
            int v26 = v23[33];
            int v25 = v23 + 33;
            if (v26) {
              break;
            }
            iAP2PacketCopySessionInfo(&buf[4 * v12 + 30], &v5[4 * v13 + 30]);
            unsigned __int8 v12 = ++buf[10];
            if (!*v15) {
              break;
            }
            uint64_t v27 = *v24;
            if (v27 > 4) {
              break;
            }
            char v8 = v22;
            if (*v25
              || a3 && v5[4 * v13 + 32] > *(unsigned __int8 *)(a3 + v27)
              || a4 && v5[4 * v13 + 32] < *(unsigned __int8 *)(a4 + v27))
            {
              goto LABEL_65;
            }
            if (!v27) {
              int v14 = 1;
            }
            if (++v13 >= (unint64_t)v5[10])
            {
              int v28 = 0;
              uint64_t v4 = 1;
              goto LABEL_67;
            }
          }
          uint64_t v4 = 0;
          int v28 = 1;
          char v8 = v22;
LABEL_67:
          if (v14)
          {
            if (!v28) {
              return v4;
            }
            goto LABEL_75;
          }
        }
      }
    }
  }
LABEL_74:
  uint64_t v4 = 0;
LABEL_75:
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      __int16 v31 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      __int16 v31 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected:", buf, 2u);
    }
  }
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v32 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      int v32 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = *v5;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "ERROR:     version=%d", buf, 8u);
    }
  }
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v34 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      int v34 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = v5[1];
      int v36 = *((unsigned __int16 *)v5 + 2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v35;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "ERROR:     maxOutstanding=%d maxPacketSize=%d", buf, 0xEu);
    }
  }
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      __int16 v37 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      __int16 v37 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      int v38 = *((unsigned __int16 *)v5 + 3);
      int v39 = *((unsigned __int16 *)v5 + 4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "ERROR:     retransmitTimeout=%d cumAckTimeout=%d", buf, 0xEu);
    }
  }
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v40 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      int v40 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = v5[2];
      int v42 = v5[3];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v41;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "ERROR:     maxRetransmissions=%d maxCumAck=%d", buf, 0xEu);
    }
  }
  if (*(unsigned char *)v8)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      uint64_t v43 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      uint64_t v43 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = v5[10];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "ERROR:     numSessionInfo=%u", buf, 8u);
    }
  }
  if (v5[10])
  {
    unsigned int v60 = v4;
    unint64_t v45 = 0;
    __int16 v46 = v5 + 33;
    do
    {
      if (*(unsigned char *)v8)
      {
        __int16 v47 = v5;
        uint64_t v48 = v8;
        uint64_t v49 = gLogObjects;
        int v50 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v51 = gNumLogObjects < 20;
        }
        else {
          BOOL v51 = 1;
        }
        if (v51)
        {
          uint64_t v52 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v49;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v50;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            uint64_t v52 = &_os_log_default;
          }
        }
        else
        {
          uint64_t v52 = *(NSObject **)(gLogObjects + 152);
        }
        char v8 = v48;
        uint64_t v5 = v47;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = *(v46 - 2);
          int v54 = a4;
          if (a4) {
            int v54 = *(unsigned __int8 *)(a4 + v53);
          }
          int v55 = a3;
          if (a3) {
            int v55 = *(unsigned __int8 *)(a3 + *(v46 - 2));
          }
          int v56 = *(v46 - 3);
          int v57 = *(v46 - 1);
          int v58 = *v46;
          *(_DWORD *)buf = 67110656;
          *(_DWORD *)&uint8_t buf[4] = v45;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v56;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v53;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = v57;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v58;
          LOWORD(v64) = 1024;
          *(_DWORD *)((char *)&v64 + 2) = v54;
          WORD3(v64) = 1024;
          DWORD2(v64) = v55;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "ERROR:     session %u [id=%u type=%u ver=%u unrel=%d (min=%u max=%u)]", buf, 0x2Cu);
        }
      }
      ++v45;
      v46 += 4;
    }
    while (v45 < v5[10]);
    return v60;
  }
  return v4;
}

BOOL __iAP2LinkIsValidSynParamMaxOutstandingPackets(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 1);
  char v1 = *(unsigned char *)(a1 + 1);
  if (!v1)
  {
    if (iAP2LinkIsNoRetransmit(a1)) {
      return 1;
    }
    char v1 = *v2;
  }
  if (v1 > 0) {
    return 1;
  }
  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 20;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    __iAP2LinkIsValidSynParamMaxOutstandingPackets_cold_1();
    return 0;
  }
  return result;
}

BOOL __iAP2LinkIsValidSynParamCumAckTimeout(uint64_t a1)
{
  int v1 = *(__int16 *)(a1 + 8);
  if (v1 <= 9 && (_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      __iAP2LinkIsValidSynParamCumAckTimeout_cold_1();
    }
  }
  return v1 > 9;
}

BOOL __iAP2LinkIsValidSynParamMaxRetransmissions(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 2) - 1;
  if (v1 >= 0x1E && (_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      __iAP2LinkIsValidSynParamMaxRetransmissions_cold_1();
    }
  }
  return v1 < 0x1E;
}

BOOL __iAP2LinkIsValidSynParamMaxCumAck(uint64_t a1)
{
  if ((*(char *)(a1 + 3) & 0x80000000) == 0
    && *(unsigned __int8 *)(a1 + 3) <= *(unsigned __int8 *)(a1 + 1))
  {
    return 1;
  }
  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 20;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    __iAP2LinkIsValidSynParamMaxCumAck_cold_1();
    return 0;
  }
  return result;
}

uint64_t iAP2LinkValidateSynParam(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = (uint64_t)a2;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 215);
  if ((*(unsigned char *)(a1 + 212) & 0x40) == 0 && !*(_DWORD *)(a1 + 184)) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  *(_WORD *)&v111[32] = -21846;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int16 v111 = v4;
  *(_OWORD *)&v111[16] = v4;
  long long v110 = v4;
  unsigned int v5 = *a2;
  if (v5 >= 3) {
    int v6 = 3;
  }
  else {
    int v6 = *a2;
  }
  if (v5 >= v3) {
    int v7 = v6;
  }
  else {
    int v7 = v3;
  }
  BOOL v8 = v7 == v5;
  if (v7 != v5)
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v9 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        unsigned int v9 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a2;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v113 = v11;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: linkVersion=%d->%d", buf, 0xEu);
      }
    }
    uint64_t v2 = (uint64_t)a2;
    *a2 = v7;
  }
  int v12 = *(unsigned __int8 *)(v2 + 1);
  if (!__iAP2LinkIsValidSynParamMaxOutstandingPackets(v2))
  {
    int v13 = *(unsigned __int8 *)(v2 + 1);
    int v14 = (v13 & 0x80u) == 0 ? v12 : 127;
    int v15 = *(unsigned char *)(v2 + 1) ? v14 : 1;
    if (v15 != v13)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v16 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v16 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = a2[1];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v113 = v17;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: maxOutstandingPackets=%d->%d", buf, 0xEu);
        }
      }
      BOOL v8 = 0;
      uint64_t v2 = (uint64_t)a2;
      a2[1] = v15;
    }
  }
  unsigned int v18 = *(unsigned __int16 *)(v2 + 4);
  if (v18 <= 0x18) {
    int v19 = 24;
  }
  else {
    int v19 = *(unsigned __int16 *)(v2 + 4);
  }
  if (v18 <= 0x17)
  {
    if (_iAP2LogEnableMask)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unint64_t v20 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        unint64_t v20 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *((unsigned __int16 *)a2 + 2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v113 = v21;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: maxPacketSize=%d->%d", buf, 0xEu);
      }
    }
    uint64_t v2 = (uint64_t)a2;
    *((_WORD *)a2 + 2) = v19;
  }
  BOOL v22 = v18 > 0x17 && v8;
  if (iAP2LinkIsNoRetransmit(v2))
  {
    uint64_t v23 = a1;
  }
  else
  {
    unsigned int v24 = *(unsigned __int16 *)(v2 + 6);
    if (v24 <= 0x14) {
      int v25 = 20;
    }
    else {
      int v25 = *(unsigned __int16 *)(v2 + 6);
    }
    uint64_t v23 = a1;
    if (v24 <= 0x13)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v26 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v26 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = *((unsigned __int16 *)a2 + 3);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v113 = v27;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: retransmitTimeout=%d->%d", buf, 0xEu);
        }
      }
      BOOL v22 = 0;
      uint64_t v2 = (uint64_t)a2;
      *((_WORD *)a2 + 3) = v25;
    }
    unsigned int v28 = *(unsigned __int16 *)(v2 + 8);
    if (v28 >= 0x7FFF) {
      unsigned int v29 = 0x7FFF;
    }
    else {
      unsigned int v29 = *(unsigned __int16 *)(v2 + 8);
    }
    if (v29 <= 0xA) {
      int v30 = 10;
    }
    else {
      int v30 = v29;
    }
    if (v30 != v28)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v31 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          __int16 v31 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = *((unsigned __int16 *)a2 + 4);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v113 = v32;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: cumAckTimeout=%d->%d", buf, 0xEu);
        }
      }
      BOOL v22 = 0;
      uint64_t v2 = (uint64_t)a2;
      *((_WORD *)a2 + 4) = v30;
    }
    unsigned int v33 = *(unsigned __int8 *)(v2 + 2);
    if (v33 >= 0x1E) {
      int v34 = 30;
    }
    else {
      int v34 = *(unsigned __int8 *)(v2 + 2);
    }
    if (*(unsigned char *)(v2 + 2)) {
      int v35 = v34;
    }
    else {
      int v35 = 1;
    }
    if (v35 != v33)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v36 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v36 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = a2[2];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v113 = v37;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: maxRetransmissions=%d->%d", buf, 0xEu);
        }
      }
      BOOL v22 = 0;
      uint64_t v2 = (uint64_t)a2;
      a2[2] = v35;
    }
    int v38 = *(char *)(v2 + 3);
    if (v38 < 0)
    {
      int v39 = 127;
    }
    else if (*(unsigned __int8 *)(v2 + 3) >= *(unsigned __int8 *)(v2 + 1))
    {
      int v39 = *(unsigned __int8 *)(v2 + 1);
    }
    else
    {
      int v39 = *(unsigned __int8 *)(v2 + 3);
    }
    if (v39 != v38)
    {
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v40 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v40 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = a2[3];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v113 = v41;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v39;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params detected: maxCumAck=%d->%d", buf, 0xEu);
        }
      }
      BOOL v22 = 0;
      uint64_t v2 = (uint64_t)a2;
      a2[3] = v39;
    }
  }
  *(_DWORD *)(v23 + 272) = 0;
  if (*(unsigned char *)(v2 + 24)) {
    iAP2LinkCommandValidateFeatureSets(v23, v2);
  }
  BYTE10(v110) = 0;
  unsigned int v42 = *(unsigned __int8 *)(v2 + 10);
  if (*(unsigned char *)(v2 + 10))
  {
    uint64_t v43 = 0;
    char v44 = 0;
    uint64_t v45 = v22;
    while (1)
    {
      __int16 v46 = (unsigned __int8 *)(v2 + 4 * v43);
      uint64_t v48 = v46 + 30;
      int v47 = v46[30];
      int v50 = v46 + 31;
      uint64_t v49 = v46[31];
      BOOL v51 = v46[31] == 0;
      if (v46[30]) {
        BOOL v52 = v49 > 4;
      }
      else {
        BOOL v52 = 1;
      }
      if (v52) {
        goto LABEL_129;
      }
      int v54 = v46[33];
      uint64_t v53 = v46 + 33;
      if (v54) {
        break;
      }
      uint64_t v55 = v2 + 4 * v43;
      unsigned int v58 = *(unsigned __int8 *)(v55 + 32);
      int v57 = (unsigned __int8 *)(v55 + 32);
      unsigned int v56 = v58;
      uint64_t v59 = *(void *)(v23 + 352) + v49;
      if (v58 > *(unsigned __int8 *)(v59 + 14) || v56 < *(unsigned __int8 *)(v59 + 19)) {
        break;
      }
      if (!BYTE10(v110)) {
        goto LABEL_169;
      }
      if (v111[14] != v47 && v111[15] != v49)
      {
        int v79 = &v111[19];
        uint64_t v80 = 1;
        do
        {
          unint64_t v81 = v80;
          if (BYTE10(v110) == v80) {
            break;
          }
          if (*(v79 - 1) == v47) {
            break;
          }
          int v82 = *v79;
          v79 += 4;
          ++v80;
        }
        while (v82 != v49);
        if (v81 >= BYTE10(v110))
        {
LABEL_169:
          uint64_t v94 = v45;
          iAP2PacketCopySessionInfo(&v111[4 * BYTE10(v110) + 14], v48);
          uint64_t v45 = v94;
          ++BYTE10(v110);
          goto LABEL_167;
        }
      }
      if (_iAP2LogEnableMask)
      {
        uint64_t v83 = gLogObjects;
        int v84 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v85 = gNumLogObjects < 20;
        }
        else {
          BOOL v85 = 1;
        }
        if (v85)
        {
          BOOL v86 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          __int16 v95 = &_os_log_default;
          if (v86)
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v113 = v83;
            *(_WORD *)&v113[8] = 1024;
            *(_DWORD *)int v114 = v84;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            __int16 v95 = &_os_log_default;
          }
        }
        else
        {
          __int16 v95 = *(NSObject **)(gLogObjects + 152);
        }
        int v109 = v95;
        BOOL v96 = os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT);
        uint64_t v45 = 0;
        uint64_t v2 = (uint64_t)a2;
        if (!v96) {
          goto LABEL_167;
        }
        int v97 = *(unsigned __int8 *)v48;
        int v98 = *v50;
        int v99 = *v57;
        int v100 = *v53;
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)__int16 v113 = v43;
        *(_WORD *)&v113[4] = 1024;
        *(_DWORD *)&v113[6] = v97;
        *(_WORD *)int v114 = 1024;
        *(_DWORD *)&v114[2] = v98;
        __int16 v115 = 1024;
        int v116 = v99;
        __int16 v117 = 1024;
        int v118 = v100;
        int v68 = v109;
        int v69 = "ERROR: Duplicate session id/type detected: session %u [id=%u type=%u ver=%u unrel=%d]";
LABEL_137:
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, v69, buf, 0x20u);
      }
LABEL_138:
      uint64_t v45 = 0;
LABEL_167:
      v44 |= v51;
      if (++v43 >= (unint64_t)*(unsigned __int8 *)(v2 + 10))
      {
        unsigned int v42 = BYTE10(v110);
        if (v44) {
          goto LABEL_186;
        }
        goto LABEL_175;
      }
    }
    if (!*v53)
    {
      unsigned int v108 = v45;
      iAP2PacketCopySessionInfo(&v111[4 * BYTE10(v110) + 14], v48);
      uint64_t v70 = v2 + 4 * v43;
      unsigned int v72 = *(unsigned __int8 *)(v70 + 32);
      int v71 = (unsigned __int8 *)(v70 + 32);
      uint64_t v73 = *(void *)(v23 + 352) + *v50;
      unsigned int v74 = *(unsigned __int8 *)(v73 + 14);
      if (v72 <= v74) {
        LOBYTE(v74) = *(unsigned char *)(v73 + 19);
      }
      int v75 = BYTE10(v110);
      v111[4 * BYTE10(v110) + 16] = v74;
      uint64_t v45 = v108;
      if (_iAP2LogEnableMask)
      {
        uint64_t v76 = gLogObjects;
        int v77 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v78 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          BOOL v87 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          __int16 v78 = &_os_log_default;
          if (v87)
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v113 = v76;
            *(_WORD *)&v113[8] = 1024;
            *(_DWORD *)int v114 = v77;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
            int v75 = BYTE10(v110);
            __int16 v78 = &_os_log_default;
          }
        }
        int v88 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          int v89 = *(unsigned __int8 *)v48;
          int v90 = *v50;
          int v91 = *v71;
          int v92 = v111[4 * v75 + 16];
          int v93 = *v53;
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)__int16 v113 = v43;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v89;
          *(_WORD *)int v114 = 1024;
          *(_DWORD *)&v114[2] = v90;
          __int16 v115 = 1024;
          int v116 = v91;
          __int16 v117 = 1024;
          int v118 = v92;
          __int16 v119 = 1024;
          int v120 = v93;
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "ERROR: Invalid SYN Params session version detected: session %u [id=%u type=%u ver=%u->%u unrel=%d]", buf, 0x26u);
          LOBYTE(v75) = BYTE10(v110);
        }
        uint64_t v45 = v108;
      }
      BYTE10(v110) = v75 + 1;
      uint64_t v23 = a1;
      uint64_t v2 = (uint64_t)a2;
      goto LABEL_167;
    }
LABEL_129:
    if (_iAP2LogEnableMask)
    {
      uint64_t v60 = gLogObjects;
      int v61 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v62 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        int v62 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)__int16 v113 = v60;
          *(_WORD *)&v113[8] = 1024;
          *(_DWORD *)int v114 = v61;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
        }
      }
      BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
      uint64_t v45 = 0;
      if (!v63) {
        goto LABEL_167;
      }
      int v64 = *(unsigned __int8 *)v48;
      int v65 = *v50;
      uint64_t v66 = v2 + 4 * v43;
      int v67 = *(unsigned __int8 *)(v66 + 32);
      LODWORD(v66) = *(unsigned __int8 *)(v66 + 33);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)__int16 v113 = v43;
      *(_WORD *)&v113[4] = 1024;
      *(_DWORD *)&v113[6] = v64;
      *(_WORD *)int v114 = 1024;
      *(_DWORD *)&v114[2] = v65;
      __int16 v115 = 1024;
      int v116 = v67;
      __int16 v117 = 1024;
      int v118 = v66;
      int v68 = v62;
      int v69 = "ERROR: Invalid SYN Params detected: session %u [id=%u type=%u ver=%u unrel=%d]";
      goto LABEL_137;
    }
    goto LABEL_138;
  }
  LOBYTE(v45) = v22;
LABEL_175:
  if (v42 <= 4)
  {
    unsigned __int8 v101 = 1;
    do
    {
      if (v42)
      {
        uint64_t v102 = 0;
        __int16 v103 = &v111[14];
        while (1)
        {
          int v104 = *v103;
          v103 += 4;
          if (v104 == v101) {
            break;
          }
          if (v42 == ++v102) {
            goto LABEL_185;
          }
        }
        ++v101;
      }
      else
      {
        LOBYTE(v102) = 0;
      }
    }
    while (v42 != v102);
LABEL_185:
    int v105 = &v111[4 * v42 - 16];
    v105[30] = v101;
    *(_WORD *)(v105 + 31) = 256;
    v105[33] = 0;
    LOBYTE(v42) = v42 + 1;
  }
LABEL_186:
  *(unsigned char *)(v2 + 10) = v42;
  *(_OWORD *)(v2 + 30) = *(_OWORD *)&v111[14];
  *(_DWORD *)(v2 + 46) = *(_DWORD *)&v111[30];
  return v45 & 1;
}

uint64_t iAP2LinkGetBuffSize(unsigned int a1)
{
  unsigned __int8 v2 = a1 + 2;
  int v3 = iAP2FSMGetBuffSize();
  int BuffSize = iAP2TimeGetBuffSize(v2);
  int v5 = iAP2TimeSyncGetBuffSize();
  int v6 = iAP2BuffPoolGetBuffSize(0);
  if (a1 >= 0x81) {
    iAP2LinkGetBuffSize_cold_1();
  }
  int v7 = v3 + BuffSize + v5 + v6 + iAP2BuffPoolGetBuffSize(1u);
  int v8 = iAP2BuffPoolGetBuffSize(2u);
  int v9 = v7 + v8 + iAP2ListArrayGetBuffSize(a1, 8);
  LODWORD(v10) = v9 + iAP2ListArrayGetBuffSize(a1, 8) + 616;
  int v11 = 5;
  do
  {
    uint64_t v10 = iAP2ListArrayGetBuffSize(255, 8) + v10;
    --v11;
  }
  while (v11);
  return v10;
}

BOOL iAP2LinkGetChecksumType(uint64_t a1)
{
  return *(unsigned char *)(a1 + 213) == 2;
}

char *iAP2LinkCreate(int a1, uint64_t a2, unsigned int a3, long long *a4, int a5, unsigned int a6, __int16 a7, char *a8)
{
  if (!a8) {
    iAP2LinkCreate_cold_1();
  }
  bzero(a8, 0x268uLL);
  *(void *)a8 = a8;
  if (!a5
    || (IsValidSynParam = iAP2LinkIsValidSynParam((unsigned __int8 *)a4, a3, 0, 0), BOOL result = 0, IsValidSynParam))
  {
    unsigned int v18 = a8 + 616;
    if (a1)
    {
      if (a1 != 1) {
        return 0;
      }
      unsigned __int8 v19 = a6 + 2;
      *((void *)a8 + 1) = iAP2FSMCreate(8, 0, 29, (uint64_t)&iAP2LinkDeviceStates, (uint64_t)a8, (uint64_t)"DeviceFSM", 0, 0, (uint64_t)(a8 + 616));
      v18 += iAP2FSMGetBuffSize();
    }
    else
    {
      unsigned __int8 v19 = 0;
    }
    *((_DWORD *)a8 + 46) = a1;
    *((void *)a8 + 22) = a2;
    *((_WORD *)a8 + 96) = a7;
    if (a5) {
      char v20 = 64;
    }
    else {
      char v20 = 0;
    }
    a8[212] = a8[212] & 0xBF | v20;
    a8[194] = -1;
    a8[213] = 1;
    a8[215] = a3;
    *((void *)a8 + 25) = iAP2TimeCreate((uint64_t)a8, (uint64_t)_iAP2LinkHandleTimerExpire, (uint64_t)_iAP2LinkHandleTimerCancel, v19, (uint64_t)v18);
    uint64_t v21 = (uint64_t)&v18[iAP2TimeGetBuffSize(v19)];
    iAP2ListArrayInit(v21, a6, 8u);
    *((void *)a8 + 36) = v21;
    uint64_t v22 = v21 + iAP2ListArrayGetBuffSize(a6, 8);
    iAP2ListArrayInit(v22, a6, 8u);
    *((void *)a8 + 37) = v22;
    uint64_t v23 = v22 + iAP2ListArrayGetBuffSize(a6, 8);
    for (uint64_t i = 304; i != 344; i += 8)
    {
      iAP2ListArrayInit(v23, 255, 8u);
      *(void *)&a8[i] = v23;
      v23 += iAP2ListArrayGetBuffSize(255, 8);
    }
    *((void *)a8 + 44) = a4;
    long long v25 = *a4;
    long long v26 = a4[1];
    long long v27 = a4[2];
    *((_WORD *)a8 + 204) = *((_WORD *)a4 + 24);
    *(_OWORD *)(a8 + 376) = v26;
    *(_OWORD *)(a8 + 392) = v27;
    *(_OWORD *)(a8 + 360) = v25;
    *(_DWORD *)(a8 + 414) = 65601535;
    *((_WORD *)a8 + 209) = 10;
    *(_DWORD *)(a8 + 410) = 1966337;
    *((_DWORD *)a8 + 105) = -65280;
    *((void *)a8 + 30) = iAP2BuffPoolInit(2u, (uint64_t)a8, 0xFFFF, a6, v23);
    uint64_t v28 = v23 + iAP2BuffPoolGetBuffSize(2u);
    if (a6 <= 0x80) {
      LOWORD(a6) = 128;
    }
    *((void *)a8 + 31) = iAP2BuffPoolInit(1u, (uint64_t)a8, *((unsigned __int16 *)a8 + 96), a6, v28);
    uint64_t v29 = v28 + iAP2BuffPoolGetBuffSize(1u);
    *((void *)a8 + 32) = iAP2BuffPoolInit(0, (uint64_t)a8, 0, 0, v29);
    unsigned int BuffSize = iAP2BuffPoolGetBuffSize(0);
    *((void *)a8 + 33) = iAP2TimeSyncInit(v29 + BuffSize);
    iAP2TimeSyncGetBuffSize();
    return a8;
  }
  return result;
}

void _iAP2LinkHandleTimerExpire(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a1)
  {
    uint64_t Context = iAP2TimeGetContext(a1);
    if (Context)
    {
      if ((*(unsigned char *)(Context + 212) & 0x10) != 0)
      {
        uint64_t v7 = *(void *)(Context + 176);
        iAP2LinkRunLoopTimeout(v7, a2, a3);
      }
      else
      {
        int v6 = *(uint64_t **)(Context + 8);
        iAP2FSMHandleEvent(v6, a3);
      }
    }
  }
}

unsigned int *_iAP2LinkHandleTimerCancel(unsigned int *result, char a2)
{
  if (result)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v9 = v3;
    long long v10 = v3;
    v8[1] = v3;
    _DWORD v8[2] = v3;
    v8[0] = v3;
    uint64_t Context = iAP2TimeGetContext((uint64_t)result);
    BYTE11(v9) = a2;
    int v11 = v8;
    unsigned int Item = iAP2ListArrayFindItem(*(unsigned char **)(Context + 296), (uint64_t)&v11, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_ComparePckTimerIdCB);
    int v6 = (unsigned int **)iAP2ListArrayItemForIndex(*(void *)(Context + 296), Item);
    if (v6)
    {
      BOOL result = *v6;
      if (result) {
        return iAP2PacketRemoveTimer(result);
      }
    }
    int v11 = v8;
    unsigned int v7 = iAP2ListArrayFindItem(*(unsigned char **)(Context + 288), (uint64_t)&v11, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_ComparePckTimerIdCB);
    BOOL result = (unsigned int *)iAP2ListArrayItemForIndex(*(void *)(Context + 288), v7);
    if (result)
    {
      BOOL result = *(unsigned int **)result;
      if (result) {
        return iAP2PacketRemoveTimer(result);
      }
    }
  }
  return result;
}

uint64_t iAP2LinkGetNewSeqNum(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 212) & 4) != 0)
  {
    char v2 = *(unsigned char *)(a1 + 190) + 71;
    LOBYTE(result) = v2 & iAP2TimeGetCurTimeMs();
  }
  else
  {
    LOBYTE(result) = iAP2TimeGetCurTimeMs();
  }
  return result;
}

void iAP2LinkResetSend(uint64_t a1)
{
  if (a1)
  {
    _CleanupSendPckList(a1);
    for (uint64_t i = 304; i != 344; i += 8)
      iAP2ListArrayCleanup(*(unsigned char **)(a1 + i), (void (*)(unsigned __int8 *))_DeletePckCB);
    *(_DWORD *)(a1 + 414) = 65601535;
    *(_WORD *)(a1 + 418) = 10;
    *(_DWORD *)(a1 + 410) = 1966337;
    *(_DWORD *)(a1 + 420) = -65280;
    iAP2LinkResetSeqAck(a1, 1, 0);
  }
  else if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 20;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      long long v4 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v4 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "iAP2LinkResetSend";
      __int16 v7 = 1024;
      int v8 = 3321;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL link!", (uint8_t *)&v5, 0x12u);
    }
  }
}

unsigned char *_CleanupSendPckList(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      int v6 = "_CleanupSendPckList";
      __int16 v7 = 1024;
      int v8 = 1081;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s:%d ", (uint8_t *)&v5, 0x12u);
    }
  }
  return iAP2ListArrayCleanup(*(unsigned char **)(a1 + 296), (void (*)(unsigned __int8 *))_DeletePckCB);
}

uint64_t iAP2LinkResetSeqAck(uint64_t a1, char a2, int a3)
{
  _CleanupSendPckList(a1);
  *(_WORD *)(a1 + 190) = 0;
  *(unsigned char *)(a1 + 212) &= 0xF3u;
  iAP2TimeSyncCleanup(*(void *)(a1 + 264));
  uint64_t result = iAP2TimeSyncInit(*(void *)(a1 + 264));
  *(void *)(a1 + 264) = result;
  if (a3)
  {
    *(void *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 472) = 0;
    *(_WORD *)(a1 + 213) = 1;
    *(void *)(a1 + 492) = 0;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)iAP2ListArrayCleanup(*(unsigned char **)(a1 + 288), (void (*)(unsigned __int8 *))_DeletePckCB);
    *(_WORD *)(a1 + 188) = 0;
    *(unsigned char *)(a1 + 212) &= 0xFCu;
    if (a3)
    {
      *(_DWORD *)(a1 + 460) = 0;
      *(void *)(a1 + 476) = 0;
    }
  }
  return result;
}

void iAP2LinkShuttingDown(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 200);
    if (v2)
    {
      iAP2TimeDelete(v2);
      *(void *)(a1 + 200) = 0;
    }
  }
}

void iAP2LinkDelete(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      BOOL v3 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      long long v4 = "No";
      int v12 = "iAP2LinkDelete";
      int v11 = 136315650;
      if (!a1) {
        long long v4 = "Yes";
      }
      __int16 v13 = 1024;
      int v14 = 3373;
      __int16 v15 = 2080;
      int v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s:%d link null?: %s", (uint8_t *)&v11, 0x1Cu);
    }
  }
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      iAP2LinkRunLoopInitImplementation(v5);
      *(void *)(a1 + 8) = 0;
    }
    int v6 = *(uint64_t **)(a1 + 280);
    if (v6)
    {
      iAP2PacketRelease(v6);
      *(void *)(a1 + 280) = 0;
    }
    iAP2ListArrayCleanup(*(unsigned char **)(a1 + 288), (void (*)(unsigned __int8 *))_DeletePckCB);
    iAP2LinkResetSend(a1);
    uint64_t v7 = *(void *)(a1 + 200);
    if (v7)
    {
      iAP2TimeDelete(v7);
      *(void *)(a1 + 200) = 0;
    }
    iAP2BuffPoolCleanup(*(unsigned __int8 **)(a1 + 240));
    *(void *)(a1 + 240) = 0;
    iAP2BuffPoolCleanup(*(unsigned __int8 **)(a1 + 248));
    *(void *)(a1 + 248) = 0;
    iAP2BuffPoolCleanup(*(unsigned __int8 **)(a1 + 256));
    *(void *)(a1 + 256) = 0;
    uint64_t v8 = *(void *)(a1 + 264);
    if (v8)
    {
      iAP2TimeSyncCleanup(v8);
      *(void *)(a1 + 264) = 0;
    }
  }
  else if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v9 = gNumLogObjects < 20;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      long long v10 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v10 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315394;
      int v12 = "iAP2LinkDelete";
      __int16 v13 = 1024;
      int v14 = 3419;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL link!", (uint8_t *)&v11, 0x12u);
    }
  }
}

uint64_t iAP2LinkCurPckHdrSize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 213) == 2) {
    return 10;
  }
  else {
    return 9;
  }
}

uint64_t iAP2LinkCurPckChksumSize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 213) == 2) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t iAP2LinkGetMaxPayloadSize(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(unsigned __int16 *)(result + 422);
    if (v2 >= *(unsigned __int16 *)(result + 192)) {
      unsigned int v2 = *(unsigned __int16 *)(result + 192);
    }
    if (a2 && *(_DWORD *)(a2 + 40) < v2) {
      unsigned int v2 = *(_DWORD *)(a2 + 40);
    }
    if (*(unsigned char *)(result + 213) == 2) {
      int v3 = -12;
    }
    else {
      int v3 = -10;
    }
    return v3 + v2;
  }
  return result;
}

uint64_t iAP2LinkGetMaxSendPacketSize(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int16 *)(result + 422) >= *(unsigned __int16 *)(result + 192)) {
      return *(unsigned __int16 *)(result + 192);
    }
    else {
      return *(unsigned __int16 *)(result + 422);
    }
  }
  return result;
}

uint64_t iAP2LinkGetMaxRecvPayloadSize(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      int v2 = *(_DWORD *)(a2 + 40);
    }
    else {
      int v2 = 0xFFFF;
    }
    if (*(unsigned char *)(result + 213) == 2) {
      int v3 = -12;
    }
    else {
      int v3 = -10;
    }
    return (v3 + v2);
  }
  return result;
}

uint64_t iAP2LinkGetMaxRecvPacketSize(uint64_t a1)
{
  if (a1) {
    return 0xFFFFLL;
  }
  else {
    return 0;
  }
}

void iAP2LinkStart(uint64_t a1)
{
}

uint64_t iAP2LinkProcessSendBuff(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (iAP2ListArrayGetCount(*(unsigned __int8 **)(result + 304)))
    {
LABEL_3:
      uint64_t result = iAP2LinkSendWindowAvailable(v1);
      if (result)
      {
        iAP2FSMHandleEvent(*(uint64_t **)(v1 + 8), 0x12u);
        return 1;
      }
    }
    else
    {
      uint64_t v2 = 0;
      while (v2 != 4)
      {
        if (iAP2ListArrayGetCount(*(unsigned __int8 **)(v1 + 312 + 8 * v2++)))
        {
          if ((unint64_t)(v2 - 1) <= 3) {
            goto LABEL_3;
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL iAP2LinkSendWindowAvailable(uint64_t a1)
{
  return iAP2LinkIsNoRetransmit(a1 + 410)
      || (~*(unsigned __int8 *)(a1 + 212) & 6) != 0
      || iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 189), *(unsigned char *)(a1 + 190)) < *(unsigned __int8 *)(a1 + 421);
}

void iAP2LinkAttached(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 414) = 65601535;
    *(_WORD *)(a1 + 418) = 10;
    *(_DWORD *)(a1 + 410) = 1966337;
    *(_DWORD *)(a1 + 420) = -65280;
    iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 1u);
  }
}

void iAP2LinkRenegotiate(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 352) = a2;
  if (a3) {
    char v3 = 64;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a1 + 212) & 0xBF | v3;
  int v4 = *(_DWORD *)(a1 + 184);
  if (v4)
  {
    if (v4 == 1) {
      iAP2LinkSendRST(a1);
    }
  }
  else
  {
    iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 8u);
  }
}

uint64_t *iAP2LinkSendRST(uint64_t a1)
{
  iAP2LinkConnectedCB(a1, 0);
  iAP2LinkResetSeqAck(a1, 0, 0);
  *(_DWORD *)(a1 + 414) = 65601535;
  *(_WORD *)(a1 + 418) = 10;
  *(_DWORD *)(a1 + 410) = 1966337;
  *(_DWORD *)(a1 + 420) = -65280;
  uint64_t v2 = *(long long **)(a1 + 352);
  long long v4 = v2[1];
  long long v3 = v2[2];
  long long v5 = *v2;
  *(_WORD *)(a1 + 408) = *((_WORD *)v2 + 24);
  *(_OWORD *)(a1 + 376) = v4;
  *(_OWORD *)(a1 + 392) = v3;
  *(_OWORD *)(a1 + 360) = v5;
  RSTPacket = (uint64_t *)iAP2PacketCreateRSTPacket(a1, *(unsigned char *)(a1 + 190));
  _iAP2LinkSendPacketCommon(a1, (uint64_t)RSTPacket, 0, 0);

  return iAP2PacketRelease(RSTPacket);
}

double iAP2LinkDetached(uint64_t a1)
{
  if (a1)
  {
    iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0xEu);
    *(_DWORD *)(a1 + 414) = 65601535;
    *(_WORD *)(a1 + 418) = 10;
    *(void *)&double result = 1966337;
    *(_DWORD *)(a1 + 410) = 1966337;
    *(_DWORD *)(a1 + 420) = -65280;
  }
  return result;
}

unsigned __int8 *iAP2LinkGetSessSendPckListCount(uint64_t a1, unsigned int a2)
{
  return iAP2ListArrayGetCount(*(unsigned __int8 **)(a1 + 8 * a2 + 304));
}

BOOL iAP2LinkIsUnreliableSession(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 420);
  if (!*(unsigned char *)(a1 + 420)) {
    return 0;
  }
  long long v3 = 0;
  long long v4 = (unsigned __int8 *)(a1 + 440);
  long long v5 = (unsigned __int8 *)(a1 + 440);
  do
  {
    int v6 = *v5;
    v5 += 4;
    if (v6 == a2) {
      long long v3 = v4;
    }
    long long v4 = v5;
    --v2;
  }
  while (v2);
  return v3 && v3[3];
}

uint64_t iAP2LinkQueueSendDataPacketInternal(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), int a7)
{
  if (!a1 || !iAP2PacketIsDataPacket(a2))
  {
    if ((_iAP2LogEnableMask & 1) == 0) {
      goto LABEL_32;
    }
    if (!gLogObjects || gNumLogObjects < 20)
    {
      long long v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v25 = *(NSObject **)(gLogObjects + 152);
    }
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    *(_DWORD *)unsigned int v33 = 136315906;
    *(void *)&v33[4] = "iAP2LinkQueueSendDataPacketInternal";
    __int16 v34 = 1024;
    int v35 = 4136;
    __int16 v36 = 1024;
    unsigned int v37 = (unsigned __int16)a1;
    __int16 v38 = 1024;
    int v39 = (unsigned __int16)a2;
    long long v26 = "ERROR: %s:%d NULL link(%hx) or invalid packet (%hx)!";
    long long v27 = v25;
    uint32_t v28 = 30;
    goto LABEL_31;
  }
  uint64_t v14 = *(unsigned __int8 *)(a1 + 420);
  if (!*(unsigned char *)(a1 + 420)) {
    goto LABEL_46;
  }
  __int16 v15 = 0;
  int v16 = (unsigned __int8 *)(a1 + 440);
  int v17 = (unsigned __int8 *)(a1 + 440);
  do
  {
    int v18 = *v17;
    v17 += 4;
    if (v18 == a3) {
      __int16 v15 = v16;
    }
    int v16 = v17;
    --v14;
  }
  while (v14);
  if (!v15)
  {
LABEL_46:
    if ((_iAP2LogEnableMask & 1) == 0) {
      goto LABEL_32;
    }
    if (!gLogObjects || gNumLogObjects < 20)
    {
      uint64_t v29 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      uint64_t v29 = *(NSObject **)(gLogObjects + 152);
    }
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    *(_DWORD *)unsigned int v33 = 136315650;
    *(void *)&v33[4] = "iAP2LinkQueueSendDataPacketInternal";
    __int16 v34 = 1024;
    int v35 = 4130;
    __int16 v36 = 1024;
    unsigned int v37 = a3;
    long long v26 = "ERROR: %s:%d Invalid session(%u)!";
    long long v27 = v29;
    uint32_t v28 = 24;
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, v33, v28);
LABEL_32:
    if (a6) {
      a6(a1, a4);
    }
    return 0;
  }
  *(unsigned char *)(*(void *)(a2 + 64) + 7) = a3;
  *(void *)(a2 + 8) = a4;
  iAP2PacketSetCallbacks(a2, a5, (uint64_t)a6, a7);
  uint64_t v19 = v15[1];
  *(void *)unsigned int v33 = a2;
  char v20 = *(unsigned __int8 **)(a1 + 8 * v19 + 304);
  unsigned int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v20);
  if (iAP2LinkAddPacketAfter(v20, LastItemIndex, (uint64_t *)v33) != 255) {
    return 1;
  }
  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 20)
  {
    int v30 = *(NSObject **)(gLogObjects + 152);
  }
  else
  {
    int v30 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v31)
  {
    unsigned int Count = iAP2ListArrayGetCount(*(unsigned __int8 **)(a1 + 8 * v15[1] + 304));
    *(_DWORD *)unsigned int v33 = 136315906;
    *(void *)&v33[4] = "iAP2LinkQueueSendDataPacketInternal";
    __int16 v34 = 1024;
    int v35 = 4125;
    __int16 v36 = 1024;
    unsigned int v37 = Count;
    __int16 v38 = 1024;
    int v39 = (unsigned __int16)a2;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Could not queue packet to session send list! listCount=%u packet=%hx", v33, 0x1Eu);
    return 0;
  }
  return result;
}

BOOL iAP2LinkQueueSendData(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), unsigned __int8 a8)
{
  return iAP2LinkQueueSendDataWithSentCallback(a1, a2, a3, a4, a5, 0, a6, a7, a8);
}

BOOL iAP2LinkQueueSendDataWithSentCallback(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), unsigned __int8 a9)
{
  unsigned int v10 = a3;
  int v11 = a2;
  if (a1 && a2 && a3)
  {
    if (!*(unsigned char *)(a1 + 420)) {
      goto LABEL_29;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = a1 + 440;
    do
    {
      if (*(unsigned __int8 *)(v17 + v15) == a4) {
        uint64_t v16 = v17 + v15;
      }
      v15 += 4;
    }
    while (4 * *(unsigned __int8 *)(a1 + 420) != v15);
    if (!v16)
    {
LABEL_29:
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects) {
          BOOL v24 = gNumLogObjects < 20;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24)
        {
          uint32_t v28 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        else
        {
          uint32_t v28 = *(NSObject **)(gLogObjects + 152);
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          unsigned int v56 = "iAP2LinkQueueSendDataWithSentCallback";
          __int16 v57 = 1024;
          int v58 = 4410;
          __int16 v59 = 1024;
          unsigned int v60 = a4;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d ERROR: Invalid session(%u)!", buf, 0x18u);
        }
      }
      int v29 = 0;
      int v30 = 1;
LABEL_75:
      BOOL v27 = v30 != 0;
      BOOL v26 = v29 != 0;
      if (!a8) {
        return v26;
      }
      goto LABEL_76;
    }
    unsigned int v18 = *(unsigned __int16 *)(a1 + 422);
    if (v18 >= *(unsigned __int16 *)(a1 + 192)) {
      unsigned int v18 = *(unsigned __int16 *)(a1 + 192);
    }
    if (*(unsigned char *)(a1 + 213) == 2) {
      int v19 = -12;
    }
    else {
      int v19 = -10;
    }
    unsigned int v20 = v19 + v18;
    unsigned int v21 = a3;
    if (v19 + v18 <= a3)
    {
      if ((int)((a3 + v20 - 1) / v20) > (int)iAP2ListArrayGetAvailSpace(*(unsigned char **)(a1
                                                                                   + 8 * *(unsigned __int8 *)(v16 + 1)
                                                                                   + 304)))
      {
        if (_iAP2LogEnableMask)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            uint64_t v22 = *(NSObject **)(gLogObjects + 152);
          }
          else
          {
            uint64_t v22 = &_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int Count = iAP2ListArrayGetCount(*(unsigned __int8 **)(a1
                                                                            + 8 * *(unsigned __int8 *)(v16 + 1)
                                                                            + 304));
            *(_DWORD *)buf = 136316930;
            unsigned int v56 = "iAP2LinkQueueSendDataWithSentCallback";
            __int16 v57 = 1024;
            int v58 = 4337;
            __int16 v59 = 1024;
            unsigned int v60 = Count;
            __int16 v61 = 1024;
            int v62 = (unsigned __int16)v11;
            __int16 v63 = 1024;
            unsigned int v64 = v10;
            __int16 v65 = 1024;
            int v66 = (unsigned __int16)v11;
            __int16 v67 = 1024;
            unsigned int v68 = v20;
            __int16 v69 = 1024;
            unsigned int v70 = a4;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d No space in session send queue! listCount=%u payload=%hx payloadLen=%u data=%hx dataLen=%u session=%u", buf, 0x36u);
          }
        }
        int v29 = 0;
        int v30 = 1;
LABEL_74:
        iAP2LinkSignalSendBuffCB(a1);
        goto LABEL_75;
      }
      unsigned int v21 = v20;
    }
    uint64_t ACKPacket = iAP2PacketCreateACKPacket(a1, *(unsigned char *)(a1 + 190), *(unsigned char *)(a1 + 188), v11, v21, a4);
    unsigned int v53 = v10;
    unsigned __int16 v49 = (unsigned __int16)v11;
    if (ACKPacket)
    {
      int v32 = (uint64_t *)ACKPacket;
      uint64_t v50 = a7;
      BOOL v51 = a8;
      unsigned int v33 = 0;
      unsigned int v34 = v21;
      while (1)
      {
        unsigned int v35 = v34;
        unsigned int v34 = v21;
        if (v10 <= v35)
        {
          if (a6) {
            iAP2PacketSetCallbackOnSentToTransport((uint64_t)v32, a6);
          }
          uint64_t v36 = a1;
          uint64_t v37 = (uint64_t)v32;
          unsigned int v38 = a4;
          uint64_t v39 = a5;
          uint64_t v40 = v50;
          int v41 = v51;
          int v42 = a9;
        }
        else
        {
          uint64_t v36 = a1;
          uint64_t v37 = (uint64_t)v32;
          unsigned int v38 = a4;
          uint64_t v39 = a5;
          uint64_t v40 = 0;
          int v41 = 0;
          int v42 = 0;
        }
        int v29 = iAP2LinkQueueSendDataPacketInternal(v36, v37, v38, v39, v40, v41, v42);
        iAP2PacketRelease(v32);
        if (!v29) {
          break;
        }
        v33 += v21;
        unsigned int v10 = v53 - v33;
        if (v53 <= v33) {
          break;
        }
        v11 += v21;
        if (v21 >= v10) {
          unsigned int v21 = v53 - v33;
        }
        int v32 = (uint64_t *)iAP2PacketCreateACKPacket(a1, *(unsigned char *)(a1 + 190), *(unsigned char *)(a1 + 188), v11, v21, a4);
        if (!v32)
        {
          int v30 = 0;
          a8 = v51;
          goto LABEL_59;
        }
      }
      int v30 = 0;
      a8 = v51;
    }
    else
    {
      int v30 = 1;
LABEL_59:
      if (_iAP2LogEnableMask)
      {
        uint64_t v43 = gLogObjects;
        int v44 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v45 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          uint64_t v45 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            unsigned int v56 = (const char *)v43;
            __int16 v57 = 1024;
            int v58 = v44;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", buf, 0x12u);
          }
        }
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v46 = iAP2ListArrayGetCount(*(unsigned __int8 **)(a1 + 8 * *(unsigned __int8 *)(v16 + 1) + 304));
          *(_DWORD *)buf = 136316930;
          unsigned int v56 = "iAP2LinkQueueSendDataWithSentCallback";
          __int16 v57 = 1024;
          int v58 = 4399;
          __int16 v59 = 1024;
          unsigned int v60 = v46;
          __int16 v61 = 1024;
          int v62 = v49;
          __int16 v63 = 1024;
          unsigned int v64 = v53;
          __int16 v65 = 1024;
          int v66 = (unsigned __int16)v11;
          __int16 v67 = 1024;
          unsigned int v68 = v21;
          __int16 v69 = 1024;
          unsigned int v70 = a4;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d ERROR: Ran out of Send Packets! listCount=%u payload=%hx payloadLen=%u data=%hx dataLen=%u session=%u", buf, 0x36u);
        }
      }
      int v29 = 0;
    }
    goto LABEL_74;
  }
  if (_iAP2LogEnableMask)
  {
    if (gLogObjects) {
      BOOL v23 = gNumLogObjects < 20;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      long long v25 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    else
    {
      long long v25 = *(NSObject **)(gLogObjects + 152);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      unsigned int v56 = "iAP2LinkQueueSendDataWithSentCallback";
      __int16 v57 = 1024;
      int v58 = 4416;
      __int16 v59 = 1024;
      unsigned int v60 = (unsigned __int16)a1;
      __int16 v61 = 1024;
      int v62 = (unsigned __int16)v11;
      __int16 v63 = 1024;
      unsigned int v64 = v10;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d NULL link(%hx) or payload(%hx) or no payload (len=%u)!", buf, 0x24u);
    }
  }
  BOOL v26 = 0;
  BOOL v27 = 1;
  if (a8)
  {
LABEL_76:
    if (v27) {
      a8(a1, a5);
    }
  }
  return v26;
}

uint64_t iAP2LinkQueueSendDataPacket(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), int a7)
{
  iAP2PacketRetain((uint64_t)a2);
  uint64_t v14 = iAP2LinkQueueSendDataPacketInternal(a1, (uint64_t)a2, a3, a4, a5, a6, a7);
  if (v14) {
    iAP2LinkSignalSendBuffCB(a1);
  }
  iAP2PacketRelease(a2);
  return v14;
}

void iAP2LinkHandleReadyPacket(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 61);
  if (v3 >= 0x13)
  {
    long long v4 = *(uint64_t **)(a1 + 8);
    iAP2FSMHandleEvent(v4, (v3 + 4));
    return;
  }
  int v6 = *(unsigned char **)(a2 + 64);
  if (*(unsigned __int16 *)(a2 + 54) > *(unsigned __int16 *)(a1 + 414))
  {
    if (_iAP2LogEnableMask)
    {
      if (!gLogObjects || gNumLogObjects < 20)
      {
        uint64_t v14 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v14 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = v6[5];
        int v16 = *(unsigned __int16 *)(a2 + 54);
        int v17 = *(unsigned __int16 *)(a1 + 414);
        *(_DWORD *)buf = 67109632;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = v16;
        __int16 v38 = 1024;
        int v39 = v17;
        unsigned int v18 = "ERROR: Packet 0x%x has length = %d bytes > maxPacketLength (%d bytes)";
        int v19 = v14;
        uint32_t v20 = 20;
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
        return;
      }
    }
    return;
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 10) != 6)
  {
    ++*(_DWORD *)(a1 + 528);
    iAP2PacketRetain(a2);
    BOOL v9 = *(uint64_t **)(a1 + 280);
    if (v9) {
      iAP2PacketRelease(v9);
    }
    *(void *)(a1 + 280) = a2;
    int v10 = *(unsigned __int8 *)(a1 + 188);
    int v11 = v6[5];
    unsigned int v12 = iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 188), v6[5]);
    if ((*(unsigned char *)(a1 + 212) & 4) != 0 && (v6[4] & 0x40) != 0) {
      unsigned int v13 = iAP2PacketCalcSeqGap(v6[6], *(unsigned char *)(a1 + 190));
    }
    else {
      unsigned int v13 = 0;
    }
    if (!iAP2LinkIsNoRetransmit(a1 + 410) && v13 > *(unsigned __int8 *)(a1 + 421))
    {
      iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0x13u);
LABEL_50:
      ++*(_DWORD *)(a1 + 556);
LABEL_51:
      BOOL v26 = *(uint64_t **)(a1 + 280);
      if (v26) {
        iAP2PacketRelease(v26);
      }
      *(void *)(a1 + 280) = 0;
      buf[0] = -86;
      unint64_t RecvPckFirstItem = _GetRecvPckFirstItem(a1, buf);
      if (RecvPckFirstItem)
      {
        uint32_t v28 = (uint64_t *)RecvPckFirstItem;
        uint8_t v29 = buf[0];
        do
        {
          char v33 = -86;
          unint64_t RecvPckNextItem = _GetRecvPckNextItem(a1, v29, &v33);
          if ((*(unsigned char *)(a1 + 212) & 1) != 0
            && (unint64_t v31 = RecvPckNextItem,
                unsigned int v32 = iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 188), *(unsigned char *)(v28[8] + 5)),
                (*(unsigned char *)(a1 + 212) & 1) != 0)
            && v32 != 1)
          {
            if (v32 > *(unsigned __int8 *)(a1 + 411)) {
              iAP2ListArrayDeleteItem(*(unsigned char **)(a1 + 288), v29, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
            }
          }
          else
          {
            iAP2PacketRetain((uint64_t)v28);
            iAP2ListArrayDeleteItem(*(unsigned char **)(a1 + 288), v29, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
            if (*(void *)(a1 + 280)) {
              iAP2LinkHandleReadyPacket_cold_3();
            }
            *(void *)(a1 + 280) = v28;
            iAP2LinkProcessInOrderPacket(a1, (uint64_t)v28);
            *(void *)(a1 + 280) = 0;
            iAP2PacketRelease(v28);
            unint64_t v31 = _GetRecvPckFirstItem(a1, &v33);
          }
          uint8_t v29 = v33;
          uint32_t v28 = (uint64_t *)v31;
        }
        while (v31);
      }
      return;
    }
    if ((v6[4] & 4) == 0)
    {
      if ((v6[4] & 0x80) != 0 || (*(unsigned char *)(a1 + 212) & 1) == 0 || v12 == 1)
      {
        if ((v6[4] & 0xC0) != 0x80)
        {
          _AddRecvPckItem(a1, a2);
LABEL_65:
          BOOL IsACKOnly = 0;
          goto LABEL_44;
        }
      }
      else
      {
        if (v12 > *(unsigned __int8 *)(a1 + 411)) {
          goto LABEL_40;
        }
        if ((iAP2PacketIsEAK(a2) & 1) == 0
          && !iAP2PacketIsACKOnly(a2)
          && !iAP2LinkIsUnreliableSession(a1, *(unsigned __int8 *)(*(void *)(a2 + 64) + 7)))
        {
          if (!v12)
          {
LABEL_72:
            if (v10 != v11 || iAP2PacketIsACKOnly(a2) || iAP2LinkIsNoRetransmit(a1 + 410)) {
              goto LABEL_50;
            }
            iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0x10u);
            goto LABEL_65;
          }
LABEL_40:
          if (iAP2LinkIsNoRetransmit(a1 + 410))
          {
            ++*(_DWORD *)(a1 + 560);
            iAP2LinkSendRST(a1);
            goto LABEL_50;
          }
          if (v12 <= *(unsigned __int8 *)(a1 + 411))
          {
            if (!iAP2PacketRequireACK((uint64_t *)a2))
            {
              BOOL IsACKOnly = iAP2PacketIsACKOnly(a2);
              goto LABEL_44;
            }
            if ((_IsReceivedPacket(a1, a2) & 1) == 0)
            {
              ++*(_DWORD *)(a1 + 560);
              _AddRecvPckItem(a1, a2);
              if (*(unsigned __int8 *)(a1 + 194) == 255)
              {
                BOOL IsACKOnly = 0;
                *(unsigned char *)(a1 + 194) = iAP2TimeCallbackAfter(*(void *)(a1 + 200), 13, *(unsigned __int16 *)(a1 + 418));
                goto LABEL_44;
              }
            }
            goto LABEL_65;
          }
          goto LABEL_72;
        }
      }
    }
    BOOL IsACKOnly = 1;
LABEL_44:
    if ((v6[4] & 0x40) != 0)
    {
      char v24 = iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 189), v6[6]);
      char v25 = *(unsigned char *)(a1 + 212);
      if ((v25 & 2) == 0 || (v24 & 0x80000000) == 0)
      {
        *(unsigned char *)(a1 + 189) = v6[6];
        *(unsigned char *)(a1 + 212) = v25 | 2;
        _CleanupAckedPackets(a1);
      }
    }
    if (!IsACKOnly || (iAP2LinkProcessInOrderPacket(a1, a2) & 1) != 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (_iAP2LogEnableMask)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      uint64_t v8 = *(NSObject **)(gLogObjects + 152);
    }
    else
    {
      uint64_t v8 = &_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = v6[5];
      int v22 = *(unsigned __int16 *)(a2 + 54);
      *(_DWORD *)buf = 67109376;
      int v35 = v21;
      __int16 v36 = 1024;
      int v37 = v22;
      unsigned int v18 = "ERROR: Packet seq:0x%x length:%d received while link state = SUSPEND !";
      int v19 = v8;
      uint32_t v20 = 14;
      goto LABEL_30;
    }
  }
}

uint64_t _AddRecvPckItem(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned __int8 **)(a1 + 288);
  unsigned int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v2);
  return iAP2LinkAddPacketAfter(v2, LastItemIndex, &v5);
}

void *_IsReceivedPacket(uint64_t a1, uint64_t a2)
{
  if (iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 188), *(unsigned char *)(*(void *)(a2 + 64) + 5)) > *(unsigned __int8 *)(a1 + 411)) {
    return 0;
  }
  uint64_t v6 = a2;
  unsigned int Item = iAP2ListArrayFindItem(*(unsigned char **)(a1 + 288), (uint64_t)&v6, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_iAP2LinkComparePacketSeq);
  uint64_t result = (void *)iAP2ListArrayItemForIndex(*(void *)(a1 + 288), Item);
  if (result) {
    return (void *)(*result != 0);
  }
  return result;
}

uint64_t _CleanupAckedPackets(uint64_t a1)
{
  char v13 = -86;
  uint64_t result = _GetSendPckFirstItem(a1, &v13);
  if (result)
  {
    SendPckNextunsigned int Item = result;
    char v4 = 0;
    unsigned __int8 v5 = v13;
LABEL_3:
    unint64_t v6 = SendPckNextItem;
    do
    {
      char v12 = -86;
      SendPckNextunsigned int Item = _GetSendPckNextItem(a1, v5, &v12);
      uint64_t v7 = *(void *)(v6 + 64);
      if (*(char *)(v7 + 4) < 0)
      {
        unsigned int v9 = iAP2PacketCalcSeqGap(*(unsigned char *)(v7 + 5), *(unsigned char *)(a1 + 190));
        unsigned int v8 = *(unsigned __int8 *)(a1 + 421);
        if (v9 > v8) {
          goto LABEL_10;
        }
      }
      else
      {
        unsigned int v8 = *(unsigned __int8 *)(a1 + 421);
      }
      uint64_t result = iAP2PacketIsSeqACKd(*(unsigned char *)(v7 + 5), *(unsigned char *)(a1 + 189), v8);
      if (result)
      {
LABEL_10:
        int CurTimeMs = iAP2TimeGetCurTimeMs();
        v11.i32[1] = 1;
        v11.i32[0] = CurTimeMs - *(_DWORD *)(v6 + 48);
        *(int32x2_t *)(a1 + 596) = vadd_s32(v11, *(int32x2_t *)(a1 + 596));
        iAP2ListArrayDeleteItem(*(unsigned char **)(a1 + 296), v5, (uint64_t (*)(unsigned __int8 *))_DeletePckCB);
        unsigned __int8 v5 = v12;
        char v4 = 1;
        if (SendPckNextItem) {
          goto LABEL_3;
        }
        goto LABEL_13;
      }
      unsigned __int8 v5 = v12;
      unint64_t v6 = SendPckNextItem;
    }
    while (SendPckNextItem);
    if ((v4 & 1) == 0) {
      return result;
    }
LABEL_13:
    return iAP2LinkSignalSendBuffCB(a1);
  }
  return result;
}

uint64_t iAP2LinkProcessInOrderPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  int v5 = *(char *)(v4 + 4);
  if (v5 < 0)
  {
    char v17 = *(unsigned char *)(a1 + 212);
    if (v17)
    {
      int v18 = *(unsigned __int8 *)(v4 + 5);
      if (*(unsigned __int8 *)(a1 + 188) == v18) {
        unsigned __int8 v19 = 3;
      }
      else {
        unsigned __int8 v19 = 2;
      }
    }
    else
    {
      LOBYTE(v18) = *(unsigned char *)(v4 + 5);
      unsigned __int8 v19 = 2;
    }
    int v23 = *(unsigned __int8 *)(a1 + 213);
    *(unsigned char *)(a1 + 188) = v18;
    *(unsigned char *)(a1 + 212) = v17 | 1;
    char v24 = *(unsigned char *)(v4 + 4);
    unsigned int v25 = *(_DWORD *)(a1 + 460) + 1;
    *(_DWORD *)(a1 + 460) = v25;
    if ((v24 & 0x40) != 0)
    {
      ++*(_DWORD *)(a1 + 480);
      ++*(_DWORD *)(a1 + 488);
      if ((v17 & 0x20) != 0) {
        goto LABEL_33;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 476);
      ++*(_DWORD *)(a1 + 484);
      if ((v17 & 0x20) != 0) {
        goto LABEL_33;
      }
    }
    if (v25 >= 0xB)
    {
      iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0x14u);
      goto LABEL_42;
    }
LABEL_33:
    if (v23 == 2) {
      unsigned int v26 = 22;
    }
    else {
      unsigned int v26 = 20;
    }
    if (*(unsigned __int16 *)(a2 + 54) < v26) {
      goto LABEL_42;
    }
    __int16 v48 = -21846;
    *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v46[16] = v27;
    long long v47 = v27;
    *(_OWORD *)unsigned int v46 = v27;
    uint32_t v28 = *(unsigned __int8 **)(a2 + 72);
    unsigned int PayloadLen = iAP2PacketGetPayloadLen(a2);
    if (iAP2PacketParseSYNData(v28, PayloadLen, (uint64_t)v46))
    {
      if (iAP2LinkIsValidSynParam(v46, *(unsigned __int8 *)(a1 + 215), *(void *)(a1 + 352) + 14, *(void *)(a1 + 352) + 19))
      {
        if ((*(unsigned char *)(v4 + 4) & 0x40) == 0)
        {
          int v21 = *(uint64_t **)(a1 + 8);
          unsigned int v22 = v19;
LABEL_82:
          iAP2FSMHandleEvent(v21, v22);
          return 1;
        }
        if (v46[0] == *(unsigned __int8 *)(a1 + 360)
          && __PAIR64__(*(unsigned __int16 *)&v46[8], *(unsigned __int16 *)&v46[6]) == __PAIR64__(*(unsigned __int16 *)(a1 + 368), *(unsigned __int16 *)(a1 + 366))&& __PAIR64__(v46[3], v46[2]) == __PAIR64__(*(unsigned __int8 *)(a1 + 363), *(unsigned __int8 *)(a1 + 362))&& v46[10] == *(unsigned __int8 *)(a1 + 370))
        {
          int v21 = *(uint64_t **)(a1 + 8);
          if (*(unsigned __int8 *)(v4 + 6) == *(unsigned __int8 *)(a1 + 190)) {
            unsigned int v22 = 4;
          }
          else {
            unsigned int v22 = 5;
          }
          goto LABEL_82;
        }
      }
      if (iAP2LinkIsNoRetransmit(a1 + 360) && !iAP2LinkIsNoRetransmit((uint64_t)v46))
      {
        int v21 = *(uint64_t **)(a1 + 8);
        unsigned int v22 = 7;
        goto LABEL_82;
      }
    }
    else
    {
      iAP2LinkIsNoRetransmit(a1 + 360);
    }
    int v21 = *(uint64_t **)(a1 + 8);
    unsigned int v22 = 6;
    goto LABEL_82;
  }
  if ((v5 & 0x20) != 0)
  {
    if (*(unsigned char *)(a1 + 213) == 2) {
      unsigned int v20 = 12;
    }
    else {
      unsigned int v20 = 10;
    }
    if (*(unsigned __int16 *)(a2 + 54) <= v20) {
      goto LABEL_42;
    }
    ++*(_DWORD *)(a1 + 564);
    int v21 = *(uint64_t **)(a1 + 8);
    unsigned int v22 = 17;
    goto LABEL_82;
  }
  if ((v5 & 4) != 0)
  {
    if (!iAP2LinkProcessInOrderPacketCMD(a1, a2)) {
      goto LABEL_42;
    }
    return 1;
  }
  if ((v5 & 0x40) != 0)
  {
    int v6 = *(unsigned __int8 *)(a1 + 213);
    unsigned int v7 = *(unsigned __int16 *)(a2 + 54);
    if (v6 == 2) {
      unsigned int v8 = 12;
    }
    else {
      unsigned int v8 = 10;
    }
    if (v7 > v8)
    {
      *(unsigned char *)(a1 + 188) = *(unsigned char *)(v4 + 5);
      *(unsigned char *)(a1 + 212) |= 1u;
      ++*(_DWORD *)(a1 + 576);
      iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0xFu);
      unsigned int v9 = iAP2PacketCalcSeqGap(*(unsigned char *)(a1 + 191), *(unsigned char *)(a1 + 188));
      unsigned int v10 = v9;
      uint64_t v11 = *(unsigned __int8 *)(a1 + 420);
      if (!*(unsigned char *)(a1 + 420)) {
        goto LABEL_60;
      }
      char v12 = 0;
      char v13 = (unsigned __int8 *)(a1 + 440);
      uint64_t v14 = (unsigned __int8 *)(a1 + 440);
      do
      {
        int v15 = *v14;
        v14 += 4;
        if (v15 == *(unsigned __int8 *)(*(void *)(a2 + 64) + 7)) {
          char v12 = v13;
        }
        char v13 = v14;
        --v11;
      }
      while (v11);
      if (v12 && v12[3]) {
        int v16 = 1;
      }
      else {
LABEL_60:
      }
        int v16 = 0;
      if (*(unsigned __int8 *)(*(void *)(a1 + 8) + 10) >= 5u)
      {
        int v43 = v9 ? 0 : v16;
        if (((char)v9 > 0 || v43) && !iAP2LinkIsNoRetransmit(a1 + 410))
        {
          if (v10 < *(unsigned __int8 *)(a1 + 413)) {
            char v44 = 1;
          }
          else {
            char v44 = v16;
          }
          if ((v44 & 1) == 0)
          {
            uint64_t ACKPacket = (uint64_t *)iAP2PacketCreateACKPacket(a1, *(unsigned char *)(a1 + 190), *(unsigned char *)(a1 + 188), 0, 0, 0);
            ++*(_DWORD *)(a1 + 588);
            _iAP2LinkSendPacketCommon(a1, (uint64_t)ACKPacket, 0, 0);
            iAP2PacketRelease(ACKPacket);
          }
        }
      }
      goto LABEL_89;
    }
    int v39 = v6 == 2 ? 10 : 9;
    if (v7 == v39)
    {
      ++*(_DWORD *)(a1 + 572);
      __int16 v48 = *(_WORD *)(a1 + 408);
      long long v40 = *(_OWORD *)(a1 + 392);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a1 + 376);
      long long v47 = v40;
      *(_OWORD *)unsigned int v46 = *(_OWORD *)(a1 + 360);
      v46[1] = v46[11];
      *(_WORD *)&_DWORD v46[4] = *(_WORD *)&v46[12];
      uint64_t v41 = *(void *)(a1 + 8);
      if (*(unsigned __int8 *)(v41 + 10) <= 4u)
      {
        if (!iAP2LinkIsValidSynParam(v46, *(unsigned __int8 *)(a1 + 215), *(void *)(a1 + 352) + 14, *(void *)(a1 + 352) + 19)|| *(unsigned __int16 *)&v46[4] > *(unsigned __int16 *)(*(void *)(a1 + 352) + 12))
        {
          uint64_t v41 = *(void *)(a1 + 8);
          unsigned int v42 = 22;
LABEL_88:
          iAP2FSMHandleEvent((uint64_t *)v41, v42);
LABEL_89:
          iAP2LinkSignalSendBuffCB(a1);
          return 1;
        }
        uint64_t v41 = *(void *)(a1 + 8);
      }
      unsigned int v42 = 21;
      goto LABEL_88;
    }
  }
LABEL_42:
  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0;
  }
  if (gLogObjects && gNumLogObjects >= 20)
  {
    int v30 = *(NSObject **)(gLogObjects + 152);
  }
  else
  {
    int v30 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v31)
  {
    int v33 = *(unsigned __int8 *)(v4 + 4);
    int v34 = *(unsigned __int8 *)(v4 + 5);
    int v35 = *(unsigned __int8 *)(a1 + 190);
    int v36 = *(unsigned __int8 *)(a1 + 189);
    int v37 = *(unsigned __int8 *)(a1 + 188);
    int v38 = *(unsigned __int8 *)(a1 + 191);
    *(_DWORD *)unsigned int v46 = 136316930;
    *(void *)&_DWORD v46[4] = "iAP2LinkProcessInOrderPacket";
    *(_WORD *)&v46[12] = 1024;
    *(_DWORD *)&v46[14] = 5304;
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = v33;
    *(_WORD *)&v46[24] = 1024;
    *(_DWORD *)&v46[26] = v34;
    *(_WORD *)&v46[30] = 1024;
    LODWORD(v47) = v35;
    WORD2(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 6) = v36;
    WORD5(v47) = 1024;
    HIDWORD(v47) = v37;
    __int16 v48 = 1024;
    int v49 = v38;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Received Invalid Packet (control=0x%x seq=%u sentSeq=%u recvAck=%u recvSeq=%u sentAck=%u)", v46, 0x36u);
    return 0;
  }
  return result;
}

void iAP2LinkHandleSuspend(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    unsigned int v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    unsigned int v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2LinkHandleSuspend_cold_1();
  }
  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 184) == 1) {
      iAP2FSMHandleEvent(v4, 0x1Bu);
    }
  }
}

void iAP2LinkHandleResume(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    unsigned int v3 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    unsigned int v3 = *(NSObject **)(gLogObjects + 152);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2LinkHandleResume_cold_1();
  }
  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 184) == 1) {
      iAP2FSMHandleEvent(v4, 0x1Cu);
    }
  }
}

uint64_t _iAP2LinkSendPacketCommon(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a1 && a2)
  {
    unsigned int v8 = *(unsigned char **)(a2 + 64);
    ++*(_DWORD *)(a1 + 524);
    *(_DWORD *)(a1 + 516) += *(unsigned __int16 *)(a2 + 54);
    if ((v8[4] & 0x40) != 0)
    {
      int v9 = v8[6];
      int v10 = *(unsigned __int8 *)(a1 + 188);
      if (v9 != v10)
      {
        v8[6] = v10;
        LOBYTE(v9) = v10;
      }
      *(unsigned char *)(a1 + 191) = v9;
      *(unsigned char *)(a1 + 212) |= 8u;
    }
    int CurTimeMs = iAP2TimeGetCurTimeMs();
    if (a3)
    {
      v12.i32[1] = 1;
      v12.i32[0] = CurTimeMs - *(_DWORD *)(a2 + 48);
      *(int32x2_t *)(a1 + 596) = vadd_s32(v12, *(int32x2_t *)(a1 + 596));
    }
    *(_DWORD *)(a2 + 48) = CurTimeMs;
    if ((v8[4] & 0x40) != 0)
    {
      iAP2TimeCancelTimer(*(unsigned int **)(a1 + 200), *(unsigned char *)(a1 + 194));
      *(unsigned char *)(a1 + 194) = -1;
    }
    if (a4) {
      iAP2LinkSendPacketWaitCB(a1, a2);
    }
    else {
      iAP2LinkSendPacketCB(a1, a2);
    }
    BOOL IsNoRetransmit = iAP2LinkIsNoRetransmit(a1 + 410);
    if (a3)
    {
      if (!IsNoRetransmit)
      {
        int v15 = iAP2TimeCallbackAfter(*(void *)(a1 + 200), 12, *(unsigned __int16 *)(a1 + 416));
        iAP2PacketAssignTimer((unsigned int *)a2, v15);
      }
      return 1;
    }
    if (!IsNoRetransmit && iAP2PacketRequireACK((uint64_t *)a2))
    {
      *(void *)int v30 = a2;
      char v17 = *(unsigned __int8 **)(a1 + 296);
      unsigned int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v17);
      if (iAP2LinkAddPacketAfter(v17, LastItemIndex, (uint64_t *)v30) == 255)
      {
        if (_iAP2LogEnableMask)
        {
          unsigned int v22 = logObjectForModule_24();
          BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v23) {
            goto LABEL_31;
          }
          if (*(_DWORD *)(a1 + 184)) {
            char v24 = "Device";
          }
          else {
            char v24 = "Accessory";
          }
          int v25 = v8[5];
          int v26 = v8[4];
          long long v27 = iAP2PacketName(a2);
          int v28 = v8[6];
          int v29 = *(unsigned __int16 *)(a2 + 54);
          *(_DWORD *)int v30 = 136317186;
          *(void *)&v30[4] = v24;
          __int16 v31 = 2080;
          *(void *)unsigned int v32 = "_iAP2LinkSendPacketCommon";
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)int v33 = 5457;
          *(_WORD *)&v33[4] = 1024;
          int v34 = v25;
          __int16 v35 = 1024;
          int v36 = v26;
          __int16 v37 = 2080;
          int v38 = v27;
          __int16 v39 = 1024;
          int v40 = v28;
          __int16 v41 = 1024;
          int v42 = v29;
          __int16 v43 = 1024;
          int v44 = a4;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%s:%d FAILED to add packet to sendPckList, sentSeq(%u) control=%xh(%s) ack=%u len=%u bWaitSend=%d", v30, 0x44u);
        }
        uint64_t result = 0;
        goto LABEL_31;
      }
      int v19 = iAP2TimeCallbackAfter(*(void *)(a1 + 200), 12, *(unsigned __int16 *)(a1 + 416));
      iAP2PacketAssignTimer((unsigned int *)a2, v19);
    }
    uint64_t result = 1;
LABEL_31:
    *(unsigned char *)(a1 + 190) = v8[5];
    *(unsigned char *)(a1 + 212) |= 4u;
    return result;
  }
  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0;
  }
  if (gLogObjects) {
    BOOL v13 = gNumLogObjects < 20;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unsigned int v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }
  else
  {
    unsigned int v20 = *(NSObject **)(gLogObjects + 152);
  }
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v21)
  {
    *(_DWORD *)int v30 = 136315906;
    *(void *)&v30[4] = "_iAP2LinkSendPacketCommon";
    __int16 v31 = 1024;
    *(_DWORD *)unsigned int v32 = 5510;
    *(_WORD *)&void v32[4] = 1024;
    *(_DWORD *)&v32[6] = (unsigned __int16)a1;
    *(_WORD *)int v33 = 1024;
    *(_DWORD *)&v33[2] = (unsigned __int16)a2;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "ERROR: %s:%d Invalid link(%hx) or packet(%hx)", v30, 0x1Eu);
    return 0;
  }
  return result;
}

uint64_t iAP2LinkSendPacketWaitSend(uint64_t a1, uint64_t a2, int a3)
{
  return _iAP2LinkSendPacketCommon(a1, a2, a3, 1);
}

uint64_t iAP2LinkAddPacketAfter(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  iAP2PacketRetain(*a3);
  uint64_t v6 = iAP2ListArrayAddItemAfter(a1, a2, a3);
  if (v6 == 255) {
    iAP2PacketRelease((uint64_t *)*a3);
  }
  return v6;
}

void iAP2LinkHandleTimeout(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    iAP2LinkHandleTimeout_cold_1();
  }
  unsigned int v3 = *(uint64_t **)(a1 + 8);

  iAP2FSMHandleEvent(v3, a3);
}

uint64_t iAP2LinkGetSessionForService(uint64_t a1, int a2)
{
  if (a1 && (uint64_t v2 = *(unsigned __int8 *)(a1 + 420), *(unsigned char *)(a1 + 420)))
  {
    unsigned __int8 v3 = 0;
    uint64_t v4 = (unsigned __int8 *)(a1 + 441);
    do
    {
      if (*v4 == a2) {
        unsigned __int8 v3 = *(v4 - 1);
      }
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t iAP2LinkGetMainTimer(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

void iAP2LinkRegisterEventCallback(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    if (a2 <= 8 && a3)
    {
      uint64_t v5 = a1 + a2;
      unsigned int v8 = *(unsigned __int8 *)(v5 + 160);
      uint64_t v6 = (unsigned char *)(v5 + 160);
      uint64_t v7 = v8;
      if (v8 <= 1)
      {
        *(void *)(a1 + 16 * a2 + 8 * v7 + 16) = a3;
        unsigned char *v6 = v7 + 1;
        return;
      }
      if (_iAP2LogEnableMask)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v10 = *(NSObject **)(gLogObjects + 152);
        }
        else
        {
          int v10 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 136315906;
          int v15 = "iAP2LinkRegisterEventCallback";
          __int16 v16 = 1024;
          int v17 = 5970;
          __int16 v18 = 1024;
          unsigned int v19 = a2;
          __int16 v20 = 1024;
          BOOL v21 = v7;
          int32x2_t v12 = "ERROR: %s%d Too many registrations for event(%d)! current %d";
          BOOL v13 = v10;
          goto LABEL_24;
        }
      }
    }
    else if (_iAP2LogEnableMask)
    {
      if (!gLogObjects || gNumLogObjects < 20)
      {
        uint64_t v11 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }
      else
      {
        uint64_t v11 = *(NSObject **)(gLogObjects + 152);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315906;
        int v15 = "iAP2LinkRegisterEventCallback";
        __int16 v16 = 1024;
        int v17 = 5975;
        __int16 v18 = 1024;
        unsigned int v19 = a2;
        __int16 v20 = 1024;
        BOOL v21 = a3 != 0;
        int32x2_t v12 = "ERROR: %s%d Unknown event(%d) or no eventCB(%d)!";
        BOOL v13 = v11;
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 0x1Eu);
      }
    }
  }
}

uint64_t iAP2LinkSetUseiAP2LinkRunLoop(uint64_t result)
{
  *(unsigned char *)(result + 212) |= 0x10u;
  return result;
}

void *iAP2LinkCheckNegotiation(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 184) == 1)
  {
    if ((iAP2LinkValidateSynParam(a1, a2) & 1) == 0) {
      iAP2LinkEventNotify(a1, 3, (uint64_t)a2);
    }
  }
  else if ((*(unsigned char *)(a1 + 212) & 0x40) != 0)
  {
    iAP2LinkValidateSynParam(a1, a2);
    if ((*(unsigned char *)(a1 + 212) & 0x40) == 0) {
      goto LABEL_29;
    }
  }
  uint64_t v4 = (unsigned char *)(a1 + 360);
  if (iAP2LinkIsNoRetransmit(a1 + 360) && !iAP2LinkIsNoRetransmit((uint64_t)a2))
  {
    *(_WORD *)(a1 + 361) = 7681;
    *(_DWORD *)(a1 + 364) = 65601535;
    *(_WORD *)(a1 + 368) = 10;
    *(unsigned char *)(a1 + 363) = 0;
  }
  unsigned int v5 = *a2;
  if (*v4 > v5)
  {
    if ((_iAP2LogEnableMask & 2) != 0)
    {
      uint64_t v6 = gLogObjects;
      int v7 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v8 = *(NSObject **)(gLogObjects + 152);
      }
      else
      {
        unsigned int v8 = &_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          int v16 = 134218240;
          int v17 = (const char *)v6;
          __int16 v18 = 1024;
          int v19 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d", (uint8_t *)&v16, 0x12u);
          unsigned int v5 = *a2;
        }
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = *v4;
        int v16 = 136315906;
        int v17 = "iAP2LinkCheckNegotiation";
        __int16 v18 = 1024;
        int v19 = 6390;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 1024;
        unsigned int v23 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s:%d Older protocol Version detected on the accessory (%d->%d)", (uint8_t *)&v16, 0x1Eu);
        LOBYTE(v5) = *a2;
      }
    }
    unsigned char *v4 = v5;
  }
  unsigned int v10 = a2[2];
  if (*(unsigned __int8 *)(a1 + 362) > v10) {
    *(unsigned char *)(a1 + 362) = v10;
  }
  unsigned int v11 = a2[3];
  if (*(unsigned __int8 *)(a1 + 363) > v11) {
    *(unsigned char *)(a1 + 363) = v11;
  }
  unsigned int v12 = *((unsigned __int16 *)a2 + 3);
  if (*(unsigned __int16 *)(a1 + 366) > v12) {
    *(_WORD *)(a1 + 366) = v12;
  }
  unsigned int v13 = *((unsigned __int16 *)a2 + 4);
  if (*(unsigned __int16 *)(a1 + 368) > v13) {
    *(_WORD *)(a1 + 368) = v13;
  }
  if (iAP2LinkIsNoRetransmit((uint64_t)a2)) {
    *(unsigned char *)(a1 + 361) = a2[1];
  }
LABEL_29:
  *(unsigned char *)(a1 + 371) = a2[1];
  *(_WORD *)(a1 + 372) = *((_WORD *)a2 + 2);
  if (*(_DWORD *)(a1 + 184) == 1)
  {
    *(unsigned char *)(a1 + 384) = a2[24];
    if (a2[24])
    {
      unint64_t v14 = 0;
      do
      {
        *(unsigned char *)(a1 + 385 + v14) = a2[v14 + 25];
        ++v14;
      }
      while (v14 < a2[24]);
    }
  }
  *(unsigned char *)(a1 + 370) = a2[10];
  return memcpy((void *)(a1 + 390), a2 + 30, 4 * a2[10]);
}

unint64_t _GetRecvPckFirstItem(uint64_t a1, unsigned char *a2)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 288));
  *a2 = FirstItemIndex;
  unint64_t result = iAP2ListArrayItemForIndex(*(void *)(a1 + 288), FirstItemIndex);
  if (result) {
    return *(void *)result;
  }
  return result;
}

unint64_t _GetRecvPckNextItem(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unsigned int NextItemIndex = iAP2ListArrayGetNextItemIndex(*(void *)(a1 + 288), a2);
  *a3 = NextItemIndex;
  unint64_t result = iAP2ListArrayItemForIndex(*(void *)(a1 + 288), NextItemIndex);
  if (result) {
    return *(void *)result;
  }
  return result;
}

unint64_t _iAP2LinkComparePacketSeq(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned __int8 v3 = *(void **)a2;
  LODWORD(result) = iAP2PacketCalcSeqGap(*(unsigned char *)(*(void *)(*a1 + 64) + 5), *(unsigned char *)(*(void *)(*(void *)a2 + 64) + 5));
  if (*(void *)v2 != *v3) {
    _iAP2LinkComparePacketSeq_cold_1();
  }
  if (!result) {
    return 0;
  }
  if (result <= *(unsigned __int8 *)(*(void *)v2 + 421)) {
    return result;
  }
  return result | 0xFFFFFFFFFFFFFF00;
}

uint64_t *_DeletePckCB(uint64_t *result)
{
  if (result)
  {
    unint64_t result = (uint64_t *)*result;
    if (result) {
      return iAP2PacketRelease(result);
    }
  }
  return result;
}

unint64_t _ComparePckTimerIdCB(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 != 8 || ((uint64_t v3 = *a2, *(void *)a1) ? (v4 = v3 == 0) : (v4 = 1), v4)) {
    _ComparePckTimerIdCB_cold_1();
  }
  return *(unsigned __int8 *)(*(void *)a1 + 59) - (unint64_t)*(unsigned __int8 *)(v3 + 59);
}

void OUTLINED_FUNCTION_9_6(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void *acm_mem_alloc_data(size_t size)
{
  unint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    _allocatedMem_2 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = _allocatedMem_2 - __n;
    if (_allocatedMem_2 < __n) {
      uint64_t v4 = 0;
    }
    _allocatedMem_2 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    _allocatedMem_0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      int v7 = result;
    }
    else {
      int v7 = "NULL";
    }
    if (a4) {
      unsigned int v8 = a4;
    }
    else {
      unsigned int v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, _allocatedMem_0, 0, _allocatedMem_2, _allocatedMem_3, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = _allocatedMem_0 - a3;
    if (_allocatedMem_0 < a3) {
      uint64_t v6 = 0;
    }
    _allocatedMem_0 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    int v7 = "NULL";
    if (result) {
      unsigned int v8 = result;
    }
    else {
      unsigned int v8 = "NULL";
    }
    if (a4) {
      int v9 = a4;
    }
    else {
      int v9 = "NULL";
    }
    if (a6) {
      int v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, _allocatedMem_0, 0, _allocatedMem_2, _allocatedMem_3, v9, a5, v7);
  }
  return result;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  int v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  unsigned int v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  }
  uint64_t v17 = 0x2000;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      unint64_t v14 = v18;
    }
    else {
      unint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(v3 + 16))(v3, v14);
  }
  if (v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v15 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  }
  return v13;
}

uint64_t ioKitTransport(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (_logLevel <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    int v19 = "ACMLib";
    __int16 v20 = 2080;
    int v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = init();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = performCommand(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= _logLevel && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    int v19 = "ACMLib";
    __int16 v20 = 2080;
    int v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t init()
{
  if (_logLevel <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    int v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (_initialized)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&_connect);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    _initialized = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= _logLevel && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    int v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t performCommand(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (_logLevel <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v25 = "ACMLib";
    __int16 v26 = 2080;
    long long v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    unsigned int v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(_connect, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (_logLevel <= 0x46u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          int v25 = "ACMLib";
          __int16 v26 = 2080;
          long long v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)int v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&void v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (_logLevel <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          int v25 = "ACMLib";
          __int16 v26 = 2080;
          long long v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)int v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&void v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    rsize_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= _logLevel && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v25 = "ACMLib";
    __int16 v26 = 2080;
    long long v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)int v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMKernelControl(int a1)
{
  if (_logLevel <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)ioKitTransport);
  if (v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= _logLevel && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  int v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)int v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v13 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    unsigned int v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    _DWORD *v15 = a3;
    size_t v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      size_t v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4)) {
      LibCall_ACMKernelControl_cold_1();
    }
    uint64_t v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if (v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  }
  return v17;
}

void LibCall_ACMKernelControl_cold_1()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

uint64_t ccder_encode_extension(const void *a1, unint64_t a2, const void *a3, unint64_t a4, int a5, uint64_t *a6)
{
  unint64_t v12 = ccder_sizeof_extension(a2, a4, a5);
  uint64_t v13 = a6[1];
  if (v13 - *a6 < v12) {
    return 0;
  }
  uint64_t result = ccder_blob_encode_body_tl(a6, 4uLL, a2, a1);
  if (!result) {
    return 0;
  }
  if (a5)
  {
    uint64_t v15 = a6[1];
    if (!v15)
    {
      __break(0x5513u);
      return result;
    }
    a6[1] = v15 - 1;
    *(unsigned char *)(v15 - 1) = -1;
    if (!ccder_blob_encode_tl(a6, 1uLL, 1uLL)) {
      return 0;
    }
  }
  if (!ccder_blob_encode_body_tl(a6, 6uLL, a4, a3)) {
    return 0;
  }
  unint64_t v16 = v13 - a6[1];

  return ccder_blob_encode_tl(a6, 0x2000000000000010uLL, v16);
}

uint64_t ccder_sizeof_extension(unint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = ccder_sizeof(4, a1);
  uint64_t v6 = ccder_sizeof(6, a2);
  if (a3) {
    uint64_t result = ccder_sizeof(1, 1uLL);
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v8 = result + v6;
  if (__CFADD__(result, v6) || __CFADD__(v8, v5))
  {
    __break(0x5500u);
  }
  else
  {
    return ccder_sizeof(0x2000000000000010, v8 + v5);
  }
  return result;
}

uint64_t CTDecompressComputeBufferSize(unint64_t a1, unint64_t a2, unsigned char *a3)
{
  return CTDecompressGeneric(a1, a2, a3, 0, 0);
}

uint64_t CTDecompressGeneric(unint64_t a1, unint64_t a2, unsigned char *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = 393217;
  if (a1 && a2)
  {
    int v92 = a3;
    if ((uint64_t)a2 <= 0) {
      goto LABEL_241;
    }
    int v11 = *(unsigned __int8 *)a1;
    *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v91 = ~a4;
    if (~a4 < a5) {
      goto LABEL_242;
    }
    unint64_t v12 = a4 + a5;
    if (a4 + a5 < a4) {
      goto LABEL_241;
    }
    *(void *)&long long v94 = a4;
    *((void *)&v94 + 1) = a4 + a5;
    if (a4) {
      uint64_t v13 = (uint64_t *)&v94;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v93 = 0;
    if ((v11 - 2) >= 2 && (v11 - 162) >= 2)
    {
      int v90 = v13;
      unint64_t v20 = 0;
    }
    else
    {
      *(void *)int v99 = 0;
      *(void *)&v98[0] = 0;
      uint64_t Signature = CTDecompressGetSignature(v11, a1, a2, (unint64_t *)v98, (unsigned __int8 **)v99);
      if (Signature) {
        return Signature;
      }
      unint64_t v15 = CTNonVariableCompressedSizeForStyle(v11);
      unint64_t v16 = a2 - v15;
      if (a2 < v15 || (unint64_t v5 = v16 - *(void *)v99, v16 < *(void *)v99))
      {
        __break(0x5515u);
        goto LABEL_205;
      }
      int v90 = v13;
      if (__CFADD__(*(void *)&v98[0], *(void *)v99)) {
        goto LABEL_242;
      }
      uint64_t v17 = (const void *)(*(void *)&v98[0] + *(void *)v99);
      if (!((uint64_t)(*(void *)&v98[0] + *(void *)v99 - a1) >= 0
           ? *(void *)&v98[0] + *(void *)v99 >= a1
           : *(void *)&v98[0] + *(void *)v99 < a1))
        goto LABEL_242;
      unint64_t v19 = ccder_sizeof_extension(v5, 0xAuLL, 0);
      unint64_t v20 = v19;
      if (a4)
      {
        if (*((void *)&v94 + 1) - (void)v94 < v19) {
          return 393220;
        }
        if (a1 + a2 < (unint64_t)v17 || (unint64_t)v17 < a1 || v5 > a1 + a2 - (unint64_t)v17) {
          goto LABEL_241;
        }
        if ((ccder_encode_extension(v17, v5, &CTOidAppleMFI4AccessoryData, 0xAuLL, 0, (uint64_t *)&v94) & 1) == 0) {
          return 393220;
        }
      }
    }
    if (v11 > 160)
    {
      if (v11 != 163 && v11 != 161) {
        goto LABEL_45;
      }
    }
    else if (v11 != 1 && v11 != 3)
    {
LABEL_45:
      if ((v11 - 4) < 2 || (v11 - 164) < 2) {
        goto LABEL_47;
      }
      unint64_t v28 = ccder_sizeof_extension(0x20uLL, 0xAuLL, 1);
      uint64_t v29 = 72;
      if ((~v11 & 0xA0) == 0) {
        uint64_t v29 = 70;
      }
      uint64_t Signature = 393217;
      if ((v29 | 0x20uLL) > a2) {
        return Signature;
      }
      unint64_t v5 = v28;
      if (!a4)
      {
        if (__CFADD__(a1, v29)) {
          goto LABEL_242;
        }
LABEL_95:
        BOOL v23 = __CFADD__(v20, v5);
        v20 += v5;
        if (v23) {
          goto LABEL_246;
        }
LABEL_47:
        a3 = &leaf_5280_extensions_template;
        if (v11 > 159)
        {
          if ((v11 - 160) < 4)
          {
            int v25 = 0;
            __int16 v26 = &ca_5280_extensions_template;
            unint64_t v27 = 33;
            unint64_t v5 = 102;
            goto LABEL_65;
          }
          unsigned int v24 = v11 - 164;
        }
        else
        {
          unsigned int v24 = v11 - 4;
          if (v11 < 4)
          {
            int v25 = 0;
            __int16 v26 = &ca_5280_extensions_template;
            unint64_t v27 = 33;
            unint64_t v5 = 104;
            goto LABEL_65;
          }
        }
        uint64_t Signature = 393218;
        if (v24 >= 2) {
          return Signature;
        }
        a3 = &ca_5280_extensions_template;
        __int16 v26 = &CTOidAppleMFI4ProductPlanUID;
        int v25 = 1;
        unint64_t v27 = 97;
        unint64_t v5 = 78;
LABEL_65:
        uint64_t Signature = 393217;
        if (v5 + 20 > a2) {
          return Signature;
        }
        if (a4)
        {
          unint64_t v30 = v94;
          if (*((void *)&v94 + 1) - (void)v94 < v27) {
            return 393220;
          }
          int v87 = v25;
          if ((unint64_t)v94 > *((void *)&v94 + 1)) {
            goto LABEL_241;
          }
          v98[0] = v94;
          BOOL v23 = v26 >= a3;
          unint64_t v36 = v26 - a3;
          if (!v23 || v27 > v36) {
            goto LABEL_241;
          }
          unint64_t v81 = v27;
          unint64_t v84 = *((void *)&v94 + 1);
          if (!ccder_blob_encode_body(&v94, v27, a3)) {
            return 393226;
          }
          if (v87)
          {
            unint64_t v96 = 0xAAAAAAAAAAAAAAAALL;
            unint64_t v97 = 0xAAAAAAAAAAAAAAAALL;
            if (v84 >= 0xFFFFFFFFFFFFFFD1) {
              goto LABEL_242;
            }
            if (v84 < 0x2F || v30 > v84 - 47) {
              goto LABEL_241;
            }
            unint64_t v96 = v30;
            unint64_t v97 = v84 - 47;
            if (__CFADD__(a1, v5)) {
              goto LABEL_242;
            }
            a3 = (unsigned char *)(a1 + v5);
            if (a1 + v5 < a1 || a2 - v5 < 0x14) {
              goto LABEL_241;
            }
            if (!ccder_blob_encode_body(&v96, 0x14uLL, a3)) {
              return 393226;
            }
            unint64_t v5 = v30;
            memset(v99, 170, 20);
            uint64_t Signature = CTDecompressCAComputeSKID(a1, a2, (uint64_t)v99);
            if (Signature) {
              return Signature;
            }
            if (v5 > v84 - 16) {
              goto LABEL_241;
            }
            v95[0] = v5;
            v95[1] = v84 - 16;
            __int16 v37 = v95;
            a3 = v99;
          }
          else
          {
            if (__CFADD__(a1, v5)) {
              goto LABEL_242;
            }
            a3 = (unsigned char *)(a1 + v5);
            if (a1 + v5 < a1 || a2 - v5 < 0x14) {
              goto LABEL_241;
            }
            __int16 v37 = v98;
          }
          if (!ccder_blob_encode_body(v37, 0x14uLL, a3)) {
            return 393226;
          }
          if (__CFADD__(v20, v81)) {
            goto LABEL_246;
          }
          if ((ccder_blob_encode_tl((uint64_t *)&v94, 0x2000000000000010uLL, v20 + v81) & 1) == 0) {
            return 393220;
          }
          unint64_t v33 = ccder_sizeof(0x2000000000000010, v20 + v81);
          if ((ccder_blob_encode_tl((uint64_t *)&v94, 0xA000000000000003, v33) & 1) == 0) {
            return 393220;
          }
        }
        else
        {
          BOOL v23 = __CFADD__(v20, v27);
          unint64_t v32 = v20 + v27;
          if (v23) {
            goto LABEL_246;
          }
          unint64_t v33 = ccder_sizeof(0x2000000000000010, v32);
        }
        unint64_t v5 = ccder_sizeof(0xA000000000000003, v33);
        uint64_t v93 = v5;
        if (v11 > 159)
        {
          if ((v11 - 160) < 4)
          {
            unint64_t v35 = 37;
            goto LABEL_110;
          }
          unsigned int v34 = v11 - 164;
        }
        else
        {
          unsigned int v34 = v11 - 4;
          if (v11 < 4)
          {
            unint64_t v35 = 39;
            goto LABEL_110;
          }
        }
        uint64_t Signature = 393218;
        if (v34 >= 2) {
          return Signature;
        }
        unint64_t v35 = 45;
LABEL_110:
        uint64_t Signature = 393217;
        if (v35 + 33 > a2) {
          return Signature;
        }
        if (a4 && *((void *)&v94 + 1) - (void)v94 < 0x5BuLL) {
          return 393220;
        }
        unint64_t v38 = ~a1;
        if (v35 > ~a1) {
          goto LABEL_242;
        }
        unint64_t v39 = a1 + v35;
        if (v39 < a1) {
          goto LABEL_241;
        }
        unint64_t v88 = a1 + a2;
        if (a1 + a2 - v39 <= 0x20) {
          goto LABEL_241;
        }
        *(void *)&v98[0] = v39;
        *((void *)&v98[0] + 1) = 33;
        char v102 = -86;
        *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v101 = v40;
        *(_OWORD *)&v99[16] = v40;
        long long v100 = v40;
        *(_OWORD *)int v99 = v40;
        uint64_t Signature = decompressECPublicKey((uint64_t)v98, (int **)&CTOidSECP256r1, v99, 65);
        if (Signature) {
          return Signature;
        }
        if (a4)
        {
          uint64_t Signature = 393226;
          if (!ccder_blob_encode_body(&v94, 0x41uLL, v99) || !ccder_blob_encode_body(&v94, 0x1AuLL, &spki_template)) {
            return Signature;
          }
        }
        uint64_t v93 = 91;
        unint64_t v41 = v5 + 91;
        uint64_t Signature = 393218;
        if (v5 >= 0xFFFFFFFFFFFFFFA5) {
          goto LABEL_246;
        }
        if (v11 > 159)
        {
          if ((v11 - 160) < 4)
          {
            a3 = &attestation_leaf_subject;
            int v42 = &attestation_ca_subject;
            uint64_t v43 = 14;
            uint64_t v44 = 64;
            unint64_t v45 = 164;
            unint64_t v5 = 37;
            uint64_t v46 = 33;
            goto LABEL_131;
          }
          if ((v11 - 164) >= 2) {
            return Signature;
          }
          a3 = &attestation_ca_subject;
          int v42 = &root_subject;
          uint64_t v43 = 58;
          unint64_t v45 = 108;
        }
        else
        {
          if (v11 < 4)
          {
            a3 = &mfi_leaf_subject;
            int v42 = &mfi_ca_subject;
            uint64_t v43 = 17;
            uint64_t v44 = 32;
            unint64_t v45 = 119;
            unint64_t v5 = 1;
            uint64_t v46 = 16;
            goto LABEL_131;
          }
          if ((v11 - 4) >= 2) {
            return Signature;
          }
          a3 = &mfi_ca_subject;
          int v42 = &attestation_leaf_subject;
          uint64_t v43 = 57;
          unint64_t v45 = 107;
        }
        unint64_t v5 = 37;
        uint64_t v46 = 8;
        uint64_t v44 = 8;
LABEL_131:
        uint64_t Signature = 393217;
        if (v5 + v46 > a2) {
          return Signature;
        }
        if (a4)
        {
          unint64_t v47 = v94;
          if (*((void *)&v94 + 1) - (void)v94 < v45) {
            return 393220;
          }
          uint64_t v82 = v43;
          size_t v85 = v46;
          unint64_t v80 = v44;
          unint64_t v78 = v41;
          if ((unint64_t)v94 > *((void *)&v94 + 1) || a3 > v42 || v45 > v42 - a3) {
            goto LABEL_241;
          }
          unint64_t v79 = *((void *)&v94 + 1);
          unint64_t v77 = v45;
          if (!ccder_blob_encode_body(&v94, v45, a3)) {
            return 393226;
          }
          if (__CFADD__(*((void *)&v94 + 1), v82)) {
            goto LABEL_242;
          }
          uint64_t v83 = (char *)(*((void *)&v94 + 1) + v82);
          BOOL v48 = (uint64_t)&v83[-v47] >= 0 ? (unint64_t)v83 >= v47 : (unint64_t)v83 < v47;
          if (!v48 || v5 > v38) {
            goto LABEL_242;
          }
          int v49 = (const void *)(a1 + v5);
          if (a1 + v5 < a1
            || (unint64_t)v83 > v79
            || v47 > (unint64_t)v83
            || v80 > v79 - (unint64_t)v83
            || (unint64_t)v49 > v88
            || v85 > v88 - (unint64_t)v49)
          {
            goto LABEL_241;
          }
          if (v11 > 159)
          {
            if ((v11 - 160) < 4)
            {
              unint64_t v96 = a1 + v5;
              unint64_t v97 = v85;
              char v102 = -86;
              *(void *)&long long v53 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
              long long v101 = v53;
              *(_OWORD *)&v99[16] = v53;
              long long v100 = v53;
              *(_OWORD *)int v99 = v53;
              uint64_t Signature = decompressECPublicKey((uint64_t)&v96, (int **)&CTOidSECP256r1, v99, 65);
              if (Signature) {
                goto LABEL_157;
              }
              int v54 = ccsha256_di();
              memset(v98, 0, sizeof(v98));
              ccdigest((uint64_t)v54, 0x41uLL, v99, (uint64_t)v98);
              BOOL v51 = v98;
              uint64_t v52 = 32;
LABEL_156:
              uint64_t Signature = CTConvertByteArrayToAsciiHex((unint64_t)v51, v52, v83, v80);
LABEL_157:
              unint64_t v45 = v77;
              unint64_t v41 = v78;
              if (Signature) {
                return Signature;
              }
              goto LABEL_163;
            }
            unsigned int v50 = v11 - 164;
          }
          else
          {
            unsigned int v50 = v11 - 4;
            if (v11 < 4)
            {
              BOOL v51 = (_OWORD *)(a1 + v5);
              uint64_t v52 = v85;
              goto LABEL_156;
            }
          }
          uint64_t Signature = 393218;
          if (v50 >= 2) {
            return Signature;
          }
          if (v85 > v80) {
            goto LABEL_241;
          }
          memcpy(v83, v49, v85);
          unint64_t v45 = v77;
          unint64_t v41 = v78;
        }
LABEL_163:
        uint64_t v93 = v45;
        if (__CFADD__(v41, v45)) {
          goto LABEL_246;
        }
        unint64_t v86 = v41 + v45;
        if (v11 > 159)
        {
          if ((v11 - 160) < 4)
          {
LABEL_170:
            __int16 v59 = 0;
            int v58 = 0;
            char v56 = 1;
            unint64_t v5 = 9;
            unint64_t v57 = 23;
LABEL_171:
            if (v5 + 14 > a2) {
              return 393217;
            }
            uint64_t Signature = 393217;
            if (v57 + 14 <= a2)
            {
              if (v5 > v38) {
                goto LABEL_242;
              }
              if (v56)
              {
                if (v57 > v38) {
                  goto LABEL_242;
                }
                unint64_t v60 = a1 + v57;
                __int16 v59 = (const char *)(a1 + a2);
                int v58 = (void *)a1;
              }
              else
              {
                unint64_t v60 = (unint64_t)v58;
              }
              *(void *)int v99 = 0;
              if (v60 <= (unint64_t)v59 && (unint64_t)v58 <= v60 && (uint64_t)&v59[-v60] > 13)
              {
                uint64_t Signature = CTDecompressDate(v60, v90, (unint64_t *)v99);
                if (Signature) {
                  return Signature;
                }
                unint64_t v61 = a1 + v5;
                if (a1 + v5 >= a1 && (uint64_t)(v88 - v61) >= 14)
                {
                  uint64_t v62 = *(void *)v99;
                  uint64_t Signature = CTDecompressDate(v61, v90, (unint64_t *)v99);
                  if (Signature) {
                    return Signature;
                  }
                  unint64_t v63 = v62 + *(void *)v99;
                  if (__CFADD__(v62, *(void *)v99)) {
                    goto LABEL_246;
                  }
                  if (a4
                    && (ccder_blob_encode_tl((uint64_t *)&v94, 0x2000000000000010uLL, v62 + *(void *)v99) & 1) == 0)
                  {
                    return 393220;
                  }
                  uint64_t v93 = ccder_sizeof(0x2000000000000010, v63);
                  unint64_t v64 = v86 + v93;
                  if (__CFADD__(v86, v93)) {
                    goto LABEL_246;
                  }
                  uint64_t Signature = CTDecompressIssuer(v11, a1, a2, (unint64_t *)v90, (unint64_t *)&v93);
                  if (Signature) {
                    return Signature;
                  }
                  BOOL v23 = __CFADD__(v64, v93);
                  unint64_t v65 = v64 + v93;
                  if (v23) {
                    goto LABEL_246;
                  }
                  if (a4)
                  {
                    if (*((void *)&v94 + 1) - (void)v94 < 0xCuLL) {
                      return 393220;
                    }
                    if (!ccder_blob_encode_body(&v94, 0xCuLL, &signature_algorithm_template)) {
                      return 393226;
                    }
                  }
                  uint64_t v93 = 12;
                  BOOL v23 = __CFADD__(v65, 12);
                  unint64_t v66 = v65 + 12;
                  if (v23) {
                    goto LABEL_246;
                  }
                  uint64_t Signature = CTDecompressSerialNumber(v11, (_OWORD *)a1, a2, v90, (unint64_t *)&v93);
                  if (Signature) {
                    return Signature;
                  }
                  BOOL v23 = __CFADD__(v66, v93);
                  unint64_t v5 = v66 + v93;
                  if (v23) {
                    goto LABEL_246;
                  }
                  if (a4)
                  {
                    if (*((void *)&v94 + 1) - (void)v94 < 5uLL) {
                      return 393220;
                    }
                    if (ccder_blob_encode_body(&v94, 5uLL, &version_template))
                    {
                      uint64_t v93 = 5;
                      BOOL v23 = __CFADD__(v5, 5);
                      unint64_t v67 = v5 + 5;
                      if (v23) {
                        goto LABEL_246;
                      }
                      if (!ccder_blob_encode_tl((uint64_t *)&v94, 0x2000000000000010uLL, v67)) {
                        return 393226;
                      }
LABEL_206:
                      size_t v68 = ccder_sizeof(0x2000000000000010, v67);
                      *(void *)int v99 = 0;
                      *(void *)&v98[0] = 0;
                      uint64_t Signature = CTDecompressGetSignature(v11, a1, a2, (unint64_t *)v98, (unsigned __int8 **)v99);
                      if (Signature) {
                        return Signature;
                      }
                      if (*(void *)v99 == -1) {
                        goto LABEL_246;
                      }
                      size_t v89 = v68 + 12;
                      if (v68 >= 0xFFFFFFFFFFFFFFF4) {
                        goto LABEL_246;
                      }
                      uint64_t v69 = ccder_sizeof(3, *(void *)v99 + 1);
                      if (__CFADD__(v89, v69)) {
                        goto LABEL_246;
                      }
                      unint64_t v70 = ccder_sizeof_tl(0x2000000000000010, v89 + v69);
                      unint64_t v5 = v70;
                      if (a4)
                      {
                        unint64_t v71 = v70 + v68;
                        if (__CFADD__(v70, v68)) {
                          goto LABEL_246;
                        }
                        if (v71 > a5) {
                          return 393220;
                        }
                        if (v70 > v91) {
                          goto LABEL_242;
                        }
                        unsigned int v72 = (const void *)*((void *)&v94 + 1);
                        if (!((uint64_t)(*((void *)&v94 + 1) - a4) >= 0
                             ? *((void *)&v94 + 1) >= a4
                             : *((void *)&v94 + 1) < a4))
                          goto LABEL_242;
                        *(void *)&long long v94 = a4;
                        *((void *)&v94 + 1) = a4 + a5;
                        if ((unint64_t)v72 > v12) {
                          goto LABEL_241;
                        }
                        if ((unint64_t)v72 < a4) {
                          goto LABEL_241;
                        }
                        if (v68 > v12 - (unint64_t)v72) {
                          goto LABEL_241;
                        }
                        unint64_t v74 = a4 + v70;
                        if (a4 + v70 > v12 || v74 < a4 || v68 > v12 - v74) {
                          goto LABEL_241;
                        }
                        memmove((void *)(a4 + v70), v72, v68);
                        if (v71 >= 0xFFFFFFFFFFFFFFF4) {
                          goto LABEL_246;
                        }
                        if (v71 + 12 > a5) {
                          return 393220;
                        }
                        if (__CFADD__(v74, v68)) {
                          goto LABEL_242;
                        }
                        unint64_t v75 = v74 + v68;
                        if (v12 < v74 + v68 || v75 < a4 || v12 - (v74 + v68) < 0xC) {
                          goto LABEL_241;
                        }
                        *(_DWORD *)(v75 + 8) = 33752125;
                        *(void *)unint64_t v75 = 0xCE48862A08060A30;
                      }
                      uint64_t Signature = CTDecompressSignature(v11, a1, a2, v90, (unint64_t *)&v93);
                      if (Signature) {
                        return Signature;
                      }
                      a3 = (unsigned char *)(v89 + v93);
                      if (__CFADD__(v89, v93)) {
                        goto LABEL_246;
                      }
                      if (!a4) {
                        goto LABEL_243;
                      }
                      uint64_t v76 = &a3[v5];
                      if (__CFADD__(v5, a3)) {
                        goto LABEL_246;
                      }
                      uint64_t Signature = 393220;
                      if ((unint64_t)v76 > a5) {
                        return Signature;
                      }
                      if (v5 <= v91)
                      {
                        if (a4 + v5 <= v12 && a4 + v5 >= a4)
                        {
                          *(void *)&long long v94 = a4;
                          *((void *)&v94 + 1) = a4 + v5;
                          if ((ccder_blob_encode_tl((uint64_t *)&v94, 0x2000000000000010uLL, (unint64_t)a3) & 1) == 0) {
                            return 393226;
                          }
                          goto LABEL_244;
                        }
                        goto LABEL_241;
                      }
LABEL_242:
                      __break(0x5513u);
LABEL_243:
                      uint64_t v76 = &a3[v5];
                      if (!__CFADD__(a3, v5))
                      {
LABEL_244:
                        if (v92)
                        {
                          uint64_t Signature = 0;
                          void *v92 = v76;
                          return Signature;
                        }
                        return 0;
                      }
LABEL_246:
                      __break(0x5500u);
                      return 0;
                    }
                    return 393226;
                  }
LABEL_205:
                  uint64_t v93 = 5;
                  BOOL v23 = __CFADD__(v5, 5);
                  unint64_t v67 = v5 + 5;
                  if (v23) {
                    goto LABEL_246;
                  }
                  goto LABEL_206;
                }
              }
LABEL_241:
              __break(0x5519u);
              goto LABEL_242;
            }
            return Signature;
          }
          unsigned int v55 = v11 - 164;
        }
        else
        {
          unsigned int v55 = v11 - 4;
          if (v11 < 4)
          {
            char v56 = 0;
            unint64_t v57 = 0;
            int v58 = &endOfTime;
            __int16 v59 = nibbleToAsciiByte;
            unint64_t v5 = 25;
            goto LABEL_171;
          }
        }
        uint64_t Signature = 393218;
        if (v55 >= 2) {
          return Signature;
        }
        goto LABEL_170;
      }
      if (*((void *)&v94 + 1) - (void)v94 >= v28)
      {
        if (__CFADD__(a1, v29)) {
          goto LABEL_242;
        }
        if (a1 + v29 < a1 || a2 - v29 < 0x20) {
          goto LABEL_241;
        }
        if (ccder_encode_extension((const void *)(a1 + v29), 0x20uLL, &CTOidAppleMFI4Properties, 0xAuLL, 1, (uint64_t *)&v94))goto LABEL_95; {
      }
        }
      return 393220;
    }
    unint64_t v21 = ccder_sizeof_extension(0x24uLL, 0xAuLL, 0);
    uint64_t v22 = 124;
    if ((~v11 & 0xA0) == 0) {
      uint64_t v22 = 122;
    }
    uint64_t Signature = 393217;
    if (v22 + 36 > a2) {
      return Signature;
    }
    unint64_t v5 = v21;
    if (a4)
    {
      if (*((void *)&v94 + 1) - (void)v94 < v21) {
        return 393220;
      }
      if (__CFADD__(a1, v22)) {
        goto LABEL_242;
      }
      if (a1 + v22 < a1 || a2 - v22 < 0x24) {
        goto LABEL_241;
      }
      if (!ccder_encode_extension((const void *)(a1 + v22), 0x24uLL, &CTOidAppleMFI4ProductPlanUID, 0xAuLL, 0, (uint64_t *)&v94))return 393220; {
    }
      }
    else if (__CFADD__(a1, v22))
    {
      goto LABEL_242;
    }
    BOOL v23 = __CFADD__(v20, v5);
    v20 += v5;
    if (v23) {
      goto LABEL_246;
    }
    goto LABEL_45;
  }
  return v6;
}

uint64_t CTDecompress(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return CTDecompressGeneric(a1, a2, 0, a3, a4);
}

uint64_t CTCompressComputeBufferSize(unint64_t a1, uint64_t a2, void *a3)
{
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_16:
    __break(0x5519u);
  }
  if (a1 + a2 < a1) {
    goto LABEL_16;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v6;
  long long v31 = v6;
  long long v28 = v6;
  long long v29 = v6;
  long long v26 = v6;
  long long v27 = v6;
  long long v24 = v6;
  long long v25 = v6;
  long long v22 = v6;
  long long v23 = v6;
  long long v20 = v6;
  long long v21 = v6;
  long long v18 = v6;
  long long v19 = v6;
  v16[3] = v6;
  long long v17 = v6;
  v16[1] = v6;
  v16[2] = v6;
  v16[0] = v6;
  v15[0] = a1;
  v15[1] = a1 + a2;
  uint64_t v7 = X509CertificateParse((unsigned __int8 **)v16, (uint64_t)v15);
  if (v7) {
    return v7;
  }
  uint64_t v7 = 393218;
  int v9 = CTCompressedStyleFromCert((uint64_t)v16);
  if (v9 == 255) {
    return v7;
  }
  int v10 = v9;
  uint64_t result = CTNonVariableCompressedSizeForStyle(v9);
  if (result < 0) {
    return v7;
  }
  uint64_t v11 = result + v17;
  if (!__CFADD__(result, (void)v17))
  {
    if ((v10 - 162) >= 2 && (v10 - 2) > 1) {
      goto LABEL_13;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t result = CTParseExtensionValue(a1, a2, &CTOidAppleMFI4AccessoryData, 0xAuLL, &v13, &v14);
    if (result) {
      return result;
    }
    BOOL v12 = __CFADD__(v11, v14);
    v11 += v14;
    if (!v12)
    {
LABEL_13:
      uint64_t v7 = 0;
      if (a3) {
        *a3 = v11;
      }
      return v7;
    }
  }
  __break(0x5500u);
  return result;
}

uint64_t CTCompressedStyleFromCert(uint64_t a1)
{
  v11[0] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = 0xAAAAAAAAAAAAAAAALL;
  if (X509CertificateSubjectNameGetCommonName(a1 + 120, v11)) {
    return 255;
  }
  if (*(unsigned char *)(a1 + 265))
  {
    X509PolicySetFlagsForCommonNames(a1);
    uint64_t v3 = *(void *)(a1 + 240);
    if ((v3 & 0x400000000) != 0)
    {
      int v4 = 0;
LABEL_12:
      if (compare_octet_string_partial((uint64_t)&MFi4RootName, (uint64_t)v11)) {
        return v4 | 5u;
      }
      else {
        return v4 | 4u;
      }
    }
    if ((v3 & 0x800000000) != 0)
    {
      int v4 = 160;
      goto LABEL_12;
    }
    return 255;
  }
  if ((~*(void *)(a1 + 240) & 0xC00000000) != 0) {
    return 255;
  }
  if (compare_octet_string_partial((uint64_t)&MFi4AccessoryCAName, (uint64_t)v11))
  {
    if (compare_octet_string_partial((uint64_t)&MFi4AttestationCAName, (uint64_t)v11)) {
      return 255;
    }
    int v5 = 160;
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v6 = CTParseExtensionValue(*(void *)a1, *(void *)(a1 + 8), &CTOidAppleMFI4AccessoryData, 0xAuLL, &v9, &v10);
  int v7 = CTParseExtensionValue(*(void *)a1, *(void *)(a1 + 8), &CTOidAppleMFI4ProductPlanUID, 0xAuLL, &v9, &v10);
  unsigned int v8 = v5 | 2;
  if (v6) {
    unsigned int v8 = v5;
  }
  if (!v7) {
    unsigned int v8 = v5 | 1;
  }
  if (v7 | v6) {
    return v8;
  }
  else {
    return v5 | 3u;
  }
}

uint64_t CTNonVariableCompressedSizeForStyle(int a1)
{
  if (!(!v2 & v1))
  {
    uint64_t result = 124;
    switch(a1)
    {
      case 0:
      case 2:
        return result;
      case 1:
      case 3:
        return 160;
      case 4:
      case 5:
        goto LABEL_7;
      default:
        JUMPOUT(0);
    }
  }
  switch(a1)
  {
    case 160:
    case 162:
      uint64_t result = 122;
      break;
    case 161:
    case 163:
      uint64_t result = 158;
      break;
    case 164:
    case 165:
LABEL_7:
      uint64_t result = 98;
      break;
    default:
      uint64_t result = -1;
      break;
  }
  return result;
}

uint64_t CTCompress(unint64_t a1, uint64_t a2, unsigned char *a3, size_t a4)
{
  size_t v33 = 0;
  uint64_t result = CTCompressComputeBufferSize(a1, a2, &v33);
  uint64_t v9 = result;
  if (result) {
    return v9;
  }
  uint64_t v9 = 393220;
  if (!a4 || v33 > a4) {
    return v9;
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v10;
  long long v32 = v10;
  long long v29 = v10;
  long long v30 = v10;
  long long v27 = v10;
  long long v28 = v10;
  long long v25 = v10;
  long long v26 = v10;
  _DWORD v23[2] = v10;
  long long v24 = v10;
  v23[0] = v10;
  v23[1] = v10;
  long long v21 = v10;
  long long v22 = v10;
  *(_OWORD *)__src = v10;
  *(_OWORD *)unsigned int __n = v10;
  v18[1] = v10;
  _DWORD v18[2] = v10;
  v18[0] = v10;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_47;
  }
  unint64_t v16 = a1;
  unint64_t v17 = a1 + a2;
  uint64_t v11 = X509CertificateParse((unsigned __int8 **)v18, (uint64_t)&v16);
  if (v11) {
    return v11;
  }
  bzero(a3, a4);
  uint64_t result = CTCompressedStyleFromCert((uint64_t)v18);
  if (result == 255) {
    return 393218;
  }
  *a3 = result;
  if ((result & 4) == 0)
  {
    if ((~result & 0xA0) != 0) {
      uint64_t result = CTCompressMFiLeaf((uint64_t)v18, (unint64_t)a3, a4);
    }
    else {
      uint64_t result = CTCompressAttestationLeaf((unint64_t *)v18, (unint64_t)a3, a4);
    }
    goto LABEL_20;
  }
  if (a3 != (unsigned char *)-1)
  {
    uint64_t result = CTCompressGetCommonNameSuffixPointer((uint64_t)v23 + 8);
    if (!result)
    {
      uint64_t v9 = 393224;
      goto LABEL_23;
    }
    if (a4 < 9)
    {
LABEL_23:
      bzero(a3, a4);
      return v9;
    }
    *(void *)(a3 + 1) = *(void *)result;
    if ((unint64_t)(a3 + 1) <= 0xFFFFFFFFFFFFFFF7)
    {
      memset(v35, 170, sizeof(v35));
      uint64_t result = X509CertificateParseValidity((uint64_t)v18, &v35[2], v35);
      if (result) {
        goto LABEL_20;
      }
      memset(v39, 170, 14);
      uint64_t result = CTGetGeneralizedTime((uint64_t)&v35[2], (unint64_t)v39);
      if (result) {
        goto LABEL_20;
      }
      if (a4 < 0x17) {
        goto LABEL_18;
      }
      *(void *)(a3 + 9) = v39[0];
      *(void *)(a3 + 15) = *(void *)((char *)v39 + 6);
      if ((unint64_t)(a3 + 9) <= 0xFFFFFFFFFFFFFFF1)
      {
        uint64_t result = CTGetGeneralizedTime((uint64_t)v35, (unint64_t)v39);
        if (result) {
          goto LABEL_20;
        }
        if (a4 < 0x25) {
          goto LABEL_18;
        }
        *(void *)(a3 + 23) = v39[0];
        *(void *)(a3 + 29) = *(void *)((char *)v39 + 6);
        if ((unint64_t)(a3 + 23) > 0xFFFFFFFFFFFFFFF1) {
          goto LABEL_47;
        }
        uint64_t result = CTCompressGetCommonNameSuffixPointer((uint64_t)&v22 + 8);
        if (!result)
        {
          uint64_t result = 393224;
          goto LABEL_20;
        }
        if (a4 < 0x2D)
        {
LABEL_18:
          uint64_t result = 393220;
          goto LABEL_20;
        }
        *(void *)(a3 + 37) = *(void *)result;
        if ((unint64_t)(a3 + 37) > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_47;
        }
        char v38 = -86;
        *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v36 = v12;
        long long v37 = v12;
        memset(v34, 170, sizeof(v34));
        uint64_t result = X509CertificateParseSPKI((unint64_t *)&v21 + 1, 0, v34, &v34[2]);
        if (result) {
          goto LABEL_20;
        }
        uint64_t result = compressECPublicKey(&v34[2], (int **)v34, (char *)&v36, 33);
        if (result) {
          goto LABEL_20;
        }
        if (a4 < 0x4E) {
          goto LABEL_18;
        }
        long long v13 = v37;
        *(_OWORD *)(a3 + 45) = v36;
        *(_OWORD *)(a3 + 61) = v13;
        a3[77] = v38;
        if ((unint64_t)(a3 + 45) <= 0xFFFFFFFFFFFFFFDELL)
        {
          uint64_t result = 393221;
          if (!*((void *)&v24 + 1) || (void)v25 != 20) {
            goto LABEL_20;
          }
          if (a4 < 0x62) {
            goto LABEL_18;
          }
          long long v14 = **((_OWORD **)&v24 + 1);
          *(_DWORD *)(a3 + 94) = *(_DWORD *)(*((void *)&v24 + 1) + 16);
          *(_OWORD *)(a3 + 78) = v14;
          if ((unint64_t)(a3 + 78) <= 0xFFFFFFFFFFFFFFEBLL)
          {
            uint64_t result = 655619;
            if (__src[1])
            {
              size_t v15 = __n[0];
              if (__n[0] - 73 >= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t result = 393220;
                if (__n[0] + 98 <= a4)
                {
                  uint64_t result = (uint64_t)memcpy(a3 + 98, __src[1], __n[0]);
                  if (!__CFADD__(a3 + 98, v15))
                  {
                    uint64_t result = 0;
                    goto LABEL_20;
                  }
                  goto LABEL_47;
                }
              }
            }
LABEL_20:
            uint64_t v9 = result;
            if (!result) {
              return 0;
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_47:
  __break(0x5513u);
  return result;
}

uint64_t CTCompressAttestationLeaf(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if (a2 == -1) {
    goto LABEL_65;
  }
  uint64_t v6 = 393220;
  uint64_t result = CTCompressGetCommonNameSuffixPointer((uint64_t)(a1 + 15));
  if (!result) {
    return 393224;
  }
  if (a3 < 9) {
    return v6;
  }
  unint64_t v8 = a2 + 1;
  if (a2 + 1 >= a2)
  {
    unint64_t v9 = a2 + a3;
    if (v8 <= a2 + a3)
    {
      *(void *)(a2 + 1) = *(void *)result;
      if (v8 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_65;
      }
      memset(v34, 170, sizeof(v34));
      uint64_t result = X509CertificateParseValidity((uint64_t)a1, &v34[2], v34);
      if (result) {
        return result;
      }
      memset(v38, 170, 14);
      uint64_t result = CTGetGeneralizedTime((uint64_t)&v34[2], (unint64_t)v38);
      if (result) {
        return result;
      }
      if (a3 < 0x17) {
        return 393220;
      }
      long long v10 = (void *)(a2 + 9);
      if (a2 + 9 >= a2 && (unint64_t)v10 <= v9)
      {
        *long long v10 = v38[0];
        *(void *)(a2 + 15) = *(void *)((char *)v38 + 6);
        if ((unint64_t)v10 > 0xFFFFFFFFFFFFFFF1) {
          goto LABEL_65;
        }
        uint64_t result = CTGetGeneralizedTime((uint64_t)v34, (unint64_t)v38);
        if (result) {
          return result;
        }
        if (a3 < 0x25) {
          return 393220;
        }
        uint64_t v11 = (void *)(a2 + 23);
        if (a2 + 23 >= a2 && (unint64_t)v11 <= v9)
        {
          *uint64_t v11 = v38[0];
          *(void *)(a2 + 29) = *(void *)((char *)v38 + 6);
          if ((unint64_t)v11 > 0xFFFFFFFFFFFFFFF1) {
            goto LABEL_65;
          }
          char v37 = -86;
          *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v35 = v12;
          long long v36 = v12;
          memset(v33, 170, sizeof(v33));
          uint64_t result = X509CertificateParseSPKI(a1 + 11, 0, v33, &v33[2]);
          if (result) {
            return result;
          }
          uint64_t result = compressECPublicKey(&v33[2], (int **)v33, (char *)&v35, 33);
          if (result) {
            return result;
          }
          if (a3 < 0x46) {
            return 393220;
          }
          long long v13 = (_OWORD *)(a2 + 37);
          if (a2 + 37 >= a2 && (unint64_t)v13 <= v9)
          {
            long long v14 = v36;
            _OWORD *v13 = v35;
            *(_OWORD *)(a2 + 53) = v14;
            *(unsigned char *)(a2 + 69) = v37;
            if ((unint64_t)v13 > 0xFFFFFFFFFFFFFFDELL) {
              goto LABEL_65;
            }
            size_t v15 = (_OWORD *)a1[31];
            uint64_t result = 393222;
            if (!v15 || a1[32] != 32) {
              return result;
            }
            if (a3 < 0x66) {
              return 393220;
            }
            unint64_t v16 = (_OWORD *)(a2 + 70);
            if (a2 + 70 >= a2 && (unint64_t)v16 <= v9)
            {
              long long v17 = v15[1];
              *unint64_t v16 = *v15;
              *(_OWORD *)(a2 + 86) = v17;
              if ((unint64_t)v16 > 0xFFFFFFFFFFFFFFDFLL) {
                goto LABEL_65;
              }
              unint64_t v18 = a1[21];
              uint64_t result = 393221;
              if (!v18 || a1[22] != 20) {
                return result;
              }
              if (a3 < 0x7A) {
                return 393220;
              }
              long long v19 = (_OWORD *)(a2 + 102);
              if (a2 + 102 >= a2 && (unint64_t)v19 <= v9)
              {
                long long v20 = *(_OWORD *)v18;
                *(_DWORD *)(a2 + 118) = *(_DWORD *)(v18 + 16);
                *long long v19 = v20;
                if ((unint64_t)v19 > 0xFFFFFFFFFFFFFFEBLL) {
                  goto LABEL_65;
                }
                long long v21 = (_OWORD *)(a2 + 122);
                __src = 0;
                size_t __n = 0;
                if (CTParseExtensionValue(*a1, a1[1], &CTOidAppleMFI4ProductPlanUID, 0xAuLL, &__src, &__n))
                {
                  uint64_t v22 = 122;
                }
                else
                {
                  uint64_t result = 393222;
                  if (!__src || __n != 36) {
                    return result;
                  }
                  if (a3 < 0x9E) {
                    return 393220;
                  }
                  if ((unint64_t)v21 < a2 || (unint64_t)v21 > v9) {
                    goto LABEL_67;
                  }
                  long long v27 = *(_OWORD *)__src;
                  long long v28 = *((_OWORD *)__src + 1);
                  *(_DWORD *)(a2 + 154) = *((_DWORD *)__src + 8);
                  *long long v21 = v27;
                  *(_OWORD *)(a2 + 138) = v28;
                  if ((unint64_t)v21 > 0xFFFFFFFFFFFFFFDBLL) {
                    goto LABEL_65;
                  }
                  long long v21 = (_OWORD *)(a2 + 158);
                  uint64_t v22 = 158;
                }
                long long v23 = (const void *)a1[7];
                uint64_t result = 655619;
                if (!v23) {
                  return result;
                }
                size_t v24 = a1[8];
                if (v24 - 73 < 0xFFFFFFFFFFFFFFFDLL) {
                  return result;
                }
                size_t v25 = v24 + v22;
                if (v24 + v22 > a3) {
                  return 393220;
                }
                if ((unint64_t)v21 <= v9 && (unint64_t)v21 >= a2 && v24 <= v9 - (unint64_t)v21)
                {
                  memcpy(v21, v23, v24);
                  unint64_t v26 = a1[8];
                  if (__CFADD__(v21, v26)) {
                    goto LABEL_65;
                  }
                  if (CTParseExtensionValue(*a1, a1[1], &CTOidAppleMFI4AccessoryData, 0xAuLL, &__src, &__n))return 0; {
                  if (!__src)
                  }
                    return 393222;
                  size_t v29 = __n;
                  uint64_t result = 393220;
                  if (__n + v25 > a3) {
                    return result;
                  }
                  long long v30 = (char *)v21 + v26;
                  if ((unint64_t)v21 + v26 <= v9
                    && (unint64_t)v30 >= a2
                    && __n <= v9 - (unint64_t)v30)
                  {
                    memcpy((char *)v21 + v26, __src, __n);
                    if (!__CFADD__(v30, v29)) {
                      return 0;
                    }
LABEL_65:
                    __break(0x5513u);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_67:
  __break(0x5519u);
  return result;
}

uint64_t CTCompressMFiLeaf(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a2 == -1) {
    goto LABEL_69;
  }
  uint64_t v3 = (unint64_t *)result;
  uint64_t v4 = 393220;
  int v5 = *(_OWORD **)(result + 136);
  if (v5) {
    BOOL v6 = *(void *)(result + 144) == 16;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 393223;
  }
  if (a3 < 0x11) {
    return v4;
  }
  unint64_t v9 = (_OWORD *)(a2 + 1);
  if (a2 + 1 >= a2)
  {
    unint64_t v10 = a2 + a3;
    if ((unint64_t)v9 <= a2 + a3)
    {
      *unint64_t v9 = *v5;
      if ((unint64_t)v9 > 0xFFFFFFFFFFFFFFEFLL) {
        goto LABEL_69;
      }
      uint64_t result = CTCompressGetCommonNameSuffixPointer(result + 120);
      if (!result) {
        return 393224;
      }
      if (a3 < 0x19) {
        return v4;
      }
      unint64_t v11 = a2 + 17;
      if (a2 + 17 >= a2 && v11 <= v10)
      {
        *(void *)(a2 + 17) = *(void *)result;
        if (v11 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_69;
        }
        v35[0] = 0xAAAAAAAAAAAAAAAALL;
        v35[1] = 0xAAAAAAAAAAAAAAAALL;
        uint64_t result = X509CertificateParseValidity((uint64_t)v3, v35, 0);
        if (result) {
          return result;
        }
        *(void *)((char *)v39 + 6) = 0xAAAAAAAAAAAAAAAALL;
        v39[0] = 0xAAAAAAAAAAAAAAAALL;
        uint64_t result = CTGetGeneralizedTime((uint64_t)v35, (unint64_t)v39);
        if (result) {
          return result;
        }
        if (a3 < 0x27) {
          return 393220;
        }
        long long v12 = (void *)(a2 + 25);
        if (a2 + 25 >= a2 && (unint64_t)v12 <= v10)
        {
          *long long v12 = v39[0];
          *(void *)(a2 + 31) = *(void *)((char *)v39 + 6);
          if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFF1) {
            goto LABEL_69;
          }
          char v38 = -86;
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v36 = v13;
          long long v37 = v13;
          memset(v34, 170, sizeof(v34));
          uint64_t result = X509CertificateParseSPKI(v3 + 11, 0, v34, &v34[2]);
          if (result) {
            return result;
          }
          uint64_t result = compressECPublicKey(&v34[2], (int **)v34, (char *)&v36, 33);
          if (result) {
            return result;
          }
          if (a3 < 0x48) {
            return 393220;
          }
          long long v14 = (_OWORD *)(a2 + 39);
          if (a2 + 39 >= a2 && (unint64_t)v14 <= v10)
          {
            long long v15 = v37;
            _OWORD *v14 = v36;
            *(_OWORD *)(a2 + 55) = v15;
            *(unsigned char *)(a2 + 71) = v38;
            if ((unint64_t)v14 > 0xFFFFFFFFFFFFFFDELL) {
              goto LABEL_69;
            }
            unint64_t v16 = (_OWORD *)v3[31];
            uint64_t result = 393222;
            if (!v16 || v3[32] != 32) {
              return result;
            }
            if (a3 < 0x68) {
              return 393220;
            }
            long long v17 = (_OWORD *)(a2 + 72);
            if (a2 + 72 >= a2 && (unint64_t)v17 <= v10)
            {
              long long v18 = v16[1];
              _OWORD *v17 = *v16;
              *(_OWORD *)(a2 + 88) = v18;
              if ((unint64_t)v17 > 0xFFFFFFFFFFFFFFDFLL) {
                goto LABEL_69;
              }
              unint64_t v19 = v3[21];
              uint64_t result = 393221;
              if (!v19 || v3[22] != 20) {
                return result;
              }
              if (a3 < 0x7C) {
                return 393220;
              }
              long long v20 = (_OWORD *)(a2 + 104);
              if (a2 + 104 >= a2 && (unint64_t)v20 <= v10)
              {
                long long v21 = *(_OWORD *)v19;
                *(_DWORD *)(a2 + 120) = *(_DWORD *)(v19 + 16);
                *long long v20 = v21;
                if ((unint64_t)v20 > 0xFFFFFFFFFFFFFFEBLL) {
                  goto LABEL_69;
                }
                uint64_t v22 = (_OWORD *)(a2 + 124);
                __src = 0;
                size_t __n = 0;
                if (CTParseExtensionValue(*v3, v3[1], &CTOidAppleMFI4ProductPlanUID, 0xAuLL, &__src, &__n))
                {
                  uint64_t v23 = 124;
                }
                else
                {
                  uint64_t result = 393222;
                  if (!__src || __n != 36) {
                    return result;
                  }
                  if (a3 < 0xA0) {
                    return 393220;
                  }
                  if ((unint64_t)v22 < a2 || (unint64_t)v22 > v10) {
                    goto LABEL_71;
                  }
                  long long v28 = *(_OWORD *)__src;
                  long long v29 = *((_OWORD *)__src + 1);
                  *(_DWORD *)(a2 + 156) = *((_DWORD *)__src + 8);
                  *uint64_t v22 = v28;
                  *(_OWORD *)(a2 + 140) = v29;
                  if ((unint64_t)v22 > 0xFFFFFFFFFFFFFFDBLL) {
                    goto LABEL_69;
                  }
                  uint64_t v22 = (_OWORD *)(a2 + 160);
                  uint64_t v23 = 160;
                }
                size_t v24 = (const void *)v3[7];
                uint64_t result = 655619;
                if (!v24) {
                  return result;
                }
                size_t v25 = v3[8];
                if (v25 - 73 < 0xFFFFFFFFFFFFFFFDLL) {
                  return result;
                }
                size_t v26 = v25 + v23;
                if (v25 + v23 > a3) {
                  return 393220;
                }
                if ((unint64_t)v22 <= v10 && (unint64_t)v22 >= a2 && v25 <= v10 - (unint64_t)v22)
                {
                  memcpy(v22, v24, v25);
                  unint64_t v27 = v3[8];
                  if (__CFADD__(v22, v27)) {
                    goto LABEL_69;
                  }
                  if (CTParseExtensionValue(*v3, v3[1], &CTOidAppleMFI4AccessoryData, 0xAuLL, &__src, &__n))return 0; {
                  if (!__src)
                  }
                    return 393222;
                  size_t v30 = __n;
                  uint64_t result = 393220;
                  if (__n + v26 > a3) {
                    return result;
                  }
                  long long v31 = (char *)v22 + v27;
                  if ((unint64_t)v22 + v27 <= v10
                    && (unint64_t)v31 >= a2
                    && __n <= v10 - (unint64_t)v31)
                  {
                    memcpy((char *)v22 + v27, __src, __n);
                    if (!__CFADD__(v31, v30)) {
                      return 0;
                    }
LABEL_69:
                    __break(0x5513u);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_71:
  __break(0x5519u);
  return result;
}

uint64_t CTDecompressIssuer(int a1, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = 393218;
  if (a1 <= 159)
  {
    unint64_t v11 = &mfi_ca_subject;
    if (a1 < 4)
    {
      long long v12 = &attestation_leaf_subject;
      uint64_t v13 = 57;
      unint64_t v14 = 107;
      uint64_t v15 = 17;
      goto LABEL_14;
    }
    if (a1 != 4)
    {
      if (a1 != 5) {
        return result;
      }
      long long v12 = &attestation_leaf_subject;
      uint64_t v13 = 57;
      unint64_t v14 = 107;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if ((a1 - 160) >= 4)
  {
    if (a1 == 164)
    {
LABEL_12:
      unint64_t v11 = &root_subject;
      long long v12 = &leaf_5280_extensions_template;
      uint64_t v13 = 39;
      unint64_t v14 = 89;
      goto LABEL_13;
    }
    if (a1 != 165) {
      return result;
    }
  }
  unint64_t v11 = &attestation_ca_subject;
  long long v12 = &root_subject;
  uint64_t v13 = 58;
  unint64_t v14 = 108;
LABEL_13:
  uint64_t v15 = 1;
LABEL_14:
  uint64_t result = 393217;
  if ((v15 | 8uLL) > a3) {
    return result;
  }
  if (!a4) {
    goto LABEL_35;
  }
  unint64_t v17 = *a4;
  unint64_t v16 = a4[1];
  if (v16 - *a4 < v14) {
    return 393220;
  }
  if (v17 > v16 || v11 > v12 || v14 > v12 - v11)
  {
LABEL_40:
    __break(0x5519u);
    return result;
  }
  uint64_t result = ccder_blob_encode_body(a4, v14, v11);
  if (!result) {
    return 393226;
  }
  unint64_t v18 = a4[1];
  if (__CFADD__(v18, v13)
    || ((unint64_t v19 = (void *)(v18 + v13), (uint64_t)((uint64_t)v19 - v17) >= 0)
      ? (BOOL v20 = (unint64_t)v19 >= v17)
      : (BOOL v20 = (unint64_t)v19 < v17),
        !v20 || __CFADD__(a2, v15)))
  {
    __break(0x5513u);
    goto LABEL_40;
  }
  if (v16 - (unint64_t)v19 < 8) {
    goto LABEL_40;
  }
  if (v17 > (unint64_t)v19) {
    goto LABEL_40;
  }
  if ((unint64_t)v19 > v16) {
    goto LABEL_40;
  }
  long long v21 = (void *)(a2 + v15);
  if (a2 + v15 > a2 + a3 || (unint64_t)v21 < a2 || a3 - v15 < 8) {
    goto LABEL_40;
  }
  *unint64_t v19 = *v21;
LABEL_35:
  uint64_t result = 0;
  if (a5) {
    *a5 = v14;
  }
  return result;
}

uint64_t CTDecompressSerialNumber(int a1, _OWORD *a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t result = 393218;
  if (a1 <= 159)
  {
    BOOL v11 = a1 >= 4;
    unsigned int v12 = a1 - 4;
    if (!v11)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = 1;
      unint64_t v16 = 16;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if ((a1 - 160) >= 4)
  {
    unsigned int v12 = a1 - 164;
LABEL_7:
    if (v12 >= 2) {
      return result;
    }
    unint64_t v14 = v29;
    uint64_t v13 = v31;
    uint64_t v15 = 45;
    goto LABEL_9;
  }
  unint64_t v14 = v29;
  uint64_t v13 = v31;
  uint64_t v15 = 37;
LABEL_9:
  unint64_t v16 = 20;
LABEL_10:
  unint64_t v17 = ccder_sizeof(2, v16);
  uint64_t result = 393217;
  if (v15 + v16 > a3) {
    return result;
  }
  char v30 = -86;
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _DWORD v29[2] = v18;
  v29[3] = v18;
  v29[0] = v18;
  v29[1] = v18;
  if (!v14)
  {
    if (!__CFADD__(a2, v15))
    {
      uint64_t v13 = (char *)a2 + a3;
      unint64_t v19 = (char *)a2 + v15;
      unint64_t v14 = a2;
      if (!a4) {
        goto LABEL_37;
      }
      goto LABEL_21;
    }
LABEL_41:
    __break(0x5513u);
LABEL_42:
    __break(0x5519u);
    goto LABEL_43;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a2, v15)) {
    goto LABEL_41;
  }
  if ((char *)a2 + a3 < (char *)a2 + v15 || (_OWORD *)((char *)a2 + v15) < a2 || a3 - v15 <= 0x20) {
    goto LABEL_42;
  }
  unint64_t v27 = (unint64_t)a2 + v15;
  unint64_t v28 = 33;
  uint64_t result = decompressECPublicKey((uint64_t)&v27, (int **)&CTOidSECP256r1, (char *)v29, 65);
  unint64_t v19 = v14;
  if (result) {
    return result;
  }
  if (!a4) {
    goto LABEL_37;
  }
LABEL_21:
  unint64_t v20 = *a4;
  unint64_t v21 = a4[1];
  if (v21 - *a4 < v17) {
    return 393220;
  }
  if (v14 > (_OWORD *)v19 || v20 > v21 || v19 > v13 || v16 > v13 - v19) {
    goto LABEL_42;
  }
  if (!ccder_blob_encode_body_tl(a4, 2uLL, v16, v19)) {
    return 393226;
  }
  uint64_t v22 = ccder_sizeof_tag(2);
  uint64_t result = ccder_sizeof_len(v16);
  uint64_t v23 = v22 + result;
  if (__CFADD__(v22, result))
  {
LABEL_43:
    __break(0x5500u);
    return result;
  }
  uint64_t v24 = a4[1];
  if (__CFADD__(v24, v23)) {
    goto LABEL_41;
  }
  size_t v25 = (unsigned char *)(v24 + v23);
  if (!((uint64_t)&v25[-v20] >= 0 ? (unint64_t)v25 >= v20 : (unint64_t)v25 < v20)) {
    goto LABEL_41;
  }
  if ((unint64_t)v25 >= v21 || (unint64_t)v25 < v20) {
    goto LABEL_42;
  }
  *v25 &= ~0x80u;
LABEL_37:
  uint64_t result = 0;
  if (a5) {
    *a5 = v17;
  }
  return result;
}

unint64_t CTDecompressGetSignature(int a1, unint64_t a2, unint64_t a3, unint64_t *a4, unsigned __int8 **a5)
{
  uint64_t v9 = 393217;
  unint64_t result = CTNonVariableCompressedSizeForStyle(a1);
  if ((result & 0x8000000000000000) != 0) {
    return 393218;
  }
  unint64_t v11 = result;
  if (result + 70 > a3) {
    return v9;
  }
  unint64_t v14 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (~a2 < a3 || result > ~a2) {
    goto LABEL_20;
  }
  unint64_t v12 = a2 + result;
  if (a2 + result > a2 + a3 || v12 < a2)
  {
LABEL_19:
    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }
  unint64_t v14 = (unsigned __int8 *)(a2 + result);
  unint64_t v15 = a2 + a3;
  unint64_t v16 = 0;
  unint64_t result = ccder_blob_decode_tl(&v14, 0x2000000000000010, &v16);
  if ((result & 1) == 0) {
    return 393225;
  }
  uint64_t v13 = &v14[v16 - v12];
  if (__CFADD__(v16, &v14[-v12])) {
    goto LABEL_21;
  }
  if (!v13) {
    return 393225;
  }
  if (!__CFADD__(v11, v13))
  {
    if ((unint64_t)&v13[v11] > a3) {
      return v9;
    }
    uint64_t v9 = 0;
    if (!a4 || !a5) {
      return v9;
    }
    if ((unint64_t)v13 <= a2 + a3 - v12)
    {
      uint64_t v9 = 0;
      *a4 = v12;
      *a5 = v13;
      return v9;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(0x5500u);
  return result;
}